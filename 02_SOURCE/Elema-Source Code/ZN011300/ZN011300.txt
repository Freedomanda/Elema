*&---------------------------------------------------------------------*
*&  REPORT ZN011300                                                    *
*&         入金予定作成（売上）                                        *
*&---------------------------------------------------------------------*
*&  機能    指定した照合締日の照合金額をもとに、
*&          入金予定データを作成する。
*&  作成日   : 2012/02/28
*&  作成者   : K.KAJISA(solfis)
*&---------------------------------------------------------------------*
*&  変更履歴 : 2012/03/22 H.KOMIYAMA(solfis)
*&  変更内容 : レイアウトF4ヘルプ形式変更
*&---------------------------------------------------------------------*
*&  変更履歴 : 2012/03/27 K.KAJISA(SOLFIS)                             *
*&  変更内容 : インデックス対応                                        *
*&---------------------------------------------------------------------*
*&  変更履歴 : 2012/09/03  K.FURUYA(SOLFIS)
*&  変更内容 : 振込は2千円以上の制限廃止
*&---------------------------------------------------------------------*
*& YYYY/MM/DD  Programar         Description
*& 2012/10/16  ISID              ES-UP
*&---------------------------------------------------------------------*
REPORT ZN011300
NO STANDARD PAGE HEADING
LINE-SIZE  170
LINE-COUNT 58
MESSAGE-ID YN01.
*----------------------------------------------------------------------*
*   構造/テーブル定義
*----------------------------------------------------------------------*
INCLUDE <ICON>.


* 初期提案用 外部データ
TYPES:BEGIN OF TYP_YN110,
VRFCTON  TYPE YN110-VRFCTON, "得意先コード
GJAHR    TYPE YN110-GJAHR,   "会計年度
SLPDOC   TYPE YN110-SLPDOC,  "外部番号
DTLDOC   TYPE YN110-DTLDOC,  "外部明細番号
KNETXAMT TYPE YN110-KNETXAMT,"税込金額
WAERS    TYPE YN110-WAERS,   "通貨コード
END OF TYP_YN110.

* 初期提案用 入金予定（売上）
TYPES:BEGIN OF TYP_ZN005_NEW,
KUNNR    TYPE ZN005-KUNNR,   "得意先コード
CZFBDT   TYPE ZN005-CZFBDT,  "照合締日
SEQ      TYPE ZN005-SEQ,     "SEQ
WAERS    TYPE ZN005-WAERS,   "通貨
IWRBTR   TYPE ZN005-IWRBTR,  "支払予定額
AUFLG    TYPE ZN005-AUFLG,   "会計振替
IKUNNR   TYPE ZN005-IKUNNR,  "入金先
*     会計振込がONのデータ用
AUDAT    TYPE ZN005-AUDAT,   "会計振替日
AUTIM    TYPE ZN005-AUTIM,   "会計振替時刻
AUUSR    TYPE ZN005-AUUSR,   "会計振替ユーザ
END OF TYP_ZN005_NEW.

* 処理対象得意先
TYPES:BEGIN OF TYP_MAIN_KUN,
KUNNR          TYPE ZN005-KUNNR,   "得意先コード(請求先)
WAERS          TYPE YN110-WAERS,   "通貨コード
KNETXAMT       TYPE YN110-KNETXAMT,"税込金額
IWRBTR         TYPE YN110-KNETXAMT,"入金予定額
ERRMSG(200)    TYPE C,             "エラーテキスト
*     入金消込がONのデータ用
AUFLG          TYPE ZN005-AUFLG,   "入金消込
AUDAT          TYPE ZN005-AUDAT,   "入金消込日
AUTIM          TYPE ZN005-AUTIM,   "入金消込時刻
AUUSR          TYPE ZN005-AUUSR,   "入金消込ユーザ
END OF TYP_MAIN_KUN.

* マスタ系
TYPES:BEGIN OF TYP_KN_MASTER,
*     KNA1
KUNNR TYPE KNA1-KUNNR,"得意先コード
NAME1 TYPE KNA1-NAME1,"名称1
*     KNB1
ZWELS    TYPE KNB1-ZWELS,"考慮される支払方法一覧
ZTERM_B1 TYPE KNB1-ZTERM,"支払条件キー
*     KNVV
WAERS    TYPE KNVV-WAERS,"通貨
ZTERM_VV TYPE KNVV-ZTERM,"支払条件キー
END OF TYP_KN_MASTER.

* 相殺取引先/少数コードマスタ
TYPES:BEGIN OF TYP_KNVP,
KUNNR      TYPE KNVP-KUNNR,    "得意先
LIFNR      TYPE KNVP-LIFNR,    "仕入先
MINDK      TYPE LFB1-MINDK,    "少数コード
END OF TYP_KNVP.

* 一時データ
TYPES:BEGIN OF TYP_UPDATA,
KUNNR       TYPE ZN005-KUNNR,   "得意先コード
WAERS       TYPE YN210-WAERS,   "通貨コード
KNETXAMT    TYPE YN210-KNETXAMT,"税込金額
ZTERM_P     TYPE ZN007-ZTERM_PZ,"条件（支払日）
ZTERM_S     TYPE ZN007-ZTERM_SZ,"条件（サイト）
ZLSCH       TYPE ZN007-ZLSCH_Z, "支払方法
END OF TYP_UPDATA.

* カウンタ
TYPES:BEGIN OF TYP_CNT,
*      INPUT TYPE I,
*      OK    TYPE I,
ERR   TYPE I,
END OF TYP_CNT.
*----------------------------------------------------------------------*
*   内部テーブル定義
*----------------------------------------------------------------------*
* 初期提案用 外部データ
DATA:T_YN110 TYPE STANDARD TABLE OF TYP_YN110,
W_YN110 TYPE TYP_YN110.

* 初期提案用 入金予定（売上）
DATA:T_ZNN05_NEW TYPE SORTED TABLE OF TYP_ZN005_NEW
WITH UNIQUE KEY KUNNR CZFBDT SEQ,
W_ZNN05_NEW TYPE TYP_ZN005_NEW.

* 相殺取引先マスタ
DATA:T_KNVP TYPE SORTED TABLE OF TYP_KNVP
WITH NON-UNIQUE KEY KUNNR,
W_KNVP TYPE TYP_KNVP.

* 規定外マスタ
DATA:T_ZN008 TYPE SORTED TABLE OF ZN008
WITH UNIQUE KEY KUNNR WAERS SEQ,
W_ZN008 TYPE ZN008.

* 照合期間（仕入）
DATA:T_ZN004 TYPE SORTED TABLE OF ZN004
WITH UNIQUE KEY BUKRS KUNNR,
W_ZN004 TYPE ZN004.
* 対象得意先レンジ
DATA:T_RANGE_KUN TYPE RANGE OF ZN005-KUNNR WITH HEADER LINE.

* １得意先ごとの支払方法割り当て用テーブル更新用一時データ
DATA:T_UPDATA TYPE STANDARD TABLE OF TYP_UPDATA,
W_UPDATA TYPE TYP_UPDATA.

* テーブル更新用内部テーブル
DATA:T_ZN005_UPD TYPE STANDARD TABLE OF ZN005,
W_ZN005_UPD TYPE ZN005.

* 処理対象得意先
DATA:T_MAIN_KUN       TYPE STANDARD TABLE OF TYP_MAIN_KUN,
W_MAIN_KUN       TYPE TYP_MAIN_KUN.

* マスタ
DATA:T_KN_MASTER      TYPE SORTED TABLE OF TYP_KN_MASTER
WITH UNIQUE KEY KUNNR,
W_KN_MASTER      TYPE TYP_KN_MASTER.

* 相殺後再計算用 入金予定処理
DATA:T_ZN005_SOSAI    TYPE SORTED TABLE OF ZN005
WITH UNIQUE KEY BUKRS KUNNR CZFBDT SEQ,
W_ZN005_SOSAI    TYPE ZN005.

* 相殺後再計算用 入金予定処理(支払方法=S)の集計対象外
DATA:T_ZN005_SOSAI_S    TYPE STANDARD TABLE OF ZN005,
W_ZN005_SOSAI_S    TYPE ZN005.

* カウンタ
DATA:W_CNT TYPE TYP_CNT.

*----------------------------------------------------------------------*
*   変数定義
*----------------------------------------------------------------------*
DATA:
W_ERR_FLG      TYPE CHAR1.  "エラーフラグ(ONなら選択画面に戻る)

*----------------------------------------------------------------------*
*   定数定義
*----------------------------------------------------------------------*
CONSTANTS:
C_PULAS(1)      TYPE C VALUE '+',
C_ON(1)         TYPE C VALUE 'X',
C_ETC_9         TYPE ZN007-ZLSCH_Z VALUE '9', "その他
C_FAC_Z         TYPE ZN007-ZLSCH_Z VALUE 'Z', "ファクタリング
C_FAC_K         TYPE ZN007-ZLSCH_Z VALUE 'K', "京都
C_TE_B          TYPE ZN007-ZLSCH_Z VALUE 'B', "手形
C_KOKUNAI_T     TYPE ZN007-ZLSCH_Z VALUE 'T', "国内振込
*  C_A             TYPE ZN005-PZLSPR  VALUE 'A', "支払保留
C_W(1)          TYPE C             VALUE 'W', "
C_SOSAI         TYPE ZN005-IZLSCH  VALUE 'S', "支払方法 相殺
*  C_MINDK         TYPE LFB1-MINDK    VALUE '02',"支払日相殺
C_SOSAI_KIJITU   TYPE LFB1-MINDK  VALUE SPACE, "締日相殺
C_SOSAI_HARAIBI  TYPE LFB1-MINDK  VALUE '01',  "払日相殺
C_SOSAI_TOKUI    TYPE LFB1-MINDK  VALUE '02',  "得意先全額相殺
C_SOSAI_SHIIREI  TYPE LFB1-MINDK  VALUE '03',  "仕入先全額相殺

C_JPY           TYPE ZN007-WAERS VALUE 'JPY',
C_KIHON(1)      TYPE C VALUE '1',           "規定外 基本条件
C_INIT_PARZA    TYPE KNVP-PARZA VALUE '000'."相殺取引先取得用

*★★★★★★↓↓ALV一覧時にコピー↓↓★★★★★★
*----------------------------------------------------------------------*
*   ALV一覧表示にて必要な変数
*----------------------------------------------------------------------*
* ALV出力データ用
TYPES:BEGIN OF TYP_OUTPUT,      "出力用構造
* Mod ES-UP 2012/10/16 -->
*      ICON      TYPE ICON,      "信号機
ICON      TYPE ICON-id,      "信号機
* Mod ES-UP 2012/10/16 <--
KEKA(200) TYPE C,         "処理結果
NAME1     TYPE KNA1-NAME1."得意先名称
INCLUDE STRUCTURE ZN005.  "入金予定データ
TYPES:END   OF TYP_OUTPUT.

DATA: T_OUTPUT   TYPE STANDARD TABLE OF TYP_OUTPUT,
W_OUTPUT   TYPE  TYP_OUTPUT.
* PGID退避用
DATA: G_PGID     TYPE SYCPROG.
* ALV出力用
TYPE-POOLS SLIS.
DATA: W_LAYOUT      TYPE SLIS_LAYOUT_ALV,     "ALV出力レイアウト
W_FIELDCAT    TYPE SLIS_FIELDCAT_ALV,   "ALV出力項目設定
T_FIELDCAT    TYPE SLIS_T_FIELDCAT_ALV, "ALV出力項目設定
W_REPID       TYPE SY-REPID,            "ALV出力用：プログラムID
W_EDISVARIANT TYPE DISVARIANT,          "ALV出力バリアント
T_EVENT       TYPE SLIS_T_EVENT,        "イベント
W_EVENT       LIKE LINE OF T_EVENT,
T_HEAD        TYPE SLIS_T_LISTHEADER,   "ヘッダ
W_HEAD        LIKE LINE OF T_HEAD,
W_PRINT       TYPE SLIS_PRINT_ALV,
W_SETTINGS    TYPE LVC_S_GLAY.

*----------------------------------------------------------------------*
*    選択画面
*----------------------------------------------------------------------*
* データ選択
SELECTION-SCREEN:BEGIN OF BLOCK BL1 WITH FRAME TITLE TEXT-001.
PARAMETERS:P_BUK     TYPE BUKRS     OBLIGATORY.      "会社コード
PARAMETERS:P_DAY     TYPE ZNECZFBDT OBLIGATORY.      "締日
SELECT-OPTIONS S_KUN FOR W_OUTPUT-KUNNR.
SELECTION-SCREEN:END   OF BLOCK BL1.


* ALVバリアント項目
SELECTION-SCREEN:BEGIN OF BLOCK BL2 WITH FRAME TITLE TEXT-002.
PARAMETERS:P_TEST   TYPE C AS CHECKBOX DEFAULT 'X'."テスト実行
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: P_SYOKI TYPE C RADIOBUTTON GROUP GR1 DEFAULT 'X'.
SELECTION-SCREEN COMMENT 4(18) TEXT-004.         "初期提案作成
PARAMETERS: P_SOSAI TYPE C RADIOBUTTON GROUP GR1.
SELECTION-SCREEN COMMENT 26(18) TEXT-005.        "締日相殺後　再計算
SELECTION-SCREEN END OF LINE.
PARAMETERS:P_VARI   TYPE SLIS_VARI.               "レイアウト
SELECTION-SCREEN:END   OF BLOCK BL2.

* システム項目
SELECTION-SCREEN:BEGIN OF BLOCK BL3 WITH FRAME TITLE TEXT-003.
PARAMETERS:P_PAR    TYPE KNVP-PARVW OBLIGATORY.    "取引先機能
PARAMETERS:P_VKO    TYPE VKORG OBLIGATORY.         "販売組織
PARAMETERS:P_VTW    TYPE VTWEG OBLIGATORY.         "流通チャネル
PARAMETERS:P_SPA    TYPE SPART OBLIGATORY.         "製品部門
SELECTION-SCREEN:END   OF BLOCK BL3.

*----------------------------------------------------------------------*
*  AT SELECTION-SCREEN
*----------------------------------------------------------------------*
AT SELECTION-SCREEN.
PERFORM F_DATA_CHECK.

*----------------------------------------------------------------------*
*    バリアント検索ヘルプ
*----------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_VARI.
PERFORM VARIANT_F4_HELP  CHANGING P_VARI.
*&---------------------------------------------------------------------*
*&      Form  VARIANT_F4_HELP
*&---------------------------------------------------------------------*
*       バリアント検索ヘルプ
*----------------------------------------------------------------------*
*      <--P_P_VARI  検索ヘルプで選択されたバリアント名
*----------------------------------------------------------------------*
FORM VARIANT_F4_HELP CHANGING P_P_VARI TYPE SLIS_VARI.
*** 2012/03/22 MOD START ***
*  DATA:LW_VARI   TYPE SLIS_VARI.  "属性変換用
*
*  G_PGID = SY-REPID.
** ALVバリアントの検索ヘルプ
*  CALL FUNCTION 'HR_F4_FOR_ALV_VARIANT'
*    EXPORTING
*      CURRENT_REPORT       = G_PGID
*    IMPORTING
*      VARIANT              = LW_VARI.
*
** ヘルプ画面より選択されたバリアント名を画面項目に設定
*  IF NOT LW_VARI IS INITIAL.
*    P_P_VARI = LW_VARI.
*  ENDIF.
DATA:
LW_DISVARIANT TYPE DISVARIANT.

CLEAR:
LW_DISVARIANT,
P_P_VARI.

LW_DISVARIANT-REPORT = SY-REPID.

CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
EXPORTING
IS_VARIANT         = LW_DISVARIANT
I_SAVE             = 'A'
I_DISPLAY_VIA_GRID = 'X'
IMPORTING
ES_VARIANT         = LW_DISVARIANT
EXCEPTIONS
NOT_FOUND          = 1
PROGRAM_ERROR      = 2
OTHERS             = 3.

IF SY-SUBRC = 0.
P_P_VARI = LW_DISVARIANT-VARIANT.
ENDIF.
*** 2012/03/22 MOD END   ***
ENDFORM.                    " VARIANT_F4_HELP
*----------------------------------------------------------------------*
*    ALVヘッダをつける場合
*----------------------------------------------------------------------*
TOP-OF-PAGE.
PERFORM HEADER_WRITE.

*★★★★★★↑↑ALV一覧時にコピー↑↑★★★★★★

*----------------------------------------------------------------------*
*    処理部
*----------------------------------------------------------------------*
START-OF-SELECTION.
* 初期処理
PERFORM INIT_PROC.
CHECK W_ERR_FLG IS INITIAL. "エラーの場合は即終了

* データ取得部
PERFORM MAKE_ALV_DATA.
CHECK W_ERR_FLG IS INITIAL. "エラーの場合は即終了

* テーブル更新
PERFORM EDIT_TABLE.
CHECK W_ERR_FLG IS INITIAL. "エラーの場合は即終了

*★★★★★★↓↓ALV一覧時にコピー↓↓★★★★★★
* ALVリスト出力
PERFORM OUTPUT_ALV.
*★★★★★★↑↑ALV一覧時にコピー↑↑★★★★★★
*★★★★★★↓↓ALV一覧時にコピー↓↓★★★★★★
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_ALV
*&---------------------------------------------------------------------*
*       ALVリスト出力
*----------------------------------------------------------------------*
FORM OUTPUT_ALV.

* 項目属性編集
PERFORM ALV_SET_FIELDCAT.
* その他編集
PERFORM ALV_LAYOUT.
* ALV一覧出力
PERFORM ALV_CALL.

ENDFORM.                    " OUTPUT_ALV
*&---------------------------------------------------------------------*
*&      Form  HEADER_WRITE
*&---------------------------------------------------------------------*
*       ALVヘッダ編集
*----------------------------------------------------------------------*
FORM HEADER_WRITE.
DATA:LW_KEY      TYPE SLIS_LISTHEADER-KEY,
LW_INFO     TYPE SLIS_LISTHEADER-INFO,
LW_PAGNO(4) TYPE C.

* ヘッダに出力させたい文言を設定
* 見出し
PERFORM SET_HEADER USING 'H' '入金予定作成（売上）' SPACE.

*--- ページ
CLEAR: LW_INFO,
LW_KEY,
LW_PAGNO.

LW_PAGNO = SY-PAGNO.
CONDENSE LW_PAGNO.
CONCATENATE 'ページ　：'
LW_PAGNO
INTO LW_KEY.
PERFORM SET_HEADER USING 'S' SPACE LW_KEY.

*--- 処理日付
CLEAR LW_KEY.
CONCATENATE '処理日付：'
SY-DATUM+0(4) '/'
SY-DATUM+4(2) '/'
SY-DATUM+6(2)
INTO LW_KEY.
PERFORM SET_HEADER USING 'S' SPACE LW_KEY.

*--- 処理時刻
CLEAR LW_KEY.
CONCATENATE '処理時刻：'
SY-UZEIT+0(2) ':'
SY-UZEIT+2(2) ':'
SY-UZEIT+4(2)
INTO LW_KEY.
PERFORM SET_HEADER USING 'S' SPACE LW_KEY.

*--- ユーザID
CLEAR LW_KEY.
CONCATENATE 'ユーザID：' SY-UNAME INTO LW_KEY.
PERFORM SET_HEADER USING 'S' SPACE LW_KEY.

*--- 締日(選択画面の画面表示されているデータをヘッダに出力)
CLEAR:LW_INFO,LW_KEY.

WRITE P_DAY TO LW_INFO.
CONCATENATE TEXT-006 LW_INFO INTO LW_INFO.
PERFORM SET_HEADER USING 'S' LW_INFO '<<実行条件>>'.

CLEAR:LW_INFO,LW_KEY.
*--- 処理区分
IF P_SYOKI = C_ON.
CONCATENATE TEXT-007 TEXT-004 INTO LW_INFO.
ELSE.
CONCATENATE TEXT-007 TEXT-005 INTO LW_INFO.
ENDIF.
PERFORM SET_HEADER USING 'S' LW_INFO SPACE.
CLEAR:LW_INFO.

* テスト実行
IF P_TEST = C_ON.
LW_INFO = TEXT-008.
PERFORM SET_HEADER USING 'S' LW_INFO SPACE.
ENDIF.

**--- 対象件数
*  WRITE W_CNT-INPUT TO LW_WORK.
*  CONDENSE LW_WORK NO-GAPS.
*  CONCATENATE TEXT-009 LW_WORK INTO LW_WORK.
*  PERFORM SET_HEADER USING 'S' LW_WORK '<<実行結果>>'.
*  CLEAR:LW_WORK.

**--- 正常件数
*  WRITE W_CNT-OK TO LW_WORK.
*  CONDENSE LW_WORK NO-GAPS.
*  CONCATENATE TEXT-011 LW_WORK INTO LW_WORK.
*  PERFORM SET_HEADER USING 'S' LW_WORK SPACE.
*  CLEAR:LW_WORK.
*
*--- エラー件数
WRITE W_CNT-ERR TO LW_INFO.
CONDENSE LW_INFO NO-GAPS.
CONCATENATE TEXT-010 LW_INFO INTO LW_INFO.
PERFORM SET_HEADER USING 'S' LW_INFO '<<実行結果>>'.
CLEAR:LW_INFO,LW_KEY.

* ヘッダ出力
CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
EXPORTING
IT_LIST_COMMENTARY       = T_HEAD.

CLEAR:T_HEAD.

ENDFORM.                    " HEADER_WRITE
*&---------------------------------------------------------------------*
*&      Form  SET_HEADER
*&---------------------------------------------------------------------*
*       ヘッダ編集
*----------------------------------------------------------------------*
*      -->L_TYP    タイプ
*      -->L_INFO   編集内容2
*      -->L_KEY    編集内容1
*----------------------------------------------------------------------*
FORM SET_HEADER  USING     L_TYP   TYPE SLIS_LISTHEADER-TYP
L_INFO  TYPE SLIS_LISTHEADER-INFO
L_KEY   TYPE SLIS_LISTHEADER-KEY.
CLEAR W_HEAD.
W_HEAD-TYP  = L_TYP.
W_HEAD-INFO = L_INFO.
W_HEAD-KEY = L_KEY.
APPEND W_HEAD TO T_HEAD.

ENDFORM.                    " SET_HEADER
*&---------------------------------------------------------------------*
*&      Form  ALV_SET_FIELDCAT
*&---------------------------------------------------------------------*
*       項目属性編集
*----------------------------------------------------------------------*
FORM ALV_SET_FIELDCAT.
DATA:L_CNT TYPE I,
L_T_FIELDCAT    TYPE SLIS_T_FIELDCAT_ALV. "ALV出力項目設定

* PGID退避
G_PGID = SY-REPID.

* 項目名を編集する
CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
EXPORTING
*     I_PROGRAM_NAME               =
*     I_INTERNAL_TABNAME           =
I_STRUCTURE_NAME             = 'ZN005'
*     I_CLIENT_NEVER_DISPLAY       = 'X'
*     I_INCLNAME                   =
*     I_BYPASSING_BUFFER           =
*     I_BUFFER_ACTIVE              =
CHANGING
CT_FIELDCAT                  = L_T_FIELDCAT
EXCEPTIONS
INCONSISTENT_INTERFACE       = 1
PROGRAM_ERROR                = 2
OTHERS                       = 3.
IF SY-SUBRC = 0.
L_CNT = L_CNT + 1.
PERFORM U_FIELDCAT USING :
'ICON' 4 'ICON' '' '' '' '' '' L_CNT.

L_CNT = L_CNT + 1.
PERFORM U_FIELDCAT USING :
'KEKA' 200 'CHAR' '処理結果' '処理結果' '処理結果' '' '' L_CNT
.

L_CNT = L_CNT + 1.
PERFORM U_FIELDCAT USING :
'NAME1' 35 'CHAR' '名称' '名称' '名称' '' '' L_CNT.

LOOP AT L_T_FIELDCAT INTO W_FIELDCAT.
L_CNT = L_CNT + 1.
W_FIELDCAT-COL_POS = L_CNT.
APPEND W_FIELDCAT TO T_FIELDCAT.
ENDLOOP.
ENDIF.

ENDFORM.                    " ALV_SET_FIELDCAT

*&---------------------------------------------------------------------*
*&      Form  U_FIELDCAT
*&---------------------------------------------------------------------*
*  -->  P_FLDNM     項目名
*  -->  P_LEN       表示幅
*  -->  P_TYPE      DIC上の属性
*  -->  P_STEXT     テキスト(短
*  -->  P_MTEXT     テキスト(中
*  -->  P_LTEXT     テキスト(長
*  -->  P_CFIELD    通貨コード
*  -->  P_QFIELD    単位コード
*---------------------------------------------------------------------*
FORM U_FIELDCAT USING P_FLDNM    TYPE SLIS_FIELDCAT_ALV-FIELDNAME
P_LEN      TYPE SLIS_FIELDCAT_ALV-OUTPUTLEN
P_TYPE     TYPE SLIS_FIELDCAT_ALV-DATATYPE
*                      P_STEXT    TYPE SLIS_FIELDCAT_ALV-SELTEXT_S
P_STEXT    TYPE ANY
P_MTEXT    TYPE SLIS_FIELDCAT_ALV-SELTEXT_M
P_LTEXT    TYPE SLIS_FIELDCAT_ALV-SELTEXT_L
P_CFIELD   TYPE SLIS_FIELDCAT_ALV-CFIELDNAME
P_QFIELD   TYPE SLIS_FIELDCAT_ALV-QFIELDNAME
P_COL_POS  TYPE SY-CUCOL.
* ローカル変数
DATA L_FIELDCAT TYPE SLIS_FIELDCAT_ALV.
L_FIELDCAT-COL_POS   = P_COL_POS.
L_FIELDCAT-FIELDNAME = P_FLDNM.
L_FIELDCAT-OUTPUTLEN = P_LEN.
L_FIELDCAT-DATATYPE  = P_TYPE.
L_FIELDCAT-SELTEXT_S = P_STEXT.
L_FIELDCAT-SELTEXT_M = P_MTEXT.
L_FIELDCAT-SELTEXT_L = P_LTEXT.
L_FIELDCAT-CFIELDNAME = P_CFIELD.
L_FIELDCAT-QFIELDNAME = P_QFIELD.
APPEND L_FIELDCAT TO T_FIELDCAT.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ALV_LAYOUT
*&---------------------------------------------------------------------*
*       その他編集
*----------------------------------------------------------------------*
FORM ALV_LAYOUT.

* プログラムID取得
W_REPID = SY-REPID.
* レイアウト設定
W_LAYOUT-COLWIDTH_OPTIMIZE    = 'X'.   "ALV コントロール: 列幅の最適化
W_LAYOUT-DETAIL_INITIAL_LINES = 'X'.
W_LAYOUT-ZEBRA                = 'X'.

W_LAYOUT-GROUP_CHANGE_EDIT = 'X'.

* バリアント
IF NOT P_VARI IS INITIAL.
W_EDISVARIANT-REPORT  = G_PGID.
W_EDISVARIANT-VARIANT = P_VARI.
ENDIF.

* ALV印刷時用 設定項目
W_PRINT-NO_PRINT_LISTINFOS = 'X'.

* 印刷プレビュー設定
W_SETTINGS-NO_COLWOPT = C_ON.  "自動最適化禁止

* 処理イベントの取得
CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
EXPORTING
I_LIST_TYPE           = 0
IMPORTING
ET_EVENTS             = T_EVENT.

* イベント時にコールされるFORM名を設定
CLEAR W_EVENT.
READ TABLE T_EVENT INTO W_EVENT WITH KEY NAME = 'TOP_OF_PAGE'.
IF SY-SUBRC = 0.
W_EVENT-FORM = 'HEADER_WRITE'.
MODIFY T_EVENT INDEX SY-TABIX FROM W_EVENT.
ENDIF.

ENDFORM.                    " ALV_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  ALV_CALL
*&---------------------------------------------------------------------*
*       ALV一覧出力
*----------------------------------------------------------------------*
FORM ALV_CALL.
SORT T_OUTPUT BY KUNNR SEQ.

CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
EXPORTING
I_CALLBACK_PROGRAM      = W_REPID     "プログラム名
I_GRID_SETTINGS         = W_SETTINGS  "グリッド設定
IS_LAYOUT               = W_LAYOUT    "レイアウト定義
IS_PRINT                = W_PRINT
IT_FIELDCAT             = T_FIELDCAT  "構造定義
I_DEFAULT               = 'X'
I_SAVE                  = 'A'
IS_VARIANT              = W_EDISVARIANT
IT_EVENTS               = T_EVENT
TABLES
T_OUTTAB                = T_OUTPUT     "出力データ
EXCEPTIONS
PROGRAM_ERROR           = 1
OTHERS                  = 2.

IF SY-SUBRC <> 0.
MESSAGE S802 WITH 'REUSE_ALV_GRID_DISPLAY' SY-SUBRC.
STOP.
ENDIF.

ENDFORM.                    " ALV_CALL
*★★★★★★↑↑ALV一覧時にコピー↑↑★★★★★★
*&---------------------------------------------------------------------*
*&      Form  F_DATA_CHECK
*&---------------------------------------------------------------------*
*       選択画面の入力チェック
*----------------------------------------------------------------------*
FORM F_DATA_CHECK.
DATA:LW_BUKRS  TYPE BUKRS.
*   会社コード存在チェック
SELECT SINGLE BUKRS
INTO LW_BUKRS
FROM T001
WHERE BUKRS = P_BUK.
IF SY-SUBRC <> 0.
*-- 会社コード & はありません
MESSAGE E750 WITH P_BUK.
ENDIF.
ENDFORM.                    " F_DATA_CHECK
*&---------------------------------------------------------------------*
*&      Form  INIT_PROC
*&---------------------------------------------------------------------*
*       使用項目の初期化
*----------------------------------------------------------------------*
FORM INIT_PROC.

DATA:L_MSGV1 TYPE SY-MSGV1.

REFRESH:T_YN110,        "初期提案 外部データ
T_MAIN_KUN,     "処理対象の得意先
T_ZNN05_NEW,    "初期提案 入金予定データ
T_KN_MASTER,    "得意先マスタ
T_KNVP,         "相殺取引先マスタ
T_RANGE_KUN,    "処理対象得意先レンジ
T_UPDATA,       "１得意先の按分結果
T_ZN005_UPD,    "入金予定更新用データ
T_ZN005_SOSAI,  "相殺用入金予定データ
T_ZN005_SOSAI_S,"集計対象外データ
T_OUTPUT.       "ALV出力用データ

CLEAR  :W_YN110,        "初期提案 外部データ
W_MAIN_KUN,     "処理対象の得意先
W_ZNN05_NEW,    "初期提案 入金予定データ
W_KN_MASTER,    "得意先マスタ
W_KNVP,         "相殺取引先マスタ
W_UPDATA,       "１得意先の按分結果
W_ZN005_UPD,    "入金予定更新用データ
W_ZN005_SOSAI,  "相殺用入金予定データ
W_OUTPUT.       "ALV出力用データ


* 仕入先指定無しの場合のロック処理
IF S_KUN[] IS INITIAL.
CALL FUNCTION 'ENQUEUE_EZN005'
EXPORTING
MODE_ZN005           = 'E'
BUKRS                = P_BUK
CZFBDT               = P_DAY
EXCEPTIONS
FOREIGN_LOCK         = 1
SYSTEM_FAILURE       = 2
OTHERS               = 3.
IF SY-SUBRC <> 0.
*     & ロックエラー & がロックしています
L_MSGV1 = SY-MSGV1.
MESSAGE I756 WITH TEXT-E06 L_MSGV1.
W_ERR_FLG = C_ON.
ENDIF.
ENDIF.

ENDFORM.                    " INIT_PROC
*&---------------------------------------------------------------------*
*&      Form  MAKE_ALV_DATA
*&---------------------------------------------------------------------*
*       データ取得部
*----------------------------------------------------------------------*
FORM MAKE_ALV_DATA.
* 初期提案作成
IF P_SYOKI = C_ON.
PERFORM GET_DATA_SYOKI.
CHECK W_ERR_FLG IS INITIAL.

* 締日相殺後　再計算
ELSE.
PERFORM GET_DATA_SOSAI.
CHECK W_ERR_FLG IS INITIAL.
ENDIF.

PERFORM MAIN_SYORI.

ENDFORM.                    " MAKE_ALV_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_SYOKI
*&---------------------------------------------------------------------*
*       メインデータ処理
*----------------------------------------------------------------------*
*       <-- T_MAIN_KUN  今回処理対象の外部データの、得意先集計額データ
*       <-- T_KN_MASTER 得意先マスタ(一般/会社/販売組織)
*       <-- T_KNVP      相殺先少数コードマスタ
*       <-- T_ZN008     規定外マスタ
*       <-- T_ZN004     照合期間
*----------------------------------------------------------------------*
FORM GET_DATA_SYOKI.
*  外部データ取込
PERFORM GET_YN110.
CHECK W_ERR_FLG IS INITIAL.

*  登録済み入金予定データ取込
PERFORM GET_ZN005_SINKI.

*  処理対象仕入先判定
PERFORM CHECK_MAIN_KUN_SINKI.
CHECK W_ERR_FLG IS INITIAL.

* マスタデータの一括取得
PERFORM GET_MASTER.

ENDFORM.                    " GET_DATA_SYOKI
*&---------------------------------------------------------------------*
*&      Form  GET_YN110
*&---------------------------------------------------------------------*
*       外部データ取り込み
*----------------------------------------------------------------------*
FORM GET_YN110.
SELECT VRFCTON
GJAHR
SLPDOC
DTLDOC
KNETXAMT
WAERS
FROM YN110
INTO TABLE T_YN110
* 2012/03/27 MOD インデックス対応 START
*   WHERE VRFCTON IN S_KUN
*     AND BUKRS    = P_BUK
*     AND DELFLG   = SPACE
*     AND CZFBDT   = P_DAY.
WHERE BUKRS    = P_BUK
AND CZFBDT   = P_DAY
AND VRFCTON IN S_KUN
AND DELFLG   = SPACE.
* 2012/03/27 MOD インデックス対応 END
IF T_YN110[] IS INITIAL.
*   対象データがありません
MESSAGE S762(YN01).
W_ERR_FLG = C_ON.
ENDIF.

ENDFORM.                    " GET_YN110
*&---------------------------------------------------------------------*
*&      Form  GET_ZN005_SINKI
*&---------------------------------------------------------------------*
*       登録済み入金予定取得
*----------------------------------------------------------------------*
FORM GET_ZN005_SINKI.

SELECT KUNNR  "得意先コード
CZFBDT "照合締日
SEQ    "SEQ
WAERS  "通貨
IWRBTR "入金予定額
AUFLG  "入金消込
IKUNNR "入金先
AUDAT  "入金消込日
AUTIM  "入金消込時刻
AUUSR  "入金消込ユーザ
FROM ZN005
INTO TABLE T_ZNN05_NEW
WHERE BUKRS  = P_BUK
AND CZFBDT = P_DAY
AND KUNNR IN S_KUN.

ENDFORM.                    " GET_ZN005_SINKI
*&---------------------------------------------------------------------*
*&      Form  CHECK_MAIN_KUN_SINKI
*&---------------------------------------------------------------------*
*       処理対象得意先の判定
*----------------------------------------------------------------------*
FORM CHECK_MAIN_KUN_SINKI.

DATA:L_W_YN110 TYPE TYP_YN110.
SORT T_YN110 BY VRFCTON.
LOOP AT T_YN110 INTO W_YN110.
L_W_YN110 =  W_YN110.
AT NEW VRFCTON.
CLEAR W_MAIN_KUN.
W_MAIN_KUN-KUNNR = L_W_YN110-VRFCTON."得意先コード
W_MAIN_KUN-WAERS = L_W_YN110-WAERS.  "通貨コード
ENDAT.

*-- エラーチェック１
IF W_MAIN_KUN-WAERS <> L_W_YN110-WAERS.
*     外部データ内で、１得意先に複数通貨が混在しています。
W_MAIN_KUN-ERRMSG = TEXT-E01.
ENDIF.

*   外部データの税込み金額集計
W_MAIN_KUN-KNETXAMT = W_MAIN_KUN-KNETXAMT + L_W_YN110-KNETXAMT.

*  1得意先分の集計が終わったら
AT END OF VRFCTON.
*     既存の支払予定をチェック
PERFORM CHCK_KIZON_ZN005.
*     外部データの税込額と、入金予定額に差が有るか、
*     入金消込済みのデータが処理対象
IF W_MAIN_KUN-KNETXAMT <> W_MAIN_KUN-IWRBTR
OR W_MAIN_KUN-AUFLG <> SPACE.
*       処理対象の仕入先をロック
PERFORM CHECK_LOCK_KUNNR USING W_MAIN_KUN-KUNNR.
IF W_ERR_FLG IS INITIAL.
APPEND W_MAIN_KUN TO T_MAIN_KUN.
ELSE.
EXIT.
ENDIF.
ENDIF.
ENDAT.
ENDLOOP.
CHECK W_ERR_FLG IS INITIAL.

* 入金消込みずみで、外部データなしのレコードを追加
* 得意先をキーに入金予定を集計
LOOP AT T_ZNN05_NEW INTO W_ZNN05_NEW
WHERE NOT AUFLG IS INITIAL.
CLEAR:W_MAIN_KUN.
READ TABLE T_MAIN_KUN INTO W_MAIN_KUN
WITH KEY KUNNR = W_ZNN05_NEW-KUNNR.
IF SY-SUBRC <> 0.
W_MAIN_KUN-KUNNR    =  W_ZNN05_NEW-KUNNR.  "得意先コード
W_MAIN_KUN-WAERS    =  W_ZNN05_NEW-WAERS.  "通貨コード
W_MAIN_KUN-KNETXAMT =  W_ZNN05_NEW-IWRBTR. "税込金額
W_MAIN_KUN-ERRMSG   =  TEXT-E02.           "エラーテキスト
W_MAIN_KUN-AUFLG    =  W_ZNN05_NEW-AUFLG.  "入金消込
W_MAIN_KUN-AUDAT    =  W_ZNN05_NEW-AUDAT.  "入金消込日
W_MAIN_KUN-AUTIM    =  W_ZNN05_NEW-AUTIM.  "入金消込時刻
W_MAIN_KUN-AUUSR    =  W_ZNN05_NEW-AUUSR.  "入金消込ユーザ
*     処理対象の仕入先をロック
PERFORM CHECK_LOCK_KUNNR USING W_MAIN_KUN-KUNNR.
IF W_ERR_FLG IS INITIAL.
APPEND W_MAIN_KUN TO T_MAIN_KUN.
ELSE.
EXIT.
ENDIF.
ENDIF.
ENDLOOP.
CHECK W_ERR_FLG IS INITIAL.

IF T_MAIN_KUN[] IS INITIAL.
*   対象データがありません
MESSAGE S762(YN01).
W_ERR_FLG = C_ON.
ENDIF.

* 使用済みテーブル開放
FREE:T_YN110,T_ZNN05_NEW.

ENDFORM.                    " CHECK_MAIN_KUN_SINKI
*&---------------------------------------------------------------------*
*&      Form  CHCK_KIZON_ZN005
*&---------------------------------------------------------------------*
*       初期提案処理 既存支払い予定のチェック
*----------------------------------------------------------------------*
FORM CHCK_KIZON_ZN005.

* 得意先をキーに入金予定を集計
LOOP AT T_ZNN05_NEW INTO W_ZNN05_NEW
WHERE KUNNR = W_MAIN_KUN-KUNNR.

IF NOT W_ZNN05_NEW-AUFLG IS INITIAL.
*     既に消込済みです。
W_MAIN_KUN-ERRMSG = TEXT-E02.
W_MAIN_KUN-AUFLG  = W_ZNN05_NEW-AUFLG.
W_MAIN_KUN-AUDAT  = W_ZNN05_NEW-AUDAT.  "消込日
W_MAIN_KUN-AUTIM  = W_ZNN05_NEW-AUTIM.  "消込時刻
W_MAIN_KUN-AUUSR  = W_ZNN05_NEW-AUUSR.  "消込ユーザ
ENDIF.

*   支払予定額集計
W_MAIN_KUN-IWRBTR = W_MAIN_KUN-IWRBTR + W_ZNN05_NEW-IWRBTR.
ENDLOOP.

ENDFORM.                    " CHCK_KIZON_ZN005
*&---------------------------------------------------------------------*
*&      Form  CHECK_LOCK_KUNNR
*&---------------------------------------------------------------------*
*       処理対象得意先のロック
*----------------------------------------------------------------------*
FORM CHECK_LOCK_KUNNR USING P_KUNNR TYPE KUNNR.
DATA:L_MSGV1 TYPE SY-MSGV1.

* 得意先指定ありの場合のロック処理
IF NOT S_KUN[] IS INITIAL.
CALL FUNCTION 'ENQUEUE_EZN005'
EXPORTING
MODE_ZN005           = 'E'
BUKRS                = P_BUK
KUNNR                = P_KUNNR
CZFBDT               = P_DAY
EXCEPTIONS
FOREIGN_LOCK         = 1
SYSTEM_FAILURE       = 2
OTHERS               = 3.
IF SY-SUBRC <> 0.
*     & ロックエラー & がロックしています
L_MSGV1 = SY-MSGV1.
MESSAGE I756 WITH TEXT-E06 L_MSGV1.
W_ERR_FLG = C_ON.
ENDIF.
ENDIF.

ENDFORM.                    " CHECK_LOCK_KUNNR
*&---------------------------------------------------------------------*
*&      Form  GET_MASTER
*&---------------------------------------------------------------------*
*       マスタデータの取得
*----------------------------------------------------------------------*
FORM GET_MASTER.
* 得意先マスタ
SELECT
*     KNA1
KNA1~KUNNR    "得意先
KNA1~NAME1    "名称1
*     KNB1
KNB1~ZWELS    "支払方法
KNB1~ZTERM    "支払条件
*     KNVV
KNVV~WAERS    "通貨コード
KNVV~ZTERM    "支払条件
INTO TABLE T_KN_MASTER
FROM KNA1 INNER JOIN KNB1
ON KNB1~KUNNR = KNA1~KUNNR
INNER JOIN KNVV
ON KNVV~KUNNR = KNA1~KUNNR
WHERE KNA1~KUNNR IN S_KUN
AND KNB1~BUKRS = P_BUK
AND KNVV~VKORG = P_VKO
AND KNVV~VTWEG = P_VTW
AND KNVV~SPART = P_SPA.

* 相殺取引先/少数コードマスタ
SELECT
*     KNVP
KNVP~KUNNR "(得意先コード)
KNVP~LIFNR "(仕入先コード)
*     LFB1
LFB1~MINDK "(少数コード)
INTO TABLE T_KNVP
FROM KNVP INNER JOIN LFB1
ON LFB1~LIFNR = KNVP~LIFNR
WHERE KNVP~KUNNR IN S_KUN   " 選択画面：得意先コード
AND KNVP~VKORG =  P_VKO   " 選択画面の販売組織
AND KNVP~VTWEG =  P_VTW   " 選択画面の流通チャネル
AND KNVP~SPART =  P_SPA   " 選択画面の製品部門
AND KNVP~PARVW =  P_PAR   " 選択画面の相殺先取引先機能
AND KNVP~PARZA =  C_INIT_PARZA "000'固定
AND LFB1~BUKRS =  P_BUK. " 選択画面の会社コード

* 規定外マスタ
SELECT * INTO TABLE T_ZN008
FROM ZN008
WHERE KUNNR IN S_KUN.  "得意先

* 照合期間
SELECT * INTO TABLE T_ZN004
FROM ZN004
WHERE BUKRS = P_BUK
AND ( KUNNR IN S_KUN  "得意先
OR KUNNR = C_PULAS ).


ENDFORM.                    " GET_MASTER
*&---------------------------------------------------------------------*
*&      Form  MAIN_SYORI
*&---------------------------------------------------------------------*
*       メイン処理
*----------------------------------------------------------------------*
*       --> T_MAIN_KUN  今回処理対象の外部データの、得意先集計額データ
*       <-- T_RANGE_KUN 今回処理対象の得意先コード全件（レンジ)
*       <-- T_ZN005_UPD 今回登録する入金予定データ
*       <-- T_OUTPUT    ALVに出力する内部テーブル
*----------------------------------------------------------------------*
FORM MAIN_SYORI.
DATA:L_ERRFLG(1) TYPE C.
REFRESH:T_RANGE_KUN.

LOOP AT T_MAIN_KUN INTO W_MAIN_KUN.
*   初期化
CLEAR:W_OUTPUT,
L_ERRFLG.
REFRESH:T_UPDATA."一得意先毎に使う内部テーブルのクリア

*   マスタ取得
CLEAR:W_KN_MASTER.
READ TABLE T_KN_MASTER INTO W_KN_MASTER
WITH TABLE KEY KUNNR = W_MAIN_KUN-KUNNR.
*   エラーチェック
PERFORM ERR_CHECK_SYOKI  CHANGING L_ERRFLG.
IF L_ERRFLG = C_ON.
CONTINUE.
ENDIF.

*   規定外マスタによる支払方法判定処理
PERFORM CHECK_ZLSCH USING W_MAIN_KUN-KUNNR
W_MAIN_KUN-WAERS
W_MAIN_KUN-KNETXAMT
CHANGING L_ERRFLG.
IF L_ERRFLG = C_ON.
CONTINUE.
ENDIF.

*   ALVデータ、テーブル更新データ作成
IF NOT T_UPDATA[] IS INITIAL.
T_RANGE_KUN-SIGN   = 'I'.
T_RANGE_KUN-OPTION = 'EQ'.
T_RANGE_KUN-LOW    = W_MAIN_KUN-KUNNR.
APPEND T_RANGE_KUN.

PERFORM EDIT_ITAB_SINKI.
ENDIF.

ENDLOOP.

* 使用済み内部テーブル開放
FREE:T_MAIN_KUN,T_KN_MASTER,T_ZN004,T_UPDATA,T_ZN005_SOSAI_S.

ENDFORM.                    " MAIN_SYORI
*&---------------------------------------------------------------------*
*&      Form  ERR_CHECK_SYOKI
*&---------------------------------------------------------------------*
*       初期提案処理のエラーチェック
*----------------------------------------------------------------------*
*      <--L_ERRFLG エラーがあったら返す
*----------------------------------------------------------------------*
FORM ERR_CHECK_SYOKI CHANGING L_ERRFLG TYPE CHAR1.

* 1．通貨混在か国内振替済
IF NOT  W_MAIN_KUN-ERRMSG IS INITIAL.
PERFORM EDIT_ERR_DATA.
L_ERRFLG = C_ON.
EXIT.
ENDIF.

*   ２．照合クローズチェック
PERFORM CHEK_CLOSE USING W_MAIN_KUN-KUNNR
CHANGING L_ERRFLG.
IF L_ERRFLG = C_ON.
EXIT.
ENDIF.


ENDFORM.                    " ERR_CHECK_SYOKI
*&---------------------------------------------------------------------*
*&      Form  EDIT_ERR_DATA
*&---------------------------------------------------------------------*
*       エラーデータのALVへの書き込み
*----------------------------------------------------------------------*
FORM EDIT_ERR_DATA.
W_CNT-ERR = W_CNT-ERR + 1. "エラー件数カウント
CLEAR:W_OUTPUT.
WRITE ICON_RED_LIGHT AS ICON TO W_OUTPUT-ICON. "赤信号
W_OUTPUT-KEKA     = W_MAIN_KUN-ERRMSG.           "処理結果
W_OUTPUT-NAME1    = W_KN_MASTER-NAME1.           "得意先名称
W_OUTPUT-MANDT    = SY-MANDT.                    "クライアント
W_OUTPUT-BUKRS    = P_BUK.                       "会社コード
W_OUTPUT-KUNNR    = W_MAIN_KUN-KUNNR.            "得意先コード
W_OUTPUT-CZFBDT   = P_DAY.                       "照合締日
*  W_OUTPUT-SEQ     =  ."SEQ(エラーなので、なし)
*  W_OUTPUT-IZFBDT  =  ."入金予定日(エラーなので、なし)
*  W_OUTPUT-IZLSCH  =  ."支払方法
*  W_OUTPUT-IZTERM  =  ."サイト
W_OUTPUT-WAERS    = W_MAIN_KUN-WAERS.           "通貨コード
*  W_OUTPUT-IWRBTR  =  ."入金予定額(エラーなので、なし)
*  W_OUTPUT-IKUNNR  =  ."入金先
*  W_OUTPUT-ILIFNR  =  ."相殺先
*  W_OUTPUT-IMEMO   =  ."備考
W_OUTPUT-INSDT   =  SY-DATUM."登録日
W_OUTPUT-INSTM   =  SY-UZEIT."登録時刻
W_OUTPUT-INSUSR  =  SY-UNAME."登録ユーザ
IF NOT W_MAIN_KUN-AUFLG IS INITIAL.
W_OUTPUT-AUFLG = W_MAIN_KUN-AUFLG."入金消込
W_OUTPUT-AUDAT = W_MAIN_KUN-AUDAT."入金消込日
W_OUTPUT-AUTIM = W_MAIN_KUN-AUTIM."入金消込時刻
W_OUTPUT-AUUSR = W_MAIN_KUN-AUUSR."入金消込ユーザ
ENDIF.
*  W_OUTPUT-IBELNER =  ."決済伝票番号
*  W_OUTPUT-IGJAHR  =  ."決済会計年度
*  W_OUTPUT-IBUDAT  =  ."決済転記日
APPEND W_OUTPUT TO T_OUTPUT.
ENDFORM.                    " EDIT_ERR_DATA
*&---------------------------------------------------------------------*
*&      Form  CHEK_CLOSE
*&---------------------------------------------------------------------*
*       得意先コードによる、照合締日クローズチェック
*----------------------------------------------------------------------*
*      -->L_KUNNR   得意先
*      <--L_ERRFLG  エラーフラグ
*----------------------------------------------------------------------*
FORM CHEK_CLOSE USING    L_KUNNR  TYPE KUNNR
CHANGING L_ERRFLG TYPE CHAR1.
CLEAR:W_ZN004.
READ TABLE T_ZN004 INTO W_ZN004
WITH TABLE KEY BUKRS = P_BUK
KUNNR = L_KUNNR.
IF SY-SUBRC <> 0.
READ TABLE T_ZN004 INTO W_ZN004
WITH TABLE KEY BUKRS = P_BUK
KUNNR = C_PULAS.
ENDIF.

IF   W_ZN004-EDATE < P_DAY. "照合終了日 < 照合締日
L_ERRFLG = C_ON.
*   照合がクローズしていません。
W_MAIN_KUN-ERRMSG = TEXT-E04.
PERFORM EDIT_ERR_DATA.
ENDIF.

ENDFORM.                    " CHEK_CLOSE
*&---------------------------------------------------------------------*
*&      Form  CHECK_ZLSCH
*&---------------------------------------------------------------------*
*       支払方法決定
*----------------------------------------------------------------------*
*      -->L_KUNNR     得意先
*      -->L_WAERS     通貨コード
*      -->L_SUM       税込金額合計
*      <--L_ERRFLG    エラーフラグ
*----------------------------------------------------------------------*
FORM CHECK_ZLSCH USING    L_KUNNR   TYPE KUNNR
L_WAERS   TYPE WAERS
L_SUM     TYPE YN110-KNETXAMT
CHANGING   L_ERRFLG  TYPE CHAR1.

DATA:L_ZAN      TYPE YN110-KNETXAMT,
L_END(1)   TYPE C.
DATA:L_W_ZN008  TYPE ZN008.

CLEAR: W_UPDATA, L_END.
CLEAR:W_ZN008,L_W_ZN008.

*<どの規定外マスタを使用するかの分岐>---------START
*-- 【初期値提案】
IF P_SYOKI = C_ON.
*   相殺取引先でない場合
CLEAR:W_KNVP.
LOOP AT T_KNVP INTO W_KNVP
WHERE KUNNR = L_KUNNR.
EXIT.
ENDLOOP.
*   相殺取引先でない場合は少数コード関係なく閾値判定
IF W_KNVP-KUNNR <> L_KUNNR.
LOOP AT T_ZN008 INTO L_W_ZN008
WHERE KUNNR = L_KUNNR.
IF L_W_ZN008-LOWAMT <=  L_SUM.
IF W_ZN008-LOWAMT <= L_W_ZN008-LOWAMT.
W_ZN008 = L_W_ZN008.
ENDIF.
ENDIF.
ENDLOOP.
*   相殺取引先の場合は少数コードで分岐
ELSE.
CASE W_KNVP-MINDK.
*      締日相殺締
WHEN C_SOSAI_KIJITU .
LOOP AT T_ZN008 INTO W_ZN008
WHERE KUNNR = L_KUNNR.
IF W_ZN008-BASE_ZT = C_KIHON."1
EXIT.
ENDIF.
ENDLOOP.
**      相殺締
*        WHEN '01'.
*          LOOP AT T_ZN008 INTO W_ZN008
*            WHERE KUNNR = L_KUNNR.
*             IF W_ZN008-BASE_ZT = C_KIHON."1
*               EXIT.
*             ENDIF.
*          ENDLOOP.
*      支払日締
WHEN C_SOSAI_HARAIBI.
LOOP AT T_ZN008 INTO L_W_ZN008
WHERE KUNNR = L_KUNNR.
IF L_W_ZN008-LOWAMT <=  L_SUM.
IF W_ZN008-LOWAMT <= L_W_ZN008-LOWAMT.
W_ZN008 = L_W_ZN008.
ENDIF.
ENDIF.
ENDLOOP.
*      得意先全額
WHEN C_SOSAI_TOKUI.
*       エラーチェック
IF W_KN_MASTER-WAERS <> L_WAERS. "得意先マスタチェック
L_ERRFLG = C_ON.
*           マスタの通貨が不正です。
W_MAIN_KUN-ERRMSG = TEXT-E05.
PERFORM EDIT_ERR_DATA.
EXIT.
ENDIF.
PERFORM SET_UPDATA USING L_KUNNR              "得意先コード
L_WAERS              "通貨コード
L_SUM                "税込金額
W_KN_MASTER-ZTERM_VV "条件（支払日）
W_KN_MASTER-ZTERM_B1 "条件（サイト）
C_ETC_9.             "支払方法
EXIT."決定
*      仕入先全額
WHEN C_SOSAI_SHIIREI.
LOOP AT T_ZN008 INTO W_ZN008
WHERE KUNNR = L_KUNNR.
IF W_ZN008-BASE_ZT = C_KIHON."1
EXIT.
ENDIF.
ENDLOOP.
*     その他（有り得ない）
WHEN OTHERS.

ENDCASE.
ENDIF.
ELSE.
*【相殺再計算】
CLEAR:W_KNVP.
LOOP AT T_KNVP INTO W_KNVP
WHERE KUNNR = L_KUNNR.
EXIT.
ENDLOOP.
*-- 得意先全額相殺
IF W_KNVP-MINDK =  C_SOSAI_TOKUI .
*     エラーチェック
IF W_KN_MASTER-WAERS <> L_WAERS. "得意先マスタチェック
L_ERRFLG = C_ON.
*       マスタの通貨が不正です。
W_MAIN_KUN-ERRMSG = TEXT-E05.
PERFORM EDIT_ERR_DATA.
EXIT.
ENDIF.
PERFORM SET_UPDATA USING L_KUNNR              "得意先コード
L_WAERS              "通貨コード
L_SUM                "税込金額
W_KN_MASTER-ZTERM_VV "条件（支払日）
W_KN_MASTER-ZTERM_B1 "条件（サイト）
C_ETC_9.             "支払方法
EXIT."決定
*-- 他全て閾値
ELSE.
LOOP AT T_ZN008 INTO L_W_ZN008
WHERE KUNNR = L_KUNNR.
IF L_W_ZN008-LOWAMT <=  L_SUM.
IF W_ZN008-LOWAMT <= L_W_ZN008-LOWAMT.
W_ZN008 = L_W_ZN008.
ENDIF.
ENDIF.
ENDLOOP.
ENDIF.
ENDIF.
*<どの規定外マスタを使用するかの分岐>---------END
* この時点での W_ZN008 が、今回使用する規定外マスタ
*
* 読み込んだ規定外マスタの通貨コードをチェック
IF NOT W_ZN008-KUNNR IS INITIAL. "ZN008にあり
IF W_ZN008-WAERS <> L_WAERS.
L_ERRFLG = C_ON.
*     マスタの通貨が不正です。
W_MAIN_KUN-ERRMSG = TEXT-E05.
PERFORM EDIT_ERR_DATA.
EXIT. "エラーデータを作って終了
ENDIF.
ENDIF.
*<決まった規定外マスタをどう使うのかの分岐>---------START
CLEAR:L_ZAN.
* %モード
IF W_ZN008-PER1 <> 0. "1-分割（％）
PERFORM PERSENT_MODE USING L_KUNNR
L_WAERS
L_SUM
CHANGING L_ZAN.
** 金額モード
ELSEIF W_ZN008-PAY1 <> 0. "1-分割（金額）
PERFORM KINGAKU_MODE USING L_KUNNR
L_WAERS
L_SUM
CHANGING L_ZAN.
ELSE.
*   ％なし、金額なし判断
*   規定外マスタ自体がないなら得意先マスタモード
IF W_ZN008-KUNNR IS INITIAL. "ZN008になし
PERFORM KN_MASTER_MODE USING L_KUNNR
L_WAERS
L_SUM
CHANGING  L_ERRFLG.
IF  L_ERRFLG = C_ON."エラーあり
EXIT.
ENDIF.
*    規定外マスタありなら 最初から全額残モード
ELSE.
PERFORM SET_UPDATA USING L_KUNNR          "得意先コード
L_WAERS          "通貨コード
L_SUM            "税込金額
W_ZN008-ZTERM_PZ "条件（支払日）
W_ZN008-ZTERM_SZ "条件（サイト）
W_ZN008-ZLSCH_Z. "支払方法
ENDIF.
ENDIF.
*<決まった規定外マスタをどう使うのかの分岐>---------END
* 規定外マスタの１〜４でも集計額がまかなえない場合、残りを残額へ
* 残
IF L_ZAN <> 0.
PERFORM SET_UPDATA USING  L_KUNNR          "得意先コード
L_WAERS          "通貨コード
L_ZAN            "税込金額
W_ZN008-ZTERM_PZ "条件（支払日）
W_ZN008-ZTERM_SZ "条件（サイト）
W_ZN008-ZLSCH_Z. "支払方法
ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_UPDATA
*&---------------------------------------------------------------------*
*       テーブル更新用一時データ作成
*----------------------------------------------------------------------*
*      -->L_KUNNR    得意先
*      -->L_WAERS    通貨
*      -->L_SUM      支払予定額
*      -->L_ZTERM_P  支払条件(日)
*      -->L_ZTERM_S  支払条件(サイト)
*      -->L_ZLSCH    支払方法
*----------------------------------------------------------------------*
FORM SET_UPDATA USING    L_KUNNR   TYPE KUNNR
L_WAERS   TYPE WAERS
L_SUM     TYPE YN110-KNETXAMT
L_ZTERM_P TYPE ZN005-IZTERM
L_ZTERM_S TYPE ZN005-IZTERM
L_ZLSCH   TYPE ZN005-IZLSCH.

CLEAR:W_UPDATA.
W_UPDATA-KUNNR    = L_KUNNR.   "得意先コード
W_UPDATA-WAERS    = L_WAERS.   "通貨コード
W_UPDATA-KNETXAMT = L_SUM.     "税込金額
W_UPDATA-ZTERM_P  = L_ZTERM_P. "条件（支払日）
W_UPDATA-ZTERM_S  = L_ZTERM_S. "条件（サイト）
W_UPDATA-ZLSCH    = L_ZLSCH.   "支払方法
APPEND W_UPDATA TO T_UPDATA.

ENDFORM.                    " SET_UPDATA
*&---------------------------------------------------------------------*
*&      Form  PERSENT_MODE
*&---------------------------------------------------------------------*
*       ％での支払方法決定
*----------------------------------------------------------------------*
*      -->L_KUNNR     得意先
*      -->L_WAERS     通貨
*      -->L_SUM       税込金額合計
*----------------------------------------------------------------------*
FORM PERSENT_MODE USING  L_KUNNR   TYPE KUNNR
L_WAERS   TYPE WAERS
L_SUM     TYPE YN110-KNETXAMT
CHANGING L_ZAN     TYPE YN110-KNETXAMT.

DATA:L_SUM_ZAN TYPE YN210-KNETXAMT,
L_SIHARAI TYPE YN210-KNETXAMT.
L_SUM_ZAN = L_SUM.

* 条件１
CLEAR L_SIHARAI.
L_SIHARAI = L_SUM * ( W_ZN008-PER1 / 100 ).
PERFORM SET_UPDATA USING L_KUNNR          "得意先コード
L_WAERS          "通貨コード
L_SIHARAI        "税込金額
W_ZN008-ZTERM_P1 "条件（支払日）
W_ZN008-ZTERM_S1 "条件（サイト）
W_ZN008-ZLSCH_1. "支払方法
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.

CHECK L_SUM_ZAN <> 0.

* 条件2
IF  W_ZN008-PER2 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
L_SIHARAI = L_SUM * ( W_ZN008-PER2 / 100 ).
PERFORM SET_UPDATA USING L_KUNNR          "得意先コード
L_WAERS          "通貨コード
L_SIHARAI        "税込金額
W_ZN008-ZTERM_P2 "条件（支払日）
W_ZN008-ZTERM_S2 "条件（サイト）
W_ZN008-ZLSCH_2. "支払方法
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
ENDIF.
CHECK L_SUM_ZAN <> 0.

* 条件3
IF  W_ZN008-PER3 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
L_SIHARAI = L_SUM * ( W_ZN008-PER3 / 100 ).

PERFORM SET_UPDATA USING L_KUNNR          "得意先コード
L_WAERS          "通貨コード
L_SIHARAI        "税込金額
W_ZN008-ZTERM_P3 "条件（支払日）
W_ZN008-ZTERM_S3 "条件（サイト）
W_ZN008-ZLSCH_3. "支払方法
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
ENDIF.

CHECK L_SUM_ZAN <> 0.
* 条件4
IF  W_ZN008-PER4 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
L_SIHARAI = L_SUM * ( W_ZN008-PER4 / 100 ).

PERFORM SET_UPDATA USING L_KUNNR          "得意先コード
L_WAERS          "通貨コード
L_SIHARAI        "税込金額
W_ZN008-ZTERM_P4 "条件（支払日）
W_ZN008-ZTERM_S4 "条件（サイト）
W_ZN008-ZLSCH_4. "支払方法
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
ENDIF.

ENDFORM.                    " PERSENT_MODE
*&---------------------------------------------------------------------*
*&      Form  KINGAKU_MODE
*&---------------------------------------------------------------------*
*       支払方法決定 金額モード
*----------------------------------------------------------------------*
*      -->L_KUNNR    得意先
*      -->L_WAERS    通貨
*      -->L_SUM      支払予定額
*----------------------------------------------------------------------*
FORM KINGAKU_MODE USING    L_KUNNR TYPE KUNNR
L_WAERS TYPE WAERS
L_SUM   TYPE YN110-KNETXAMT
CHANGING L_ZAN   TYPE YN110-KNETXAMT.

DATA:L_SUM_ZAN TYPE YN210-KNETXAMT,
L_SIHARAI TYPE YN210-KNETXAMT.

L_SUM_ZAN = L_SUM.
L_ZAN = L_SUM_ZAN.
* 条件１
CLEAR L_SIHARAI.
IF L_SUM_ZAN  >= W_ZN008-PAY1. "条件金額が合計値を越える
L_SIHARAI = W_ZN008-PAY1.
ELSE.                          "条件金額で合計値をまかなえない
L_SIHARAI = L_SUM_ZAN.
ENDIF.

PERFORM SET_UPDATA USING L_KUNNR          "得意先コード(請求先)
L_WAERS          "通貨コード
L_SIHARAI        "税込金額
W_ZN008-ZTERM_P1 "条件（支払日）
W_ZN008-ZTERM_S1 "条件（サイト）
W_ZN008-ZLSCH_1. "支払方法
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
CHECK L_SUM_ZAN <> 0.

* 条件2
IF  W_ZN008-PAY2 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
IF L_SUM_ZAN  >= W_ZN008-PAY2. "条件金額が合計値を越える
L_SIHARAI = W_ZN008-PAY2.
ELSE.                          "条件金額で合計値をまかなえない
L_SIHARAI = L_SUM_ZAN.
ENDIF.

PERFORM SET_UPDATA USING L_KUNNR          "得意先コード(請求先)
L_WAERS          "通貨コード
L_SIHARAI        "税込金額
W_ZN008-ZTERM_P2 "条件（支払日）
W_ZN008-ZTERM_S2 "条件（サイト）
W_ZN008-ZLSCH_2. "支払方法
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
CHECK L_SUM_ZAN <> 0.
ENDIF.

* 条件3
IF  W_ZN008-PAY3 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
IF L_SUM_ZAN  >= W_ZN008-PAY3. "条件金額が合計値を越える
L_SIHARAI = W_ZN008-PAY3.
ELSE.                          "条件金額で合計値をまかなえない
L_SIHARAI = L_SUM_ZAN.
ENDIF.

PERFORM SET_UPDATA USING L_KUNNR          "得意先コード(請求先)
L_WAERS          "通貨コード
L_SIHARAI        "税込金額
W_ZN008-ZTERM_P3 "条件（支払日）
W_ZN008-ZTERM_S3 "条件（サイト）
W_ZN008-ZLSCH_3. "支払方法
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
CHECK L_SUM_ZAN <> 0.
ENDIF.

* 条件4
IF  W_ZN008-PAY4 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
IF L_SUM_ZAN  >= W_ZN008-PAY4. "条件金額が合計値を越える
L_SIHARAI = W_ZN008-PAY4.
ELSE.                          "条件金額で合計値をまかなえない
L_SIHARAI = L_SUM_ZAN.
ENDIF.

PERFORM SET_UPDATA USING L_KUNNR          "得意先コード
L_WAERS          "通貨コード
L_SIHARAI        "税込金額
W_ZN008-ZTERM_P4 "条件（支払日）
W_ZN008-ZTERM_S4 "条件（サイト）
W_ZN008-ZLSCH_4. "支払方法
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
CHECK L_SUM_ZAN <> 0.
ENDIF.


ENDFORM.                    " KINGAKU_MODE
*&---------------------------------------------------------------------*
*&      Form  KN_MASTER_MODE
*&---------------------------------------------------------------------*
*       得意先マスタからの初期提案
*----------------------------------------------------------------------*
*      -->L_KUNNR    得意先
*      -->L_WAERS    通貨
*      -->L_SUM      支払予定額
*----------------------------------------------------------------------*
FORM KN_MASTER_MODE USING    L_KUNNR  TYPE KUNNR
L_WAERS  TYPE WAERS
L_SUM    TYPE YN110-KNETXAMT
CHANGING  L_ERRFLG TYPE CHAR1.

DATA:L_SUM_ZAN TYPE YN110-KNETXAMT,
L_SIHARAI TYPE YN110-KNETXAMT,
L_ZLSCH   TYPE ZN007-ZLSCH_Z.

IF W_KN_MASTER-WAERS <> L_WAERS.
L_ERRFLG = C_ON.
*       【初期提案】
*   IF P_SYOKI = C_ON.
*     マスタの通貨が不正です。
W_MAIN_KUN-ERRMSG = TEXT-E05.
PERFORM EDIT_ERR_DATA.
EXIT.
*   ENDIF.

ENDIF.

* 支払方法の決定
PERFORM EDIT_ZLSCH USING    L_WAERS
L_SUM
CHANGING L_ZLSCH.

* レコード作製
PERFORM SET_UPDATA USING L_KUNNR              "得意先コード
L_WAERS              "通貨コード
L_SUM                "税込金額
W_KN_MASTER-ZTERM_VV "条件（支払日）
W_KN_MASTER-ZTERM_B1 "条件（サイト）
L_ZLSCH.             "支払方法

ENDFORM.                    " KN_MASTER_MODE
*&---------------------------------------------------------------------*
*&      Form  EDIT_ZLSCH
*&---------------------------------------------------------------------*
*       得意先マスタの支払方法決定
*----------------------------------------------------------------------*
*      -->L_WAERS    通貨
*      -->L_SUM      支払予定額
*      <--L_ZLSCH    支払方法
*----------------------------------------------------------------------*
FORM EDIT_ZLSCH USING L_WAERS  TYPE WAERS
L_SUM    TYPE YN110-KNETXAMT
CHANGING L_ZLSCH  TYPE ZN005-IZLSCH.

*-- JPY以外は９
IF L_WAERS <> C_JPY.
L_ZLSCH = C_ETC_9.   "その他
EXIT.
ENDIF.

*-- JPY/支払方法にZあり/20万以上
IF W_KN_MASTER-ZWELS CS C_FAC_Z "ゼットが含まれつつ２０万
AND L_SUM >= 2000.
L_ZLSCH = C_FAC_Z. "ファクタリング
EXIT.
ENDIF.

*-- JPY/支払方法にKあり/20万以上
IF W_KN_MASTER-ZWELS CS C_FAC_K "Kが含まれつつ２０万
AND L_SUM >= 2000.
L_ZLSCH = C_FAC_K. "ファクタリング京都
EXIT.
ENDIF.

*-- JPY/支払方法にBあり/20万以上
IF W_KN_MASTER-ZWELS CS C_TE_B "Bが含まれつつ２０万
AND L_SUM >= 2000.
L_ZLSCH = C_TE_B. "手形
EXIT.
ENDIF.

*-- JPY/支払方法にTあり/2千円以上
IF W_KN_MASTER-ZWELS CS C_KOKUNAI_T. "Tが含まれつつ
*  AND L_SUM >= 20. "2012/09/03 DEL 2千円対応は不要
L_ZLSCH = C_KOKUNAI_T . "国内振込
EXIT.
ENDIF.

*-- 最後まで決まらなかったらその他
L_ZLSCH = C_ETC_9.   "その他


ENDFORM.                    " EDIT_ZLSCH
*&---------------------------------------------------------------------*
*&      Form  EDIT_ITAB_SINKI
*&---------------------------------------------------------------------*
*       ALVデータとテーブル更新データを同時作成
*----------------------------------------------------------------------*
FORM EDIT_ITAB_SINKI.
DATA:L_CNT TYPE ZN005-SEQ.

CLEAR:L_CNT.

* 【相殺再計算】の場合、集計対象外のデータを先に採番
IF P_SOSAI = C_ON.
LOOP AT T_ZN005_SOSAI_S INTO W_ZN005_SOSAI_S
WHERE KUNNR = W_MAIN_KUN-KUNNR.
CLEAR:W_OUTPUT,W_ZN005_UPD.
L_CNT = L_CNT + 1.
PERFORM SET_OUTPUT_ALV_COPY USING L_CNT.
ENDLOOP.
ENDIF.
*
LOOP AT T_UPDATA INTO W_UPDATA.
CLEAR:W_OUTPUT,W_ZN005_UPD.
L_CNT = L_CNT + 1.
PERFORM SET_OUTPUT_ALV USING L_CNT
W_MAIN_KUN-KUNNR
W_MAIN_KUN-ERRMSG.
ENDLOOP.

ENDFORM.                    " EDIT_ITAB_SINKI
*&---------------------------------------------------------------------*
*&      Form  SET_OUTPUT_ALV
*&---------------------------------------------------------------------*
*       ALVデータとテーブル更新データを同時作成
*----------------------------------------------------------------------*
*      -->L_SEQNO  シーケンス番号
*      -->L_KUNNR  得意先コード
*      -->L_ERRMSG エラーメッセージ
*----------------------------------------------------------------------*
FORM SET_OUTPUT_ALV USING    L_SEQNO    TYPE ZN005-SEQ
L_KUNNR    TYPE KUNNR
L_ERRMSG   TYPE CHAR200.
CLEAR:W_OUTPUT,W_ZN005_UPD.
W_ZN005_UPD-MANDT  = SY-MANDT.                 " クライアント
W_ZN005_UPD-BUKRS  = P_BUK.                    " 会社コード
W_ZN005_UPD-KUNNR  = L_KUNNR.                  " 得意先コード
W_ZN005_UPD-CZFBDT = P_DAY.                    " 照合締日
W_ZN005_UPD-SEQ    = L_SEQNO.                  " SEQ
* W_ZN005_UPD-IZFBDT = 支払予定日
CALL FUNCTION 'YK_ZFBDT_GET_BY_ZTERM'
EXPORTING
I_ZTERM              = W_UPDATA-ZTERM_P
I_DAY                = P_DAY
IMPORTING
E_SIHARAIBI          = W_ZN005_UPD-IZFBDT
EXCEPTIONS
NO_GET_T052            = 1
NO_GOOD_GETDAY       = 2
NO_GOOD_DAY          = 3
OTHERS               = 4.
IF SY-SUBRC <> 0.
CLEAR:W_ZN005_UPD-IZFBDT.
ENDIF.

*  W_ZN005_UPD-IZLSCH   =  ."支払方法
*  W_ZN005_UPD-IZTERM   =  ."サイト
W_ZN005_UPD-WAERS     = W_UPDATA-WAERS.   "通貨コード
W_ZN005_UPD-IWRBTR    = W_UPDATA-KNETXAMT."入金予定額
*  W_ZN005_UPD-IKUNNR   =  ."入金先
*  W_ZN005_UPD-ILIFNR   =  ."相殺先
*  W_ZN005_UPD-IMEMO    =  ."備考
W_ZN005_UPD-INSDT     = SY-DATUM."登録日
W_ZN005_UPD-INSTM     = SY-UZEIT."登録時刻
W_ZN005_UPD-INSUSR    = SY-UNAME."登録ユーザ
*  W_ZN005_UPD-AUFLG    =  ."入金消込
*  W_ZN005_UPD-AUDAT    =  ."入金消込日
*  W_ZN005_UPD-AUTIM    =  ."入金消込時刻
*  W_ZN005_UPD-AUUSR    =  ."入金消込ユーザ
*  W_ZN005_UPD-IBELNER  =  ."決済伝票番号
*  W_ZN005_UPD-IGJAHR   =  ."決済会計年度
*  W_ZN005_UPD-IBUDAT   =  ."決済転記日
APPEND W_ZN005_UPD TO T_ZN005_UPD.
*-- ALV用データ作成
MOVE-CORRESPONDING W_ZN005_UPD TO W_OUTPUT.
WRITE ICON_GREEN_LIGHT AS ICON TO W_OUTPUT-ICON. "青信号
W_OUTPUT-KEKA   = L_ERRMSG.                      "処理結果
W_OUTPUT-NAME1  = W_KN_MASTER-NAME1.             "得意先名称
APPEND W_OUTPUT TO T_OUTPUT.

ENDFORM.                    " SET_OUTPUT_ALV
*&---------------------------------------------------------------------*
*&      Form  EDIT_TABLE
*&---------------------------------------------------------------------*
*       テーブル更新
*----------------------------------------------------------------------*
FORM EDIT_TABLE.
CHECK P_TEST = SPACE.                "テストOFFのみ実行
CHECK NOT T_ZN005_UPD[] IS INITIAL.  "テーブル更新データあり

* 今回更新対象の得意先コード全件を削除
IF NOT T_RANGE_KUN[] IS INITIAL.
DELETE FROM ZN005 WHERE BUKRS = P_BUK
AND KUNNR IN T_RANGE_KUN
AND CZFBDT = P_DAY.
IF SY-SUBRC <> 0 AND SY-SUBRC <> 4.
ROLLBACK WORK.
*      & 削除エラー
MESSAGE E793 WITH TEXT-E06.
ENDIF.
ENDIF.

INSERT ZN005 FROM TABLE T_ZN005_UPD  ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC = 0.
COMMIT WORK.
ELSE.
ROLLBACK WORK.
*    & 更新エラー
MESSAGE E758 WITH TEXT-E06.
ENDIF.

* 使用済み内部テーブルの開放
FREE:T_ZN005_UPD,T_RANGE_KUN.

ENDFORM.                    " EDIT_TABLE
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_SOSAI
*&---------------------------------------------------------------------*
*       相殺後再計算用データ取得処理
*----------------------------------------------------------------------*
*       <-- T_MAIN_KUN      集計対象データの得意先ごとの集計値
*       <-- T_ZN005_SOSAI_S SEQ番号採番のみが必要なデータ
*----------------------------------------------------------------------*
FORM GET_DATA_SOSAI.
DATA:L_W_ZN005   TYPE ZN005, "AT イベント対策
L_DELFLG(1) TYPE C.

SELECT * INTO TABLE T_ZN005_SOSAI
FROM ZN005
WHERE BUKRS  = P_BUK
AND KUNNR  IN S_KUN
AND CZFBDT = P_DAY.
IF T_ZN005_SOSAI[] IS INITIAL.
*   対象データがありません
MESSAGE S762(YN01).
W_ERR_FLG = C_ON.
EXIT.
ENDIF.

REFRESH: T_RANGE_KUN,T_ZN005_SOSAI_S,T_MAIN_KUN.

* 対象データがある場合、集約データ作成
LOOP AT T_ZN005_SOSAI INTO W_ZN005_SOSAI.
L_W_ZN005 = W_ZN005_SOSAI.
AT NEW KUNNR.
CLEAR: W_MAIN_KUN.
W_MAIN_KUN-KUNNR = L_W_ZN005-KUNNR. "得意先
W_MAIN_KUN-WAERS = L_W_ZN005-WAERS. "通貨を確保
ENDAT.
*-- エラーチェック１
IF W_MAIN_KUN-WAERS <> L_W_ZN005-WAERS.
*     入金予定内で、１得意先に複数通貨が混在しています。
W_MAIN_KUN-ERRMSG = TEXT-E03.
ENDIF.
*-- エラーチェック２
IF NOT L_W_ZN005-AUFLG IS INITIAL
*2011/03/23 ADD >>>
AND L_W_ZN005-IZLSCH <> C_SOSAI.
*2011/03/23 ADD <<<
*     既に消込済みです。
W_MAIN_KUN-ERRMSG = TEXT-E02.
W_MAIN_KUN-AUFLG  = L_W_ZN005-AUFLG.
W_MAIN_KUN-AUDAT  = L_W_ZN005-AUDAT.  "消込日
W_MAIN_KUN-AUTIM  = L_W_ZN005-AUTIM.  "消込時刻
W_MAIN_KUN-AUUSR  = L_W_ZN005-AUUSR.  "消込ユーザ
ENDIF.
*  支払方法が相殺のデータは集計対象外
IF L_W_ZN005-IZLSCH = C_SOSAI.
APPEND L_W_ZN005 TO T_ZN005_SOSAI_S.  "集計対象外
ELSE.
*     外部データの税込み金額集計
W_MAIN_KUN-KNETXAMT = W_MAIN_KUN-KNETXAMT + L_W_ZN005-IWRBTR.
ENDIF.

*-- 1得意先分の集計が終わったら
AT END OF KUNNR.
*     処理対象の得意先をロック
PERFORM CHECK_LOCK_KUNNR USING W_MAIN_KUN-KUNNR.
IF W_ERR_FLG IS INITIAL.
*2012/03/23 ADD >>>
IF W_MAIN_KUN-KNETXAMT <> 0.
*2012/03/23 ADD <<<
APPEND W_MAIN_KUN TO T_MAIN_KUN.
*2012/03/23 ADD >>>
ENDIF.
*2012/03/23 ADD <<<
ELSE.
EXIT.
ENDIF.
ENDAT.
ENDLOOP.
CHECK W_ERR_FLG IS INITIAL.

IF T_MAIN_KUN[] IS INITIAL.
*   対象データがありません
MESSAGE S762(YN01).
W_ERR_FLG = C_ON.
EXIT.
ENDIF.

* 使用済み内部テーブルの開放
FREE:T_ZN005_SOSAI.

* マスタデータの一括取得
PERFORM GET_MASTER.

* 不要データの対象外
LOOP AT T_MAIN_KUN INTO W_MAIN_KUN.
CLEAR:W_KNVP,L_DELFLG.
*   相殺先確認
LOOP AT T_KNVP INTO W_KNVP
WHERE KUNNR = W_MAIN_KUN-KUNNR.
EXIT.
ENDLOOP.
IF W_KNVP-KUNNR = W_MAIN_KUN-KUNNR. "相殺先の場合
IF W_KNVP-MINDK = C_SOSAI_HARAIBI.       "払日相殺は不要
L_DELFLG = C_ON.
ENDIF.
ELSE.                              "相殺先以外は不要
L_DELFLG = C_ON.
ENDIF.
IF L_DELFLG = C_ON.
T_RANGE_KUN-SIGN   = 'I'.
T_RANGE_KUN-OPTION = 'EQ'.
T_RANGE_KUN-LOW    = W_MAIN_KUN-KUNNR.
APPEND T_RANGE_KUN.
ENDIF.
ENDLOOP.

IF NOT T_RANGE_KUN[] IS INITIAL.
DELETE T_MAIN_KUN      WHERE KUNNR IN T_RANGE_KUN.
DELETE T_ZN005_SOSAI_S WHERE KUNNR IN T_RANGE_KUN.
IF T_MAIN_KUN[] IS INITIAL.
*     対象データがありません
MESSAGE S762(YN01).
W_ERR_FLG = C_ON.
EXIT.
ENDIF.
ENDIF.

* 使用済み内部テーブルの開放
FREE:T_RANGE_KUN.

ENDFORM.                    " GET_DATA_SOSAI
*&---------------------------------------------------------------------*
*&      Form  SET_OUTPUT_ALV_COPY
*&---------------------------------------------------------------------*
*       SEQ採番しなおしのみのデータ編集
*----------------------------------------------------------------------*
*      -->L_CNT             SEQ番号
*      -->W_ZN005_SOSAI_S   SEQ以外更新無しのデータ
*       <-- T_ZN005_UPD     今回登録する入金予定データ
*       <-- T_OUTPUT        ALVに出力する内部テーブル
*----------------------------------------------------------------------*
FORM SET_OUTPUT_ALV_COPY USING    L_CNT TYPE ZN005-SEQ.
CLEAR:W_OUTPUT,W_ZN005_UPD.

MOVE-CORRESPONDING W_ZN005_SOSAI_S TO W_ZN005_UPD.
W_ZN005_UPD-SEQ    = L_CNT.                  " SEQ

APPEND W_ZN005_UPD TO T_ZN005_UPD.
*-- ALV用データ作成
MOVE-CORRESPONDING W_ZN005_UPD TO W_OUTPUT.
WRITE ICON_GREEN_LIGHT AS ICON TO W_OUTPUT-ICON. "青信号
W_OUTPUT-NAME1  = W_KN_MASTER-NAME1.             "得意先名称
APPEND W_OUTPUT TO T_OUTPUT.

ENDFORM.                    " SET_OUTPUT_ALV_COPY
