REPORT ZF021700 MESSAGE-ID Z1.
************************************************************************
* プログラムID  :ZF021700
* プログラム名  :試算表ファイルダウンロード
* 作成日        :2008/01/15
* 作成者        :DMC
* 変更履歴      :
*& YYYY/MM/DD  Programar         Description
*& 2012/09/07  ISID              ES-UP
*& 2014/08/29  ISID18            コードページを"UTF-8"に修正
*& 2015/02/04  ISID18            コードページ修正
************************************************************************
TABLES: GLT0,
BKPF,
BSEG.

*** 選択パラメータ ***
PARAMETERS    : P_KTOPL  TYPE SKAT-KTOPL DEFAULT 'C001'
OBLIGATORY.

PARAMETERS    : P_BUKRS  TYPE BKPF-BUKRS DEFAULT 'C001'
OBLIGATORY.
PARAMETERS    : P_GJAHR  TYPE BKPF-GJAHR OBLIGATORY.
SELECT-OPTIONS: S_HKONT  FOR  BSEG-HKONT.
PARAMETERS    : P_GNAME  TYPE GRPNAME OBLIGATORY.
SELECTION-SCREEN BEGIN OF BLOCK BL1 WITH FRAME TITLE TEXT-001.

PARAMETERS    : P_FILE   TYPE RLGRAP-FILENAME LOWER CASE
OBLIGATORY.
SELECTION-SCREEN BEGIN OF LINE.
* ローカル
PARAMETERS:P_LOCAL RADIOBUTTON GROUP RB1 DEFAULT 'X'.
SELECTION-SCREEN: COMMENT 4(8) TEXT-002, POSITION 14.
* サーバ
PARAMETERS:P_SERVE RADIOBUTTON GROUP RB1.
SELECTION-SCREEN: COMMENT 17(6) TEXT-003.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK BL1.

*** 構造 ***
* テキスト項目設定用マスタ
TYPES:BEGIN OF TYP_TEXT,
KUBUN_C   TYPE SETNAMENEW,       "科目区分(コード)
KUBUN_T   TYPE SETTEXT,          "科目区分(テキスト)
HYOJI_C   TYPE SETNAMENEW,       "表示項目(コード)
HYOJI_T   TYPE SETTEXT,          "表示項目(テキスト)
FROM      TYPE SETVALMIN,        "値(from)
TO        TYPE SETVALMAX,        "値(to)
END   OF TYP_TEXT.

* 集計
TYPES:BEGIN OF TYP_CALC,
KISYU         TYPE GLT0-HSLVT,        "期首残高
KIMAT         TYPE GLT0-HSLVT,        "期末残高
END   OF TYP_CALC.

* ファイル
TYPES:BEGIN OF TYP_FILE,
HKONT_C(32)   TYPE C,        "科目コード
TXT20(22)     TYPE C,        "科目名
KISYU(15)     TYPE C,        "期首残高
KIMAT(15)     TYPE C,        "期末残高
KUBUN_T(42)   TYPE C,        "科目区分
HYOJI_T(42)   TYPE C,        "表示項目
END   OF TYP_FILE.

*** 内部テーブル ***
DATA: GT_GLT0           TYPE TABLE OF GLT0.
DATA: GT_SKAT           TYPE TABLE OF SKAT.
DATA: GT_TEXT           TYPE TABLE OF TYP_TEXT.
DATA: GT_FILE           TYPE TABLE OF TYP_FILE.

DATA: GT_SET_HIER_DMY   TYPE TABLE OF SETHIER.
DATA: GT_SET_VALUES_DMY TYPE TABLE OF SETVALUES.

*** 変数 ***
DATA: GV_CNT      TYPE I.
DATA: GV_GOUKEI_S TYPE GLT0-HSLVT.
DATA: GV_GOUKEI_M TYPE GLT0-HSLVT.
*** 固定値 ***
CONSTANTS:
CNS_DEF_PATH(03)  TYPE C VALUE 'C:\',
CNS_MASK(70)      TYPE C VALUE '*.CSV,ALL FILES,*.*.',
CNS_MODE(01)      TYPE C VALUE 'S',
CNS_TITLE1(06)    TYPE C VALUE '出力先'.
* Add ES-UP 2012/09/07 -->
****START UPD 2014/08/29 ISID18****
*CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
CONSTANTS CNS_UTF TYPE STRING VALUE `UTF-8`.
****END UPD 2014/08/29 ISID18****
* Add ES-UP 2012/09/07 <--
DATA: L_FISCAL_YEAR      LIKE BAPI0002_4-FISCAL_YEAR.

INITIALIZATION.
CALL FUNCTION 'BAPI_COMPANYCODE_GET_PERIOD'
EXPORTING
COMPANYCODEID = P_BUKRS
POSTING_DATE  = SY-DATUM
IMPORTING
FISCAL_YEAR   = L_FISCAL_YEAR.
P_GJAHR = L_FISCAL_YEAR.

************************************************************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
************************************************************************
* ファイル入出力先の検索ウィンドウ呼び出し処理
PERFORM CALL_WS_FILENAME_GET USING SPACE
CNS_DEF_PATH
CNS_MASK
CNS_MODE
CNS_TITLE1
CHANGING P_FILE.

START-OF-SELECTION.
* ローカル出力
IF P_LOCAL = 'X'.
IF NOT P_FILE CS ':\'.
MESSAGE S400 WITH 'ファイルパスが取得できません'.
STOP.
ENDIF.
ENDIF.
PERFORM GET_DATA.
PERFORM MAKE_RECORD.
PERFORM WRITE_RECORD.
PERFORM WRITE_LOG.

*&---------------------------------------------------------------------*
*&      FORM CALL_WS_FILENAME_GET
*&---------------------------------------------------------------------*
*       ファイル入出力先の検索ウィンドウ呼び出し処理
*----------------------------------------------------------------------*
FORM CALL_WS_FILENAME_GET USING PV_FILENAME
PV_PATH
PV_MASK
PV_MODE
PV_TITLE
CHANGING PV_PATH_C.
* Mod ES-UP 2012/09/07 -->
*  CALL FUNCTION 'WS_FILENAME_GET'
*       EXPORTING
*            DEF_FILENAME     = PV_FILENAME
*            DEF_PATH         = PV_PATH
*            MASK             = PV_MASK
*            MODE             = PV_MODE
*            TITLE            = PV_TITLE
*       IMPORTING
*            FILENAME         = PV_PATH_C
*       EXCEPTIONS
*            INV_WINSYS       = 1
*            NO_BATCH         = 2
*            SELECTION_CANCEL = 3
*            SELECTION_ERROR  = 4
*            OTHERS           = 5.
*  IF SY-SUBRC <> 0 AND
*     SY-SUBRC <> 3.
*    MESSAGE S400 WITH 'ファイルパスが取得できません'.
*    STOP.
*  ENDIF.
DATA: L_FILENAME    TYPE STRING,
L_PATH        TYPE STRING,
L_FULLPATH    TYPE STRING,
L_TITLE       TYPE STRING,
L_USER_ACTION TYPE I.
L_TITLE = PV_TITLE.
CL_GUI_FRONTEND_SERVICES=>FILE_SAVE_DIALOG(
EXPORTING
WINDOW_TITLE         = L_TITLE
*      DEFAULT_EXTENSION    = DEFAULT_EXTENSION
*      DEFAULT_FILE_NAME    = DEFAULT_FILE_NAME
*      WITH_ENCODING        = WITH_ENCODING
*      FILE_FILTER          = FILE_FILTER
*      INITIAL_DIRECTORY    = INITIAL_DIRECTORY
*      PROMPT_ON_OVERWRITE  = 'X'
CHANGING
FILENAME             = L_FILENAME
PATH                 = L_PATH
FULLPATH             = L_FULLPATH
USER_ACTION          = L_USER_ACTION
*      FILE_ENCODING        = FILE_ENCODING
EXCEPTIONS
CNTL_ERROR           = 1
ERROR_NO_GUI         = 2
NOT_SUPPORTED_BY_GUI = 3
OTHERS               = 4 ).
IF SY-SUBRC = 0
AND L_USER_ACTION = CL_GUI_FRONTEND_SERVICES=>ACTION_OK.
PV_PATH_C = L_FULLPATH.
ENDIF.
* Mod ES-UP 2012/09/07 <--
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  get_data
*&---------------------------------------------------------------------*
*       ファイル作成元データの取得
*----------------------------------------------------------------------*
FORM GET_DATA.

SELECT * FROM GLT0 INTO TABLE GT_GLT0
WHERE BUKRS = P_BUKRS
AND RYEAR  = P_GJAHR
AND RACCT IN S_HKONT.

SELECT * FROM SKAT INTO TABLE GT_SKAT
WHERE KTOPL = P_KTOPL.

PERFORM MAKE_TXTTAB.

ENDFORM.                    " get_data

*&---------------------------------------------------------------------*
*&      Form  make_txttab
*&---------------------------------------------------------------------*
*       テキスト項目内部テーブル作成
*----------------------------------------------------------------------*
FORM MAKE_TXTTAB.


DATA: LT_SET_HIER      TYPE TABLE OF SETHIER.
DATA: LT_SET_VALUES    TYPE TABLE OF SETVALUES.

DATA: LT_SET_HDMY      TYPE TABLE OF SETHIER.
DATA: LT_SET_VDMY      TYPE TABLE OF SETVALUES.

DATA: LW_SET_HIER      TYPE SETHIER.
DATA: LW_SET_VALUES    TYPE SETVALUES.
DATA: LW_TEXT          TYPE TYP_TEXT.

DATA: LV_SETID         TYPE SETHIER-SETID.


* セット名を作成し、グループ以下の階層を全て取得する
* ※レベル２まで対応
CONCATENATE '0109' P_KTOPL P_GNAME INTO LV_SETID.

PERFORM GET_SET_TREE USING LV_SETID
'2'
CHANGING LT_SET_HIER
LT_SET_VDMY.

LOOP AT LT_SET_HIER INTO LW_SET_HIER WHERE LEVEL > 0.
CASE LW_SET_HIER-LEVEL.
*     レベル１を科目区分に設定
WHEN 1.
CLEAR: LW_TEXT.
LW_TEXT-KUBUN_C = LW_SET_HIER-SHORTNAME.
LW_TEXT-KUBUN_T = LW_SET_HIER-DESCRIPT.
*     レベル２を表示項目に設定
WHEN 2.
LW_TEXT-HYOJI_C = LW_SET_HIER-SHORTNAME.
LW_TEXT-HYOJI_T = LW_SET_HIER-DESCRIPT.
*       表示項目毎に値の範囲を取得
CLEAR: LV_SETID.
CONCATENATE '0109' P_KTOPL LW_TEXT-HYOJI_C INTO LV_SETID.
PERFORM GET_SET_TREE USING LV_SETID
'1'
CHANGING LT_SET_HDMY
LT_SET_VALUES.

LOOP AT LT_SET_VALUES INTO LW_SET_VALUES.
LW_TEXT-FROM = LW_SET_VALUES-FROM.
LW_TEXT-TO   = LW_SET_VALUES-TO.
APPEND LW_TEXT TO GT_TEXT.
ENDLOOP.
CLEAR: LW_TEXT-HYOJI_C.
CLEAR: LW_TEXT-HYOJI_T.
WHEN OTHERS.
ENDCASE.
ENDLOOP.

ENDFORM.                    " make_txttab

*&--------------------------------------------------------------------*
*&      Form  GET_SET_TREE
*&--------------------------------------------------------------------*
*       勘定グループ階層構造取得処理
*---------------------------------------------------------------------*
*      -->PV_SETID     =     セット名
*      -->PV_MAXLV     =     取得最大レベル
*      <--PT_HIER      =     階層構造データ
*      <--PT_VALUES    =     原価要素データ
*---------------------------------------------------------------------*
FORM GET_SET_TREE USING VALUE(PV_SETID)  TYPE SETHIER-SETID
VALUE(PV_MAXLV)  TYPE I
CHANGING VALUE(PT_HIER)   LIKE GT_SET_HIER_DMY[]
VALUE(PT_VALUES) LIKE GT_SET_VALUES_DMY[].

REFRESH: PT_HIER, PT_VALUES.

CALL FUNCTION 'G_SET_TREE_IMPORT'
EXPORTING
SETID                     = PV_SETID
MAX_HIER_LEVEL            = PV_MAXLV
TABLES
SET_HIERARCHY             = PT_HIER[]
SET_VALUES                = PT_VALUES[]
EXCEPTIONS
SET_NOT_FOUND             = 1
ILLEGAL_FIELD_REPLACEMENT = 2
ILLEGAL_TABLE_REPLACEMENT = 3
SET_IS_DAMAGED            = 4
OTHERS                    = 5.

IF SY-SUBRC <> 0.
MESSAGE S400(Z1) WITH '勘定グループが未登録です'.
STOP.
ENDIF.

ENDFORM.                    "GET_SET_TREE
*&---------------------------------------------------------------------*
*&      Form  make_record
*&---------------------------------------------------------------------*
*       レコードの作成
*----------------------------------------------------------------------*
FORM MAKE_RECORD.

DATA: LW_GLT0    TYPE GLT0.
DATA: LW_CALC    TYPE TYP_CALC.
DATA: LW_FILE    TYPE TYP_FILE.
DATA: LV_KISYU   TYPE TYP_FILE-KISYU.
DATA: LV_KIMAT   TYPE TYP_FILE-KIMAT.

SORT GT_GLT0 BY RACCT.

LOOP AT GT_GLT0 INTO LW_GLT0.
AT NEW RACCT.
CLEAR: LW_FILE, LW_CALC, LV_KISYU, LV_KIMAT.
*   勘定コード
LW_FILE-HKONT_C = LW_GLT0-RACCT.
PERFORM SET_TEXT CHANGING LW_FILE.
ENDAT.

*   期首残高
LW_CALC-KISYU = LW_CALC-KISYU + LW_GLT0-HSLVT.
*   期末残高
LW_CALC-KIMAT = LW_CALC-KIMAT + LW_GLT0-HSLVT +
LW_GLT0-HSL01 + LW_GLT0-HSL02 +
LW_GLT0-HSL03 + LW_GLT0-HSL04 +
LW_GLT0-HSL05 + LW_GLT0-HSL06 +
LW_GLT0-HSL07 + LW_GLT0-HSL08 +
LW_GLT0-HSL09 + LW_GLT0-HSL10 +
LW_GLT0-HSL11 + LW_GLT0-HSL12 +
LW_GLT0-HSL13 + LW_GLT0-HSL14 +
LW_GLT0-HSL15 + LW_GLT0-HSL16 .

AT END OF RACCT.
WRITE LW_CALC-KISYU TO LV_KISYU CURRENCY 'JPY' NO-GROUPING.
WRITE LW_CALC-KIMAT TO LV_KIMAT CURRENCY 'JPY' NO-GROUPING.
PERFORM EDIT_MINUS USING LV_KISYU
CHANGING LW_FILE-KISYU.
PERFORM EDIT_MINUS USING LV_KIMAT
CHANGING LW_FILE-KIMAT.
GV_GOUKEI_S = GV_GOUKEI_S + LW_CALC-KISYU.
GV_GOUKEI_M = GV_GOUKEI_M + LW_CALC-KIMAT.
APPEND LW_FILE TO GT_FILE.
CLEAR: LW_FILE, LW_CALC, LV_KISYU, LV_KIMAT.
ENDAT.

ENDLOOP.


ENDFORM.                    " make_record

*&---------------------------------------------------------------------*
*&      Form  SET_TEXT
*&---------------------------------------------------------------------*
*       テキスト項目の設定
*----------------------------------------------------------------------*
FORM SET_TEXT CHANGING VALUE(PW_FILE) TYPE TYP_FILE.

DATA: LW_TEXT TYPE TYP_TEXT.
DATA: LW_SKAT TYPE SKAT.

* 勘定テキスト
READ TABLE GT_SKAT INTO LW_SKAT WITH KEY SAKNR = PW_FILE-HKONT_C.
PW_FILE-TXT20 = LW_SKAT-TXT20.


LOOP AT GT_TEXT INTO LW_TEXT WHERE FROM <= PW_FILE-HKONT_C(10)
AND TO   >= PW_FILE-HKONT_C(10).
EXIT.
ENDLOOP.

* 科目区分
PW_FILE-KUBUN_T = LW_TEXT-KUBUN_T.
* 表示項目
PW_FILE-HYOJI_T = LW_TEXT-HYOJI_T.

ENDFORM.                    " SET_TEXT

*&---------------------------------------------------------------------*
*&      Form  EDIT_MINUS
*&---------------------------------------------------------------------*
*       マイナス編集
*----------------------------------------------------------------------*
FORM EDIT_MINUS USING VALUE(PV_BEFORE) TYPE TYP_FILE-KISYU
CHANGING VALUE(PV_AFTER)  TYPE TYP_FILE-KISYU.

DATA: LV_LEN     TYPE I.
DATA: LV_SHIFT     TYPE I.

CONDENSE PV_BEFORE NO-GAPS.
LV_LEN   = STRLEN( PV_BEFORE ).
LV_SHIFT = LV_LEN - 1.

IF PV_BEFORE+LV_SHIFT  = '-'.
PV_AFTER(01)         = '-'.
PV_AFTER+1(LV_SHIFT) = PV_BEFORE(LV_SHIFT).
ELSE.
PV_AFTER             = PV_BEFORE.
ENDIF.

ENDFORM.                    " EDIT_MINUS

*&---------------------------------------------------------------------*
*&      Form  write_log
*&---------------------------------------------------------------------*
*       ログ出力
*----------------------------------------------------------------------*
FORM WRITE_LOG.

DATA: LV_GOUKEI_S(15)   TYPE C.
DATA: LV_GOUKEI_M(15)   TYPE C.
DATA: LV_KENSUU(15)     TYPE C.

DATA: LV_LINE(1000)   TYPE C.
DATA: LT_LOG_FILE     LIKE TABLE OF LV_LINE,
LW_LOG_FILE     LIKE LV_LINE,
L_NEW_FILE_NAME TYPE STRING,
L_FPATH         LIKE RLGRAP-FILENAME,
L_LONG_FILENAME LIKE DBMSGORA-FILENAME,
L_PURE_FILENAME LIKE DBMSGORA-FILENAME,
L_INDEX         TYPE I VALUE 0,
L_LEN           TYPE I VALUE 0.
* Add ES-UP 2012/09/07 -->
DATA L_CODEPAGE TYPE ABAP_ENCODING.
**** START ADD 2015/02/03 ISID18 ****
DATA:
L_Z_OUTPUT_CP TYPE ZTEGZZM001-Z_OUTPUT_CP,
L_SAPCODEPAGE TYPE STRING,
L_FLGUTF8     TYPE FLAG.
CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
EXPORTING
IMPPGM      = SY-REPID
IMPBUKRS    = P_BUKRS
IMPORTING
EXPCODEPAGE = L_Z_OUTPUT_CP
EXPFLGUTF8  = L_FLGUTF8.
L_SAPCODEPAGE = L_Z_OUTPUT_CP.
**** END ADD 2015/02/03 ISID18 ****
****START UPD 2014/08/29 ISID18****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
**** START UPD 2015/02/04 ISID18 ****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_UTF ).
IF L_SAPCODEPAGE IS NOT INITIAL.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).
ENDIF.
**** END UPD 2015/02/04 ISID18 ****
****END UPD 2014/08/29 ISID18****
* Add ES-UP 2012/09/07 <--
WRITE GV_GOUKEI_S TO LV_GOUKEI_S CURRENCY 'JPY'.
WRITE GV_GOUKEI_M TO LV_GOUKEI_M CURRENCY 'JPY'.
LV_KENSUU = GV_CNT.
CONDENSE LV_KENSUU.
L_LEN = STRLEN( LV_KENSUU ).
L_INDEX = 15 - L_LEN.
SHIFT LV_KENSUU BY L_INDEX PLACES RIGHT.

CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE = LV_GOUKEI_S.
CONDENSE LV_GOUKEI_S.
L_LEN = STRLEN( LV_GOUKEI_S ).
L_INDEX = 15 - L_LEN.
SHIFT LV_GOUKEI_S BY L_INDEX PLACES RIGHT.

CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE = LV_GOUKEI_M.
CONDENSE LV_GOUKEI_M.
L_LEN = STRLEN( LV_GOUKEI_M ).
L_INDEX = 15 - L_LEN.
SHIFT LV_GOUKEI_M BY L_INDEX PLACES RIGHT.

WRITE: /    '試算表レコード件数：',
22 LV_KENSUU,
37 '件'.
WRITE: /    '試算表期首残高合計：',
22 LV_GOUKEI_S,
37 '円'.
WRITE: /    '試算表期末残高合計：',
22 LV_GOUKEI_M,
37 '円'.
CLEAR LW_LOG_FILE.
CONCATENATE '試算表レコード件数：'
LV_KENSUU
'件'
INTO LW_LOG_FILE.
APPEND LW_LOG_FILE TO LT_LOG_FILE.

CLEAR LW_LOG_FILE.
CONCATENATE '試算表期首残高合計：'
LV_GOUKEI_S
'円'
INTO LW_LOG_FILE.
APPEND LW_LOG_FILE TO LT_LOG_FILE.

CLEAR LW_LOG_FILE.
CONCATENATE '試算表期末残高合計：'
LV_GOUKEI_M
'円'
INTO LW_LOG_FILE.
APPEND LW_LOG_FILE TO LT_LOG_FILE.

CALL FUNCTION 'LIST_SPLIT_PATH'
EXPORTING
FILENAME = P_FILE
IMPORTING
PATHNAME = L_FPATH.

L_LONG_FILENAME = P_FILE.
PERFORM SPLIT_FILENAME CHANGING L_LONG_FILENAME
L_PURE_FILENAME.

CLEAR L_NEW_FILE_NAME.
CONCATENATE L_FPATH
L_PURE_FILENAME
'_CTL.TXT'
INTO L_NEW_FILE_NAME.
* ローカル出力の場合
IF P_LOCAL = 'X'.
CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
FILENAME                = L_NEW_FILE_NAME
* Add ES-UP 2012/09/07 -->
CODEPAGE                = L_CODEPAGE
* Add ES-UP 2012/09/07 <--
TABLES
DATA_TAB                = LT_LOG_FILE
EXCEPTIONS
FILE_WRITE_ERROR        = 1
NO_BATCH                = 2
GUI_REFUSE_FILETRANSFER = 3
INVALID_TYPE            = 4
NO_AUTHORITY            = 5
UNKNOWN_ERROR           = 6
HEADER_NOT_ALLOWED      = 7
SEPARATOR_NOT_ALLOWED   = 8
FILESIZE_NOT_ALLOWED    = 9
HEADER_TOO_LONG         = 10
DP_ERROR_CREATE         = 11
DP_ERROR_SEND           = 12
DP_ERROR_WRITE          = 13
UNKNOWN_DP_ERROR        = 14
ACCESS_DENIED           = 15
DP_OUT_OF_MEMORY        = 16
DISK_FULL               = 17
DP_TIMEOUT              = 18
FILE_NOT_FOUND          = 19
DATAPROVIDER_EXCEPTION  = 20
CONTROL_FLUSH_ERROR     = 21
OTHERS                  = 22.
*   出力失敗の場合
IF SY-SUBRC <> 0.
MESSAGE S400 WITH 'ログファイルの出力に失敗しました'.
STOP.
ENDIF.

* サーバ出力の場合
ELSE.
*   テキストモードでファイルをオープン
* Mod ES-UP 2012/09/07 -->
*    OPEN DATASET L_NEW_FILE_NAME FOR OUTPUT IN TEXT MODE.

**** START ADD 2015/02/04 ISID18 ****
IF L_FLGUTF8 IS INITIAL.
TRY.
OPEN DATASET L_NEW_FILE_NAME FOR OUTPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
CATCH CX_SY_CODEPAGE_CONVERTER_INIT.
SY-SUBRC = 8.
ENDTRY.
ELSE.
**** END ADD 2015/02/04 ISID18 ****
**** START UPD 2015/02/04 ISID18 ****
*    OPEN DATASET P_FILE FOR OUTPUT
OPEN DATASET L_NEW_FILE_NAME FOR OUTPUT
**** END UPD 2015/02/04 ISID18 ****
**** START UPD 2014/08/31 ISID19 ****
*      IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IN TEXT MODE ENCODING UTF-8
**** END UPD 2014/08/31 ISID19 ****
IGNORING CONVERSION ERRORS.
**** START ADD 2015/02/04 ISID18 ****
ENDIF.
**** END ADD 2015/02/04 ISID18 ****

* Mod ES-UP 2012/09/07 <--
IF SY-SUBRC <> 0.
MESSAGE S400(Z1) WITH 'ファイルオープンエラー'.
STOP.
ENDIF.
LOOP AT LT_LOG_FILE INTO LW_LOG_FILE.
*     レコードの書き出し
TRANSFER LW_LOG_FILE TO L_NEW_FILE_NAME.
IF SY-SUBRC <> 0.
MESSAGE S400(Z1) WITH 'ファイル書込エラー'.
STOP.
ENDIF.
ENDLOOP.
*   ファイルをクローズ
CLOSE DATASET L_NEW_FILE_NAME.
ENDIF.
ENDFORM.                    " write_log
*&---------------------------------------------------------------------*
*&      Form  write_record
*&---------------------------------------------------------------------*
*       レコードの書き出し
*----------------------------------------------------------------------*
FORM WRITE_RECORD.

DATA: LV_LINE(1000)  TYPE C.
DATA: LW_FILE TYPE TYP_FILE.
DATA: L_STR_FILE    TYPE STRING.
DATA: LT_LOCAL_FILE    LIKE TABLE OF LV_LINE.
*        L_NEW_FILE_NAME  TYPE RLGRAP-FILENAME.
* Add ES-UP 2012/09/07 -->
DATA L_CODEPAGE TYPE ABAP_ENCODING.
**** START ADD 2015/02/03 ISID18 ****
DATA:
L_Z_OUTPUT_CP TYPE ZTEGZZM001-Z_OUTPUT_CP,
L_SAPCODEPAGE TYPE STRING,
L_FLGUTF8     TYPE FLAG.
CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
EXPORTING
IMPPGM      = SY-REPID
IMPBUKRS    = P_BUKRS
IMPORTING
EXPCODEPAGE = L_Z_OUTPUT_CP
EXPFLGUTF8  = L_FLGUTF8.
L_SAPCODEPAGE = L_Z_OUTPUT_CP.
**** END ADD 2015/02/03 ISID18 ****
****START UPD 2014/08/29 ISID18****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
**** START OF UPD 2015/02/04 ISID18 ****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_UTF ).
IF L_SAPCODEPAGE IS NOT INITIAL.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).
ENDIF.
**** END OF UPD 2015/02/04 ISID18 ****
****END UPD 2014/08/29 ISID18****
* Add ES-UP 2012/09/07 <--
* ローカル出力
IF P_LOCAL = 'X'.
PERFORM CHECK_FILE.                "ファイル存在チェック

* サーバ出力
ELSE.
*   テキストモードでファイルをオープン
* Mod ES-UP 2012/09/07 -->
*    OPEN DATASET P_FILE FOR OUTPUT IN TEXT MODE.

**** START OF ADD 2015/02/04 ISID18 ****
IF L_FLGUTF8 IS INITIAL.
TRY.
OPEN DATASET P_FILE FOR OUTPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
CATCH CX_SY_CODEPAGE_CONVERTER_INIT.
SY-SUBRC = 8.
ENDTRY.
ELSE.
**** END OF ADD 2015/02/04 ISID18 ****
OPEN DATASET P_FILE FOR OUTPUT
**** START UPD 2014/08/31 ISID19 ****
*      IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IN TEXT MODE ENCODING UTF-8
**** END UPD 2014/08/31 ISID19 ****
IGNORING CONVERSION ERRORS.
**** START OF ADD 2015/02/04 ISID18 ****
ENDIF.
**** END OF ADD 2015/02/04 ISID18 ****

* Mod ES-UP 2012/09/07 <--
IF SY-SUBRC <> 0.
MESSAGE S400(Z1) WITH 'ファイルオープンエラー'.
STOP.
ENDIF.
ENDIF.

LOOP AT GT_FILE INTO LW_FILE.
CLEAR: LV_LINE.
AT FIRST.
*     ヘッダの作成
PERFORM MAKE_HEADER CHANGING LV_LINE.
*     ローカル出力
IF P_LOCAL = 'X'.
APPEND LV_LINE TO LT_LOCAL_FILE.
*     サーバ出力
ELSE.
*  -->  レコードの書き出し
TRANSFER LV_LINE TO P_FILE.
IF SY-SUBRC <> 0.
MESSAGE S400(Z1) WITH 'ファイル書込エラー'.
STOP.
ENDIF.
ENDIF.
CLEAR LV_LINE.
ENDAT.

CONCATENATE '"' LW_FILE-HKONT_C '"'       "科目
INTO LW_FILE-HKONT_C.
CONCATENATE '"' LW_FILE-TXT20 '"'         "科目テキスト
INTO LW_FILE-TXT20.
CONCATENATE '"' LW_FILE-KUBUN_T '"'       "科目区分
INTO LW_FILE-KUBUN_T.
CONCATENATE '"' LW_FILE-HYOJI_T '"'       "表示項目
INTO LW_FILE-HYOJI_T.

CONCATENATE LW_FILE-HKONT_C       "科目
LW_FILE-TXT20         "科目テキスト
LW_FILE-KISYU         "期首残高
LW_FILE-KIMAT         "期末残高
LW_FILE-KUBUN_T       "科目区分
LW_FILE-HYOJI_T       "表示項目
INTO LV_LINE SEPARATED BY ','.

*   ローカル出力
IF P_LOCAL = 'X'.
APPEND LV_LINE TO LT_LOCAL_FILE.
CLEAR LV_LINE.

*   サーバ出力
ELSE.
*     レコードの書き出し
TRANSFER LV_LINE TO P_FILE.
IF SY-SUBRC <> 0.
MESSAGE S400(Z1) WITH 'ファイル書込エラー'.
STOP.
ENDIF.
ENDIF.

GV_CNT = GV_CNT + 1.
ENDLOOP.

* ローカル出力の場合
IF P_LOCAL = 'X'.
L_STR_FILE = P_FILE.
CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
FILENAME                = L_STR_FILE
* Add ES-UP 2012/10/25 -->
CODEPAGE                  = L_CODEPAGE
* Add ES-UP 2012/10/25 <--
TABLES
DATA_TAB                = LT_LOCAL_FILE
EXCEPTIONS
FILE_WRITE_ERROR        = 1
NO_BATCH                = 2
GUI_REFUSE_FILETRANSFER = 3
INVALID_TYPE            = 4
NO_AUTHORITY            = 5
UNKNOWN_ERROR           = 6
HEADER_NOT_ALLOWED      = 7
SEPARATOR_NOT_ALLOWED   = 8
FILESIZE_NOT_ALLOWED    = 9
HEADER_TOO_LONG         = 10
DP_ERROR_CREATE         = 11
DP_ERROR_SEND           = 12
DP_ERROR_WRITE          = 13
UNKNOWN_DP_ERROR        = 14
ACCESS_DENIED           = 15
DP_OUT_OF_MEMORY        = 16
DISK_FULL               = 17
DP_TIMEOUT              = 18
FILE_NOT_FOUND          = 19
DATAPROVIDER_EXCEPTION  = 20
CONTROL_FLUSH_ERROR     = 21
OTHERS                  = 22.

*   出力失敗の場合
IF SY-SUBRC <> 0.
MESSAGE S400(Z1) WITH 'ファイル書込エラー'.
STOP.
ENDIF.

* サーバ出力の場合
ELSE.

* ファイルをクローズ
CLOSE DATASET P_FILE.

ENDIF.
ENDFORM.                    " write_record
*&---------------------------------------------------------------------*
*&      Form  CHECK_FILE
*&---------------------------------------------------------------------*
*       ファイル存在チェック
*----------------------------------------------------------------------*
FORM CHECK_FILE.

DATA: L_FILE      TYPE STRING,
L_RESULT(1) TYPE C,
L_ANSWER(1) TYPE C.
CLEAR:L_RESULT,L_ANSWER,L_FILE.
L_FILE = P_FILE.
CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_EXIST
EXPORTING
FILE            =  L_FILE
RECEIVING
RESULT          =  L_RESULT
EXCEPTIONS
CNTL_ERROR      = 1
ERROR_NO_GUI    = 2
WRONG_PARAMETER = 3
OTHERS          = 4.
* 存在する場合
IF L_RESULT = 'X'.
*   ファイルの上書き確認を行う
CALL FUNCTION 'POPUP_TO_CONFIRM'
EXPORTING
TITLEBAR       = TEXT-M03
TEXT_QUESTION  = TEXT-M04
TEXT_BUTTON_1  = TEXT-M05
TEXT_BUTTON_2  = TEXT-M06
IMPORTING
ANSWER         = L_ANSWER
EXCEPTIONS
TEXT_NOT_FOUND = 1
OTHERS         = 2.
*  【いええ】/【中止】が選択された場合
IF L_ANSWER <> '1'.
*     処理終了、元の画面に戻す
STOP.
ENDIF.
ENDIF.
ENDFORM.                    " CHECK_FILE
*&---------------------------------------------------------------------*
*&      Form  MAKE_HEADER
*&---------------------------------------------------------------------*
*       ヘッダの作成
*----------------------------------------------------------------------*
FORM MAKE_HEADER CHANGING VALUE(PW_DATA).

CLEAR: PW_DATA.

CONCATENATE '勘定科目コード'
'勘定科目名'
'期首残高'
'期末残高'
'科目区分'
'表示項目'
INTO PW_DATA SEPARATED BY ','.

ENDFORM.                    "MAKE_HEADER
*&---------------------------------------------------------------------*
*&      Form  SPLIT_FILENAME
*&---------------------------------------------------------------------*
*       ファイル名と拡張子を取得
*----------------------------------------------------------------------*
FORM SPLIT_FILENAME CHANGING LONG_FILENAME  LIKE DBMSGORA-FILENAME
PURE_FILENAME  LIKE DBMSGORA-FILENAME.
DATA: PURE_EXTENSION TYPE SDBAD-FUNCT,
SHIFTN  TYPE I,
DEL_SLASH(1)   VALUE '/',
DEL_BACK_SLASH VALUE '\',
DEL_POINT(1) VALUE '.'.

* Delete the path-part
* search for '/'
DO.
SEARCH LONG_FILENAME FOR DEL_SLASH.
IF SY-SUBRC > 0.
EXIT.
ENDIF.
SHIFTN = SY-FDPOS + 1.
SHIFT LONG_FILENAME BY SHIFTN PLACES LEFT.
ENDDO.
* search for '\'
DO.
SEARCH LONG_FILENAME FOR DEL_BACK_SLASH.
IF SY-SUBRC > 0.
EXIT.
ENDIF.
SHIFTN = SY-FDPOS + 1.
SHIFT LONG_FILENAME BY SHIFTN PLACES LEFT.
ENDDO.


* Split the rest
SPLIT LONG_FILENAME AT DEL_POINT INTO PURE_FILENAME PURE_EXTENSION.
CONDENSE PURE_FILENAME NO-GAPS.
CONDENSE PURE_EXTENSION NO-GAPS.
ENDFORM.
