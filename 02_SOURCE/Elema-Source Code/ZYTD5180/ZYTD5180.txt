************************************************************************
* [プログラム名]
*   ZYTD5180   得意先品目一括更新
*
* [処理概要]
*   得意先品目一括更新を行う。
*
* [改定履歴]
*　YYYY/MM/DD  Programar         Description
*  2012/08/13  ISID              ES-UP
*  2014/08/29  ISID18            コードページを"UTF-8"に修正
*  2015/01/13  ISID11            アップロード時のBOMロジック改修
*  2015/02/04  ISID11            コードページ処理の再修正
************************************************************************
REPORT ZYTD5160 MESSAGE-ID Z1 .

TABLES : KNMT ,
MARA .

DATA : BDC_TAB TYPE TABLE OF BDCDATA WITH HEADER LINE ,
IN_DATA(1000) TYPE C ,
BDC_MSG TYPE TABLE OF BDCMSGCOLL WITH HEADER LINE .
*----------------------------------------------------------------------*
* 型定義
*----------------------------------------------------------------------*
TYPES : BEGIN OF TYP_FILE ,
KUNNR(10) TYPE C ,          "得意先コード
MATNR(18) TYPE C ,          "品目コード
KDMAT(35) TYPE C ,          "得意先品目
POSTX(40) TYPE C ,          "得意先品目テキスト
LTX01(30) TYPE C ,          "得意先品目情報
LTX02(30) TYPE C ,          "納品書用備考
* 2007/07/30 APPEND START S.SHIGEMITU(DMC)
*          LTX03(30) TYPE C ,          "商品名
*          LTX04(30) TYPE C ,          "用途
* 2007/07/30 APPEND END
* 2007/09/03 APPEND START FURUYA(DMC)
* 40桁対応に変更
LTX03(40) TYPE C ,          "商品名
LTX04(40) TYPE C ,          "用途
* 2007/09/03 APPEND END
END OF TYP_FILE ,
BEGIN OF TYP_DATA  ,
KUNNR LIKE KNMT-KUNNR ,     "仕入先コード
MATNR LIKE KNMT-MATNR ,     "品目コード
KDMAT LIKE KNMT-KDMAT ,     "得意先品目
POSTX LIKE KNMT-POSTX ,     "得意先品目テキスト
LTX01(30) TYPE C ,          "得意先品目情報
LTX02(30) TYPE C ,          "納品書用備考
* 2007/07/30 APPEND START S.SHIGEMITU(DMC)
*          LTX03(30) TYPE C ,          "商品名
*          LTX04(30) TYPE C ,          "用途
* 2007/07/30 APPEND END
* 2007/09/03 APPEND START FURUYA(DMC)
* 40桁対応に変更
LTX03(40) TYPE C ,          "商品名
LTX04(40) TYPE C ,          "用途
* 2007/09/03 APPEND END
END OF TYP_DATA  ,
BEGIN OF TYP_MARA ,
MATNR LIKE MARA-MATNR ,     "品目コード
MEINS LIKE MARA-MEINS ,     "基本数量単位
END OF TYP_MARA .
*----------------------------------------------------------------------*
* 変数宣言
*----------------------------------------------------------------------*
DATA :
D_TAB TYPE TABLE OF TYP_DATA ,
D_WRK TYPE TYP_DATA ,
F_TAB TYPE TABLE OF TYP_FILE ,
F_WRK TYPE TYP_FILE ,
M_TAB TYPE TABLE OF TYP_MARA ,
M_WRK TYPE TYP_MARA .

DATA : W_MEINS(3)   TYPE C,          "発注単位
W_CNT        TYPE I,          "テーブル行数カウンタ
FLG_MEINS(1) TYPE C,          "単位変換フラグ
FLG_WRITE(1) TYPE C.          "WRITEフラグ

DATA : BDC_TRAN LIKE SYST-TCODE VALUE 'VD52' ,
BDC_MODE(1) TYPE C VALUE 'N' ,
* 2009.09.28 Insert >>>
BDC_UPDATE(1) TYPE C VALUE 'S'.
* 2009.09.28 Insert <<<
*      BDC_MODE(1) TYPE C VALUE 'A' .

*----------------------------------------------------------------------*
* 選択画面
*----------------------------------------------------------------------*
PARAMETERS : P_FILE LIKE RLGRAP-FILENAME.
* Add 2006.03.16 --->
PARAMETERS : P_LOCAL RADIOBUTTON GROUP R_1 , "ローカル
P_SERVE RADIOBUTTON GROUP R_1 . "サーバー
* Add 2006.03.16 <---
* Add ES-UP 2012/08/13 -->
*----------------------------------------------------------------------*
* 固定値定義
*----------------------------------------------------------------------*
****START UPD 2014/08/29 ISID18****
*CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
CONSTANTS CNS_UTF TYPE STRING VALUE `UTF-8`.
****END UPD 2014/08/29 ISID18****
* Add ES-UP 2012/08/13 <--
AT SELECTION-SCREEN .

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
PERFORM WS_FILENAME_GET USING P_FILE.

START-OF-SELECTION .

PERFORM READ_FILE .
PERFORM DATA_GET .
PERFORM CHK_ITEM .
LOOP AT F_TAB INTO F_WRK .
READ TABLE D_TAB INTO D_WRK WITH KEY KUNNR = F_WRK-KUNNR
MATNR = F_WRK-MATNR
BINARY SEARCH.
PERFORM BDC_SET .
PERFORM CALL_TRAN .
ENDLOOP .

*----------------------------------------------------------------------*
* ファイルパス取得
*----------------------------------------------------------------------*
FORM WS_FILENAME_GET USING P_FILE.
* Mod ES-UP 2012/08/13 -->
*  CALL FUNCTION 'WS_FILENAME_GET'
*       EXPORTING
*            DEF_PATH         = 'C:\SAPDATA'
*            MASK             = '*.*,ALL FILES,*.*.'
*            MODE             = 'O'
*       IMPORTING
*            FILENAME         = P_FILE
*       EXCEPTIONS
*            INV_WINSYS       = 1
*            NO_BATCH         = 2
*            SELECTION_CANCEL = 3
*            SELECTION_ERROR  = 4
*            OTHERS           = 5.
DATA: L_FILE_TABLE TYPE FILETABLE,
L_FILENAME   TYPE REF TO FILE_TABLE,
L_RC         TYPE I,
L_INITIAL_DIRECTORY TYPE STRING.
L_INITIAL_DIRECTORY = `C:\SAPDATA`.
CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG(
EXPORTING
*      WINDOW_TITLE            = WINDOW_TITLE
*      DEFAULT_EXTENSION       = DEFAULT_EXTENSION
*      DEFAULT_FILENAME        = DEFAULT_FILENAME
*      FILE_FILTER             = FILE_FILTER
*      WITH_ENCODING           = WITH_ENCODING
INITIAL_DIRECTORY       = L_INITIAL_DIRECTORY
*      MULTISELECTION          = MULTISELECTION
CHANGING
FILE_TABLE              = L_FILE_TABLE
RC                      = L_RC
*      USER_ACTION             = USER_ACTION
*      FILE_ENCODING           = FILE_ENCODING
EXCEPTIONS
*      FILE_OPEN_DIALOG_FAILED = 1
*      CNTL_ERROR              = 2
*      ERROR_NO_GUI            = 3
*      NOT_SUPPORTED_BY_GUI    = 4
OTHERS                  = 0 ).
READ TABLE L_FILE_TABLE REFERENCE INTO L_FILENAME INDEX 1.
IF SY-SUBRC = 0.
P_FILE = L_FILENAME->FILENAME.
ENDIF.
* Mod ES-UP 2012/08/13 <--
ENDFORM.                    "WS_FILENAME_GET
*----------------------------------------------------------------------*
* ファイル読み込み
*----------------------------------------------------------------------*
FORM READ_FILE .
* Mod ES-UP 2012/10/24 -->
** Add 2006.03.16 --->
*  Data : L_LINE(1000) Type C .
DATA L_LINE TYPE STRING.
* Mod ES-UP 2012/10/24 <--
* Mod ES-UP 2012/08/13 -->
*  Data : W_TAB Type X Value '09' .
DATA: L_FILE TYPE STRING,
**** START ADD 2015/02/04 ISID11 ****
L_Z_OUTPUT_CP TYPE  ZTEGZZM001-Z_OUTPUT_CP,
L_SAPCODEPAGE TYPE STRING,
L_FLGUTF8  TYPE  FLAG,
L_SUBRC    TYPE SY-SUBRC,
**** END ADD 2015/02/04 ISID11 ****
L_CODEPAGE TYPE ABAP_ENCODING.

**** START ADD 2015/02/04 ISID11 ****
CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
EXPORTING
IMPPGM      = SY-REPID
IMPBUKRS    = TEXT-001
IMPORTING
EXPCODEPAGE = L_Z_OUTPUT_CP
EXPFLGUTF8  = L_FLGUTF8.
**** END ADD 2015/02/04 ISID11 ****

****START UPD 2014/08/29 ISID18****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
**** START ADD 2015/02/04 ISID11 ****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_UTF ).
L_SAPCODEPAGE = L_Z_OUTPUT_CP.
IF L_SAPCODEPAGE IS NOT INITIAL.

L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).

ENDIF.
**** END ADD 2015/02/04 ISID11 ****
****END UPD 2014/8/29 ISID18****
L_FILE = P_FILE.
* Mod ES-UP 2012/08/13 <--
IF P_LOCAL EQ 'X' .
* Add 2006.03.16 <---
* Mod ES-UP 2012/08/13 -->
*    CALL FUNCTION 'WS_UPLOAD'
*         EXPORTING
*              FILENAME                = P_FILE
*              FILETYPE                = 'DAT'
*         TABLES
*              DATA_TAB                = F_TAB
*         EXCEPTIONS
*              CONVERSION_ERROR        = 1
*              FILE_OPEN_ERROR         = 2
*              FILE_READ_ERROR         = 3
*              INVALID_TYPE            = 4
*              NO_BATCH                = 5
*              UNKNOWN_ERROR           = 6
*              INVALID_TABLE_WIDTH     = 7
*              GUI_REFUSE_FILETRANSFER = 8
*              CUSTOMER_ERROR          = 9
*              OTHERS                  = 10.
CL_GUI_FRONTEND_SERVICES=>GUI_UPLOAD(
EXPORTING
FILENAME                = L_FILE
FILETYPE                = 'DAT'
HAS_FIELD_SEPARATOR     = ABAP_TRUE
*        HEADER_LENGTH           = 0
*        READ_BY_LINE            = 'X'
*        DAT_MODE                = SPACE
CODEPAGE                = L_CODEPAGE
*        IGNORE_CERR             = ABAP_TRUE
*        REPLACEMENT             = '#'
*        VIRUS_SCAN_PROFILE      = VIRUS_SCAN_PROFILE
*      IMPORTING
*        FILELENGTH              = FILELENGTH
*        HEADER                  = HEADER
CHANGING
DATA_TAB                = F_TAB
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
NOT_SUPPORTED_BY_GUI    = 17
ERROR_NO_GUI            = 18
OTHERS                  = 19 ).
* Mod ES-UP 2012/08/13 <--
*   汎用モジュール失敗時エラーメッセージ出力
IF SY-SUBRC NE 0.
MESSAGE I616 .
STOP .
ELSE.
ENDIF.
* Add 2006.03.16 --->
ELSE .
* Mod ES-UP 2012/08/13 -->
*    Open Dataset P_FILE For Input IN TEXT MODE .
**** START ADD 2015/02/04 ISID11 ****
IF L_FLGUTF8 IS INITIAL.
TRY .
OPEN DATASET P_FILE FOR INPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.

L_SUBRC = SY-SUBRC.

CATCH CX_SY_CODEPAGE_CONVERTER_INIT.

L_SUBRC = 8.

ENDTRY.

ELSE.
**** END ADD 2015/02/04 ISID11 ****
OPEN DATASET P_FILE FOR INPUT
**** START UPD 2014/08/31 ISID19 ****
*      IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IN TEXT MODE ENCODING UTF-8
**** END UPD 2014/08/31 ISID19 ****
**** START ADD 2015/01/13 ISID11 ****
SKIPPING BYTE-ORDER MARK
**** END ADD 2015/01/13 ISID11 ****
IGNORING CONVERSION ERRORS.
**** START ADD 2015/02/04 ISID11 ****
L_SUBRC = SY-SUBRC.

ENDIF.
**** END ADD 2015/02/04 ISID11 ****
* Mod ES-UP 2012/08/13 <--
**** START UPD 2015/02/04 ISID11 ****
*    If SY-SUBRC NE 0 .
IF L_SUBRC <> 0 .
**** END UPD 2015/02/04 ISID11 ****
MESSAGE I616 .
STOP .
ELSE .
DO .
READ DATASET P_FILE INTO L_LINE .
IF SY-SUBRC NE 0 .
EXIT .
ENDIF .
* Mod ES-UP 2012/08/13 -->
*        Split L_LINE At W_TAB
SPLIT L_LINE AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
* Mod ES-UP 2012/08/13 <--
INTO F_WRK-KUNNR
F_WRK-MATNR
F_WRK-KDMAT
F_WRK-POSTX
F_WRK-LTX01
F_WRK-LTX02
* 2007/07/30 APPEND START S.SHIGEMITU(DMC)
F_WRK-LTX03
F_WRK-LTX04
* 2007/07/30 APPEND END
.
APPEND F_WRK TO F_TAB .
CLEAR : F_WRK .
ENDDO .
CLOSE DATASET P_FILE .
ENDIF .
ENDIF .
* Add 2006.03.16 <---


* 取得データ０件時エラーメッセージ出力
CLEAR : W_CNT.
DESCRIBE TABLE F_TAB LINES W_CNT .
IF W_CNT = 0 .
MESSAGE I616 .
STOP .
ELSE.
ENDIF.

* 取得データ変換
LOOP AT F_TAB INTO F_WRK.
PERFORM CONV_ALPHA_IN_SYORI USING F_WRK-KUNNR
CHANGING F_WRK-KUNNR.
PERFORM CONV_MATN1_IN_SYORI USING F_WRK-MATNR
CHANGING F_WRK-MATNR.
MODIFY F_TAB FROM F_WRK.
ENDLOOP.

ENDFORM .                    "READ_FILE
*----------------------------------------------------------------------*
* 対象データ取得
*----------------------------------------------------------------------*
FORM DATA_GET .

* 変更前データ取得
SELECT KUNNR
MATNR
KDMAT
POSTX
INTO CORRESPONDING FIELDS OF TABLE D_TAB
FROM KNMT
FOR ALL ENTRIES IN F_TAB
WHERE MATNR = F_TAB-MATNR
AND KUNNR = F_TAB-KUNNR
.
* 取得データ０件時エラーメッセージ出力
CLEAR : W_CNT.
DESCRIBE TABLE D_TAB LINES W_CNT .
IF W_CNT = 0 .
MESSAGE I616 .
STOP .
ELSE.
SORT D_TAB BY KUNNR MATNR .
ENDIF.

* 品目マスタ取得
SELECT MATNR
MEINS
INTO CORRESPONDING FIELDS OF TABLE M_TAB
FROM MARA
FOR ALL ENTRIES IN F_TAB
WHERE MATNR = F_TAB-MATNR.

ENDFORM .                    "DATA_GET
*----------------------------------------------------------------------*
* BDCテーブルセット
*----------------------------------------------------------------------*
FORM BDC_SET .

CLEAR : W_MEINS.

PERFORM SET_BDC USING :
* 第一画面
'RV10A001' '1000' 'X'  ,
'BDC_CURSOR' 'MATNR_R-LOW' ''  ,
'BDC_OKCODE' '=ONLI' ''  ,
'KUNNR' F_WRK-KUNNR ''  ,
'VKORG' '1000' ''  ,
'VTWEG' '10' ''  ,
'MATNR_R-LOW' F_WRK-MATNR ''  ,
*
'SAPMV10A' '200' 'X'  ,
'BDC_CURSOR' 'MV10A-KDMAT(01)' ''  ,
'BDC_OKCODE' '=SELE' ''  ,
*
'SAPMV10A' '0300' 'X'  ,
'BDC_CURSOR' 'MV10A-POSTX' ''  ,
'BDC_OKCODE' '=TEXT' ''  ,
*
'SAPLV70T' '101' 'X'  ,
*      'BDC_CURSOR' 'LV70T-LTX01(02)' ''  ,
'BDC_OKCODE' '=UPD' ''  .
IF F_WRK-LTX01 EQ 'X'  .
PERFORM SET_BDC USING :
'BDC_CURSOR' 'LV70T-LTX01(01)' ''  ,
'LV70T-LTX01(01)' '' ''  .
ELSE .
IF NOT ( F_WRK-LTX01 IS INITIAL ) .
PERFORM SET_BDC USING :
'BDC_CURSOR' 'LV70T-LTX01(01)' ''  ,
'LV70T-LTX01(01)' F_WRK-LTX01 ''  .
ENDIF .
ENDIF .

IF F_WRK-LTX02 EQ 'X'  .
PERFORM SET_BDC USING :
'BDC_CURSOR' 'LV70T-LTX01(02)' ''  ,
'LV70T-LTX01(02)'  '' ''  .
ELSE .
IF NOT ( F_WRK-LTX02 IS INITIAL ) .
PERFORM SET_BDC USING :
'BDC_CURSOR' 'LV70T-LTX01(02)' ''  ,
'LV70T-LTX01(02)' F_WRK-LTX02 ''  .
ENDIF .
ENDIF .

* 2007/07/30 APPEND START S.SHIGEMITU(DMC)
IF F_WRK-LTX03 EQ 'X'  .
PERFORM SET_BDC USING :
'BDC_CURSOR' 'LV70T-LTX01(03)' ''  ,
'LV70T-LTX01(03)'  '' ''  .
ELSE .
IF NOT ( F_WRK-LTX03 IS INITIAL ) .
PERFORM SET_BDC USING :
'BDC_CURSOR' 'LV70T-LTX01(03)' ''  ,
'LV70T-LTX01(03)' F_WRK-LTX03 ''  .
ENDIF .
ENDIF .
IF F_WRK-LTX04 EQ 'X'  .
PERFORM SET_BDC USING :
'BDC_CURSOR' 'LV70T-LTX01(04)' ''  ,
'LV70T-LTX01(04)'  '' ''  .
ELSE .
IF NOT ( F_WRK-LTX04 IS INITIAL ) .
PERFORM SET_BDC USING :
'BDC_CURSOR' 'LV70T-LTX01(04)' ''  ,
'LV70T-LTX01(04)' F_WRK-LTX04 ''  .
ENDIF .
ENDIF .
* 2007/07/30 APPEND END

*
PERFORM SET_BDC USING :
'SAPMV10A' '0300' 'X'  ,
'BDC_CURSOR' 'MV10A-KDMAT' ''  ,
'BDC_OKCODE' '=SICH' ''  ,
'MV10A-KDMAT' F_WRK-KDMAT ''  .
*     'MV10A-POSTX' F_WRK-POSTX ''  .
IF F_WRK-POSTX EQ 'X'  .
PERFORM SET_BDC USING :
'MV10A-POSTX' '' ''  .
ELSE .
IF NOT ( F_WRK-POSTX IS INITIAL ) .
PERFORM SET_BDC USING :
'MV10A-POSTX' F_WRK-POSTX ''  .
ENDIF .
ENDIF .


ENDFORM .                    "BDC_SET
*----------------------------------------------------------------------*
* トランザクションコール
*----------------------------------------------------------------------*
FORM CALL_TRAN .

DATA : W_MSG LIKE MESSAGE ,
W_MSGNO LIKE SY-MSGNO .

CALL TRANSACTION BDC_TRAN
USING   BDC_TAB
MODE    BDC_MODE
* 2009.09.28 Insert >>>
UPDATE  BDC_UPDATE
* 2009.09.28 Insert <<<
MESSAGES INTO BDC_MSG.

*2007/09/10 MOD START
IF SY-SUBRC <> 0.

WRITE : / '品目'     , F_WRK-MATNR ,
'得意先'   , F_WRK-KUNNR .

LOOP AT BDC_MSG .
MOVE : BDC_MSG-MSGNR TO W_MSGNO ,
'X'           TO FLG_WRITE.
CALL FUNCTION 'WRITE_MESSAGE'
EXPORTING
MSGID = BDC_MSG-MSGID
MSGNO = W_MSGNO
MSGTY = BDC_MSG-MSGTYP
MSGV1 = BDC_MSG-MSGV1
MSGV2 = BDC_MSG-MSGV2
MSGV3 = BDC_MSG-MSGV3
MSGV4 = BDC_MSG-MSGV4
*         MSGV5 = BDC_MSG-MSGV5
IMPORTING
*         ERROR =
MESSG = W_MSG
*         MSGLN =
.
MESSAGE ID BDC_MSG-MSGID
*            Type BDC_MSG-MSGTYP
TYPE 'S'
NUMBER W_MSGNO
WITH BDC_MSG-MSGV1
BDC_MSG-MSGV2
BDC_MSG-MSGV3
BDC_MSG-MSGV4
.
WRITE : /1 BDC_MSG-MSGTYP,
3 W_MSG-MSGTX .

ENDLOOP .
ENDIF.
*  LOOP AT BDC_MSG WHERE MSGTYP = 'E' OR MSGTYP = 'A'.
*    MOVE : BDC_MSG-MSGNR TO W_MSGNO ,
*           'X'           TO FLG_WRITE.
*    CALL FUNCTION 'WRITE_MESSAGE'
*      EXPORTING
*        MSGID         = BDC_MSG-MSGID
*        MSGNO         = W_MSGNO
*        MSGTY         = BDC_MSG-MSGTYP
*        MSGV1         = BDC_MSG-MSGV1
*        MSGV2         = BDC_MSG-MSGV2
*        MSGV3         = BDC_MSG-MSGV3
*        MSGV4         = BDC_MSG-MSGV4
**         MSGV5         = BDC_MSG-MSGV5
*      IMPORTING
**         ERROR         =
*        MESSG         = W_MSG
**         MSGLN         =
*              .
*    MESSAGE ID BDC_MSG-MSGID
**            Type BDC_MSG-MSGTYP
*          TYPE 'S'
*        NUMBER W_MSGNO
*        WITH BDC_MSG-MSGV1
*             BDC_MSG-MSGV2
*             BDC_MSG-MSGV3
*             BDC_MSG-MSGV4
*    .
*    WRITE : /1 BDC_MSG-MSGTYP,
*             3 W_MSG-MSGTX .
*
*  ENDLOOP .
*2007/09/10 MOD END

IF FLG_WRITE IS INITIAL.
PERFORM WRITE_CHANGE_OK.
ENDIF.

ULINE.

CLEAR   : FLG_WRITE.
REFRESH : BDC_TAB , BDC_MSG .
CLEAR   : D_WRK , F_WRK .

ENDFORM .                    "CALL_TRAN
*----------------------------------------------------------------------*
* BDCセット
*----------------------------------------------------------------------*
FORM SET_BDC USING P_DAT P_VAL P_FLG .
MOVE : P_FLG TO BDC_TAB-DYNBEGIN .
IF P_FLG EQ 'X' .
MOVE : P_DAT TO BDC_TAB-PROGRAM ,
P_VAL TO BDC_TAB-DYNPRO .
ELSE .
MOVE : P_DAT TO BDC_TAB-FNAM ,
P_VAL TO BDC_TAB-FVAL .
ENDIF .
APPEND : BDC_TAB .
CLEAR : BDC_TAB .
ENDFORM .                    "SET_BDC
*----------------------------------------------------------------------*
* 項目チェック
*----------------------------------------------------------------------*
FORM CHK_ITEM.
LOOP AT F_TAB INTO F_WRK.
READ TABLE D_TAB INTO D_WRK WITH KEY KUNNR = F_WRK-KUNNR
MATNR = F_WRK-MATNR
BINARY SEARCH.

IF SY-SUBRC = 0.

IF F_WRK-KDMAT IS INITIAL. "得意先品目が空白
MOVE D_WRK-KDMAT TO F_WRK-KDMAT.
ENDIF.


MODIFY F_TAB FROM F_WRK .

ELSE.

WRITE : / '品目'     , F_WRK-MATNR ,
'得意先'   , F_WRK-KUNNR ,
'は得意先品目マスタに存在しませんでした。'.
ULINE .
DELETE TABLE F_TAB FROM F_WRK .

ENDIF.

ENDLOOP.

ENDFORM.                    "CHK_ITEM
*----------------------------------------------------------------------*
* 前ゼロ埋め変換
*----------------------------------------------------------------------*
FORM CONV_ALPHA_IN_SYORI USING P_IN
CHANGING P_OUT.

CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = P_IN
IMPORTING
OUTPUT = P_OUT.

ENDFORM.                    "CONV_ALPHA_IN_SYORI
*----------------------------------------------------------------------*
* 前ゼロ埋め変換
*----------------------------------------------------------------------*
FORM CONV_MATN1_IN_SYORI USING P_IN
CHANGING P_OUT.

CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
EXPORTING
INPUT  = P_IN
IMPORTING
OUTPUT = P_OUT.

ENDFORM.                    "CONV_MATN1_IN_SYORI
*----------------------------------------------------------------------*
* 変更成功メッセージ出力
*----------------------------------------------------------------------*
FORM WRITE_CHANGE_OK.

WRITE : / '品目'     , F_WRK-MATNR ,
'得意先'   , F_WRK-KUNNR ,
'の得意先品目マスタが下記のとおり変更されました。'.
IF F_WRK-KDMAT NE D_WRK-KDMAT.
WRITE: / '得意先品目：' , D_WRK-KDMAT , '⇒' , F_WRK-KDMAT.
ENDIF.

*2007/09/10 MOD START
*  IF F_WRK-POSTX NE D_WRK-POSTX.
IF NOT F_WRK-POSTX IS INITIAL AND
F_WRK-POSTX NE D_WRK-POSTX.
*2007/09/10 MOD END
WRITE: / '得意先品目テキスト：' , D_WRK-POSTX , '⇒' , F_WRK-POSTX.
ENDIF.

WRITE: / '得意先品目情報：', F_WRK-LTX01.
WRITE: / '納品書用備考：' , F_WRK-LTX02.
* 2007/07/30 APPEND START S.SHIGEMITU(DMC)
WRITE: / '商品名：', F_WRK-LTX03.
WRITE: / '用途：' , F_WRK-LTX04.
* 2007/07/30 APPEND END
ENDFORM.                    "WRITE_CHANGE_OK
