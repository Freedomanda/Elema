REPORT ZZ_CMTEST_2 .

*&---------------------------------------------------------------------*
*& 属性定義                                                            *
*&---------------------------------------------------------------------*
TYPES:
* エラーログ
BEGIN OF T_S_LOG,
INDEX  TYPE I,               "行
MSGTY  TYPE MSGTY,           "メッセージタイプ
MSGNO  TYPE MSGNO,           "メッセージNo.
MSGTX  TYPE MSGTX,           "メッセージ
END  OF T_S_LOG,
T_I_LOG   TYPE TABLE OF T_S_LOG  "内部テーブル定義
.
*&---------------------------------------------------------------------*
*& 内部テーブル定義                                                    *
*&---------------------------------------------------------------------*
DATA:
*-内部テーブル
G_I_BDC     TYPE TABLE OF BDCDATA,     "BDCテーブル
G_I_LOG     TYPE T_I_LOG               "エラーログ
.


*&---------------------------------------------------------------------*
*& 選択画面定義                                                        *
*&---------------------------------------------------------------------*
PARAMETERS:
P_LIFNR   TYPE LFA1-LIFNR DEFAULT '7777777' OBLIGATORY,
P_EKORG   TYPE LFM1-EKORG DEFAULT '1000'    OBLIGATORY,
P_ZTERMB  TYPE LFB1-ZTERM OBLIGATORY,
P_ZTERMM  TYPE LFM1-ZTERM OBLIGATORY,
P_ZWELS   TYPE LFB1-ZWELS.
SELECTION-SCREEN SKIP.

*BDC MODE
PARAMETERS: P_MODE TYPE CTU_MODE OBLIGATORY.
PARAMETERS: P_TEST AS CHECKBOX.


*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN                                                 *
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*& START-OF-SELECTION                                                  *
*&---------------------------------------------------------------------*
START-OF-SELECTION.

* 第一画面セット
PERFORM EDIT_BDC_FIRST.

*   会社コードデータのセット
PERFORM EDIT_BDC_KAISHA USING ' '.

*   購買組織データのセット
PERFORM EDIT_BDC_KOBAI.

** 保存
PERFORM EDIT_BDC_SAVE.

* トランザクション起動
PERFORM CALL_TRAN.

*&---------------------------------------------------------------------*
*& END-OF-SELECTION                                                    *
*&---------------------------------------------------------------------*
END-OF-SELECTION.
PERFORM WRITE_LOG.


*&---------------------------------------------------------------------*
*&      Form  edit_bdc_k
*&---------------------------------------------------------------------*
*       BDCデータ作成
*----------------------------------------------------------------------*
*  -->  po_tcode   トランザクションコード
*----------------------------------------------------------------------*
FORM EDIT_BDC_K.

DATA:
L_EXFLG  TYPE CHAR1       "仕入先マスタ存在フラグ
"   1:一般あり 会社コードあり 購買組織あり
"   2:一般あり 会社コードあり 購買組織なし
"   3:一般あり 会社コードなし
"   4:一般なし
"   5:一般あり 会社コードなし 購買組織あり
.
CLEAR:
G_I_BDC
.

* 第一画面セット
PERFORM EDIT_BDC_FIRST.

* 会社コードデータのセット
PERFORM EDIT_BDC_KAISHA USING ' '.

* 購買組織データのセット
PERFORM EDIT_BDC_KOBAI.

* 保存
PERFORM EDIT_BDC_SAVE.


ENDFORM.                    " edit_bdc_k
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_KAISHA
*&---------------------------------------------------------------------*
*       BDCデータ作成：仕入先会社コードデータ
*----------------------------------------------------------------------*
*  -->  pi_FLG  保存フラグ
*----------------------------------------------------------------------*
FORM EDIT_BDC_KAISHA USING PI_FLG TYPE CHAR1.

****** 支払処理 会計管理
PERFORM BDC_DATASET USING:
'X'  'SAPMF02K'               '0215',
' '  'LFB1-ZTERM'             P_ZTERMB,
' '  'LFB1-ZWELS' P_ZWELS,  "支払方法
' '  'BDC_OKCODE'             '/00'
.
ENDFORM.                    " EDIT_BDC_KAISHA
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_KOBAI
*&---------------------------------------------------------------------*
*       BDCデータ作成：仕入先購買組織データ
*----------------------------------------------------------------------*
FORM EDIT_BDC_KOBAI .

****** 購買データ
PERFORM BDC_DATASET USING:
'X'  'SAPMF02K'               '0310',
*          ' '  'LFM1-WAERS'             G_S_DATA-WAERS,
' '  'LFM1-ZTERM'              P_ZTERMM,
*          ' '  'LFM1-KALSK'             G_S_DATA-KALSK,
*          ' '  'LFM1-MEPRF'             G_S_DATA-MEPRF,
*          ' '  'LFM1-VERKF'             G_S_DATA-VERKF,
*          ' '  'LFM1-TELF1'             G_S_DATA-TELF1,
*          ' '  'LFM1-WEBRE'             G_S_DATA-WEBRE,
*          ' '  'LFM1-XERSY'             G_S_DATA-XERSY,
*          ' '  'LFM1-XERSR'             G_S_DATA-XERSR,
*          ' '  'LFM1-KZAUT'             G_S_DATA-KZAUT,
*          ' '  'LFM1-BSTAE'             G_S_DATA-BSTAE,
' '  'BDC_OKCODE'             '/00'
*          ' '  'BDC_OKCODE'             '=UPDA'

.
ENDFORM.                    " EDIT_BDC_KOBAI
*&---------------------------------------------------------------------*
*&      Form  bdc_dataset
*&---------------------------------------------------------------------*
*       BDCデータ編集
*----------------------------------------------------------------------*
*  -->  pi_begin  Dynpro 開始
*       pi_name   BDC モジュールプール / 項目名
*       pi_value  BDC Dynpro 番号 / 項目値
*----------------------------------------------------------------------*
FORM BDC_DATASET USING PI_BEGIN TYPE CHAR1
PI_NAME  TYPE ANY
PI_VALUE TYPE ANY.
DATA:
L_S_BDC     TYPE BDCDATA.              "BDCテーブル

IF PI_BEGIN = 'X'.
L_S_BDC-PROGRAM   = PI_NAME.
L_S_BDC-DYNPRO    = PI_VALUE.
L_S_BDC-DYNBEGIN  = PI_BEGIN.
APPEND L_S_BDC TO G_I_BDC.
ELSE.
*-  '/'が入力されてない場合にセット
IF PI_VALUE <> '/'.
L_S_BDC-FNAM      = PI_NAME.
L_S_BDC-FVAL      = PI_VALUE.
APPEND L_S_BDC TO G_I_BDC.
ENDIF.
ENDIF.

ENDFORM.                    " bdc_dataset
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_KAISHA
*&---------------------------------------------------------------------*
*       BDCデータ作成：仕入先第一画面
*----------------------------------------------------------------------*
*  -->  pi_FLG  保存フラグ
*----------------------------------------------------------------------*
FORM EDIT_BDC_FIRST.

PERFORM BDC_DATASET USING:
'X'  'SAPMF02K'       '0101',
' '  'RF02K-LIFNR'     P_LIFNR,
' '  'RF02K-BUKRS'     'C001',
' '  'RF02K-EKORG'     P_EKORG,
' '  'RF02K-D0215'     'X',
' '  'RF02K-D0310'     'X',
' '  'BDC_OKCODE'      '/00'.

ENDFORM.                    " EDIT_BDC_FIRST
*&---------------------------------------------------------------------*
*&      Form  call_tran
*&---------------------------------------------------------------------*
*       トランザクション起動
*----------------------------------------------------------------------*
FORM CALL_TRAN .

DATA:
CTU_PARAMS   TYPE CTU_PARAMS,   "トランザクションパラメータ
L_MSGTX      TYPE MSGTX,
L_S_LOG      TYPE T_S_LOG           "エラーログ
.

CTU_PARAMS-DISMODE = P_MODE.
CTU_PARAMS-RACOMMIT = 'X'.

* トランザクション起動
CALL TRANSACTION  'XK02'
USING  G_I_BDC
OPTIONS FROM CTU_PARAMS.

IF SY-SUBRC = 0.
ROLLBACK WORK..
*CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
** IMPORTING
**   RETURN        =
*          .

ELSE.
*   メッセージ取得
CALL FUNCTION 'MESSAGE_TEXT_BUILD'
EXPORTING
MSGID               = SY-MSGID
MSGNR               = SY-MSGNO
MSGV1               = SY-MSGV1
MSGV2               = SY-MSGV2
MSGV3               = SY-MSGV3
MSGV4               = SY-MSGV4
IMPORTING
MESSAGE_TEXT_OUTPUT = L_MSGTX.

*   メッセージをログ用内部テーブルに保存
L_S_LOG-MSGTY = SY-MSGTY.
L_S_LOG-MSGNO = SY-MSGNO.
L_S_LOG-MSGTX = L_MSGTX.
APPEND L_S_LOG TO G_I_LOG.
ENDIF.

ENDFORM.                    " call_tran
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_SAVE
*&---------------------------------------------------------------------*
*       BDCデータ作成：保存画面
*----------------------------------------------------------------------*
FORM EDIT_BDC_SAVE.


IF P_TEST IS INITIAL.

PERFORM BDC_DATASET USING:
'X'  'SAPLSPO1'       '0300',
' '  'BDC_OKCODE'     '=YES'.

ELSE.
PERFORM BDC_DATASET USING:
'X'  'SAPLSPO1'       '0300',
' '  'BDC_OKCODE'     '=NO'.

ENDIF.
ENDFORM.                    " EDIT_BDC_SAVE
*&---------------------------------------------------------------------*
*&      Form  write_log
*&---------------------------------------------------------------------*
*       ログ出力
*----------------------------------------------------------------------*
FORM WRITE_LOG .

DATA:
L_S_LOG      TYPE T_S_LOG           "エラーログ
.

LOOP AT G_I_LOG INTO L_S_LOG.
WRITE: /1(10)  L_S_LOG-INDEX NO-ZERO,
12      L_S_LOG-MSGTY,
13      L_S_LOG-MSGNO,
25      L_S_LOG-MSGTX.
ENDLOOP.

ENDFORM.                    " write_log
