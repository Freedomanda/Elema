*&---------------------------------------------------------------------*
*&  Include           ZEGSDR1040_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  INIT_DATA
*&---------------------------------------------------------------------*
*       初期処理
*----------------------------------------------------------------------*
FORM init_data .

sscrfields-functxt_01 = text-p03.
REFRESH:
td_zt004c.

w_bt_inp = text-004.
w_bt_ref = text-005.

ENDFORM.                    " INIT_DATA

*&---------------------------------------------------------------------*
*&    Form  F1000_SET_UCOMM_SLS
*&---------------------------------------------------------------------*
*    1. Check on Key of 'FC01'
*----------------------------------------------------------------------*
FORM set_ucomm_sls.
CASE sscrfields-ucomm.
WHEN 'FC01'.
IF sy-dynnr = 1000.
CLEAR st_s016.
REFRESH td_zt004c.
CALL SCREEN 3000.
ENDIF.

ENDCASE.    "<SSCRFIELDS-UCOMM>
ENDFORM.                    " F1000_SET_UCOMM_SLS

*&---------------------------------------------------------------------*
*&      Form  CHECK_INPUT
*&---------------------------------------------------------------------*
*       入力チェック
*----------------------------------------------------------------------*
FORM check_input .

TYPES: BEGIN OF ltyp_werks,
werks TYPE t001w-werks,
END OF ltyp_werks.

DATA: ltd_werks   TYPE STANDARD TABLE OF ltyp_werks,
lst_werks   TYPE ltyp_werks,
lst_werks_r LIKE LINE OF rd_werks.

* A-1-1．入力チェック
* プラントコード存在チェック
SELECT werks
INTO TABLE ltd_werks
FROM t001w
WHERE werks IN s_werks.
IF sy-subrc <> 0.
SET CURSOR FIELD 'S_WERKS-LOW'.
*   プラント ( &1 ) は存在しません
MESSAGE e004(zmegsd01) WITH s_werks-low.
ENDIF.

* A-1-2．権限チェック
REFRESH rd_werks.
LOOP AT ltd_werks INTO lst_werks.
lst_werks_r-sign = 'I'.
lst_werks_r-option = 'EQ'.
lst_werks_r-low = lst_werks-werks.
APPEND lst_werks_r TO rd_werks.

AUTHORITY-CHECK OBJECT 'M_MSEG_WMB'
ID 'WERKS' FIELD lst_werks-werks
ID 'ACTVT' FIELD '01'.
IF sy-subrc <> 0.
SET CURSOR FIELD 'S_WERKS-LOW'.
*     プラントに対する実行権限がありません
MESSAGE e003(zmegsd01).
ENDIF.
ENDLOOP.

ENDFORM.                    " CHECK_INPUT

*&---------------------------------------------------------------------*
*&      Form  MAIN_PROCESS
*&---------------------------------------------------------------------*
*       主処理
*----------------------------------------------------------------------*
FORM main_process .

DATA:
ltd_zt003 TYPE typ_td_zt003,
ltd_text TYPE typ_td_text.

* A-2-1．ShippingInstructionデータ取得
PERFORM get_si_data CHANGING ltd_zt003.

* A-2-2．テキスト取得
PERFORM get_text USING ltd_zt003
CHANGING ltd_text.

* 画面出力データ取得
PERFORM get_alv_content USING ltd_zt003
ltd_text
CHANGING td_sin.

* A-3．画面出力
PERFORM display_data USING  td_sin
abap_off.

ENDFORM.                    " MAIN_PROCESS

*&---------------------------------------------------------------------*
*&      Form  GET_SI_DATA
*&---------------------------------------------------------------------*
*       A-2-1-1．S/I Noの取得
*----------------------------------------------------------------------*
*      <--O_TD_zt003  S/I data
*----------------------------------------------------------------------*
FORM get_si_data  CHANGING o_td_sin TYPE typ_td_zt003.

*    ztegsdt003~Z_SI_NO                     "S/I No
*    ztegsdt003~Z_SI_DATE                   "S/I Date
*    ztegsdt003~Z_BL_NO                     "B/L No
*    ztegsdt003~Z_BL_DATE                   "B/L Date
*    ztegsdt003~Z_CUST_CNEE                 "Customer(CNEE)
*    ztegsdt003~Z_CUST_NAME_CNEE            "Customer Name(CNEE)
*    ztegsdt003~Z_ADDRESS1_CNEE             "Address1(CNEE)
*    ztegsdt003~Z_ADDRESS2_CNEE             "Address2(CNEE)
*    ztegsdt003~Z_ATTN_CNEE                 "Attn(CNEE)
*    ztegsdt003~Z_TEL_CNEE                  "Tel(CNEE)
*    ztegsdt003~Z_FAX_CNEE                  "Fax(CNEE)
*    ztegsdt003~Z_CUST_NTFY                 "Customer(Notify)
*    ztegsdt003~Z_CUST_NAME_NTFY            "Customer Name(Notify)
*    ztegsdt003~Z_ADDRESS1_NTFY             "Address1(Notify)
*    ztegsdt003~Z_ADDRESS2_NTFY             "Address2(Notify)
*    ztegsdt003~Z_ATTN_NTFY                 "Attn(Notify)
*    ztegsdt003~Z_TEL_NTFY                  "Tel(Notify)
*    ztegsdt003~Z_FAX_NTFY                  "Fax(Notify)
*    ztegsdt003~Z_CARRIER                   "Carrier
*    ztegsdt003~Z_BOOKING_NO                "Booking No
*    ztegsdt003~Z_SHIPPED_PER               "Shipped Per
*    ztegsdt003~Z_VOY_NO                    "Voy No
*    ztegsdt003~Z_ETD                       "ETD
*    ztegsdt003~Z_ETA                       "ETA
*    ztegsdt003~Z_SHIP_DATE                 "Ship Date
*    ztegsdt003~Z_CFS_CUT                   "CFS-CUT
*    ztegsdt003~Z_CY_CUT                    "CY-CUT
*    ztegsdt003~Z_CSIZE_20FT_QTY            "20ft
*    ztegsdt003~Z_CSIZE_40FT_QTY            "40ft
*    ztegsdt003~Z_CSIZE_OTH_QTY             "Others
*    ztegsdt003~Z_PL_RECEIPT                "Place of Receipt
*    ztegsdt003~Z_PT_LOADING                "Port of Loading
*    ztegsdt003~Z_PT_DISCHARGE              "Port of Discharge
*    ztegsdt003~Z_PL_DELIVERY               "Place of Delivery
*    ztegsdt003~Z_FINAL_DEST                "Final Destination
*    ztegsdt003~Z_FREIGHT_TERM              "Freight Term
*    ztegsdt003~Z_FREIGHT_ON_BL             "Freight on B/L
*    ztegsdt003~Z_PL__ISSUE                 "Place of Issue
*    ztegsdt003~Z_KIND_OF_BL                "Kind of B/L
*    ztegsdt003~Z_DG_CODE                   "DG Code
*    ztegsdt003~Z_TEMP_ZONES                "Temperature Zones
*    ztegsdt003~Z_DESC_OF_GOODS             "Description of Goods
*    ztegsdt003~Z_SI_REMARKS1               "Remarks (1)
*    ztegsdt003~Z_SI_REMARKS2               "Remarks (2)
*    ztegsdt003~Z_SI_REMARKS3               "Remarks (3)
*    ztegsdt003~Z_SI_REMARKS4               "Remarks (4)
*    ztegsdt003~Z_SI_REMARKS5               "Remarks (5)
*    ztegsdt003~Z_CRE_YMD                   "登録年月日
*    ztegsdt003~Z_CRE_HMS                   "登録時分秒
*    ztegsdt003~Z_CRE_USERID                "ユーザ名
*    ztegsdt003~Z_MOD_YMD                   "更新年月日
*    ztegsdt003~Z_MOD_HMS                   "更新時分秒
*    ztegsdt003~Z_MOD_USERID                "ユーザ名


SELECT
ztegsdt003~mandt
ztegsdt003~z_si_no                     "S/I No
ztegsdt003~z_si_date                   "S/I Date
ztegsdt003~z_bl_no                     "B/L No
ztegsdt003~z_bl_date                   "B/L Date
ztegsdt003~z_cust_cnee                 "Customer(CNEE)
ztegsdt003~z_cust_name_cnee            "Customer Name(CNEE)
ztegsdt003~z_address1_cnee             "Address1(CNEE)
ztegsdt003~z_address2_cnee             "Address2(CNEE)
ztegsdt003~z_attn_cnee                 "Attn(CNEE)
ztegsdt003~z_tel_cnee                  "Tel(CNEE)
ztegsdt003~z_fax_cnee                  "Fax(CNEE)
ztegsdt003~z_cust_ntfy                 "Customer(Notify)
ztegsdt003~z_cust_name_ntfy            "Customer Name(Notify)
ztegsdt003~z_address1_ntfy             "Address1(Notify)
ztegsdt003~z_address2_ntfy             "Address2(Notify)
ztegsdt003~z_attn_ntfy                 "Attn(Notify)
ztegsdt003~z_tel_ntfy                  "Tel(Notify)
ztegsdt003~z_fax_ntfy                  "Fax(Notify)
ztegsdt003~z_carrier                   "Carrier
ztegsdt003~z_booking_no                "Booking No
ztegsdt003~z_shipped_per               "Shipped Per
ztegsdt003~z_voy_no                    "Voy No
ztegsdt003~z_etd                       "ETD
ztegsdt003~z_eta                       "ETA
ztegsdt003~z_ship_date                 "Ship Date
ztegsdt003~z_cfs_cut                   "CFS-CUT
ztegsdt003~z_cy_cut                    "CY-CUT
ztegsdt003~z_csize_20ft_qty            "20ft
ztegsdt003~z_csize_40ft_qty            "40ft
ztegsdt003~z_csize_oth_qty             "Others
ztegsdt003~z_pl_receipt                "Place of Receipt
ztegsdt003~z_pt_loading                "Port of Loading
ztegsdt003~z_pt_discharge              "Port of Discharge
ztegsdt003~z_pl_delivery               "Place of Delivery
ztegsdt003~z_final_dest                "Final Destination
ztegsdt003~z_freight_term              "Freight Term
ztegsdt003~z_freight_on_bl             "Freight on B/L
ztegsdt003~z_pl_issue                  "Place of Issue
ztegsdt003~z_kind_of_bl                "Kind of B/L
ztegsdt003~z_dg_code                   "DG Code
ztegsdt003~z_temp_zones                "Temperature Zones
ztegsdt003~z_desc_of_goods             "Description of Goods
ztegsdt003~z_si_remarks1               "Remarks (1)
ztegsdt003~z_si_remarks2               "Remarks (2)
ztegsdt003~z_si_remarks3               "Remarks (3)
ztegsdt003~z_si_remarks4               "Remarks (4)
ztegsdt003~z_si_remarks5               "Remarks (5)
ztegsdt003~z_cre_ymd                   "登録年月日
ztegsdt003~z_cre_hms                   "登録時分秒
ztegsdt003~z_cre_userid                "ユーザ名
ztegsdt003~z_mod_ymd                   "更新年月日
ztegsdt003~z_mod_hms                   "更新時分秒
ztegsdt003~z_mod_userid                "ユーザ名
INTO CORRESPONDING FIELDS OF TABLE o_td_sin
FROM ztegsdt003
INNER JOIN ztegsdt004
ON ztegsdt003~z_si_no = ztegsdt004~z_si_no
WHERE ztegsdt003~z_si_no IN s_sino           "S/I No
AND ztegsdt003~z_si_date IN s_sidt         "S/I Date
AND ztegsdt003~z_bl_no IN s_blno         "B/L No
AND ztegsdt003~z_bl_date IN s_bldt         "B/L Date 5
AND ztegsdt003~z_cust_cnee IN s_cons         "Consinee
AND ztegsdt003~z_cust_ntfy IN s_notf         "Notify
AND ztegsdt003~z_carrier IN s_carr         "Carrier
AND ztegsdt003~z_booking_no IN s_bkno         "Booking No
AND ztegsdt003~z_shipped_per IN s_sppe         "Shipped Per
AND ztegsdt003~z_voy_no IN s_vono         "Voy No 10
AND ztegsdt003~z_etd IN s_etd          "ETD
AND ztegsdt003~z_eta IN s_eta          "ETA
AND ztegsdt003~z_ship_date IN s_spdt         "Ship Date
AND ztegsdt003~z_cfs_cut IN s_cfct         "CFS-CUT
AND ztegsdt003~z_cy_cut IN s_cyct         "CY-CUT 15
AND ztegsdt003~z_cre_ymd IN s_crdt         "Create Date
AND ztegsdt003~z_cre_hms IN s_crtm         "Create Time
AND ztegsdt003~z_cre_userid IN s_crus         "Create User
AND ztegsdt003~z_mod_ymd IN s_mddt         "Modify Date
AND ztegsdt003~z_mod_hms IN s_mdtm         "Modify Time
AND ztegsdt003~z_mod_userid IN s_mdus.         "Modify User
*     AND ZTEGSDT001~Z_INVOICE_NO IN s_s_invo       "Invoice No
*     AND ZTEGSDT001~Z_INVOICE_DATE IN s_ivdt.      "Invoice Date
IF sy-subrc <> 0.
MESSAGE s006(zmegsd01) WITH text-e01 DISPLAY LIKE cns_msg_e.
LEAVE LIST-PROCESSING.
ENDIF.
SORT o_td_sin BY z_si_no.

DELETE ADJACENT DUPLICATES FROM o_td_sin COMPARING z_si_no.

ENDFORM.                    " GET_SI_DATA

*&---------------------------------------------------------------------*
*&      Form  GET_TEXT
*&---------------------------------------------------------------------*
*       A-2-2．テキスト取得
*----------------------------------------------------------------------*
*      -->I_TD_zt003 S/I No
*      <--O_TD_TEXT  text
*----------------------------------------------------------------------*
FORM get_text  USING    i_td_zt003 TYPE typ_td_zt003
CHANGING o_td_text TYPE typ_td_text.
DATA:
ltd_zt003  TYPE typ_td_zt003,
lst_zt003  LIKE LINE OF ltd_zt003,
ltd_text   TYPE typ_td_text,
lst_text   TYPE typ_text.

* FreightTerm Text
ltd_zt003 = i_td_zt003.
SORT ltd_zt003 BY z_freight_term.
DELETE ADJACENT DUPLICATES FROM ltd_zt003
COMPARING z_freight_term.
LOOP AT ltd_zt003 INTO lst_zt003.
lst_text-domname = cns_ft_t.
lst_text-ddlanguage = sy-langu.
lst_text-domvalue = lst_zt003-z_freight_term.
APPEND lst_text TO ltd_text.
CLEAR lst_text.
ENDLOOP.

* FreightOnB/L Text
REFRESH ltd_zt003.
ltd_zt003 = i_td_zt003.
SORT ltd_zt003 BY z_freight_term.
DELETE ADJACENT DUPLICATES FROM ltd_zt003
COMPARING z_freight_on_bl.
LOOP AT ltd_zt003 INTO lst_zt003.
lst_text-domname = cns_fob_t.
lst_text-ddlanguage = sy-langu.
lst_text-domvalue = lst_zt003-z_freight_on_bl.
APPEND lst_text TO ltd_text.
CLEAR lst_text.
ENDLOOP.

* KindOfB/L Text
REFRESH ltd_zt003.
ltd_zt003 = i_td_zt003.
SORT ltd_zt003 BY z_freight_term.
DELETE ADJACENT DUPLICATES FROM ltd_zt003
COMPARING z_kind_of_bl.
LOOP AT ltd_zt003 INTO lst_zt003.
lst_text-domname = cns_kob_t.
lst_text-ddlanguage = sy-langu.
lst_text-domvalue = lst_zt003-z_kind_of_bl.
APPEND lst_text TO ltd_text.
CLEAR lst_text.
ENDLOOP.

* DGCode Text
REFRESH ltd_zt003.
ltd_zt003 = i_td_zt003.
SORT ltd_zt003 BY z_freight_term.
DELETE ADJACENT DUPLICATES FROM ltd_zt003
COMPARING z_dg_code.
LOOP AT ltd_zt003 INTO lst_zt003.
lst_text-domname = cns_dg_t.
lst_text-ddlanguage = sy-langu.
lst_text-domvalue = lst_zt003-z_dg_code.
APPEND lst_text TO ltd_text.
CLEAR lst_text.
ENDLOOP.

* TemperatureZones Text
REFRESH ltd_zt003.
ltd_zt003 = i_td_zt003.
SORT ltd_zt003 BY z_freight_term.
DELETE ADJACENT DUPLICATES FROM ltd_zt003
COMPARING z_temp_zones.
LOOP AT ltd_zt003 INTO lst_zt003.
lst_text-domname = cns_tz_t.
lst_text-ddlanguage = sy-langu.
lst_text-domvalue = lst_zt003-z_temp_zones.
APPEND lst_text TO ltd_text.
CLEAR lst_text.
ENDLOOP.

SORT ltd_text BY domname domvalue.
SELECT
domname                       "ドメイン名
ddlanguage                    "言語キー
valpos                        "ドメイン値キー
domvalue_l                    "ドメインの値
ddtext                        "固定テキスト(短)
FROM dd07t
INTO TABLE o_td_text
FOR ALL ENTRIES IN ltd_text
WHERE domname = ltd_text-domname
AND domvalue_l = ltd_text-domvalue
AND ddlanguage = ltd_text-ddlanguage.

ENDFORM.                    " GET_TEXT

*&---------------------------------------------------------------------*
*&      Form  GET_ALV_CONTENT
*&---------------------------------------------------------------------*
*       S/I ALV data
*----------------------------------------------------------------------*
*      -->I_TD_ZT003  S/I data
*      -->I_TD_TEXT   Text
*      <--O_TD_SIN    S/I ALV data
*----------------------------------------------------------------------*
FORM get_alv_content  USING    i_td_zt003 TYPE typ_td_zt003
i_td_text TYPE typ_td_text
CHANGING o_td_sin TYPE typ_td_sin.

DATA:
lw_domvalue TYPE domvalue_l,
lw_ddtext   TYPE val_text,
lst_zt003   LIKE LINE OF i_td_zt003,
lst_sin     LIKE LINE OF o_td_sin,
lst_text    LIKE LINE OF i_td_text.


LOOP AT i_td_zt003 INTO lst_zt003.
MOVE-CORRESPONDING lst_zt003 TO lst_sin.

*   FreightTerm Text
READ TABLE i_td_text INTO lst_text BINARY SEARCH
WITH KEY domname  = cns_ft_t
domvalue = lst_zt003-z_freight_term.
IF sy-subrc = 0.
lst_sin-z_freight_termt = lst_text-ddtext.
CLEAR lst_text.
ENDIF.

*   FreightOnB/L Text
READ TABLE i_td_text INTO lst_text BINARY SEARCH
WITH KEY domname  = cns_fob_t
domvalue = lst_zt003-z_freight_on_bl.
IF sy-subrc = 0.
lst_sin-z_freight_on_blt = lst_text-ddtext.
CLEAR lst_text.
ENDIF.

*   KindOfB/L Text
READ TABLE i_td_text INTO lst_text BINARY SEARCH
WITH KEY domname  = cns_kob_t
domvalue = lst_zt003-z_kind_of_bl.
IF sy-subrc = 0.
lst_sin-z_kind_of_blt = lst_text-ddtext.
CLEAR lst_text.
ENDIF.

*   DGCode Text
READ TABLE i_td_text INTO lst_text BINARY SEARCH
WITH KEY domname  = cns_dg_t
domvalue = lst_zt003-z_dg_code.
IF sy-subrc = 0.
lst_sin-z_dg_codet = lst_text-ddtext.
CLEAR lst_text.
ENDIF.

*   TemperatureZones Text
READ TABLE i_td_text INTO lst_text BINARY SEARCH
WITH KEY domname  = cns_tz_t
domvalue = lst_zt003-z_temp_zones.
IF sy-subrc = 0.
lst_sin-z_temp_zonest = lst_text-ddtext.
CLEAR lst_text.
ENDIF.

APPEND lst_sin TO o_td_sin.
CLEAR:
lst_sin.
ENDLOOP.

ENDFORM.                    " GET_ALV_CONTENT

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_DATA
*&---------------------------------------------------------------------*
*       A-3．画面出力
*----------------------------------------------------------------------*
*      -->i_td_sin  S/I Data
*      -->i_w_flag  Dialog alv flag
*----------------------------------------------------------------------*
FORM display_data  USING    i_td_sin TYPE typ_td_sin
i_w_flag TYPE c.

DATA:
ltd_exclude  TYPE ui_functions,
lst_variant  TYPE disvariant,
lst_fieldcat TYPE lvc_s_fcat,
ltd_fieldcat TYPE lvc_t_fcat,
lw_save      TYPE c,
lst_vari     TYPE disvariant,
lst_layout   TYPE lvc_s_layo.     "slis_layout_alv

* fielcat 属性の設定
CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
EXPORTING
i_structure_name       = cns_sin_alv
CHANGING
ct_fieldcat            = ltd_fieldcat
EXCEPTIONS
inconsistent_interface = 1
program_error          = 2
OTHERS                 = 3.
IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE cns_msg_s NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
DISPLAY LIKE cns_msg_e.
LEAVE LIST-PROCESSING.
ENDIF.

LOOP AT ltd_fieldcat INTO lst_fieldcat.
IF sy-tabix = 1.
lst_fieldcat-checkbox = abap_on.
lst_fieldcat-no_out   = abap_on.
lst_fieldcat-edit      = abap_on.
ENDIF.
IF sy-tabix = 38 OR
sy-tabix = 40 OR
sy-tabix = 43 OR
sy-tabix = 45 OR
sy-tabix = 47.
lst_fieldcat-coltext = lst_fieldcat-scrtext_l.
ENDIF.
MODIFY ltd_fieldcat FROM lst_fieldcat INDEX sy-tabix.
ENDLOOP.

* LAYOUT の設定
lst_layout-cwidth_opt = abap_on.
lst_layout-zebra      = abap_on.
lst_layout-box_fname  = cns_chkbx.

lw_save = cns_save_a.
lst_vari-variant = p_laot.
lst_vari-report  = sy-repid.

* Dialog alv flag(3200)
IF i_w_flag = abap_on.
PERFORM exclude_tb_functions CHANGING ltd_exclude.
lst_variant-report  = sy-repid.

IF ci_ccontainer_s IS INITIAL.
*   コントロールの創建
CREATE OBJECT ci_ccontainer_s
EXPORTING
container_name              = ci_custom_control_name_s
EXCEPTIONS
cntl_error                  = 1
cntl_system_error           = 2
create_error                = 3
lifetime_error              = 4
lifetime_dynpro_dynpro_link = 5
OTHERS                      = 6.

IF sy-subrc = 0.
*       ALVインスタント
CREATE OBJECT ci_alv_s
EXPORTING
i_parent          = ci_ccontainer_s
EXCEPTIONS
error_cntl_create = 1
error_cntl_init   = 2
error_cntl_link   = 3
error_dp_create   = 4
OTHERS            = 5.

ELSE.
MESSAGE ID sy-msgid TYPE cns_msg_i NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
DISPLAY LIKE cns_msg_e.

LEAVE TO SCREEN 0.
ENDIF.

CALL METHOD ci_alv_s->set_table_for_first_display
EXPORTING
*         i_structure_name              = cns_alv_str
is_variant                    = lst_variant
is_layout                     = lst_layout
it_toolbar_excluding          = ltd_exclude
i_save                        = lw_save
CHANGING
it_outtab                     = i_td_sin
it_fieldcatalog               = ltd_fieldcat
EXCEPTIONS
invalid_parameter_combination = 1
program_error                 = 2
too_many_lines                = 3
OTHERS                        = 4.

IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE cns_msg_i NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
DISPLAY LIKE cns_msg_e.

LEAVE TO SCREEN 0.
ENDIF.

ELSE.
*     リフレッシュ
CALL METHOD ci_alv_s->refresh_table_display
*        EXPORTING
*          IS_STABLE      =
*         I_SOFT_REFRESH =
EXCEPTIONS
finished       = 1
OTHERS         = 2.

IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE cns_msg_i NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
DISPLAY LIKE cns_msg_e.

LEAVE TO SCREEN 0.
ENDIF.

ENDIF.
ELSE.
*   Normal alv flag(2000)
CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
EXPORTING
i_callback_program       = sy-repid
i_callback_pf_status_set = cns_st_2000
i_callback_user_command  = cns_uc_2000
is_layout_lvc            = lst_layout
it_fieldcat_lvc          = ltd_fieldcat
i_save                   = lw_save
is_variant               = lst_vari
TABLES
t_outtab                 = i_td_sin
EXCEPTIONS
program_error            = 1
OTHERS                   = 2.

IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE cns_msg_s NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
DISPLAY LIKE cns_msg_e.

LEAVE LIST-PROCESSING.

ENDIF.
ENDIF.

ENDFORM.                    " DISPLAY_DATA

*&---------------------------------------------------------------------*
*&      Form  SET_STATUS
*&---------------------------------------------------------------------*
*       Shipping Instruction Data Input（List）ALV画面のステータスの設定
*----------------------------------------------------------------------*
*      -->I_TD_EXTAB     EXCLUDING テーブル
*----------------------------------------------------------------------*
FORM set_status USING i_td_extab TYPE slis_t_extab.

SET PF-STATUS 'ST_2000'.

ENDFORM.                    " SET_STATUS

*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND
*&---------------------------------------------------------------------*
*       Invoice Data Input（List）ALV画面の事件
*----------------------------------------------------------------------*
*      -->I_W_UCOMM         機能コード
*      -->I_ST_SELFIELD     ALV項目情報
*----------------------------------------------------------------------*
FORM user_command USING i_w_ucomm     TYPE sy-ucomm
i_st_selfield TYPE slis_selfield.

CASE i_w_ucomm.
WHEN 'INP'.

*      CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
*        IMPORTING
*          E_GRID = WO_GUID.
*
*     A-4-1．「Input」ボタン押下時の処理
PERFORM check_input_2000.
*
*     B-2．データ抽出編集処理
PERFORM get_data_scr3000.

*     B-3．画面出力
CALL SCREEN 3000.
*
*    WHEN CNS_UCOM_BAK2000 OR CNS_UCOM_EXT2000 OR CNS_UCOM_CAL2000.
*      W_SAVE_OK = I_W_UCOMM.
*
*      LEAVE TO SCREEN 0.
*
WHEN OTHERS.
ENDCASE.

ENDFORM.                    " SET_STATUS

*&---------------------------------------------------------------------*
*&      Form  CHECK_INPUT ALV
*&---------------------------------------------------------------------*
*       Shipping Instruction Data Input（List）ALV画面のチェック処理
*----------------------------------------------------------------------*
FORM check_input_2000.
DATA: lw_cnt          TYPE i,
ltd_sin         TYPE typ_td_sin.
*        LO_GUID         TYPE REF TO CL_GUI_ALV_GRID.

* A-4-1-1．行選択のチェック処理
*  CALL METHOD WO_GUID->CHECK_CHANGED_DATA.

ltd_sin = td_sin.

DELETE ltd_sin WHERE z_chk <> abap_on.

DESCRIBE TABLE ltd_sin LINES lw_cnt.

IF lw_cnt = 0.
*   行が選択されていない場合
MESSAGE e008(zmegsd01).
ELSEIF lw_cnt > 1.
*   行のチェックが複数選択されている場合
MESSAGE e007(zmegsd01).
ENDIF.

ENDFORM.                    " CHECK_INPUT_2000

*&---------------------------------------------------------------------*
*&      Form  GET_DATA_SCR3000
*&---------------------------------------------------------------------*
*       B-2．データ抽出編集処理
*----------------------------------------------------------------------*
FORM get_data_scr3000 .

DATA: lw_no           TYPE sy-tabix,
lst_sin         TYPE zsegsd0016,
lst_zt003       TYPE ztegsdt003,
lst_text        TYPE typ_text,
ltd_text        TYPE typ_td_text,
ltd_text_dd     TYPE typ_td_text,
ltd_zt004       TYPE typ_td_zt004,
lst_zt004       TYPE typ_zt004,
lst_zt004c      TYPE typ_zt004c,
lw_sino         TYPE zesino.

* B-2-1．ShippingInstructionデータ取得
READ TABLE td_sin INTO lst_sin
WITH KEY z_chk = 'X'.
IF sy-subrc = 0.
lw_sino = lst_sin-z_si_no.      "S/I No
ENDIF.
SELECT SINGLE *
FROM ztegsdt003
INTO lst_zt003
WHERE z_si_no = lw_sino.
IF sy-subrc <> 0.
MESSAGE s006(zmegsd01) WITH text-e01.
ENDIF.
MOVE-CORRESPONDING lst_zt003 TO st_s016.

* B-2-2．Invoiceデータ取得
SELECT z_invoice_no               "Invoice No
z_si_no                    "S/I No
FROM ztegsdt004
INTO TABLE ltd_zt004
WHERE z_si_no = lw_sino.
REFRESH: td_zt004c.
LOOP AT ltd_zt004 INTO lst_zt004.
lw_no = sy-tabix.
MOVE-CORRESPONDING lst_zt004 TO lst_zt004c.
lst_zt004c-no = lw_no.
APPEND lst_zt004c TO td_zt004c.
CLEAR lst_zt004c.
ENDLOOP.
SORT td_zt004c BY z_invoice_no.
td_zt004b = td_zt004c.
CLEAR lw_no.

* B-2-3．テキスト取得
* FreightTerm Text
lst_text-domname = cns_ft_t.
lst_text-ddlanguage = sy-langu.
lst_text-domvalue = lst_zt003-z_freight_term.
APPEND lst_text TO ltd_text.
CLEAR lst_text.

* FreightOnB/L Text
lst_text-domname = cns_fob_t.
lst_text-ddlanguage = sy-langu.
lst_text-domvalue = lst_zt003-z_freight_on_bl.
APPEND lst_text TO ltd_text.
CLEAR lst_text.

* KindOfB/L Text
lst_text-domname = cns_kob_t.
lst_text-ddlanguage = sy-langu.
lst_text-domvalue = lst_zt003-z_kind_of_bl.
APPEND lst_text TO ltd_text.
CLEAR lst_text.

* DGCode Text
lst_text-domname = cns_dg_t.
lst_text-ddlanguage = sy-langu.
lst_text-domvalue = lst_zt003-z_dg_code.
APPEND lst_text TO ltd_text.
CLEAR lst_text.

* TemperatureZones Text
lst_text-domname = cns_tz_t.
lst_text-ddlanguage = sy-langu.
lst_text-domvalue = lst_zt003-z_temp_zones.
APPEND lst_text TO ltd_text.
CLEAR lst_text.

SORT ltd_text BY domname domvalue.
SELECT
domname               "ドメイン名
ddlanguage            "言語キー
valpos                "ドメイン値キー
domvalue_l            "ドメインの値
ddtext                "固定テキスト(短)
FROM dd07t
INTO TABLE ltd_text_dd
FOR ALL ENTRIES IN ltd_text
WHERE domname = ltd_text-domname
AND domvalue_l = ltd_text-domvalue
AND ddlanguage = ltd_text-ddlanguage.

* FreightTerm Text
READ TABLE ltd_text_dd INTO lst_text BINARY SEARCH
WITH KEY domname  = cns_ft_t
domvalue = lst_zt003-z_freight_term.
IF sy-subrc = 0.
st_s016-z_freight_termt = lst_text-ddtext.
CLEAR lst_text.
ENDIF.

* FreightOnB/L Text
READ TABLE ltd_text_dd INTO lst_text BINARY SEARCH
WITH KEY domname  = cns_fob_t
domvalue = lst_zt003-z_freight_on_bl.
IF sy-subrc = 0.
st_s016-z_freight_on_blt = lst_text-ddtext.
CLEAR lst_text.
ENDIF.

* KindOfB/L Text
READ TABLE ltd_text_dd INTO lst_text BINARY SEARCH
WITH KEY domname  = cns_kob_t
domvalue = lst_zt003-z_kind_of_bl.
IF sy-subrc = 0.
st_s016-z_kind_of_blt = lst_text-ddtext.
CLEAR lst_text.
ENDIF.

* DGCode Text
READ TABLE ltd_text_dd INTO lst_text BINARY SEARCH
WITH KEY domname  = cns_dg_t
domvalue = lst_zt003-z_dg_code.
IF sy-subrc = 0.
st_s016-z_dg_codet = lst_text-ddtext.
CLEAR lst_text.
ENDIF.

* TemperatureZones Text
READ TABLE ltd_text_dd INTO lst_text BINARY SEARCH
WITH KEY domname  = cns_tz_t
domvalue = lst_zt003-z_temp_zones.
IF sy-subrc = 0.
st_s016-z_temp_zonest = lst_text-ddtext.
CLEAR lst_text.
ENDIF.

ENDFORM.                    " GET_DATA_SCR3000

*&---------------------------------------------------------------------*
*&      Module  STATUS_3000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_3000 OUTPUT.
SET PF-STATUS 'ST_3000'.
SET TITLEBAR 'T_3000'.

IF st_s016-z_si_date IS INITIAL.
st_s016-z_si_date = sy-datlo.
ENDIF.

ENDMODULE.                 " STATUS_3000  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_3000 INPUT.

w_code = ok_code.
CASE w_code.
WHEN cns_back OR cns_exit OR cns_canc.
LEAVE TO SCREEN 0.

WHEN cns_save."Save
PERFORM prc_save.
WHEN cns_add.
CALL SCREEN 3400 STARTING AT 11 1
ENDING AT 130 30.
WHEN cns_rcp. "Ref.copy
CALL SCREEN 3100 STARTING AT 11 1
ENDING AT 130 30.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3000  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_CUSTOMER_INFO  INPUT
*&---------------------------------------------------------------------*
*       「Cutomer(CNEE)」入力後の処理
*----------------------------------------------------------------------*
MODULE get_customer_info INPUT.

DATA:
lw_kunnr  TYPE kunnr,
lw_name1  TYPE ad_name1,
lw_street TYPE ad_street,
lw_city1  TYPE ad_city1,
lw_tel_number TYPE ad_tlnmbr1,
lw_fax_number TYPE ad_fxnmbr1.

* 「Cutomer(CNEE)」入力後の処理
lw_kunnr = st_s016-z_cust_cnee.
PERFORM get_customer_info USING lw_kunnr
CHANGING lw_name1
lw_street
lw_city1
lw_tel_number
lw_fax_number.
st_s016-z_cust_name_cnee = lw_name1.
st_s016-z_address1_cnee = lw_street.
st_s016-z_address2_cnee = lw_city1.
st_s016-z_tel_cnee = lw_tel_number.
st_s016-z_fax_cnee = lw_fax_number.

ENDMODULE.                 " GET_CUSTOMER_INFO  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_CUSTOMER_INFO  INPUT
*&---------------------------------------------------------------------*
*       「Customer(Notify)」入力後の処理
*----------------------------------------------------------------------*
MODULE get_customer_info2 INPUT.

*  DATA:
*    lw_kunnr  TYPE kunnr,
*    lw_name1  TYPE ad_name1,
*    lw_street TYPE ad_street,
*    lw_city1  TYPE ad_city1,
*    lw_tel_number TYPE ad_tlnmbr1,
*    lw_fax_number TYPE ad_fxnmbr1.

* 「Customer(Notify)」入力後の処理
lw_kunnr = st_s016-z_cust_ntfy.
PERFORM get_customer_info USING lw_kunnr
CHANGING lw_name1
lw_street
lw_city1
lw_tel_number
lw_fax_number.
st_s016-z_cust_name_ntfy = lw_name1.
st_s016-z_address1_ntfy = lw_street.
st_s016-z_address2_ntfy = lw_city1.
st_s016-z_tel_ntfy = lw_tel_number.
st_s016-z_fax_ntfy = lw_fax_number.

ENDMODULE.                 " GET_CUSTOMER_INFO2  INPUT

*&---------------------------------------------------------------------*
*&      Form  GET_CUSTOMER_INFO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->i_w_KUNNR       得意先コード
*      <--o_w_NAME1       Customer Name
*      <--o_w_STREET      Address1
*      <--o_w_CITY1       Address2
*      <--o_w_TEL_NUMBER  Tel
*      <--o_w_FAX_NUMBER  Fax
*----------------------------------------------------------------------*
FORM get_customer_info  USING    i_w_kunnr TYPE kunnr
CHANGING o_w_name1  TYPE ad_name1
o_w_street TYPE ad_street
o_w_city1  TYPE ad_city1
o_w_teln   TYPE ad_tlnmbr1
o_w_faxn   TYPE ad_fxnmbr1.

DATA:
lw_adrnr TYPE kna1-adrnr.

SELECT SINGLE adrnr
FROM kna1
INTO lw_adrnr
WHERE kunnr = i_w_kunnr.
IF sy-subrc = 0.
SELECT name1
street
city1
tel_number
fax_number
UP TO 1 ROWS
FROM adrc
INTO (o_w_name1,o_w_street,o_w_city1,o_w_teln,o_w_faxn)
WHERE addrnumber = lw_adrnr.
EXIT.
ENDSELECT.
ENDIF.
ENDFORM.                    " GET_CUSTOMER_INFO

*&---------------------------------------------------------------------*
*&      Form  GET_DD07T
*&---------------------------------------------------------------------*
*       ドメイン値より、DD07Tからドメイン値テキストを取得する
*----------------------------------------------------------------------*
*      -->i_W_DOMNAME  ドメイン名
*      -->i_W_DOMVALUE ドメイン値
*      <--O_W_DDTEXT   固定値のテキスト
*----------------------------------------------------------------------*
FORM get_dd07t  USING    i_w_domname TYPE domname
i_w_domvalue TYPE domval_ld
CHANGING o_w_ddtext TYPE val_text.
SELECT
ddtext                        "固定テキスト(短)
FROM dd07t
UP TO 1 ROWS
INTO o_w_ddtext
WHERE domname = i_w_domname
AND ddlanguage = sy-langu
AND domvalue_l = i_w_domvalue.
EXIT.
ENDSELECT.


ENDFORM.                    " GET_DD07T

*&---------------------------------------------------------------------*
*&      Module  GET_Z_FREIGHT_TERM  INPUT
*&---------------------------------------------------------------------*
*       「Freight Term」入力後の処理
*----------------------------------------------------------------------*
MODULE get_z_freight_term INPUT.
DATA:
lw_domname TYPE domname,
lw_domvalue TYPE domval_ld,
lw_ddtext TYPE val_text.

lw_domname = cns_ft_t.
lw_domvalue = st_s016-z_freight_term.

PERFORM get_dd07t USING lw_domname
lw_domvalue
CHANGING lw_ddtext.

st_s016-z_freight_termt = lw_ddtext.
CLEAR:
lw_domname,
lw_domvalue,
lw_ddtext.

ENDMODULE.                 " GET_Z_FREIGHT_TERM  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_Z_FREIGHT_ON_BL  INPUT
*&---------------------------------------------------------------------*
*       「FreightOnB/L」入力後の処理
*----------------------------------------------------------------------*
MODULE get_z_freight_on_bl INPUT.

lw_domname = cns_fob_t.
lw_domvalue = st_s016-z_freight_on_bl.

PERFORM get_dd07t USING lw_domname
lw_domvalue
CHANGING lw_ddtext.

st_s016-z_freight_on_blt = lw_ddtext.
CLEAR:
lw_domname,
lw_domvalue,
lw_ddtext.

ENDMODULE.                 " GET_Z_FREIGHT_ON_BL  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_Z_KIND_OF_BL  INPUT
*&---------------------------------------------------------------------*
*       「KindOfB/L」入力後の処理
*----------------------------------------------------------------------*
MODULE get_z_kind_of_bl INPUT.

lw_domname = cns_kob_t.
lw_domvalue = st_s016-z_kind_of_bl.

PERFORM get_dd07t USING lw_domname
lw_domvalue
CHANGING lw_ddtext.

st_s016-z_kind_of_blt = lw_ddtext.
CLEAR:
lw_domname,
lw_domvalue,
lw_ddtext.

ENDMODULE.                 " GET_Z_KIND_OF_BL  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_Z_DG_CODE  INPUT
*&---------------------------------------------------------------------*
*       「DGCode」入力後の処理
*----------------------------------------------------------------------*
MODULE get_z_dg_code INPUT.

lw_domname = cns_dg_t.
lw_domvalue = st_s016-z_dg_code.

PERFORM get_dd07t USING lw_domname
lw_domvalue
CHANGING lw_ddtext.

st_s016-z_dg_codet = lw_ddtext.
CLEAR:
lw_domname,
lw_domvalue,
lw_ddtext.

ENDMODULE.                 " GET_Z_DG_CODE  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_Z_TEMP_ZONES  INPUT
*&---------------------------------------------------------------------*
*       「TemperatureZones」入力後の処理
*----------------------------------------------------------------------*
MODULE get_z_temp_zones INPUT.

lw_domname = cns_tz_t.
lw_domvalue = st_s016-z_temp_zones.

PERFORM get_dd07t USING lw_domname
lw_domvalue
CHANGING lw_ddtext.

st_s016-z_temp_zonest = lw_ddtext.
CLEAR:
lw_domname,
lw_domvalue,
lw_ddtext.

ENDMODULE.                 " GET_Z_TEMP_ZONES  INPUT

*&---------------------------------------------------------------------*
*&      Module  STATUS_3100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_3100 OUTPUT.
SET PF-STATUS 'ST_3100'.
SET TITLEBAR 'T_3100'.

IF w_code = cns_no2 OR
w_code = cns_can3 OR
w_code = cns_exc3.
LEAVE TO SCREEN 0.
ENDIF.

ENDMODULE.                 " STATUS_3100  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_3100 INPUT.

w_code = ok_code.
CASE w_code.
WHEN cns_yes.
*     C-2-1．ShippingInstructionデータ取得
REFRESH td_sin2.
PERFORM get_si_data2 CHANGING td_sin2.

CALL SCREEN 3200 STARTING AT 11 1
ENDING AT 131 30.
WHEN cns_no OR
cns_no2.
LEAVE TO SCREEN 0.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3100  INPUT

*&---------------------------------------------------------------------*
*&      Form  GET_SI_DATA
*&---------------------------------------------------------------------*
*       A-2-1-1．S/I Noの取得
*----------------------------------------------------------------------*
*      <--O_TD_zt003  S/I data
*----------------------------------------------------------------------*
FORM get_si_data2  CHANGING o_td_sin TYPE typ_td_sin.

DATA:
ltd_zt003 TYPE typ_td_zt003,
ltd_text TYPE typ_td_text.

SELECT *
INTO CORRESPONDING FIELDS OF TABLE ltd_zt003
FROM ztegsdt003
INNER JOIN ztegsdt004
ON ztegsdt003~z_si_no = ztegsdt004~z_si_no
WHERE ztegsdt003~z_si_no IN s_sino           "S/I No
AND ztegsdt003~z_si_date IN s_sidt         "S/I Date
AND ztegsdt003~z_bl_no IN s_blno         "B/L No
AND ztegsdt003~z_bl_date IN s_bldt         "B/L Date 5
AND ztegsdt003~z_cust_cnee IN s_cons         "Consinee
AND ztegsdt003~z_cust_ntfy IN s_notf         "Notify
AND ztegsdt003~z_carrier IN s_carr         "Carrier
AND ztegsdt003~z_booking_no IN s_bkno         "Booking No
AND ztegsdt003~z_shipped_per IN s_sppe         "Shipped Per
AND ztegsdt003~z_voy_no IN s_vono         "Voy No 10
AND ztegsdt003~z_etd IN s_etd          "ETD
AND ztegsdt003~z_eta IN s_eta          "ETA
AND ztegsdt003~z_ship_date IN s_spdt         "Ship Date
AND ztegsdt003~z_cfs_cut IN s_cfct         "CFS-CUT
AND ztegsdt003~z_cy_cut IN s_cyct         "CY-CUT 15
AND ztegsdt003~z_cre_ymd IN s_crdt         "Create Date
AND ztegsdt003~z_cre_hms IN s_crtm         "Create Time
AND ztegsdt003~z_cre_userid IN s_crus         "Create User
AND ztegsdt003~z_mod_ymd IN s_mddt         "Modify Date
AND ztegsdt003~z_mod_hms IN s_mdtm         "Modify Time
AND ztegsdt003~z_mod_userid IN s_mdus.         "Modify User
*     AND ZTEGSDT001~Z_INVOICE_NO IN s_s_invo       "Invoice No
*     AND ZTEGSDT001~Z_INVOICE_DATE IN s_ivdt.      "Invoice Date
IF sy-subrc <> 0.
MESSAGE i006(zmegsd01) WITH text-e01 DISPLAY LIKE cns_msg_e.
LEAVE LIST-PROCESSING.
ENDIF.
SORT ltd_zt003 BY z_si_no.

* C-2-2．テキスト取得
PERFORM get_text USING ltd_zt003
CHANGING ltd_text.

* 画面出力データ取得
PERFORM get_alv_content USING ltd_zt003
ltd_text
CHANGING o_td_sin.

ENDFORM.                    " GET_SI_DATA2

*&---------------------------------------------------------------------*
*&      Module  STATUS_3200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_3200 OUTPUT.
SET PF-STATUS 'ST_3200'.
SET TITLEBAR 'T_3200'.

IF w_code = cns_can3 OR
w_code = cns_exc3.
LEAVE TO SCREEN 0.
ENDIF.

PERFORM display_data USING td_sin2
abap_on.

ENDMODULE.                 " STATUS_3200  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_3200 INPUT.

DATA:
ltd_sin2 TYPE typ_td_sin.

w_code = ok_code.
CASE w_code.
WHEN cns_yes2.
PERFORM call_3300.
WHEN cns_no2 OR
cns_can3.
LEAVE TO SCREEN 0.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3200  INPUT

*&---------------------------------------------------------------------*
*&      Form  EXCLUDE_TB_FUNCTIONS
*&---------------------------------------------------------------------*
*       ユーザ事件を除く
*----------------------------------------------------------------------*
*      <--O_TD_EXCLUDE     ITAB:SCREEN9000ALVユーザ事件
*----------------------------------------------------------------------*
FORM exclude_tb_functions CHANGING o_td_exclude TYPE ui_functions.
DATA:
lst_exclude TYPE ui_func.

lst_exclude = cl_gui_alv_grid=>mc_fc_loc_delete_row.
APPEND lst_exclude TO o_td_exclude.
CLEAR lst_exclude.

lst_exclude = cl_gui_alv_grid=>mc_fc_loc_insert_row.
APPEND lst_exclude TO o_td_exclude.
CLEAR lst_exclude.

lst_exclude = cl_gui_alv_grid=>mc_fc_loc_append_row.
APPEND lst_exclude TO o_td_exclude.
CLEAR lst_exclude.

lst_exclude = cl_gui_alv_grid=>mc_fc_loc_copy_row.
APPEND lst_exclude TO o_td_exclude.
CLEAR lst_exclude.

lst_exclude = cl_gui_alv_grid=>mc_fc_loc_undo.
APPEND lst_exclude TO o_td_exclude.
CLEAR lst_exclude.

lst_exclude = cl_gui_alv_grid=>mc_fc_refresh.
APPEND lst_exclude TO o_td_exclude.
CLEAR lst_exclude.

lst_exclude = cl_gui_alv_grid=>mc_fc_check.
APPEND lst_exclude TO o_td_exclude.
CLEAR lst_exclude.

lst_exclude = cl_gui_alv_grid=>mc_fc_loc_cut.
APPEND lst_exclude TO o_td_exclude.
CLEAR lst_exclude.

lst_exclude = cl_gui_alv_grid=>mc_fc_loc_copy.
APPEND lst_exclude TO o_td_exclude.
CLEAR lst_exclude.

lst_exclude = cl_gui_alv_grid=>mc_mb_paste.
APPEND lst_exclude TO o_td_exclude.
CLEAR lst_exclude.

ENDFORM.                    " EXCLUDE_TB_FUNCTIONS

*&---------------------------------------------------------------------*
*&      Form  CALL_3300
*&---------------------------------------------------------------------*
FORM call_3300 .

DATA:
lw_cnt            TYPE sy-index,
lst_sin           TYPE zsegsd0016,
ltd_et_index_rows TYPE lvc_t_row,
lsd_et_index_rows TYPE lvc_s_row.

* C-4-3．一覧画面の「OK」ボタン押下時の処理
CALL METHOD ci_alv_s->get_selected_rows
IMPORTING
et_index_rows = ltd_et_index_rows.

DESCRIBE TABLE ltd_et_index_rows LINES lw_cnt.

IF lw_cnt = 0.
*   行が選択されていない場合
MESSAGE e008(zmegsd01).
ELSEIF lw_cnt > 1.
*   行のチェックが複数選択されている場合
MESSAGE e007(zmegsd01).
ENDIF.

READ TABLE ltd_et_index_rows INTO lsd_et_index_rows INDEX 1.

CLEAR: lw_cnt.
lw_cnt = lsd_et_index_rows-index.

READ TABLE td_sin2 INTO lst_sin INDEX lw_cnt.
st_s0162 = lst_sin.
st_s0162-z_chk = abap_on.

CLEAR:
w_chk1,
w_chk2,
w_chk3,
w_chk4,
w_chk5,
w_chk6,
w_chk7,
w_chk8,
w_chk9,
w_chk10,
w_chk11,
w_chk12,
w_chk13,
w_chk14,
w_chk15,
w_chk16,
w_chk17,
w_chk18,
w_chk19,
w_chk20,
w_chk21,
w_chk22,
w_chk23,
w_chk24,
w_chk25,
w_chk26,
w_chk27,
w_chk28,
w_chk29,
w_chk30,
w_chk31,
w_chk32,
w_chk33,
w_chk34,
w_chk35,
w_chk36,
w_chk37,
w_chk38,
w_chk39,
w_chk40,
w_chk41,
w_chk42,
w_chk43.
CALL SCREEN 3300 STARTING AT 11 1
ENDING AT 125 16.

ENDFORM.                    " CALL_3300

*&---------------------------------------------------------------------*
*&      Module  STATUS_3300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_3300 OUTPUT.
SET PF-STATUS 'ST_3300'.
SET TITLEBAR 'T_3300'.

ENDMODULE.                 " STATUS_3300  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_3300 INPUT.

w_code = ok_code.
CASE w_code.
WHEN cns_exc3.
PERFORM exc_proc.
LEAVE TO SCREEN 0.
WHEN cns_can3.
LEAVE TO SCREEN 0.
WHEN cns_sla.
w_chk1 = abap_on.
w_chk2 = abap_on.
w_chk3 = abap_on.
w_chk4 = abap_on.
w_chk5 = abap_on.
w_chk6 = abap_on.
w_chk7 = abap_on.
w_chk8 = abap_on.
w_chk9 = abap_on.
w_chk10 = abap_on.
w_chk11 = abap_on.
w_chk12 = abap_on.
w_chk13 = abap_on.
w_chk14 = abap_on.
w_chk15 = abap_on.
w_chk16 = abap_on.
w_chk17 = abap_on.
w_chk18 = abap_on.
w_chk19 = abap_on.
w_chk20 = abap_on.
w_chk21 = abap_on.
w_chk22 = abap_on.
w_chk23 = abap_on.
w_chk24 = abap_on.
w_chk25 = abap_on.
w_chk26 = abap_on.
w_chk27 = abap_on.
w_chk28 = abap_on.
w_chk29 = abap_on.
w_chk30 = abap_on.
w_chk31 = abap_on.
w_chk32 = abap_on.
w_chk33 = abap_on.
w_chk34 = abap_on.
w_chk35 = abap_on.
w_chk36 = abap_on.
w_chk37 = abap_on.
w_chk38 = abap_on.
w_chk39 = abap_on.
w_chk40 = abap_on.
w_chk41 = abap_on.
w_chk42 = abap_on.
w_chk43 = abap_on.
WHEN cns_dsa.
w_chk1 = abap_off.
w_chk2 = abap_off.
w_chk3 = abap_off.
w_chk4 = abap_off.
w_chk5 = abap_off.
w_chk6 = abap_off.
w_chk7 = abap_off.
w_chk8 = abap_off.
w_chk9 = abap_off.
w_chk10 = abap_off.
w_chk11 = abap_off.
w_chk12 = abap_off.
w_chk13 = abap_off.
w_chk14 = abap_off.
w_chk15 = abap_off.
w_chk16 = abap_off.
w_chk17 = abap_off.
w_chk18 = abap_off.
w_chk19 = abap_off.
w_chk20 = abap_off.
w_chk21 = abap_off.
w_chk22 = abap_off.
w_chk23 = abap_off.
w_chk24 = abap_off.
w_chk25 = abap_off.
w_chk26 = abap_off.
w_chk27 = abap_off.
w_chk28 = abap_off.
w_chk29 = abap_off.
w_chk30 = abap_off.
w_chk31 = abap_off.
w_chk32 = abap_off.
w_chk33 = abap_off.
w_chk34 = abap_off.
w_chk35 = abap_off.
w_chk36 = abap_off.
w_chk37 = abap_off.
w_chk38 = abap_off.
w_chk39 = abap_off.
w_chk40 = abap_off.
w_chk41 = abap_off.
w_chk42 = abap_off.
w_chk43 = abap_off.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3300  INPUT

*&---------------------------------------------------------------------*
*&      Form  EXC_PROC
*&---------------------------------------------------------------------*
*       Execute process
*----------------------------------------------------------------------*
FORM exc_proc .

IF w_chk1 = abap_off AND
w_chk2 = abap_off AND
w_chk3 = abap_off AND
w_chk4 = abap_off AND
w_chk5 = abap_off AND
w_chk6 = abap_off AND
w_chk7 = abap_off AND
w_chk8 = abap_off AND
w_chk9 = abap_off AND
w_chk10 = abap_off AND
w_chk11 = abap_off AND
w_chk12 = abap_off AND
w_chk13 = abap_off AND
w_chk14 = abap_off AND
w_chk15 = abap_off AND
w_chk16 = abap_off AND
w_chk17 = abap_off AND
w_chk18 = abap_off AND
w_chk19 = abap_off AND
w_chk20 = abap_off AND
w_chk21 = abap_off AND
w_chk22 = abap_off AND
w_chk23 = abap_off AND
w_chk24 = abap_off AND
w_chk25 = abap_off AND
w_chk26 = abap_off AND
w_chk27 = abap_off AND
w_chk28 = abap_off AND
w_chk29 = abap_off AND
w_chk30 = abap_off AND
w_chk31 = abap_off AND
w_chk32 = abap_off AND
w_chk33 = abap_off AND
w_chk34 = abap_off AND
w_chk35 = abap_off AND
w_chk36 = abap_off AND
w_chk37 = abap_off AND
w_chk38 = abap_off AND
w_chk39 = abap_off AND
w_chk40 = abap_off AND
w_chk41 = abap_off AND
w_chk42 = abap_off AND
w_chk43 = abap_off.
MESSAGE i014(zmegsd01) DISPLAY LIKE cns_msg_e.
LEAVE SCREEN.
ENDIF.

IF w_chk1 = abap_on.
st_s016-z_cust_cnee = st_s0162-z_cust_cnee.
ENDIF.

IF w_chk2 = abap_on.
st_s016-z_cust_name_cnee = st_s0162-z_cust_name_cnee.
ENDIF.

IF w_chk3 = abap_on.
st_s016-z_address1_cnee = st_s0162-z_address1_cnee.
ENDIF.

IF w_chk4 = abap_on.
st_s016-z_address2_cnee = st_s0162-z_address2_cnee.
ENDIF.

IF w_chk5 = abap_on.
st_s016-z_attn_cnee = st_s0162-z_attn_cnee.
ENDIF.

IF w_chk6 = abap_on.
st_s016-z_tel_cnee = st_s0162-z_tel_cnee.
ENDIF.

IF w_chk7 = abap_on.
st_s016-z_fax_cnee = st_s0162-z_fax_cnee.
ENDIF.

IF w_chk8 = abap_on.
st_s016-z_cust_ntfy = st_s0162-z_cust_ntfy.
ENDIF.

IF w_chk9 = abap_on.
st_s016-z_cust_name_ntfy = st_s0162-z_cust_name_ntfy.
ENDIF.

IF w_chk10 = abap_on.
st_s016-z_address1_ntfy = st_s0162-z_address1_ntfy.
ENDIF.

IF w_chk11 = abap_on.
st_s016-z_address2_ntfy = st_s0162-z_address2_ntfy.
ENDIF.

IF w_chk12 = abap_on.
st_s016-z_attn_ntfy = st_s0162-z_attn_ntfy.
ENDIF.

IF w_chk13 = abap_on.
st_s016-z_tel_ntfy = st_s0162-z_tel_ntfy.
ENDIF.

IF w_chk14 = abap_on.
st_s016-z_fax_ntfy = st_s0162-z_fax_ntfy.
ENDIF.

IF w_chk15 = abap_on.
st_s016-z_carrier = st_s0162-z_carrier.
ENDIF.

IF w_chk16 = abap_on.
st_s016-z_booking_no = st_s0162-z_booking_no.
ENDIF.

IF w_chk17 = abap_on.
st_s016-z_shipped_per = st_s0162-z_shipped_per.
ENDIF.

IF w_chk18 = abap_on.
st_s016-z_voy_no = st_s0162-z_voy_no.
ENDIF.

IF w_chk19 = abap_on.
st_s016-z_etd = st_s0162-z_etd.
ENDIF.

IF w_chk20 = abap_on.
st_s016-z_eta = st_s0162-z_eta.
ENDIF.

IF w_chk21 = abap_on.
st_s016-z_ship_date = st_s0162-z_ship_date.
ENDIF.

IF w_chk22 = abap_on.
st_s016-z_cfs_cut = st_s0162-z_cfs_cut.
ENDIF.

IF w_chk23 = abap_on.
st_s016-z_cy_cut = st_s0162-z_cy_cut.
ENDIF.

IF w_chk24 = abap_on.
st_s016-z_csize_20ft_qty = st_s0162-z_csize_20ft_qty.
ENDIF.

IF w_chk25 = abap_on.
st_s016-z_csize_40ft_qty = st_s0162-z_csize_40ft_qty.
ENDIF.

IF w_chk26 = abap_on.
st_s016-z_csize_oth_qty = st_s0162-z_csize_oth_qty.
ENDIF.

IF w_chk27 = abap_on.
st_s016-z_pl_receipt = st_s0162-z_pl_receipt.
ENDIF.

IF w_chk28 = abap_on.
st_s016-z_pt_loading = st_s0162-z_pt_loading.
ENDIF.

IF w_chk29 = abap_on.
st_s016-z_pt_discharge = st_s0162-z_pt_discharge.
ENDIF.

IF w_chk30 = abap_on.
st_s016-z_pl_delivery = st_s0162-z_pl_delivery.
ENDIF.

IF w_chk31 = abap_on.
st_s016-z_final_dest = st_s0162-z_final_dest.
ENDIF.

IF w_chk32 = abap_on.
st_s016-z_freight_term = st_s0162-z_freight_term.
ENDIF.

IF w_chk33 = abap_on.
st_s016-z_freight_on_bl = st_s0162-z_freight_on_bl.
ENDIF.

IF w_chk34 = abap_on.
st_s016-z_pl__issue = st_s0162-z_pl__issue.
ENDIF.

IF w_chk35 = abap_on.
st_s016-z_kind_of_bl = st_s0162-z_kind_of_bl.
ENDIF.

IF w_chk36 = abap_on.
st_s016-z_dg_code = st_s0162-z_dg_code.
ENDIF.

IF w_chk37 = abap_on.
st_s016-z_temp_zones = st_s0162-z_temp_zones.
ENDIF.

IF w_chk38 = abap_on.
st_s016-z_desc_of_goods = st_s0162-z_desc_of_goods.
ENDIF.

IF w_chk39 = abap_on.
st_s016-z_si_remarks1 = st_s0162-z_si_remarks1.
ENDIF.

IF w_chk40 = abap_on.
st_s016-z_si_remarks2 = st_s0162-z_si_remarks2.
ENDIF.

IF w_chk41 = abap_on.
st_s016-z_si_remarks3 = st_s0162-z_si_remarks3.
ENDIF.

IF w_chk42 = abap_on.
st_s016-z_si_remarks4 = st_s0162-z_si_remarks4.
ENDIF.

IF w_chk43 = abap_on.
st_s016-z_si_remarks5 = st_s0162-z_si_remarks5.
ENDIF.

ENDFORM.                    " EXC_PROC

*&---------------------------------------------------------------------*
*&      Module  STATUS_3400  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_3400 OUTPUT.
SET PF-STATUS 'ST_3400'.
SET TITLEBAR 'T_3400'.

IF w_code = cns_exc5 OR
w_code = cns_no5.
LEAVE TO SCREEN 0.
ENDIF.

ENDMODULE.                 " STATUS_3400  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3400  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_3400 INPUT.

w_code = ok_code.
CASE w_code.
WHEN cns_yes4.
PERFORM call_scr3500.


*     C-2-1．ShippingInstructionデータ取得
*      REFRESH td_sin2.
*      PERFORM get_si_data2 CHANGING td_sin2.
*
*      CALL SCREEN 3200 STARTING AT 11 1
*                       ENDING AT 131 30.
WHEN cns_no4.
LEAVE TO SCREEN 0.
WHEN OTHERS.
ENDCASE.


ENDMODULE.                 " USER_COMMAND_3400  INPUT

*&---------------------------------------------------------------------*
*&      Form  CALL_SCR3500
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM call_scr3500 .

DATA:
ltd_zt001 TYPE typ_td_zt001.

REFRESH:
td_inv.
IF rb_1 = abap_on.
*   選択画面のラジオボタン「Outbounde Delivery」が選択されている場合
PERFORM get_from_od CHANGING ltd_zt001.
ELSE.
*   選択画面のラジオボタン「External Data」が選択されている場合
PERFORM get_from_ed CHANGING ltd_zt001.
ENDIF.

* D-2-2．テキスト取得
PERFORM get_kna1 USING ltd_zt001
CHANGING td_inv.

CHECK td_inv IS NOT INITIAL.
CALL SCREEN 3500 STARTING AT 11 1
ENDING AT 141 31.

ENDFORM.                    " CALL_SCR3500

*&---------------------------------------------------------------------*
*&      Form  GET_FROM_OD
*&---------------------------------------------------------------------*
*       Invoiceデータ取得
*----------------------------------------------------------------------*
FORM get_from_od CHANGING i_td_zt001 TYPE typ_td_zt001.

SELECT
ztegsdt001~z_source_type      "ソースタイプ
likp~vstel                    "ShippingPt
likp~wadat                    "Planed GI
likp~kunag                    "Sold-to party
likp~kunnr                    "Ship-to party
likp~vbeln                    "出荷伝票(Outbound Delivery)
likp~erdat                    "レコード登録日
likp~ernam                    "登録者
ztegsdt001~z_invoice_no       "Invoice No
ztegsdt001~z_invoice_date     "Invoice Date
ztegsdt001~z_status_invoice   "ステータス（Invoice）
ztegsdt001~z_cust_bt          "得意先（Bill To）
ztegsdt001~z_cust_name_bt     "得意先名（Bill To）
ztegsdt001~z_address1_bt      "得意先住所1（Bill To）
ztegsdt001~z_address2_bt      "得意先住所2（Bill To）
ztegsdt001~z_attn_bt          "得意先担当者（Bill To）
ztegsdt001~z_tel_bt           "得意先電話番号（Bill To）
ztegsdt001~z_fax_bt           "得意先FAX（Bill To）
ztegsdt001~z_cust_st          "得意先（Ship To）
ztegsdt001~z_cust_name_st     "得意先名（Ship To）
ztegsdt001~z_address1_st      "得意先住所1（Ship To）
ztegsdt001~z_address2_st      "得意先住所2（Ship To）
ztegsdt001~z_attn_st          "得意先担当者（Ship To）
ztegsdt001~z_tel_st           "得意先電話番号（Ship To）
ztegsdt001~z_fax_st           "得意先FAX（Ship To）
ztegsdt001~z_shipped_per      "Shipped Per
ztegsdt001~z_on_or_about      "On or About
ztegsdt001~z_trade_from       "From
ztegsdt001~z_trade_to         "To
ztegsdt001~z_trade_via        "Via
ztegsdt001~z_trade_payment    "Payment
ztegsdt001~z_trade_term       "Trade Term
ztegsdt001~z_inv_remarks1     "Remarks (1)
ztegsdt001~z_inv_remarks2     "Remarks (2)
ztegsdt001~z_inv_remarks3     "Remarks (3)
ztegsdt001~z_inv_remarks4     "Remarks (4)
ztegsdt001~z_inv_remarks5     "Remarks (5)
ztegsdt001~z_casemark1        "Case Mark (1)
ztegsdt001~z_casemark2        "Case Mark (2)
ztegsdt001~z_casemark3        "Case Mark (3)
ztegsdt001~z_casemark4        "Case Mark (4)
ztegsdt001~z_casemark5        "Case Mark (5)
ztegsdt003~z_si_no            "S/I No
ztegsdt003~z_bl_date          "B/L Date
ztegsdt001~z_cre_ymd_inv      "登録年月日
ztegsdt001~z_cre_hms_inv      "登録時分秒
ztegsdt001~z_cre_userid_inv   "ユーザマスタレコードのユーザ名
ztegsdt001~z_mod_ymd_inv      "更新年月日
ztegsdt001~z_mod_hms_inv      "更新時分秒
ztegsdt001~z_mod_userid_inv   "ユーザマスタレコードのユーザ名
FROM ztegsdt001
INNER JOIN likp
ON ztegsdt001~vbeln = likp~vbeln
INNER JOIN ztegsdt004
ON ztegsdt001~z_invoice_no = ztegsdt004~z_invoice_no
LEFT JOIN ztegsdt003
ON ztegsdt004~z_si_no = ztegsdt003~z_si_no
INTO TABLE i_td_zt001
WHERE ztegsdt001~z_source_type = cns_styp1
AND likp~vstel                  IN s_shippt
AND likp~wadat                  IN s_planed
AND likp~kunnr                  IN s_shipto
AND likp~kunag                  IN s_soldto
AND likp~vbeln                  IN s_outbd
AND ztegsdt001~z_invoice_no     IN s_invno
AND ztegsdt001~z_invoice_date   IN s_invdt
AND ztegsdt001~z_cust_name_bt   IN s_btc
AND ztegsdt001~z_cust_name_st   IN s_stc
AND ztegsdt001~z_shipped_per    IN s_shpper
AND ztegsdt001~z_cre_ymd_inv    IN s_crtedt
AND ztegsdt001~z_cre_hms_inv    IN s_crtetm
AND ztegsdt001~z_cre_userid_inv IN s_crteus
AND ztegsdt001~z_mod_ymd_inv    IN s_mdfdt
AND ztegsdt001~z_mod_hms_inv    IN s_mdftm
AND ztegsdt001~z_mod_userid_inv IN s_mdfusr.

IF sy-subrc <> 0.
MESSAGE i006(zmegsd01) WITH text-e02 DISPLAY LIKE cns_msg_e.
LEAVE LIST-PROCESSING.
ENDIF.
SORT i_td_zt001 BY vstel  "ShippingPt
wadat  "Planed GI
kunnr  "Ship-to party
vbeln. "Outbound Delivery

ENDFORM.                    " GET_FROM_OD

*&---------------------------------------------------------------------*
*&      Form  GET_FROM_ED
*&---------------------------------------------------------------------*
*       Invoiceデータ取得
*----------------------------------------------------------------------*
FORM get_from_ed CHANGING i_td_zt001 TYPE typ_td_zt001.

SELECT
ztegsdt001~z_source_type      "ソースタイプ
ztegsdt010~vstel              "ShippingPt
ztegsdt010~wadat              "Planed GI
ztegsdt010~kunag              "Sold-to party
ztegsdt010~kunnr              "Ship-to party
ztegsdt010~vbeln              "出荷伝票(Outbound Delivery)
ztegsdt010~erdat              "レコード登録日
ztegsdt010~ernam              "登録者
ztegsdt001~z_invoice_no       "Invoice No
ztegsdt001~z_invoice_date     "Invoice Date
ztegsdt001~z_status_invoice   "ステータス（Invoice）
ztegsdt001~z_cust_bt          "得意先（Bill To）
ztegsdt001~z_cust_name_bt     "得意先名（Bill To）
ztegsdt001~z_address1_bt      "得意先住所1（Bill To）
ztegsdt001~z_address2_bt      "得意先住所2（Bill To）
ztegsdt001~z_attn_bt          "得意先担当者（Bill To）
ztegsdt001~z_tel_bt           "得意先電話番号（Bill To）
ztegsdt001~z_fax_bt           "得意先FAX（Bill To）
ztegsdt001~z_cust_st          "得意先（Ship To）
ztegsdt001~z_cust_name_st     "得意先名（Ship To）
ztegsdt001~z_address1_st      "得意先住所1（Ship To）
ztegsdt001~z_address2_st      "得意先住所2（Ship To）
ztegsdt001~z_attn_st          "得意先担当者（Ship To）
ztegsdt001~z_tel_st           "得意先電話番号（Ship To）
ztegsdt001~z_fax_st           "得意先FAX（Ship To）
ztegsdt001~z_shipped_per      "Shipped Per
ztegsdt001~z_on_or_about      "On or About
ztegsdt001~z_trade_from       "From
ztegsdt001~z_trade_to         "To
ztegsdt001~z_trade_via        "Via
ztegsdt001~z_trade_payment    "Payment
ztegsdt001~z_trade_term       "Trade Term
ztegsdt001~z_inv_remarks1     "Remarks (1)
ztegsdt001~z_inv_remarks2     "Remarks (2)
ztegsdt001~z_inv_remarks3     "Remarks (3)
ztegsdt001~z_inv_remarks4     "Remarks (4)
ztegsdt001~z_inv_remarks5     "Remarks (5)
ztegsdt001~z_casemark1        "Case Mark (1)
ztegsdt001~z_casemark2        "Case Mark (2)
ztegsdt001~z_casemark3        "Case Mark (3)
ztegsdt001~z_casemark4        "Case Mark (4)
ztegsdt001~z_casemark5        "Case Mark (5)
ztegsdt003~z_si_no            "S/I No
ztegsdt003~z_bl_date          "B/L Date
ztegsdt001~z_cre_ymd_inv      "登録年月日
ztegsdt001~z_cre_hms_inv      "登録時分秒
ztegsdt001~z_cre_userid_inv   "ユーザマスタレコードのユーザ名
ztegsdt001~z_mod_ymd_inv      "更新年月日
ztegsdt001~z_mod_hms_inv      "更新時分秒
ztegsdt001~z_mod_userid_inv   "ユーザマスタレコードのユーザ名
FROM ztegsdt001
INNER JOIN ztegsdt010
ON ztegsdt001~vbeln = ztegsdt010~vbeln
INNER JOIN ztegsdt004
ON ztegsdt001~z_invoice_no = ztegsdt004~z_invoice_no
LEFT JOIN ztegsdt003
ON ztegsdt004~z_si_no = ztegsdt003~z_si_no
INTO TABLE i_td_zt001
WHERE ztegsdt001~z_source_type = cns_styp2
AND ztegsdt010~vstel            IN s_shippt
AND ztegsdt010~wadat            IN s_planed
AND ztegsdt010~kunnr            IN s_shipto
AND ztegsdt010~kunag            IN s_soldto
AND ztegsdt010~vbeln            IN s_outbd
AND ztegsdt001~z_invoice_no     IN s_invno
AND ztegsdt001~z_invoice_date   IN s_invdt
AND ztegsdt001~z_cust_name_bt   IN s_btc
AND ztegsdt001~z_cust_name_st   IN s_stc
AND ztegsdt001~z_shipped_per    IN s_shpper
AND ztegsdt001~z_cre_ymd_inv    IN s_crtedt
AND ztegsdt001~z_cre_hms_inv    IN s_crtetm
AND ztegsdt001~z_cre_userid_inv IN s_crteus
AND ztegsdt001~z_mod_ymd_inv    IN s_mdfdt
AND ztegsdt001~z_mod_hms_inv    IN s_mdftm
AND ztegsdt001~z_mod_userid_inv IN s_mdfusr.

IF sy-subrc <> 0.
MESSAGE i006(zmegsd01) WITH text-e02 DISPLAY LIKE cns_msg_e.
LEAVE LIST-PROCESSING.
ENDIF.
SORT i_td_zt001 BY vstel  "ShippingPt
wadat  "Planed GI
kunnr  "Ship-to party
vbeln. "Outbound Delivery

ENDFORM.                    " GET_FROM_ED

*&---------------------------------------------------------------------*
*&      Form  GET_KNA1
*&---------------------------------------------------------------------*
*       D-2-2．テキスト取得
*----------------------------------------------------------------------*
*      -->i_TD_ZT001 Invoice data
*      <--o_TD_INV   Invoice ALV data
*----------------------------------------------------------------------*
FORM get_kna1  USING    i_td_zt001  TYPE typ_td_zt001
CHANGING o_td_inv    TYPE typ_td_inv.
TYPES:
BEGIN OF ltyp_kna1,
kunnr TYPE kunnr,
name1 TYPE name1_gp,
END OF ltyp_kna1.

DATA:
ltd_zt001 TYPE typ_td_zt001,
ltd_kna1  TYPE STANDARD TABLE OF ltyp_kna1,
ltd_kna1n TYPE STANDARD TABLE OF ltyp_kna1,
lst_zt001 TYPE typ_zt001,
lst_kna1  TYPE ltyp_kna1,
lst_inv   TYPE zsegsd0004.

ltd_zt001 = i_td_zt001.

SORT ltd_zt001 BY kunag
kunnr.
DELETE ADJACENT DUPLICATES FROM ltd_zt001
COMPARING kunag kunnr.

LOOP AT ltd_zt001 INTO lst_zt001.
READ TABLE ltd_kna1 BINARY SEARCH
INTO lst_kna1 WITH KEY kunnr = lst_zt001-kunag.
IF sy-subrc <> 0.
lst_kna1-kunnr = lst_zt001-kunag.
APPEND lst_kna1 TO ltd_kna1.
CLEAR lst_kna1.
ENDIF.

READ TABLE ltd_kna1 BINARY SEARCH
INTO lst_kna1 WITH KEY kunnr = lst_zt001-kunnr.
IF sy-subrc <> 0.
lst_kna1-kunnr = lst_zt001-kunnr.
APPEND lst_kna1 TO ltd_kna1.
CLEAR lst_kna1.
ENDIF.
ENDLOOP.

SORT ltd_kna1 BY kunnr.
DELETE ADJACENT DUPLICATES FROM ltd_kna1 COMPARING kunnr.
IF ltd_kna1 IS NOT INITIAL.
SELECT kunnr
name1
FROM kna1
INTO TABLE ltd_kna1n
FOR ALL ENTRIES IN ltd_kna1
WHERE kunnr = ltd_kna1-kunnr.
ENDIF.
SORT ltd_kna1n BY kunnr.

CLEAR lst_zt001.
LOOP AT i_td_zt001 INTO lst_zt001.

MOVE-CORRESPONDING lst_zt001 TO lst_inv.

*   Sold-to party
lst_inv-z_sold_to_party  = lst_zt001-kunag.

*   Ship-to party
lst_inv-z_ship_to_party  = lst_zt001-kunnr.

*   Customer(Bill To)
lst_inv-z_cust_billto    = lst_zt001-z_cust_bt.

*   Customer Name(Bill To)
lst_inv-z_cust_name_bill = lst_zt001-z_cust_name_bt.

*   Address1(Bill To)
lst_inv-z_address1_billt = lst_zt001-z_address1_bt.

*   Address2(Bill To)
lst_inv-z_address2_billt = lst_zt001-z_address2_bt.

*   Attn(Bill To)
lst_inv-z_attn_billto    = lst_zt001-z_attn_bt.

*   Tel(Bill To)
lst_inv-z_tel_billto     = lst_zt001-z_tel_bt.

*   Fax(Bill To)
lst_inv-z_fax_billto     = lst_zt001-z_fax_bt.

*   Customer(Ship To)
lst_inv-z_cust_shipto    = lst_zt001-z_cust_st.

*   Customer Name(Ship To)
lst_inv-z_cust_name_ship = lst_zt001-z_cust_name_st.

*   Address1(Ship To)
lst_inv-z_address1_shipt = lst_zt001-z_address1_st.

*   Address2(Ship To)
lst_inv-z_address2_shipt = lst_zt001-z_address2_st.

*   Attn(Ship To)
lst_inv-z_attn_shipto    = lst_zt001-z_attn_st.

*   Tel(Ship To)
lst_inv-z_tel_shipto     = lst_zt001-z_tel_st.

*   Fax(Ship To)
lst_inv-z_fax_shipto     = lst_zt001-z_fax_st.

*   Remarks (1)
lst_inv-z_inv_remark1    = lst_zt001-z_inv_remarks1.

*   Remarks (2)
lst_inv-z_inv_remark2    = lst_zt001-z_inv_remarks2.

*   Remarks (3)
lst_inv-z_inv_remark3    = lst_zt001-z_inv_remarks3.

*   Remarks (4)
lst_inv-z_inv_remark4    = lst_zt001-z_inv_remarks4.

*   Remarks (5)
lst_inv-z_inv_remark5    = lst_zt001-z_inv_remarks5.

*   Create Date
lst_inv-z_cre_ymd_invoic = lst_zt001-z_cre_ymd_inv.

*   Create Time
lst_inv-z_cre_hms_invoic = lst_zt001-z_cre_hms_inv.

*   Modify Date
lst_inv-z_mod_ymd_invoic = lst_zt001-z_mod_ymd_inv.

*   Modify Time
lst_inv-z_mod_hms_invoic = lst_zt001-z_mod_hms_inv.

*   Sold-to party Name
READ TABLE ltd_kna1n INTO lst_kna1 BINARY SEARCH
WITH KEY kunnr = lst_inv-z_sold_to_party.
IF sy-subrc = 0.
lst_inv-z_sold_to_name = lst_kna1-name1.
CLEAR lst_kna1.
ENDIF.

*   Ship-to party Name
READ TABLE ltd_kna1n INTO lst_kna1 BINARY SEARCH
WITH KEY kunnr = lst_inv-z_ship_to_party.
IF sy-subrc = 0.
lst_inv-z_ship_to_name = lst_kna1-name1.
CLEAR lst_kna1.
ENDIF.

APPEND lst_inv TO o_td_inv.
CLEAR:
lst_inv.
ENDLOOP.

SORT o_td_inv BY vstel            "ShippingPt
wadat            "Planed GI
z_ship_to_party  "Ship-to party
vbeln.           "Outbound Delivery

DELETE ADJACENT DUPLICATES FROM o_td_inv COMPARING vbeln.

ENDFORM.                    " GET_KNA1

*&---------------------------------------------------------------------*
*&      Module  STATUS_3500  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_3500 OUTPUT.
SET PF-STATUS 'ST_3500'.
SET TITLEBAR 'T_3500'.

PERFORM dis_inv_alv.

ENDMODULE.                 " STATUS_3500  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3500  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_3500 INPUT.

w_code = ok_code.
CASE w_code.
WHEN cns_exc5.
PERFORM process_exe5.
LEAVE TO SCREEN 0.
WHEN cns_no5.
LEAVE TO SCREEN 0.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3500  INPUT

*&---------------------------------------------------------------------*
*&      Form  DIS_INV_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM dis_inv_alv .

DATA:
ltd_exclude  TYPE ui_functions,
lst_variant  TYPE disvariant,
lst_fieldcat TYPE lvc_s_fcat,
ltd_fieldcat TYPE lvc_t_fcat,
lw_save      TYPE c,
lst_layout   TYPE lvc_s_layo.     "slis_layout_alv

* fielcat 属性の設定
CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
EXPORTING
i_structure_name       = cns_inv_alv
CHANGING
ct_fieldcat            = ltd_fieldcat
EXCEPTIONS
inconsistent_interface = 1
program_error          = 2
OTHERS                 = 3.
IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE cns_msg_s NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
DISPLAY LIKE cns_msg_e.
LEAVE LIST-PROCESSING.
ENDIF.

LOOP AT ltd_fieldcat INTO lst_fieldcat.
IF sy-tabix = 1.
lst_fieldcat-checkbox = abap_on.
lst_fieldcat-no_out   = abap_on.
lst_fieldcat-edit      = abap_on.

MODIFY ltd_fieldcat FROM lst_fieldcat INDEX sy-tabix.
ENDIF.
*    IF sy-tabix = 38 OR
*       sy-tabix = 40 OR
*       sy-tabix = 43 OR
*       sy-tabix = 45 OR
*       sy-tabix = 47.
*      lst_fieldcat-coltext = lst_fieldcat-scrtext_l.
*    ENDIF.
*    MODIFY ltd_fieldcat FROM lst_fieldcat INDEX sy-tabix.
ENDLOOP.

* LAYOUT の設定
lst_layout-cwidth_opt = abap_on.
lst_layout-zebra      = abap_on.
lst_layout-box_fname  = cns_chkbx.

lw_save = cns_save_a.

PERFORM exclude_tb_functions CHANGING ltd_exclude.
lst_variant-report  = sy-repid.

IF ci_ccontainer_i IS INITIAL.
*   コントロールの創建
CREATE OBJECT ci_ccontainer_i
EXPORTING
container_name              = ci_custom_control_name_i
EXCEPTIONS
cntl_error                  = 1
cntl_system_error           = 2
create_error                = 3
lifetime_error              = 4
lifetime_dynpro_dynpro_link = 5
OTHERS                      = 6.

IF sy-subrc = 0.
*       ALVインスタント
CREATE OBJECT ci_alv_i
EXPORTING
i_parent          = ci_ccontainer_i
EXCEPTIONS
error_cntl_create = 1
error_cntl_init   = 2
error_cntl_link   = 3
error_dp_create   = 4
OTHERS            = 5.

ELSE.
MESSAGE ID sy-msgid TYPE cns_msg_i NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
DISPLAY LIKE cns_msg_e.

LEAVE TO SCREEN 0.
ENDIF.


CALL METHOD ci_alv_i->set_table_for_first_display
EXPORTING
*       i_structure_name              = cns_alv_str
is_variant                    = lst_variant
is_layout                     = lst_layout
it_toolbar_excluding          = ltd_exclude
i_save                        = lw_save
CHANGING
it_outtab                     = td_inv
it_fieldcatalog               = ltd_fieldcat
EXCEPTIONS
invalid_parameter_combination = 1
program_error                 = 2
too_many_lines                = 3
OTHERS                        = 4.

IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE cns_msg_i NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
DISPLAY LIKE cns_msg_e.

LEAVE TO SCREEN 0.
ENDIF.

ELSE.
*     リフレッシュ
CALL METHOD ci_alv_i->refresh_table_display
*        EXPORTING
*          IS_STABLE      =
*         I_SOFT_REFRESH =
EXCEPTIONS
finished       = 1
OTHERS         = 2.

IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE cns_msg_i NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
DISPLAY LIKE cns_msg_e.

LEAVE TO SCREEN 0.
ENDIF.
ENDIF.

ENDFORM.                    " DIS_INV_ALV

*&---------------------------------------------------------------------*
*&      Form  PROCESS_EXE5
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM process_exe5 .
DATA:
lw_cnt            TYPE sy-index,
lw_cnt_t          TYPE sy-index,
lw_cnt_i          TYPE sy-index,
lw_kunag          TYPE kunag,
lw_kunnr          TYPE kunwe,
lw_adrnr          TYPE adrnr,
lw_name1          TYPE ad_name1,
lw_street         TYPE ad_street,
lw_city1          TYPE ad_city1,
lw_teln           TYPE ad_tlnmbr1,
lw_faxn           TYPE ad_fxnmbr1,
lst_inv           TYPE zsegsd0004,
lst_zt004c        TYPE typ_zt004c,
ltd_et_index_rows TYPE lvc_t_row,
lsd_et_index_rows TYPE lvc_s_row,
ltd_inv_sel       TYPE typ_td_inv.         "Selected Inv.

* D-4-3-1．行選択のチェック処理
CALL METHOD ci_alv_i->get_selected_rows
IMPORTING
et_index_rows = ltd_et_index_rows.

DESCRIBE TABLE ltd_et_index_rows LINES lw_cnt.

IF lw_cnt = 0.
*   行が選択されていない場合
MESSAGE e008(zmegsd01).
ENDIF.

DESCRIBE TABLE td_zt004c LINES w_inv_n.
lw_cnt_t = lw_cnt + w_inv_n.
IF lw_cnt_t > 30.
MESSAGE e052(zmegsd01) WITH lw_cnt.
ENDIF.

lw_cnt_i = w_inv_n.
LOOP AT ltd_et_index_rows INTO lsd_et_index_rows.
CLEAR: lw_cnt.
lw_cnt = lsd_et_index_rows-index.
READ TABLE td_inv INTO lst_inv INDEX lw_cnt.
IF lst_inv-Z_SI_NO is NOT INITIAL.
MESSAGE e056(zmegsd01).
ENDIF.
APPEND lst_inv TO ltd_inv_sel.

READ TABLE td_zt004c TRANSPORTING NO FIELDS
WITH KEY z_invoice_no = lst_inv-z_invoice_no.
IF sy-subrc <> 0.
lw_cnt_i = lw_cnt_i + 1.
lst_zt004c-no = lw_cnt_i.
lst_zt004c-z_invoice_no = lst_inv-z_invoice_no.
APPEND lst_zt004c TO td_zt004c.
ENDIF.
ENDLOOP.

* D-4-3-3．Invoiceの引継ぎ可能情報の設定
* 「遷移元画面で入力済みの行数が０行」の場合のみ、以下の処理を行う。
CHECK w_inv_n = 0.

SORT td_zt004c BY z_invoice_no.
CLEAR lst_zt004c.
LOOP AT td_zt004c INTO lst_zt004c.
lst_zt004c-no = sy-tabix.
MODIFY td_zt004c FROM lst_zt004c
INDEX sy-tabix TRANSPORTING no.
ENDLOOP.

SORT ltd_inv_sel BY z_invoice_no.
CLEAR lst_inv.
READ TABLE ltd_inv_sel INTO lst_inv INDEX 1.
SELECT SINGLE kunnr
kunag
FROM likp
INTO (lw_kunnr,lw_kunag)
WHERE vbeln = lst_inv-vbeln.

st_s016-z_cust_cnee = lw_kunnr.
st_s016-z_cust_ntfy = lw_kunag.

* D-4-3-4．Customer(Notify)情報の設定
SELECT adrnr
UP TO 1 ROWS
FROM vbpa
INTO lw_adrnr
WHERE vbeln = lst_inv-vbeln
AND parvw = cns_parvw_sp.
EXIT.
ENDSELECT.
IF sy-subrc = 0.
SELECT name1
street
city1
tel_number
fax_number
UP TO 1 ROWS
FROM adrc
INTO (lw_name1,lw_street,lw_city1,lw_teln,lw_faxn)
WHERE addrnumber = lw_adrnr.
EXIT.
ENDSELECT.
ENDIF.
st_s016-z_cust_name_ntfy = lw_name1.
st_s016-z_address1_ntfy = lw_street.
st_s016-z_address2_ntfy = lw_city1.
st_s016-z_tel_ntfy = lw_teln.
st_s016-z_fax_ntfy = lw_faxn.

CLEAR:
lw_adrnr,
lw_name1,
lw_street,
lw_city1,
lw_teln,
lw_faxn.
* D-4-3-5．Customer(CNEE)情報の設定
SELECT adrnr
UP TO 1 ROWS
FROM vbpa
INTO lw_adrnr
WHERE vbeln = lst_inv-vbeln
AND parvw = cns_parvw_sh.
EXIT.
ENDSELECT.
IF sy-subrc = 0.
SELECT name1
street
city1
tel_number
fax_number
UP TO 1 ROWS
FROM adrc
INTO (lw_name1,lw_street,lw_city1,lw_teln,lw_faxn)
WHERE addrnumber = lw_adrnr.
EXIT.
ENDSELECT.
ENDIF.
st_s016-z_cust_name_cnee = lw_name1.
st_s016-z_address1_cnee = lw_street.
st_s016-z_address2_cnee = lw_city1.
st_s016-z_tel_cnee = lw_teln.
st_s016-z_fax_cnee = lw_faxn.

CLEAR:
lw_adrnr,
lw_name1,
lw_street,
lw_city1,
lw_teln,
lw_faxn.


ENDFORM.                    " PROCESS_EXE5

*&---------------------------------------------------------------------*
*&      Form  GET_SEL_LINE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_sel_line CHANGING o_w_answer TYPE c.

DATA:
ltd_zt004   TYPE typ_td_zt004c,
lw_question     TYPE char72.

ltd_zt004 = td_zt004c.
DELETE ltd_zt004 WHERE flg IS INITIAL.
IF ltd_zt004 IS INITIAL.
MESSAGE s008(zmegsd01) DISPLAY LIKE cns_msg_e.
EXIT.
*   行が選択されていません
ENDIF.

* 削除しますか？
MESSAGE s034(zmegsd01) INTO lw_question.

* POP確認
PERFORM pop_confirm USING text-003
lw_question
text-001
text-002
CHANGING o_w_answer.

ENDFORM.                    " GET_SEL_LINE

*&---------------------------------------------------------------------*
*&      Form  POP_CONFIRM
*&---------------------------------------------------------------------*
*       POP確認
*----------------------------------------------------------------------*
*      -->I_W_TITLEBAR     TITLEBAR
*      -->I_W_QUESTION     TEXT_QUESTION
*      -->I_W_BUTTON1      TEXT_BUTTON_1
*      -->I_W_BUTTON2      TEXT_BUTTON_2
*      <--O_W_ANSWER       ANSWER
*----------------------------------------------------------------------*
FORM pop_confirm USING i_w_titlebar TYPE any
i_w_question TYPE any
i_w_button1  TYPE any
i_w_button2  TYPE any
CHANGING o_w_answer   TYPE c.

CALL FUNCTION 'POPUP_TO_CONFIRM'
EXPORTING
titlebar              = i_w_titlebar
text_question         = i_w_question
text_button_1         = i_w_button1
text_button_2         = i_w_button2
display_cancel_button = space
IMPORTING
answer                = o_w_answer
EXCEPTIONS
text_not_found        = 1
OTHERS                = 2.

IF sy-subrc <> 0.

MESSAGE ID sy-msgid TYPE cns_msg_e NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

ENDIF.

ENDFORM.                    " POP_CONFIRM

*&---------------------------------------------------------------------*
*&      Form  PRC_SAVE
*&---------------------------------------------------------------------*
*       B-4-8．「Save」ボタン押下時の処理
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prc_save .

* INSERT時
IF st_s016-z_si_no IS INITIAL.
PERFORM prc_insert.
ELSE.
PERFORM prc_update.
ENDIF.

LEAVE TO SCREEN 0.

ENDFORM.                    " PRC_SAVE

*&---------------------------------------------------------------------*
*&      Form  PRC_INSERT
*&---------------------------------------------------------------------*
*       INSERT時
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prc_insert .

DATA:
lw_eflg    TYPE c,
lst_zt003  TYPE ztegsdt003,
lst_zt004  TYPE typ_zt004c,
lst_zt004t TYPE ztegsdt004,
ltd_zt004d TYPE STANDARD TABLE OF ztegsdt004,
ltd_zt004i TYPE STANDARD TABLE OF ztegsdt004.

* B-4-8-1．ShippingInstructionの登録
MOVE-CORRESPONDING st_s016 TO lst_zt003.

* S/I Noを発番する
CALL FUNCTION 'NUMBER_GET_NEXT'
EXPORTING
nr_range_nr = cns_nr_10
object      = cns_obj
IMPORTING
number      = lst_zt003-z_si_no.
IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE cns_msg_e NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

lst_zt003-z_cre_ymd    = sy-datum.        "システム日付
lst_zt003-z_cre_hms    = sy-uzeit.        "システム時刻
lst_zt003-z_cre_userid = sy-uname.        "システムユーザ

INSERT INTO ztegsdt003 VALUES lst_zt003.
IF sy-subrc <> 0.
lw_eflg = abap_on.
MESSAGE e012(zmegsd01) WITH text-e01.
*   データ更新に失敗しました。(TBL = ZTEGSDT003 / MSG = &2 )
ENDIF.

* B-4-8-2．SI-InvoiceLinkの削除/登録

* ZTEGSDT004をロックする
PERFORM lock_zt004.

* INSERTの処理を実施する
PERFORM insert_zt004  USING lst_zt003-z_si_no
CHANGING lw_eflg.
IF lw_eflg = abap_on.
MESSAGE e012(zmegsd01) WITH text-e03.
*   データ更新に失敗しました。(TBL = ZTEGSDT004 / MSG = &2 )
ENDIF.

IF lw_eflg = abap_off.
MESSAGE s013(zmegsd01).
*   データ登録が正常終了しました。
COMMIT WORK.
ELSE.
ROLLBACK WORK.
ENDIF.

PERFORM unlock_zt004.

ENDFORM.                    " PRC_INSERT

*&---------------------------------------------------------------------*
*&      Form  LOCK_ZT004
*&---------------------------------------------------------------------*
*       ZTEGSDT004をロックする
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lock_zt004 .
DATA:
lst_zt004 TYPE typ_zt004c.

LOOP AT td_zt004b INTO lst_zt004.
CALL FUNCTION 'ENQUEUE_EZZTEGSDT004'
EXPORTING
mode_ztegsdt004 = cns_lmod
z_invoice_no    = lst_zt004-z_invoice_no
EXCEPTIONS
foreign_lock    = 1
system_failure  = 2
OTHERS          = 3.
IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE cns_msg_e NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

ENDLOOP.

ENDFORM.                    " LOCK_ZT004

*&---------------------------------------------------------------------*
*&      Form  UNLOCK_ZT004
*&---------------------------------------------------------------------*
*       ロックの解除
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM unlock_zt004 .

DATA:
lst_zt004 TYPE typ_zt004c.

LOOP AT td_zt004b INTO lst_zt004.
CALL FUNCTION 'DEQUEUE_EZZTEGSDT004'
EXPORTING
mode_ztegsdt004 = cns_lmod
z_invoice_no    = lst_zt004-z_invoice_no.
ENDLOOP.

ENDFORM.                    " UNLOCK_ZT004

*&---------------------------------------------------------------------*
*&      Form  INSERT_ZT004
*&---------------------------------------------------------------------*
*       INSERTの処理を実施する
*----------------------------------------------------------------------*
*      -->I_W_SIN   S/I No
*      <--O_W_EFLG  Flag
*----------------------------------------------------------------------*
FORM insert_zt004  USING i_w_sin TYPE zesino
CHANGING o_w_eflg TYPE c.
DATA:
lst_zt004  TYPE typ_zt004c,
lst_zt004t TYPE ztegsdt004,
ltd_zt004i TYPE STANDARD TABLE OF ztegsdt004.

LOOP AT td_zt004c INTO lst_zt004.
READ TABLE td_zt004b TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY z_invoice_no = lst_zt004-z_invoice_no.
IF sy-subrc <> 0.
lst_zt004t-z_invoice_no = lst_zt004-z_invoice_no.
lst_zt004t-z_si_no      = i_w_sin.
lst_zt004t-z_cre_ymd    = sy-datum.        "システム日付
lst_zt004t-z_cre_hms    = sy-uzeit.        "システム時刻
lst_zt004t-z_cre_userid = sy-uname.        "システムユーザ

APPEND lst_zt004t TO ltd_zt004i.
CLEAR lst_zt004t.
ENDIF.
ENDLOOP.
IF ltd_zt004i IS NOT INITIAL.
INSERT ztegsdt004 FROM TABLE ltd_zt004i ACCEPTING DUPLICATE KEYS.
IF sy-subrc <> 0.
o_w_eflg = abap_on.
ENDIF.
ENDIF.

ENDFORM.                    " INSERT_ZT004

*&---------------------------------------------------------------------*
*&      Form  DEL_ZT004
*&---------------------------------------------------------------------*
*       DELETEの処理を実施する
*----------------------------------------------------------------------*
*      -->i_w_SIn  S/I No
*      <--o_W_EFLG Flag
*----------------------------------------------------------------------*
FORM del_zt004  USING    i_w_sin  TYPE zesino
CHANGING o_w_eflg TYPE c.

DATA:
lst_zt004  TYPE typ_zt004c,
lst_zt004t TYPE ztegsdt004,
ltd_zt004d TYPE STANDARD TABLE OF ztegsdt004.

LOOP AT td_zt004b INTO lst_zt004.
READ TABLE td_zt004c TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY z_invoice_no = lst_zt004-z_invoice_no.
IF sy-subrc <> 0.
lst_zt004t-z_invoice_no = lst_zt004-z_invoice_no.
lst_zt004t-z_si_no      = i_w_sin.
APPEND lst_zt004t TO ltd_zt004d.
CLEAR lst_zt004t.
ENDIF.
ENDLOOP.
IF ltd_zt004d IS NOT INITIAL.
DELETE ztegsdt004 FROM TABLE ltd_zt004d.
IF sy-subrc <> 0.
o_w_eflg = abap_on.
ENDIF.
ENDIF.

ENDFORM.                    " DEL_ZT004

*&---------------------------------------------------------------------*
*&      Form  PRC_UPDATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM prc_update .

DATA:
lw_eflg   TYPE c,
lst_zt003 TYPE ztegsdt003.

* B-4-8-0．テーブルロック
PERFORM lock_zt003.

* B-4-8-1．ShippingInstructionのUPDATE
MOVE-CORRESPONDING st_s016 TO lst_zt003.
lst_zt003-z_mod_ymd    = sy-datum.        "システム日付
lst_zt003-z_mod_hms    = sy-uzeit.        "システム時刻
lst_zt003-z_mod_userid = sy-uname.        "システムユーザ
MODIFY ztegsdt003 FROM lst_zt003.
IF sy-subrc <> 0.
lw_eflg = abap_on.
MESSAGE e012(zmegsd01) WITH text-e01.
*   データ更新に失敗しました。(TBL = ZTEGSDT003 / MSG = &2 )
ENDIF.

* B-4-8-2．SI-InvoiceLinkの削除/登録

* DELETEの処理を実施する
PERFORM del_zt004 USING lst_zt003-z_si_no
CHANGING lw_eflg.
IF lw_eflg = abap_on.
MESSAGE e033(zmegsd01) WITH text-e03.
*   データ削除に失敗しました。(TBL = ZTEGSDT004 / MSG = &2 ).
ENDIF.

* INSERTの処理を実施する
PERFORM insert_zt004  USING lst_zt003-z_si_no
CHANGING lw_eflg.
IF lw_eflg = abap_on.
MESSAGE e012(zmegsd01) WITH text-e03.
*   データ更新に失敗しました。(TBL = ZTEGSDT004 / MSG = &2 )
ENDIF.

IF lw_eflg = abap_off.
MESSAGE s013(zmegsd01).
*   データ登録が正常終了しました。
COMMIT WORK.
ELSE.
ROLLBACK WORK.
ENDIF.

PERFORM unlock_zt003.
PERFORM unlock_zt004.


ENDFORM.                    " PRC_UPDATE

*&---------------------------------------------------------------------*
*&      Form  LOCK_ZT003
*&---------------------------------------------------------------------*
*       ZTEGSDT003をロックする
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM lock_zt003 .

CALL FUNCTION 'ENQUEUE_EZZTEGSDT003'
EXPORTING
mode_ztegsdt003 = cns_lmod
z_si_no         = st_s016-z_si_no
EXCEPTIONS
foreign_lock    = 1
system_failure  = 2
OTHERS          = 3.
IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE cns_msg_e NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

ENDFORM.                    " LOCK_ZT003

*&---------------------------------------------------------------------*
*&      Form  UNLOCK_ZT003
*&---------------------------------------------------------------------*
*       ロックの解除
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM unlock_zt003 .

CALL FUNCTION 'DEQUEUE_EZZTEGSDT003'
EXPORTING
mode_ztegsdt003 = cns_lmod
z_si_no         = st_s016-z_si_no.

ENDFORM.                    " UNLOCK_ZT003

*&---------------------------------------------------------------------*
*&      Form  F4_FOR_LAYOUT
*&---------------------------------------------------------------------*
*       選択画面のF4の検索ヘルプの設定
*----------------------------------------------------------------------*
FORM f4_for_layout .

DATA: lst_variant_i TYPE disvariant,
lw_save(1)    TYPE c,
lw_exit(1)    TYPE c,
lst_variant_e TYPE disvariant.

lw_save = cns_save_a.

lst_variant_i-report = sy-repid.

CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
EXPORTING
is_variant          = lst_variant_i
*     I_TABNAME_HEADER    =
*     I_TABNAME_ITEM      =
*     IT_DEFAULT_FIELDCAT =
i_save              = lw_save
*     I_DISPLAY_VIA_GRID  = ' '
IMPORTING
e_exit              = lw_exit
es_variant          = lst_variant_e
EXCEPTIONS
not_found           = 1
program_error       = 2
OTHERS              = 3.

IF sy-subrc <> 0.

MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.

ELSE.

IF lw_exit = space.

p_laot = lst_variant_e-variant.

ENDIF.

ENDIF.

ENDFORM.                    " F4_FOR_LAYOUT
