report ztest_isid06_017.
type-pools abap.
parameters:
p_text type string,
p_len  type i obligatory.

data g_len type i.
*
initialization.
%_P_TEXT_%_app_%-text = '文字列'.
%_P_LEN_%_app_%-text = 'SJISの出力バイト数'.
*
start-of-selection.
perform sjis_length using p_text p_len g_len.
write: / '入力文字列', (**) p_text,
/ '出力バイト', p_len,
/ '出力文字数', g_len,
/ '出力文字列', (**) p_text(g_len).
*&---------------------------------------------------------------------*
*& SJISに変換後のバイト数に収まるUNICODE時の文字数を求める
*& SJISに存在しない文字(機種依存文字やサロートペア、合字など)にも対応
*&---------------------------------------------------------------------*
form sjis_length using l_item   type clike
l_byte   type i
l_length type i.
statics l_out_ce type ref to cl_abap_conv_out_ce.
data: l_codepage type abap_encoding,
l_buffer   type ref to data,
l_len      type i,
l_pos      type i,
l_off      type i,
l_olen     type i.
field-symbols <buffer> type x.
* 外部書式変換オブジェクトが未構築なら構築する
if l_out_ce is not bound.
l_codepage = cl_abap_codepage=>sap_codepage( `shift_jis` ).
l_out_ce = cl_abap_conv_out_ce=>create( encoding = l_codepage
ignore_cerr = abap_true ).
endif.
* 出力先のバイト数に応じて領域を確保する。
create data l_buffer type x length l_byte.
assign l_buffer->* to <buffer> casting.
* ＳＪＩＳに変換する
l_out_ce->convert( exporting data   = l_item
importing buffer = <buffer> ).
* 変換文字列のチェック
l_len = xstrlen( <buffer> ).
l_pos = 1.
while l_len >= l_pos.
l_off = l_pos - 1.
*   全角文字の第1バイト目なら
if <buffer>+l_off(1) between '81' and '9F'
or <buffer>+l_off(1) between 'E0' and 'FC'.
*     2バイト目が無いなら、1バイト目を捨てる
if l_len = l_pos.
l_pos = l_pos + 1.
*     2バイト目があるなら、2バイトで1文字にする
else.
l_pos = l_pos + 2.
l_olen = l_olen + 1.
endif.
*   文字列の終わりなら、終了
elseif <buffer>+l_off(1) = '00'.
exit.
*   その他なら、1バイトで1文字にする
else.
l_pos = l_pos + 1.
l_olen = l_olen + 1.
endif.
endwhile.
l_length = l_olen.
endform.                    "Sjis_Length
