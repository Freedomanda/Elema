*&---------------------------------------------------------------------*
*&  REPORT ZF023200                                                    *
*&         閾値マスタダウンロード機能                                  *
*&---------------------------------------------------------------------*
*&  機能：閾値マスタをタブ区切ファイルでダウンロードする機能
*&　　　
*&  作成日   : 2012/04/09
*&  作成者   : SOLFIS
*&  変更履歴 :
*&  変更内容 :
*&  2012/10/15  ISID              ES-UP
*&---------------------------------------------------------------------*
REPORT ZF023200
NO STANDARD PAGE HEADING
LINE-SIZE  170
LINE-COUNT 58
MESSAGE-ID Y1.
TABLES: LFA1,KNA1.
CONSTANTS:
C_ERR(1)        TYPE C VALUE 'E',
C_K(1)          TYPE C VALUE 'K',  "仕入先区分
C_D(1)          TYPE C VALUE 'D',  "得意先区分
C_TZ(2)         TYPE C VALUE 'TZ',
C_BT(2)         TYPE C VALUE 'BT',
C_KT(2)         TYPE C VALUE 'KT',
C_T(1)          TYPE C VALUE 'T',
C_B(1)          TYPE C VALUE 'B',
C_Z(1)          TYPE C VALUE 'Z',
C_ZTERM_0001    TYPE DZTERM VALUE '0001',
C_TAB(1)        TYPE X VALUE '09'. "タブ
* Add ES-UP 2012/10/25 -->
CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
* Add ES-UP 2012/10/25 <--
DATA:
GW_ZN007_CNT TYPE I,
GW_ZN008_CNT TYPE I,
GW_ALL_CNT   TYPE I.
*----------------------------------------------------------------------*
*   構造/テーブル定義
*----------------------------------------------------------------------*
*出力テーブル
TYPES:
BEGIN OF TY_DATA,
* Mod ES-UP 2012/10/25 -->
*   REC(1000) TYPE C, "レコード
REC TYPE string, "レコード
* Mod ES-UP 2012/10/25 <--
END   OF TY_DATA.
DATA :
GT_DATA TYPE STANDARD TABLE OF TY_DATA,
GW_DATA TYPE TY_DATA.
*出力レコード
TYPES:
BEGIN OF TY_REC,
TORICODE(10) TYPE C, "取引先コード
CODE(10)     TYPE C, "コード
KBN(1)       TYPE C, "区分
NAME1(36)    TYPE C, "名称
WAERS(5)     TYPE C, "通貨コード
*
LOWAMT(17)   TYPE C, "閾値下限
BASE_ZT(1)   TYPE C, "基本取引条件
ZTERM_PZ(4)  TYPE C, "条件A残額
ZTERM_SZ(4)  TYPE C, "条件B残額
ZLSCH_Z(1)   TYPE C, "方法残額
PER1(6)      TYPE C, "分割（%）１
PAY1(17)     TYPE C, "分割(金額)１
ZTERM_P1(4)  TYPE C, "条件A１
ZTERM_S1(4)  TYPE C, "条件B１
ZLSCH_1(1)   TYPE C,                                     "方法1
PER2(6)      TYPE C, "分割（%）２
PAY2(14)     TYPE C, "分割(金額)２
ZTERM_P2(4)  TYPE C,                                     "条件A2
ZTERM_S2(4)  TYPE C,                                     "条件B2
ZLSCH_2(1)   TYPE C,                                     "方法2
PER3(6)      TYPE C,                                     "分割（%）3
PAY3(17)     TYPE C, "分割(金額)3
ZTERM_P3(4)  TYPE C,                                     "条件A3
ZTERM_S3(4)  TYPE C,                                     "条件B3
ZLSCH_3(1)   TYPE C,                                     "方法3
PER4(6)      TYPE C,                                     "分割（%）4
PAY4(17)     TYPE C, "分割(金額)4
ZTERM_P4(4)  TYPE C,                                     "条件A4
ZTERM_S4(4)  TYPE C,                                     "条件B4
ZLSCH_4(1)   TYPE C,                                     "方法4
ZNTCH(17)    TYPE C, "手形通信費
MEMO(40)     TYPE C, "コメント
END   OF TY_REC.
DATA :
GT_REC TYPE STANDARD TABLE OF TY_REC,
GW_REC TYPE TY_REC.
*仕入先マスタ (一般セクション)
TYPES:
BEGIN OF TY_LFA1,
LIFNR TYPE LFA1-LIFNR, "仕入先
NAME1 TYPE LFA1-NAME1,                                   "名称 1
END   OF TY_LFA1.
DATA :
GT_LFA1 TYPE STANDARD TABLE OF TY_LFA1,
GW_LFA1 TYPE TY_LFA1.
*仕入先マスタ (会社コ−ド)
TYPES:
BEGIN OF TY_LFB1,
LIFNR TYPE LFB1-LIFNR, "仕入先
ZWELS TYPE LFB1-ZWELS, "考慮される支払方法一覧
ZTERM TYPE LFB1-ZTERM, "支払条件キー
END   OF TY_LFB1.
DATA :
GT_LFB1 TYPE STANDARD TABLE OF TY_LFB1,
GW_LFB1 TYPE TY_LFB1.
*仕入先マスタ購買組織データ
TYPES:
BEGIN OF TY_LFM1,
LIFNR TYPE LFM1-LIFNR, "仕入先
WAERS TYPE LFM1-WAERS, "購買発注通貨
ZTERM TYPE LFM1-ZTERM, "支払条件キー
END   OF TY_LFM1.
DATA :
GT_LFM1 TYPE STANDARD TABLE OF TY_LFM1,
GW_LFM1 TYPE TY_LFM1.
*取引先機能
TYPES:
BEGIN OF TY_WYT3,
LIFNR TYPE WYT3-LIFNR, "仕入先
LIFN2 TYPE WYT3-LIFN2, "他の仕入先への参照
END   OF TY_WYT3.
DATA :
GT_WYT3 TYPE STANDARD TABLE OF TY_WYT3,
GW_WYT3 TYPE TY_WYT3.
*規定外マスタテーブル（仕入）
DATA :
GT_ZN007 TYPE STANDARD TABLE OF ZN007,
GW_ZN007 TYPE ZN007.
*得意先マスタ: 一般データ
TYPES:
BEGIN OF TY_KNA1,
KUNNR TYPE KNA1-LIFNR, "得意先コード
NAME1 TYPE KNA1-NAME1,                                   "名称 1
*  KTOKD TYPE KNA1-KTOKD, "仕入先勘定グループ
END   OF TY_KNA1.
DATA :
GT_KNA1 TYPE STANDARD TABLE OF TY_KNA1,
GW_KNA1 TYPE TY_KNA1.
*得意先マスタ（会社コード）
TYPES:
BEGIN OF TY_KNB1,
KUNNR TYPE KNB1-KUNNR, "得意先コード
ZWELS TYPE KNB1-ZWELS, "支払方法一覧
ZTERM TYPE KNB1-ZTERM, "支払条件キー
END   OF TY_KNB1.
DATA :
GT_KNB1 TYPE STANDARD TABLE OF TY_KNB1,
GW_KNB1 TYPE TY_KNB1.
*得意先マスタ: 販売データ
TYPES:
BEGIN OF TY_KNVV,
KUNNR TYPE KNVV-KUNNR, "得意先コード
WAERS TYPE KNVV-WAERS, "通貨コード
ZTERM TYPE KNVV-ZTERM, "支払条件キー
END   OF TY_KNVV.
DATA :
GT_KNVV TYPE STANDARD TABLE OF TY_KNVV,
GW_KNVV TYPE TY_KNVV.
*得意先マスタ 取引先機能
TYPES:
BEGIN OF TY_KNVP,
KUNNR TYPE KNVP-KUNNR, "得意先コード
LIFNR TYPE KNVP-LIFNR, "仕入先または債権者の勘定コード
END   OF TY_KNVP.
DATA :
GT_KNVP TYPE STANDARD TABLE OF TY_KNVP,
GW_KNVP TYPE TY_KNVP.
*規定外マスタテーブル（売上）
DATA :
GT_ZN008 TYPE STANDARD TABLE OF ZN008,
GW_ZN008 TYPE ZN008.

*---------------------------------------------------------------------*
*　選択画面
*---------------------------------------------------------------------+
SELECT-OPTIONS:
S_LIFNR FOR LFA1-LIFNR, "仕入先
S_KTOKK FOR LFA1-KTOKK. "仕入先勘定グループ
SELECTION-SCREEN SKIP 1.
SELECT-OPTIONS:
S_KUNNR FOR KNA1-KUNNR, "得意先
S_KTOKD FOR KNA1-KTOKD. "得意先勘定グループ
SELECTION-SCREEN SKIP 1.
"ダウンロードファイルパス
PARAMETERS:P_OUT(128) TYPE C LOWER CASE OBLIGATORY.
*&--------------------------------------------------------------------
*&   Event AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_OUT
*&--------------------------------------------------------------------
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_OUT.
* エラーファイル名の検索ヘルプ
PERFORM F4HELP_P_OUT USING P_OUT.
*&---------------------------------------------------------------------*
*&   Event AT SELECTION-SCREEN
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN.

START-OF-SELECTION.
*
PERFORM PGM_INIT.
PERFORM GET_DATA.
PERFORM PUT_DATA.
PERFORM F_GUI_DOWNLOAD.
*
END-OF-SELECTION.
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
FORM GET_DATA.
*仕入先情報取得
PERFORM GET_K.
*得意先情報取得
PERFORM GET_D.
*
ENDFORM.                    " GET_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_LFA1
*&---------------------------------------------------------------------*
FORM GET_LFA1.
*
REFRESH GT_LFA1.
*
CHECK NOT S_LIFNR IS INITIAL.
*
SELECT LIFNR NAME1
INTO TABLE GT_LFA1
FROM LFA1
WHERE LIFNR IN S_LIFNR
AND   KTOKK IN S_KTOKK.
*
SORT GT_LFA1 BY LIFNR.
*
ENDFORM.                                                    " GET_LFA1
*&---------------------------------------------------------------------*
*&      Form  GET_LFB1
*&---------------------------------------------------------------------*
FORM GET_LFB1..
*
REFRESH GT_LFB1.
*
CHECK NOT GT_LFA1[] IS INITIAL.
*
SELECT LIFNR ZWELS ZTERM
INTO TABLE GT_LFB1
FROM LFB1
FOR ALL ENTRIES IN GT_LFA1
WHERE LIFNR = GT_LFA1-LIFNR
AND   BUKRS = 'C001'.
*
SORT GT_LFB1 BY LIFNR.
*
ENDFORM.                                                    " GET_LFB1
*&---------------------------------------------------------------------*
*&      Form  GET_LFM1
*&---------------------------------------------------------------------*
FORM GET_LFM1.
*
REFRESH GT_LFM1.
*
CHECK NOT GT_LFB1[] IS INITIAL.
*
SELECT LIFNR WAERS ZTERM
INTO TABLE GT_LFM1
FROM LFM1
FOR ALL ENTRIES IN GT_LFB1
WHERE LIFNR = GT_LFB1-LIFNR
AND   EKORG = '1000'.
*
SORT GT_LFM1 BY LIFNR.
*
ENDFORM.                                                    " GET_LFM1
*&---------------------------------------------------------------------*
*&      Form  GET_WYT3
*&---------------------------------------------------------------------*
FORM GET_WYT3.
*
REFRESH GT_WYT3.
*
CHECK NOT GT_LFM1[] IS INITIAL.
*
SELECT LIFNR LIFN2
INTO TABLE GT_WYT3
FROM WYT3
FOR ALL ENTRIES IN GT_LFM1
WHERE LIFNR = GT_LFM1-LIFNR
AND   EKORG = '1000'
AND   PARVW = 'RS'.
*
SORT GT_WYT3 BY LIFNR.
*
ENDFORM.                                                    " GET_WYT3
*&---------------------------------------------------------------------*
*&      Form  GET_K
*&---------------------------------------------------------------------*
FORM GET_K.
*
PERFORM GET_LFA1.  "LFA1	仕入先マスタ (一般セクション)
PERFORM GET_LFB1.  "LFB1	仕入先マスタ (会社コ−ド)
PERFORM GET_LFM1.  "LFM1	仕入先マスタ購買組織データ
PERFORM GET_WYT3.  "取引先機能
PERFORM GET_ZN007. "規定外マスタテーブル（仕入）
*
ENDFORM.                    " GET_K
*&---------------------------------------------------------------------*
*&      Form  GET_D
*&---------------------------------------------------------------------*
FORM GET_D.
*
PERFORM GET_KNA1.  "得意先マスタ: 一般データ
PERFORM GET_KNB1.  "得意先マスタ（会社コード）
PERFORM GET_KNVV.  "得意先マスタ: 販売データ
PERFORM GET_KNVP.  "得意先マスタ 取引先機能
PERFORM GET_ZN008. "規定外マスタテーブル（売上）
*
ENDFORM.                    " GET_D
*&---------------------------------------------------------------------*
*&      Form  GET_ZN007
*&---------------------------------------------------------------------*
FORM GET_ZN007.
*
REFRESH GT_ZN007.
*
CHECK NOT S_LIFNR IS INITIAL.
*
SELECT *
INTO TABLE GT_ZN007
FROM ZN007
WHERE LIFNR IN S_LIFNR.
*
SORT GT_ZN007 BY LIFNR.
*
ENDFORM.                                                    " GET_ZN007
*&---------------------------------------------------------------------*
*&      Form  GET_KNA1
*&---------------------------------------------------------------------*
FORM GET_KNA1.
*
REFRESH GT_KNA1.
*
CHECK NOT S_KUNNR IS INITIAL.
*
SELECT KUNNR NAME1
INTO TABLE GT_KNA1
FROM KNA1
WHERE KUNNR IN S_KUNNR
AND   KTOKD IN S_KTOKD.
*
SORT GT_KNA1 BY KUNNR.
*
ENDFORM.                                                    " GET_KNA1
*&---------------------------------------------------------------------*
*&      Form  GET_KNB1
*&---------------------------------------------------------------------*
FORM GET_KNB1.
*
REFRESH GT_KNB1.
*
CHECK NOT GT_KNA1[] IS INITIAL.
*
SELECT KUNNR ZWELS ZTERM
INTO TABLE GT_KNB1
FROM KNB1
FOR ALL ENTRIES IN GT_KNA1
WHERE KUNNR = GT_KNA1-KUNNR
AND   BUKRS = 'C001'.
*
SORT GT_KNB1 BY KUNNR.
*
ENDFORM.                                                    " GET_KNB1
*&---------------------------------------------------------------------*
*&      Form  GET_KNVV
*&---------------------------------------------------------------------*
FORM GET_KNVV.
*
REFRESH GT_KNVV.
*
CHECK NOT GT_KNB1[] IS INITIAL.
*
SELECT KUNNR WAERS ZTERM
INTO TABLE GT_KNVV
FROM KNVV
FOR ALL ENTRIES IN GT_KNB1
WHERE KUNNR = GT_KNB1-KUNNR
AND   VKORG = '1000'
AND   VTWEG = '10'
AND   SPART = '10'.
*
SORT GT_KNVV BY KUNNR.
*
ENDFORM.                    " GET_KNVV
*&---------------------------------------------------------------------*
*&      Form  GET_KNVP
*&---------------------------------------------------------------------*
FORM GET_KNVP.
*
REFRESH GT_KNVP.
*
CHECK NOT GT_KNVV[] IS INITIAL.
*
SELECT KUNNR LIFNR
INTO TABLE GT_KNVP
FROM KNVP
FOR ALL ENTRIES IN GT_KNVV
WHERE KUNNR = GT_KNVV-KUNNR
AND   VKORG = '1000'
AND   PARVW = 'Z2'.
*
SORT GT_KNVP BY KUNNR.
*
ENDFORM.                    " GET_KNVP
*&---------------------------------------------------------------------*
*&      Form  GET_ZN008
*&---------------------------------------------------------------------*
FORM GET_ZN008.
*
REFRESH GT_ZN008.
*
CHECK NOT S_KUNNR IS INITIAL.
*
SELECT *
INTO TABLE GT_ZN008
FROM ZN008
WHERE KUNNR IN S_KUNNR.
*
SORT GT_ZN008 BY KUNNR.
*
ENDFORM.                                                    " GET_ZN008
*&---------------------------------------------------------------------*
*&      Form  PUT_DATA
*&---------------------------------------------------------------------*
FORM PUT_DATA.
REFRESH GT_REC.
*仕入先情報出力
PERFORM PUT_K.
*得意先情報出力
PERFORM PUT_D.
*
IF GT_REC[] IS INITIAL.
*対象データが存在しません
MESSAGE S400 WITH TEXT-M01.
LEAVE LIST-PROCESSING.
ELSE.
*SORT処理
*  区分 名寄先コード 取引先コード 閾値
SORT GT_REC BY KBN CODE TORICODE LOWAMT.
PERFORM PUT_DATA_REC.
ENDIF.
*
ENDFORM.                    " PUT_DATA
*&---------------------------------------------------------------------*
*&      Form  PUT_K
*&---------------------------------------------------------------------*
FORM PUT_K.
*
*仕入先情報(購買組織)をループする
*
LOOP AT GT_LFM1 INTO GW_LFM1.

READ TABLE GT_ZN007 WITH KEY LIFNR = GW_LFM1-LIFNR
INTO  GW_ZN007.
*
CHECK SY-SUBRC <> 0.
*
PERFORM LFM1_MST_EDIT.
*
ENDLOOP.
*
*規定外マスタテーブル(仕入)をループする
*
LOOP AT GT_ZN007 INTO GW_ZN007.
*仕入先情報(一般)
READ TABLE GT_LFA1 WITH KEY LIFNR = GW_ZN007-LIFNR
INTO  GW_LFA1 BINARY SEARCH.
IF SY-SUBRC <> 0.
CLEAR:GW_LFA1.
ENDIF.
*仕入先情報(取引先)
READ TABLE GT_WYT3 WITH KEY LIFNR = GW_ZN007-LIFNR
INTO  GW_WYT3 BINARY SEARCH.
IF SY-SUBRC <> 0.
CLEAR:GW_WYT3.
ENDIF.
*
PERFORM ZN007_LIFNR_EDIT.
*
ENDLOOP.
*
ENDFORM.                    " PUT_K
*&---------------------------------------------------------------------*
*&      Form  PGM_INIT
*&---------------------------------------------------------------------*
FORM PGM_INIT.
*
CLEAR:GW_ZN007_CNT, "仕入先件数
GW_ZN008_CNT. "得意先件数
*
ENDFORM.                    " PGM_INIT
*&---------------------------------------------------------------------*
*&      Form  LFM1_MST_EDIT
*&---------------------------------------------------------------------*
FORM LFM1_MST_EDIT.
*仕入先情報(一般)
READ TABLE GT_LFA1 WITH KEY LIFNR = GW_LFM1-LIFNR
INTO  GW_LFA1 BINARY SEARCH.
IF SY-SUBRC <> 0.
CLEAR:GW_LFA1.
ENDIF.
*仕入先情報(会社)
READ TABLE GT_LFB1 WITH KEY LIFNR = GW_LFM1-LIFNR
INTO  GW_LFB1 BINARY SEARCH.
IF SY-SUBRC <> 0.
CLEAR:GW_LFB1.
ENDIF.
*仕入先情報(取引先)
READ TABLE GT_WYT3 WITH KEY LIFNR = GW_LFM1-LIFNR
INTO  GW_WYT3 BINARY SEARCH.
IF SY-SUBRC <> 0.
CLEAR:GW_WYT3.
ENDIF.
*
PERFORM LFM1_LIFNR_EDIT.
*
ENDFORM.                    " LFM1_MST_EDIT
*&---------------------------------------------------------------------*
*&      Form  LFM1_LIFNR_EDIT
*&---------------------------------------------------------------------*
FORM LFM1_LIFNR_EDIT.
DATA :
L_LOWAMT TYPE ZN007-LOWAMT,
L_ZTERM  TYPE LFM1-ZTERM.
*
CLEAR:GW_REC.
GW_REC-TORICODE = GW_LFM1-LIFNR.  "取引先コード
GW_REC-CODE     = GW_WYT3-LIFN2.  "コード
GW_REC-KBN      = C_K.        "区分
GW_REC-NAME1    = GW_LFA1-NAME1.    "名称
GW_REC-WAERS    = GW_LFM1-WAERS.  "通貨コード
*
IF GW_LFB1-ZWELS = C_TZ OR
GW_LFB1-ZWELS = C_BT OR
GW_LFB1-ZWELS = C_KT.
*閾値下限
L_LOWAMT       = 0.
WRITE L_LOWAMT TO GW_REC-LOWAMT
CURRENCY GW_LFM1-WAERS.
GW_REC-BASE_ZT = '2'.             "基本取引条件
*   支払条件の置き換え
*   条件A残額は1文字目を[T]
CONCATENATE C_T
GW_LFM1-ZTERM+1(3)
INTO GW_REC-ZTERM_PZ.
*   条件B残額は[0001]に置換
GW_REC-ZTERM_SZ = C_ZTERM_0001.  "条件B残額
GW_REC-ZLSCH_Z  = C_T.            "方法残額
GW_ZN007_CNT = GW_ZN007_CNT + 1.
APPEND GW_REC TO GT_REC.

CASE GW_LFB1-ZWELS.
WHEN C_TZ. GW_REC-ZLSCH_Z  = C_Z.  "方法残額
WHEN C_BT. GW_REC-ZLSCH_Z  = C_B.  "方法残額
WHEN C_KT. GW_REC-ZLSCH_Z  = C_K.  "方法残額
ENDCASE.
GW_REC-BASE_ZT = '1'.             "基本取引条件
GW_REC-ZTERM_PZ = GW_LFM1-ZTERM.  "条件A残額
GW_REC-ZTERM_SZ = GW_LFB1-ZTERM.  "条件B残額
*閾値下限
IF GW_LFM1-WAERS = 'JPY'.
L_LOWAMT       = '2000.00'.
ELSE.
L_LOWAMT       = '200000.00'.
ENDIF.
WRITE L_LOWAMT TO GW_REC-LOWAMT
CURRENCY GW_LFM1-WAERS.
GW_ZN007_CNT = GW_ZN007_CNT + 1.
APPEND GW_REC TO GT_REC.
ELSE.
*閾値下限
L_LOWAMT       = 0.
WRITE L_LOWAMT TO GW_REC-LOWAMT
CURRENCY GW_LFM1-WAERS.
GW_REC-BASE_ZT  = '1'.            "基本取引条件
GW_REC-ZTERM_PZ = GW_LFM1-ZTERM.  "条件A残額
GW_REC-ZTERM_SZ = GW_LFB1-ZTERM.  "条件B残額
GW_REC-ZLSCH_Z  = GW_LFB1-ZWELS.  "方法残額
GW_ZN007_CNT = GW_ZN007_CNT + 1.
APPEND GW_REC TO GT_REC.
ENDIF.
*
*  GW_REC-PER1         "分割（%）１
*  GW_REC-PAY1         "分割(金額)１
*  GW_REC-ZTERM_P1     "条件A１
*  GW_REC-ZTERM_S1     "条件B１
*  GW_REC-ZLSCH_1      "方法1
*  GW_REC-PER2         "分割（%）２
*  GW_REC-PAY2         "分割(金額)２
*  GW_REC-ZTERM_P2     "条件A2
*  GW_REC-ZTERM_S2     "条件B2
*  GW_REC-ZLSCH_2      "方法2
*  GW_REC-PER3         "分割（%）3
*  GW_REC-PAY3         "分割(金額)3
*  GW_REC-ZTERM_P3     "条件A3
*  GW_REC-ZTERM_S3     "条件B3
*  GW_REC-ZLSCH_3      "方法3
*  GW_REC-PER4         "分割（%）4
*  GW_REC-PAY4         "分割(金額)4
*  GW_REC-ZTERM_P4     "条件A4
*  GW_REC-ZTERM_S4     "条件B4
*  GW_REC-ZLSCH_4      "方法4
*  GW_REC-ZNTCH        "手形通信費
*  GW_REC-MEMO         "コメント

*
ENDFORM.                    " LFM1_LIFNR_EDIT
*&---------------------------------------------------------------------*
*&      Form  ZN007_LIFNR_EDIT
*&---------------------------------------------------------------------*
FORM ZN007_LIFNR_EDIT.
*
CLEAR:GW_REC.
GW_REC-TORICODE = GW_ZN007-LIFNR.  "取引先コード
GW_REC-CODE     = GW_WYT3-LIFN2.   "コード
GW_REC-KBN      = C_K.             "区分
GW_REC-NAME1    = GW_LFA1-NAME1.    "名称
GW_REC-WAERS    = GW_ZN007-WAERS.  "通貨コード
*閾値下限
WRITE GW_ZN007-LOWAMT TO GW_REC-LOWAMT
CURRENCY GW_ZN007-WAERS.
GW_REC-BASE_ZT = GW_ZN007-BASE_ZT.    "基本取引条件
GW_REC-ZTERM_PZ = GW_ZN007-ZTERM_PZ.  "条件A残額
GW_REC-ZTERM_SZ = GW_ZN007-ZTERM_SZ.  "条件B残額
GW_REC-ZLSCH_Z  = GW_ZN007-ZLSCH_Z.   "方法残額
GW_REC-PER1     = GW_ZN007-PER1.      "分割（%）１
*分割(金額)１
WRITE GW_ZN007-PAY1 TO GW_REC-PAY1
CURRENCY GW_ZN007-WAERS.
GW_REC-ZTERM_P1 = GW_ZN007-ZTERM_P1.  "条件A１
GW_REC-ZTERM_S1 = GW_ZN007-ZTERM_S1.  "条件B１
GW_REC-ZLSCH_1  = GW_ZN007-ZLSCH_1.                       "方法1
GW_REC-PER2     = GW_ZN007-PER2.      "分割（%）２
*分割(金額)２
WRITE GW_ZN007-PAY2 TO GW_REC-PAY2
CURRENCY GW_ZN007-WAERS.
GW_REC-ZTERM_P2 = GW_ZN007-ZTERM_P2.                      "条件A2
GW_REC-ZTERM_S2 = GW_ZN007-ZTERM_S2.                      "条件B2
GW_REC-ZLSCH_2  = GW_ZN007-ZLSCH_2.                       "方法2
GW_REC-PER3     = GW_ZN007-PER3.                          "分割（%）3
*分割(金額)3
WRITE GW_ZN007-PAY3 TO GW_REC-PAY3
CURRENCY GW_ZN007-WAERS.
GW_REC-ZTERM_P3 = GW_ZN007-ZTERM_P3.                      "条件A3
GW_REC-ZTERM_S3 = GW_ZN007-ZTERM_S3.                      "条件B3
GW_REC-ZLSCH_3  = GW_ZN007-ZLSCH_3.                       "方法3
GW_REC-PER4     = GW_ZN007-PER4.                          "分割（%）4
*分割(金額)4
WRITE GW_ZN007-PAY4 TO GW_REC-PAY4
CURRENCY GW_ZN007-WAERS.
GW_REC-ZTERM_P4 = GW_ZN007-ZTERM_P4.                      "条件A4
GW_REC-ZTERM_S4 = GW_ZN007-ZTERM_S4.                      "条件B4
GW_REC-ZLSCH_4  = GW_ZN007-ZLSCH_4.                       "方法4
*手形通信費
WRITE GW_ZN007-ZNTCH TO GW_REC-ZNTCH
CURRENCY GW_ZN007-WAERS.
GW_REC-MEMO     = GW_ZN007-MEMO.      "コメント
*
GW_ZN007_CNT = GW_ZN007_CNT + 1.
APPEND GW_REC TO GT_REC.
*
ENDFORM.                    " ZN007_LIFNR_EDIT
*&---------------------------------------------------------------------*
*&      Form  PUT_D
*&---------------------------------------------------------------------*
FORM PUT_D.
*
*得意先情報(販売組織)をループする
*
LOOP AT GT_KNVV INTO GW_KNVV.

READ TABLE GT_ZN008 WITH KEY KUNNR = GW_KNVV-KUNNR
INTO  GW_ZN008.
*
CHECK SY-SUBRC <> 0.
*
PERFORM KNVV_MST_EDIT.
*
ENDLOOP.
*
*規定外マスタテーブル(売上)をループする
*
LOOP AT GT_ZN008 INTO GW_ZN008.
*得意先情報(一般)
READ TABLE GT_KNA1 WITH KEY KUNNR = GW_ZN008-KUNNR
INTO  GW_KNA1 BINARY SEARCH.
IF SY-SUBRC <> 0.
CLEAR:GW_KNA1.
ENDIF.
*得意先情報(取引先)
READ TABLE GT_KNVP WITH KEY KUNNR = GW_ZN008-KUNNR
INTO  GW_KNVP BINARY SEARCH.
IF SY-SUBRC <> 0.
CLEAR:GW_KNVP.
ENDIF.
*
PERFORM ZN008_KUNNR_EDIT.
*
ENDLOOP.
*
ENDFORM.                    " PUT_D
*&---------------------------------------------------------------------*
*&      Form  KNVV_MST_EDIT
*&---------------------------------------------------------------------*
FORM KNVV_MST_EDIT.
*
*得意先情報(一般)
READ TABLE GT_KNA1 WITH KEY KUNNR = GW_KNVV-KUNNR
INTO  GW_KNA1 BINARY SEARCH.
IF SY-SUBRC <> 0.
CLEAR:GW_KNA1.
ENDIF.
*得意先情報(会社)
READ TABLE GT_KNB1 WITH KEY KUNNR = GW_KNVV-KUNNR
INTO  GW_KNB1 BINARY SEARCH.
IF SY-SUBRC <> 0.
CLEAR:GW_KNB1.
ENDIF.
*得意先情報(取引先)
READ TABLE GT_KNVP WITH KEY KUNNR = GW_KNVV-KUNNR
INTO  GW_KNVP BINARY SEARCH.
IF SY-SUBRC <> 0.
CLEAR:GW_KNVP.
ENDIF.
*
PERFORM KNVV_KUNNR_EDIT.
*
ENDFORM.                    " KNVV_MST_EDIT
*&---------------------------------------------------------------------*
*&      Form  ZN008_KUNNR_EDIT
*&---------------------------------------------------------------------*
FORM ZN008_KUNNR_EDIT.
*
CLEAR:GW_REC.
GW_REC-TORICODE = GW_ZN008-KUNNR.   "取引先コード
GW_REC-CODE     = GW_KNVP-LIFNR.    "コード
GW_REC-KBN      = C_D.              "区分
GW_REC-NAME1    = GW_KNA1-NAME1.    "名称
GW_REC-WAERS    = GW_ZN008-WAERS.   "通貨コード
*閾値下限
WRITE GW_ZN008-LOWAMT TO GW_REC-LOWAMT
CURRENCY GW_ZN008-WAERS.
GW_REC-BASE_ZT  = GW_ZN008-BASE_ZT.   "基本取引条件
GW_REC-ZTERM_PZ = GW_ZN008-ZTERM_PZ.  "条件A残額
GW_REC-ZTERM_SZ = GW_ZN008-ZTERM_SZ.  "条件B残額
GW_REC-ZLSCH_Z  = GW_ZN008-ZLSCH_Z.   "方法残額
GW_REC-PER1     = GW_ZN008-PER1.      "分割（%）１
*分割(金額)１
WRITE GW_ZN008-PAY1 TO GW_REC-PAY1
CURRENCY GW_ZN008-WAERS.
GW_REC-ZTERM_P1 = GW_ZN008-ZTERM_P1.  "条件A１
GW_REC-ZTERM_S1 = GW_ZN008-ZTERM_S1.  "条件B１
GW_REC-ZLSCH_1  = GW_ZN008-ZLSCH_1.                       "方法1
GW_REC-PER2     = GW_ZN008-PER2.      "分割（%）２
*分割(金額)２
WRITE GW_ZN008-PAY2 TO GW_REC-PAY2
CURRENCY GW_ZN008-WAERS.
GW_REC-ZTERM_P2 = GW_ZN008-ZTERM_P2.                      "条件A2
GW_REC-ZTERM_S2 = GW_ZN008-ZTERM_S2.                      "条件B2
GW_REC-ZLSCH_2  = GW_ZN008-ZLSCH_2.                       "方法2
GW_REC-PER3     = GW_ZN008-PER3.                          "分割（%）3
*分割(金額)3
WRITE GW_ZN008-PAY3 TO GW_REC-PAY3
CURRENCY GW_ZN008-WAERS.
GW_REC-ZTERM_P3 = GW_ZN008-ZTERM_P3.                      "条件A3
GW_REC-ZTERM_S3 = GW_ZN008-ZTERM_S3.                      "条件B3
GW_REC-ZLSCH_3  = GW_ZN008-ZLSCH_3.                       "方法3
GW_REC-PER4     = GW_ZN008-PER4.                          "分割（%）4
*分割(金額)4
WRITE GW_ZN008-PAY4 TO GW_REC-PAY4
CURRENCY GW_ZN008-WAERS.
GW_REC-ZTERM_P4 = GW_ZN008-ZTERM_P4.                      "条件A4
GW_REC-ZTERM_S4 = GW_ZN008-ZTERM_S4.                      "条件B4
GW_REC-ZLSCH_4  = GW_ZN008-ZLSCH_4.                       "方法4
*手形通信費
WRITE GW_ZN008-ZNTCH TO GW_REC-ZNTCH
CURRENCY GW_ZN008-WAERS.
GW_REC-MEMO     = GW_ZN008-MEMO.      "コメント
*
GW_ZN008_CNT = GW_ZN008_CNT + 1.
APPEND GW_REC TO GT_REC.
*
ENDFORM.                    " ZN008_KUNNR_EDIT
*&---------------------------------------------------------------------*
*&      Form  KNVV_KUNNR_EDIT
*&---------------------------------------------------------------------*
FORM KNVV_KUNNR_EDIT.
DATA :
L_LOWAMT TYPE ZN008-LOWAMT.
*
CLEAR:GW_REC.
GW_REC-TORICODE = GW_KNVV-KUNNR.  "取引先コード
GW_REC-CODE     = GW_KNVP-LIFNR.  "コード
GW_REC-KBN      = C_D.        "区分
GW_REC-NAME1    = GW_KNA1-NAME1.    "名称
GW_REC-WAERS    = GW_KNVV-WAERS.  "通貨コード
*
*閾値下限
L_LOWAMT       = 0.
WRITE L_LOWAMT TO GW_REC-LOWAMT
CURRENCY GW_KNVV-WAERS.
GW_REC-BASE_ZT = '1'.             "基本取引条件
GW_REC-ZTERM_PZ = GW_KNVV-ZTERM.  "条件A残額
GW_REC-ZTERM_SZ = GW_KNB1-ZTERM.  "条件B残額
GW_REC-ZLSCH_Z  = GW_KNB1-ZWELS.  "方法残額
GW_ZN008_CNT = GW_ZN008_CNT + 1.
APPEND GW_REC TO GT_REC.
*
*  GW_REC-PER1         "分割（%）１
*  GW_REC-PAY1         "分割(金額)１
*  GW_REC-ZTERM_P1     "条件A１
*  GW_REC-ZTERM_S1     "条件B１
*  GW_REC-ZLSCH_1      "方法1
*  GW_REC-PER2         "分割（%）２
*  GW_REC-PAY2         "分割(金額)２
*  GW_REC-ZTERM_P2     "条件A2
*  GW_REC-ZTERM_S2     "条件B2
*  GW_REC-ZLSCH_2      "方法2
*  GW_REC-PER3         "分割（%）3
*  GW_REC-PAY3         "分割(金額)3
*  GW_REC-ZTERM_P3     "条件A3
*  GW_REC-ZTERM_S3     "条件B3
*  GW_REC-ZLSCH_3      "方法3
*  GW_REC-PER4         "分割（%）4
*  GW_REC-PAY4         "分割(金額)4
*  GW_REC-ZTERM_P4     "条件A4
*  GW_REC-ZTERM_S4     "条件B4
*  GW_REC-ZLSCH_4      "方法4
*  GW_REC-ZNTCH        "手形通信費
*  GW_REC-MEMO         "コメント

ENDFORM.                    " KNVV_KUNNR_EDIT
*&---------------------------------------------------------------------*
*&      Form  F_GUI_DOWNLOAD
*&---------------------------------------------------------------------*
FORM F_GUI_DOWNLOAD.
DATA:
L_FILENAME TYPE STRING.
* Add ES-UP 2012/10/25 -->
DATA L_CODEPAGE TYPE ABAP_ENCODING.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
* Add ES-UP 2012/10/25 <--
L_FILENAME = P_OUT.
*
CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
*     BIN_FILESIZE                  =
FILENAME                      = L_FILENAME
*     FILETYPE                      = 'ASC'
*     APPEND                        = ' '
*     WRITE_FIELD_SEPARATOR         = ' '
*     HEADER                        = '00'
*     TRUNC_TRAILING_BLANKS         = ' '
*     WRITE_LF                      = 'X'
*     COL_SELECT                    = ' '
*     COL_SELECT_MASK               = ' '
* Add ES-UP 2012/10/25 -->
CODEPAGE                  = L_CODEPAGE
* Add ES-UP 2012/10/25 <--
*   IMPORTING
*     FILELENGTH                    =
TABLES
DATA_TAB                      = GT_DATA
EXCEPTIONS
FILE_WRITE_ERROR              = 1
NO_BATCH                      = 2
GUI_REFUSE_FILETRANSFER       = 3
INVALID_TYPE                  = 4
NO_AUTHORITY                  = 5
UNKNOWN_ERROR                 = 6
HEADER_NOT_ALLOWED            = 7
SEPARATOR_NOT_ALLOWED         = 8
FILESIZE_NOT_ALLOWED          = 9
HEADER_TOO_LONG               = 10
DP_ERROR_CREATE               = 11
DP_ERROR_SEND                 = 12
DP_ERROR_WRITE                = 13
UNKNOWN_DP_ERROR              = 14
ACCESS_DENIED                 = 15
DP_OUT_OF_MEMORY              = 16
DISK_FULL                     = 17
DP_TIMEOUT                    = 18
FILE_NOT_FOUND                = 19
DATAPROVIDER_EXCEPTION        = 20
CONTROL_FLUSH_ERROR           = 21
OTHERS                        = 22
.
IF SY-SUBRC <> 0.
*ダウンローﾄﾞに失敗しました
MESSAGE S403 WITH TEXT-M02.
ELSE.
*仕入先：？件
MESSAGE I403 WITH TEXT-M04 GW_ZN007_CNT TEXT-M07.
*得意先：？件
MESSAGE I403 WITH TEXT-M05 GW_ZN008_CNT TEXT-M07.
*合計：？件
GW_ALL_CNT = GW_ZN007_CNT + GW_ZN008_CNT.
MESSAGE I403 WITH TEXT-M06 GW_ALL_CNT TEXT-M07.
*ダウンロードに成功しました
MESSAGE S403 WITH TEXT-M03.
ENDIF.

*
ENDFORM.                    " F_GUI_DOWNLOAD
*&---------------------------------------------------------------------*
*&      Form  PUT_DATA_REC
*&---------------------------------------------------------------------*
FORM PUT_DATA_REC.
*
REFRESH GT_DATA.
*
LOOP AT GT_REC INTO GW_REC.
CLEAR:GW_DATA.
*取引先コード： ALPHA 変換 Exit:  内部 -> 外部
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = GW_REC-TORICODE
IMPORTING
OUTPUT = GW_REC-TORICODE.
*コード：ALPHA 変換 Exit:  内部 -> 外部
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = GW_REC-CODE
IMPORTING
OUTPUT = GW_REC-CODE.

GW_DATA-rec = GW_REC-NAME1.
*
*    CONCATENATE
*          GW_REC-TORICODE "取引先コード
*          GW_REC-CODE     "コード
*          GW_REC-KBN      "区分
*          GW_REC-NAME1    "名称
*          GW_REC-WAERS    "通貨コード
*
*          GW_REC-LOWAMT   "閾値下限
*          GW_REC-BASE_ZT  "基本取引条件
*          GW_REC-ZTERM_PZ "条件A残額
*          GW_REC-ZTERM_SZ "条件B残額
*          GW_REC-ZLSCH_Z  "方法残額
*          GW_REC-PER1     "分割（%）１
*          GW_REC-PAY1     "分割(金額)１
*          GW_REC-ZTERM_P1 "条件A１
*          GW_REC-ZTERM_S1 "条件B１
*          GW_REC-ZLSCH_1                                    "方法1
*          GW_REC-PER2     "分割（%）２
*          GW_REC-PAY2     "分割(金額)２
*          GW_REC-ZTERM_P2                                   "条件A2
*          GW_REC-ZTERM_S2                                   "条件B2
*          GW_REC-ZLSCH_2                                    "方法2
*          GW_REC-PER3                                       "分割（%）3
*          GW_REC-PAY3     "分割(金額)3
*          GW_REC-ZTERM_P3                                   "条件A3
*          GW_REC-ZTERM_S3                                   "条件B3
*          GW_REC-ZLSCH_3                                    "方法3
*          GW_REC-PER4                                       "分割（%）4
*          GW_REC-PAY4     "分割(金額)4
*          GW_REC-ZTERM_P4                                   "条件A4
*          GW_REC-ZTERM_S4                                   "条件B4
*          GW_REC-ZLSCH_4                                    "方法4
*          GW_REC-ZNTCH    "手形通信費
*          GW_REC-MEMO     "コメント
* Mod ES-UP 2012/10/15 -->
*          INTO  GW_DATA
*          SEPARATED BY C_TAB.
*          INTO  GW_DATA-rec.
*          SEPARATED BY CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.
* Mod ES-UP 2012/10/15 <--
*
* Mod ES-UP 2012/10/25 -->
*    CONDENSE GW_DATA NO-GAPS.
CONDENSE GW_DATA-rec NO-GAPS.
* Mod ES-UP 2012/10/25 <--
APPEND  GW_DATA TO GT_DATA.
*
ENDLOOP.
*
ENDFORM.                    " PUT_DATA_REC
*&---------------------------------------------------------------------*
*&      Form  F4HELP_P_OUT
*&---------------------------------------------------------------------*
FORM F4HELP_P_OUT USING    L_OUT.
*
DATA: L_IT_FNAME     TYPE FILETABLE,
L_SUBRC        TYPE I,
INIT_DIRECTORY TYPE STRING,
WINDOW_TITLE   TYPE STRING,
FILE_FILTER    TYPE STRING,
L_PATH         TYPE STRING.

FILE_FILTER = '*.*'.
L_PATH =  'C:\*.*'.
REFRESH : L_IT_FNAME.
MOVE 'C:\' TO INIT_DIRECTORY.
CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
EXPORTING  WINDOW_TITLE            =  WINDOW_TITLE
DEFAULT_FILENAME        =  L_PATH
FILE_FILTER             =  FILE_FILTER
INITIAL_DIRECTORY       =  INIT_DIRECTORY
MULTISELECTION          =  ABAP_FALSE
CHANGING   FILE_TABLE              =  L_IT_FNAME
RC                      =  L_SUBRC
EXCEPTIONS FILE_OPEN_DIALOG_FAILED =  1
CNTL_ERROR              =  2
ERROR_NO_GUI            =  3
OTHERS                  =  4
.
IF SY-SUBRC <> 0.
ELSE.
IF L_SUBRC = 1.
READ TABLE L_IT_FNAME INTO L_OUT INDEX 1.
ENDIF.
ENDIF.
*
ENDFORM.                    " F4HELP_P_OUT
