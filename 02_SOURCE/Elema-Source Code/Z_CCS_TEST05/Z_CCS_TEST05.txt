*&---------------------------------------------------------------------*
*& Report  Z_CCS_TEST05
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  Z_CCS_TEST05.


*DATA:
*       li_qqq  TYPE i.
*
*li_qqq = 123456.
*WRITE li_qqq.

*DATA:
*  a TYPE EKPO-EBELP,
*  b TYPE ZTEGSDT203-POSNR VALUE '000006'.
*
*a = b.
*
*WRITE a.

*DO 5 TIMES.
*    CALL FUNCTION 'ENQUEUE_EZZTEGSDT203'
*      EXPORTING
*        MODE_ZTEGSDT203 = 'X'
*        EBELN           = '4503199031'
*        EBELP           = '10'
*      EXCEPTIONS
*        FOREIGN_LOCK    = 1
*        SYSTEM_FAILURE  = 2
*        OTHERS          = 3.
*    IF SY-SUBRC <> 0.
*
***     ロックの解除
**      PERFORM UNLOCK_ZTEGSDT203 USING LTD_EKKO.
*
*      MESSAGE ID SY-MSGID TYPE 'E' NUMBER SY-MSGNO
*                 WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*
*    ENDIF.
*ENDDO.
*BREAK-POINT.
*WRITE 'XXX'.


*PARAMETERS:
*  p_per  TYPE SDPARTNERLIST-PARTNER.
*
*
*TYPES: BEGIN OF t_LIFNR,
*LIFNR TYPE LFA1-LIFNR,
*BUKRS TYPE EKKO-BUKRS,
*WKURS TYPE EKKO-WKURS,
*END OF t_LIFNR.
*
*DATA: TD_LIFNR TYPE STANDARD TABLE OF t_LIFNR,
*      TH_LIFNR TYPE t_LIFNR.
*
*
*FIELD-SYMBOLS:
*  <fs_LIFNR> TYPE t_LIFNR.
*
*SELECT LIFNR  BUKRS WKURS FROM EKKO
*INTO TABLE TD_LIFNR
*UP TO 10 ROWS.
**ENDSELECT.
*
*SORT TD_LIFNR ASCENDING BY LIFNR.
*
*LOOP AT TD_LIFNR INTO TH_LIFNR.
*  AT NEW LIFNR.
*    WRITE:/10 'At new',TH_LIFNR-LIFNR.
*    WRITE:/11 'At new','The next is new lifnr.'.
*  ENDAT.
*
*  WRITE: / 'Loop', TH_LIFNR-LIFNR,
*         /6 TH_LIFNR-BUKRS.
*
*  at END OF LIFNR.
*    WRITE :/10'At end',TH_LIFNR-BUKRS,
*           /11 'At end',TH_LIFNR-WKURS.
*  ENDAT.
*
*ENDLOOP.
*
*WRITE:/ '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++'.
*
*LOOP AT TD_LIFNR ASSIGNING <fs_LIFNR>.
*
*  AT NEW LIFNR.
*    WRITE:/10 'At new',<fs_LIFNR>-LIFNR.
*  ENDAT.
*
*  WRITE: / 'Loop', <fs_LIFNR>-LIFNR,
*         /6 <fs_LIFNR>-BUKRS.
*
*  at END OF LIFNR.
*    WRITE :/10'At end',<fs_LIFNR>-BUKRS,
*           /11 'At end',<fs_LIFNR>-WKURS.
*  ENDAT.
*
*
*ENDLOOP.

*DATA:
*  lst_ZTEGSDT206 TYPE ZTEGSDT206.
*
*PARAMETERS:
*  p_char  TYPE char40 LOWER CASE,
*  p_text  TYPE text100.
*
*lst_ZTEGSDT206-KDAUF       = 'KDAUF1'.
*lst_ZTEGSDT206-MBLNR_OUTB  = 'MBLNR_OUTB'.
*lst_ZTEGSDT206-MJAHR_OUTB  = 'MJAHR_OUTB'.
*lst_ZTEGSDT206-EBELN  = 'EBELN1'.
*lst_ZTEGSDT206-MBLNR_INB  = 'MBLNR_INB'.
*lst_ZTEGSDT206-MJAHR_INB  = 'MJAHR_INB'.
*lst_ZTEGSDT206-MSGTX       = p_char.
*
*insert ZTEGSDT206 FROM lst_ZTEGSDT206.
*
*lst_ZTEGSDT206-KDAUF       = 'KDAUF2'.
*lst_ZTEGSDT206-MSGTX       = p_text.
*lst_ZTEGSDT206-EBELN  = 'EBELN2'.
*insert ZTEGSDT206 FROM lst_ZTEGSDT206.
*
*WRITE 'OK'.




*  CALL FUNCTION 'ENQUEUE_EZZTEGSDT206'
*    EXPORTING
*      MODE_ZTEGSDT206 = 'E'
*      KDAUF           = 'KDAUF1'
*      MBLNR_OUTB      = 'MBLNR_OUTB'
*      MJAHR_OUTB      = 0000
*    EXCEPTIONS
*      FOREIGN_LOCK    = 1
*      SYSTEM_FAILURE  = 2
*      OTHERS          = 3.
*
*  IF SY-SUBRC = 0.
*
*    WRITE 'KDAUF1'.
*
*  ENDIF.
*
*  CALL FUNCTION 'ENQUEUE_EZZTEGSDT206'
*    EXPORTING
*      MODE_ZTEGSDT206 = 'E'
*      EBELN           = 'EBELN1'
*      MBLNR_INB       = 'MBLNR_INB'
*      MJAHR_INB       = 0000
*    EXCEPTIONS
*      FOREIGN_LOCK    = 1
*      SYSTEM_FAILURE  = 2
*      OTHERS          = 3.
*
*  IF SY-SUBRC = 0.
*
*    WRITE:/ 'KDAUF2'.
*
*  ELSE.
*
*    WRITE:/ 'lock   xxx'.
*
*  ENDIF.

*
*        SET PARAMETER ID: 'AUN' FIELD '4679916'.
*
*        CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.

*DATA:
*  lst_xxx  TYPE ZTEGMMT012,
*  lc_ccc  TYPE char26,
*  lc_doc  TYPE char26,
*  lc_out  TYPE BAPICURX-BAPICURX,
*  lc_ch   TYPE char30.
*
*lst_xxx-Z_OUTPUT_MODE  = '1111'.
*lst_xxx-EBELN          = '11113'.
*lst_xxx-AEDAT          = '12'.
*lst_xxx-EBELP          = '13'.
*lst_xxx-Z_NETPR        = '9999999.123456'.
**lst_xxx-Z_WAERS_NETPR        = 'JPY'.
*lst_xxx-Z_WAERS_NETPR        = 'USD'.
**lst_xxx-Z_WAERS_NETPR        = 'RMB'.
*
**INSERT ZTEGMMT012 FROM lst_xxx.
*
**  CALL FUNCTION 'CURRENCY_AMOUNT_SAP_TO_IDOC'
**    EXPORTING
**      CURRENCY          = lst_xxx-Z_WAERS_NETPR
**      SAP_AMOUNT        = lst_xxx-Z_NETPR
**   IMPORTING
**     IDOC_AMOUNT       = lc_doc
**            .
*
*      CALL FUNCTION 'BAPI_CURRENCY_CONV_TO_EXTERN_9'
*        EXPORTING
*          CURRENCY        = lst_xxx-Z_WAERS_NETPR
*          AMOUNT_INTERNAL = lst_xxx-Z_NETPR
*        IMPORTING
*          AMOUNT_EXTERNAL = lc_out.
*
**  lc_ch = lc_out.
*  WRITE lc_out to lc_ch DECIMALS 6.
*
*WRITE lc_out.
*WRITE / lc_ch.
*
*
**WRITE lst_xxx-Z_NETPR to lc_ccc
**      CURRENCY lst_xxx-Z_WAERS_NETPR
**      DECIMALS 6.
**WRITE lc_ccc.
**WRITE :/ lst_xxx-Z_NETPR CURRENCY lst_xxx-Z_WAERS_NETPR.

*TYPES:
** ファイル読込用構造
*  BEGIN OF T_S_FILE,
**      str TYPE string,
*    EBELN         TYPE EBELN,       "購買伝票番号
*    EBELP         TYPE EBELP,       "購買伝票の明細番号
*    BLDAT(08)     TYPE C,           "伝票日付
*    BUDAT(08)     TYPE C,           "転記日付
*    ERFMG(14)     TYPE C,           "数量
*    INSMK(1)      TYPE C,           "在庫タイプ
*    LFSNR(16)     TYPE C,           "納品書
**   insert 2012/6/22 H.JO DMW4139{
*    NETPR(12)     TYPE C,           "正味価格
** } insert 2012/6/22 H.JO DMW4139
*  END   OF T_S_FILE,
*  T_I_FILE        TYPE TABLE OF T_S_FILE.  "内部テーブル定義
*DATA:
*  DATA_TAB TYPE T_I_FILE.
*
*CALL FUNCTION 'GUI_UPLOAD'
*  EXPORTING
*    filename                      =
*                    'C:\Users\huashi\Desktop\ZM013200.txt'
**   FILETYPE                      = 'ASC'
*   HAS_FIELD_SEPARATOR           = 'X'
**   HEADER_LENGTH                 = 0
**   READ_BY_LINE                  = 'X'
**   DAT_MODE                      = ' '
*   CODEPAGE                      = '4110'
**   IGNORE_CERR                   = ABAP_TRUE
**   REPLACEMENT                   = '#'
**   CHECK_BOM                     = ' '
**   VIRUS_SCAN_PROFILE            =
**   NO_AUTH_CHECK                 = ' '
** IMPORTING
**   FILELENGTH                    =
**   HEADER                        =
*  tables
*    data_tab                      = DATA_TAB
* EXCEPTIONS
*   FILE_OPEN_ERROR               = 1
*   FILE_READ_ERROR               = 2
*   NO_BATCH                      = 3
*   GUI_REFUSE_FILETRANSFER       = 4
*   INVALID_TYPE                  = 5
*   NO_AUTHORITY                  = 6
*   UNKNOWN_ERROR                 = 7
*   BAD_DATA_FORMAT               = 8
*   HEADER_NOT_ALLOWED            = 9
*   SEPARATOR_NOT_ALLOWED         = 10
*   HEADER_TOO_LONG               = 11
*   UNKNOWN_DP_ERROR              = 12
*   ACCESS_DENIED                 = 13
*   DP_OUT_OF_MEMORY              = 14
*   DISK_FULL                     = 15
*   DP_TIMEOUT                    = 16
*   OTHERS                        = 17
*          .
*IF sy-subrc <> 0.
** Implement suitable error handling here
*ENDIF.

*DATA:
*  lw_dec  TYPE DEC20_2,
*  lw_curr TYPE /CBAD/BILLED,
*  lw_c1  TYPE char26,
*  lw_c2  TYPE char26.
*
*lw_dec = '112222221.12'.
*lw_curr = lw_dec.
*lw_c1 = lw_dec.
*lw_c2 = lw_curr.
*
*WRITE lw_dec.
*WRITE / lw_curr.
*WRITE / lw_c1.
*WRITE / lw_c2.

*DATA:
*      lw_c  TYPE n LENGTH 5.
*
*lw_c = 12340.
*
*WRITE lw_c USING EDIT MASK 'RR____' RIGHT-JUSTIFIED.
*WRITE / lw_c USING EDIT MASK 'LL____' LEFT-JUSTIFIED.
*
*WRITE / lw_c USING EDIT MASK 'LL________' RIGHT-JUSTIFIED.
*WRITE / lw_c USING EDIT MASK 'LL________' LEFT-JUSTIFIED.

**-- 入力ファイルデータ格納用
*TYPES:BEGIN OF T_INFILE,
*      MATNR      TYPE MARC-MATNR, "品目コード
*      WERKS_OLD  TYPE MARC-WERKS, "プラント
*      WERKS_NEW  TYPE MARC-WERKS, "プラント（新）
*      EKGRP      TYPE MARC-EKGRP, "購買グループ
*      DUMMY(2)   TYPE C,          "末尾ゴミ対処
*      END OF  T_INFILE.
*
*constants: W_TAB type string value CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.
*
*DATA:GT_INFILE TYPE STANDARD TABLE OF T_INFILE,
*     GW_INFILE TYPE T_INFILE.
*
*
*PARAMETERS : FNAMEIN LIKE RLGRAP-FILENAME.  "入力ファイル
*
*START-OF-SELECTION.
*
*  DATA : L_LINE(100) TYPE C .
*
*  OPEN DATASET FNAMEIN FOR INPUT
*  IN TEXT MODE ENCODING UTF-8
*    IGNORING CONVERSION ERRORS.
*
*  IF SY-SUBRC NE 0 .
*    MESSAGE 'NG' TYPE 'S'.
*    STOP .
*  ENDIF .
*
*  DO .
*    READ DATASET FNAMEIN INTO L_LINE .
*    IF  SY-SUBRC = 0 .
*      CLEAR:GW_INFILE.
*      SPLIT L_LINE AT W_TAB INTO
*            GW_INFILE-MATNR
*            GW_INFILE-WERKS_OLD
*            GW_INFILE-WERKS_NEW
*            GW_INFILE-EKGRP
*            GW_INFILE-DUMMY.
*
*      CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
*        EXPORTING
*          INPUT              = GW_INFILE-MATNR
*        IMPORTING
*          OUTPUT             = GW_INFILE-MATNR
*                .
*
*      APPEND GW_INFILE TO GT_INFILE.
*    ELSE.
*      EXIT .
*    ENDIF .
*    CLEAR : L_LINE .
*  ENDDO .
*
*  CLOSE DATASET FNAMEIN .

DATA:
LDF_DATA  TYPE STRING.
DATA:BEGIN OF TAB OCCURS 0,
KSCHL LIKE NAST-KSCHL,
LFART LIKE KOMB-LFART,
VSTEL LIKE KOMB-VSTEL,
KUNNR LIKE KNA1-KUNNR,
PARVW LIKE NAST-PARVW,
NACHA LIKE NAST-NACHA,
VSZTP LIKE NACH-VSZTP,
SPRAS LIKE NAST-SPRAS,
LDEST(30) TYPE C,
FLAG(1),
END OF TAB.

PARAMETERS : P_FILENM LIKE RLGRAP-FILENAME.  "入力ファイル

*  OPEN DATASET P_FILENM FOR INPUT
*                            IN TEXT MODE
*                            WITH SMART LINEFEED
*                            ENCODING UTF-8 IGNORING CONVERSION ERRORS
*                            SKIPPING BYTE-ORDER MARK.
*  IF sy-subrc <> 0.
*
*  ELSE.
** 入力ファイル読込
*  DO.
*    READ DATASET P_FILENM INTO LDF_DATA.
*    IF SY-SUBRC <> 0.
*      EXIT.
*    ENDIF.
*    SPLIT LDF_DATA AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
*     INTO TAB-KSCHL
*          TAB-LFART
*          TAB-VSTEL
*          TAB-KUNNR
*          TAB-PARVW
*          TAB-NACHA
*          TAB-VSZTP
*          TAB-SPRAS
*          TAB-LDEST.
*
*  ENDDO.
*  ENDIF.

*  CLOSE DATASET P_FILENM.

*  IF CL_ABAP_FILE_UTILITIES=>CHECK_FOR_BOM( P_FILENM )
*    = CL_ABAP_FILE_UTILITIES=>BOM_UTF8.
*
*    OPEN DATASET P_FILENM  FOR INPUT
*       IN TEXT MODE ENCODING UTF-8 AT POSITION 3
*      IGNORING CONVERSION ERRORS.
*
*  ELSE.
*
*    OPEN DATASET P_FILENM FOR INPUT
*    IN TEXT MODE ENCODING UTF-8
*      IGNORING CONVERSION ERRORS.
*  ENDIF.

DATA:
ENCODING  TYPE SYCHAR01,
BOM  TYPE SYCHAR01.

*OPEN DATASET P_FILENM FOR INPUT
*IN TEXT MODE ENCODING DEFAULT
*  IGNORING CONVERSION ERRORS.
*
*
*DO.
*  READ DATASET P_FILENM INTO LDF_DATA.
*  IF SY-SUBRC <> 0.
*    EXIT.
*  ENDIF.
*  SPLIT LDF_DATA AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
*   INTO TAB-KSCHL
*        TAB-LFART
*        TAB-VSTEL
*        TAB-KUNNR
*        TAB-PARVW
*        TAB-NACHA
*        TAB-VSZTP
*        TAB-SPRAS
*        TAB-LDEST.
*
*ENDDO.
*
*CLOSE DATASET P_FILENM.


****************************************
*TRY.
*    CALL METHOD CL_ABAP_FILE_UTILITIES=>CHECK_UTF8
*      EXPORTING
*        FILE_NAME         = P_FILENM
**       MAX_KB            = 8
**       ALL_IF_7BIT_ASCII = ABAP_FALSE
*      IMPORTING
*        BOM               = BOM
*        ENCODING          = ENCODING.
*  CATCH CX_SY_FILE_OPEN .
*  CATCH CX_SY_FILE_AUTHORITY .
*  CATCH CX_SY_FILE_IO .
*ENDTRY.
*
*
*
*IF ENCODING = CL_ABAP_FILE_UTILITIES=>ENCODING_UTF8.
*
*  OPEN DATASET P_FILENM  FOR INPUT
*                        IN TEXT MODE
*                        ENCODING UTF-8 IGNORING CONVERSION ERRORS
*                        SKIPPING BYTE-ORDER MARK.
*
*ELSE.
*
*  OPEN DATASET P_FILENM FOR INPUT
*  IN TEXT MODE ENCODING DEFAULT
*    IGNORING CONVERSION ERRORS.
*
*ENDIF.
*
*DO.
*  READ DATASET P_FILENM INTO LDF_DATA.
*  IF SY-SUBRC <> 0.
*    EXIT.
*  ENDIF.
*  SPLIT LDF_DATA AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
*   INTO TAB-KSCHL
*        TAB-LFART
*        TAB-VSTEL
*        TAB-KUNNR
*        TAB-PARVW
*        TAB-NACHA
*        TAB-VSZTP
*        TAB-SPRAS
*        TAB-LDEST.
*
*ENDDO.

OPEN DATASET P_FILENM FOR input
IN LEGACY TEXT MODE CODE PAGE '4104'
IGNORING CONVERSION ERRORS.

TRANSFER 'abc' to P_FILENM.

CLOSE DATASET P_FILENM.


DATA:
lw_ss TYPE TCP00A-CPATTR.

TRANSLATE lw_ss TO UPPER CASE.

WRITE lw_ss.
