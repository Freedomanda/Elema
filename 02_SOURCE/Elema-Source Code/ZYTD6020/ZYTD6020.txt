*&---------------------------------------------------------------------*
*& Report  ZYTD6020
*&
*&---------------------------------------------------------------------*
*&  機能     ： 仕入先マスタ 登録・変更ＢＩ用ファイル作成
*&  作成日   ： 2012/03/2
*&  作成者   ： SOLFIS(C.MARUTA)
*&---------------------------------------------------------------------*
*&  変更履歴 ：
*&  変更内容 ：
*&---------------------------------------------------------------------*
*&
*& 仕様
*& ・本プログラムは入力ファイルに従い、標準BIプログラムである
*&　 RFBIKR00用のファイルを出力するところまでを行う。
*&   従って後続における標準BIプログラムRFBIKR00の実行を前提とする。
*&   (登録PG:ZYTD2090と更新PG:ZYTD6015のマージPG)
*&
*& ・入力ファイルの仕様は以下のとおり。
*&　 →形式は「タブ区切りテキスト」。
*&     格納先は「ローカルフォルダ」、あるいは「サーバディレクトリ」
*&
*& ・出力ファイルの仕様は以下のとおり。
*&　　→形式は「固定長テキスト」。格納先は「サーバディレクトリ」
*&
*& ・銀行詳細データの更新は既存データをすべて削除して、新規登録する。
*&
*& ・処理終了後ダイアログボックスでログ(件数)を表示する。
*
* [改定履歴]
*  2012/08/14   ISID                  ES-UP
*  2014/09/01   ISID11                コードページUTF-8の改修
*  2015/01/13   ISID11                アップロード時のBOMロジック改修
*  2015/02/04   ISID11                コードページ処理の再修正
*&---------------------------------------------------------------------*
REPORT ZYTD6020 MESSAGE-ID Y1
NO STANDARD PAGE HEADING.
*&---------------------------------------------------------------------*
*& Table定義                                                           *
*&---------------------------------------------------------------------*
TABLES:BGR00, "セッションデータ用バッチ入力構造
BLF00, "仕入先取引データ（バッチ入力構造）
BLFA1, "一般仕入先マスタデータパート１（バッチ入力構造）
BLFB1, "仕入先会社コードデータ（バッチ入力構造）
BLFM1, "仕入先マスタ: 購買組織データ (バッチインプット)
BLFBK, "仕入先マスタ銀行データ（バッチ入力構造）
BWYT3, "仕入先マスタ: 取引先機能 ( バッチインプット )
DD03L. "テーブル項目

*&---------------------------------------------------------------------*
*& TYPES定義                                                           *
*&---------------------------------------------------------------------*
TYPES:
BEGIN OF T_S_DATA,
LIFNR(10),                  "仕入先コード
BUKRS(4),                   "会社コード
EKORG(4),                   "購買組織
KTOKK(4),                   "勘定グループ
ANRED(15),                  "敬称
NAME1(40),                  "名称 1  "M1
NAME2(40),                  "名称 2  "M1
NAME3(40),                  "名称 3  "M1
NAME4(40),                  "名称 4  "M1
SORTL(10),                  "検索条件
STRAS(40),                  "都道府県名  "M1
ORT01(40),                  "市区町村名  "M1
ORT02(35),                  "所在地
PSTLZ(10),                  "郵便番号
PFACH(10),                  "私書箱
PSTL2(10),                  "私書箱郵便番号
LAND1(3),                   "国コード
REGIO(3),                   "地域
SPRAS(2),                   "言語
TELF1(16),                  "電話番号１
TELFX(31),                  "ファックス番号
KUNNR(10),                  "得意先コード
BANKS(3),                   "国
BANKL(15),                  "銀行コード
BANKN(18),                  "銀行口座
KOINH(60),
BKONT(2),                   "銀行管理キー
DTAWS(2),
AKONT(10),                  "統制勘定コード
ZUAWA(3),                   "ソートキー
ZTERM1(4),                  "支払条件
ZWELS(10),                  "支払方法
HBKID(5),                   "取引銀行
WAERS(5),                   "購買発注通貨
ZTERM2(4),                  "支払条件（購買）
KALSK(2),                   "価格グループ
MEPRF(1),                   "価格設定日制御
VERKF(30),                  "仕入先担当営業者
TELF3(16),                  "仕入先電話番号
WEBRE(1),                   "区分: 入庫基準の請求書照合
XERSY(1),                   "ERS
XERSR(1),                   "返品明細の ERS（入庫/請求自動決済）
KZAUT(1),                   "購買発注自動生成
XVERR(1),                   "決済
INTAD(130),                 "担当者Internet
KVERM(30),                  "コメント
TLFNS(30),                  "Act.clk tel.no.(資本金として)
TLFXS(31),                  "経理担当者Fax
LIFN1(10),                  "取引先機能（取引先）
LIFN2(10),                  "取引先機能（名寄先）
MINDK(3),                   "相殺区分(少数コード)
END OF T_S_DATA,
T_I_DATA    TYPE TABLE OF T_S_DATA,  "内部テーブル定義

BEGIN OF T_S_TAB,
* Mod ES-UP 2012/10/25 -->
*     DAT(1000),
DAT TYPE STRING,
* Mod ES-UP 2012/10/25 <--
END OF T_S_TAB,
T_I_TAB     TYPE TABLE OF T_S_TAB.   "内部テーブル定義

*&---------------------------------------------------------------------*
*& DATA定義                                                            *
*&---------------------------------------------------------------------*
*グローバル定義
* 処理件数COUNT用構造
DATA:
BEGIN OF GS_LINE,
IN        TYPE P,     "読込ファイルデータ件数
OUT       TYPE P,     "出力ファイルデータ件数
TARGET    TYPE P,     "対象仕入先件数
END OF GS_LINE,

* 処理データ格納用内部テーブル
GIT_DATA    TYPE T_I_DATA.
*----------------------------------------------------------------------*
* CONSTANTS定義
*----------------------------------------------------------------------*
CONSTANTS:
CNS_FLG_ON(1)  TYPE C     VALUE 'X',    "フラグON
CNS_EKORG_1    TYPE EKORG VALUE '1000', "購買組織

* 記号系
BEGIN OF CNS_SYB,
* Mod ES-UP 2012/08/21 -->
*    TAB          TYPE X     VALUE '09',
TAB          TYPE STRING VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB,
* Mod ES-UP 2012/08/21 <--
SLA          TYPE C     VALUE '/',
END   OF CNS_SYB,

* 取引先機能
BEGIN OF CNS_PARVW,
CLIENT        TYPE PARVW VALUE 'Z3',    "取引先
AGGREG        TYPE PARVW VALUE 'RS',    "名寄先
END   OF CNS_PARVW,

* トランザクションコード
BEGIN OF CNS_TCD,
XK01         TYPE TCODE VALUE 'XK01',  "T-cd：登録
XK02         TYPE TCODE VALUE 'XK02',  "T-cd：更新
END   OF CNS_TCD.
**** START UPD 2014/09/01 ISID11 ****
** Add ES-UP 2012/10/25 -->
*CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
** Add ES-UP 2012/10/25 <--
**** START DEL 2015/02/04 ISID11 ****
*CONSTANTS CNS_UTF TYPE STRING VALUE 'UTF-8'.
**** END DEL 2015/02/04 ISID11 ****
**** END UPD 2014/09/01 ISID11 ****
*&---------------------------------------------------------------------*
*& 選択画面定義                                                        *
*&---------------------------------------------------------------------*
* 処理区分BLOCK
SELECTION-SCREEN BEGIN OF BLOCK BLK01 WITH FRAME TITLE TEXT-001.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS P_INS RADIOBUTTON GROUP RB1 DEFAULT 'X'.
SELECTION-SCREEN COMMENT (20) TEXT-002 FOR FIELD P_INS.
PARAMETERS P_UPD RADIOBUTTON GROUP RB1.
SELECTION-SCREEN COMMENT (20) TEXT-003 FOR FIELD P_UPD.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK BLK01.

SELECTION-SCREEN SKIP.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS P_ROC RADIOBUTTON GROUP RB2 DEFAULT 'X'.
SELECTION-SCREEN COMMENT (20) TEXT-004 FOR FIELD P_ROC.
SELECTION-SCREEN END OF LINE.

PARAMETERS:
P_RIN(128)  LOWER CASE.   "入力ﾌｧｲﾙ名(ローカル)

SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS P_SEV RADIOBUTTON GROUP RB2.
SELECTION-SCREEN COMMENT (20) TEXT-005 FOR FIELD P_SEV.
SELECTION-SCREEN END OF LINE.

PARAMETERS:
P_SIN(60)   LOWER CASE.                "入力ﾌｧｲﾙ名(サーバ)

SELECTION-SCREEN SKIP.

PARAMETERS:
P_OUT(60) LOWER CASE OBLIGATORY,       "出力ﾌｧｲﾙ名

P_GROUP TYPE BGR00-GROUP OBLIGATORY    "ﾊﾞｯﾁｲﾝﾌﾟｯﾄｾｯｼｮﾝ名
DEFAULT SY-REPID.

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN ON VALUE-REQUEST                                *
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_SIN.

* 検索HELP(サーバ)
PERFORM CHOOSE_SERVER_FILE USING P_SIN.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_RIN.

* 検索HELP(ローカル)
PERFORM OPEN_DIALOG CHANGING P_RIN.

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN                                                 *
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN.

* 入力チェック
PERFORM CHECK_INPUT.

*&---------------------------------------------------------------------*
*& START-OF-SELECTION                                                  *
*&---------------------------------------------------------------------*
START-OF-SELECTION.

* ファイル処理
PERFORM FILE_PROC.

* マスタチェック処理
PERFORM CHECK_PROC.

* ＢＤＣデータ作成処理
PERFORM CRATE_BDC_PROC.

* 結果出力処理
PERFORM INFO_PROC.

*&--------------------------------------------------------------------
*&      Form  CHOOSE_SERVER_FILE
*&--------------------------------------------------------------------
FORM CHOOSE_SERVER_FILE  USING  P_BKFILE.

DATA: L_PATH      TYPE DXFIELDS-LONGPATH,
L_ABEND_FLG TYPE DXFIELDS-ABENDFLAG.

CALL FUNCTION 'F4_DXFILENAME_TOPRECURSION'
EXPORTING
I_LOCATION_FLAG = 'A'
I_SERVER        = ''
I_PATH          = 'D:\'
FILEMASK        = '*.*'
FILEOPERATION   = 'R'
IMPORTING
O_PATH          = L_PATH
ABEND_FLAG      = L_ABEND_FLG
EXCEPTIONS
RFC_ERROR       = 1
OTHERS          = 2.

CHECK SY-SUBRC = 0
AND L_ABEND_FLG <> 'X'.

P_BKFILE = L_PATH.

ENDFORM.                    " CHOOSE_SERVER_FILE
*&---------------------------------------------------------------------*
*&      Form  OPEN_DIALOG
*&---------------------------------------------------------------------*
*       ファイルオープンダイアログ
*----------------------------------------------------------------------*
*      <--O_FILE  ローカルファイルパス
*----------------------------------------------------------------------*
FORM OPEN_DIALOG  CHANGING P_RCPATH.

DATA :
LV_TABLE    TYPE FILETABLE,
LV_RC       TYPE I,
LV_FILENAME TYPE STRING,
LW_TABLE    LIKE LINE OF LV_TABLE.

LV_FILENAME = P_RCPATH..

CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
EXPORTING
WINDOW_TITLE            = 'ローカルファイルの指定'
DEFAULT_FILENAME        = LV_FILENAME
FILE_FILTER             = 'ALL FILES|*.*'
INITIAL_DIRECTORY       = 'C:\'
CHANGING
FILE_TABLE              = LV_TABLE
RC                      = LV_RC
EXCEPTIONS
FILE_OPEN_DIALOG_FAILED = 1
CNTL_ERROR              = 2
ERROR_NO_GUI            = 3
OTHERS                  = 4.

READ TABLE LV_TABLE INTO LW_TABLE INDEX 1.
P_RCPATH = LW_TABLE-FILENAME.

ENDFORM.                    " OPEN_DIALOG
*&---------------------------------------------------------------------*
*&      Form  CHECK_INPUT
*&---------------------------------------------------------------------*
*       text  入力チェック
*----------------------------------------------------------------------*
FORM CHECK_INPUT .

* 処理分岐
CASE CNS_FLG_ON.
*   ローカル選択
WHEN P_ROC.
CHECK P_RIN IS INITIAL.
SET CURSOR FIELD 'P_RIN'.
MESSAGE E401(Y1)
WITH '入力ファイル(ローカル)を入力してください'.

*   サーバ選択
WHEN P_SEV.
CHECK P_SIN IS INITIAL.
SET CURSOR FIELD 'P_SIN'.
MESSAGE E401(Y1)
WITH '入力ファイル（サーバ）を入力してください'.
*   その他
WHEN OTHERS.
*     処理なし

ENDCASE.

ENDFORM.                    " CHECK_INPUT
*&---------------------------------------------------------------------*
*&      Form  FILE_PROC
*&---------------------------------------------------------------------*
*       text  ファイル処理
*----------------------------------------------------------------------*
FORM FILE_PROC.

REFRESH GIT_DATA.
CLEAR GS_LINE.

* ファイルデータの読込
PERFORM OPEN_READ_PROC.

* 入力ファイル件数チェック
DESCRIBE TABLE GIT_DATA LINES GS_LINE-IN.

CHECK GS_LINE-IN = 0.
MESSAGE S401(Y1) WITH '入力ファイルが０件です'.
LEAVE LIST-PROCESSING.

ENDFORM.                    " FILE_PROC
*&---------------------------------------------------------------------*
*&      Form  OPEN_READ_PROC
*&---------------------------------------------------------------------*
*       ファイルオープン
*----------------------------------------------------------------------*
FORM OPEN_READ_PROC.

**** START ADD 2015/02/04 ISID11 ****
DATA:
L_Z_OUTPUT_CP TYPE  ZTEGZZM001-Z_OUTPUT_CP,
L_SAPCODEPAGE TYPE STRING,
L_FLGUTF8  TYPE  FLAG,
L_SUBRC    TYPE SY-SUBRC,
L_CODEPAGE TYPE ABAP_ENCODING.
**** END ADD 2015/02/04 ISID11 ****

* 処理分岐
CASE CNS_FLG_ON.
*   ローカル選択
WHEN P_ROC.
*     ローカルファイル読込
PERFORM UPLOAD_LOCAL_FILE.

*   サーバ選択
WHEN P_SEV.

*     サーバファイル読込
PERFORM DATASET_SEVER_FILE.

*   その他
WHEN OTHERS.
*     処理なし

ENDCASE.

* 出力ファイル(サーバ)
* Mod ES-UP 2012/08/21 -->
*  OPEN DATASET P_OUT FOR OUTPUT IN TEXT MODE.
*  CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
*  DATA L_CODEPAGE TYPE CPCODEPAGE.
*
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
**** START ADD 2015/02/04 ISID11 ****
CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
EXPORTING
IMPPGM      = SY-REPID
IMPBUKRS    = TEXT-006
IMPORTING
EXPCODEPAGE = L_Z_OUTPUT_CP
EXPFLGUTF8  = L_FLGUTF8.

IF L_FLGUTF8 IS INITIAL.
L_SAPCODEPAGE = L_Z_OUTPUT_CP.
IF L_SAPCODEPAGE IS NOT INITIAL.

L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).

ENDIF.
TRY .
OPEN DATASET P_OUT FOR OUTPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.

L_SUBRC = SY-SUBRC.

CATCH CX_SY_CODEPAGE_CONVERTER_INIT.

L_SUBRC = 8.

ENDTRY.

ELSE.
**** END ADD 2015/02/04 ISID11 ****

OPEN DATASET P_OUT FOR OUTPUT
IN TEXT MODE ENCODING UTF-8
**** START ADD 2015/02/04 ISID11 ****
IGNORING CONVERSION ERRORS.

L_SUBRC = SY-SUBRC.

ENDIF.
**** END ADD 2015/02/04 ISID11 ****

*    IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
*    IGNORING CONVERSION ERRORS.
* Mod ES-UP 2012/08/21 <--
**** START UPD 2015/02/04 ISID11 ****
*  CHECK SY-SUBRC <> 0.
CHECK L_SUBRC <> 0 .
**** END UPD 2015/02/04 ISID11 ****
MESSAGE E401 WITH '仕入先マスタファイルオープンエラー'
P_OUT.
LEAVE LIST-PROCESSING.

ENDFORM.                    " OPEN_READ_PROC
*&---------------------------------------------------------------------*
*&      Form  UPLOAD_LOCAL_FILE
*&---------------------------------------------------------------------*
*       text  ローカルファイル読込
*----------------------------------------------------------------------*
FORM UPLOAD_LOCAL_FILE.

DATA :
LW_FILE       TYPE STRING.
* Add ES-UP 2012/10/25 -->
DATA: L_CODEPAGE TYPE ABAP_ENCODING,
**** START ADD 2015/02/04 ISID11 ****
L_Z_OUTPUT_CP TYPE  ZTEGZZM001-Z_OUTPUT_CP,
L_SAPCODEPAGE TYPE STRING.

CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
EXPORTING
IMPPGM      = SY-REPID
IMPBUKRS    = TEXT-006
IMPORTING
EXPCODEPAGE = L_Z_OUTPUT_CP.
**** END ADD 2015/02/04 ISID11 ****
**** START UPD 2014/09/01 ISID11 ****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
**** START ADD 2015/02/04 ISID11 ****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_UTF ).
L_SAPCODEPAGE = L_Z_OUTPUT_CP.
IF L_SAPCODEPAGE IS NOT INITIAL.

L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).

ENDIF.
**** END ADD 2015/02/04 ISID11 ****

**** END UPD 2014/09/01 ISID11 ****
* Add ES-UP 2012/10/25 <--
LW_FILE = P_RIN.

CALL FUNCTION 'GUI_UPLOAD'
EXPORTING
FILENAME                = LW_FILE
HAS_FIELD_SEPARATOR     = CNS_FLG_ON
* Add ES-UP 2012/10/25 -->
CODEPAGE                  = L_CODEPAGE
* Add ES-UP 2012/10/25 <--
TABLES
DATA_TAB                = GIT_DATA
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
OTHERS                  = 17.

CHECK SY-SUBRC <> 0.
MESSAGE S401 WITH '入力ファイルオープンエラー'
P_SIN.
LEAVE LIST-PROCESSING.

ENDFORM.                    " UPLOAD_LOCAL_FILE
*&---------------------------------------------------------------------*
*&      Form  DATASET_SEVER_FILE
*&---------------------------------------------------------------------*
*       text　サーバファイル処理
*----------------------------------------------------------------------*
FORM DATASET_SEVER_FILE.

* ローカル定義
DATA:
LIT_TAB   TYPE T_I_TAB,
**** START ADD 2015/02/04 ISID11 ****
L_Z_OUTPUT_CP TYPE  ZTEGZZM001-Z_OUTPUT_CP,
L_SAPCODEPAGE TYPE STRING,
L_FLGUTF8  TYPE  FLAG,
L_SUBRC    TYPE SY-SUBRC,
L_CODEPAGE TYPE ABAP_ENCODING.
**** END ADD 2015/02/04 ISID11 ****
* 入力ファイル（サーバ）
**** START UPD 2014/09/01 ISID11 ****
** Mod ES-UP 2012/08/21 -->
**  OPEN DATASET P_SIN FOR INPUT IN TEXT MODE.
*  CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
*  DATA L_CODEPAGE TYPE CPCODEPAGE.
*
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
*  OPEN DATASET P_SIN FOR INPUT
*    IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
*    IGNORING CONVERSION ERRORS.
*
** Mod ES-UP 2012/08/21 <--
**** START ADD 2015/02/04 ISID11 ****
CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
EXPORTING
IMPPGM      = SY-REPID
IMPBUKRS    = TEXT-006
IMPORTING
EXPCODEPAGE = L_Z_OUTPUT_CP
EXPFLGUTF8  = L_FLGUTF8.

IF L_FLGUTF8 IS INITIAL.
L_SAPCODEPAGE = L_Z_OUTPUT_CP.
IF L_SAPCODEPAGE IS NOT INITIAL.

L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).

ENDIF.
TRY .
OPEN DATASET P_SIN FOR INPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.

L_SUBRC = SY-SUBRC.

CATCH CX_SY_CODEPAGE_CONVERTER_INIT.

L_SUBRC = 8.

ENDTRY.

ELSE.
**** END ADD 2015/02/04 ISID11 ****
OPEN DATASET P_SIN FOR INPUT IN TEXT MODE ENCODING UTF-8
IGNORING CONVERSION ERRORS
**** START ADD 2015/01/13 ISID11 ****
SKIPPING BYTE-ORDER MARK.
**** START ADD 2015/02/04 ISID11 ****
L_SUBRC = SY-SUBRC.

ENDIF.
**** END ADD 2015/02/04 ISID11 ****
**** END ADD 2015/01/13 ISID11 ****
**** END UPD 2014/09/01 ISID11 ****
**** START UPD 2015/02/04 ISID11 ****
*  IF SY-SUBRC <> 0.
IF L_SUBRC <> 0 .
**** END UPD 2015/02/04 ISID11 ****
MESSAGE E401 WITH '仕入先マスタファイルオープンエラー'
P_SIN.
LEAVE LIST-PROCESSING.
ENDIF.



* ファイル読込処理
PERFORM READ_FILE
CHANGING LIT_TAB.

* ファイル項目分割処理
PERFORM SPLIT_DATA
USING LIT_TAB
CHANGING GIT_DATA.

ENDFORM.                    " DATASET_SEVER_FILE
*&---------------------------------------------------------------------*
*&      Form  READ_FILE
*&---------------------------------------------------------------------*
*       text  ファイル読込処理
*----------------------------------------------------------------------*
FORM READ_FILE CHANGING PIT_TAB TYPE T_I_TAB.

*  ローカル定義
DATA :
LS_TAB     TYPE T_S_TAB.

DO.
CLEAR LS_TAB.
* Mod ES-UP 2012/10/25 -->
*    READ DATASET P_SIN INTO LS_TAB.
READ DATASET P_SIN INTO LS_TAB-DAT.
* Mod ES-UP 2012/10/25 <--

IF SY-SUBRC <> 0.
EXIT.
ENDIF.
APPEND LS_TAB TO PIT_TAB.
ENDDO.
CLOSE DATASET P_SIN.
ENDFORM.                    " READ_FILE
*&---------------------------------------------------------------------*
*&      Form  SPLIT_DATA
*&---------------------------------------------------------------------*
*       text  分割処理
*----------------------------------------------------------------------*
FORM SPLIT_DATA USING    PIT_TAB    TYPE T_I_TAB
CHANGING PIT_DATA   TYPE T_I_DATA.

* ローカル定義
DATA :
LS_TAB     TYPE T_S_TAB,
LS_DATA    TYPE T_S_DATA.

LOOP AT PIT_TAB INTO LS_TAB.

CLEAR LS_DATA.
* Mod ES-UP 2012/10/25 -->
*    SPLIT LS_TAB AT CNS_SYB-TAB INTO
SPLIT LS_TAB-DAT AT CNS_SYB-TAB INTO
* Mod ES-UP 2012/10/25 <--
LS_DATA-LIFNR                       "仕入先コード
LS_DATA-BUKRS                       "会社コード
LS_DATA-EKORG                       "購買組織
LS_DATA-KTOKK                       "勘定グループ
LS_DATA-ANRED                       "敬称
LS_DATA-NAME1                                           "名称 1
LS_DATA-NAME2                                           "名称 2
LS_DATA-NAME3                                           "名称 3
LS_DATA-NAME4                                           "名称 4
LS_DATA-SORTL                       "検索条件
LS_DATA-STRAS                       "都道府県名
LS_DATA-ORT01                       "市区町村名
LS_DATA-ORT02                       "所在地
LS_DATA-PSTLZ                       "郵便番号
LS_DATA-PFACH                       "私書箱
LS_DATA-PSTL2                       "私書箱郵便番号
LS_DATA-LAND1                       "国コード
LS_DATA-REGIO                       "地域
LS_DATA-SPRAS                       "言語
LS_DATA-TELF1                       "電話番号１
LS_DATA-TELFX                       "ファックス番号
LS_DATA-KUNNR                       "得意先コード
LS_DATA-BANKS                       "国
LS_DATA-BANKL                       "銀行コード
LS_DATA-BANKN                       "銀行口座
LS_DATA-KOINH
LS_DATA-BKONT                       "銀行管理キー
LS_DATA-DTAWS
LS_DATA-AKONT                       "統制勘定コード
LS_DATA-ZUAWA                       "ソートキー
LS_DATA-ZTERM1                      "支払条件
LS_DATA-ZWELS                       "支払方法
LS_DATA-HBKID                       "取引銀行
LS_DATA-WAERS                       "購買発注通貨
LS_DATA-ZTERM2                      "支払条件（購買）
LS_DATA-KALSK                       "価格グループ
LS_DATA-MEPRF                       "価格設定日制御
LS_DATA-VERKF                       "仕入先担当営業者
LS_DATA-TELF3                       "仕入先電話番号
LS_DATA-WEBRE
LS_DATA-XERSY                       "ERS
LS_DATA-XERSR
LS_DATA-KZAUT                       "購買発注自動生成
LS_DATA-XVERR
LS_DATA-INTAD                      "担当者Internet
LS_DATA-KVERM                      "コメント
LS_DATA-TLFNS                      "Act.clktel.no.(資本金として)
LS_DATA-TLFXS                      "経理担当者Fax
LS_DATA-LIFN1                      "取引先機能（請求）
LS_DATA-LIFN2                      "取引先機能（支払）
LS_DATA-MINDK.                     "相殺区分(少数コード)

APPEND LS_DATA TO PIT_DATA.
ENDLOOP.

ENDFORM.                    " SPLIT_DATA
*&---------------------------------------------------------------------*
*&      Form  CHECK_PROC                                               *
*&---------------------------------------------------------------------*
*       text  マスタの存在チェック
*----------------------------------------------------------------------*
FORM CHECK_PROC.

* ローカル定義
FIELD-SYMBOLS:
<FS_DATA>    TYPE T_S_DATA.
DATA :
LW_ERFLG     TYPE C,          "エラーフラグ
LW_LIFNR_S   TYPE LFA1-LIFNR, "仕入先(検索用)
LW_LIFNR_W   TYPE LFA1-LIFNR. "仕入先(一次格納)

LOOP AT GIT_DATA ASSIGNING <FS_DATA>.

CLEAR: LW_ERFLG.

*   前ゼロ処理
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = <FS_DATA>-LIFNR
IMPORTING
OUTPUT = LW_LIFNR_S.

*  登録時のマスタチェック
IF P_INS = CNS_FLG_ON.

*   マスタチェック
SELECT SINGLE LIFNR
FROM LFA1
INTO LW_LIFNR_W
WHERE LIFNR = LW_LIFNR_S.

IF SY-SUBRC = 0.
MESSAGE I401 WITH '仕入先マスタに存在します.仕入='
<FS_DATA>-LIFNR.
LW_ERFLG = CNS_FLG_ON.
ENDIF.
ELSE.

*     購買組織
SELECT SINGLE LIFNR
INTO LW_LIFNR_W
FROM LFM1
WHERE LIFNR = LW_LIFNR_S
AND EKORG = CNS_EKORG_1.

*     購買組織[1000]の設定
IF SY-SUBRC = 0.
<FS_DATA>-EKORG = CNS_EKORG_1.
*     読み飛ばし
ELSE.
<FS_DATA>-EKORG = CNS_SYB-SLA.
ENDIF.

ENDIF.

*  文字列の長さチェック
PERFORM CHECK_LENTH :
*                       名称１
USING <FS_DATA>
<FS_DATA>-NAME1
TEXT-T01
CHANGING LW_ERFLG,
*                       名称２
USING <FS_DATA>
<FS_DATA>-NAME2
TEXT-T02
CHANGING LW_ERFLG,
*                       名称３
USING <FS_DATA>
<FS_DATA>-NAME3
TEXT-T03
CHANGING LW_ERFLG,
*                       名称４
USING <FS_DATA>
<FS_DATA>-NAME4
TEXT-T04
CHANGING LW_ERFLG,
*                       都道府県名
USING <FS_DATA>
<FS_DATA>-STRAS
TEXT-T05
CHANGING LW_ERFLG,
*                       市区町村名
USING <FS_DATA>
<FS_DATA>-ORT01
TEXT-T06
CHANGING LW_ERFLG.

CHECK NOT LW_ERFLG IS INITIAL.
DELETE GIT_DATA.
ENDLOOP.

ENDFORM.                    " CHECK_PROC
*&---------------------------------------------------------------------*
*&      Form  CRATE_BDC_PROC
*&---------------------------------------------------------------------*
*       text  出力用ＢＤＣデータ作成
*----------------------------------------------------------------------*
FORM CRATE_BDC_PROC.

* ローカル定義
DATA :
LS_DATA      TYPE T_S_DATA.

CHECK NOT GIT_DATA IS INITIAL.
* セッションデータ用バッチ入力構造
PERFORM F_BGR00.        "ｾｯｼｮﾝﾚｺｰﾄﾞ 作成

LOOP AT GIT_DATA INTO LS_DATA.
*   仕入先のヘッダデータ
PERFORM F_BLF00
USING LS_DATA.
*   仕入先の一般データ
PERFORM F_BLFA1
USING LS_DATA.
*   会社コードデータ
PERFORM F_BLFB1
USING LS_DATA.
*   銀行データ
PERFORM F_BLFBK
USING LS_DATA.
*   購買データ (購買組織レベル)
PERFORM F_BLFM1
USING LS_DATA.
*   購買データ (取引先機能)
PERFORM F_BWYT3
USING LS_DATA.
ENDLOOP.

ENDFORM.                    " CRATE_BDC_PROC
*&---------------------------------------------------------------------*
*&      Form  F_BGR00
*&---------------------------------------------------------------------*
*       セッションデータ用バッチ入力構造
*----------------------------------------------------------------------*
FORM F_BGR00.
*
PERFORM F_INIT_VAL USING 'BGR00'.
BGR00-STYPE = '0'.          "ﾚｺｰﾄﾞﾀｲﾌﾟ
BGR00-GROUP = P_GROUP.      "ｾｯｼｮﾝ名
BGR00-MANDT = SY-MANDT.     "ｸﾗｲｱﾝﾄ
BGR00-USNAM = SY-UNAME.     "ﾕｰｻﾞ名
BGR00-START = SPACE.        "開始日
BGR00-XKEEP = 'X'.          "保持ﾌﾗｸﾞ
BGR00-NODATA = CNS_SYB-SLA. "ﾊﾞｯﾁｲﾝﾌﾟｯﾄなし項目
TRANSFER BGR00 TO P_OUT.

* 出力レコード件数
ADD 1 TO GS_LINE-OUT.

ENDFORM.                                                    " F_BGR00
*&---------------------------------------------------------------------*
*       バッチテーブルへの初期値のセット
*----------------------------------------------------------------------*
*      -->P_DB   セット先データベース名
*----------------------------------------------------------------------*
FORM F_INIT_VAL USING VALUE(P_DB).

* ローカル定義
FIELD-SYMBOLS <PT> TYPE ANY.
DATA: WK_DB(60) TYPE C.

* 変数の初期化
* Mod ES-UP 2012/09/05 -->
*  SELECT * FROM DD03L WHERE TABNAME = P_DB.
SELECT * FROM DD03L WHERE TABNAME = P_DB
AND COMPTYPE IN (SPACE, 'E').
* Mod ES-UP 2012/09/05 <--
CONCATENATE P_DB '-' DD03L-FIELDNAME INTO WK_DB.
ASSIGN (WK_DB) TO <PT>.
<PT> = CNS_SYB-SLA.
ENDSELECT.

ENDFORM.                    " F_INIT_VAL
*&---------------------------------------------------------------------*
*&      Form  F_BLF00
*&---------------------------------------------------------------------*
*       text  仕入先のヘッダデータ
*----------------------------------------------------------------------*
FORM F_BLF00 USING PS_DATA TYPE T_S_DATA.

* ローカル定義
DATA :
L_10N(10)    TYPE N,
L_LIFNR      TYPE LFA1-LIFNR.

* 初期値の設定
PERFORM F_INIT_VAL USING 'BLF00'.

* 前0処理
IF PS_DATA-LIFNR CO '1234567890 '.
L_10N = PS_DATA-LIFNR.
BLF00-LIFNR = L_10N.
ELSE.
BLF00-LIFNR = PS_DATA-LIFNR.
ENDIF.

* 処理分岐
CASE CNS_FLG_ON.
*   登録
WHEN P_INS.
BLF00-STYPE = '1'.            "レコードタイプ
BLF00-TCODE = CNS_TCD-XK01.   " T-CD：XK01
BLF00-LIFNR = PS_DATA-LIFNR.  "仕入先(債権者)勘定設定
BLF00-BUKRS = PS_DATA-BUKRS.  "会社コード
BLF00-EKORG = PS_DATA-EKORG.  "購買組織
BLF00-KTOKK = PS_DATA-KTOKK.  "仕入先勘定グループ

*   変更
WHEN P_UPD.

BLF00-STYPE = '1'.            "ﾚｺｰﾄﾞﾀｲﾌﾟ
BLF00-TCODE = CNS_TCD-XK02.   " T-CD：XK02
BLF00-BUKRS = PS_DATA-BUKRS.  "会社コード
BLF00-EKORG = PS_DATA-EKORG.  "購買組織

*   その他
WHEN OTHERS.
*     処理なし
ENDCASE.

TRANSFER BLF00 TO P_OUT.

* 出力レコード件数/出力仕入先コード件数
ADD 1 TO GS_LINE-OUT.
ADD 1 TO GS_LINE-TARGET.

ENDFORM.                                                    " F_BLF00
*&---------------------------------------------------------------------*
*&      Form  F_BLFA1
*&---------------------------------------------------------------------*
*       text  仕入先の一般データ
*----------------------------------------------------------------------*
FORM F_BLFA1 USING   PS_DATA TYPE T_S_DATA.

* ローカル定義
DATA :
L_2N(02) TYPE N.

PERFORM F_INIT_VAL USING 'BLFA1'.

BLFA1-STYPE = '2'.            "ﾚｺｰﾄﾞﾀｲﾌﾟ
BLFA1-TBNAM = 'BLFA1'.        "ﾃｰﾌﾞﾙ名
BLFA1-ANRED = PS_DATA-ANRED.  "敬称
BLFA1-NAME1 = PS_DATA-NAME1.  "名称１
BLFA1-NAME2 = PS_DATA-NAME2.  "名称２
BLFA1-NAME3 = PS_DATA-NAME3.  "名称３
BLFA1-NAME4 = PS_DATA-NAME4.  "名称４
BLFA1-SORTL = PS_DATA-SORTL.  "ソート項目
BLFA1-STRAS = PS_DATA-STRAS.  "都道府県名
BLFA1-PFACH = PS_DATA-PFACH.  "私書箱
BLFA1-ORT01 = PS_DATA-ORT01.  "市区町村名
BLFA1-PSTLZ = PS_DATA-PSTLZ.  "郵便番号
BLFA1-ORT02 = PS_DATA-ORT02.  "所在地
BLFA1-PSTL2 = PS_DATA-PSTL2.  "私書箱郵便番号
BLFA1-LAND1 = PS_DATA-LAND1.  "国コード
IF PS_DATA-REGIO CO '1234567890 '.
L_2N = PS_DATA-REGIO.
BLFA1-REGIO = L_2N.       "地域
ELSE.
BLFA1-REGIO = PS_DATA-REGIO.  "地域
ENDIF.
BLFA1-SPRAS = PS_DATA-SPRAS.  "言語コード
BLFA1-TELF1 = PS_DATA-TELF1.  " 電話番号 1
BLFA1-TELFX = PS_DATA-TELFX.  "ファックス番号
BLFA1-KUNNR = PS_DATA-KUNNR.  "得意先コード
BLFA1-DTAWS = PS_DATA-DTAWS.  "銀行手数料負担コード

TRANSFER BLFA1 TO P_OUT.

* 出力レコード件数
ADD 1 TO GS_LINE-OUT.

ENDFORM.                                                    " F_BLFA1
*&---------------------------------------------------------------------*
*&      Form  F_BLFB1
*&---------------------------------------------------------------------*
*       text  会社コードデータ
*----------------------------------------------------------------------*
FORM F_BLFB1 USING PS_DATA TYPE T_S_DATA.

* ローカル定義
DATA :
L_4N(4) TYPE N.

PERFORM F_INIT_VAL USING 'BLFB1'.
BLFB1-STYPE = '2'.            "ﾊﾞｯﾁｲﾝﾌﾟｯﾄｲﾝﾀﾌｪｰｽﾚｺーﾄﾞ
BLFB1-TBNAM = 'BLFB1'.        "テーブル名
BLFB1-AKONT = PS_DATA-AKONT.  "総勘定元帳統制勘定コード
IF PS_DATA-ZTERM1 CO '1234567890 '.
L_4N = PS_DATA-ZTERM1.
BLFB1-ZTERM = L_4N.
ELSE.
BLFB1-ZTERM = PS_DATA-ZTERM1. "支払条件キー
ENDIF.
BLFB1-ZWELS = PS_DATA-ZWELS.  "支払方法一覧
BLFB1-HBKID = PS_DATA-HBKID.  "取引銀行用の ID
IF PS_DATA-KUNNR IS INITIAL
OR PS_DATA-KUNNR = CNS_SYB-SLA.
ELSE.
BLFB1-XVERR = 'X'.          "相殺決済
ENDIF.
BLFB1-TLFNS = PS_DATA-TLFNS.  "Act.clk tel.no.
BLFB1-INTAD = PS_DATA-INTAD.  "担当者のｲﾝﾀｰﾈｯﾄｱﾄﾞﾚｽ
BLFB1-KVERM = PS_DATA-KVERM.  "コメント
BLFB1-TLFXS = PS_DATA-TLFXS.  "経理担当者Fax
BLFB1-MINDK = PS_DATA-MINDK.  "相殺区分(少数コード)

TRANSFER BLFB1 TO P_OUT.

* 出力レコード件数
ADD 1 TO GS_LINE-OUT.

ENDFORM.                                                    " F_BLFB1
*&---------------------------------------------------------------------*
*&      Form  F_BLFBK
*&---------------------------------------------------------------------*
*       text  銀行データ
*----------------------------------------------------------------------*
FORM F_BLFBK USING  PS_DATA TYPE T_S_DATA.

* ローカル定義
DATA:
L_7N(7) TYPE N,
L_2N(2) TYPE N,
L_BANKS TYPE LFBK-BANKS, "銀行国コード
L_BANKL TYPE LFBK-BANKL, "銀行コード
L_BANKN TYPE LFBK-BANKN. "銀行口座番号

CHECK
NOT PS_DATA-BANKS = CNS_SYB-SLA AND
NOT PS_DATA-BANKL = CNS_SYB-SLA AND
NOT PS_DATA-BANKN = CNS_SYB-SLA AND
NOT PS_DATA-KOINH = CNS_SYB-SLA AND
NOT PS_DATA-BKONT = CNS_SYB-SLA.

* 変更の場合、既存銀行データの削除
IF P_UPD = CNS_FLG_ON.
SELECT BANKS BANKL BANKN
INTO (L_BANKS, L_BANKL, L_BANKN)
FROM LFBK
WHERE LIFNR = BLF00-LIFNR.

PERFORM F_INIT_VAL USING 'BLFBK'.
BLFBK-STYPE = '2'.          "ﾚｺｰﾄﾞﾀｲﾌﾟ
BLFBK-TBNAM = 'BLFBK'.      "ﾃｰﾌﾞﾙ名
BLFBK-BANKS = L_BANKS.      "銀行国コード
BLFBK-XDELE = 'X'.          "削除
BLFBK-BANKL = L_BANKL.      "銀行コード
BLFBK-BANKN = L_BANKN.      "銀行口座番号

TRANSFER BLFBK TO P_OUT.
*     出力レコード件数
ADD 1 TO GS_LINE-OUT.

ENDSELECT.

ENDIF.

PERFORM F_INIT_VAL USING 'BLFBK'.
BLFBK-STYPE = '2'.             "ﾚｺｰﾄﾞﾀｲﾌﾟ
BLFBK-TBNAM = 'BLFBK'.         "ﾃｰﾌﾞﾙ名
BLFBK-BANKS = PS_DATA-BANKS.   "銀行国コード
BLFBK-XDELE = SPACE.           "登録
IF PS_DATA-BANKL CO '1234567890 '.
L_7N = PS_DATA-BANKL.
BLFBK-BANKL = L_7N.          "銀行コード
ELSE.
BLFBK-BANKL = PS_DATA-BANKL. "銀行コード
ENDIF.
BLFBK-BANKN = PS_DATA-BANKN.   "銀行口座番号
BLFBK-KOINH = PS_DATA-KOINH.   "口座名義人名
IF PS_DATA-BKONT CO '1234567890 '.
L_2N = PS_DATA-BKONT.
BLFBK-BKONT = L_2N.          "銀行管理キー
ELSE.
BLFBK-BKONT = PS_DATA-BKONT. "銀行管理キー
ENDIF.

TRANSFER BLFBK TO P_OUT.

* 出力レコード件数
ADD 1 TO GS_LINE-OUT.

ENDFORM.                    " F_BLFBK
*&---------------------------------------------------------------------*
*&      Form  F_BLFM1
*&---------------------------------------------------------------------*
*       text  購買データ (購買組織レベル)
*----------------------------------------------------------------------*
*      -->P_LS_DATA  text
*----------------------------------------------------------------------*
FORM F_BLFM1 USING PS_DATA TYPE T_S_DATA.

* ローカル定義
DATA :
L_4N(4) TYPE N.

CHECK BLF00-EKORG = CNS_EKORG_1.

PERFORM F_INIT_VAL USING 'BLFM1'.
BLFM1-STYPE = '2'.             "ﾚｺｰﾄﾞﾀｲﾌﾟ
BLFM1-TBNAM = 'BLFM1'.         "ﾃｰﾌﾞﾙ名
BLFM1-WAERS =  PS_DATA-WAERS.  "購買発注通貨
IF PS_DATA-ZTERM2 CO '1234567890 '.
L_4N = PS_DATA-ZTERM2.
BLFM1-ZTERM = L_4N.
ELSE.
BLFM1-ZTERM =  PS_DATA-ZTERM2. "支払条件キー
ENDIF.
BLFM1-VERKF =  PS_DATA-VERKF.  "仕入先営業担当者
BLFM1-TELF1 =  PS_DATA-TELF3.  "仕入先電話番号
BLFM1-WEBRE =  PS_DATA-WEBRE.  "区分: 入庫基準の請求書照合
BLFM1-KALSK =  PS_DATA-KALSK.  "価格決定表グループ (仕入先)
BLFM1-KZAUT =  PS_DATA-KZAUT.  "購買発注の自動登録許可
BLFM1-MEPRF =  PS_DATA-MEPRF.  "価格設定日制御
BLFM1-XERSY =  PS_DATA-XERSY.  "ERS（自動入庫/請求決済）
BLFM1-XERSR =  PS_DATA-XERSR.  "返品明細の ERS（入庫/請求自動決済）

TRANSFER BLFM1 TO P_OUT.

* 出力レコード件数
ADD 1 TO GS_LINE-OUT.

ENDFORM.                                                    " F_BLFM1
*&---------------------------------------------------------------------*
*&      Form  F_BWYT3
*&---------------------------------------------------------------------*
*       text　購買データ (取引先機能)
*----------------------------------------------------------------------*
FORM F_BWYT3 USING PS_DATA TYPE T_S_DATA.

CHECK BLF00-EKORG = CNS_EKORG_1.


* 取引先機能：取引先
PERFORM MAKE_BWYT3
USING CNS_PARVW-CLIENT  "取引先：[Z3]
BLF00-LIFNR
PS_DATA-LIFN1
PS_DATA-EKORG.

* 取引先機能：名寄先
PERFORM MAKE_BWYT3
USING CNS_PARVW-AGGREG  "名寄先：[PI]
BLF00-LIFNR
PS_DATA-LIFN2
PS_DATA-EKORG.

ENDFORM.                                                    " F_BWYT3
*&---------------------------------------------------------------------*
*&      Form  MAKE_BWYT3
*&---------------------------------------------------------------------*
*       text  取引先機能：取引先データ作成
*----------------------------------------------------------------------*
FORM MAKE_BWYT3 USING PW_ID
PW_LIFNR
PW_CODE
PW_EKORG.

CHECK NOT PW_CODE IS INITIAL
AND PW_CODE <> CNS_SYB-SLA.
*
BWYT3-STYPE = '2'.              "レコードタイプ
BWYT3-TBNAM = 'BWYT3'.          "テーブル名
BWYT3-XDEKO = '/'.              "フラグ: バッチインプットによる
BWYT3-XDELE = '/'.              "フラグ: バッチインプットで登録
BWYT3-EKORG = PW_EKORG.         "購買組織
BWYT3-LTSNR = '/'.              "仕入先部門
BWYT3-WERKS = '/'.              "プラント
BWYT3-PARVW = PW_ID.            "取引先機能区分
BWYT3-PARZA = '/'.              "取引先カウンタ
BWYT3-ERNAM = '/'.              "対象登録者名
BWYT3-ERDAT = '/'.              "登録日
BWYT3-LIFN2 = PW_CODE.          "他の仕入先への参照
BWYT3-DEFPA = '/'.              "取引先初期値
BWYT3-SENDE = '/'.              "バッチインプットインタフェース

TRANSFER BWYT3 TO P_OUT.

* 出力レコード件数
ADD 1 TO GS_LINE-OUT.

* 既存データの削除
PERFORM DEL_BWYT3 USING PW_ID
PW_LIFNR
PW_EKORG
PW_CODE.
*
ENDFORM.                    " MAKE_BWYT3
*&---------------------------------------------------------------------*
*&      Form  INFO_PROC
*&---------------------------------------------------------------------*
*       text  結果出力
*----------------------------------------------------------------------*
FORM INFO_PROC.

CLOSE DATASET P_OUT.

MESSAGE I402(Y1) WITH '入力レコード:'  GS_LINE-IN '件'.
MESSAGE I402(Y1) WITH '出力仕入先コード:'  GS_LINE-TARGET '件'.

ENDFORM.                    " INFO_PROC
*&---------------------------------------------------------------------
*&      Form  DEL_BWYT3
*&---------------------------------------------------------------------
*       text  取引先データ削除処理
*----------------------------------------------------------------------
*FORM DEL_BWYT3 USING PW_ID
*                     PW_LIFNR
*                     PW_EKORG.
*
** ローカル定義
*  DATA :
*   LW_LIFN2    TYPE WYT3-LIFN2.
*
*  IF P_UPD = CNS_FLG_ON.
**
*    CHECK NOT PW_ID = CNS_PARVW-CLIENT. "取引先
**
*    SELECT LIFN2
*     INTO LW_LIFN2
*     FROM WYT3
*    WHERE LIFNR = PW_LIFNR
*      AND PARVW = PW_ID.
*
*      BWYT3-STYPE = '2'.              "レコードタイプ
*      BWYT3-TBNAM = 'BWYT3'.          "テーブル名
*      BWYT3-XDEKO = '/'.              "フラグ: バッチインプットによる
*      BWYT3-XDELE = 'X'.              "フラグ: バッチインプットで登録
*      BWYT3-EKORG = PW_EKORG.         "購買組織
*      BWYT3-LTSNR = '/'.              "仕入先部門
*      BWYT3-WERKS = '/'.              "プラント
*      BWYT3-PARVW = PW_ID.            "取引先機能区分
*      BWYT3-PARZA = '/'.              "取引先カウンタ
*      BWYT3-ERNAM = '/'.              "対象登録者名
*      BWYT3-ERDAT = '/'.              "登録日
*      BWYT3-LIFN2 = LW_LIFN2.         "他の仕入先への参照
*      BWYT3-DEFPA = '/'.              "取引先初期値
*      BWYT3-SENDE = '/'.              "バッチインプットインタフェース
*
*      TRANSFER BWYT3 TO P_OUT.
*
**     出力レコード件数
*      ADD 1 TO GS_LINE-OUT.
*    ENDSELECT.
*
*  ELSEIF PW_ID = CNS_PARVW-AGGREG.
*
*    BWYT3-STYPE = '2'.              "レコードタイプ
*    BWYT3-TBNAM = 'BWYT3'.          "テーブル名
*    BWYT3-XDEKO = '/'.              "フラグ: バッチインプットによる
*    BWYT3-XDELE = 'X'.              "フラグ: バッチインプットで登録
*    BWYT3-EKORG = PW_EKORG.         "購買組織
*    BWYT3-LTSNR = '/'.              "仕入先部門
*    BWYT3-WERKS = '/'.              "プラント
*    BWYT3-PARVW = PW_ID.            "取引先機能区分
*    BWYT3-PARZA = '/'.              "取引先カウンタ
*    BWYT3-ERNAM = '/'.              "対象登録者名
*    BWYT3-ERDAT = '/'.              "登録日
*    BWYT3-LIFN2 = PW_LIFNR.         "他の仕入先への参照
*    BWYT3-DEFPA = '/'.              "取引先初期値
*    BWYT3-SENDE = '/'.              "バッチインプットインタフェース
*
*    TRANSFER BWYT3 TO P_OUT.
*
**     出力レコード件数
*    ADD 1 TO GS_LINE-OUT.
*
*  ENDIF.
*
*ENDFORM.                                                    " DEL_BWYT3
*&---------------------------------------------------------------------*
*&      Form  DEL_BWYT3
*&---------------------------------------------------------------------*
FORM DEL_BWYT3   USING PW_ID
PW_LIFNR
PW_EKORG
PW_CODE.

* ローカル定義
DATA :
LW_LIFN2    TYPE WYT3-LIFN2.

IF P_UPD = CNS_FLG_ON.
*取引先機能が取引先でない場合実行する
CHECK NOT PW_ID = CNS_PARVW-CLIENT.
*
SELECT LIFN2
INTO LW_LIFN2
FROM WYT3
WHERE LIFNR = PW_LIFNR
AND PARVW = PW_ID.
*
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = LW_LIFN2
IMPORTING
OUTPUT = LW_LIFN2.
*変更時入力名寄とマスタの名寄が相違しているとき実行する
CHECK PW_CODE <> LW_LIFN2.
*
BWYT3-STYPE = '2'.              "レコードタイプ
BWYT3-TBNAM = 'BWYT3'.          "テーブル名
BWYT3-XDEKO = '/'.              "フラグ: バッチインプットによる
BWYT3-XDELE = 'X'.              "フラグ: バッチインプットで登録
BWYT3-EKORG = PW_EKORG.         "購買組織
BWYT3-LTSNR = '/'.              "仕入先部門
BWYT3-WERKS = '/'.              "プラント
BWYT3-PARVW = PW_ID.            "取引先機能区分
BWYT3-PARZA = '/'.              "取引先カウンタ
BWYT3-ERNAM = '/'.              "対象登録者名
BWYT3-ERDAT = '/'.              "登録日
BWYT3-LIFN2 = LW_LIFN2.         "他の仕入先への参照
BWYT3-DEFPA = '/'.              "取引先初期値
BWYT3-SENDE = '/'.              "バッチインプットインタフェース

TRANSFER BWYT3 TO P_OUT.

*     出力レコード件数
ADD 1 TO GS_LINE-OUT.
ENDSELECT.

ELSEIF PW_ID = CNS_PARVW-AGGREG.
*登録時、仕入先と名寄が相違している場合に実行する
CHECK PW_LIFNR <> PW_CODE.  "

BWYT3-STYPE = '2'.              "レコードタイプ
BWYT3-TBNAM = 'BWYT3'.          "テーブル名
BWYT3-XDEKO = '/'.              "フラグ: バッチインプットによる
BWYT3-XDELE = 'X'.              "フラグ: バッチインプットで登録
BWYT3-EKORG = PW_EKORG.         "購買組織
BWYT3-LTSNR = '/'.              "仕入先部門
BWYT3-WERKS = '/'.              "プラント
BWYT3-PARVW = PW_ID.            "取引先機能区分
BWYT3-PARZA = '/'.              "取引先カウンタ
BWYT3-ERNAM = '/'.              "対象登録者名
BWYT3-ERDAT = '/'.              "登録日
BWYT3-LIFN2 = PW_LIFNR.         "他の仕入先への参照
BWYT3-DEFPA = '/'.              "取引先初期値
BWYT3-SENDE = '/'.              "バッチインプットインタフェース

TRANSFER BWYT3 TO P_OUT.

*     出力レコード件数
ADD 1 TO GS_LINE-OUT.

ENDIF.


ENDFORM.                    " DEL_BWYT3_X
*&---------------------------------------------------------------------*
*&      Form  CHECK_LENTH
*&---------------------------------------------------------------------*
*       text  文字列の長さチェック
*----------------------------------------------------------------------*
FORM CHECK_LENTH USING PS_DATA   TYPE T_S_DATA
PW_CHARA
PW_TEXT
CHANGING PW_ERFLG.
DATA:
LW_LEN TYPE I.

CHECK PW_ERFLG IS INITIAL
AND PW_CHARA <> CNS_SYB-SLA.

* 文字列が35より大きいとき
LW_LEN = STRLEN( PW_CHARA ).
CHECK LW_LEN > 35.

MESSAGE I402 WITH  PW_TEXT
'が長すぎます.仕入='
PS_DATA-LIFNR.
* ERRORフラグ
PW_ERFLG = CNS_FLG_ON.

ENDFORM.                    " CHECK_LENTH
