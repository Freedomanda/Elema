*&---------------------------------------------------------------------*
*&  REPORT ZN012100                                                    *
*&         相殺反映                                                    *
*&---------------------------------------------------------------------*
*&  機能：相殺候補一覧で出力された、相殺ファイルをアップロードして
*&　　　  支払予定テーブル（ZN002）、入金予定テーブル（ZN005）に相殺の
*&        内容を反映する。
*&        相殺された内容に対して、買掛金、売掛金の消込仕訳を起票する。
*&  作成日   : 2012/03/21
*&  作成者   : SOLFIS
*&  変更履歴 : 2012/04/20 K.FURUYA
*&  変更内容 : 支払予定日と入金予定日を転記日で更新
*&           : 計上日の数値チェック追加（"/"混入対応）
*&  変更履歴 : 2012/04/25 K.FURUYA
*&  変更内容 : ファイルの相殺候補額妥当性チェック削除
*&           : 一覧表示には相殺候補額再計算結果を表示
*&  変更履歴 : 2012/05/07 K.ISHIZAKI
*&  変更内容 : 入金、支払金額の消込残がともに発生しない
*&           : 場合の伝票登録の対応
*&  変更履歴 : 2012/05/08 K.FURUYA
*&  変更内容 : マイナス相殺の対応
*&  変更履歴 : 2012/05/25 K.FURUYA
*&  変更内容 : 0円のダミー入金予定はスキップする対応
*&  　　　　 : 相殺額0は処理対象外とする
*&  　　　　 : 処理件数を一覧に表示
*&  　　　　 : 伝票日付をパラメータ⇒転記日付に変更
*&  変更履歴 : 2013/10/07 K.FURUYA
*&  変更内容 : DMW5788 同一締日、同一得意先、同一金額対応
*&---------------------------------------------------------------------*
*& YYYY/MM/DD  Programar         Description
*& 2012/10/16  ISID              ES-UP
*&---------------------------------------------------------------------*
REPORT ZN012100
NO STANDARD PAGE HEADING
LINE-SIZE  170 "255
LINE-COUNT 58  "65
MESSAGE-ID YN01.
*
TABLES:
ZN002, "支払予定（仕入）
ZN005. "入金予定（売上）
*----------------------------------------------------------------------*
*   定数定義
*----------------------------------------------------------------------*
CONSTANTS:
C_1(1)          TYPE C VALUE '1',
C_2(1)          TYPE C VALUE '2',
C_ON(1)         TYPE C VALUE 'X',
C_I(1)          TYPE C VALUE 'I',
C_U(1)          TYPE C VALUE 'U',
C_H(1)          TYPE C VALUE 'H',
C_N(1)          TYPE C VALUE 'N',
C_EQ(2)         TYPE C VALUE 'EQ',
C_KANMA(1)      TYPE C VALUE ',',
C_ERR(1)        TYPE C VALUE 'E',
C_X(1)          TYPE C VALUE 'X',
C_A(1)          TYPE C VALUE 'A',
C_B(1)          TYPE C VALUE 'B',
C_E(1)          TYPE C VALUE 'E',
C_S(1)          TYPE C VALUE 'S',
C_T(1)          TYPE C VALUE 'T',
C_K(1)          TYPE C VALUE 'K',
C_D(1)          TYPE C VALUE 'D',
C_JPY           TYPE BKPF-WAERS VALUE 'JPY',
C_TAXJP         TYPE T005-KALSM VALUE 'TAXJP',
C_MINDK_SP(4)   TYPE C VALUE '締日',
C_MINDK_01(4)   TYPE C VALUE '払日',
C_MINDK_02(4)   TYPE C VALUE '売全',
C_MINDK_03(4)   TYPE C VALUE '仕全'.
* Add ES-UP 2012/10/16 -->
CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
* Add ES-UP 2012/10/16 <--
*----------------------------------------------------------------------*
*   構造/テーブル定義
*----------------------------------------------------------------------*
TYPES:
BEGIN OF TY_IN_FILE,
* Mod ES-UP 2012/10/24 -->
*   DATA(500) TYPE C,
DATA TYPE string,
* Mod ES-UP 2012/10/24 <--
END   OF TY_IN_FILE.
DATA :
GT_IN_FILE TYPE STANDARD TABLE OF TY_IN_FILE,
GW_IN_FILE TYPE TY_IN_FILE.
*
TYPES:
BEGIN OF TY_IN_REC,
MINDK_NM(4)     TYPE C,             "マスタ
WAERS           TYPE ZN002-WAERS,   "通貨
KJDATE          TYPE ZN002-PZFBDT,  "計上日
PWRBTR_ALL(17)  TYPE C,             "相殺候補額
PLIFNR          TYPE ZN002-PLIFNR,  "相殺先
LIFNR           TYPE ZN002-LIFNR,   "仕入先
PWRBTR(17)      TYPE C,             "支払予定額
PZFBDT          TYPE ZN002-PZFBDT,  "支払日
CZFBDT_02       TYPE ZN002-CZFBDT,  "照合締日
ZTERM_02        TYPE LFM1-ZTERM,    "支払条件
KUNNR           TYPE ZN005-KUNNR,   "得意先
VKBUR           TYPE TVKBT-VKBUR,   "部門
IWRBTR(17)      TYPE C,             "入金予定額
IZFBDT          TYPE ZN005-IZFBDT,  "入金予定日
CZFBDT_05       TYPE ZN005-CZFBDT,  "照合締日
NAME1           TYPE KNA1-NAME1,    "得意先名称
ZFAEL(2)        TYPE C,             "締日
ZSTG1(2)        TYPE C,             "入金日
ZTERM_05        TYPE KNVV-ZTERM,    "入金条件
CMNT            TYPE C,  "コメント
IWRBTR_MATU(17)  TYPE C,  "入金予定額(未）
WRBTR(17)        TYPE C,  "売掛残
KNETXAMT(17)     TYPE C,  "当月未検収
ZNYO(1)          TYPE C,  "残余優先
*
ZCNT              TYPE I,  "レコードNo
ZPWRBTR_ALL       TYPE ZN002-PWRBTR,   "相殺候補額
ZPWRBTR           TYPE ZN002-PWRBTR,   "支払予定額
ZIWRBTR           TYPE ZN005-IWRBTR,   "入金予定額
SUMI(1)           TYPE C,              "確認用
END   OF TY_IN_REC.
DATA :
GT_IN_REC TYPE STANDARD TABLE OF TY_IN_REC,
GW_IN_REC TYPE TY_IN_REC,
GT_IN_REC_ZN002 TYPE STANDARD TABLE OF TY_IN_REC,
GT_IN_REC_ZN005 TYPE STANDARD TABLE OF TY_IN_REC.

*
TYPES:
BEGIN OF TY_KUNNR,
KUNNR    TYPE KNVP-KUNNR,  "得意先
WAERS    TYPE KNVV-WAERS,  "通貨コード
END   OF TY_KUNNR.
TYPES:
BEGIN OF TY_LIFNR,
LIFNR    TYPE KNVP-LIFNR,  "仕入先
WAERS    TYPE LFM1-WAERS,  "通貨コード
END   OF TY_LIFNR.
DATA :
GT_SP_KUNNR   TYPE STANDARD TABLE OF TY_KUNNR,
GT_SP_LIFNR   TYPE STANDARD TABLE OF TY_LIFNR,
GT_0203_KUNNR TYPE STANDARD TABLE OF TY_KUNNR,
GT_0203_LIFNR TYPE STANDARD TABLE OF TY_LIFNR,
GT_01_KUNNR   TYPE STANDARD TABLE OF TY_KUNNR,
GT_01_LIFNR   TYPE STANDARD TABLE OF TY_LIFNR,
*
GW_KUNNR      TYPE TY_KUNNR,
GW_LIFNR      TYPE TY_LIFNR.
*
TYPES:
BEGIN OF TY_KNVP,
KUNNR    TYPE KNVP-KUNNR,  "得意先
LIFNR    TYPE KNVP-LIFNR,  "仕入先
NAME1_D  TYPE KNA1-NAME1,  "名称１
ZTERM_D  TYPE KNVV-ZTERM,  "支払条件キー
WAERS_D  TYPE KNVV-WAERS,  "通貨コード
VKBUR    TYPE KNVV-VKBUR,  "営業所
NAME1_K  TYPE LFA1-NAME1,  "名称１
MINDK    TYPE LFB1-MINDK,  "少数コード
ZTERM_K  TYPE LFM1-ZTERM,  "支払条件キー
WAERS_K  TYPE LFM1-WAERS,  "通貨コード
END   OF TY_KNVP.
DATA: GT_KNVP TYPE STANDARD TABLE OF TY_KNVP,
GW_KNVP TYPE TY_KNVP.
*
TYPES:
BEGIN OF TY_LIFNR_TBL,
LIFNR    TYPE LFA1-LIFNR,  "仕入先
AKONT    TYPE LFB1-AKONT,  "総勘定元帳の統制勘定
WAERS    TYPE LFM1-WAERS,  "通貨コード
END   OF TY_LIFNR_TBL.
DATA: GT_LIFNR_TBL TYPE HASHED TABLE OF TY_LIFNR_TBL
WITH UNIQUE KEY LIFNR,
GW_LIFNR_TBL TYPE TY_LIFNR_TBL.
TYPES:
BEGIN OF TY_KUNNR_TBL,
KUNNR    TYPE KNA1-KUNNR,  "得意先
AKONT    TYPE KNB1-AKONT,  "総勘定元帳の統制勘定
WAERS    TYPE KNVV-WAERS,  "通貨コード
END   OF TY_KUNNR_TBL.
DATA: GT_KUNNR_TBL TYPE HASHED TABLE OF TY_KUNNR_TBL
WITH UNIQUE KEY KUNNR,
GW_KUNNR_TBL TYPE TY_KUNNR_TBL.
*
TYPES:
BEGIN OF TY_PLIFNR,
PLIFNR    TYPE LFA1-LIFNR,  "相殺先
END   OF TY_PLIFNR.
DATA: GT_PLIFNR TYPE STANDARD TABLE OF TY_PLIFNR,
GW_PLIFNR TYPE TY_PLIFNR.
TYPES:
BEGIN OF TY_PLIFNR_ERR,
PLIFNR        TYPE LFA1-LIFNR,  "相殺先
ERRMSG(100)   TYPE C,        "エラー内容
FLG_O         TYPE C,        "対象外フラグ "2012/05/25
END   OF TY_PLIFNR_ERR.
DATA: GT_PLIFNR_ERR TYPE STANDARD TABLE OF TY_PLIFNR_ERR,
GW_PLIFNR_ERR TYPE TY_PLIFNR_ERR.
*
TYPES:
BEGIN OF TY_PLIFNR_OK,
PLIFNR       TYPE LFA1-LIFNR,  "相殺先
BELNR        TYPE ZN002-BELNR, "会計伝票
END   OF TY_PLIFNR_OK.
DATA: GT_PLIFNR_OK TYPE STANDARD TABLE OF TY_PLIFNR_OK,
GW_PLIFNR_OK TYPE TY_PLIFNR_OK.
*
TYPES:
BEGIN OF TY_PLIFNR_MOD,
PLIFNR    TYPE LFA1-LIFNR,  "相殺先
END   OF TY_PLIFNR_MOD.
DATA: GT_PLIFNR_MOD TYPE STANDARD TABLE OF TY_PLIFNR_MOD,
GW_PLIFNR_MOD TYPE TY_PLIFNR_MOD.
*
TYPES:
BEGIN OF TY_T077K,
KTOKK TYPE T077K-KTOKK, "勘定グループ
END   OF TY_T077K.
DATA: GT_T077K TYPE HASHED TABLE OF TY_T077K
WITH UNIQUE KEY KTOKK,
GW_T077K TYPE TY_T077K.
*
TYPES:
BEGIN OF TY_T077D,
KTOKD TYPE T077D-KTOKD, "勘定グループ
END   OF TY_T077D.
DATA: GT_T077D TYPE HASHED TABLE OF TY_T077D
WITH UNIQUE KEY KTOKD,
GW_T077D TYPE TY_T077D.
*
DATA: GT_ZN002   TYPE TABLE OF ZN002,
GW_ZN002   TYPE ZN002.
DATA: GT_ZN002_D TYPE TABLE OF ZN002,
GW_ZN002_D TYPE ZN002.
DATA: GT_ZN005   TYPE TABLE OF ZN005,
GW_ZN005   TYPE ZN005.
DATA: GT_ZN005_D TYPE TABLE OF ZN005,
GW_ZN005_D TYPE ZN005.

DATA: GT_YN220   TYPE TABLE OF YN220,
GW_YN220   TYPE YN220.
DATA: GT_YN120   TYPE TABLE OF YN120,
GW_YN120   TYPE YN120.

TYPES: BEGIN OF TY_ZN002_NEW.
INCLUDE STRUCTURE ZN002.
TYPES:ZNYO(1) TYPE C,  "残余優先
UPDT(1) TYPE C.  "更新ステータス SPACE,I,D,U
TYPES: END   OF TY_ZN002_NEW.
DATA:GT_ZN002_NEW TYPE TABLE OF TY_ZN002_NEW,
GW_ZN002_NEW TYPE TY_ZN002_NEW.
DATA:GT_ZN002_MOD TYPE TABLE OF TY_ZN002_NEW,
GW_ZN002_MOD TYPE TY_ZN002_NEW.
*
TYPES: BEGIN OF TY_ZN005_NEW.
INCLUDE STRUCTURE ZN005.
TYPES:ZNYO(1) TYPE C,  "残余優先
UPDT(1) TYPE C.  "更新ステータス SPACE,I,D,U
TYPES: END   OF TY_ZN005_NEW.
DATA:GT_ZN005_NEW TYPE TABLE OF TY_ZN005_NEW,
GW_ZN005_NEW TYPE TY_ZN005_NEW.
DATA:GT_ZN005_MOD TYPE TABLE OF TY_ZN005_NEW, "テーブル更新用
GW_ZN005_MOD TYPE TY_ZN005_NEW.
*
TYPES:
BEGIN OF TY_ZN002_TBL,           "支払予定（仕入）
LIFNR       TYPE ZN002-LIFNR,       "請求先
CZFBDT      TYPE ZN002-CZFBDT,      "照合締日
PWRBTR      TYPE ZN002-PWRBTR,      "支払予定額
PWRBTR_NOW  TYPE ZN002-PWRBTR,      "支払予定額(今回)
WAERS       TYPE ZN002-WAERS,       "通貨
KNETXAMT    TYPE YN220-KNETXAMT,    "税込金額 14.2
SYORI_CNT   TYPE I,                 "今回処理件数
SUMI_CNT    TYPE I,                 "振替済件数
MISYORI_CNT TYPE I,                 "未処理件数
YN220_CNT   TYPE I,                 "自社データ件数
*
SAGAKU      TYPE YN220-KNETXAMT,    "差額
YNGJAHR     TYPE YN220-YNGJAHR,     "会計伝票会計年度
BELNR       TYPE YN220-BELNR,       "会計伝票番号
BUZEI       TYPE YN220-BUZEI,       "会計伝票明細番号
ZTERM       TYPE BSIK-ZTERM,        "支払条件キー
ZFBDT       TYPE BSIK-ZFBDT,        "期日計算の支払基準日
ZLSCH       TYPE BSIK-ZLSCH,        "支払方法
ZLSPR       TYPE BSIK-ZLSPR,        "支払保留
END   OF TY_ZN002_TBL.
DATA: GT_ZN002_TBL TYPE STANDARD TABLE OF TY_ZN002_TBL,
GT_ZN002_BDC TYPE STANDARD TABLE OF TY_ZN002_TBL,
GW_ZN002_TBL TYPE TY_ZN002_TBL,
GW_ZN002_BDC TYPE TY_ZN002_TBL,
GW_ZN002_SUB TYPE TY_ZN002_TBL.
*
TYPES:
BEGIN OF TY_ZN005_TBL,                "入金予定（売上）
KUNNR       TYPE ZN005-KUNNR,       "支払人
CZFBDT      TYPE ZN005-CZFBDT,      "照合締日
IWRBTR      TYPE ZN005-IWRBTR,      "入金予定額
IWRBTR_NOW  TYPE ZN005-IWRBTR,      "入金予定額(今回)
WAERS       TYPE ZN005-WAERS,       "通貨
KNETXAMT    TYPE YN120-KNETXAMT,    "税込金額
SYORI_CNT   TYPE I,                 "今回処理件数
SUMI_CNT    TYPE I,                 "振替済件数
MISYORI_CNT TYPE I,                 "未処理件数
YN220_CNT   TYPE I,                 "自社データ件数
*
SAGAKU      TYPE YN120-KNETXAMT,    "差額
YNGJAHR     TYPE YN120-YNGJAHR,     "会計伝票会計年度
BELNR       TYPE YN120-BELNR,       "会計伝票番号
BUZEI       TYPE YN120-BUZEI,       "会計伝票明細番号
ZTERM       TYPE BSID-ZTERM,        "支払条件キー
ZFBDT       TYPE BSID-ZFBDT,        "期日計算の支払基準日
ZLSCH       TYPE BSID-ZLSCH,        "支払方法
ZLSPR       TYPE BSID-ZLSPR,        "支払保留

END   OF TY_ZN005_TBL.
DATA: GT_ZN005_TBL TYPE STANDARD TABLE OF TY_ZN005_TBL,
GT_ZN005_BDC TYPE STANDARD TABLE OF TY_ZN005_TBL,
GW_ZN005_TBL TYPE TY_ZN005_TBL,
GW_ZN005_BDC TYPE TY_ZN005_TBL,
GW_ZN005_SUB TYPE TY_ZN005_TBL.
*
TYPES:
BEGIN OF TY_ILIFNR_IWRBTR_SUM,
ILIFNR TYPE ZN005-ILIFNR, "相殺先
IWRBTR TYPE ZN005-IWRBTR, "入金予定額
END   OF TY_ILIFNR_IWRBTR_SUM.
DATA:
GT_ILIFNR_IWRBTR_SUM  TYPE STANDARD TABLE OF TY_ILIFNR_IWRBTR_SUM,
GW_ILIFNR_IWRBTR_SUM  TYPE TY_ILIFNR_IWRBTR_SUM.
*
TYPES:
BEGIN OF TY_ILIFNR_PWRBTR_SUM,
ILIFNR TYPE ZN005-ILIFNR, "相殺先
PWRBTR TYPE ZN002-PWRBTR, "支払予定額
END   OF TY_ILIFNR_PWRBTR_SUM.
DATA:
GT_ILIFNR_PWRBTR_SUM  TYPE STANDARD TABLE OF TY_ILIFNR_PWRBTR_SUM,
GW_ILIFNR_PWRBTR_SUM  TYPE TY_ILIFNR_PWRBTR_SUM.
*
TYPES:
BEGIN OF TY_OUT_ILIFNR,
ILIFNR TYPE ZN005-ILIFNR, "相殺先
END   OF TY_OUT_ILIFNR.
DATA:
GT_OUT_ILIFNR_ZN002 TYPE STANDARD TABLE OF TY_OUT_ILIFNR,
GT_OUT_ILIFNR_ZN005 TYPE STANDARD TABLE OF TY_OUT_ILIFNR,
GW_OUT_ILIFNR_ZN002 TYPE TY_OUT_ILIFNR,
GW_OUT_ILIFNR_ZN005 TYPE TY_OUT_ILIFNR.
*
*
TYPES:
BEGIN OF TY_YN220_NEW,
VRFCTON TYPE YN220-VRFCTON,   "仕入先コード(請求先)
CZFBDT TYPE YN220-CZFBDT,     "照合締日
LDATE1 TYPE YN220-LDATE1,     "入庫日
YNGJAHR TYPE YN220-YNGJAHR,   "会計伝票会計年度
BELNR TYPE YN220-BELNR,       "会計伝票番号
BUZEI TYPE YN220-BUZEI,       "会計伝票明細番号
KNETXAMT TYPE YN220-KNETXAMT, "税込金額
WAERS    TYPE YN220-WAERS,    "通貨コード
ZTERM    TYPE BSIK-ZTERM,     "支払条件キー
ZFBDT    TYPE BSIK-ZFBDT,     "期日計算の支払基準日
ZLSCH    TYPE BSIK-ZLSCH,     "支払方法
ZLSPR    TYPE BSIK-ZLSPR,     "支払保留
END   OF TY_YN220_NEW.
DATA: GT_YN220_NEW TYPE STANDARD TABLE OF TY_YN220_NEW,
GW_YN220_NEW TYPE TY_YN220_NEW.
DATA: GT_YN220_NOW TYPE STANDARD TABLE OF TY_YN220_NEW,
GW_YN220_NOW TYPE TY_YN220_NEW.
DATA: GT_YN220_DEL TYPE STANDARD TABLE OF TY_YN220_NEW,
GW_YN220_DEL TYPE TY_YN220_NEW.
DATA: GT_YN220_DEL_NOW TYPE STANDARD TABLE OF TY_YN220_NEW,
GW_YN220_DEL_NOW TYPE TY_YN220_NEW.
DATA: GW_YN220_NOW_BACKUP TYPE TY_YN220_NEW.

TYPES:
BEGIN OF TY_YN120_NEW,
VRFCTON TYPE YN120-VRFCTON,   "仕入先コード(請求先)
CZFBDT TYPE YN120-CZFBDT,     "照合締日
YNGJAHR TYPE YN120-YNGJAHR,   "会計伝票会計年度
BELNR TYPE YN120-BELNR,       "会計伝票番号
BUZEI TYPE YN120-BUZEI,       "会計伝票明細番号
KNETXAMT TYPE YN120-KNETXAMT, "税込金額
WAERS    TYPE YN120-WAERS,    "通貨コード
ZTERM    TYPE BSID-ZTERM,     "支払条件キー
ZFBDT    TYPE BSID-ZFBDT,     "期日計算の支払基準日
ZLSCH    TYPE BSID-ZLSCH,     "支払方法
ZLSPR    TYPE BSID-ZLSPR,     "支払保留

END   OF TY_YN120_NEW.
DATA: GT_YN120_NEW TYPE STANDARD TABLE OF TY_YN120_NEW,
GW_YN120_NEW TYPE TY_YN120_NEW.
DATA: GT_YN120_NOW TYPE STANDARD TABLE OF TY_YN120_NEW,
GW_YN120_NOW TYPE TY_YN120_NEW.
DATA: GT_YN120_DEL TYPE STANDARD TABLE OF TY_YN120_NEW,
GW_YN120_DEL TYPE TY_YN120_NEW.
DATA: GT_YN120_DEL_NOW TYPE STANDARD TABLE OF TY_YN120_NEW,
GW_YN120_DEL_NOW TYPE TY_YN120_NEW.
DATA: GW_YN120_NOW_BACKUP TYPE TY_YN120_NEW.

TYPES:
BEGIN OF TY_BELNR_TBL,
BELNR TYPE BSIK-BELNR, "会計伝票番号
GJAHR TYPE BSIK-GJAHR, "会計年度
BUZEI TYPE BSIK-BUZEI, "会計伝票内の明細番号
END   OF TY_BELNR_TBL.
DATA: GT_ZN002_BELNR_TBL TYPE STANDARD TABLE OF TY_BELNR_TBL,
GW_ZN002_BELNR_TBL TYPE TY_BELNR_TBL.
DATA: GT_ZN005_BELNR_TBL TYPE STANDARD TABLE OF TY_BELNR_TBL,
GW_ZN005_BELNR_TBL TYPE TY_BELNR_TBL.
DATA:
GT_BDC_DATA TYPE TABLE OF BDCDATA,
GW_BDC_DATA TYPE BDCDATA,
GT_BDC_MSG  TYPE TABLE OF BDCMSGCOLL,
GW_BDC_MSG  TYPE BDCMSGCOLL.
*
DATA :
GW_ERR(1)        TYPE C,             "エラー
GW_BKPF_XMWST(1) TYPE C,
GW_F-30_MODE(1)  TYPE C,
GW_PWRBTR_ALL    TYPE ZN005-IWRBTR,  "相殺候補額
GW_PWRBTR_SUM    TYPE ZN002-PWRBTR,  "支払予定額
GW_IWRBTR_SUM    TYPE ZN005-IWRBTR,  "入金予定額
GW_ZN002_PWRBTR  TYPE ZN002-PWRBTR,
GW_ZN005_IWRBTR  TYPE ZN005-IWRBTR,
GW_LIFNR_ST(1)   TYPE C,
GW_AKONT         TYPE LFB1-AKONT,    "総勘定元帳の統制勘定
GW_KJDATE        TYPE ZN002-CZFBDT,  "計上日
GW_BUDAT         TYPE BKPF-BUDAT,    "転記日
GW_BUDAT_YEAR    TYPE BAPI0002_4-FISCAL_YEAR,
GW_KJDATE_YEAR   TYPE BAPI0002_4-FISCAL_YEAR,
GW_SORT_TBL(5)   TYPE C,
GW_SAGAKU        TYPE ZN005-IWRBTR,
GW_F30K_LIFNR    TYPE BSIK-LIFNR, "振替済請求先
GW_F30K_GJAHR    TYPE BSIK-GJAHR, "振替済会計年度
GW_F30K_BELNR    TYPE BSIK-BELNR, "振替済会計伝票番号
GW_F30K_BUZEI    TYPE BSIK-BUZEI, "振替済会計伝票内の明細番号
GW_F30D_KUNNR    TYPE BSID-KUNNR, "振替済請求先
GW_F30D_GJAHR    TYPE BSID-GJAHR, "振替済会計年度
GW_F30D_BELNR    TYPE BSID-BELNR, "振替済会計伝票番号
GW_F30D_BUZEI    TYPE BSID-BUZEI, "振替済会計伝票内の明細番号
GW_RF05A_SEL01   TYPE RF05A-SEL01,     "未決済明細選択基準の入力項目
GW_ZN002_INDEX   TYPE I,
GW_ZN005_INDEX   TYPE I,
GW_ZN002_NEXT    TYPE I,
GW_ZN005_NEXT    TYPE I,
GW_DATUM          TYPE SY-DATUM,   "日付
GW_UZEIT          TYPE SY-UZEIT,   "時刻
GW_UNAME          TYPE SY-UNAME,   "ユーザ
GW_GJAHR          TYPE BSIK-GJAHR,   "会計年度
GW_NEWBS          TYPE RF05A-NEWBS,     "次明細の転記キー
GW_NEWKO          TYPE RF05A-NEWKO,     "次明細の勘定またはマッチコード
GW_YN220_KNETXAMT TYPE YN220-KNETXAMT,  "税込金額
GW_KTOPL         TYPE T001-KTOPL,    "勘定コード表
GW_KOKRS         TYPE TKA02-KOKRS,   "管理領域
GW_MINDK_NM(4)   TYPE C,             "マスタ
GW_WAERS         TYPE ZN002-WAERS,   "通貨
GW_BK_ILIFNR     TYPE ZN005-ILIFNR,  "相殺先
GW_ACZFBD        TYPE ZN002-CZFBDT,  "締日相殺：照合締日
GW_BCZFBD        TYPE ZN002-CZFBDT,  "全額相殺：照合締日
GW_IZFBDT        TYPE ZN005-IZFBDT,  "支払日相殺：入金予定日
GW_ZN002_CNT     TYPE I,             "支払予定（仕入）件数
GW_ZN005_CNT     TYPE I,             "入金予定（売上）件数
GW_OK_CNT        TYPE I,             "正常件数
GW_ERR_CNT       TYPE I,             "エラー件数
GW_O_CNT         TYPE I,             "対象外件数
GW_OUT_CNT       TYPE I,             "出力件数
GW_PAGE          TYPE P.             "ページ
*---------------------------------------------------------------------*
*　選択画面
*---------------------------------------------------------------------+
*データ選択
SELECTION-SCREEN BEGIN OF BLOCK BK1 WITH FRAME TITLE TEXT-S01.
PARAMETERS:
P_BUKRS TYPE ZN002-BUKRS OBLIGATORY MEMORY ID BUK, "会社コード
P_BUDAT TYPE BKPF-BUDAT  OBLIGATORY,               "転記日
P_INFILE(128) TYPE C LOWER CASE OBLIGATORY.        "入力ファイル

SELECTION-SCREEN END OF BLOCK BK1.
*処理オプション
SELECTION-SCREEN BEGIN OF BLOCK BK2 WITH FRAME TITLE TEXT-S02.
PARAMETERS:
P_TEST  AS CHECKBOX DEFAULT 'X',
P_BLART TYPE BKPF-BLART, "伝票タイプ
*   P_BLDAT TYPE BKPF-BLDAT, "伝票日付    "2012/05/25 DEL
P_BKTXT TYPE BKPF-BKTXT. "伝票ヘッダText
SELECTION-SCREEN END OF BLOCK BK2.
*仕入先システム項目
SELECTION-SCREEN BEGIN OF BLOCK BK3 WITH FRAME TITLE TEXT-S03.
PARAMETERS:
P_EKORG TYPE LFM1-EKORG OBLIGATORY. "購買組織
SELECTION-SCREEN END OF BLOCK BK3.
*得意先システム項目
SELECTION-SCREEN BEGIN OF BLOCK BK4 WITH FRAME TITLE TEXT-S04.
PARAMETERS:
* P_PARVW  TYPE KNVP-PARVW OBLIGATORY, "相殺取引先機能
P_VKORG  TYPE KNVV-VKORG OBLIGATORY, "販売組織
P_VTWEG  TYPE KNVV-VTWEG OBLIGATORY, "流通チャネル
P_SPART  TYPE KNVV-SPART OBLIGATORY. "製品部門
SELECTION-SCREEN END OF BLOCK BK4.
*システム項目
SELECTION-SCREEN BEGIN OF BLOCK BK5 WITH FRAME TITLE TEXT-S05.
PARAMETERS:
*-雑収入勘定
P_HKONTA  TYPE BSAK-HKONT OBLIGATORY MATCHCODE OBJECT SAKO,
P_MWSKZA  TYPE BSAK-MWSKZ OBLIGATORY,
*-雑損失勘定
P_HKONTB  TYPE BSAK-HKONT OBLIGATORY MATCHCODE OBJECT SAKO,
P_MWSKZB  TYPE BSAK-MWSKZ OBLIGATORY,
*-原価センタ
P_KOSTL   TYPE BSAK-KOSTL OBLIGATORY MATCHCODE OBJECT KOST.
SELECTION-SCREEN END OF BLOCK BK5.
*&--------------------------------------------------------------------
*&   Event AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_OTFILE
*&--------------------------------------------------------------------
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_INFILE.
* エラーファイル名の検索ヘルプ
PERFORM F4HELP_P_INFILE USING P_INFILE.
*&--------------------------------------------------------------------
*&   Event AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_MWSKZA
*&--------------------------------------------------------------------
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_MWSKZA.
PERFORM FI_F4_MWSKZ USING  P_MWSKZA.
*&--------------------------------------------------------------------
*&   Event AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_MWSKZB
*&--------------------------------------------------------------------
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_MWSKZB.
PERFORM FI_F4_MWSKZ USING  P_MWSKZB.
*&---------------------------------------------------------------------*
*&   Event AT SELECTION-SCREEN
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN.
*会社コード
PERFORM P_BUKRS_CHECK.
*転記日付
PERFORM P_BUDAT_CHECK.
*伝票タイプ
PERFORM P_BLART_CHECK.
*伝票日付
*  PERFORM P_BLDAT_CHECK.  "2012/05/25 DEL
*伝票ヘッダText
PERFORM P_BKTXT_CHECK.
*仕入先システム項目
PERFORM P_EKORG_CHECK.
*得意先システム項目
*   PERFORM P_PARVW_CHECK.
PERFORM P_VKORG_CHECK.
PERFORM P_VTWEG_CHECK.
PERFORM P_SPART_CHECK.
*システム項目
PERFORM SYSTEM_CHECK.
*
*&---------------------------------------------------------------------*
*&   Event AT SELECTION-SCREEN
*&---------------------------------------------------------------------*
START-OF-SELECTION.
*初期処理
PERFORM PGM_INIT.
*アップロード
PERFORM F_GUI_UPLOAD.
*データ取得
PERFORM GET_DATA.
*データ制御
PERFORM MAIN_PROC.
*終了処理
PERFORM END_MSG.
*
END-OF-SELECTION.
*&---------------------------------------------------------------------*
*&      TOP-OF-PAGE
*&---------------------------------------------------------------------*
TOP-OF-PAGE.
*
GW_PAGE = GW_PAGE + 1.
*
WRITE:/55 TEXT-H01,    "相殺反映
104 TEXT-H02,    "ページ：
112(3) GW_PAGE.
WRITE:/52 '=============='.
IF P_TEST = C_ON.  "テスト実行
IF GW_ERR_CNT = 0.
WRITE:/45   TEXT-H90. "【テスト実行：正常予定】
ELSE.
WRITE:/46   TEXT-H91. "【テスト実行：エラー】
ENDIF.
ELSE.
IF GW_ERR_CNT = 0.
WRITE:/46   TEXT-H92. "【本実行：正常終了】
ELSE.
WRITE:/47   TEXT-H93. "【本実行：正常終了】
ENDIF.
ENDIF.

WRITE:104   TEXT-H03,    "作成年月日
115   SY-DATUM,
127   SY-UZEIT.
*
SKIP 1.
*
FORMAT COLOR 1 ON. "ヘッダ部網掛け
WRITE:/1 TEXT-H04, "伝票番号
12 TEXT-H05, "マスタ
17 TEXT-H06, "通貨
22 TEXT-H07, "転記日付
34 TEXT-H08, "相殺先
50(110) TEXT-H09. "相殺候補額
WRITE:/1  TEXT-H10, "取引先
12 TEXT-H11, "取引先名称
50 TEXT-H12, "支払予定額
64 TEXT-H13, "締日
80 TEXT-H14, "入金予定額
92 TEXT-H15, "締日
104(56) TEXT-H16. "エラー内容
FORMAT COLOR OFF.
ULINE.
*
*&---------------------------------------------------------------------*
*&      Form  PGM_INIT
*&---------------------------------------------------------------------*
FORM PGM_INIT.
*
GW_F-30_MODE = C_N.
*
CLEAR:GW_BK_ILIFNR,
GW_ZN002_CNT,     "支払予定（仕入）件数
GW_ZN005_CNT,     "入金予定（売上）件数
GW_OK_CNT,        "正常件数
GW_ERR_CNT,       "エラー件数
GW_O_CNT.         "対象外件数
*
REFRESH:GT_IN_FILE,
GT_IN_REC,
GT_PLIFNR_ERR,
GT_PLIFNR_OK.
*
GW_DATUM = SY-DATUM.   "日付
GW_UZEIT = SY-UZEIT.   "時刻
GW_UNAME = SY-UNAME.   "ユーザ
*
ENDFORM.                    " PGM_INIT
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
FORM GET_DATA.
*
PERFORM GET_IN_REC.
PERFORM GET_T077K.   "仕入先ワンタイム勘定の取得
PERFORM GET_T077D.   "得意先ワンタイム勘定の取得
*
PERFORM INPUT_CHECK. "入力チェック
*
ENDFORM.                    " GET_DATA
*&---------------------------------------------------------------------*
*&      Form  MAIN_PROC
*&---------------------------------------------------------------------*
FORM MAIN_PROC.
DATA :
L_SUBRC  TYPE SY-SUBRC,
L_PWRBTR TYPE ZN002-PWRBTR,
L_IWRBTR TYPE ZN005-IWRBTR,
L_ANSER  TYPE ZN005-IWRBTR.
*
REFRESH GT_PLIFNR_MOD.
SORT GT_PLIFNR_ERR BY PLIFNR.
*テスト実行でない場合
CHECK P_TEST IS INITIAL.
*処理する相殺先を取得する
LOOP AT GT_PLIFNR INTO GW_PLIFNR.
READ TABLE GT_PLIFNR_ERR WITH KEY PLIFNR  = GW_PLIFNR-PLIFNR
INTO  GW_PLIFNR_ERR BINARY SEARCH.
IF SY-SUBRC <> 0.
APPEND GW_PLIFNR TO GT_PLIFNR_MOD.
ENDIF.
ENDLOOP.
*
SORT GT_PLIFNR_MOD BY PLIFNR.
*
* 相殺先単位で実行
*
LOOP AT GT_PLIFNR_MOD INTO GW_PLIFNR_MOD.  "
*
REFRESH:GT_IN_REC_ZN002,
GT_IN_REC_ZN005,
GT_ZN002_TBL,
GT_ZN005_TBL.
*
CLEAR:GW_ZN002_TBL,
GW_ZN005_TBL,
GW_PWRBTR_SUM,
GW_IWRBTR_SUM,
GW_ERR,
GW_KJDATE,GW_KJDATE_YEAR.
*
*支払、入金振分け
LOOP AT GT_IN_REC INTO GW_IN_REC
WHERE PLIFNR = GW_PLIFNR_MOD-PLIFNR.

CHECK GW_ERR IS INITIAL.
*支払
IF NOT GW_IN_REC-LIFNR IS INITIAL.

PERFORM F_BAPI_CURRENCY_CONV_TO_INTERN
USING GW_IN_REC-WAERS GW_IN_REC-PWRBTR
18 L_PWRBTR.
**支払金額を集合
GW_PWRBTR_SUM = GW_PWRBTR_SUM + L_PWRBTR.
**仕入先、照合締日を集合
CLEAR:GW_ZN002_TBL.
GW_ZN002_TBL-LIFNR  = GW_IN_REC-LIFNR.     "仕入先
GW_ZN002_TBL-CZFBDT = GW_IN_REC-CZFBDT_02. "照合締日
GW_ZN002_TBL-WAERS  = GW_IN_REC-WAERS.     "通貨
GW_ZN002_TBL-PWRBTR = GW_IN_REC-ZPWRBTR.   "支払予定額
COLLECT GW_ZN002_TBL INTO GT_ZN002_TBL.
*計上日取得
IF NOT GW_IN_REC-KJDATE = SPACE.
GW_KJDATE = GW_IN_REC-KJDATE.
PERFORM CHECK_KJDATE USING GW_KJDATE.
ENDIF.
*
APPEND GW_IN_REC TO GT_IN_REC_ZN002.
ENDIF.
*入金
IF NOT GW_IN_REC-KUNNR IS INITIAL.
PERFORM F_BAPI_CURRENCY_CONV_TO_INTERN
USING GW_IN_REC-WAERS GW_IN_REC-IWRBTR
18 L_IWRBTR.
**入金金額を集合
GW_IWRBTR_SUM = GW_IWRBTR_SUM + L_IWRBTR.
**得意先、照合締日を集合
CLEAR:GW_ZN005_TBL.
GW_ZN005_TBL-KUNNR  = GW_IN_REC-KUNNR.     "得意先
GW_ZN005_TBL-CZFBDT = GW_IN_REC-CZFBDT_05. "照合締日
GW_ZN005_TBL-WAERS  = GW_IN_REC-WAERS.     "通貨
GW_ZN005_TBL-IWRBTR = GW_IN_REC-ZIWRBTR.   "入金予定額
COLLECT GW_ZN005_TBL INTO GT_ZN005_TBL.
*
APPEND GW_IN_REC TO GT_IN_REC_ZN005.
ENDIF.
ENDLOOP.
*予定テーブルをロックする
PERFORM F_TBL_LOCK USING L_SUBRC GW_PLIFNR_MOD-PLIFNR.
IF NOT L_SUBRC IS INITIAL.
GW_ERR = C_ERR.
ENDIF.
*
*転記日決定
IF GW_KJDATE IS INITIAL.
GW_BUDAT = P_BUDAT.        "画面の転記日
GW_GJAHR = GW_BUDAT_YEAR.  "会計年度

ELSE.
GW_BUDAT = GW_KJDATE.       "計上日
GW_GJAHR = GW_KJDATE_YEAR.  "会計年度
ENDIF.
*
CHECK GW_ERR IS INITIAL.
*
PERFORM GET_ZN002_ZN005.
*
PERFORM F_DEQUEUE_ALL.
*
ENDLOOP.
*
ENDFORM.                    " MAIN_PROC
*&---------------------------------------------------------------------*
*&      Form  F4HELP_P_INFILE
*&---------------------------------------------------------------------*
FORM F4HELP_P_INFILE USING L_FILE.

DATA: L_IT_FNAME     TYPE FILETABLE,
L_SUBRC        TYPE I,
INIT_DIRECTORY TYPE STRING,
WINDOW_TITLE   TYPE STRING,
FILE_FILTER    TYPE STRING,
L_PATH         TYPE STRING.

FILE_FILTER = '*.*'.
L_PATH =  'C:\*.*'.
REFRESH : L_IT_FNAME.
MOVE 'C:\' TO INIT_DIRECTORY.
CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
EXPORTING  WINDOW_TITLE            =  WINDOW_TITLE
DEFAULT_FILENAME        =  L_PATH
FILE_FILTER             =  FILE_FILTER
INITIAL_DIRECTORY       =  INIT_DIRECTORY
MULTISELECTION          =  ABAP_FALSE
CHANGING   FILE_TABLE              =  L_IT_FNAME
RC                      =  L_SUBRC
EXCEPTIONS FILE_OPEN_DIALOG_FAILED =  1
CNTL_ERROR              =  2
ERROR_NO_GUI            =  3
OTHERS                  =  4
.
IF SY-SUBRC <> 0.
ELSE.
IF L_SUBRC = 1.
READ TABLE L_IT_FNAME INTO L_FILE INDEX 1.
ENDIF.
ENDIF.

ENDFORM.                    " F4HELP_P_INFILE
*&---------------------------------------------------------------------*
*&      Form  F_GUI_UPLOAD
*&---------------------------------------------------------------------*
FORM F_GUI_UPLOAD.
DATA :
L_FILENAME TYPE STRING.
* Add ES-UP 2012/10/16 -->
DATA L_CODEPAGE TYPE ABAP_ENCODING.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
* Add ES-UP 2012/10/16 <--
*
L_FILENAME = P_INFILE. "出力ファイル
*
CALL FUNCTION 'GUI_UPLOAD'
EXPORTING
FILENAME                      = L_FILENAME
*     FILETYPE                      = 'ASC'
*     HAS_FIELD_SEPARATOR           = ' '
*     HEADER_LENGTH                 = 0
*     READ_BY_LINE                  = 'X'
* Add ES-UP 2012/10/16 -->
CODEPAGE                = L_CODEPAGE
* Add ES-UP 2012/10/16 <--
*   IMPORTING
*     FILELENGTH                    =
*     HEADER                        =
TABLES
DATA_TAB                      = GT_IN_FILE
EXCEPTIONS
FILE_OPEN_ERROR               = 1
FILE_READ_ERROR               = 2
NO_BATCH                      = 3
GUI_REFUSE_FILETRANSFER       = 4
INVALID_TYPE                  = 5
NO_AUTHORITY                  = 6
UNKNOWN_ERROR                 = 7
BAD_DATA_FORMAT               = 8
HEADER_NOT_ALLOWED            = 9
SEPARATOR_NOT_ALLOWED         = 10
HEADER_TOO_LONG               = 11
UNKNOWN_DP_ERROR              = 12
ACCESS_DENIED                 = 13
DP_OUT_OF_MEMORY              = 14
DISK_FULL                     = 15
DP_TIMEOUT                    = 16
OTHERS                        = 17
.

IF SY-SUBRC <> 0.
* 入力ファイルオープンエラー
MESSAGE I766 WITH TEXT-M03.
LEAVE LIST-PROCESSING.
*汎用モジュールエラー &1   (SY-SUBRC=&2)
*    MESSAGE E802 WITH 'GUI_UPLOAD' SY-SUBRC.
ENDIF.
*
ENDFORM.                    " F_GUI_UPLOAD
*&---------------------------------------------------------------------*
*&      Form  END_MSG
*&---------------------------------------------------------------------*
FORM END_MSG.
DATA:
L_CNT TYPE I,
L_ERRMSG(100) TYPE C,
L_PLIFNR(10) TYPE C,
L_BELNR      TYPE ZN002-BELNR.
*
*2012/05/25 ADD START
LOOP AT GT_PLIFNR_ERR INTO GW_PLIFNR_ERR.
*対象外件数
IF GW_PLIFNR_ERR-FLG_O = C_ON.
GW_O_CNT = GW_O_CNT + 1.
ELSE.
*エラー件数
GW_ERR_CNT = GW_ERR_CNT + 1.
ENDIF.
ENDLOOP.

*  正常件数
DESCRIBE TABLE GT_PLIFNR LINES GW_OK_CNT.
GW_OK_CNT = GW_OK_CNT - GW_O_CNT - GW_ERR_CNT.

*2012/05/25 ADD END

CLEAR:L_PLIFNR.
LOOP AT GT_IN_REC INTO GW_IN_REC.
*
*相殺先
IF L_PLIFNR <> GW_IN_REC-PLIFNR.

*
CLEAR:GW_PLIFNR_OK.
READ TABLE GT_PLIFNR_OK WITH KEY PLIFNR = GW_IN_REC-PLIFNR
INTO  GW_PLIFNR_OK.
IF SY-SUBRC = 0.
L_BELNR = GW_PLIFNR_OK-BELNR.
ELSE.
CLEAR:L_BELNR.
ENDIF.
*
CLEAR:GW_PLIFNR_ERR.
READ TABLE GT_PLIFNR_ERR WITH KEY PLIFNR = GW_IN_REC-PLIFNR
INTO  GW_PLIFNR_ERR.
IF SY-SUBRC = 0.
*2012/05/25 ADD START " 対象外は表示しない
IF GW_PLIFNR_ERR-FLG_O = C_ON.
CONTINUE.
ENDIF.
*2012/05/25 ADD END
L_ERRMSG = GW_PLIFNR_ERR-ERRMSG.
ELSE.
CLEAR:L_ERRMSG.
ENDIF.
*
IF L_CNT <> 0.
ULINE.
ELSE.
L_CNT = 1.
ENDIF.

FORMAT COLOR 2 ON.           "背景網掛け
WRITE:/1  L_BELNR,
12 GW_IN_REC-MINDK_NM, "マスタ
17 GW_IN_REC-WAERS.
IF GW_IN_REC-KJDATE = SPACE.
WRITE:22 P_BUDAT.
ELSE.
WRITE:22 GW_IN_REC-KJDATE.
ENDIF.
WRITE:34 GW_IN_REC-PLIFNR.
WRITE:45(16) GW_IN_REC-ZPWRBTR_ALL
CURRENCY GW_IN_REC-WAERS.
L_PLIFNR = GW_IN_REC-PLIFNR.

WRITE:62(98) SPACE.
FORMAT COLOR OFF.
*      SKIP 1.
ENDIF.
*仕入先
IF NOT GW_IN_REC-LIFNR IS INITIAL.
WRITE:/1 GW_IN_REC-LIFNR,
12 GW_IN_REC-NAME1,
45(16) GW_IN_REC-ZPWRBTR
CURRENCY GW_IN_REC-WAERS.
IF GW_IN_REC-CZFBDT_02 <> SPACE.
WRITE:64 GW_IN_REC-CZFBDT_02.
ENDIF.
WRITE:104(56) L_ERRMSG.
*        WRITE:104 L_ERRMSG.
ENDIF.
*得意先
IF NOT GW_IN_REC-KUNNR IS INITIAL.
WRITE:/1 GW_IN_REC-KUNNR,
12 GW_IN_REC-NAME1,
75(16) GW_IN_REC-ZIWRBTR
CURRENCY GW_IN_REC-WAERS.
IF GW_IN_REC-CZFBDT_05 <> SPACE.
WRITE:92 GW_IN_REC-CZFBDT_05.
ENDIF.
WRITE:104(56) L_ERRMSG.
*       WRITE:104 L_ERRMSG.
ENDIF.
*仕入先・得意先
IF GW_IN_REC-LIFNR IS INITIAL AND
GW_IN_REC-KUNNR IS INITIAL.
WRITE:/12 GW_IN_REC-NAME1,
45(16) GW_IN_REC-ZPWRBTR
CURRENCY GW_IN_REC-WAERS,
75(16) GW_IN_REC-ZIWRBTR
CURRENCY GW_IN_REC-WAERS.
IF GW_IN_REC-CZFBDT_05 <> SPACE.
WRITE:92 GW_IN_REC-CZFBDT_05.
ENDIF.
WRITE:104(56) L_ERRMSG.
*       WRITE:104 L_ERRMSG.

ENDIF.
ENDLOOP.
*
ULINE.
*
*2012/05/25 ADD START "処理件数表示
NEW-PAGE.
WRITE: /002(28) '＊＊＊＊＊＊＊＊＊＊＊＊＊＊'.
IF P_TEST = C_ON.
WRITE: /002(16) TEXT-H94. "正常終了（予定）
ELSE.
WRITE: /002(08) TEXT-H95. "正常終了
ENDIF.
WRITE:  018(02) '：',
020(06) GW_OK_CNT,
027(02) TEXT-H98,  "件
/002(06) TEXT-H96,  "エラー
018(02) '：',
020(06) GW_ERR_CNT,
027(02) TEXT-H98,  "件
/002(10) TEXT-H97,  "処理対象外
018(02) '：',
020(06) GW_O_CNT,
027(02) TEXT-H98,  "件
/002(28) '＊＊＊＊＊＊＊＊＊＊＊＊＊＊'.
*2012/05/25 ADD END

ENDFORM.                    " END_MSG
*&---------------------------------------------------------------------*
*&      Form  P_BUKRS_CHECK
*&---------------------------------------------------------------------*
FORM P_BUKRS_CHECK.
*
SELECT SINGLE KTOPL INTO GW_KTOPL FROM T001 WHERE BUKRS = P_BUKRS.
IF SY-SUBRC <> 0.
*  会社コード & はありません
SET CURSOR FIELD 'P_BUKRS'.
MESSAGE E750 WITH P_BUKRS.
ENDIF.
*
SELECT KOKRS INTO GW_KOKRS FROM TKA02 WHERE BUKRS = P_BUKRS.
EXIT.
ENDSELECT.
*
ENDFORM.                    " P_BUKRS_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_PARVW_CHECK
*&---------------------------------------------------------------------*
*FORM P_PARVW_CHECK.
**
*  SELECT SINGLE COUNT(*) FROM TPAR WHERE PARVW = P_PARVW.
*  IF SY-SUBRC <> 0.
**   & が、存在しません
*    SET CURSOR FIELD 'P_PARVW'.
*    MESSAGE E814 WITH TEXT-E09. "相殺取引先機能
*  ENDIF.
**
*ENDFORM.                    " P_PARVW_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_VKORG_CHECK
*&---------------------------------------------------------------------*
FORM P_VKORG_CHECK.
*
SELECT SINGLE COUNT(*) FROM TVKO WHERE VKORG = P_VKORG.
IF SY-SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_VKORG'.
MESSAGE E814 WITH TEXT-E25. "販売組織
ENDIF.
*
ENDFORM.                    " P_VKORG_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_VTWEG_CHECK
*&---------------------------------------------------------------------*
FORM P_VTWEG_CHECK.
*
SELECT SINGLE COUNT(*) FROM TVTW WHERE VTWEG = P_VTWEG.
IF SY-SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_VTWEG'.
MESSAGE E814 WITH TEXT-E26. "流通チャネル
ENDIF.
*
ENDFORM.                    " P_VTWEG_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_SPART_CHECK
*&---------------------------------------------------------------------*
FORM P_SPART_CHECK.
*
SELECT SINGLE COUNT(*) FROM TSPA WHERE SPART = P_SPART.
IF SY-SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_PARVW'.
MESSAGE E814 WITH TEXT-E27. "製品部門
ENDIF.
*
ENDFORM.                    " P_SPART_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_EKORG_CHECK
*&---------------------------------------------------------------------*
FORM P_EKORG_CHECK.
*
SELECT SINGLE COUNT(*) FROM T024E WHERE EKORG = P_EKORG.
IF SY-SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_EKORG'.
MESSAGE E814 WITH TEXT-E24. "購買組織
ENDIF.
*
ENDFORM.                    " P_EKORG_CHECK
*&---------------------------------------------------------------------*
*&      Form  GET_IN_REC
*&---------------------------------------------------------------------*
FORM GET_IN_REC.
DATA L_CNT TYPE I.
*
REFRESH: GT_IN_REC,
GT_PLIFNR.
CLEAR:  L_CNT.
LOOP AT GT_IN_FILE INTO GW_IN_FILE.
* Mod ES-UP 2012/10/24 -->
*    SPLIT GW_IN_FILE AT C_KANMA INTO
SPLIT GW_IN_FILE-data AT C_KANMA INTO
* Mod ES-UP 2012/10/24 <--
GW_IN_REC-MINDK_NM    "マスタ
GW_IN_REC-WAERS        "通貨
GW_IN_REC-KJDATE       "計上日
GW_IN_REC-PWRBTR_ALL   "相殺候補額
GW_IN_REC-PLIFNR       "相殺先
GW_IN_REC-LIFNR        "仕入先
GW_IN_REC-PWRBTR       "支払予定額
GW_IN_REC-PZFBDT       "支払日
GW_IN_REC-CZFBDT_02    "照合締日
GW_IN_REC-ZTERM_02     "支払条件
GW_IN_REC-KUNNR        "得意先
GW_IN_REC-VKBUR        "部門
GW_IN_REC-IWRBTR       "入金予定額
GW_IN_REC-IZFBDT       "入金予定日
GW_IN_REC-CZFBDT_05    "照合締日
GW_IN_REC-NAME1        "得意先名称
GW_IN_REC-ZFAEL        "締日
GW_IN_REC-ZSTG1        "入金日
GW_IN_REC-ZTERM_05     "入金条件
GW_IN_REC-CMNT         "コメント
GW_IN_REC-IWRBTR_MATU  "入金予定額(未）
GW_IN_REC-WRBTR        "売掛残
GW_IN_REC-KNETXAMT     "当月未検収
GW_IN_REC-ZNYO.        "残余優先
*
IF L_CNT <> 0.
IF NOT GW_IN_REC-PLIFNR IS INITIAL.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = GW_IN_REC-PLIFNR
IMPORTING
OUTPUT = GW_IN_REC-PLIFNR.
ENDIF.
IF NOT GW_IN_REC-PWRBTR_ALL IS INITIAL.
PERFORM F_BAPI_CURRENCY_CONV_TO_INTERN
USING GW_IN_REC-WAERS GW_IN_REC-PWRBTR_ALL
18 GW_IN_REC-ZPWRBTR_ALL.
ENDIF.
IF NOT GW_IN_REC-PWRBTR IS INITIAL.
PERFORM F_BAPI_CURRENCY_CONV_TO_INTERN
USING GW_IN_REC-WAERS GW_IN_REC-PWRBTR
18 GW_IN_REC-ZPWRBTR.
ENDIF.
IF NOT GW_IN_REC-IWRBTR IS INITIAL.
PERFORM F_BAPI_CURRENCY_CONV_TO_INTERN
USING GW_IN_REC-WAERS GW_IN_REC-IWRBTR
18 GW_IN_REC-ZIWRBTR.
ENDIF.
GW_IN_REC-ZCNT = L_CNT.
*2012/05/25 ADD START "ダミーレコードはスキップ
IF NOT ( GW_IN_REC-KUNNR IS INITIAL )
AND    ( GW_IN_REC-IWRBTR = 0 ).
CONTINUE.
ENDIF.
*2012/05/25 ADD END
APPEND GW_IN_REC TO  GT_IN_REC.
GW_PLIFNR = GW_IN_REC-PLIFNR.
COLLECT GW_PLIFNR INTO GT_PLIFNR. "相殺先
ENDIF.
L_CNT = L_CNT + 1.
*
ENDLOOP.
*
IF GT_IN_REC[] IS INITIAL.
*対象となる入力データが存在しません
MESSAGE I808.
LEAVE LIST-PROCESSING.
ENDIF.
*
ENDFORM.                    " GET_IN_REC
*&---------------------------------------------------------------------*
*&      Form  INPUT_CHECK
*&---------------------------------------------------------------------*
FORM INPUT_CHECK.
DATA:
L_CNT      TYPE I,
L_PLIFNR   TYPE LFA1-LIFNR.
*
SORT GT_PLIFNR BY PLIFNR.  "相殺先単位でチェック
*
LOOP AT GT_PLIFNR INTO GW_PLIFNR.
*
CLEAR:L_CNT,GW_ERR,GW_ZN002_CNT,GW_ZN005_CNT,
GW_PWRBTR_ALL,GW_PWRBTR_SUM,GW_IWRBTR_SUM,
GW_LIFNR_ST,GW_PLIFNR_ERR.
*
LOOP AT GT_IN_REC INTO GW_IN_REC WHERE PLIFNR = GW_PLIFNR-PLIFNR.
CHECK GW_ERR IS INITIAL.
IF L_CNT = 0.
*チェック項目セット
GW_MINDK_NM = GW_IN_REC-MINDK_NM.   "マスタ
GW_WAERS    = GW_IN_REC-WAERS.      "通貨
PERFORM F_BAPI_CURRENCY_CONV_TO_INTERN
USING GW_WAERS GW_IN_REC-PWRBTR_ALL
18 GW_PWRBTR_ALL.

*2012/05/07 DEL START "相殺候補額のチェックは不要
**相殺候補額
*        PERFORM CHECK_PWRBTR_ALL.
*2012/05/07 DEL END

*計上日
PERFORM CHECK_KJDATE USING GW_IN_REC-KJDATE.
ENDIF.
L_CNT = L_CNT + 1.
*相殺先
IF GW_ERR IS INITIAL.
PERFORM CHECK_PLIFNR USING GW_IN_REC-PLIFNR.
ENDIF.
*仕入先コード
IF GW_ERR IS INITIAL.
PERFORM CHECK_LIFNR USING GW_IN_REC-LIFNR.
GW_LIFNR_ST = C_X.
ENDIF.
*得意先コード
IF GW_ERR IS INITIAL.
PERFORM CHECK_KUNNR USING GW_IN_REC-KUNNR.
ENDIF.
MODIFY GT_IN_REC FROM GW_IN_REC TRANSPORTING
PLIFNR LIFNR KUNNR.
*仕入先コード,得意先コード
IF GW_ERR IS INITIAL.
IF GW_IN_REC-LIFNR = SPACE AND
GW_IN_REC-KUNNR = SPACE.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*仕入先または得意先がありません
GW_PLIFNR_ERR-ERRMSG = TEXT-E15.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ENDIF.
*マスタのチェック
IF GW_ERR IS INITIAL.
PERFORM CHECK_MINDK_NM USING GW_IN_REC-MINDK_NM.
ENDIF.
*通貨
IF GW_ERR IS INITIAL.
PERFORM CHECK_WAERS USING GW_IN_REC-WAERS
GW_IN_REC-LIFNR GW_IN_REC-KUNNR.
ENDIF.
*支払予定存在チェック
IF GW_ERR IS INITIAL.
IF NOT GW_IN_REC-LIFNR IS INITIAL.
GW_ZN002_CNT = GW_ZN002_CNT + 1.
PERFORM CHECK_ZN002 USING GW_IN_REC-LIFNR      "仕入先
GW_IN_REC-CZFBDT_02  "照合締日
GW_IN_REC-PZFBDT     "支払日
GW_IN_REC-PWRBTR     "支払予定額
GW_IN_REC-PLIFNR.    "相殺先
ENDIF.
ENDIF.
*入金予定存在チェック
IF GW_ERR IS INITIAL.
IF NOT GW_IN_REC-KUNNR IS INITIAL.
GW_ZN005_CNT = GW_ZN005_CNT + 1.
PERFORM CHECK_ZN005 USING GW_IN_REC-KUNNR      "得意先
GW_IN_REC-CZFBDT_05  "照合締日
GW_IN_REC-IZFBDT     "入金予定日
GW_IN_REC-IWRBTR.    "入金予定額
ENDIF.
ENDIF.
*予定データと外部データの金額チェック
IF GW_ERR IS INITIAL.
IF  NOT GW_IN_REC-LIFNR IS INITIAL.
PERFORM CHECK_YN210_ZN002
USING GW_IN_REC-LIFNR
GW_IN_REC-CZFBDT_02
GW_IN_REC-WAERS.
ENDIF.
ENDIF.
IF GW_ERR IS INITIAL.
IF  NOT GW_IN_REC-KUNNR IS INITIAL.
PERFORM CHECK_YN110_ZN005
USING GW_IN_REC-KUNNR
GW_IN_REC-CZFBDT_05
GW_IN_REC-WAERS.
ENDIF.
ENDIF.
*残余優先
IF GW_ERR IS INITIAL.
PERFORM CHECK_ZNYO USING GW_IN_REC-ZNYO.
ENDIF.
*

ENDLOOP.
*
IF GW_ERR IS INITIAL.
IF GW_ZN002_CNT = 0.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*支払予定が未入力です
GW_PLIFNR_ERR-ERRMSG = TEXT-E16.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ENDIF.
*

*2012/05/25 DEL START
*    IF GW_ERR IS INITIAL.
*      IF GW_ZN005_CNT = 0.
*        GW_ERR = C_ERR.
*        GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
**入金予定が未入力です
*        GW_PLIFNR_ERR-ERRMSG = TEXT-E17.
*        APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
*      ENDIF.
*    ENDIF.
*2012/05/25 DEL END

*相殺候補額
IF GW_ERR IS INITIAL.
IF GW_PWRBTR_SUM <= GW_IWRBTR_SUM.
*2012/04/25 MOD START  "相殺候補額は計算値に置換え
IF GW_PWRBTR_ALL <> GW_PWRBTR_SUM.
PERFORM EDIT_PWRBTR USING GW_PWRBTR_SUM.
ENDIF.
*        IF GW_PWRBTR_ALL <> GW_PWRBTR_SUM.
*           GW_ERR = C_ERR.
*           GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
**相殺候補額が一致しません
*           GW_PLIFNR_ERR-ERRMSG = TEXT-E18.
*           APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
*        ENDIF.
*2012/04/25 MOD END
ELSE.
*2012/04/25 MOD START  "相殺候補額は計算値に置換え
IF GW_PWRBTR_ALL <> GW_IWRBTR_SUM.
PERFORM EDIT_PWRBTR USING GW_IWRBTR_SUM.
ENDIF.
*         IF GW_PWRBTR_ALL <> GW_IWRBTR_SUM.
*           GW_ERR = C_ERR.
*           GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
**相殺候補額が一致しません
*           GW_PLIFNR_ERR-ERRMSG = TEXT-E18.
*           APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
*        ENDIF.
*2012/04/25 MOD END
ENDIF.
*2012/04/25 ADD START "相殺額が0の場合はエラー
IF ( GW_PWRBTR_SUM = 0 )
OR ( GW_IWRBTR_SUM = 0 ).
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*相殺額が0です
GW_PLIFNR_ERR-ERRMSG = TEXT-E33.
GW_PLIFNR_ERR-FLG_O  = C_ON.   "2012/05/25
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
*2012/04/25 ADD END
ENDIF.
ENDLOOP.
*
ENDFORM.                    " INPUT_CHECK
*&---------------------------------------------------------------------*
*&      Form  CHECK_LIFNR
*&---------------------------------------------------------------------*
FORM CHECK_LIFNR USING L_LIFNR.
DATA :
L_KTOKK TYPE LFA1-KTOKK. "勘定グループ
*
IF NOT L_LIFNR IS INITIAL.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = L_LIFNR
IMPORTING
OUTPUT = L_LIFNR.
*
READ TABLE GT_LIFNR_TBL WITH TABLE KEY LIFNR = L_LIFNR
INTO  GW_LIFNR_TBL.
*
IF SY-SUBRC <> 0.
SELECT LFA1~LIFNR LFA1~KTOKK LFB1~AKONT LFM1~WAERS
INTO (GW_LIFNR_TBL-LIFNR,
L_KTOKK,
GW_LIFNR_TBL-AKONT,
GW_LIFNR_TBL-WAERS )
FROM LFA1
JOIN LFB1 ON LFB1~LIFNR = LFA1~LIFNR
JOIN LFM1 ON LFM1~LIFNR = LFA1~LIFNR
WHERE LFA1~LIFNR = L_LIFNR
AND   LFB1~BUKRS = P_BUKRS
AND   LFM1~EKORG = P_EKORG.
ENDSELECT.
IF SY-SUBRC = 0.
READ TABLE GT_T077K WITH TABLE KEY KTOKK = L_KTOKK
INTO GW_T077K.
IF SY-SUBRC <> 0.
INSERT GW_LIFNR_TBL INTO TABLE GT_LIFNR_TBL.
ELSE.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*仕入先コードがワンタイムです
GW_PLIFNR_ERR-ERRMSG = TEXT-E02.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ELSE.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*仕入先マスタ(LFA1)にデータがありません
GW_PLIFNR_ERR-ERRMSG = TEXT-E01.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ENDIF.
ENDIF.
*
ENDFORM.                    " CHECK_LIFNR
*&---------------------------------------------------------------------*
*&      Form  CHECK_KUNNR
*&---------------------------------------------------------------------*
FORM CHECK_KUNNR USING  L_KUNNR.
DATA :
L_KTOKD TYPE KNA1-KTOKD. "勘定グループ
*
IF NOT L_KUNNR IS INITIAL.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = L_KUNNR
IMPORTING
OUTPUT = L_KUNNR.
*
READ TABLE GT_KUNNR_TBL WITH TABLE KEY KUNNR = L_KUNNR
INTO  GW_KUNNR_TBL.
*
IF SY-SUBRC <> 0.
SELECT KNA1~KUNNR KNA1~KTOKD KNB1~AKONT KNVV~WAERS
INTO (GW_KUNNR_TBL-KUNNR,
L_KTOKD,
GW_KUNNR_TBL-AKONT,
GW_KUNNR_TBL-WAERS )
FROM KNA1
JOIN KNB1 ON KNB1~KUNNR = KNA1~KUNNR
JOIN KNVV ON KNVV~KUNNR = KNA1~KUNNR
WHERE KNA1~KUNNR = L_KUNNR
AND   KNB1~BUKRS = P_BUKRS
AND   KNVV~VKORG = P_VKORG
AND   KNVV~VTWEG = P_VTWEG
AND   KNVV~SPART = P_SPART.
ENDSELECT.
IF SY-SUBRC = 0.
READ TABLE GT_T077D WITH TABLE KEY KTOKD = L_KTOKD
INTO GW_T077D.
IF SY-SUBRC <> 0.
INSERT GW_KUNNR_TBL INTO TABLE GT_KUNNR_TBL.
ELSE.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*得意先コードがワンタイムです
GW_PLIFNR_ERR-ERRMSG = TEXT-E04.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ELSE.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*得意先マスタ(KNA1)にデータがありません
GW_PLIFNR_ERR-ERRMSG = TEXT-E03.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ENDIF.
ENDIF.
*
ENDFORM.                    " CHECK_KUNNR
*&---------------------------------------------------------------------*
*&      Form  GET_T077K
*&---------------------------------------------------------------------*
FORM GET_T077K.
*
SELECT KTOKK
INTO TABLE GT_T077K
FROM T077K
WHERE XCPDS <> SPACE.
*
ENDFORM.                                                    " GET_T077K
*&---------------------------------------------------------------------*
*&      Form  GET_T077D
*&---------------------------------------------------------------------*
FORM GET_T077D.
*
SELECT KTOKD
INTO TABLE GT_T077D
FROM T077D
WHERE XCPDS <> SPACE.
*
ENDFORM.                                                    " GET_T077D
*&---------------------------------------------------------------------*
*&      Form  CHECK_MINDK_NM
*&---------------------------------------------------------------------*
FORM CHECK_MINDK_NM USING L_MINDK_NM.
*マスタ
IF L_MINDK_NM <> C_MINDK_SP AND
L_MINDK_NM <> C_MINDK_01 AND
L_MINDK_NM <> C_MINDK_02 AND
L_MINDK_NM <> C_MINDK_03.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*ﾏｽﾀが不正です
GW_PLIFNR_ERR-ERRMSG = TEXT-E06.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ELSE.
IF L_MINDK_NM <> GW_MINDK_NM.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*ﾏｽﾀが混在しています
GW_PLIFNR_ERR-ERRMSG = TEXT-E05.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ENDIF.
*
ENDFORM.                    " CHECK_MINDK_NM
*&---------------------------------------------------------------------*
*&      Form  CHECK_PLIFNR
*&---------------------------------------------------------------------*
FORM CHECK_PLIFNR USING L_PLIFNR.
*
IF L_PLIFNR = SPACE.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = L_PLIFNR.
*相殺先がありません
GW_PLIFNR_ERR-ERRMSG = TEXT-E14.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ELSE.
PERFORM CHECK_LIFNR USING L_PLIFNR.
ENDIF.
*
ENDFORM.                    " CHECK_PLIFNR
*&---------------------------------------------------------------------*
*&      Form  SYSTEM_CHECK
*&---------------------------------------------------------------------*
FORM SYSTEM_CHECK.
DATA :
L_SUBRC TYPE SY-SUBRC.
*
CHECK P_TEST IS INITIAL.
*雑収入勘定
PERFORM GET_SKA1 USING P_HKONTA L_SUBRC.
IF L_SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_HKONTA'.
MESSAGE E814 WITH TEXT-E28. "雑収入勘定
ENDIF.
*税コード(雑収入勘定)
PERFORM GET_T007A USING P_MWSKZA L_SUBRC.
IF L_SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_MWSKZA'.
MESSAGE E814 WITH TEXT-E29. "税コード(雑収入勘定)
ENDIF.
*雑損失勘定
PERFORM GET_SKA1 USING P_HKONTB L_SUBRC.
IF L_SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_HKONTB'.
MESSAGE E814 WITH TEXT-E30. "雑損失勘定
ENDIF.
*税コード(雑損失勘定)
PERFORM GET_T007A USING P_MWSKZB L_SUBRC.
IF L_SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_MWSKZB'.
MESSAGE E814 WITH TEXT-E31. "税コード(雑損失勘定)
ENDIF.
*原価センタ
SELECT COUNT(*) FROM CSKS WHERE KOKRS = GW_KOKRS
AND   KOSTL = P_KOSTL
AND   DATBI >= P_BUDAT
AND   DATAB <= P_BUDAT.

IF SY-SUBRC <> 0.
*   原価センタ &/& は & に登録されていません
SET CURSOR FIELD 'P_KOSTL'.
MESSAGE E222(KI) WITH P_BUKRS P_KOSTL P_BUDAT. "原価センタ
ENDIF.
*
ENDFORM.                    " SYSTEM_CHECK
*&---------------------------------------------------------------------*
*&      Form  GET_SKA1
*&---------------------------------------------------------------------*
FORM GET_SKA1 USING  L_HKONT P_SUBRC.
*
SELECT SINGLE COUNT(*)  FROM SKA1 WHERE KTOPL = GW_KTOPL
AND   SAKNR = L_HKONT.
P_SUBRC = SY-SUBRC.
*
ENDFORM.                                                    " GET_SKA1
*&---------------------------------------------------------------------*
*&      Form  GET_T007A
*&---------------------------------------------------------------------*
FORM GET_T007A USING L_MWSKZ L_SUBRC.
*
SELECT SINGLE COUNT(*) FROM T007A WHERE KALSM = C_TAXJP
AND   MWSKZ = L_MWSKZ.
L_SUBRC = SY-SUBRC.
*
ENDFORM.                                                    " GET_T007A
*&---------------------------------------------------------------------*
*&      Form  CHECK_WAERS
*&---------------------------------------------------------------------*
FORM CHECK_WAERS USING L_WAERS L_LIFNR L_KUNNR.
*
IF L_WAERS <> GW_WAERS.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*複数通貨が混在しています
GW_PLIFNR_ERR-ERRMSG = TEXT-E08.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
*
CHECK GW_ERR IS INITIAL.
*
IF NOT L_LIFNR IS INITIAL.
IF GW_LIFNR_TBL-WAERS <> GW_WAERS.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*通貨コードがマスタと異なります
GW_PLIFNR_ERR-ERRMSG = TEXT-E07.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ELSE.
IF NOT L_KUNNR IS INITIAL.
IF GW_KUNNR_TBL-WAERS <> GW_WAERS.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*通貨コードがマスタと異なります
GW_PLIFNR_ERR-ERRMSG = TEXT-E07.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ENDIF.
ENDIF.
*
ENDFORM.                    " CHECK_WAERS
*&---------------------------------------------------------------------*
*&      Form  CHECK_KJDATE
*&---------------------------------------------------------------------*
FORM CHECK_KJDATE USING    L_KJDATE.
DATA :
L_SUBRC TYPE SY-SUBRC,
L_FISCAL_YEAR LIKE BAPI0002_4-FISCAL_YEAR,
L_MONAT   LIKE T001B-FRPE1,
L_MSGTEXT TYPE STRING.
*2012/04/20 ADD START
DATA :
L_TYPE  TYPE DATATYPE_D,
L_VALUE TYPE LVC_VALUE.
*2012/04/20 ADD END

*
CHECK NOT L_KJDATE = SPACE.

*2012/04/20 ADD START 数値以外が含まれていたら、エラー
CLEAR:L_VALUE,L_TYPE.
L_VALUE = L_KJDATE.

CALL FUNCTION 'NUMERIC_CHECK'
EXPORTING
STRING_IN = L_VALUE
IMPORTING
HTYPE     = L_TYPE.

IF L_TYPE <> 'NUMC'.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*      計上日が不正です
GW_PLIFNR_ERR-ERRMSG = TEXT-E09.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
EXIT.
ENDIF.
*2012/04/20 ADD END

*
CALL FUNCTION 'CONVERT_DATE_TO_INTERNAL'
EXPORTING
DATE_EXTERNAL            = L_KJDATE
IMPORTING
DATE_INTERNAL            = L_KJDATE
EXCEPTIONS
DATE_EXTERNAL_IS_INVALID = 1
OTHERS                   = 2.
IF SY-SUBRC <> 0.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*計上日が不正です
GW_PLIFNR_ERR-ERRMSG = TEXT-E09.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ELSE.
PERFORM F_FI_PERIOD_CHECK USING L_KJDATE L_SUBRC
L_MONAT L_FISCAL_YEAR.
IF L_SUBRC <> 0.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*会計期間 & & は開始されていません
CLEAR:L_MSGTEXT.
MESSAGE I201(F5) WITH L_MONAT L_FISCAL_YEAR
INTO L_MSGTEXT.
GW_PLIFNR_ERR-ERRMSG = L_MSGTEXT.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ELSE.
GW_KJDATE_YEAR = L_FISCAL_YEAR.
ENDIF.
*
ENDIF.
*
ENDFORM.                    " CHECK_KJDATE
*&---------------------------------------------------------------------*
*&      Form  P_BUDAT_CHECK
*&---------------------------------------------------------------------*
FORM P_BUDAT_CHECK.
DATA :
L_SUBRC TYPE SY-SUBRC,
L_FISCAL_YEAR LIKE BAPI0002_4-FISCAL_YEAR,
L_MONAT  LIKE T001B-FRPE1.
*
PERFORM F_FI_PERIOD_CHECK USING P_BUDAT L_SUBRC
L_MONAT L_FISCAL_YEAR.
IF L_SUBRC <> 0.
*会計期間 & & は開始されていません
SET CURSOR FIELD 'P_BUDAT'.
MESSAGE E201(F5) WITH L_MONAT L_FISCAL_YEAR.
ELSE.
GW_BUDAT_YEAR = L_FISCAL_YEAR.
ENDIF.
*
ENDFORM.                    " P_BUDAT_CHECK
*&---------------------------------------------------------------------*
*&      Form  F_FI_PERIOD_CHECK
*&---------------------------------------------------------------------*
FORM F_FI_PERIOD_CHECK USING L_DATE L_SUBRC L_MONAT L_FISCAL_YEAR.
DATA:
L_FISCAL_PERIOD LIKE BAPI0002_4-FISCAL_PERIOD,
L_RETURN        LIKE BAPIRETURN1,
L_POSTING_DATE  LIKE BAPI0002_4-POSTING_DATE.
*
CLEAR:L_SUBRC.
L_POSTING_DATE = L_DATE.
CALL FUNCTION 'BAPI_COMPANYCODE_GET_PERIOD'
EXPORTING
COMPANYCODEID = P_BUKRS
POSTING_DATE  = L_POSTING_DATE
IMPORTING
FISCAL_YEAR   = L_FISCAL_YEAR
FISCAL_PERIOD = L_FISCAL_PERIOD
RETURN        = L_RETURN.
*
L_MONAT = L_FISCAL_PERIOD.
*
CALL FUNCTION 'FI_PERIOD_CHECK'
EXPORTING
I_BUKRS          = P_BUKRS
I_GJAHR          = L_FISCAL_YEAR
I_KOART          = '+'
I_MONAT          = L_MONAT
EXCEPTIONS
ERROR_PERIOD     = 1
ERROR_PERIOD_ACC = 2
OTHERS           = 3.
IF SY-SUBRC <> 0.
L_SUBRC = SY-SUBRC.
ENDIF.
*
ENDFORM.                    " F_FI_PERIOD_CHECK
*&---------------------------------------------------------------------*
*&      Form  CHECK_ZNYO
*&---------------------------------------------------------------------*
FORM CHECK_ZNYO USING L_ZNYO.
*
IF L_ZNYO <> SPACE AND
L_ZNYO <> C_X.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*残余優先フラグはXのみ設定可能です
GW_PLIFNR_ERR-ERRMSG = TEXT-E13.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
*
ENDFORM.                    " CHECK_ZNYO
*&---------------------------------------------------------------------*
*&      Form  CHECK_ZN002
*&---------------------------------------------------------------------*
FORM CHECK_ZN002 USING L_LIFNR L_CZFBDT L_PZFBDT L_PWRBTR L_PLIFNR.
DATA :
LW_CZFBDT TYPE ZN002-CZFBDT, "照合締日
LW_PZFBDT TYPE ZN002-PZFBDT, "支払予定日
LW_PWRBTR TYPE ZN002-PWRBTR, "支払予定額
LW_PLIFNR TYPE ZN002-PLIFNR. "振替仕入先
TYPES:
BEGIN OF TY_PLIFNR_TBL,
PLIFNR  TYPE ZN002-PLIFNR,  "振替仕入先
END   OF TY_PLIFNR_TBL.
DATA: LT_PLIFNR_TBL TYPE TABLE OF TY_PLIFNR_TBL,
LW_PLIFNR_TBL TYPE TY_PLIFNR_TBL.
*
LW_CZFBDT = L_CZFBDT. "照合締日
LW_PZFBDT = L_PZFBDT. "支払予定日
*
PERFORM F_BAPI_CURRENCY_CONV_TO_INTERN
USING GW_LIFNR_TBL-WAERS L_PWRBTR
18 LW_PWRBTR.
*
GW_PWRBTR_SUM = GW_PWRBTR_SUM + LW_PWRBTR.
*
REFRESH LT_PLIFNR_TBL.
*
SELECT PLIFNR INTO LW_PLIFNR
FROM ZN002
WHERE BUKRS  = P_BUKRS
AND   LIFNR  = L_LIFNR
AND   CZFBDT = LW_CZFBDT
AND   PZFBDT = LW_PZFBDT
AND   PWRBTR = LW_PWRBTR
AND   WAERS  = GW_LIFNR_TBL-WAERS
AND   PSTFLG = SPACE.
IF NOT LW_PLIFNR IS INITIAL.
LW_PLIFNR_TBL-PLIFNR = LW_PLIFNR.
COLLECT LW_PLIFNR_TBL INTO LT_PLIFNR_TBL.
ENDIF.
ENDSELECT.
IF SY-SUBRC <> 0.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*該当の支払予定がありません
GW_PLIFNR_ERR-ERRMSG = TEXT-E10.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ELSE.
IF L_LIFNR <> L_PLIFNR.
SORT  LT_PLIFNR_TBL BY PLIFNR.
READ TABLE  LT_PLIFNR_TBL WITH KEY PLIFNR = L_PLIFNR
INTO  LW_PLIFNR_TBL BINARY SEARCH.
IF SY-SUBRC <> 0.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*支払予定は名寄せされていません
GW_PLIFNR_ERR-ERRMSG = TEXT-E11.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ENDIF.
ENDIF.

*
ENDFORM.                    " CHECK_ZN002
*&---------------------------------------------------------------------*
*&      Form  CHECK_ZN005
*&---------------------------------------------------------------------*
FORM CHECK_ZN005 USING L_KUNNR L_CZFBDT L_IZFBDT L_IWRBTR.
DATA :
LW_CZFBDT TYPE ZN005-CZFBDT, "照合締日
LW_IZFBDT TYPE ZN005-IZFBDT, "入金予定日
LW_IWRBTR TYPE ZN005-IWRBTR. "入金予定額
*
LW_CZFBDT = L_CZFBDT. "照合締日
LW_IZFBDT = L_IZFBDT. "支払予定日
*
PERFORM F_BAPI_CURRENCY_CONV_TO_INTERN
USING GW_KUNNR_TBL-WAERS L_IWRBTR
18 LW_IWRBTR.
*
GW_IWRBTR_SUM = GW_IWRBTR_SUM + LW_IWRBTR.
*
SELECT COUNT(*)
FROM ZN005
WHERE BUKRS  = P_BUKRS
AND   KUNNR  = L_KUNNR
AND   CZFBDT = LW_CZFBDT
AND   IZFBDT = LW_IZFBDT
AND   IWRBTR = LW_IWRBTR
AND   WAERS  = GW_KUNNR_TBL-WAERS
AND   AUFLG  = SPACE.
IF SY-SUBRC <> 0.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*該当の入金予定がありません
GW_PLIFNR_ERR-ERRMSG = TEXT-E12.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
*
ENDFORM.                    " CHECK_ZN005
*&---------------------------------------------------------------------*
*&      Form  F_BAPI_CURRENCY_CONV_TO_INTERN
*&---------------------------------------------------------------------*
FORM F_BAPI_CURRENCY_CONV_TO_INTERN
USING L_CURR L_AMOUNT L_DIGITS L_AMOUNT_INTERNAL.
DATA :
L_AMOUNT_EXTERNAL TYPE BAPICURR-BAPICURR,
L_RETURN          TYPE BAPIRETURN.
*
L_AMOUNT_EXTERNAL = L_AMOUNT.
*
CALL FUNCTION 'BAPI_CURRENCY_CONV_TO_INTERNAL'
EXPORTING
CURRENCY             = L_CURR
AMOUNT_EXTERNAL      = L_AMOUNT_EXTERNAL
MAX_NUMBER_OF_DIGITS = L_DIGITS
IMPORTING
AMOUNT_INTERNAL      = L_AMOUNT_INTERNAL
RETURN               = L_RETURN.

*
ENDFORM.                    " F_BAPI_CURRENCY_CONV_TO_INTERN
*&---------------------------------------------------------------------*
*&      Form  GET_ZN002_ZN005
*&---------------------------------------------------------------------*
FORM GET_ZN002_ZN005.
*
DATA:
L_SUBRC TYPE SY-SUBRC.
*
REFRESH:GT_YN220_NEW,GT_YN220_DEL,
GT_YN120_NEW,GT_YN120_DEL,
GT_ZN002_NEW,GT_ZN005_NEW,
GT_ZN002_D,GT_ZN005_D.

LOOP AT GT_ZN002_TBL INTO GW_ZN002_TBL.
****通貨
GW_WAERS = GW_ZN002_TBL-WAERS.
****自社データ(仕入)
PERFORM GET_YN220
USING GW_ZN002_TBL-LIFNR
GW_ZN002_TBL-CZFBDT
GW_ZN002_TBL-WAERS.
****支払予定（仕入）
PERFORM GET_ZN002
USING GW_ZN002_TBL-LIFNR
GW_ZN002_TBL-CZFBDT
GW_ZN002_TBL-WAERS.

ENDLOOP.
*振替済自社データの削除
PERFORM YN220_DEL.
*
LOOP AT GT_ZN005_TBL INTO GW_ZN005_TBL.
****自社データ(売上)
PERFORM GET_YN120
USING GW_ZN005_TBL-KUNNR
GW_ZN005_TBL-CZFBDT
GW_ZN005_TBL-WAERS.
****入金予定（売上）
PERFORM GET_ZN005
USING GW_ZN005_TBL-KUNNR
GW_ZN005_TBL-CZFBDT
GW_ZN005_TBL-WAERS.
ENDLOOP.
*振替済自社データの削除
PERFORM YN120_DEL.
*支払、入金の差額を算出
*割当順序の決定
PERFORM SEL_ZN002_ZN005_NEW.
*前回買掛金消込残の取得
PERFORM SEL_ZN002_D.
*前回売掛金消込残の取得
PERFORM SEL_ZN005_D.
*自社データ(仕入)消込
PERFORM SEL_YN220.
*自社データ(売上)消込
PERFORM SEL_YN120.
*決済処理
PERFORM F_F-30_CNTL.
*
ENDFORM.                    " GET_ZN002_ZN005
*&---------------------------------------------------------------------*
*&      Form  GET_ZN002
*&---------------------------------------------------------------------*
FORM GET_ZN002 USING L_LIFNR L_CZFBDT L_WAERS.
DATA :
L_LINES TYPE I.
*
SELECT *
INTO TABLE GT_ZN002
FROM ZN002
WHERE BUKRS  = P_BUKRS
AND   LIFNR  = L_LIFNR
AND   CZFBDT = L_CZFBDT
AND   WAERS  = L_WAERS.
*
SORT GT_ZN002 BY SEQ.
*
LOOP AT GT_ZN002 INTO GW_ZN002.
CLEAR:GW_ZN002_TBL,GW_ZN002_NEW.
GW_ZN002_TBL-LIFNR  = GW_ZN002-LIFNR.
GW_ZN002_TBL-CZFBDT = GW_ZN002-CZFBDT.
GW_ZN002_TBL-WAERS  = GW_ZN002-WAERS.
IF GW_ZN002-PSTFLG <> SPACE. "会計振替
*処理済み
GW_ZN002_TBL-SUMI_CNT = 1.
APPEND GW_ZN002 TO GT_ZN002_D.
ELSE.
LOOP AT GT_IN_REC_ZN002 INTO GW_IN_REC.
IF GW_IN_REC-SUMI = SPACE.
IF GW_IN_REC-PLIFNR = GW_IN_REC-LIFNR.
IF GW_ZN002-LIFNR = GW_IN_REC-LIFNR      AND
GW_ZN002-CZFBDT = GW_IN_REC-CZFBDT_02 AND
GW_ZN002-WAERS  = GW_IN_REC-WAERS     AND
GW_ZN002-PZFBDT = GW_IN_REC-PZFBDT    AND
GW_ZN002-PWRBTR = GW_IN_REC-ZPWRBTR   AND
GW_ZN002-PLIFNR = SPACE.
*
MOVE-CORRESPONDING GW_ZN002 TO GW_ZN002_NEW.
GW_ZN002_NEW-ZNYO = GW_IN_REC-ZNYO.
APPEND GW_ZN002_NEW TO GT_ZN002_NEW.
*
GW_ZN002_TBL-SYORI_CNT = 1.
GW_IN_REC-SUMI = C_X.
ENDIF.
ELSE.
IF GW_ZN002-LIFNR = GW_IN_REC-LIFNR      AND
GW_ZN002-CZFBDT = GW_IN_REC-CZFBDT_02 AND
GW_ZN002-WAERS  = GW_IN_REC-WAERS     AND
GW_ZN002-PZFBDT = GW_IN_REC-PZFBDT    AND
GW_ZN002-PWRBTR = GW_IN_REC-ZPWRBTR   AND
GW_ZN002-PLIFNR = GW_IN_REC-PLIFNR.
*
MOVE-CORRESPONDING GW_ZN002 TO GW_ZN002_NEW.
GW_ZN002_NEW-ZNYO = GW_IN_REC-ZNYO.
APPEND GW_ZN002_NEW TO GT_ZN002_NEW.
*
GW_ZN002_TBL-SYORI_CNT = 1.
GW_IN_REC-SUMI = C_X.
ENDIF.
ENDIF.
MODIFY GT_IN_REC_ZN002 FROM GW_IN_REC TRANSPORTING SUMI.
*2013/10/07 ADD START
IF GW_IN_REC-SUMI = C_X.
EXIT.
ENDIF.
*2013/10/07 ADD END
ENDIF.
ENDLOOP.
ENDIF.
COLLECT GW_ZN002_TBL INTO GT_ZN002_TBL.
ENDLOOP.
*
LOOP AT GT_ZN002 INTO GW_ZN002 WHERE PSTFLG = SPACE. "会計振替
CLEAR:GW_ZN002_TBL.
IF GW_ZN002-PLIFNR = SPACE. "振替仕入先
READ TABLE GT_IN_REC_ZN002 INTO GW_IN_REC
WITH KEY LIFNR     = GW_ZN002-LIFNR
CZFBDT_02 = GW_ZN002-CZFBDT
WAERS     = GW_ZN002-WAERS
PZFBDT    = GW_ZN002-PZFBDT
ZPWRBTR   = GW_ZN002-PWRBTR
PLIFNR    = GW_ZN002-LIFNR.
IF SY-SUBRC <> 0.
GW_ZN002_TBL-LIFNR  = GW_ZN002-LIFNR.
GW_ZN002_TBL-CZFBDT = GW_ZN002-CZFBDT.
GW_ZN002_TBL-WAERS  = GW_ZN002-WAERS.
GW_ZN002_TBL-MISYORI_CNT = 1.
COLLECT GW_ZN002_TBL INTO GT_ZN002_TBL.
ENDIF.
ELSE.
READ TABLE GT_IN_REC_ZN002 INTO GW_IN_REC
WITH KEY LIFNR     = GW_ZN002-LIFNR
CZFBDT_02 = GW_ZN002-CZFBDT
WAERS     = GW_ZN002-WAERS
PZFBDT    = GW_ZN002-PZFBDT
ZPWRBTR   = GW_ZN002-PWRBTR
PLIFNR    = GW_ZN002-PLIFNR.
IF SY-SUBRC <> 0.
GW_ZN002_TBL-LIFNR  = GW_ZN002-LIFNR.
GW_ZN002_TBL-CZFBDT = GW_ZN002-CZFBDT.
GW_ZN002_TBL-WAERS  = GW_ZN002-WAERS.
GW_ZN002_TBL-MISYORI_CNT = 1.
COLLECT GW_ZN002_TBL INTO GT_ZN002_TBL.
ENDIF.

ENDIF.
ENDLOOP.
*
ENDFORM.                                                    " GET_ZN002
*&---------------------------------------------------------------------*
*&      Form  GET_YN220 自社データ(仕入)
*&---------------------------------------------------------------------*
FORM GET_YN220 USING L_VRFCTON L_CZFBDT L_WAERS.
*
SELECT *
INTO TABLE GT_YN220
FROM YN220
WHERE VRFCTON = L_VRFCTON
AND   BUKRS   = P_BUKRS
AND   CZFBDT  = L_CZFBDT
AND   WAERS   = L_WAERS.
*自社データを会計伝票で集合
LOOP AT GT_YN220 INTO GW_YN220.
CLEAR:GW_YN220_NEW.
GW_YN220_NEW-VRFCTON  = GW_YN220-VRFCTON.    "仕入先コード(請求先)
GW_YN220_NEW-CZFBDT   = GW_YN220-CZFBDT.     "照合締日
GW_YN220_NEW-LDATE1   = GW_YN220-LDATE1.     "入庫日
GW_YN220_NEW-YNGJAHR  = GW_YN220-YNGJAHR.    "会計伝票会計年度
GW_YN220_NEW-BELNR    = GW_YN220-BELNR.      "会計伝票番号
GW_YN220_NEW-BUZEI    = GW_YN220-BUZEI.      "会計伝票明細番号
GW_YN220_NEW-KNETXAMT = GW_YN220-KNETXAMT.   "税込金額
GW_YN220_NEW-WAERS    = GW_YN220-WAERS.      "通貨コード
COLLECT GW_YN220_NEW INTO GT_YN220_NEW.
ENDLOOP.
*
ENDFORM.                                                    " GET_YN220
*&---------------------------------------------------------------------*
*&      Form  GET_YN110  外部データ(売上)
*&---------------------------------------------------------------------*
FORM GET_YN110_KNETXAMT USING L_VRFCTON L_CZFBDT L_WAERS
L_KNETXAMT_SUM.
*
SELECT SUM( KNETXAMT ) INTO L_KNETXAMT_SUM
FROM YN110
WHERE VRFCTON = L_VRFCTON
AND   BUKRS   = P_BUKRS
AND   CZFBDT  = L_CZFBDT
AND   WAERS   = L_WAERS
AND   DELFLG  = SPACE.
*
ENDFORM.                    " GET_YN110_KNETXAMT
*&---------------------------------------------------------------------*
*&      Form  GET_YN210 外部データ(仕入)
*&---------------------------------------------------------------------*
FORM GET_YN210_KNETXAMT USING L_VRFCTON L_CZFBDT L_WAERS
L_KNETXAMT_SUM.
*
SELECT SUM( KNETXAMT ) INTO L_KNETXAMT_SUM
FROM YN210
WHERE VRFCTON = L_VRFCTON
AND   BUKRS   = P_BUKRS
AND   CZFBDT  = L_CZFBDT
AND   WAERS   = L_WAERS
AND   DELFLG  = SPACE.
*
ENDFORM.                    " GET_YN210_KNETXAMT
*&---------------------------------------------------------------------*
*&      Form  GET_YN120 自社データ(売上)
*&---------------------------------------------------------------------*
FORM GET_YN120 USING L_VRFCTON L_CZFBDT L_WAERS .
*
SELECT *
INTO TABLE GT_YN120
FROM YN120
WHERE VRFCTON = L_VRFCTON
AND   BUKRS   = P_BUKRS
AND   WAERS   = L_WAERS
AND   CZFBDT  = L_CZFBDT.
*
*自社データを会計伝票で集合
LOOP AT GT_YN120 INTO GW_YN120.
CLEAR:GW_YN120_NEW.
GW_YN120_NEW-VRFCTON  = GW_YN120-VRFCTON.    "得意先コード(支払人)
GW_YN120_NEW-CZFBDT   = GW_YN120-CZFBDT.     "照合締日
GW_YN120_NEW-YNGJAHR  = GW_YN120-YNGJAHR.    "会計伝票会計年度
GW_YN120_NEW-BELNR    = GW_YN120-BELNR.      "会計伝票番号
GW_YN120_NEW-BUZEI    = GW_YN120-BUZEI.      "会計伝票明細番号
GW_YN120_NEW-KNETXAMT = GW_YN120-KNETXAMT.   "税込金額
GW_YN120_NEW-WAERS    = GW_YN120-WAERS.      "通貨コード
COLLECT GW_YN120_NEW INTO GT_YN120_NEW.
ENDLOOP.
*
ENDFORM.                                                    " GET_YN120
*&---------------------------------------------------------------------*
*&      Form  GET_ZN002_PWRBTR 支払予定（仕入）
*&---------------------------------------------------------------------*
FORM GET_ZN002_PWRBTR USING L_LIFNR L_CZFBDT
L_WAERS
L_PWRBTR_SUM.
*
SELECT SUM( PWRBTR ) INTO L_PWRBTR_SUM
FROM ZN002
WHERE BUKRS  = P_BUKRS
AND   LIFNR  = L_LIFNR
AND   CZFBDT = L_CZFBDT
AND   WAERS  = L_WAERS.
*
ENDFORM.                    " GET_ZN002_PWRBTR
*&---------------------------------------------------------------------*
*&      Form  GET_ZN005_IWRBTR 入金予定（売上）
*&---------------------------------------------------------------------*
FORM GET_ZN005_IWRBTR USING L_KUNNR L_CZFBDT L_WAERS L_IWRBTR_SUM.
*
SELECT SUM( IWRBTR ) INTO L_IWRBTR_SUM
FROM ZN005
WHERE BUKRS  = P_BUKRS
AND   KUNNR  = L_KUNNR
AND   CZFBDT = L_CZFBDT
AND   WAERS  = L_WAERS.
*
ENDFORM.                    " GET_ZN005_IWRBTR
*&---------------------------------------------------------------------*
*&      Form  CHECK_YN210_ZN002
*&---------------------------------------------------------------------*
FORM CHECK_YN210_ZN002 USING L_LIFNR L_CZFBDT L_WAERS.
DATA:
L_KNETXAMT_SUM TYPE YN210-KNETXAMT,
L_PWRBTR_SUM TYPE ZN002-PWRBTR.
*
CLEAR:L_KNETXAMT_SUM,L_PWRBTR_SUM.
*外部データ(仕入)
PERFORM GET_YN210_KNETXAMT
USING L_LIFNR
L_CZFBDT
L_WAERS
L_KNETXAMT_SUM.
*支払予定（仕入）
PERFORM GET_ZN002_PWRBTR
USING L_LIFNR
L_CZFBDT
L_WAERS
L_PWRBTR_SUM.
*
IF L_KNETXAMT_SUM <> L_PWRBTR_SUM.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*支払依頼額と予定額が不一致
GW_PLIFNR_ERR-ERRMSG = TEXT-E19.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
*
ENDFORM.                    " CHECK_YN210_ZN002
*&---------------------------------------------------------------------*
*&      Form  CHECK_YN110_ZN005
*&---------------------------------------------------------------------*
FORM CHECK_YN110_ZN005 USING    L_KUNNR L_CZFBDT L_WAERS.
DATA:
L_KNETXAMT_SUM TYPE YN210-KNETXAMT,
L_IWRBTR_SUM TYPE ZN005-IWRBTR.

CLEAR:L_KNETXAMT_SUM, L_IWRBTR_SUM.
*外部データ(売上)
PERFORM GET_YN110_KNETXAMT
USING L_KUNNR
L_CZFBDT
L_WAERS
L_KNETXAMT_SUM.

*入金予定（売上）
PERFORM GET_ZN005_IWRBTR
USING L_KUNNR
L_CZFBDT
L_WAERS
L_IWRBTR_SUM.

IF L_KNETXAMT_SUM <> L_IWRBTR_SUM.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*入金依頼額と予定額が不一致
GW_PLIFNR_ERR-ERRMSG = TEXT-E20.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
*
ENDFORM.                    " CHECK_YN110_ZN005
*&---------------------------------------------------------------------*
*&      会計管理: 仕入先の二次索引
*&---------------------------------------------------------------------*
FORM GET_BSIK_YN220 USING L_LIFNR L_GJAHR L_BELNR L_BUZEI
L_SUBRC
L_ZTERM L_ZFBDT L_ZLSCH L_ZLSPR.
*
SELECT ZTERM ZFBDT ZLSCH ZLSPR
INTO (L_ZTERM, L_ZFBDT, L_ZLSCH, L_ZLSPR ) UP TO 1 ROWS
FROM BSIK
WHERE LIFNR = L_LIFNR
AND   BUKRS = P_BUKRS
AND   GJAHR = L_GJAHR
AND   BELNR = L_BELNR
AND   BUZEI = L_BUZEI.
ENDSELECT.
*
L_SUBRC = SY-SUBRC.
*
ENDFORM.                    " GET_BSIK_YN220
*&---------------------------------------------------------------------*
*&      Form  GET_BSID_YN120
*&---------------------------------------------------------------------*
FORM GET_BSID_YN120 USING L_KUNNR L_GJAHR L_BELNR L_BUZEI
L_SUBRC
L_ZTERM L_ZFBDT L_ZLSCH L_ZLSPR.
*
SELECT ZTERM ZFBDT ZLSCH ZLSPR
INTO (L_ZTERM, L_ZFBDT, L_ZLSCH, L_ZLSPR ) UP TO 1 ROWS
FROM BSID
WHERE KUNNR = L_KUNNR
AND   BUKRS = P_BUKRS
AND   GJAHR = L_GJAHR
AND   BELNR = L_BELNR
AND   BUZEI = L_BUZEI.
ENDSELECT.
*
L_SUBRC = SY-SUBRC.
*

ENDFORM.                    " GET_BSID_YN120
*&---------------------------------------------------------------------*
*&      Form  YN220_DEL
*&---------------------------------------------------------------------*
FORM YN220_DEL.
DATA:
L_SUBRC TYPE SY-SUBRC.
*
*振替済自社データの削除
LOOP AT GT_YN220_NEW INTO GW_YN220_NEW.
PERFORM GET_BSIK_YN220 USING GW_YN220_NEW-VRFCTON
GW_YN220_NEW-YNGJAHR
GW_YN220_NEW-BELNR
GW_YN220_NEW-BUZEI
L_SUBRC
GW_YN220_NEW-ZTERM
GW_YN220_NEW-ZFBDT
GW_YN220_NEW-ZLSCH
GW_YN220_NEW-ZLSPR.

IF L_SUBRC = 0.
MODIFY GT_YN220_NEW FROM GW_YN220_NEW
TRANSPORTING ZTERM ZFBDT ZLSCH ZLSPR.

ELSE.
PERFORM GET_BSAK_YN220 USING GW_YN220_NEW-VRFCTON
GW_YN220_NEW-YNGJAHR
GW_YN220_NEW-BELNR
GW_YN220_NEW-BUZEI
L_SUBRC
GW_YN220_NEW-ZTERM
GW_YN220_NEW-ZFBDT
GW_YN220_NEW-ZLSCH
GW_YN220_NEW-ZLSPR.
APPEND GW_YN220_NEW TO GT_YN220_DEL.
DELETE GT_YN220_NEW.
ENDIF.
ENDLOOP.

ENDFORM.                                                    " YN220_SEL
*&---------------------------------------------------------------------*
*&      Form  GET_ZN005
*&---------------------------------------------------------------------*
FORM GET_ZN005 USING    L_KUNNR L_CZFBDT L_WAERS.
DATA :
L_LINES TYPE I.
*
SELECT *
INTO TABLE GT_ZN005
FROM ZN005
WHERE BUKRS  = P_BUKRS
AND   KUNNR  = L_KUNNR
AND   CZFBDT = L_CZFBDT
AND   WAERS  = L_WAERS.
*
SORT GT_ZN005 BY SEQ.
*
LOOP AT GT_ZN005 INTO GW_ZN005.
CLEAR:GW_ZN005_TBL,GW_ZN005_NEW.
GW_ZN005_TBL-KUNNR  = GW_ZN005-KUNNR.
GW_ZN005_TBL-CZFBDT = GW_ZN005-CZFBDT.
GW_ZN005_TBL-WAERS  = GW_ZN005-WAERS.
IF GW_ZN005-AUFLG <> SPACE. "入金消込
*処理済み
GW_ZN005_TBL-SUMI_CNT = 1.
APPEND GW_ZN005 TO GT_ZN005_D.
ELSE.
LOOP AT GT_IN_REC_ZN005 INTO GW_IN_REC.
IF GW_IN_REC-SUMI = SPACE.
IF GW_ZN005-KUNNR  = GW_IN_REC-KUNNR     AND
GW_ZN005-CZFBDT = GW_IN_REC-CZFBDT_05 AND
GW_ZN005-WAERS  = GW_IN_REC-WAERS     AND
GW_ZN005-IZFBDT = GW_IN_REC-IZFBDT    AND
GW_ZN005-IWRBTR = GW_IN_REC-ZIWRBTR.
*
MOVE-CORRESPONDING GW_ZN005 TO GW_ZN005_NEW.
GW_ZN005_NEW-ZNYO = GW_IN_REC-ZNYO.
APPEND GW_ZN005_NEW TO GT_ZN005_NEW.
*
GW_ZN005_TBL-SYORI_CNT = 1.
GW_IN_REC-SUMI = C_X.
ENDIF.
MODIFY GT_IN_REC_ZN005 FROM GW_IN_REC TRANSPORTING SUMI.
*2013/10/07 ADD START
IF GW_IN_REC-SUMI = C_X.
EXIT.
ENDIF.
*2013/10/07 ADD END
ENDIF.
ENDLOOP.
ENDIF.
COLLECT GW_ZN005_TBL INTO GT_ZN005_TBL.
ENDLOOP.
*
LOOP AT GT_ZN005 INTO GW_ZN005 WHERE AUFLG = SPACE. "入金消込
CLEAR:GW_ZN005_TBL.
READ TABLE GT_IN_REC_ZN005 INTO GW_IN_REC
WITH KEY KUNNR     = GW_ZN005-KUNNR
CZFBDT_05 = GW_ZN005-CZFBDT
WAERS     = GW_ZN005-WAERS
IZFBDT    = GW_ZN005-IZFBDT
ZIWRBTR   = GW_ZN005-IWRBTR.
IF SY-SUBRC <> 0.
GW_ZN005_TBL-KUNNR  = GW_ZN005-KUNNR.
GW_ZN005_TBL-CZFBDT = GW_ZN005-CZFBDT.
GW_ZN005_TBL-WAERS  = GW_ZN005-WAERS.
GW_ZN005_TBL-MISYORI_CNT = 1.
COLLECT GW_ZN005_TBL INTO GT_ZN005_TBL.
ENDIF.
ENDLOOP.
*
ENDFORM.                                                    " GET_ZN005
*&---------------------------------------------------------------------*
*&      Form  SEL_ZN002_ZN005_NEW
*&---------------------------------------------------------------------*
FORM SEL_ZN002_ZN005_NEW.
DATA :
L_PWRBTR TYPE ZN002-PWRBTR,
L_IWRBTR TYPE ZN005-IWRBTR,
L_SOUSAI TYPE ZN002-PWRBTR,
L_SUM    TYPE ZN002-PWRBTR,
L_SUMX   TYPE ZN002-PWRBTR,
L_SUMY   TYPE ZN002-PWRBTR,
L_SUMZ   TYPE ZN002-PWRBTR,
L_END(1) TYPE C.

*
REFRESH:GT_ZN002_MOD,GT_ZN005_MOD.
CLEAR:GW_ZN002_PWRBTR,GW_ZN005_IWRBTR,
GW_SORT_TBL,L_SOUSAI,L_SUM.
*
LOOP AT GT_ZN002_NEW INTO GW_ZN002.
GW_ZN002_PWRBTR = GW_ZN002_PWRBTR + GW_ZN002-PWRBTR.
ENDLOOP.

LOOP AT GT_ZN005_NEW INTO GW_ZN005.
GW_ZN005_IWRBTR = GW_ZN005_IWRBTR + GW_ZN005-IWRBTR.
ENDLOOP.
*
*2012/05/08 MOD START マイナス相殺はマイナス額をプラスに寄せる
L_PWRBTR = GW_ZN002_PWRBTR.
L_IWRBTR = GW_ZN005_IWRBTR.
*  L_PWRBTR = ABS( GW_ZN002_PWRBTR ).
*  L_IWRBTR = ABS( GW_ZN005_IWRBTR ).
*2012/05/08 MOD END
IF GW_ZN002_PWRBTR <= GW_ZN005_IWRBTR.
L_SOUSAI = GW_ZN002_PWRBTR.
ELSE.
L_SOUSAI = GW_ZN005_IWRBTR.
ENDIF.
*
*残余の振り分け先
IF L_PWRBTR >= L_IWRBTR.
GW_SORT_TBL = 'ZN002'.
GW_SAGAKU = L_PWRBTR - L_IWRBTR.
ELSE.
GW_SORT_TBL = 'ZN005'.
GW_SAGAKU = L_IWRBTR - L_PWRBTR.
ENDIF.
*
IF GW_SORT_TBL = 'ZN002'.
IF GW_ZN002_PWRBTR >= 0.
SORT GT_ZN002_NEW BY ZNYO PWRBTR LIFNR.
ELSE.
SORT GT_ZN002_NEW BY ZNYO PWRBTR DESCENDING LIFNR.
ENDIF.
*対象外
LOOP AT GT_ZN002_NEW INTO GW_ZN002_NEW.
L_SUM = L_SUM + GW_ZN002_NEW-PWRBTR.
IF L_END = SPACE.
IF L_SUM >= L_SOUSAI  .
L_SUMX = L_SUM - GW_ZN002_NEW-PWRBTR.
L_SUMY = L_SOUSAI - L_SUMX.
L_SUMZ = GW_ZN002_NEW-PWRBTR - L_SUMY.
GW_ZN002_NEW-PWRBTR = L_SUMY.
MODIFY GT_ZN002_NEW FROM GW_ZN002_NEW TRANSPORTING PWRBTR.
CLEAR:GW_ZN002_TBL.
GW_ZN002_TBL-LIFNR      = GW_ZN002_NEW-LIFNR.
GW_ZN002_TBL-CZFBDT     = GW_ZN002_NEW-CZFBDT.
GW_ZN002_TBL-WAERS      = GW_ZN002_NEW-WAERS.
GW_ZN002_TBL-PWRBTR_NOW = GW_ZN002_NEW-PWRBTR.
COLLECT GW_ZN002_TBL INTO GT_ZN002_TBL.
GW_ZN002_NEW-UPDT = C_U. "消化
APPEND GW_ZN002_NEW TO GT_ZN002_MOD.
IF L_SUMZ <> 0.
GW_ZN002_NEW-PWRBTR = L_SUMZ.
GW_ZN002_NEW-UPDT = C_I. "残
APPEND GW_ZN002_NEW TO GT_ZN002_MOD.
*未処理件数加算
CLEAR:GW_ZN002_TBL.
GW_ZN002_TBL-LIFNR  = GW_ZN002_NEW-LIFNR.
GW_ZN002_TBL-CZFBDT = GW_ZN002_NEW-CZFBDT.
GW_ZN002_TBL-WAERS  = GW_ZN002_NEW-WAERS.
GW_ZN002_TBL-MISYORI_CNT = 1.
COLLECT GW_ZN002_TBL INTO GT_ZN002_TBL.
ENDIF.
L_END = C_X.
ELSE.
APPEND GW_ZN002_NEW TO GT_ZN002_MOD.
CLEAR:GW_ZN002_TBL.
GW_ZN002_TBL-LIFNR      = GW_ZN002_NEW-LIFNR.
GW_ZN002_TBL-CZFBDT     = GW_ZN002_NEW-CZFBDT.
GW_ZN002_TBL-WAERS      = GW_ZN002_NEW-WAERS.
GW_ZN002_TBL-PWRBTR_NOW = GW_ZN002_NEW-PWRBTR.
COLLECT GW_ZN002_TBL INTO GT_ZN002_TBL.
ENDIF.
ELSE.
GW_ZN002_NEW-UPDT = C_D.
APPEND GW_ZN002_NEW TO GT_ZN002_MOD.
*未処理件数加算
CLEAR:GW_ZN002_TBL.
GW_ZN002_TBL-LIFNR  = GW_ZN002_NEW-LIFNR.
GW_ZN002_TBL-CZFBDT = GW_ZN002_NEW-CZFBDT.
GW_ZN002_TBL-WAERS  = GW_ZN002_NEW-WAERS.
GW_ZN002_TBL-MISYORI_CNT = 1.
COLLECT GW_ZN002_TBL INTO GT_ZN002_TBL.
*
DELETE GT_ZN002_NEW.
ENDIF.
ENDLOOP.
*相手はすべて
LOOP AT GT_ZN005_TBL INTO GW_ZN005_SUB.
CLEAR:GW_ZN005_TBL.
GW_ZN005_TBL-KUNNR  = GW_ZN005_SUB-KUNNR.       "支払人
GW_ZN005_TBL-CZFBDT = GW_ZN005_SUB-CZFBDT.      "照合締日
GW_ZN005_TBL-WAERS  = GW_ZN005_SUB-WAERS.       "通貨
GW_ZN005_TBL-IWRBTR_NOW = GW_ZN005_SUB-IWRBTR.
COLLECT GW_ZN005_TBL INTO GT_ZN005_TBL.
ENDLOOP.
*テーブル更新用テーブル
LOOP AT GT_ZN005_NEW INTO GW_ZN005_NEW.
APPEND GW_ZN005_NEW TO GT_ZN005_MOD.
ENDLOOP.

ELSE.
*
IF GW_ZN005_IWRBTR >= 0.
SORT GT_ZN005_NEW BY ZNYO IWRBTR KUNNR.
ELSE.
SORT GT_ZN005_NEW BY ZNYO IWRBTR DESCENDING  KUNNR.
ENDIF.
*
*対象外
LOOP AT GT_ZN005_NEW INTO GW_ZN005_NEW.
L_SUM = L_SUM + GW_ZN005_NEW-IWRBTR.
IF L_END = SPACE.
IF L_SUM >= L_SOUSAI  .
L_SUMX = L_SUM - GW_ZN005_NEW-IWRBTR.
L_SUMY = L_SOUSAI - L_SUMX.
L_SUMZ = GW_ZN005_NEW-IWRBTR - L_SUMY.
GW_ZN005_NEW-IWRBTR = L_SUMY.
MODIFY GT_ZN005_NEW FROM GW_ZN005_NEW TRANSPORTING IWRBTR.
CLEAR:GW_ZN005_TBL.
GW_ZN005_TBL-KUNNR      = GW_ZN005_NEW-KUNNR.
GW_ZN005_TBL-CZFBDT     = GW_ZN005_NEW-CZFBDT.
GW_ZN005_TBL-WAERS      = GW_ZN005_NEW-WAERS.
GW_ZN005_TBL-IWRBTR_NOW = GW_ZN005_NEW-IWRBTR.
COLLECT GW_ZN005_TBL INTO GT_ZN005_TBL.
GW_ZN005_NEW-UPDT = C_U.  "変更
APPEND GW_ZN005_NEW TO GT_ZN005_MOD.
IF L_SUMZ <> 0.
GW_ZN005_NEW-IWRBTR = L_SUMZ.
GW_ZN005_NEW-UPDT = C_I.
APPEND GW_ZN005_NEW TO GT_ZN005_MOD.
*未処理件数加算
CLEAR:GW_ZN005_TBL.
GW_ZN005_TBL-KUNNR  = GW_ZN005_NEW-KUNNR.
GW_ZN005_TBL-CZFBDT = GW_ZN005_NEW-CZFBDT.
GW_ZN005_TBL-WAERS  = GW_ZN005_NEW-WAERS.
GW_ZN005_TBL-MISYORI_CNT = 1.
COLLECT GW_ZN005_TBL INTO GT_ZN005_TBL.
ENDIF.
L_END = C_X.
ELSE.
APPEND GW_ZN005_NEW TO GT_ZN005_MOD.
CLEAR:GW_ZN005_TBL.
GW_ZN005_TBL-KUNNR      = GW_ZN005_NEW-KUNNR.
GW_ZN005_TBL-CZFBDT     = GW_ZN005_NEW-CZFBDT.
GW_ZN005_TBL-WAERS      = GW_ZN005_NEW-WAERS.
GW_ZN005_TBL-IWRBTR_NOW = GW_ZN005_NEW-IWRBTR.
COLLECT GW_ZN005_TBL INTO GT_ZN005_TBL.
ENDIF.
ELSE.
GW_ZN005_NEW-UPDT = C_D.
APPEND GW_ZN005_NEW TO GT_ZN005_MOD.
*未処理件数加算
CLEAR:GW_ZN005_TBL.
GW_ZN005_TBL-KUNNR  = GW_ZN005_NEW-KUNNR.
GW_ZN005_TBL-CZFBDT = GW_ZN005_NEW-CZFBDT.
GW_ZN005_TBL-WAERS  = GW_ZN005_NEW-WAERS.
GW_ZN005_TBL-MISYORI_CNT = 1.
COLLECT GW_ZN005_TBL INTO GT_ZN005_TBL.
*処理対象外
DELETE GT_ZN005_NEW.
ENDIF.
ENDLOOP.
*相手はすべて
LOOP AT GT_ZN002_TBL INTO GW_ZN002_SUB.
CLEAR:GW_ZN002_TBL.
GW_ZN002_TBL-LIFNR  = GW_ZN002_SUB-LIFNR.       "請求先
GW_ZN002_TBL-CZFBDT = GW_ZN002_SUB-CZFBDT.      "照合締日
GW_ZN002_TBL-WAERS  = GW_ZN002_SUB-WAERS.       "通貨
GW_ZN002_TBL-PWRBTR_NOW = GW_ZN002_SUB-PWRBTR.
COLLECT GW_ZN002_TBL INTO GT_ZN002_TBL.
ENDLOOP.
*テーブル更新用テーブル
LOOP AT GT_ZN002_NEW INTO GW_ZN002_NEW.
APPEND GW_ZN002_NEW TO GT_ZN002_MOD.
ENDLOOP.

ENDIF.
*
ENDFORM.                    " SEL_ZN002_ZN005_NEW
*&---------------------------------------------------------------------*
*&      Form  YN120_DEL
*&---------------------------------------------------------------------*
FORM YN120_DEL.
DATA:
L_SUBRC TYPE SY-SUBRC.
*
*振替済自社データの削除
LOOP AT GT_YN120_NEW INTO GW_YN120_NEW.
PERFORM GET_BSID_YN120 USING GW_YN120_NEW-VRFCTON
GW_YN120_NEW-YNGJAHR
GW_YN120_NEW-BELNR
GW_YN120_NEW-BUZEI
L_SUBRC
GW_YN120_NEW-ZTERM
GW_YN120_NEW-ZFBDT
GW_YN120_NEW-ZLSCH
GW_YN120_NEW-ZLSPR.

IF L_SUBRC = 0.
MODIFY GT_YN120_NEW FROM GW_YN120_NEW
TRANSPORTING ZTERM ZFBDT ZLSCH ZLSPR.

ELSE.
PERFORM GET_BSAD_YN120 USING GW_YN120_NEW-VRFCTON
GW_YN120_NEW-YNGJAHR
GW_YN120_NEW-BELNR
GW_YN120_NEW-BUZEI
L_SUBRC
GW_YN120_NEW-ZTERM
GW_YN120_NEW-ZFBDT
GW_YN120_NEW-ZLSCH
GW_YN120_NEW-ZLSPR.

APPEND GW_YN120_NEW TO GT_YN120_DEL.
DELETE GT_YN120_NEW.
ENDIF.
ENDLOOP.
*
ENDFORM.                                                    " YN120_DEL
*&---------------------------------------------------------------------*
*&      Form  SEL_ZN002_D
*&---------------------------------------------------------------------*
FORM SEL_ZN002_D.
DATA :
L_SUBRC TYPE SY-SUBRC.
*
SORT GT_ZN002_D BY BUKRS LIFNR CZFBDT
GJAHR DESCENDING
BELNR DESCENDING.

DELETE ADJACENT DUPLICATES FROM GT_ZN002_D
COMPARING BUKRS LIFNR CZFBDT.
REFRESH:GT_ZN002_BELNR_TBL,
GT_YN220_DEL_NOW.

LOOP AT GT_ZN002_TBL INTO GW_ZN002_TBL WHERE PWRBTR_NOW <> 0.
*
IF GW_ZN002_TBL-SUMI_CNT <> 0. "振替済みあり

READ TABLE GT_ZN002_D  WITH KEY BUKRS  = P_BUKRS
LIFNR  = GW_ZN002_TBL-LIFNR
CZFBDT = GW_ZN002_TBL-CZFBDT
BINARY SEARCH INTO GW_ZN002_D.
*
IF SY-SUBRC = 0.
*
GW_F30K_LIFNR = GW_ZN002_D-LIFNR.
GW_F30K_GJAHR = GW_ZN002_D-GJAHR.
GW_F30K_BELNR = GW_ZN002_D-BELNR.
*
PERFORM F_ZN002_PSTFLG_CHECK USING GW_F30K_LIFNR
GW_F30K_GJAHR
GW_F30K_BELNR
GW_ZN002_TBL-CZFBDT
GW_ZN002_TBL-KNETXAMT
GW_F30K_BUZEI
L_SUBRC.
IF L_SUBRC = 0.
CLEAR:GW_ZN002_BELNR_TBL.
GW_ZN002_BELNR_TBL-BELNR = GW_F30K_BELNR. "会計伝票番号
GW_ZN002_BELNR_TBL-GJAHR = GW_F30K_GJAHR. "会計年度
GW_ZN002_BELNR_TBL-BUZEI
= GW_F30K_BUZEI. "会計伝票内の明細番号
APPEND GW_ZN002_BELNR_TBL TO GT_ZN002_BELNR_TBL.
MODIFY GT_ZN002_TBL FROM GW_ZN002_TBL TRANSPORTING KNETXAMT.
*
PERFORM F_BSIK_BSAK_DEL_NOW_GET USING GW_ZN002_TBL-LIFNR
GW_ZN002_TBL-CZFBDT.
GW_YN220_DEL_NOW = GW_YN220_NOW.
APPEND GW_YN220_DEL_NOW TO GT_YN220_DEL_NOW.
*
ENDIF.
ENDIF.
ENDIF.
ENDLOOP.
*
ENDFORM.                    " SEL_ZN002_D
*&---------------------------------------------------------------------*
*&      Form  F_ZN002_PSTFLG_CHECK
*&---------------------------------------------------------------------*
FORM F_ZN002_PSTFLG_CHECK USING  L_LIFNR L_GJAHR L_BELNR L_CZFBDT
L_WRBTR L_BUZEI L_SUBRC.

DATA :
L_SHKZG TYPE BSIK-SHKZG.
*
PERFORM GET_BSIK_PSTFLG USING L_LIFNR
L_GJAHR
L_BELNR
L_CZFBDT
L_SUBRC
L_WRBTR
L_SHKZG
L_BUZEI.
CHECK L_SUBRC = 0.
*
IF L_SHKZG = C_S.
L_WRBTR = L_WRBTR *  -1  .
ENDIF.

ENDFORM.                    " F_ZN002_PSTFLG_CHECK
*&---------------------------------------------------------------------*
*&      Form  GET_BSIK_PSTFLG
*&---------------------------------------------------------------------*
FORM GET_BSIK_PSTFLG USING L_LIFNR L_GJAHR L_BELNR L_CZFBDT
L_SUBRC
L_WRBTR L_SHKZG L_BUZEI.
*
DATA :
L_SGTXT TYPE BSIK-SGTXT.
*
READ TABLE GT_LIFNR_TBL WITH TABLE KEY LIFNR = L_LIFNR
INTO GW_LIFNR_TBL.
*
CONCATENATE L_CZFBDT '消込残'
INTO  L_SGTXT.
*
SELECT WRBTR SHKZG BUZEI
INTO (L_WRBTR, L_SHKZG, L_BUZEI )
FROM BSIK
WHERE LIFNR = L_LIFNR
AND   BUKRS = P_BUKRS
AND   GJAHR = L_GJAHR
AND   BELNR = L_BELNR
AND   HKONT = GW_LIFNR_TBL-AKONT
AND   SGTXT = L_SGTXT.
EXIT.
ENDSELECT.
*
L_SUBRC = SY-SUBRC.
*
ENDFORM.                    " GET_BSIK_PSTFLG
*&---------------------------------------------------------------------*
*&      Form  SEL_ZN005_D
*&---------------------------------------------------------------------*
FORM SEL_ZN005_D.
DATA :
L_SUBRC TYPE SY-SUBRC.
*
SORT GT_ZN005_D BY BUKRS KUNNR CZFBDT
IGJAHR DESCENDING
IBELNER DESCENDING.
DELETE ADJACENT DUPLICATES FROM GT_ZN005_D
COMPARING BUKRS KUNNR CZFBDT.

REFRESH:GT_ZN005_BELNR_TBL,
GT_YN120_DEL_NOW.

LOOP AT GT_ZN005_TBL INTO GW_ZN005_TBL WHERE IWRBTR_NOW <> 0.
*
IF GW_ZN005_TBL-SUMI_CNT <> 0. "振替済みあり

READ TABLE GT_ZN005_D  WITH KEY BUKRS  = P_BUKRS
KUNNR  = GW_ZN005_TBL-KUNNR
CZFBDT = GW_ZN005_TBL-CZFBDT
BINARY SEARCH INTO GW_ZN005_D.
IF SY-SUBRC = 0.

GW_F30D_KUNNR = GW_ZN005_D-KUNNR.
GW_F30D_GJAHR = GW_ZN005_D-IGJAHR.
GW_F30D_BELNR = GW_ZN005_D-IBELNER.
*
PERFORM F_ZN005_PSTFLG_CHECK USING GW_F30D_KUNNR
GW_F30D_GJAHR
GW_F30D_BELNR
GW_ZN005_TBL-CZFBDT
GW_ZN005_TBL-KNETXAMT
GW_F30D_BUZEI
L_SUBRC.
IF L_SUBRC = 0.
CLEAR:GW_ZN005_BELNR_TBL.
GW_ZN005_BELNR_TBL-BELNR = GW_F30D_BELNR. "会計伝票番号
GW_ZN005_BELNR_TBL-GJAHR = GW_F30D_GJAHR. "会計年度
GW_ZN005_BELNR_TBL-BUZEI
= GW_F30D_BUZEI. "会計伝票内の明細番号
APPEND GW_ZN005_BELNR_TBL TO GT_ZN005_BELNR_TBL.
MODIFY GT_ZN005_TBL FROM GW_ZN005_TBL TRANSPORTING KNETXAMT.

PERFORM F_BSID_BSAD_DEL_NOW_GET USING GW_ZN005_TBL-KUNNR
GW_ZN005_TBL-CZFBDT.

GW_YN120_DEL_NOW = GW_YN120_NOW.
APPEND GW_YN120_DEL_NOW TO GT_YN120_DEL_NOW.

ENDIF.
ENDIF.
ENDIF.
ENDLOOP.
*
ENDFORM.                    " SEL_ZN005_D
*&---------------------------------------------------------------------*
*&      Form  F_ZN005_PSTFLG_CHECK
*&---------------------------------------------------------------------*
FORM F_ZN005_PSTFLG_CHECK USING  L_LIFNR L_GJAHR L_BELNR L_CZFBDT
L_WRBTR L_BUZEI L_SUBRC.
DATA :
L_SHKZG TYPE BSIK-SHKZG.
*
PERFORM GET_BSID_PSTFLG USING L_LIFNR
L_GJAHR
L_BELNR
L_CZFBDT
L_SUBRC
L_WRBTR
L_SHKZG
L_BUZEI.
CHECK L_SUBRC = 0.
*
IF L_SHKZG = C_H.
L_WRBTR = L_WRBTR *  -1  .
ENDIF.

ENDFORM.                    " F_ZN005_PSTFLG_CHECK
*&---------------------------------------------------------------------*
*&      Form  GET_BSID_PSTFLG
*&---------------------------------------------------------------------*
FORM GET_BSID_PSTFLG USING  L_KUNNR L_GJAHR L_BELNR  L_CZFBDT
L_SUBRC
L_WRBTR L_SHKZG L_BUZEI.
DATA:
L_SGTXT TYPE BSID-SGTXT.
*
READ TABLE GT_KUNNR_TBL WITH TABLE KEY KUNNR = L_KUNNR
INTO GW_KUNNR_TBL.
*
CONCATENATE L_CZFBDT '消込残'
INTO  L_SGTXT.
*
SELECT WRBTR SHKZG BUZEI
INTO (L_WRBTR, L_SHKZG, L_BUZEI )
FROM BSID
WHERE KUNNR = L_KUNNR
AND   BUKRS = P_BUKRS
AND   GJAHR = L_GJAHR
AND   BELNR = L_BELNR
AND   HKONT = GW_KUNNR_TBL-AKONT
AND   SGTXT = L_SGTXT.
EXIT.
ENDSELECT.
*
L_SUBRC = SY-SUBRC.
*
ENDFORM.                    " GET_BSID_PSTFLG
*&---------------------------------------------------------------------*
*&      Form  F_F-30_CNTL
*&---------------------------------------------------------------------*
FORM F_F-30_CNTL.
DATA :
L_MSGTEXT TYPE STRING,
L_SUBRC   TYPE SY-SUBRC,
L_BELNR       TYPE ZN002-BELNR,  "会計伝票番号
L_MODE(1) TYPE C.
*
*ＢＤＣ編集
REFRESH:GT_BDC_DATA,GT_BDC_MSG.
CLEAR:GW_BKPF_XMWST. "税フラグ
*
PERFORM F_BDC_DATA.
*
CALL TRANSACTION 'F-30' USING GT_BDC_DATA
MODE GW_F-30_MODE
UPDATE C_S
MESSAGES INTO GT_BDC_MSG.
*
READ TABLE GT_BDC_MSG WITH KEY MSGID = 'F5'
MSGNR = '312'
INTO GW_BDC_MSG.
*
IF SY-SUBRC = 0.
*正常
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = GW_BDC_MSG-MSGV1(10)
IMPORTING
OUTPUT = L_BELNR.
*正常
*支払予定（仕入）の更新
PERFORM UPDATE_ZN002 USING  L_BELNR L_SUBRC.
IF NOT L_SUBRC IS INITIAL.
GW_ERR = C_ERR.
*支払予定(ZN002)の更新に失敗しました。決済転記 & を取消してください
MESSAGE I803 WITH L_BELNR INTO L_MSGTEXT.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR_MOD-PLIFNR.
GW_PLIFNR_ERR-ERRMSG = L_MSGTEXT.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
EXIT.
ENDIF.
CHECK GW_ERR IS INITIAL.
*入金予定（売上）の更新
PERFORM UPDATE_ZN005 USING  L_BELNR L_SUBRC GW_PLIFNR_MOD-PLIFNR.
IF NOT L_SUBRC IS INITIAL.
GW_ERR = C_ERR.
*入金予定(ZN005)の更新に失敗しました。決済転記 & を取消してください
MESSAGE I810 WITH L_BELNR INTO L_MSGTEXT.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR_MOD-PLIFNR.
GW_PLIFNR_ERR-ERRMSG = L_MSGTEXT.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
EXIT.
ELSE.
GW_PLIFNR_OK-PLIFNR = GW_PLIFNR_MOD-PLIFNR.
GW_PLIFNR_OK-BELNR  = L_BELNR.
APPEND GW_PLIFNR_OK TO GT_PLIFNR_OK.
*
COMMIT WORK AND WAIT.
ENDIF.
*エラー
ELSE.
LOOP AT GT_BDC_MSG INTO GW_BDC_MSG WHERE MSGTYP = C_A OR
MSGTYP = C_E OR
MSGTYP = C_S.
MESSAGE ID   GW_BDC_MSG-MSGID
TYPE 'I'
NUMBER GW_BDC_MSG-MSGNR
WITH GW_BDC_MSG-MSGV1
GW_BDC_MSG-MSGV2
GW_BDC_MSG-MSGV3
GW_BDC_MSG-MSGV4
INTO L_MSGTEXT.
GW_ERR = C_E.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR_MOD-PLIFNR.
GW_PLIFNR_ERR-ERRMSG = L_MSGTEXT.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
EXIT.
ENDLOOP.
*　 リスト出力
ENDIF.

*ＢＤＣ処理の後処理
REFRESH:GT_BDC_DATA,GT_BDC_MSG,
GT_ZN002_BELNR_TBL,GT_ZN005_BELNR_TBL,
GT_ZN002_BDC,GT_ZN005_BDC.
*
ENDFORM.                    " F_F-30_CNTL
*&---------------------------------------------------------------------*
*&      Form  SEL_YN220
*&---------------------------------------------------------------------*
FORM SEL_YN220.
DATA :
L_KNETXAMT TYPE YN220-KNETXAMT,
L_SAGAKU   TYPE YN220-KNETXAMT.
*
REFRESH:GT_ZN002_BDC.
*
LOOP AT GT_ZN002_TBL INTO GW_ZN002_TBL WHERE PWRBTR_NOW <> 0.
*
REFRESH GT_YN220_NOW.
CLEAR:  GW_ZN002_BDC,
L_KNETXAMT.

LOOP AT GT_YN220_NEW INTO GW_YN220_NEW
WHERE VRFCTON = GW_ZN002_TBL-LIFNR    "仕入先コード(請求先)
AND   CZFBDT  = GW_ZN002_TBL-CZFBDT.  "照合締日
APPEND GW_YN220_NEW TO GT_YN220_NOW.
ENDLOOP.
*   入庫日、会計伝票会計年度、会計伝票番号、会計伝票明細番号
SORT GT_YN220_NOW BY LDATE1 YNGJAHR BELNR BUZEI.
*
IF GW_ZN002_TBL-KNETXAMT <> 0.
L_KNETXAMT = GW_ZN002_TBL-KNETXAMT.
READ TABLE GT_YN220_DEL_NOW WITH KEY VRFCTON = GW_ZN002_TBL-LIFNR
CZFBDT  = GW_ZN002_TBL-CZFBDT
INTO GW_YN220_NOW.
*
GW_ZN002_BDC         = GW_ZN002_TBL.
GW_ZN002_BDC-YNGJAHR = GW_YN220_NOW-YNGJAHR.
GW_ZN002_BDC-BELNR   = GW_YN220_NOW-BELNR.
GW_ZN002_BDC-BUZEI   = GW_YN220_NOW-BUZEI.
GW_ZN002_BDC-ZTERM   = GW_YN220_NOW-ZTERM.
GW_ZN002_BDC-ZFBDT   = GW_YN220_NOW-ZFBDT.
GW_ZN002_BDC-ZLSCH   = GW_YN220_NOW-ZLSCH.        "支払方法
GW_ZN002_BDC-ZLSPR   = GW_YN220_NOW-ZLSPR.        "支払保留
*
ENDIF.
*
*2012/05/08 DEL START "マイナス対応
*消込残で金額が満たされている場合、自社データの明細を使い切る
*判定が行われない為、削除
*    IF GW_ZN002_TBL-PWRBTR_NOW >  L_KNETXAMT.
*2012/05/08 DEL END
IF GW_ZN002_TBL-MISYORI_CNT = 0.
LOOP AT GT_YN220_NOW INTO GW_YN220_NOW.
L_KNETXAMT = L_KNETXAMT + GW_YN220_NOW-KNETXAMT.
GW_ZN002_BELNR_TBL-BELNR
= GW_YN220_NOW-BELNR.   "会計伝票番号
GW_ZN002_BELNR_TBL-GJAHR
= GW_YN220_NOW-YNGJAHR. "会計伝票会計年度
GW_ZN002_BELNR_TBL-BUZEI
= GW_YN220_NOW-BUZEI.   "会計伝票明細番号
APPEND GW_ZN002_BELNR_TBL TO GT_ZN002_BELNR_TBL.
GW_ZN002_BDC         = GW_ZN002_TBL.
GW_ZN002_BDC-YNGJAHR = GW_YN220_NOW-YNGJAHR.
GW_ZN002_BDC-BELNR   = GW_YN220_NOW-BELNR.
GW_ZN002_BDC-BUZEI   = GW_YN220_NOW-BUZEI.
GW_ZN002_BDC-ZTERM   = GW_YN220_NOW-ZTERM.
GW_ZN002_BDC-ZFBDT   = GW_YN220_NOW-ZFBDT.
GW_ZN002_BDC-ZLSCH   = GW_YN220_NOW-ZLSCH.
GW_ZN002_BDC-ZLSPR   = GW_YN220_NOW-ZLSPR.
ENDLOOP.
ELSE.
LOOP AT GT_YN220_NOW INTO GW_YN220_NOW.
IF GW_ZN002_TBL-PWRBTR_NOW <= L_KNETXAMT
*2012/05/08 ADD START "マイナス対応
*前回残もない場合は、自社データを読込する必要がある
*前回残で金額が満たされていれば処理を抜ける
AND L_KNETXAMT <> 0.
*2012/05/08 ADD END.
EXIT.
ELSE.
L_KNETXAMT = L_KNETXAMT + GW_YN220_NOW-KNETXAMT.
GW_ZN002_BELNR_TBL-BELNR
= GW_YN220_NOW-BELNR.   "会計伝票番号
GW_ZN002_BELNR_TBL-GJAHR
= GW_YN220_NOW-YNGJAHR. "会計伝票会計年度
GW_ZN002_BELNR_TBL-BUZEI
= GW_YN220_NOW-BUZEI.   "会計伝票明細番号
APPEND GW_ZN002_BELNR_TBL TO GT_ZN002_BELNR_TBL.
GW_ZN002_BDC         = GW_ZN002_TBL.
GW_ZN002_BDC-YNGJAHR = GW_YN220_NOW-YNGJAHR.
GW_ZN002_BDC-BELNR   = GW_YN220_NOW-BELNR.
GW_ZN002_BDC-BUZEI   = GW_YN220_NOW-BUZEI.
GW_ZN002_BDC-ZTERM   = GW_YN220_NOW-ZTERM.
GW_ZN002_BDC-ZFBDT   = GW_YN220_NOW-ZFBDT.
GW_ZN002_BDC-ZLSCH   = GW_YN220_NOW-ZLSCH.
GW_ZN002_BDC-ZLSPR   = GW_YN220_NOW-ZLSPR.
ENDIF.
ENDLOOP.
ENDIF.
*2012/05/08 DEL START "マイナス対応
*    ENDIF.
*2012/05/08 DEL END
*
L_SAGAKU =  GW_ZN002_TBL-PWRBTR_NOW - L_KNETXAMT.
*
IF L_SAGAKU <> 0.
GW_ZN002_BDC-SAGAKU = L_SAGAKU.
APPEND GW_ZN002_BDC TO GT_ZN002_BDC.
ENDIF.
*
ENDLOOP.
*
ENDFORM.                                                    " SEL_YN220
*&---------------------------------------------------------------------*
*&      Form  SEL_YN120
*&---------------------------------------------------------------------*
FORM SEL_YN120.
DATA :
L_KNETXAMT TYPE YN120-KNETXAMT,
L_SAGAKU   TYPE YN220-KNETXAMT.

*
REFRESH:GT_ZN005_BDC.

*
LOOP AT GT_ZN005_TBL INTO GW_ZN005_TBL WHERE IWRBTR_NOW <> 0.
*
REFRESH GT_YN120_NOW.
CLEAR:GW_ZN005_BDC,L_KNETXAMT.

LOOP AT GT_YN120_NEW INTO GW_YN120_NEW
WHERE VRFCTON = GW_ZN005_TBL-KUNNR    "得意先コード(支払人)
AND   CZFBDT  = GW_ZN005_TBL-CZFBDT.  "照合締日
APPEND GW_YN120_NEW TO GT_YN120_NOW.
ENDLOOP.
*   会計伝票会計年度、会計伝票番号、会計伝票明細番号
SORT GT_YN120_NOW BY YNGJAHR BELNR BUZEI.
*
IF GW_ZN005_TBL-KNETXAMT <> 0.
L_KNETXAMT = GW_ZN005_TBL-KNETXAMT.
READ TABLE GT_YN120_DEL_NOW WITH KEY VRFCTON = GW_ZN005_TBL-KUNNR
CZFBDT  = GW_ZN005_TBL-CZFBDT
INTO GW_YN120_NOW.
*
GW_ZN005_BDC         = GW_ZN005_TBL.
GW_ZN005_BDC-YNGJAHR = GW_YN120_NOW-YNGJAHR.
GW_ZN005_BDC-BELNR   = GW_YN120_NOW-BELNR.
GW_ZN005_BDC-BUZEI   = GW_YN120_NOW-BUZEI.
GW_ZN005_BDC-ZTERM   = GW_YN120_NOW-ZTERM.
GW_ZN005_BDC-ZFBDT   = GW_YN120_NOW-ZFBDT.
GW_ZN005_BDC-ZLSCH   = GW_YN120_NOW-ZLSCH.
GW_ZN005_BDC-ZLSPR   = GW_YN120_NOW-ZLSPR.
*
ENDIF.
*
*2012/05/08 DEL START "マイナス対応
*消込残で金額が満たされている場合、自社データの明細を使い切る
*判定が行われない為、削除
*    IF GW_ZN005_TBL-IWRBTR_NOW >  L_KNETXAMT.
*2012/05/08 DEL END
IF GW_ZN005_TBL-MISYORI_CNT = 0.
LOOP AT GT_YN120_NOW INTO GW_YN120_NOW.
L_KNETXAMT = L_KNETXAMT + GW_YN120_NOW-KNETXAMT.
GW_ZN005_BELNR_TBL-BELNR
= GW_YN120_NOW-BELNR.   "会計伝票番号
GW_ZN005_BELNR_TBL-GJAHR
= GW_YN120_NOW-YNGJAHR. "会計伝票会計年度
GW_ZN005_BELNR_TBL-BUZEI
= GW_YN120_NOW-BUZEI.   "会計伝票明細番号
APPEND GW_ZN005_BELNR_TBL TO GT_ZN005_BELNR_TBL.
GW_ZN005_BDC         = GW_ZN005_TBL.
GW_ZN005_BDC-YNGJAHR = GW_YN120_NOW-YNGJAHR.
GW_ZN005_BDC-BELNR   = GW_YN120_NOW-BELNR.
GW_ZN005_BDC-BUZEI   = GW_YN120_NOW-BUZEI.
GW_ZN005_BDC-ZTERM   = GW_YN120_NOW-ZTERM.
GW_ZN005_BDC-ZFBDT   = GW_YN120_NOW-ZFBDT.
GW_ZN005_BDC-ZLSCH   = GW_YN120_NOW-ZLSCH.
GW_ZN005_BDC-ZLSPR   = GW_YN120_NOW-ZLSPR.
ENDLOOP.
ELSE.
LOOP AT GT_YN120_NOW INTO GW_YN120_NOW.
IF GW_ZN005_TBL-IWRBTR_NOW <= L_KNETXAMT
*2012/05/08 ADD START "マイナス対応
*前回残もない場合は、自社データを読込する必要がある
*前回残で金額が満たされていれば処理を抜ける
AND L_KNETXAMT <> 0.
*2012/05/08 ADD END.
EXIT.
ELSE.
L_KNETXAMT = L_KNETXAMT + GW_YN120_NOW-KNETXAMT.
GW_ZN005_BELNR_TBL-BELNR
= GW_YN120_NOW-BELNR.   "会計伝票番号
GW_ZN005_BELNR_TBL-GJAHR
= GW_YN120_NOW-YNGJAHR. "会計伝票会計年度
GW_ZN005_BELNR_TBL-BUZEI
= GW_YN120_NOW-BUZEI.   "会計伝票明細番号
APPEND GW_ZN005_BELNR_TBL TO GT_ZN005_BELNR_TBL.
GW_ZN005_BDC         = GW_ZN005_TBL.
GW_ZN005_BDC-YNGJAHR = GW_YN120_NOW-YNGJAHR.
GW_ZN005_BDC-BELNR   = GW_YN120_NOW-BELNR.
GW_ZN005_BDC-BUZEI   = GW_YN120_NOW-BUZEI.
GW_ZN005_BDC-ZTERM   = GW_YN120_NOW-ZTERM.
GW_ZN005_BDC-ZFBDT   = GW_YN120_NOW-ZFBDT.
GW_ZN005_BDC-ZLSCH   = GW_YN120_NOW-ZLSCH.
GW_ZN005_BDC-ZLSPR   = GW_YN120_NOW-ZLSPR.
ENDIF.
ENDLOOP.
ENDIF.
*2012/05/08 DEL START
*    ENDIF.
*2012/05/08 DEL END
*
L_SAGAKU =  GW_ZN005_TBL-IWRBTR_NOW - L_KNETXAMT.
*
IF L_SAGAKU <> 0.
GW_ZN005_BDC-SAGAKU = L_SAGAKU.
APPEND GW_ZN005_BDC TO GT_ZN005_BDC.
ENDIF.

*
ENDLOOP.
*
ENDFORM.                                                    " SEL_YN120
*&---------------------------------------------------------------------*
*&      Form  F_BDC_DATA
*&---------------------------------------------------------------------*
FORM F_BDC_DATA.
*
IF GT_ZN002_BELNR_TBL[] IS INITIAL AND
GT_ZN005_BELNR_TBL[] IS INITIAL.  "消込なし
PERFORM F_F-30_TOP_1.
ELSE.                          "消込あり
PERFORM F_F-30_TOP_2.
ENDIF.
*
ENDFORM.                    " F_BDC_DATA
*&---------------------------------------------------------------------*
*&      Form  F_F-30_TOP_1
*&---------------------------------------------------------------------*
FORM F_F-30_TOP_1.
*
CLEAR:GW_ZN002_INDEX,GW_ZN005_INDEX.
*
IF NOT GT_ZN002_BDC[] IS INITIAL.
GW_ZN002_INDEX = 1.
READ TABLE GT_ZN002_BDC INDEX GW_ZN002_INDEX
INTO GW_ZN002_BDC.
PERFORM F_NEWBS_NEWKO USING GW_ZN002_BDC-MISYORI_CNT
C_K
GW_ZN002_BDC-SAGAKU
GW_ZN002_BDC-LIFNR
CHANGING GW_NEWBS GW_NEWKO.
ELSE.
GW_ZN005_INDEX = 1.
READ TABLE GT_ZN005_BDC INDEX GW_ZN005_INDEX
INTO GW_ZN005_BDC.
PERFORM F_NEWBS_NEWKO USING GW_ZN005_BDC-MISYORI_CNT
C_D
GW_ZN005_BDC-SAGAKU
GW_ZN005_BDC-KUNNR
CHANGING GW_NEWBS GW_NEWKO.
ENDIF.
*
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0122',
*2012/05/25 MOD START
*    ' ' 'BKPF-BLDAT' P_BLDAT,              "伝票日付
' ' 'BKPF-BLDAT' GW_BUDAT,              "伝票日付
*2012/05/25 MOD END
' ' 'BKPF-BLART' P_BLART,              "伝票タイプ
' ' 'BKPF-BUKRS' P_BUKRS,              "会社コード
' ' 'BKPF-BUDAT' GW_BUDAT,             "転記日付
' ' 'BKPF-WAERS' GW_WAERS,             "通貨
' ' 'RF05A-XPOS1(04)' 'X',             "決済振替転記
' ' 'BKPF-BKTXT' P_BKTXT,              "伝票ヘッダ Text
' ' 'RF05A-NEWBS' GW_NEWBS,       "次明細の転記キー
' ' 'RF05A-NEWKO' GW_NEWKO,       "次明細の勘定またはマッチコード
' ' 'BDC_OKCODE' '/00'.
"
*
GW_ZN002_INDEX = GW_ZN005_INDEX = 1.
*
IF NOT GT_ZN002_BDC[] IS INITIAL.
DO.
READ TABLE GT_ZN002_BDC INDEX GW_ZN002_INDEX
INTO GW_ZN002_BDC.
IF SY-SUBRC <> 0.
EXIT.
ELSE.
IF GW_ZN002_BDC-MISYORI_CNT = 0.
PERFORM F_SAPMF05A_0300 USING C_K GW_ZN002_BDC-SAGAKU.
ELSE.
PERFORM F_SAPMF05A_0302 USING C_K
GW_ZN002_BDC-SAGAKU
GW_ZN002_BDC-WAERS
GW_ZN002_BDC-YNGJAHR
GW_ZN002_BDC-BELNR
GW_ZN002_BDC-BUZEI
GW_ZN002_BDC-ZTERM
GW_ZN002_BDC-ZFBDT
GW_ZN002_BDC-ZLSCH
GW_ZN002_BDC-ZLSPR
GW_ZN002_BDC-CZFBDT.

ENDIF.
*
GW_ZN002_INDEX = GW_ZN002_INDEX + 1.
ENDIF.
ENDDO.
ENDIF.
IF NOT GT_ZN005_BDC[] IS INITIAL.
DO.
READ TABLE GT_ZN005_BDC INDEX GW_ZN005_INDEX
INTO GW_ZN005_BDC.
IF SY-SUBRC <> 0.
EXIT.
ELSE.
IF GW_ZN005_BDC-MISYORI_CNT = 0.
PERFORM F_SAPMF05A_0300 USING C_D GW_ZN005_BDC-SAGAKU.
ELSE.
PERFORM F_SAPMF05A_0302 USING C_D
GW_ZN005_BDC-SAGAKU
GW_ZN005_BDC-WAERS
GW_ZN005_BDC-YNGJAHR
GW_ZN005_BDC-BELNR
GW_ZN005_BDC-BUZEI
GW_ZN005_BDC-ZTERM
GW_ZN005_BDC-ZFBDT
GW_ZN005_BDC-ZLSCH
GW_ZN005_BDC-ZLSPR
GW_ZN005_BDC-CZFBDT.

ENDIF.
GW_ZN005_INDEX = GW_ZN005_INDEX + 1.
ENDIF.
ENDDO.
ENDIF.
*
ENDFORM.                    " F_F-30_TOP_1
*&---------------------------------------------------------------------*
*       ＢＤＣテーブルの設定
*----------------------------------------------------------------------*
FORM GEN_BDC USING L_DYNBEGIN  L_FNAM L_FVAL.
*
CLEAR GW_BDC_DATA.
*   dynbeginがスペースの場合
IF L_DYNBEGIN IS INITIAL.
GW_BDC_DATA-FNAM      =  L_FNAM.
GW_BDC_DATA-FVAL      =  L_FVAL.
ELSE.
*   dynbeginがスペース以外の場合
GW_BDC_DATA-PROGRAM   =  L_FNAM.
GW_BDC_DATA-DYNPRO    =  L_FVAL.
GW_BDC_DATA-DYNBEGIN  =  C_X.
ENDIF.
*   ＢＤＣテーブルに追加
APPEND GW_BDC_DATA TO GT_BDC_DATA.
ENDFORM.                    " GEN_BDC
*&---------------------------------------------------------------------*
*&      Form  F_F-30_TOP_2
*&---------------------------------------------------------------------*
FORM F_F-30_TOP_2.
*
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0122',
*2012/05/25 MOD START
*    ' ' 'BKPF-BLDAT' P_BLDAT,              "伝票日付
' ' 'BKPF-BLDAT' GW_BUDAT,              "伝票日付
*2012/05/25 MOD END
' ' 'BKPF-BLART' P_BLART,              "伝票タイプ
' ' 'BKPF-BUKRS' P_BUKRS,              "会社コード
' ' 'BKPF-BUDAT' GW_BUDAT,             "転記日付
' ' 'BKPF-WAERS' GW_WAERS,             "通貨
' ' 'RF05A-XPOS1(04)' 'X',             "決済振替転記
' ' 'BKPF-BKTXT' P_BKTXT,              "伝票ヘッダ Text
' ' 'BDC_OKCODE' '=SL'.                "【未決済明細選択】
*消込
IF NOT GT_ZN002_BELNR_TBL[] IS INITIAL.
PERFORM F_SAPMF05A_0710_K.
IF NOT GT_ZN005_BELNR_TBL[] IS INITIAL.
PERFORM F_SAPMF05A_0710_D.
ELSE.
PERFORM GEN_BDC USING : 'X' 'SAPDF05X' '3100',
' ' 'BDC_OKCODE' '=AB'.
ENDIF.
ELSE.
PERFORM F_SAPMF05A_0710_D.
ENDIF.
*2012/05/07 INSERT START
IF GT_ZN002_BDC[] IS INITIAL AND
GT_ZN005_BDC[] IS INITIAL.
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0700',
' ' 'BDC_OKCODE' '=BU'.    "
EXIT.
ENDIF.
*2012/05/07 INSERT END
*
CLEAR:GW_ZN002_INDEX,GW_ZN005_INDEX.
*
IF NOT GT_ZN002_BDC[] IS INITIAL.
GW_ZN002_INDEX = 1.
READ TABLE GT_ZN002_BDC INDEX GW_ZN002_INDEX
INTO GW_ZN002_BDC.
PERFORM F_NEWBS_NEWKO USING GW_ZN002_BDC-MISYORI_CNT
C_K
GW_ZN002_BDC-SAGAKU
GW_ZN002_BDC-LIFNR
CHANGING GW_NEWBS GW_NEWKO.
PERFORM F_SAPMF05A_0700 USING  GW_NEWBS GW_NEWKO.
ELSE.
GW_ZN005_INDEX = 1.
READ TABLE GT_ZN005_BDC INDEX GW_ZN005_INDEX
INTO GW_ZN005_BDC.
PERFORM F_NEWBS_NEWKO USING GW_ZN005_BDC-MISYORI_CNT
C_D
GW_ZN005_BDC-SAGAKU
GW_ZN005_BDC-KUNNR
CHANGING GW_NEWBS GW_NEWKO.
PERFORM F_SAPMF05A_0700 USING  GW_NEWBS GW_NEWKO.
ENDIF.

GW_ZN002_INDEX = GW_ZN005_INDEX = 1.
*
IF NOT GT_ZN002_BDC[] IS INITIAL.
DO.
READ TABLE GT_ZN002_BDC INDEX GW_ZN002_INDEX
INTO GW_ZN002_BDC.
IF SY-SUBRC <> 0.
EXIT.
ELSE.
IF GW_ZN002_BDC-MISYORI_CNT = 0.
PERFORM F_SAPMF05A_0300 USING C_K GW_ZN002_BDC-SAGAKU.
ELSE.
PERFORM F_SAPMF05A_0302 USING C_K
GW_ZN002_BDC-SAGAKU
GW_ZN002_BDC-WAERS
GW_ZN002_BDC-YNGJAHR
GW_ZN002_BDC-BELNR
GW_ZN002_BDC-BUZEI
GW_ZN002_BDC-ZTERM
GW_ZN002_BDC-ZFBDT
GW_ZN002_BDC-ZLSCH
GW_ZN002_BDC-ZLSPR
GW_ZN002_BDC-CZFBDT.

ENDIF.
*
GW_ZN002_INDEX = GW_ZN002_INDEX + 1.
ENDIF.
ENDDO.
ENDIF.
IF NOT GT_ZN005_BDC[] IS INITIAL.
DO.
READ TABLE GT_ZN005_BDC INDEX GW_ZN005_INDEX
INTO GW_ZN005_BDC.
IF SY-SUBRC <> 0.
EXIT.
ELSE.
IF GW_ZN005_BDC-MISYORI_CNT = 0.
PERFORM F_SAPMF05A_0300 USING C_D GW_ZN005_BDC-SAGAKU.
ELSE.
PERFORM F_SAPMF05A_0302 USING C_D
GW_ZN005_BDC-SAGAKU
GW_ZN005_BDC-WAERS
GW_ZN005_BDC-YNGJAHR
GW_ZN005_BDC-BELNR
GW_ZN005_BDC-BUZEI
GW_ZN005_BDC-ZTERM
GW_ZN005_BDC-ZFBDT
GW_ZN005_BDC-ZLSCH
GW_ZN005_BDC-ZLSPR
GW_ZN005_BDC-CZFBDT.

ENDIF.
GW_ZN005_INDEX = GW_ZN005_INDEX + 1.
ENDIF.
ENDDO.
ENDIF.

*
ENDFORM.                    " F_F-30_TOP_2
*&---------------------------------------------------------------------*
*&      Form  F_SAPMF05A_0710_K
*&---------------------------------------------------------------------*
FORM F_SAPMF05A_0710_K.
*
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0710',
' ' 'RF05A-AGBUK' P_BUKRS,             "会社コード
' ' 'RF05A-AGKOA' 'K',                 "仕入先
' ' 'RF05A-XNOPS' 'X',                 "標準未決済明細
' ' 'BDC_OKCODE' '=SLB'.               "

LOOP AT GT_ZN002_BELNR_TBL INTO GW_ZN002_BELNR_TBL.
CONCATENATE GW_ZN002_BELNR_TBL-BELNR
GW_ZN002_BELNR_TBL-GJAHR
GW_ZN002_BELNR_TBL-BUZEI
INTO GW_RF05A_SEL01.
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0733',
' ' 'RF05A-FELDN(01)' 'BELNR',       "項目
' ' 'RF05A-SEL01(01)' GW_RF05A_SEL01,
"未決済明細選択基準の入力項目
' ' 'BDC_OKCODE' '/00'.
AT LAST.
IF NOT GT_ZN005_BELNR_TBL[] IS INITIAL.
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0733',
' ' 'BDC_OKCODE' '=SLK'.             "
ELSE.
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0733',
' ' 'BDC_OKCODE' '=PA'.             "
ENDIF.
ENDAT.
*
ENDLOOP.
*
ENDFORM.                    " F_SAPMF05A_0710_K
*&---------------------------------------------------------------------*
*&      Form  F_SAPMF05A_0710_D
*&---------------------------------------------------------------------*
FORM F_SAPMF05A_0710_D.

PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0710',
' ' 'RF05A-AGBUK' P_BUKRS,             "会社コード
' ' 'RF05A-AGKOA' 'D',                 "得意先
' ' 'RF05A-XNOPS' 'X',                 "標準未決済明細
' ' 'BDC_OKCODE' '=SLB'.               "

LOOP AT GT_ZN005_BELNR_TBL INTO GW_ZN005_BELNR_TBL.
CONCATENATE GW_ZN005_BELNR_TBL-BELNR
GW_ZN005_BELNR_TBL-GJAHR
GW_ZN005_BELNR_TBL-BUZEI
INTO GW_RF05A_SEL01.
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0733',
' ' 'RF05A-FELDN(01)' 'BELNR',       "項目
' ' 'RF05A-SEL01(01)' GW_RF05A_SEL01,
"未決済明細選択基準の入力項目
' ' 'BDC_OKCODE' '/00'.
AT LAST.
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0733',
' ' 'BDC_OKCODE' '=PA'.             "
PERFORM GEN_BDC USING : 'X' 'SAPDF05X' '3100',
' ' 'BDC_OKCODE' '=AB'.               "
ENDAT.
*
ENDLOOP.
*
ENDFORM.                    " F_SAPMF05A_0710_D
*&---------------------------------------------------------------------*
*&      Form  F_BSIK_BSAK_DEL_NOW_GET
*&---------------------------------------------------------------------*
FORM F_BSIK_BSAK_DEL_NOW_GET USING L_LIFNR L_CZFBDT.
*
DATA :
L_SGTXT TYPE BSIK-SGTXT, "明細テキスト
L1_SGTXT TYPE BSIK-SGTXT, "明細テキスト
L_SUBRC TYPE SY-SUBRC,
L_ZTERM TYPE BSIK-ZTERM, "支払条件キー
L_ZFBDT TYPE BSIK-ZFBDT, "期日計算の支払基準日
L_ZUONR TYPE BSIK-ZUONR, "ソートキー
L_GJAHR TYPE BSAK-GJAHR, "会計年度
L_BELNR TYPE BSAK-BELNR, "会計伝票番号
L_BUZEI TYPE BSAK-BUZEI, "会計伝票内の明細番号
L_AUGBL TYPE BSAK-AUGBL, "決済伝票番号
L_ZLSCH TYPE BSAK-ZLSCH, "支払方法
L_ZLSPR TYPE BSAK-ZLSPR. "支払保留キー
*
CLEAR:GW_YN220_NOW.
*
READ TABLE GT_LIFNR_TBL WITH TABLE KEY LIFNR = L_LIFNR
INTO GW_LIFNR_TBL.
*
CONCATENATE L_CZFBDT '消込残'
INTO  L_SGTXT.
*
READ TABLE GT_ZN002_D  WITH KEY BUKRS  = P_BUKRS
LIFNR  = L_LIFNR
CZFBDT = L_CZFBDT
BINARY SEARCH INTO GW_ZN002_D.
IF SY-SUBRC = 0.
SELECT ZTERM ZFBDT ZUONR ZLSCH ZLSPR
INTO (L_ZTERM, L_ZFBDT, L_ZUONR, L_ZLSCH, L_ZLSPR )
FROM BSIK
WHERE LIFNR = GW_ZN002_D-LIFNR
AND   BUKRS = P_BUKRS
AND   GJAHR = GW_ZN002_D-GJAHR
AND   BELNR = GW_ZN002_D-BELNR
AND   HKONT = GW_LIFNR_TBL-AKONT
AND   SGTXT = L_SGTXT.
EXIT.
ENDSELECT.
IF SY-SUBRC = 0.
CLEAR:GW_YN220_NOW.
GW_YN220_NOW-VRFCTON = L_LIFNR.   "仕入先コード(請求先)
GW_YN220_NOW-CZFBDT  = L_CZFBDT.  "照合締日
GW_YN220_NOW-YNGJAHR = L_ZUONR(4).           "会計伝票会計年度
GW_YN220_NOW-BELNR   = L_ZUONR+4(10).        "会計伝票番号
GW_YN220_NOW-BUZEI   = L_ZUONR+14(3).        "会計伝票明細番号
GW_YN220_NOW-ZTERM   = L_ZTERM.              "支払条件キー
GW_YN220_NOW-ZFBDT   = L_ZFBDT.              "期日計算の支払基準日
GW_YN220_NOW-ZLSCH   = L_ZLSCH.              "支払方法
GW_YN220_NOW-ZLSPR   = L_ZLSPR.              "支払保留

ELSE.
SELECT AUGBL ZUONR GJAHR BELNR BUZEI ZTERM ZFBDT ZLSCH ZLSPR SGTXT
INTO (L_AUGBL, L_ZUONR,
L_GJAHR, L_BELNR,
L_BUZEI, L_ZTERM, L_ZFBDT,
L_ZLSCH, L_ZLSPR, L1_SGTXT )
FROM BSAK
WHERE BUKRS = P_BUKRS
AND   LIFNR = GW_ZN002_D-LIFNR
AND   AUGBL = GW_ZN002_D-BELNR
AND   ZUONR <> SPACE.
IF L_AUGBL <> L_BELNR AND
L1_SGTXT = L_SGTXT.
CLEAR:GW_YN220_NOW.
GW_YN220_NOW-VRFCTON =
L_LIFNR.   "仕入先コード(請求先)
GW_YN220_NOW-CZFBDT  = L_CZFBDT.  "照合締日
GW_YN220_NOW-YNGJAHR = L_ZUONR(4).           "会計伝票会計年度
GW_YN220_NOW-BELNR   = L_ZUONR+4(10).        "会計伝票番号
GW_YN220_NOW-BUZEI   = L_ZUONR+14(3).        "会計伝票明細番号
GW_YN220_NOW-ZTERM   = L_ZTERM.              "支払条件キー
GW_YN220_NOW-ZFBDT   =
L_ZFBDT.              "期日計算の支払基準日
GW_YN220_NOW-ZLSCH   = L_ZLSCH.              "支払方法
GW_YN220_NOW-ZLSPR   = L_ZLSPR.              "支払保留

EXIT.
ENDIF.
ENDSELECT.
IF SY-SUBRC <> 0.
SELECT AUGBL ZUONR GJAHR BELNR BUZEI ZTERM ZFBDT
ZLSCH ZLSPR SGTXT
INTO (L_AUGBL, L_ZUONR,
L_GJAHR, L_BELNR,
L_BUZEI, L_ZTERM, L_ZFBDT,
L_ZLSCH, L_ZLSPR, L1_SGTXT )
FROM BSAK
WHERE BUKRS = P_BUKRS
AND   LIFNR = GW_ZN002_D-LIFNR
AND   AUGBL = GW_ZN002_D-BELNR
AND   ZUONR = SPACE.
IF L_AUGBL <> L_BELNR AND
L1_SGTXT = L_SGTXT.
CLEAR:GW_YN220_NOW.
GW_YN220_NOW-VRFCTON =
L_LIFNR.   "仕入先コード(請求先)
GW_YN220_NOW-CZFBDT  = L_CZFBDT.  "照合締日
GW_YN220_NOW-YNGJAHR = L_GJAHR.   "会計伝 票会計年度
GW_YN220_NOW-BELNR   = L_BELNR.    "会計伝票番号
GW_YN220_NOW-BUZEI   = L_BUZEI.    "会計伝票明細番号
GW_YN220_NOW-ZTERM   = L_ZTERM.    "支払条件キー
GW_YN220_NOW-ZFBDT   =
L_ZFBDT.              "期日計算の支払基準日
GW_YN220_NOW-ZLSCH   = L_ZLSCH.      "支払方法
GW_YN220_NOW-ZLSPR   = L_ZLSPR.      "支払保留

ENDIF.
ENDSELECT.

ENDIF.

ENDIF.
ENDIF.
*
ENDFORM.                    " F_BSIK_BSAK_DEL_NOW_GET
*&---------------------------------------------------------------------*
*&      Form  F_BSID_BSAD_DEL_NOW_GET
*&---------------------------------------------------------------------*
FORM F_BSID_BSAD_DEL_NOW_GET USING    L_KUNNR
L_CZFBDT.
DATA :
L_SGTXT TYPE BSID-SGTXT, "明細テキスト
L1_SGTXT TYPE BSIK-SGTXT, "明細テキスト
L_SUBRC TYPE SY-SUBRC,
L_ZTERM TYPE BSID-ZTERM, "支払条件キー
L_ZFBDT TYPE BSID-ZFBDT, "期日計算の支払基準日
L_ZUONR TYPE BSID-ZUONR, "ソートキー
L_GJAHR TYPE BSAD-GJAHR, "会計年度
L_BELNR TYPE BSAD-BELNR, "会計伝票番号
L_BUZEI TYPE BSAD-BUZEI, "会計伝票内の明細番号
L_AUGBL TYPE BSAD-AUGBL, "決済伝票番号
L_ZLSCH TYPE BSAD-ZLSCH, "支払方法
L_ZLSPR TYPE BSAD-ZLSPR. "支払保留キー

*
CLEAR:GW_YN220_NOW.
*
READ TABLE GT_KUNNR_TBL WITH TABLE KEY KUNNR = L_KUNNR
INTO GW_KUNNR_TBL.
*
CONCATENATE L_CZFBDT '消込残'
INTO  L_SGTXT.
*
READ TABLE GT_ZN005_D  WITH KEY BUKRS  = P_BUKRS
KUNNR  = L_KUNNR
CZFBDT = L_CZFBDT
BINARY SEARCH INTO GW_ZN005_D.
IF SY-SUBRC = 0.
SELECT ZTERM ZFBDT ZUONR ZLSCH ZLSPR
INTO (L_ZTERM, L_ZFBDT, L_ZUONR,
L_ZLSCH, L_ZLSPR )
FROM BSID
WHERE KUNNR = GW_ZN005_D-KUNNR
AND   BUKRS = P_BUKRS
AND   GJAHR = GW_ZN005_D-IGJAHR
AND   BELNR = GW_ZN005_D-IBELNER
AND   HKONT = GW_KUNNR_TBL-AKONT
AND   SGTXT = L_SGTXT.
EXIT.
ENDSELECT.
IF SY-SUBRC = 0.
CLEAR:GW_YN120_NOW.
GW_YN120_NOW-VRFCTON = L_KUNNR.   "仕入先コード(請求先)
GW_YN120_NOW-CZFBDT  = L_CZFBDT.  "照合締日
GW_YN120_NOW-YNGJAHR = L_ZUONR(4).           "会計伝票会計年度
GW_YN120_NOW-BELNR   = L_ZUONR+4(10).        "会計伝票番号
GW_YN120_NOW-BUZEI   = L_ZUONR+14(3).        "会計伝票明細番号
GW_YN120_NOW-ZTERM   = L_ZTERM.              "支払条件キー
GW_YN120_NOW-ZFBDT   = L_ZFBDT.              "期日計算の支払基準日
GW_YN120_NOW-ZLSCH   = L_ZLSCH.              "支払方法
GW_YN120_NOW-ZLSPR   = L_ZLSPR.              "支払保留

ELSE.
SELECT AUGBL ZUONR GJAHR BELNR BUZEI ZTERM ZFBDT
ZLSCH ZLSPR SGTXT
INTO (L_AUGBL, L_ZUONR,
L_GJAHR, L_BELNR,
L_BUZEI, L_ZTERM, L_ZFBDT,
L_ZLSCH, L_ZLSPR, L1_SGTXT )
FROM BSAD
WHERE BUKRS = P_BUKRS
AND   KUNNR = GW_ZN002_D-LIFNR
AND   AUGBL = GW_ZN002_D-BELNR
AND   ZUONR <> SPACE.
IF L_AUGBL <> L_BELNR AND
L_SGTXT = L1_SGTXT.
CLEAR:GW_YN220_NOW.
GW_YN120_NOW-VRFCTON =
L_KUNNR.   "仕入先コード(請求先)
GW_YN120_NOW-CZFBDT  = L_CZFBDT.  "照合締日
GW_YN120_NOW-YNGJAHR = L_ZUONR(4).           "会計伝票会計年度
GW_YN120_NOW-BELNR   = L_ZUONR+4(10).        "会計伝票番号
GW_YN120_NOW-BUZEI   = L_ZUONR+14(3).        "会計伝票明細番号
GW_YN120_NOW-ZTERM   = L_ZTERM.              "支払条件キー
GW_YN220_NOW-ZFBDT   =
L_ZFBDT.              "期日計算の支払基準日
GW_YN120_NOW-ZLSCH   =
L_ZLSCH.              "支払方法
GW_YN120_NOW-ZLSPR   =
L_ZLSPR.              "支払保留

EXIT.
ENDIF.
ENDSELECT.
IF SY-SUBRC <> 0.
SELECT AUGBL ZUONR GJAHR BELNR BUZEI ZTERM ZFBDT
ZLSCH ZLSPR SGTXT
INTO (L_AUGBL, L_ZUONR,
L_GJAHR, L_BELNR,
L_BUZEI, L_ZTERM, L_ZFBDT,
L_ZLSCH, L_ZLSPR, L1_SGTXT )
FROM BSAD
WHERE BUKRS = P_BUKRS
AND   KUNNR = GW_ZN005_D-KUNNR
AND   AUGBL = GW_ZN005_D-IBELNER
AND   ZUONR = SPACE.
IF L_AUGBL <> L_BELNR AND
L_SGTXT = L1_SGTXT.
CLEAR:GW_YN220_NOW.
GW_YN120_NOW-VRFCTON =
L_KUNNR.   "仕入先コード(請求先)
GW_YN120_NOW-CZFBDT  = L_CZFBDT.  "照合締日
GW_YN120_NOW-YNGJAHR = L_GJAHR.      "会計伝 票会計年度
GW_YN120_NOW-BELNR   = L_BELNR.        "会計伝票番号
GW_YN120_NOW-BUZEI   = L_BUZEI.        "会計伝票明細番号
GW_YN120_NOW-ZTERM   = L_ZTERM.              "支払条件キー
GW_YN120_NOW-ZFBDT   =
L_ZFBDT.              "期日計算の支払基準日
GW_YN120_NOW-ZLSCH   =
L_ZLSCH.              "支払方法
GW_YN120_NOW-ZLSPR   =
L_ZLSPR.              "支払保留

ENDIF.
ENDSELECT.

ENDIF.

ENDIF.
ENDIF.
*
ENDFORM.                    " F_BSID_BSAD_DEL_NOW_GET
*&---------------------------------------------------------------------*
*&      Form  P_BKTXT_CHECK
*&---------------------------------------------------------------------*
FORM P_BKTXT_CHECK.
*
IF P_TEST IS INITIAL.
IF P_BKTXT IS INITIAL.
*   &1 を入力してください
SET CURSOR FIELD 'P_BKTXT'.
MESSAGE E901 WITH TEXT-E23. "伝票ヘッダText
ENDIF.
ENDIF.
*
ENDFORM.                    " P_BKTXT_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_BLART_CHECK
*&---------------------------------------------------------------------*
FORM P_BLART_CHECK.
*
IF P_TEST IS INITIAL.
IF P_BLART IS INITIAL.
*   &1 を入力してください
SET CURSOR FIELD 'P_BLART'.
MESSAGE E901 WITH TEXT-E21. "伝票タイプ
ELSE.
SELECT SINGLE COUNT(*) FROM T003 WHERE BLART = P_BLART.
IF SY-SUBRC <> 0.
*    & が、存在しません
SET CURSOR FIELD 'P_BLART'.
MESSAGE E814 WITH TEXT-E21. "伝票タイプ
ENDIF.
ENDIF.
ENDIF.
*
ENDFORM.                    " P_BLART_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_BLDAT_CHECK
*&---------------------------------------------------------------------*
*FORM P_BLDAT_CHECK.
*
*  IF P_TEST IS INITIAL.
*    IF P_BLDAT IS INITIAL.
**   &1 を入力してください
*      SET CURSOR FIELD 'P_BLDAT'.
*      MESSAGE E901 WITH TEXT-E22. "伝票日付
*    ENDIF.
*  ENDIF.
*
*ENDFORM.                    " P_BLDAT_CHECK
*&---------------------------------------------------------------------*
*&      Form  F_TBLLOCK
*&---------------------------------------------------------------------*
FORM F_TBL_LOCK USING L_SUBRC L_PLIFNR.
DATA :
L_USER    TYPE SY-MSGV1,
L_MSGTEXT TYPE STRING.
*
CLEAR:L_SUBRC.
LOOP AT GT_ZN002_TBL INTO GW_ZN002_TBL.
*支払予定ロック
PERFORM LOCK_ZN002 USING GW_ZN002_TBL-LIFNR
GW_ZN002_TBL-CZFBDT
L_SUBRC L_USER.
IF L_SUBRC <> 0.
MESSAGE I756 WITH TEXT-M01 L_USER INTO L_MSGTEXT.
GW_PLIFNR_ERR-PLIFNR = L_PLIFNR.
*        & ロックエラー & がロックしています
GW_PLIFNR_ERR-ERRMSG = L_MSGTEXT.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
*
CALL FUNCTION 'DEQUEUE_ALL'.
EXIT.
ENDIF.
ENDLOOP.
*
CHECK L_SUBRC IS INITIAL.
*
LOOP AT GT_ZN005_TBL INTO GW_ZN005_TBL.
*入金予定ロック
PERFORM LOCK_ZN005 USING GW_ZN005_TBL-KUNNR
GW_ZN005_TBL-CZFBDT
L_SUBRC L_USER.
IF L_SUBRC <> 0.
MESSAGE I756 WITH TEXT-M02 L_USER INTO L_MSGTEXT.
GW_PLIFNR_ERR-PLIFNR = L_PLIFNR.
*        & ロックエラー & がロックしています
GW_PLIFNR_ERR-ERRMSG = L_MSGTEXT.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
*
CALL FUNCTION 'DEQUEUE_ALL'.
EXIT.
ENDIF.

ENDLOOP.

*
ENDFORM.                    " F_TBLLOCK
*&---------------------------------------------------------------------*
*&      Form  LOCK_ZN002
*&---------------------------------------------------------------------*
FORM LOCK_ZN002 USING L_LIFNR L_CZFBDT L_SUBRC L_USER.
*
CALL FUNCTION 'ENQUEUE_EZN002'
EXPORTING
MODE_ZN002           = 'E'
MANDT                = SY-MANDT
BUKRS                = P_BUKRS
LIFNR                = L_LIFNR
CZFBDT               = L_CZFBDT
*     SEQ                  =
*     X_BUKRS              = ' '
*     X_LIFNR              = ' '
*     X_CZFBDT             = ' '
*     X_SEQ                = ' '
*     _SCOPE               = '2'
*     _WAIT                = ' '
*     _COLLECT             = ' '
EXCEPTIONS
FOREIGN_LOCK         = 1
SYSTEM_FAILURE       = 2
OTHERS               = 3.
*
L_SUBRC = SY-SUBRC.
IF SY-SUBRC = 1.
L_USER = SY-MSGV1.
ELSE.
CLEAR: L_USER.
ENDIF.
*
ENDFORM.                    " LOCK_ZN002
*&---------------------------------------------------------------------*
*&      Form  LOCK_ZN005
*&---------------------------------------------------------------------*
FORM LOCK_ZN005 USING L_KUNNR L_CZFBDT L_SUBRC L_USER.
*
CALL FUNCTION 'ENQUEUE_EZN005'
EXPORTING
MODE_ZN005           = 'E'
MANDT                = SY-MANDT
BUKRS                = P_BUKRS
KUNNR                = L_KUNNR
CZFBDT               = L_CZFBDT
*     SEQ                  =
*     X_BUKRS              = ' '
*     X_KUNNR              = ' '
*     X_CZFBDT             = ' '
*     X_SEQ                = ' '
*     _SCOPE               = '2'
*     _WAIT                = ' '
*     _COLLECT             = ' '
EXCEPTIONS
FOREIGN_LOCK         = 1
SYSTEM_FAILURE       = 2
OTHERS               = 3.
*
L_SUBRC = SY-SUBRC.
IF SY-SUBRC = 1.
L_USER = SY-MSGV1.
ELSE.
CLEAR: L_USER.
ENDIF.
*
ENDFORM.                    " LOCK_ZN005
*&---------------------------------------------------------------------*
*&      Form  F_DEQUEUE_ALL
*&---------------------------------------------------------------------*
FORM F_DEQUEUE_ALL.
*
CALL FUNCTION 'DEQUEUE_ALL'.
*
ENDFORM.                    " F_DEQUEUE_ALL
*&---------------------------------------------------------------------*
*&      Form  F_SAPMF05A_0700
*&---------------------------------------------------------------------*
FORM F_SAPMF05A_0700 USING L_NEWBS L_NEWKO.
*
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0700',
' ' 'RF05A-NEWBS' L_NEWBS,     "次明細の転記キー
' ' 'RF05A-NEWKO' L_NEWKO,     "次明細の勘定またはマッチコード
' ' 'BDC_OKCODE' '/00'.                    "
*
ENDFORM.                    " F_SAPMF05A_0700
*&---------------------------------------------------------------------*
*&      Form  F_NEWBS_NEWKO
*&---------------------------------------------------------------------*
FORM F_NEWBS_NEWKO USING    L_MISYORI_CNT
L_S       "K=仕入先　D=得意先
L_ZAN
L_LIFNR   "仕入先　得意先
CHANGING L_NEWBS
L_NEWKO.
*
IF L_MISYORI_CNT = 0.
IF L_S = C_K.
*仕入先
IF L_ZAN < 0.
L_NEWBS = '50'.
*       雑収入勘定
L_NEWKO = P_HKONTA.  "次明細の勘定またはマッチコード
ELSE.
L_NEWBS = '40'.
*       雑損失勘定
L_NEWKO = P_HKONTB.  "次明細の勘定またはマッチコード
ENDIF.
ELSE.
*得意先
IF L_ZAN < 0.
L_NEWBS = '40'.
*       雑損失勘定
L_NEWKO = P_HKONTB.  "次明細の勘定またはマッチコード
ELSE.
L_NEWBS = '50'.
*       雑収入勘定
L_NEWKO = P_HKONTA.  "次明細の勘定またはマッチコード
ENDIF.
ENDIF.
ELSE.
*得意先
IF L_S = C_D.
IF L_ZAN < 0.
L_NEWBS = '07'.
ELSE.
L_NEWBS = '17'.
ENDIF.
ELSE.
*仕入先
IF L_ZAN < 0.
L_NEWBS = '37'.
ELSE.
L_NEWBS = '27'.
ENDIF.
ENDIF.
*仕入先、得意先
L_NEWKO = L_LIFNR.
*
ENDIF.
*
ENDFORM.                    " F_NEWBS_NEWKO
*&---------------------------------------------------------------------*
*&      Form  F_SAPMF05A_0300
*&---------------------------------------------------------------------*
FORM F_SAPMF05A_0300 USING L_S L_ZAN.
DATA :
L_WRBTR_C(16) TYPE C,            "金額
L_WRBTR       TYPE BSEG-WRBTR,   "金額
L_SGTXT       TYPE BSEG-SGTXT,   "明細テキスト
L_MWSKZ       TYPE BSEG-MWSKZ,   "税コード
L_OKCODE(132) TYPE C,
L_NEWBS       TYPE RF05A-NEWBS,  "次明細の転記キー
L_NEWKO       TYPE RF05A-NEWKO.  "次明細の勘定またはマッチコード

*金額
L_WRBTR = ABS( L_ZAN ).
WRITE L_WRBTR TO L_WRBTR_C CURRENCY GW_WAERS.
*明細テキスト
IF L_S = C_K.
L_SGTXT = '買掛差額'.
ELSE.
L_SGTXT = '売掛差額'.
ENDIF.
*税コード
IF L_S = C_K.
*仕入先
IF L_ZAN < 0.
L_MWSKZ = P_MWSKZA. "雑収入勘定の税コード
ELSE.
L_MWSKZ = P_MWSKZB. "雑損失勘定の税コード
ENDIF.
ELSE.
*得意先
IF L_ZAN < 0.
L_MWSKZ = P_MWSKZB. "雑損失勘定の税コード
ELSE.
L_MWSKZ = P_MWSKZA. "雑収入勘定の税コード
ENDIF.
ENDIF.
*次明細の転記キーと勘定
PERFORM F_NEXT_NEWBS_NEWKO USING
L_S L_OKCODE L_NEWBS L_NEWKO.
*
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0300',
' ' 'BSEG-WRBTR'  L_WRBTR_C,         "金額
' ' 'BSEG-MWSKZ'  L_MWSKZ.           "税コード

IF GW_BKPF_XMWST = SPACE.
PERFORM GEN_BDC USING :
' ' 'BKPF-XMWST'  C_X.             "税計算
GW_BKPF_XMWST = C_X.
ENDIF.

PERFORM GEN_BDC USING :
' ' 'BSEG-SGTXT'  L_SGTXT,           "明細テキスト
' ' 'RF05A-NEWBS' L_NEWBS,           "次明細の転記キー
' ' 'RF05A-NEWKO' L_NEWKO,           "次明細の勘定
' ' 'BDC_OKCODE'  L_OKCODE.          "=BU =AB

PERFORM GEN_BDC USING : 'X' 'SAPLKACB' '0002',
' ' 'COBL-KOSTL'  P_KOSTL  ,         "原価センタ
' ' 'BDC_OKCODE' '=ENTE'.                  "
*
ENDFORM.                    " F_SAPMF05A_0300
*&---------------------------------------------------------------------*
*&      Form  F_SAPMF05A_0302
*&---------------------------------------------------------------------*
FORM F_SAPMF05A_0302 USING  L_S
L_ZAN L_WAERS
L_YNGJAHR L_BELNR L_BUZEI
L_ZTERM L_ZFBDT L_ZLSCH L_ZLSPR L_CZFBDT.
DATA :
L_WRBTR_C(16) TYPE C,            "金額
L_WRBTR       TYPE BSEG-WRBTR,   "金額
L_SGTXT       TYPE BSEG-SGTXT,   "明細テキスト
L_ZUONR       TYPE BSEG-ZUONR,   "ソートキー
L_OKCODE(132) TYPE C,
L_NEWBS       TYPE RF05A-NEWBS,  "次明細の転記キー
L_NEWKO       TYPE RF05A-NEWKO.  "次明細の勘定またはマッチコード

*金額
L_WRBTR = ABS( L_ZAN ).
WRITE L_WRBTR TO L_WRBTR_C CURRENCY L_WAERS.
*ソートキー
CONCATENATE L_YNGJAHR "会計伝票会計年度
L_BELNR   "会計伝票番号
L_BUZEI   "会計伝票明細番号
INTO L_ZUONR.
*明細テキスト
CONCATENATE L_CZFBDT '消込残'
INTO  L_SGTXT.
*次明細の転記キーと勘定
PERFORM F_NEXT_NEWBS_NEWKO USING
L_S L_OKCODE L_NEWBS L_NEWKO.
*
IF L_S = C_K.
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0302',
' ' 'BSEG-WRBTR'  L_WRBTR_C,               "金額
' ' 'BSEG-ZTERM'  L_ZTERM,                 "支払条件
' ' 'BSEG-ZFBDT'  L_ZFBDT.                 "支払基準日

IF GW_BKPF_XMWST = SPACE.
PERFORM GEN_BDC USING :
' ' 'BKPF-XMWST'  C_X.                     "税計算
GW_BKPF_XMWST = C_X.
ENDIF.

PERFORM GEN_BDC USING :
' ' 'BSEG-ZUONR'  L_ZUONR,                 "ソートキー
' ' 'BSEG-SGTXT'  L_SGTXT,                 "明細テキスト
*2012/05/07 UPDATE START
*    ' ' 'BSEG-ZLSCH'  L_ZLSCH,                 "支払方法
*    ' ' 'BSEG-ZLSPR'  L_ZLSPR,                 "支払保留
' ' 'BSEG-ZLSCH'  SPACE,                 "支払方法
' ' 'BSEG-ZLSPR'  SPACE,                 "支払保留
*2012/05/07 UPDATE END
' ' 'RF05A-NEWBS' L_NEWBS,                 "
' ' 'RF05A-NEWKO' L_NEWKO,                 "
' ' 'BDC_OKCODE'  L_OKCODE.                "
ELSE.
PERFORM GEN_BDC USING : 'X' 'SAPMF05A' '0301',
' ' 'BSEG-WRBTR'  L_WRBTR_C,               "金額
' ' 'BSEG-ZTERM'  L_ZTERM,                 "支払条件
' ' 'BSEG-ZFBDT'  L_ZFBDT.                 "支払基準日

IF GW_BKPF_XMWST = SPACE.
PERFORM GEN_BDC USING :
' ' 'BKPF-XMWST'  C_X.                     "税計算
GW_BKPF_XMWST = C_X.
ENDIF.

PERFORM GEN_BDC USING :
' ' 'BSEG-ZUONR'  L_ZUONR,                 "ソートキー
' ' 'BSEG-SGTXT'  L_SGTXT,                 "明細テキスト
*2012/05/07 UPDATE START
*    ' ' 'BSEG-ZLSCH'  L_ZLSCH,                 "支払方法
*    ' ' 'BSEG-ZLSPR'  L_ZLSPR,                 "支払保留
' ' 'BSEG-ZLSCH'  SPACE,                 "支払方法
' ' 'BSEG-ZLSPR'  SPACE,                 "支払保留
*2012/05/07 UPDATE END
' ' 'RF05A-NEWBS' L_NEWBS,                 "
' ' 'RF05A-NEWKO' L_NEWKO,                 "
' ' 'BDC_OKCODE'  L_OKCODE.                "

ENDIF.
*
ENDFORM.                    " F_SAPMF05A_0302
*&---------------------------------------------------------------------*
*&      Form  F_NEXT_NEWBS_NEWKO
*&---------------------------------------------------------------------*
FORM F_NEXT_NEWBS_NEWKO USING L_S L_OKCODE L_NEWBS L_NEWKO.
*
IF L_S = C_K.
GW_ZN002_NEXT = GW_ZN002_INDEX + 1.
READ TABLE GT_ZN002_BDC INDEX GW_ZN002_NEXT
INTO GW_ZN002_SUB.
IF SY-SUBRC <> 0.
GW_ZN005_NEXT = 1.
READ TABLE GT_ZN005_BDC INDEX GW_ZN005_NEXT
INTO GW_ZN005_SUB.
IF SY-SUBRC = 0.
PERFORM F_NEWBS_NEWKO USING GW_ZN005_SUB-MISYORI_CNT
C_D
GW_ZN005_SUB-SAGAKU
GW_ZN005_SUB-KUNNR
CHANGING L_NEWBS L_NEWKO.
L_OKCODE = '=AB'.
ELSE.
CLEAR:L_NEWBS,L_NEWKO.
L_OKCODE = '=BU'.
ENDIF.
ELSE.
PERFORM F_NEWBS_NEWKO USING GW_ZN002_SUB-MISYORI_CNT
C_K
GW_ZN002_SUB-SAGAKU
GW_ZN002_SUB-LIFNR
CHANGING L_NEWBS L_NEWKO.
L_OKCODE = '=AB'.
ENDIF.
ELSE.
GW_ZN005_NEXT = GW_ZN005_INDEX + 1.
READ TABLE GT_ZN005_BDC INDEX GW_ZN005_NEXT
INTO GW_ZN005_SUB.
IF SY-SUBRC = 0.
PERFORM F_NEWBS_NEWKO USING GW_ZN005_SUB-MISYORI_CNT
C_D
GW_ZN005_SUB-SAGAKU
GW_ZN005_SUB-KUNNR
CHANGING L_NEWBS L_NEWKO.
L_OKCODE = '=AB'.
ELSE.
CLEAR:L_NEWBS,L_NEWKO.
L_OKCODE = '=BU'.
ENDIF.
ENDIF.
*
ENDFORM.                    " F_NEXT_NEWBS_NEWKO
*&---------------------------------------------------------------------*
*&      Form  UPDATE_ZN002
*&---------------------------------------------------------------------*
FORM UPDATE_ZN002 USING L_BELNR L_SUBRC.
DATA :
L_SEQ   TYPE ZN002-SEQ,
L_ZN002 TYPE ZN002.
*
LOOP AT GT_ZN002_MOD INTO GW_ZN002_MOD.
*
CHECK NOT GW_ZN002_MOD-UPDT = C_D.
*
CASE GW_ZN002_MOD-UPDT.
WHEN SPACE.
UPDATE ZN002
SET
PZFBDT = GW_BUDAT   "支払予定日　"2012/04/20 ADD
PZTERM = ''         "サイト      "2012/04/20 ADD
PZLSCH = C_S        "支払方法
PSTFLG = C_X        "会計振替
PSTDT  = GW_DATUM   "会計振替日
PSTTM  = GW_UZEIT   "会計振替時刻
PSTUSR = GW_UNAME   "会計振替ユーザ
BELNR  = L_BELNR    "会計伝票番号
GJAHR  = GW_GJAHR   "会計年度
BUDAT  = GW_BUDAT   "伝票の転記日付
WHERE BUKRS  = P_BUKRS
AND   LIFNR  = GW_ZN002_MOD-LIFNR
AND   CZFBDT = GW_ZN002_MOD-CZFBDT
AND   SEQ    = GW_ZN002_MOD-SEQ.
WHEN C_U.   "変更
UPDATE ZN002
SET PWRBTR = GW_ZN002_MOD-PWRBTR
PZFBDT = GW_BUDAT   "支払予定日　"2012/04/20　ADD
PZTERM = ''         "サイト      "2012/04/20 ADD
PZLSCH = C_S        "支払方法
PSTFLG = C_X        "会計振替
PSTDT  = GW_DATUM   "会計振替日
PSTTM  = GW_UZEIT   "会計振替時刻
PSTUSR = GW_UNAME   "会計振替ユーザ
BELNR  = L_BELNR    "会計伝票番号
GJAHR  = GW_GJAHR   "会計年度
BUDAT  = GW_BUDAT    "伝票の転記日付
WHERE BUKRS  = P_BUKRS
AND   LIFNR  = GW_ZN002_MOD-LIFNR
AND   CZFBDT = GW_ZN002_MOD-CZFBDT
AND   SEQ    = GW_ZN002_MOD-SEQ.
WHEN C_I.   "追加
SELECT MAX( SEQ ) INTO L_SEQ
FROM ZN002
WHERE BUKRS  = P_BUKRS
AND   LIFNR  = GW_ZN002_MOD-LIFNR
AND   CZFBDT = GW_ZN002_MOD-CZFBDT.
IF SY-SUBRC = 0.
L_SEQ   = L_SEQ + 1.
CLEAR:L_ZN002.
MOVE-CORRESPONDING GW_ZN002_MOD TO L_ZN002.
L_ZN002-SEQ    = L_SEQ.
INSERT INTO ZN002 VALUES L_ZN002.
ENDIF.
ENDCASE.
*
L_SUBRC = SY-SUBRC.
IF SY-SUBRC = 0.
*     COMMIT WORK AND WAIT.
ELSE.
ROLLBACK WORK.
EXIT.
ENDIF.

ENDLOOP.
*
ENDFORM.                    " UPDATE_ZN002
*&---------------------------------------------------------------------*
*&      Form  UPDATE_ZN005
*&---------------------------------------------------------------------*
FORM UPDATE_ZN005 USING  L_BELNR L_SUBRC L_PLIFNR.
DATA :
L_SEQ   TYPE ZN005-SEQ,
L_ZN005 TYPE ZN005.
*
LOOP AT GT_ZN005_MOD INTO GW_ZN005_MOD.
*
CHECK NOT GW_ZN005_MOD-UPDT = C_D.
*
CASE GW_ZN005_MOD-UPDT.
WHEN SPACE.
UPDATE ZN005
SET
IZFBDT = GW_BUDAT     "支払予定日  "2012/04/20　ADD
IZLSCH = C_S          "支払方法
ILIFNR = L_PLIFNR     "相殺先
AUFLG  = C_X          "入金消込
AUDAT  = GW_DATUM     "入金消込日
AUTIM  = GW_UZEIT     "入金消込時刻
AUUSR  = GW_UNAME     "入金消込ユーザ
IBELNER = L_BELNR     "会計伝票番号
IGJAHR  = GW_GJAHR    "会計年度
IBUDAT  = GW_BUDAT    "伝票の転記日付
WHERE BUKRS  = P_BUKRS
AND   KUNNR  = GW_ZN005_MOD-KUNNR
AND   CZFBDT = GW_ZN005_MOD-CZFBDT
AND   SEQ    = GW_ZN005_MOD-SEQ.
WHEN C_U.   "変更
UPDATE ZN005
SET IWRBTR = GW_ZN005_MOD-IWRBTR
IZFBDT = GW_BUDAT     "支払予定日　"2012/04/20　ADD
IZLSCH = C_S          "支払方法
ILIFNR = L_PLIFNR     "相殺先
AUFLG = C_X           "入金消込
AUDAT  = GW_DATUM     "入金消込日
AUTIM  = GW_UZEIT     "入金消込時刻
AUUSR = GW_UNAME      "入金消込ユーザ
IBELNER  = L_BELNR    "決済伝票番号
IGJAHR  = GW_GJAHR    "会計年度
IBUDAT  = GW_BUDAT    "決済転記日
WHERE BUKRS  = P_BUKRS
AND   KUNNR  = GW_ZN005_MOD-KUNNR
AND   CZFBDT = GW_ZN005_MOD-CZFBDT
AND   SEQ    = GW_ZN005_MOD-SEQ.
WHEN C_I.   "追加
SELECT MAX( SEQ ) INTO L_SEQ
FROM ZN005
WHERE BUKRS  = P_BUKRS
AND   KUNNR  = GW_ZN005_MOD-KUNNR
AND   CZFBDT = GW_ZN005_MOD-CZFBDT.
IF SY-SUBRC = 0.
L_SEQ   = L_SEQ + 1.
CLEAR:L_ZN005.
MOVE-CORRESPONDING GW_ZN005_MOD TO L_ZN005.
L_ZN005-SEQ    = L_SEQ.
INSERT INTO ZN005 VALUES L_ZN005.
ENDIF.
ENDCASE.
*
L_SUBRC = SY-SUBRC.
IF SY-SUBRC = 0.
*     COMMIT WORK AND WAIT.
ELSE.
ROLLBACK WORK.
ENDIF.


ENDLOOP.
*
ENDFORM.                    " UPDATE_ZN005
*&---------------------------------------------------------------------*
*&      Form  FI_F4_MWSKZ
*&---------------------------------------------------------------------*
FORM FI_F4_MWSKZ USING P_MWSKZ.
DATA :
L_MWSKZ LIKE  BSET-MWSKZ.
*
CALL FUNCTION 'FI_F4_MWSKZ'
EXPORTING
I_KALSM       = C_TAXJP
*     I_STBUK       = ' '
*     I_XSHOW       = ' '
*     I_LSTML       = ' '
*     I_CONCT       =
*     I_GENER       =
*     I_GLVOR       =
IMPORTING
E_MWSKZ       = L_MWSKZ.

IF NOT L_MWSKZ IS INITIAL.
P_MWSKZ = L_MWSKZ.
ENDIF.
*
ENDFORM.                    " FI_F4_MWSKZ
*&---------------------------------------------------------------------*
*&      Form  CHECK_PWRBTR_ALL
*&---------------------------------------------------------------------*
FORM CHECK_PWRBTR_ALL.
*
IF GW_IN_REC-PWRBTR_ALL = SPACE.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*相殺候補額が入力されていません
GW_PLIFNR_ERR-ERRMSG = TEXT-E32.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ELSE.
IF GW_IN_REC-WAERS <> SPACE.
IF GW_PWRBTR_ALL = 0.
GW_ERR = C_ERR.
GW_PLIFNR_ERR-PLIFNR = GW_PLIFNR-PLIFNR.
*相殺候補額が０です
GW_PLIFNR_ERR-ERRMSG = TEXT-E33.
APPEND GW_PLIFNR_ERR TO GT_PLIFNR_ERR.
ENDIF.
ENDIF.
ENDIF.
*
ENDFORM.                    " CHECK_PWRBTR_ALL
*&---------------------------------------------------------------------*
*&      Form  GET_BSAD_YN120
*&---------------------------------------------------------------------*
FORM GET_BSAD_YN120 USING L_KUNNR L_GJAHR L_BELNR L_BUZEI
L_SUBRC
L_ZTERM L_ZFBDT L_ZLSCH L_ZLSPR.
*
SELECT ZTERM ZFBDT ZLSCH ZLSPR
INTO (L_ZTERM, L_ZFBDT, L_ZLSCH, L_ZLSPR ) UP TO 1 ROWS
FROM BSAD
WHERE KUNNR = L_KUNNR
AND   BUKRS = P_BUKRS
AND   GJAHR = L_GJAHR
AND   BELNR = L_BELNR
AND   BUZEI = L_BUZEI.
ENDSELECT.
*
L_SUBRC = SY-SUBRC.
*
ENDFORM.                    " GET_BSAD_YN120
*&---------------------------------------------------------------------*
*&      Form  GET_BSAK_YN220
*&---------------------------------------------------------------------*
FORM GET_BSAK_YN220 USING L_LIFNR L_GJAHR L_BELNR L_BUZEI
L_SUBRC
L_ZTERM L_ZFBDT L_ZLSCH L_ZLSPR.
*
SELECT ZTERM ZFBDT ZLSCH ZLSPR
INTO (L_ZTERM, L_ZFBDT, L_ZLSCH, L_ZLSPR ) UP TO 1 ROWS
FROM BSAK
WHERE LIFNR = L_LIFNR
AND   BUKRS = P_BUKRS
AND   GJAHR = L_GJAHR
AND   BELNR = L_BELNR
AND   BUZEI = L_BUZEI.
ENDSELECT.
*
L_SUBRC = SY-SUBRC.
*

ENDFORM.                    " GET_BSAK_YN220
*&---------------------------------------------------------------------*
*&      Form  EDIT_PWRBTR
*&---------------------------------------------------------------------*
*       相殺候補額置換え
*----------------------------------------------------------------------*
*      -->P_WRBTR  計算後相殺候補額
*----------------------------------------------------------------------*
FORM EDIT_PWRBTR USING    P_WRBTR.
DATA:LW_IN_REC TYPE TY_IN_REC.

CLEAR:LW_IN_REC.
READ TABLE GT_IN_REC INTO LW_IN_REC
WITH KEY PLIFNR = GW_PLIFNR-PLIFNR.

LW_IN_REC-ZPWRBTR_ALL = P_WRBTR.

*-- 内部形式⇒外部形式
WRITE P_WRBTR TO LW_IN_REC-PWRBTR_ALL
CURRENCY LW_IN_REC-WAERS NO-GROUPING.
*-- 読込内部テーブル置換え
MODIFY GT_IN_REC FROM LW_IN_REC
INDEX SY-TABIX TRANSPORTING PWRBTR_ALL
ZPWRBTR_ALL.

ENDFORM.                    " EDIT_PWRBTR
