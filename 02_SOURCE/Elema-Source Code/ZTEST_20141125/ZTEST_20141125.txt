*&---------------------------------------------------------------------*
*& Report  ZTEST_20141125
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZTEST_20141125.

*PARAMETERS p_dec1(13) TYPE p DECIMALS 2.
*PARAMETERS p_dec2 TYPE bseg-dmbtr.
*
*TYPES:
*  BEGIN OF typ_th_pa0001,
*    pernr      TYPE pa0001-pernr,      " è]ã∆àıî‘çÜ
*    begda      TYPE pa0001-begda,      " äJénì˙ït
*    sname      TYPE pa0001-sname,      " è]ã∆àıñº
*    END OF typ_th_pa0001,
*    typ_td_pa0001 TYPE STANDARD TABLE OF typ_th_pa0001.
*DATA th_pa0001 TYPE typ_th_pa0001.
*DATA td_pa0001 TYPE typ_td_pa0001.
*
*
*th_pa0001-pernr = '00001'.
*th_pa0001-begda = '20111212'.
*th_pa0001-sname = 'test12'.
*APPEND th_pa0001 TO td_pa0001.
*
*
*th_pa0001-pernr = '00001'.
*th_pa0001-begda = '20111213'.
*th_pa0001-sname = 'test13'.
*APPEND th_pa0001 TO td_pa0001.
*
*th_pa0001-pernr = '00002'.
*th_pa0001-begda = '20111212'.
*th_pa0001-sname = 'test22'.
*APPEND th_pa0001 TO td_pa0001.
*
*
*th_pa0001-pernr = '00002'.
*th_pa0001-begda = '20111213'.
*th_pa0001-sname = 'test23'.
*APPEND th_pa0001 TO td_pa0001.
*
*th_pa0001-pernr = '00003'.
*th_pa0001-begda = '20111212'.
*th_pa0001-sname = 'test32'.
*APPEND th_pa0001 TO td_pa0001.
*
*
*th_pa0001-pernr = '00003'.
*th_pa0001-begda = '20111213'.
*th_pa0001-sname = 'test33'.
*APPEND th_pa0001 TO td_pa0001.
*
*
*FIELD-SYMBOLS <lfs_pa0001> TYPE typ_th_pa0001.
*SORT td_pa0001 BY pernr ASCENDING
*                  begda DESCENDING.
*LOOP AT td_pa0001 ASSIGNING <lfs_pa0001>.
*  AT NEW pernr.
*    DELETE td_pa0001
*     WHERE pernr = <lfs_pa0001>-pernr
*       AND begda <> <lfs_pa0001>-begda.
*  ENDAT.
*ENDLOOP.
*
*LOOP AT td_pa0001 ASSIGNING <lfs_pa0001>.
*  WRITE: /1 <lfs_pa0001>-pernr,
*         20 <lfs_pa0001>-sname.
*ENDLOOP.
*
*DATA ltd_data TYPE STANDARD TABLE OF ztegmmt012.
*DATA lth_data TYPE ztegmmt012.
*
*SELECT * INTO TABLE ltd_data
*  FROM ztegmmt012
* WHERE ebeln = '4503199183'.
*
*
*LOOP AT ltd_data INTO lth_data.
*  WRITE: /1 lth_data-z_netpr.
*ENDLOOP.
*
*DATA: lw_text1(40) TYPE c.
*DATA: lw_text2(40) TYPE c.
*
*lw_text1 = '##ãü#è§ê[#ñkãûêVä˜#åöí}óLå¿#îCåˆéi'.
*lw_text2 = 'test#îCåˆéi'.
*
*WRITE: / lw_text1.
*WRITE: / lw_text2.
*
*DATA lw_len1 TYPE i.
*DATA lw_len2 TYPE i.
*
*lw_len1 = strlen( lw_text1 ).
*lw_len2 = strlen( lw_text2 ).
*
*WRITE: / lw_len1.
*WRITE: / lw_len2.
*
*DATA lw_len3 TYPE i.
*DATA lw_len4 TYPE i.
*
*lw_len3 = cl_abap_list_utilities=>dynamic_output_length( lw_text1 ).
*lw_len4 = cl_abap_list_utilities=>dynamic_output_length( lw_text2 ).
*
*WRITE: / lw_len3.
*WRITE: / lw_len4.
*
*
*DATA: n TYPE i.
*
*DEFINE create_dynx.
*  data:lv_x_field(&1) type c.
*END-OF-DEFINITION.
*
*n = '10'.
*create_dynx 10.
*
*lv_x_field = '12345678901'.
*
*WRITE: / lv_x_field.
*
*n = strlen( lv_x_field ).
*WRITE: / n.
*
*DATA lw_quote(1) TYPE c VALUE '"'.
*DATA lw_text(5) TYPE c.
*CONCATENATE lw_quote 'test' INTO lw_text.
*
*WRITE / lw_text.
*
*lw_text = 'Ç†ÇÈ'.
*TRANSLATE lw_text TO UPPER CASE.
*
*WRITE / lw_text.
*
*PARAMETERS p_char TYPE char01.
*
*IF p_char CA 'ET'.
*  WRITE / 'OK'.
*ENDIF.
*
*
*PARAMETERS p_remark TYPE adrct-remark.
*
*DATA lw_remark(40) TYPE c.
*
*CALL METHOD cl_abap_list_utilities=>read_from_display_layout
*  EXPORTING
*    display_data   = p_remark
*    display_offset = 10
*    display_length = 40
*  IMPORTING
*    field          = lw_remark.
*
*WRITE: / p_remark.
*WRITE: / lw_remark.
*
*
*DATA:
*  lth_messtab TYPE bdcmsgcoll,
*  lth_bidata  TYPE ztrlbct002,
*  lth_header  TYPE thead,
*  ltd_lines   TYPE STANDARD TABLE OF tline,
*  ltd_lines2  TYPE STANDARD TABLE OF tline,
*  lth_lines   TYPE tline.
*
*lth_header-tdobject = 'LFA1'.
*lth_header-tdname = 'SZTEST0005'.
*lth_header-tdid = '0001'.
*lth_header-tdspras = sy-langu.
*
*lth_lines-tdformat = '*'.
*lth_lines-tdline = 'TEST00LINE01'.
*APPEND lth_lines TO ltd_lines.
*lth_lines-tdline = 'TEST00LINE02'.
*APPEND lth_lines TO ltd_lines.
*lth_lines-tdline = 'TEST00LINE03'.
*APPEND lth_lines TO ltd_lines.
*lth_lines-tdline = 'TEST00LINE04'.
*APPEND lth_lines TO ltd_lines.
*
*CALL FUNCTION 'SAVE_TEXT'
*  EXPORTING
*    header          = lth_header
*    savemode_direct = 'X'
*  TABLES
*    lines           = ltd_lines
*  EXCEPTIONS
*    id              = 1
*    language        = 2
*    name            = 3
*    object          = 4
*    OTHERS          = 5.
*
*CALL FUNCTION 'READ_TEXT'
*  EXPORTING
*    client                  = sy-mandt
*    id                      = '0001'
*    language                = sy-langu
*    name                    = 'SZTEST0005'
*    object                  = 'LFA1'
*  TABLES
*    lines                   = ltd_lines2
*  EXCEPTIONS
*    id                      = 1
*    language                = 2
*    name                    = 3
*    not_found               = 4
*    object                  = 5
*    reference_check         = 6
*    wrong_access_to_archive = 7
*    OTHERS                  = 8.
*
*IF sy-subrc = 0.
*ENDIF.
*
*PARAMETERS p_menge TYPE ekpo-menge.
*
*DATA lw_meins TYPE ekpo-meins.
*DATA lw_menge(15) TYPE c.
*
*lw_meins = 'PC'.
*WRITE p_menge TO lw_menge UNIT lw_meins.
*WRITE: / lw_menge.
*
*lw_meins = 'BAG'.
*WRITE p_menge TO lw_menge UNIT lw_meins.
*WRITE: / lw_menge.
*
*PARAMETERS p_lgort TYPE znen002-lgort MATCHCODE OBJECT zhegsdtest01.
*
*PARAMETERS p_date(10) TYPE c.
*
*CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
*  EXPORTING
*    date                      = p_date
*  EXCEPTIONS
*    plausibility_check_failed = 1
*    OTHERS                    = 2.

*START-OF-SELECTION.
*
*    CALL FUNCTION 'VIEW_RANGETAB_TO_SELLIST'
*      EXPORTING
*        fieldname          = 'BUKRS'
*        append_conjunction = 'AND'
*      TABLES
*        sellist            = selections
*        rangetab           = &2[].
*
*  DEFINE addparam.
*    IF &2 IS NOT INITIAL.
*      CLEAR selection.
*      selection-viewfield = &1.
*      selection-value = &2.
*      selection-and_or = 'AND'.
*      selection-operator = 'EQ'.
*      APPEND selection TO selections.
*    ENDIF.
*  END-OF-DEFINITION.
*
*  add_sel 'MYFIELD1' so_selop1.
*  add_sel 'MYFIELD2' so_selop2.
*
*  add_par 'MYFIELD3' p_param1.
*  add_par 'MYFIELD4' p_param2.
*
*  CALL FUNCTION 'VIEW_MAINTENANCE_CALL'
*    EXPORTING
*      action                = 'U'
*      view_name             = 'Z_MYTABLE'
*      complex_selconds_used = 'X'
*    TABLES
*      dba_sellist           = selections
*    EXCEPTIONS
*      OTHERS                = 1.
*  IF sy-subrc = 1.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*  ENDIF.

*PARAMETERS P_1 TYPE ZNEN002_150511-ZKINGAKU.
*PARAMETERS P_2 TYPE ZNEN002_150512-ZKINGAKU.
*PARAMETERS P_3(9) TYPE P DECIMALS 2.
*PARAMETERS P_4(13) TYPE P DECIMALS 6.
*PARAMETERS P_5 TYPE P LENGTH 13 DECIMALS 6.
*PARAMETERS P_6 TYPE ZSLIST_V06A_NEW-NETPRA.
*PARAMETERS P_7 TYPE VBAP-NETPR.
*PARAMETERS P_8 TYPE VBRP-WAVWR.
*PARAMETERS P_9 TYPE ZNEN002-ZKINGAKU.
*PARAMETERS P_10 TYPE P LENGTH 9.
*PARAMETERS P_11 TYPE I.
*PARAMETERS P_12 TYPE MSEG-DMBTR.
*
*DATA WK_P TYPE P DECIMALS 2.
*
*WK_P = P_3.
*
*WRITE: / WK_P.
*
*DATA LW_12(25) TYPE C.
*
*WRITE P_12 TO LW_12 CURRENCY 'JPY' RIGHT-JUSTIFIED.
*
*WRITE: / LW_12.
*
*PARAMETERS P_CHAR1(13) Type c.
*
*IF P_CHAR1 co '0123456789.'.
*  WRITE: / 'error'.
*ENDIF.

*TABLES: BSID,
*        YN120.
*
*DATA W_COUNT TYPE I.
*
*SELECT-OPTIONS:  S_KUNNR FOR  BSID-KUNNR,
*                 S_DVSON FOR  YN120-DVSON.
*
*TYPES:
*  BEGIN  OF T_KNXX,
*    KUNNR TYPE KNA1-KUNNR,             " ìæà”êÊÉRÅ[Éh(êøãÅêÊ)
*    NAME1 TYPE KNA1-NAME1,             " ñºèÃÇP
*    VKGRP TYPE KNVV-VKGRP,             " âcã∆GRP  "2012/09/04 ADD
*    VKBUR TYPE KNVV-VKBUR,             " âcã∆èä   "2012/09/04 ADD
*  END    OF T_KNXX.
*
**DATA: I_KNXX   TYPE HASHED   TABLE OF T_KNXX
**               WITH UNIQUE KEY KUNNR.
*
*DATA: I_KNXX   TYPE STANDARD TABLE OF T_KNXX.
*
*SELECT KNA1~KUNNR                              " ìæà”êÊÉRÅ[Éh
*        KNA1~NAME1                             " ñºèÃÇP
*        KNVV~VKGRP                             " âcã∆èä
*        KNVV~VKBUR                             " âcã∆ÉOÉãÅ[Év
*   FROM KNA1
*  INNER JOIN KNVV
*     ON KNA1~KUNNR = KNVV~KUNNR
*   INTO CORRESPONDING FIELDS OF TABLE I_KNXX
*  WHERE KNA1~KUNNR IN S_KUNNR
*    AND KNVV~VKBUR IN S_DVSON.

*SELECT KNA1~KUNNR                              " ìæà”êÊÉRÅ[Éh
*       KNA1~NAME1                             " ñºèÃÇP
*   FROM KNA1
*   INTO CORRESPONDING FIELDS OF TABLE I_KNXX
*  WHERE KNA1~KUNNR IN S_KUNNR.

*DESCRIBE TABLE I_KNXX LINES W_COUNT.
*IF W_COUNT <> 0.
*  WRITE: W_COUNT.
*ENDIF.

TYPES:
BEGIN OF TYP_TH_AR,
VGBEL   TYPE VBRP-VGBEL,    " éQè∆ì`ï[î‘çÜ
VGPOS   TYPE VBRP-VGPOS,    " éQè∆ñæç◊î‘çÜ
VBELN   TYPE VBRP-VBELN,    " êøãÅì`ï[
POSNR   TYPE VBRP-POSNR,    " êøãÅñæç◊
FKIMG   TYPE VBRP-FKIMG,    " êøãÅêîó 
VRKME   TYPE VBRP-VRKME,    " îÃîÑíPà 
MEINS   TYPE VBRP-MEINS,    " äÓñ{êîó íPà 
NETWR   TYPE VBRP-NETWR,    " ì`ï[í â›ÇÃê≥ñ°äz
END OF TYP_TH_AR,
TYP_TD_AR TYPE STANDARD TABLE OF TYP_TH_AR.

DATA TD_AR TYPE TYP_TD_AR.

SELECT VBRP~VGBEL       " éQè∆ì`ï[î‘çÜ
VBRP~VGPOS       " éQè∆ñæç◊î‘çÜ
VBRP~VBELN       " êøãÅì`ï[
VBRP~POSNR       " êøãÅñæç◊
VBRP~FKIMG       " êøãÅêîó 
VBRP~VRKME       " îÃîÑíPà 
VBRP~MEINS       " äÓñ{êîó íPà 
VBRP~NETWR       " ì`ï[í â›ÇÃê≥ñ°äz
INTO TABLE TD_AR
FROM VBRP
WHERE VBRP~VGBEL  = '0080878249'
AND VBRP~VGPOS  = '000010'
%_HINTS ORACLE 'INDEX("VBRP" "VBRP~Y01")'.

IF SY-SUBRC = 0.
WRITE: / 'ok'.
ENDIF.
