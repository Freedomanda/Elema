*&---------------------------------------------------------------------*
*& Report  YTESTWW_SCREEN1
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  YTESTWW_SCREEN1.

**#量定#=======================================================
*
*TYPES: BEGIN OF gs_spfli,
*
*        mandt       TYPE spfli-mandt,
*
*        carrid      TYPE spfli-carrid,
*
*        connid      TYPE spfli-connid,
*
*        countryfr   TYPE spfli-countryfr,
*
*        cityfrom    TYPE spfli-cityfrom,
*
*        airpfrom    TYPE spfli-airpfrom,
*
*        countryto   TYPE spfli-countryto,
*
*        cityto      TYPE spfli-cityto,
*
*        airpto      TYPE spfli-airpto,
*
*        fltime      TYPE spfli-fltime,
*
*        deptime     TYPE spfli-deptime,
*
*        arrtime     TYPE spfli-arrtime,
*
*        distance    TYPE spfli-distance,
*
*        distid      TYPE spfli-distid,
*
*        fltype      TYPE spfli-fltype,
*
*        period      TYPE spfli-period,
*
*        hotspot     TYPE icon_d,
*
*END OF gs_spfli.
*
*TYPES  ty_spfli TYPE gs_spfli OCCURS 0.
*
**----------------------------------------------------------------------*
*
**       CLASS lcl_handle_events DEFINITION
*
**----------------------------------------------------------------------*
*
**       事件操作#（定#）
*
**----------------------------------------------------------------------*
*
*CLASS lcl_handle_events DEFINITION.
*
*  PUBLIC SECTION.
*
*    CLASS-METHODS: on_user_command FOR EVENT added_function OF cl_salv_events_table
*
*                    IMPORTING e_salv_function,
*
*                   on_double_click FOR EVENT double_click OF cl_salv_events_table
*
*                    IMPORTING row column,
*
*                   on_link_click   FOR EVENT link_click OF cl_salv_events_table
*
*                    IMPORTING row column,
*
*                   on_before_salv_function FOR EVENT before_salv_function OF cl_salv_events_table
*
*                    IMPORTING e_salv_function,
*
*                   on_after_salv_function FOR EVENT after_salv_function OF cl_salv_events_table
*
*                    IMPORTING e_salv_function.
*
*  PRIVATE SECTION.
*
*    CLASS-DATA: g_string TYPE string.
*
*ENDCLASS.                    "lcl_handle_events DEFINITION
*
**----------------------------------------------------------------------*
*
**       CLASS lcl_handle_events IMPLEMENTATION
*
**----------------------------------------------------------------------*
*
**       事件操作#（##）
*
**----------------------------------------------------------------------*
*
*CLASS lcl_handle_events IMPLEMENTATION.
*
**##新增功能按#事件#理方法==========================================
*
*  METHOD on_user_command.
*
*    CONCATENATE 'Function Code is '
*
*                e_salv_function
*
*           INTO g_string SEPARATED BY space.
*
*    MESSAGE i000(0k) WITH g_string.
*
*  ENDMETHOD.                    "on_user_command
*
**双#事件#理方法=======================================================
*
*  METHOD on_double_click.
*
*    g_string = row.
*
*    CONCATENATE 'DOUBLE CLICK'
*
*                'ROW'
*
*                g_string
*
*                'COLUMN'
*
*                column
*
*           INTO g_string SEPARATED BY space.
*
*    MESSAGE i000(0k) WITH g_string.
*
*  ENDMETHOD.                    "on_double_click
*
**##事件#理方法=======================================================
*
*  METHOD on_link_click.
*
*    g_string = row.
*
*    CONCATENATE 'LICK CLICK'
*
*                'ROW'
*
*                g_string
*
*                'COLUMN'
*
*                column
*
*           INTO g_string SEPARATED BY space.
*
*    MESSAGE i000(0k) WITH g_string.
*
*  ENDMETHOD.                    "on_link_click
*
**触#事件之前=======================================================
*
*  METHOD on_before_salv_function.
*
*    CONCATENATE 'Before Function '
*
*                e_salv_function
*
*           INTO g_string SEPARATED BY space.
*
*    MESSAGE i000(0k) WITH g_string.
*
*  ENDMETHOD.                    "on_before_salv_function
*
**触#事件之后=======================================================
*
*  METHOD on_after_salv_function.
*
*    CONCATENATE 'After Function '
*
*                e_salv_function
*
*           INTO g_string SEPARATED BY space.
*
*    MESSAGE i000(0k) WITH g_string.
*
*  ENDMETHOD.                    "on_after_salv_function
*
*ENDCLASS.                    "lcl_handle_events IMPLEMENTATION
*
**----------------------------------------------------------------------*
*
**       CLASS lcl_alv DEFINITION
*
**----------------------------------------------------------------------*
*
**       ALV操作#（定#）
*
**----------------------------------------------------------------------*
*
*CLASS lcl_alv DEFINITION.
*
*  PUBLIC SECTION.
*
*    METHODS: getdata               "取得要#示的数据
*
*               RETURNING value(lt_tab) TYPE ty_spfli,
*
*             alv_full              "全屏Grid列表#理方法
*
*               IMPORTING value(lt_tab) TYPE ty_spfli.
*
*  PRIVATE SECTION.
*
*    DATA: gr_table TYPE REF TO cl_salv_table.
*
*ENDCLASS.                    "lcl_alv DEFINITION
*
**----------------------------------------------------------------------*
*
**       CLASS lcl_alv IMPLEMENTATION
*
**----------------------------------------------------------------------*
*
**       ALV操作#（##）
*
**----------------------------------------------------------------------*
*
*CLASS lcl_alv IMPLEMENTATION.
*
**取得要#示的数据=======================================================
*
*  METHOD getdata.
*
*    SELECT * INTO CORRESPONDING FIELDS OF TABLE lt_tab FROM spfli.
*
*
*
*    FIELD-SYMBOLS <FS_spfli> TYPE gs_spfli.
*
*    LOOP AT lt_tab ASSIGNING <FS_spfli>.
*
*      <FS_spfli>-hotspot = icon_overview.
*
*    ENDLOOP.
*
*  ENDMETHOD.                    "getdata
*
**#出全屏网格列表的方法================================================
*
*  METHOD alv_full.
*
*    DATA: lr_functions  TYPE REF TO cl_salv_functions_list,
*
*          lr_events     TYPE REF TO cl_salv_events_table,
*
*          lr_columns    TYPE REF TO cl_salv_columns_table,
*
*          lr_column     TYPE REF TO cl_salv_column_table,
*
*          lr_content    TYPE REF TO cl_salv_form_element.
*
*    "#建#例
*
*    TRY.
*
*        cl_salv_table=>factory(
*
*          IMPORTING
*
*            r_salv_table = gr_table
*
*          CHANGING
*
*            t_table      = lt_tab
*
*        ).
*
*      CATCH cx_salv_msg.
*
*    ENDTRY.
*
*    "#置GUI Status
*
*    gr_table->set_screen_status(
*
*      report = sy-repid
*
*      pfstatus = 'SALV_STANDARD'
*
*      set_functions = gr_table->c_functions_all
*
*    ).
*
*    "#置#点
*
*    lr_columns = gr_table->get_columns( ).
*
*    TRY.
*
*        lr_column ?= lr_columns->get_column( 'HOTSPOT' ).
*
*        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
*
*        lr_column->set_long_text( 'HOTSPOT' ).
*
*      CATCH cx_salv_not_found.
*
*    ENDTRY.
*
*    "注册事件
*
*    lr_events = gr_table->get_event( ).
*
*    SET HANDLER lcl_handle_events=>on_user_command FOR lr_events.
*
*    SET HANDLER lcl_handle_events=>on_double_click FOR lr_events.
*
*    SET HANDLER lcl_handle_events=>on_link_click FOR lr_events.
*
*    SET HANDLER lcl_handle_events=>on_before_salv_function FOR lr_events.
*
*    SET HANDLER lcl_handle_events=>on_after_salv_function FOR lr_events.
*
*    "#示列表
*
*    gr_table->display( ).
*
*  ENDMETHOD.                    "alv_full
*
*ENDCLASS.                    "lcl_alv IMPLEMENTATION
*
*
*
**&---------------------------------------------------------------------*
*
**&      Form  f_main
*
**&---------------------------------------------------------------------*
*
**       整合数据，#行
*
**----------------------------------------------------------------------*
*
*FORM f_main.
*
*  DATA: lt_tab TYPE ty_spfli,
*
*        lr_alv TYPE REF TO lcl_alv.
*
*
*
*  CREATE OBJECT lr_alv.
*
*
*
*  "取得要#示的数据
*
*  lt_tab = lr_alv->getdata( ).
*
*
*
*  lr_alv->alv_full( lt_tab ).
*
*ENDFORM.                    "f_main
*
*
*
**#行#作=======================================================
*
*START-OF-SELECTION.
*
*  PERFORM f_main.
*----------------------------------------------------------------------*
* INCLUDE                                                              *
*----------------------------------------------------------------------*
INCLUDE <ICON>.

*----------------------------------------------------------------------*
* TYPES                                                                *
*----------------------------------------------------------------------*
TYPES:
BEGIN OF TYP_PLANE,
PLANETYPE TYPE ALV_T_T2-PLANETYPE,
END OF TYP_PLANE,

BEGIN OF TYP_AIRPFROM,
AIRPFROM TYPE ALV_T_T2-AIRPFROM,
END OF TYP_AIRPFROM.

TYPES BEGIN OF TYP_TEST.
TYPES CHK     TYPE CHAR1.
INCLUDE TYPE ALV_T_T2.
TYPES CELLTAB TYPE LVC_T_STYL.
TYPES CARRID_HANDLE TYPE INT4 .
TYPES connid_handle TYPE int4 .
TYPES END OF TYP_TEST.

*----------------------------------------------------------------------*
* 内表定#                                                             *
*----------------------------------------------------------------------*
DATA: IT_TEST     TYPE TABLE OF TYP_TEST,        "##数据用内表
IT_PLANE    TYPE TABLE OF TYP_PLANE,       "F4#助数据用内表
IT_AIRPFROM TYPE TABLE OF TYP_AIRPFROM,    "listbox数据用内表
IT_FIELDCAT TYPE LVC_T_FCAT,               "字段格式用内表
IT_F4       TYPE LVC_T_F4,                 "ALV中F4#置用内表
IT_DDVAL    TYPE LVC_T_DROP,               "下拉框#置用内表
IT_HYPE     TYPE LVC_T_HYPE.               "超##接内表

*----------------------------------------------------------------------*
* ##定#                                                             *
*----------------------------------------------------------------------*
DATA: WA_TEST     TYPE TYP_TEST,                 "##数据用##
WA_PLANE    TYPE TYP_PLANE,                "F4#助数据用##
WA_AIRPFROM TYPE TYP_AIRPFROM,             "listbox数据用##
WA_FIELDCAT TYPE LVC_S_FCAT,               "字段格式用##
WA_LAYOUT   TYPE LVC_S_LAYO,               "布局格式用##
WA_F4       TYPE LVC_S_F4,                 "ALV中F4#置用##
WA_DDVAL    TYPE LVC_S_DROP,               "下拉框#置用##
WA_HYPE     TYPE LVC_S_HYPE,               "超##接##
WA_TOOLBAR  TYPE STB_BUTTON.               "toolbar添加#置用##

*----------------------------------------------------------------------*
* #量定#                                                             *
*----------------------------------------------------------------------*
DATA: G_GRID              TYPE REF TO CL_GUI_ALV_GRID,
"ALV用#象
G_CUSTOM_CONTAINER  TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
G_TOOLBAR           TYPE REF TO CL_GUI_TOOLBAR,
"非toolbar用按##象
G_TOOLBAR_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
OK_CODE             TYPE SY-UCOMM,
SAVE_OK             TYPE SY-UCOMM,
G_ERROR_FLG         TYPE CHAR1,            "画面#元格修改####
G_COUNT             TYPE I.

*----------------------------------------------------------------------*
* CLASS定#
*----------------------------------------------------------------------*
CLASS: GCL_EVENT_RECEIVER DEFINITION DEFERRED,
GCL_EVENT_HANDLER  DEFINITION DEFERRED.

*----------------------------------------------------------------------*
* INITIALIZATION                                                       *
*----------------------------------------------------------------------*
INITIALIZATION.
SELECT *
INTO CORRESPONDING FIELDS OF TABLE IT_TEST
FROM ALV_T_T2
UP TO 30 ROWS
ORDER BY PRIMARY KEY.

SELECT PLANETYPE
INTO CORRESPONDING FIELDS OF TABLE IT_PLANE
FROM ALV_T_T2.
SORT IT_PLANE BY PLANETYPE.
DELETE ADJACENT DUPLICATES FROM IT_PLANE COMPARING PLANETYPE.

*----------------------------------------------------------------------*
* START-OF-SELECTION                                                   *
*----------------------------------------------------------------------*
START-OF-SELECTION.
PERFORM FRM_HYPE_SET.
PERFORM FRM_LAYOUT_SET.
PERFORM FRM_FIELDCAT_SET USING:
1  'CARRID'     'ALV_T_T2' 'CARRID',
2  'CONNID'     'ALV_T_T2' 'CONNID',
3  'FLDATE'     'ALV_T_T2' 'FLDATE',
4  'PRICE'      'ALV_T_T2' 'PRICE',
5  'CURRENCY'   'ALV_T_T2' 'CURRENCY',
6  'PLANETYPE'  'ALV_T_T2' 'PLANETYPE',
7  'SEATSMAX'   'ALV_T_T2' 'SEATSMAX',
8  'SEATSOCC'   'ALV_T_T2' 'SEATSOCC',
9  'PAYMENTSUM' 'ALV_T_T2' 'PAYMENTSUM',
10 'COUNTRYFR'  'ALV_T_T2' 'COUNTRYFR',
11 'AIRPFROM'   'ALV_T_T2' 'AIRPFROM',
12 'COUNTRYTO'  'ALV_T_T2' 'COUNTRYTO',
13 'AIRPTO'     'ALV_T_T2' 'AIRPTO',
14 'FLTIME'     'ALV_T_T2' 'FLTIME',
15 'DEPTIME'    'ALV_T_T2' 'DEPTIME',
16 'ARRTIME'    'ALV_T_T2' 'ARRTIME',
17 'DISTANCE'   'ALV_T_T2' 'DISTANCE',
18 'DISTID'     'ALV_T_T2' 'DISTID',
19 'PERIOD'     'ALV_T_T2' 'PERIOD',
20 'FLOAT_FI'   'ALV_T_T2' 'FLOAT_FI',
21 'STRING_F'   'ALV_T_T2' 'STRING_F',
22 'XSTRING'    'ALV_T_T2' 'XSTRING',
23 'INT_FIEL'   'ALV_T_T2' 'INT_FIEL',
24 'HEX_FIEL'   'ALV_T_T2' 'HEX_FIEL',
25 'DROPDOWN'   'ALV_T_T2' 'DROPDOWN',
26 'TAB_INDEX'  'ALV_T_T2' 'TAB_INDEX',
27 'CHK'        SPACE      SPACE.

CALL SCREEN 100.
*&---------------------------------------------------------------------*
*&      Form  FRM_LAYOUT_SET
*&---------------------------------------------------------------------*
*       布局#置
*----------------------------------------------------------------------*
FORM FRM_LAYOUT_SET .
WA_LAYOUT-CWIDTH_OPT = 'X'.
WA_LAYOUT-STYLEFNAME = 'CELLTAB'.              "使用CELL表#置
ENDFORM.                    " FRM_LAYOUT_SET
*&---------------------------------------------------------------------*
*&      Form  FRM_FIELDCAT_SET
*&---------------------------------------------------------------------*
*       字段格式#置
*----------------------------------------------------------------------*
FORM FRM_FIELDCAT_SET USING PU_COL_POS TYPE LVC_COLPOS
PU_FIELDNAME TYPE LVC_FNAME
PU_REF_TABLE TYPE LVC_RTNAME
PU_REF_FIELD TYPE LVC_RFNAME.
CLEAR WA_FIELDCAT.
WA_FIELDCAT-COL_POS   = PU_COL_POS.
WA_FIELDCAT-FIELDNAME = PU_FIELDNAME.
WA_FIELDCAT-REF_TABLE = PU_REF_TABLE.
WA_FIELDCAT-REF_FIELD = PU_REF_FIELD.
APPEND WA_FIELDCAT TO IT_FIELDCAT.

* ##KEY#置
LOOP AT IT_FIELDCAT INTO WA_FIELDCAT WHERE FIELDNAME = 'CARRID'
OR FIELDNAME = 'CONNID'
OR FIELDNAME = 'FLDATE'.
WA_FIELDCAT-KEY = 'X'.
MODIFY IT_FIELDCAT FROM WA_FIELDCAT INDEX SY-TABIX.
ENDLOOP.

* CHECKBOX#置
READ TABLE IT_FIELDCAT INTO WA_FIELDCAT
WITH KEY FIELDNAME = 'CHK'.
IF SY-SUBRC = 0.
WA_FIELDCAT-EDIT = 'X'.
WA_FIELDCAT-KEY  = 'X'.
WA_FIELDCAT-CHECKBOX = 'X'.
MODIFY IT_FIELDCAT FROM WA_FIELDCAT INDEX SY-TABIX.
ENDIF.

* #置成#有F4#助
READ TABLE IT_FIELDCAT INTO WA_FIELDCAT
WITH KEY FIELDNAME = 'PLANETYPE'.
IF SY-SUBRC = 0.
WA_FIELDCAT-EDIT       = 'X'.
WA_FIELDCAT-F4AVAILABL = 'X'.
MODIFY IT_FIELDCAT FROM WA_FIELDCAT INDEX SY-TABIX.
ENDIF.

* #置成可##点#
READ TABLE IT_FIELDCAT INTO WA_FIELDCAT
WITH KEY FIELDNAME = 'COUNTRYFR'.
IF SY-SUBRC = 0.
WA_FIELDCAT-HOTSPOT  = 'X'.

MODIFY IT_FIELDCAT FROM WA_FIELDCAT INDEX SY-TABIX.
ENDIF.

READ TABLE IT_FIELDCAT INTO WA_FIELDCAT
WITH KEY FIELDNAME = 'AIRPTO'.
IF SY-SUBRC = 0.
WA_FIELDCAT-WEB_FIELD = 'CARRID_HANDLE'.
WA_FIELDCAT-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON.
MODIFY IT_FIELDCAT FROM WA_FIELDCAT INDEX SY-TABIX.
ENDIF.

* #置成下拉框格式
READ TABLE IT_FIELDCAT INTO WA_FIELDCAT
WITH KEY FIELDNAME = 'AIRPFROM'.
IF SY-SUBRC = 0.
WA_FIELDCAT-DRDN_HNDL = '1'.
WA_FIELDCAT-EDIT      = 'X'.
MODIFY IT_FIELDCAT FROM WA_FIELDCAT INDEX SY-TABIX.
ENDIF.

REFRESH IT_F4.
CLEAR WA_F4.
WA_F4-FIELDNAME  = 'PLANETYPE'.
WA_F4-REGISTER   = 'X'.
WA_F4-GETBEFORE  = 'X'.
WA_F4-CHNGEAFTER = 'X'.
WA_F4-INTERNAL   = SPACE.
APPEND WA_F4 TO IT_F4.
ENDFORM.                    " FRM_FIELDCAT_SET

*&---------------------------------------------------------------------*
*&       Class (Implementation)  GCL_EVENT_RECEIVER
*&---------------------------------------------------------------------*
*        CLASS
*----------------------------------------------------------------------*
CLASS GCL_EVENT_RECEIVER DEFINITION.
PUBLIC SECTION.
CLASS-METHODS:
*     在ALV的工具条上增加新的按#
HANDLE_TOOLBAR
FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
IMPORTING E_OBJECT,
*     ##用#命令
HANDLE_USER_COMMAND
FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
IMPORTING E_UCOMM,
*     在ALV可修改的情况下，控制数据修改
HANDLE_DATA_CHANGED
FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
IMPORTING ER_DATA_CHANGED E_ONF4,
*     在数据修改完成之后
HANDLE_DATA_CHANGED_FINISHED
FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
IMPORTING E_MODIFIED,
*     F4#助用
HANDLE_F4
FOR EVENT ONF4 OF CL_GUI_ALV_GRID
IMPORTING ER_EVENT_DATA,
*     双#点#控制
HANDLE_DOUBLE_CLICK
FOR EVENT DOUBLE_CLICK OF CL_GUI_ALV_GRID
IMPORTING E_ROW
E_COLUMN,
*     #点点#控制
HANDLE_HOTSPOT_CLICK
FOR EVENT HOTSPOT_CLICK OF CL_GUI_ALV_GRID
IMPORTING E_ROW_ID
E_COLUMN_ID,
*     在用#命令触#之前
HANDLE_BEFORE_USER_COMMAND
FOR EVENT BEFORE_USER_COMMAND OF CL_GUI_ALV_GRID
IMPORTING E_UCOMM,
*     在用#命令触#之后
HANDLE_AFTER_USER_COMMAND
FOR EVENT AFTER_USER_COMMAND OF CL_GUI_ALV_GRID
IMPORTING E_UCOMM,
*     管理菜#
HANDLE_MENU_BUTTON
FOR EVENT MENU_BUTTON OF CL_GUI_ALV_GRID
IMPORTING E_OBJECT E_UCOMM,
HANDLE_BUTTON_CLICK
FOR EVENT BUTTON_CLICK OF CL_GUI_ALV_GRID
IMPORTING ES_COL_ID ES_ROW_NO.
*    METHODS:
ENDCLASS.               "GCL_EVENT_RECEIVER

*&---------------------------------------------------------------------*
*&       Class (Implementation)  GCL_EVENT_RECEIVER
*&---------------------------------------------------------------------*
*        CLASS
*----------------------------------------------------------------------*
CLASS GCL_EVENT_RECEIVER IMPLEMENTATION.

*&---------------------------------------------------------------------*
*&      Method  HANDLE_TOOLBAR
*&---------------------------------------------------------------------*
*&      在ALV的工具条上增加新的按#
*&---------------------------------------------------------------------*
METHOD HANDLE_TOOLBAR.
*   在GUI中添加一个分隔符
CLEAR WA_TOOLBAR.
MOVE 3 TO WA_TOOLBAR-BUTN_TYPE.
APPEND WA_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

*   在GUI中添加一个明#按#
CLEAR WA_TOOLBAR.
MOVE 'DET' TO WA_TOOLBAR-FUNCTION.
MOVE ICON_TOGGLE_DISPLAY TO WA_TOOLBAR-ICON.
MOVE '#化' TO WA_TOOLBAR-QUICKINFO.
MOVE SPACE TO WA_TOOLBAR-DISABLED.
APPEND WA_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

*   在GUI中添加一个分隔符
CLEAR WA_TOOLBAR.
MOVE 3 TO WA_TOOLBAR-BUTN_TYPE.
APPEND WA_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

*   在GUI中添加一个明#按#
CLEAR WA_TOOLBAR.
MOVE 'DETL' TO WA_TOOLBAR-FUNCTION.
MOVE ICON_TOGGLE_DISPLAY TO WA_TOOLBAR-ICON.
MOVE 2 TO WA_TOOLBAR-BUTN_TYPE.
APPEND WA_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

*   在GUI中添加一个分隔符
CLEAR WA_TOOLBAR.
MOVE 3 TO WA_TOOLBAR-BUTN_TYPE.
APPEND WA_TOOLBAR TO E_OBJECT->MT_TOOLBAR.

*   在GUI中添加一个明#按#
CLEAR WA_TOOLBAR.
MOVE 'DETD' TO WA_TOOLBAR-FUNCTION.
MOVE ICON_TOGGLE_DISPLAY TO WA_TOOLBAR-ICON.
APPEND WA_TOOLBAR TO E_OBJECT->MT_TOOLBAR.
ENDMETHOD.

*&---------------------------------------------------------------------*
*&      Method HANDLE_USER_COMMAND
*&---------------------------------------------------------------------*
*&      ##用#命令
*&---------------------------------------------------------------------*
METHOD HANDLE_USER_COMMAND.
DATA L_COUNT TYPE I.
CALL METHOD G_GRID->CHECK_CHANGED_DATA.
CASE E_UCOMM.
WHEN 'DET'.
PERFORM FRM_CELLTAB_SET.
WHEN 'DISPLAY'.
MESSAGE 'DISPLAY' TYPE 'S' DISPLAY LIKE 'E'.
WHEN 'DETD'.
G_COUNT = G_COUNT + 1.
L_COUNT = G_COUNT MOD 2.
IF L_COUNT = 1.
*         #入不可##状#
CALL METHOD G_GRID->SET_READY_FOR_INPUT
EXPORTING
I_READY_FOR_INPUT = 0.
ELSE.
*         #入可##状#
CALL METHOD G_GRID->SET_READY_FOR_INPUT
EXPORTING
I_READY_FOR_INPUT = 1.
ENDIF.
ENDCASE.
ENDMETHOD.

*&---------------------------------------------------------------------*
*&      Method HANDLE_DATA_CHANGED
*&---------------------------------------------------------------------*
*&      在ALV可修改的情况下，控制数据修改
*&---------------------------------------------------------------------*
METHOD HANDLE_DATA_CHANGED.
DATA: LWA_MOD TYPE LVC_S_MODI.
IF E_ONF4 <> 'X'.
CLEAR G_ERROR_FLG.
ENDIF.

LOOP AT ER_DATA_CHANGED->MT_MOD_CELLS INTO LWA_MOD.
IF LWA_MOD-FIELDNAME = 'PLANETYPE'.
READ TABLE IT_PLANE INTO WA_PLANE
WITH KEY PLANETYPE = LWA_MOD-VALUE.
IF SY-SUBRC <> 0.
*         添加出#信息！
CALL METHOD ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY
EXPORTING
I_MSGID     = '0K'
I_MSGNO     = '000'
I_MSGTY     = 'E'
I_MSGV1     = '##入正#的#机#型!'
I_FIELDNAME = LWA_MOD-FIELDNAME
I_ROW_ID    = LWA_MOD-ROW_ID.
G_ERROR_FLG = 'X'.
ENDIF.
ENDIF.
ENDLOOP.

IF E_ONF4 <> 'X'.
IF G_ERROR_FLG = 'X'.
CALL METHOD ER_DATA_CHANGED->DISPLAY_PROTOCOL.
ENDIF.
ENDIF.
ENDMETHOD.

*&---------------------------------------------------------------------*
*&      Method  HANDLE_DATA_CHANGED_FINISHED
*&---------------------------------------------------------------------*
*&      在数据修改完成之后
*&---------------------------------------------------------------------*
METHOD HANDLE_DATA_CHANGED_FINISHED.
DATA: LWA_COL TYPE LVC_S_COL,
LWA_ROW TYPE LVC_S_ROW.
IF E_MODIFIED = 'X'.
*     #取当前光#所在位置
CALL METHOD G_GRID->GET_CURRENT_CELL
IMPORTING
ES_ROW_ID    = LWA_ROW
ES_COL_ID    = LWA_COL.
CALL METHOD G_GRID->REFRESH_TABLE_DISPLAY.
*     光#定位
CALL METHOD G_GRID->SET_CURRENT_CELL_VIA_ID
EXPORTING
IS_ROW_ID    = LWA_ROW
IS_COLUMN_ID = LWA_COL.
ENDIF.
ENDMETHOD.
*&---------------------------------------------------------------------*
*&      Method  HANDLE_F4
*&---------------------------------------------------------------------*
*&      F4#助用
*&---------------------------------------------------------------------*
METHOD HANDLE_F4.
PERFORM FRM_F4_SHOW.
ER_EVENT_DATA->M_EVENT_HANDLED = 'X'.
ENDMETHOD.

*&---------------------------------------------------------------------*
*&      Method  HANDLE_DOUBLE_CLICK
*&---------------------------------------------------------------------*
*&      双#点#控制
*&---------------------------------------------------------------------*
METHOD HANDLE_DOUBLE_CLICK.
DATA L_VALUE TYPE CHAR40.
*   #取当前光#所在位置的#
CALL METHOD G_GRID->GET_CURRENT_CELL
IMPORTING
E_VALUE      = L_VALUE.
MESSAGE L_VALUE TYPE 'S' DISPLAY LIKE 'E'.
ENDMETHOD.
*&---------------------------------------------------------------------*
*&      Method  HANDLE_DOUBLE_CLICK
*&---------------------------------------------------------------------*
*&      #点点#控制
*&---------------------------------------------------------------------*
METHOD HANDLE_HOTSPOT_CLICK.
DATA L_VALUE TYPE CHAR40.
*   #取当前光#所在位置的#
CALL METHOD G_GRID->GET_CURRENT_CELL
IMPORTING
E_VALUE      = L_VALUE.
MESSAGE L_VALUE TYPE 'I'.
ENDMETHOD.
*&---------------------------------------------------------------------*
*&      Method  HANDLE_BEFORE_USER_COMMAND
*&---------------------------------------------------------------------*
*&      在用#命令触#之前
*&---------------------------------------------------------------------*
METHOD HANDLE_BEFORE_USER_COMMAND.
MESSAGE '按#事件之前触#！' TYPE 'S' DISPLAY LIKE 'E'.
ENDMETHOD.
*&---------------------------------------------------------------------*
*&      Method  HANDLE_AFTER_USER_COMMAND
*&---------------------------------------------------------------------*
*&      在用#命令触#之后
*&---------------------------------------------------------------------*
METHOD HANDLE_AFTER_USER_COMMAND.
MESSAGE '按#事件之后触#！' TYPE 'S' DISPLAY LIKE 'E'.
ENDMETHOD.
*&---------------------------------------------------------------------*
*&      Method  HANDLE_MENU_BUTTON
*&---------------------------------------------------------------------*
*&      管理菜#
*&---------------------------------------------------------------------*
METHOD HANDLE_MENU_BUTTON.
IF E_UCOMM = 'DETL'.
CALL METHOD E_OBJECT->ADD_FUNCTION
EXPORTING
FCODE = 'DISPLAY'
TEXT  = 'DISPLAY'.
ENDIF.
ENDMETHOD.
*&---------------------------------------------------------------------*
*&      Method  HANDLE_BUTTON_CLICK
*&---------------------------------------------------------------------*
*&      #元格按#事件
*&---------------------------------------------------------------------*
METHOD HANDLE_BUTTON_CLICK.
MESSAGE I899(FI) WITH ES_COL_ID-FIELDNAME ES_ROW_NO-ROW_ID.
ENDMETHOD.
ENDCLASS.               "GCL_EVENT_RECEIVER

*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.
SET PF-STATUS 'STATUS01'.
SET TITLEBAR 'TITLEBAR01'.
IF G_CUSTOM_CONTAINER IS INITIAL.
*   ALV#出
PERFORM FRM_ALV_OUT.
ENDIF.

IF G_TOOLBAR_CONTAINER IS INITIAL.
*   #示按#
PERFORM FRM_TOOLBAR_OUT.
ENDIF.
ENDMODULE.                 " STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.
SAVE_OK = OK_CODE.
CLEAR OK_CODE.
CALL METHOD G_GRID->CHECK_CHANGED_DATA.
CASE SAVE_OK.
WHEN '&F03'.
LEAVE TO SCREEN 0.
ENDCASE.
ENDMODULE.                 " USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*&      Form  FRM_ALV_OUT
*&---------------------------------------------------------------------*
*       ALV#出
*----------------------------------------------------------------------*
FORM FRM_ALV_OUT .
DATA: LIT_EXCLUDE      TYPE UI_FUNCTIONS,
LWA_VARIANT      TYPE DISVARIANT,
L_EVENT_RECEIVER TYPE REF TO GCL_EVENT_RECEIVER.

CREATE OBJECT G_CUSTOM_CONTAINER
EXPORTING CONTAINER_NAME = 'ALV_SCREEN'.
CREATE OBJECT G_GRID
EXPORTING I_PARENT = G_CUSTOM_CONTAINER.

* #藏#准按#
PERFORM FRM_TOOLBAR_EXCLUDE CHANGING LIT_EXCLUDE.
* 下拉框内容#置
PERFORM FRM_DRDN_TABLE_SET.

LWA_VARIANT-REPORT = SY-REPID.
* #示ALV
CALL METHOD G_GRID->SET_TABLE_FOR_FIRST_DISPLAY
EXPORTING IS_LAYOUT             = WA_LAYOUT
IT_TOOLBAR_EXCLUDING  = LIT_EXCLUDE
IS_VARIANT            = LWA_VARIANT
I_SAVE                = 'A'
IT_HYPERLINK          = IT_HYPE
CHANGING  IT_FIELDCATALOG       = IT_FIELDCAT
IT_OUTTAB             = IT_TEST.

CREATE OBJECT L_EVENT_RECEIVER.
* 在ALV的工具条上增加新的按#注册
SET HANDLER L_EVENT_RECEIVER->HANDLE_TOOLBAR FOR G_GRID.
CALL METHOD G_GRID->SET_TOOLBAR_INTERACTIVE.
* ##用#命令注册
SET HANDLER L_EVENT_RECEIVER->HANDLE_USER_COMMAND FOR ALL INSTANCES.
* 双#控制注册
SET HANDLER L_EVENT_RECEIVER->HANDLE_DOUBLE_CLICK FOR G_GRID.
* #点点#控制注册
SET HANDLER L_EVENT_RECEIVER->HANDLE_HOTSPOT_CLICK FOR G_GRID.
* 在用#命令触#之前注册
*  SET HANDLER L_EVENT_RECEIVER->HANDLE_BEFORE_USER_COMMAND FOR G_GRID.
* 在用#命令触#之后注册
*  SET HANDLER L_EVENT_RECEIVER->HANDLE_AFTER_USER_COMMAND FOR G_GRID.
* 管理菜#注册
SET HANDLER L_EVENT_RECEIVER->HANDLE_MENU_BUTTON FOR G_GRID.
* #元格按#事件
SET HANDLER L_EVENT_RECEIVER->HANDLE_BUTTON_CLICK FOR G_GRID.
* 触#回#事件 在ALV可修改的情况下,控制数据修改注册
SET HANDLER L_EVENT_RECEIVER->HANDLE_DATA_CHANGED
FOR ALL INSTANCES.
* 触#回#后事件 在数据修改完成之后注册
SET HANDLER L_EVENT_RECEIVER->HANDLE_DATA_CHANGED_FINISHED
FOR ALL INSTANCES.

* 注册更新事件（回#即触#）
*  CALL METHOD G_GRID->REGISTER_EDIT_EVENT
*    EXPORTING
*      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.
* 注册更新事件（失去光#交点即触#）
CALL METHOD G_GRID->REGISTER_EDIT_EVENT
EXPORTING
I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.

* 注册F4#助事件
CALL METHOD G_GRID->REGISTER_F4_FOR_FIELDS
EXPORTING
IT_F4             = IT_F4.
SET HANDLER L_EVENT_RECEIVER->HANDLE_F4 FOR G_GRID.
ENDFORM.                    " FRM_ALV_OUT

*&---------------------------------------------------------------------*
*&      Form  FRM_TOOLBAR_EXCLUDE
*&---------------------------------------------------------------------*
*       #藏#准按#
*----------------------------------------------------------------------*
*      <--PC_IT_EXCLUDE  #准按##藏##
*----------------------------------------------------------------------*
FORM FRM_TOOLBAR_EXCLUDE  CHANGING PC_IT_EXCLUDE TYPE UI_FUNCTIONS.
DATA LWA_EXCLUDE TYPE UI_FUNC.
LWA_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_CHECK.              "##
APPEND LWA_EXCLUDE TO PC_IT_EXCLUDE.
LWA_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.       "#制行
APPEND LWA_EXCLUDE TO PC_IT_EXCLUDE.
LWA_EXCLUDE = CL_GUI_ALV_GRID=>MC_MB_PASTE.              "粘#
APPEND LWA_EXCLUDE TO PC_IT_EXCLUDE.
LWA_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.            "剪切
APPEND LWA_EXCLUDE TO PC_IT_EXCLUDE.
LWA_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.           "#制
APPEND LWA_EXCLUDE TO PC_IT_EXCLUDE.
LWA_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.           "撤消
APPEND LWA_EXCLUDE TO PC_IT_EXCLUDE.
LWA_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.     "新增行
APPEND LWA_EXCLUDE TO PC_IT_EXCLUDE.
LWA_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.     "插入行
APPEND LWA_EXCLUDE TO PC_IT_EXCLUDE.
LWA_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.     "#除行
APPEND LWA_EXCLUDE TO PC_IT_EXCLUDE.
ENDFORM.                    " FRM_TOOLBAR_EXCLUDE
*&---------------------------------------------------------------------*
*&      Form  FRM_F4_SHOW
*&---------------------------------------------------------------------*
*       F4#助
*----------------------------------------------------------------------*
FORM FRM_F4_SHOW .
DATA: LIT_RETURN TYPE TABLE OF DDSHRETVAL,
LWA_RETURN TYPE DDSHRETVAL,
L_ROW      TYPE I,
LWA_COL    TYPE LVC_S_COL,
LWA_ROW    TYPE LVC_S_ROW,
LWA_STAB   TYPE LVC_S_STBL.
* 根据内表的内容出F4
CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
EXPORTING
RETFIELD        = 'PLANETYPE'
VALUE_ORG       = 'S'
TABLES
VALUE_TAB       = IT_PLANE
RETURN_TAB      = LIT_RETURN
EXCEPTIONS
PARAMETER_ERROR = 1
NO_VALUES_FOUND = 2
OTHERS          = 3.
* ##的#候
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ELSE.
READ TABLE LIT_RETURN INTO LWA_RETURN INDEX 1.
IF SY-SUBRC = 0.
*     #取当前光#位置
CALL METHOD G_GRID->GET_CURRENT_CELL
IMPORTING
E_ROW         = L_ROW
ES_ROW_ID     = LWA_ROW
ES_COL_ID     = LWA_COL.
READ TABLE IT_TEST INTO WA_TEST INDEX L_ROW.
IF SY-SUBRC = 0.
WA_TEST-PLANETYPE = LWA_RETURN-FIELDVAL.
MODIFY IT_TEST FROM WA_TEST INDEX L_ROW.
ENDIF.
LWA_STAB-ROW = 'X'.
LWA_STAB-COL = 'X'.
CALL METHOD G_GRID->REFRESH_TABLE_DISPLAY
EXPORTING
IS_STABLE          = LWA_STAB.
ENDIF.
ENDIF.
ENDFORM.                    " FRM_F4_SHOW
*&---------------------------------------------------------------------*
*&      Form  FRM_CELLTAB_SET
*&---------------------------------------------------------------------*
*       #置CELL表
*----------------------------------------------------------------------*
FORM FRM_CELLTAB_SET .
DATA: L_ROW       TYPE I,
LWA_COL     TYPE LVC_S_COL,
LWA_ROW     TYPE LVC_S_ROW,
L_INDEX     TYPE I,
LWA_CELLTAB TYPE LVC_S_STYL.
* #取当前光#位置
CALL METHOD G_GRID->GET_CURRENT_CELL
IMPORTING
E_ROW         = L_ROW
ES_ROW_ID     = LWA_ROW
ES_COL_ID     = LWA_COL.
READ TABLE IT_TEST INTO WA_TEST INDEX L_ROW.
IF SY-SUBRC = 0.
L_INDEX = SY-TABIX.
CLEAR LWA_CELLTAB.
IF WA_TEST-CELLTAB IS INITIAL.
LWA_CELLTAB-FIELDNAME = 'CHK'.
LWA_CELLTAB-STYLE     = CL_GUI_ALV_GRID=>MC_STYLE_BUTTON.
INSERT LWA_CELLTAB INTO TABLE WA_TEST-CELLTAB.
MODIFY IT_TEST FROM WA_TEST INDEX L_INDEX.
ELSE.
READ TABLE WA_TEST-CELLTAB INTO LWA_CELLTAB
WITH KEY FIELDNAME = 'CHK'.
IF SY-SUBRC = 0.
IF LWA_CELLTAB-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
*         不可用
LWA_CELLTAB-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
ELSE.
*         可用
LWA_CELLTAB-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
ENDIF.
MODIFY WA_TEST-CELLTAB FROM LWA_CELLTAB INDEX SY-TABIX.
MODIFY IT_TEST FROM WA_TEST INDEX L_INDEX.
ENDIF.
ENDIF.
ENDIF.

CALL METHOD G_GRID->REFRESH_TABLE_DISPLAY.
* 定位光#
CALL METHOD G_GRID->SET_CURRENT_CELL_VIA_ID
EXPORTING
IS_ROW_ID          = LWA_ROW
IS_COLUMN_ID       = LWA_COL.
ENDFORM.                    " FRM_CELLTAB_SET
*&---------------------------------------------------------------------*
*&      Form  FRM_DRDN_TABLE_SET
*&---------------------------------------------------------------------*
*       下拉框内容#置
*----------------------------------------------------------------------*
FORM FRM_DRDN_TABLE_SET .
DATA: LIT_DROPDOWN TYPE LVC_T_DROP,
LWA_DROPDOWN TYPE LVC_S_DROP.
SELECT AIRPFROM
INTO CORRESPONDING FIELDS OF TABLE IT_AIRPFROM
FROM ALV_T_T2.
IF SY-SUBRC = 0.
SORT IT_AIRPFROM BY AIRPFROM.
DELETE ADJACENT DUPLICATES FROM IT_AIRPFROM COMPARING AIRPFROM.
LOOP AT IT_AIRPFROM INTO WA_AIRPFROM.
LWA_DROPDOWN-HANDLE = '1'.
LWA_DROPDOWN-VALUE  = WA_AIRPFROM-AIRPFROM.
APPEND LWA_DROPDOWN TO LIT_DROPDOWN.
ENDLOOP.
ENDIF.

CALL METHOD G_GRID->SET_DROP_DOWN_TABLE
EXPORTING IT_DROP_DOWN = LIT_DROPDOWN.
ENDFORM.                    " FRM_DRDN_TABLE_SET

*&---------------------------------------------------------------------*
*&       Class (Implementation)  GCL_EVENT_HANDLER
*&---------------------------------------------------------------------*
*        CLASS
*----------------------------------------------------------------------*
CLASS GCL_EVENT_HANDLER DEFINITION.
PUBLIC SECTION.
METHODS:
ON_FUNCTION_SELECTED
FOR EVENT FUNCTION_SELECTED OF CL_GUI_TOOLBAR
IMPORTING FCODE,
ON_DROPDOWN_CLICKED
FOR EVENT DROPDOWN_CLICKED OF CL_GUI_TOOLBAR
IMPORTING FCODE POSX POSY.
ENDCLASS.               "GCL_EVENT_HANDLER

*&---------------------------------------------------------------------*
*&       Class (Implementation)  GCL_EVENT_HANDLER
*&---------------------------------------------------------------------*
*        CLASS
*----------------------------------------------------------------------*
CLASS GCL_EVENT_HANDLER IMPLEMENTATION.
METHOD ON_FUNCTION_SELECTED.
DATA L_COUNT TYPE I.
CASE FCODE.
WHEN 'DISPLAY_CHANGE'.
G_COUNT = G_COUNT + 1.
L_COUNT = G_COUNT MOD 2.
IF L_COUNT = 1.
*         #入不可##状#
CALL METHOD G_GRID->SET_READY_FOR_INPUT
EXPORTING
I_READY_FOR_INPUT = 0.
ELSE.
*         #入可##状#
CALL METHOD G_GRID->SET_READY_FOR_INPUT
EXPORTING
I_READY_FOR_INPUT = 1.
ENDIF.
WHEN 'INSERT_FC'.
MESSAGE 'INSERT NEW LINE AS FIRST CHILD' TYPE 'S'.
WHEN 'INSERT_LC'.
MESSAGE 'INSERT NEW LINE AS LAST CHILD' TYPE 'S'.
WHEN 'INSERT_NS'.
MESSAGE 'INSERT NEW LINE AS NEXT SIBLING' TYPE 'S'.
WHEN 'INSERT_LS'.
MESSAGE 'INSERT NEW LINE AS LAST SIBLING' TYPE 'S'.
WHEN 'INSERT_FS'.
MESSAGE 'INSERT NEW LINE AS FIRST SIBLING' TYPE 'S'.
ENDCASE.
ENDMETHOD.

METHOD ON_DROPDOWN_CLICKED.
DATA: L_MENU       TYPE REF TO CL_CTMENU,
L_FC_HANDLED TYPE AS4FLAG.             "FLAG
CREATE OBJECT L_MENU.
CLEAR L_FC_HANDLED.
CASE FCODE.
WHEN 'INSERT_LIST'.
L_FC_HANDLED = 'X'.
*       INSERT AS LAST CHILD
CALL METHOD L_MENU->ADD_FUNCTION
EXPORTING
FCODE   = 'INSERT_LC'
TEXT    = 'INSERT NEW LINE AS LAST CHILD'.
*       INSERT AS FIRST CHILD
CALL METHOD L_MENU->ADD_FUNCTION
EXPORTING
FCODE   = 'INSERT_FC'
TEXT    = 'INSERT NEW LINE AS FIRST CHILD'.
*       INSERT AS NEXT SIBLING
CALL METHOD L_MENU->ADD_FUNCTION
EXPORTING
FCODE   = 'INSERT_NS'
TEXT    = 'INSERT NEW LINE AS NEXT SIBLING'.
*       INSERT AS LAST SIBLING
CALL METHOD L_MENU->ADD_FUNCTION
EXPORTING
FCODE   = 'INSERT_LS'
TEXT    = 'INSERT NEW LINE AS LAST SIBLING'.
*       INSERT AS FIRST SIBLING
CALL METHOD L_MENU->ADD_FUNCTION
EXPORTING
FCODE   = 'INSERT_FS'
TEXT    = 'INSERT NEW LINE AS FIRST SIBLING'.
ENDCASE.

*   SHOW DROPDOWNBOX
IF L_FC_HANDLED = 'X'.
CALL METHOD G_TOOLBAR->TRACK_CONTEXT_MENU
EXPORTING
CONTEXT_MENU = L_MENU
POSX         = POSX
POSY         = POSY.
ENDIF.
ENDMETHOD.
ENDCLASS.               "GCL_EVENT_HANDLER

*&---------------------------------------------------------------------*
*&      Form  FRM_TOOLBAR_OUT
*&---------------------------------------------------------------------*
*       #示按#
*----------------------------------------------------------------------*
FORM FRM_TOOLBAR_OUT .
DATA: LIT_EVENTS TYPE CNTL_SIMPLE_EVENTS,    "按#功能的注册事件用内表
LWA_EVENT  TYPE CNTL_SIMPLE_EVENT,     "按#功能的注册事件用##
L_EVENT_HANDLER TYPE REF TO GCL_EVENT_HANDLER.
*   CREATE CONTAINER
CREATE OBJECT G_TOOLBAR_CONTAINER
EXPORTING CONTAINER_NAME = 'TOOLBAR_SCREEN'.
*   CREATE TOOLBAR
CREATE OBJECT G_TOOLBAR
EXPORTING PARENT = G_TOOLBAR_CONTAINER.

CALL METHOD G_TOOLBAR->ADD_BUTTON
EXPORTING
FCODE       = 'INSERT_LIST'              "FUNCTION CODE
ICON        = ICON_INSERT_ROW            "ICON NAME
IS_DISABLED = ' '                        "DISABLED = X
BUTN_TYPE   = CNTB_BTYPE_DROPDOWN        "TYPE OF BUTTON
TEXT        = ''                         "TEXT ON BUTTON
QUICKINFO   = '新增'                     "QUICK INFO
IS_CHECKED  = ' '.                       "BUTTON SELECTED

CALL METHOD G_TOOLBAR->ADD_BUTTON
EXPORTING
FCODE       = ''                         "FUNCTION CODE
ICON        = ''                         "ICON NAME
BUTN_TYPE   = CNTB_BTYPE_SEP.            "TYPE OF BUTTON

CALL METHOD G_TOOLBAR->ADD_BUTTON
EXPORTING
FCODE       = 'DISPLAY_CHANGE'           "FUNCTION CODE
ICON        = ICON_TOGGLE_DISPLAY_CHANGE "ICON NAME
IS_DISABLED = ' '                        "DISABLED = X
BUTN_TYPE   = CNTB_BTYPE_BUTTON          "TYPE OF BUTTON
TEXT        = ''                         "TEXT ON BUTTON
QUICKINFO   = '#示<->更改'              "QUICK INFO
IS_CHECKED  = ' '.                       "BUTTON SELECTED

REFRESH LIT_EVENTS.
*   添加普通按#功能事件注册
CLEAR LWA_EVENT.
LWA_EVENT-EVENTID    = G_TOOLBAR->M_ID_FUNCTION_SELECTED.
LWA_EVENT-APPL_EVENT = 'X'.
APPEND LWA_EVENT TO LIT_EVENTS.
*   添加菜#按#功能事件注册
CLEAR LWA_EVENT.
LWA_EVENT-EVENTID    = G_TOOLBAR->M_ID_DROPDOWN_CLICKED.
LWA_EVENT-APPL_EVENT = 'X'.
APPEND LWA_EVENT TO LIT_EVENTS.

*   按#事件注册
CALL METHOD G_TOOLBAR->SET_REGISTERED_EVENTS
EXPORTING
EVENTS = LIT_EVENTS.

CREATE OBJECT L_EVENT_HANDLER.
SET HANDLER L_EVENT_HANDLER->ON_FUNCTION_SELECTED FOR G_TOOLBAR.
SET HANDLER L_EVENT_HANDLER->ON_DROPDOWN_CLICKED  FOR G_TOOLBAR.
ENDFORM.                    " FRM_TOOLBAR_OUT
*&---------------------------------------------------------------------*
*&      Form  FRM_HYPE_SET
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_HYPE_SET .
DATA: L_INDEX     TYPE SY-TABIX,
LWA_CELLTAB TYPE LVC_S_STYL.
WA_HYPE-HANDLE = '1' .
WA_HYPE-HREF = 'http://www.sina.com'.
APPEND WA_HYPE TO IT_HYPE.

WA_HYPE-HANDLE = '2' .
WA_HYPE-HREF = 'http://www.qq.com'.
APPEND WA_HYPE TO IT_HYPE.

LOOP AT IT_TEST INTO WA_TEST.
L_INDEX = SY-TABIX.
IF WA_TEST-AIRPTO = 'SFO'.
WA_TEST-CARRID_HANDLE = '1'.
ELSE.
WA_TEST-CARRID_HANDLE = '2'.
ENDIF.
MODIFY IT_TEST FROM WA_TEST INDEX L_INDEX.
ENDLOOP.ENDFORM.                    " FRM_HYPE_SET
