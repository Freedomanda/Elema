*&---------------------------------------------------------------------*
*& プログラム：ZEGZZR0010 汎用アドオンテーブルアップローダ
*& 作成者    ：ISID
*& 作成日付  ：2014/11/27
*& 機能ID    ：N/A
*&---------------------------------------------------------------------*
*& 処理概要&
*&   *選択内容に従い、選択されたアドオンテーブルを一括更新する
*&*--------------------------------------------------------------------*
*& 更新履歴&
*& No.   更新日付    更新者    更新内容
*& 新規  2014/11/27  ISID06
*&---------------------------------------------------------------------*
REPORT  ZEGZZR0010.

* Declear data objects
*&---------------------------------------------------------------------*
*&  項目定義
*&---------------------------------------------------------------------*
* constants,
CONSTANTS:
GCF_ON(01)     TYPE C VALUE 'X',     "フラグON
GCF_TYP(10)    TYPE C VALUE 'ASC',   "アスキーコード
GCF_CTRU(01)   TYPE C VALUE 'U',     "制御コード(Ｕ=変更)
GCF_CTRN(01)   TYPE C VALUE 'N'.     "制御コード(Ｎ=登録)

* dynamic internal objects declear
DATA: W_TABNAME TYPE W_TABNAME,
W_DREF TYPE REF TO DATA,
W_DREF2 TYPE REF TO DATA.


*FIELD-SYMBOLS: <IT_FS> TYPE ANY TABLE.
FIELD-SYMBOLS: <IT_FS> TYPE TABLE.
FIELD-SYMBOLS: <WK_FS> TYPE ANY.

* データ更新先
FIELD-SYMBOLS: <IT_FS_TO> TYPE TABLE.
FIELD-SYMBOLS: <WK_FS_TO> TYPE ANY.

*COMMIT用
FIELD-SYMBOLS: <IT_FS_COM> TYPE TABLE.


*<SQL更新用パラメータ>
TYPE-POOLS: VRM.
DATA: NAME  TYPE VRM_ID,
LIST  TYPE VRM_VALUES,
VALUE LIKE LINE OF LIST.

*
DATA: BEGIN OF WK_TAB,
F001(300),F002(300),F003(300),F004(300),F005(300),F006(300),F007(300),F008(300),F009(300),F010(300),
F011(300),F012(300),F013(300),F014(300),F015(300),F016(300),F017(300),F018(300),F019(300),F020(300),
F021(300),F022(300),F023(300),F024(300),F025(300),F026(300),F027(300),F028(300),F029(300),F030(300),
F031(300),F032(300),F033(300),F034(300),F035(300),F036(300),F037(300),F038(300),F039(300),F040(300),
F041(300),F042(300),F043(300),F044(300),F045(300),F046(300),F047(300),F048(300),F049(300),F050(300),
F051(300),F052(300),F053(300),F054(300),F055(300),F056(300),F057(300),F058(300),F059(300),F060(300),
F061(300),F062(300),F063(300),F064(300),F065(300),F066(300),F067(300),F068(300),F069(300),F070(300),
F071(300),F072(300),F073(300),F074(300),F075(300),F076(300),F077(300),F078(300),F079(300),F080(300),
F081(300),F082(300),F083(300),F084(300),F085(300),F086(300),F087(300),F088(300),F089(300),F090(300),
F091(300),F092(300),F093(300),F094(300),F095(300),F096(300),F097(300),F098(300),F099(300),F100(300),
F101(300),F102(300),F103(300),F104(300),F105(300),F106(300),F107(300),F108(300),F109(300),F110(300),
F111(300),F112(300),F113(300),F114(300),F115(300),F116(300),F117(300),F118(300),F119(300),F120(300),
F121(300),F122(300),F123(300),F124(300),F125(300),F126(300),F127(300),F128(300),F129(300),F130(300),
F131(300),F132(300),F133(300),F134(300),F135(300),F136(300),F137(300),F138(300),F139(300),F140(300),
F141(300),F142(300),F143(300),F144(300),F145(300),F146(300),F147(300),F148(300),F149(300),F150(300),
F151(300),F152(300),F153(300),F154(300),F155(300),F156(300),F157(300),F158(300),F159(300),F160(300),
F161(300),F162(300),F163(300),F164(300),F165(300),F166(300),F167(300),F168(300),F169(300),F170(300),
F171(300),F172(300),F173(300),F174(300),F175(300),F176(300),F177(300),F178(300),F179(300),F180(300),
F181(300),F182(300),F183(300),F184(300),F185(300),F186(300),F187(300),F188(300),F189(300),F190(300),
F191(300),F192(300),F193(300),F194(300),F195(300),F196(300),F197(300),F198(300),F199(300),F200(300),
END OF WK_TAB,
IT_TAB LIKE TABLE OF WK_TAB.

DATA WK_COUNT TYPE I.


*----------------------------------------------------------------------*
*   選択画面定義
*----------------------------------------------------------------------*
*-- 画面レイアウト設定：実行パラメータ
SELECTION-SCREEN BEGIN OF BLOCK BL1 WITH FRAME TITLE TITLE-01.
* 更新テーブル、構造、SQL処理（更新・挿入・変更）
PARAMETERS : P_SQLTAB  TYPE DD02L-TABNAME OBLIGATORY.
PARAMETERS : P_SQL(10) AS LISTBOX VISIBLE LENGTH 10 OBLIGATORY DEFAULT '1'.

* ローカルからファイルを取得
PARAMETERS P_RD2 RADIOBUTTON GROUP AS DEFAULT 'X'.

* CSV対応
PARAMETERS:  P_CSV TYPE C AS CHECKBOX DEFAULT ''.

* ファイル名
PARAMETERS:  P_FILELC TYPE RLGRAP-FILENAME LOWER CASE.


SELECTION-SCREEN SKIP.

* SAPサーバ内からファイルを取得
PARAMETERS P_RD1 RADIOBUTTON GROUP AS .

* CSV対応
PARAMETERS:  P_CSV2 TYPE C AS CHECKBOX DEFAULT ''.

PARAMETERS:  P_FILESP TYPE FILENAMECI-FILEINTERN .
PARAMETERS:  P_FILENM TYPE RLGRAP-FILENAME.

SELECTION-SCREEN END   OF BLOCK BL1.


*  -- 画面レイアウト設定：オプション
SELECTION-SCREEN BEGIN OF BLOCK BL2 WITH FRAME TITLE TITLE-02.

*-- 画面レイアウト設定：表示件数
SELECTION-SCREEN BEGIN OF BLOCK BL2_1 WITH FRAME TITLE TITLE-03.
* インジケータ表示
PARAMETERS:  P_INDC      TYPE C AS CHECKBOX DEFAULT 'X'.
PARAMETERS:  P_INDCNT(6) TYPE N.
SELECTION-SCREEN END   OF BLOCK BL2_1.

*-- 画面レイアウト設定：コミット
SELECTION-SCREEN BEGIN OF BLOCK BL2_2 WITH FRAME TITLE TITLE-04.
* コミット件数表示
PARAMETERS:  P_COMMIT    TYPE C AS CHECKBOX DEFAULT 'X'.
PARAMETERS:  P_COMCNT(7) TYPE N.
SELECTION-SCREEN END   OF BLOCK BL2_2.

*-- 画面レイアウト設定：項目編集
SELECTION-SCREEN BEGIN OF BLOCK BL2_3 WITH FRAME TITLE TITLE-05.
* ヘッダスキップ
PARAMETERS:  P_HEAD TYPE C AS CHECKBOX.
* 取込ファイルにクライアント列を追加
PARAMETERS:  P_MANDT TYPE C AS CHECKBOX.
* 通貨型変換
PARAMETERS:  P_CURR TYPE C AS CHECKBOX.
* 更新テーブル、[入力/更新]日付・[入力/更新]時刻・[入力/更新]者
PARAMETERS : P_INFOCK  TYPE C AS CHECKBOX.

*-- 画面レイアウト設定：登録日/更新日
SELECTION-SCREEN BEGIN OF BLOCK BL2_3_1 WITH FRAME TITLE TITLE-06.
PARAMETERS : P_INDATE  TYPE DATS DEFAULT SY-DATUM.
PARAMETERS : P_INTIME  TYPE TIMS DEFAULT SY-UZEIT.
PARAMETERS : P_INUSER  TYPE USR01-BNAME DEFAULT SY-UNAME.
SELECTION-SCREEN END   OF BLOCK BL2_3_1.

*-- 画面レイアウト設定：登録日/更新日の項目名
* [入力/更新]日付・[入力/更新]時刻・[入力/更新]者のDB項目名
SELECTION-SCREEN BEGIN OF BLOCK BL2_3_2 WITH FRAME TITLE TITLE-07.
PARAMETERS : P_FN_IND TYPE DD03L-FIELDNAME.
PARAMETERS : P_FN_INT TYPE DD03L-FIELDNAME.
PARAMETERS : P_FN_INU TYPE DD03L-FIELDNAME.
PARAMETERS : P_FN_UPD TYPE DD03L-FIELDNAME.
PARAMETERS : P_FN_UPT TYPE DD03L-FIELDNAME.
PARAMETERS : P_FN_UPU TYPE DD03L-FIELDNAME.
SELECTION-SCREEN END   OF BLOCK BL2_3_2.


SELECTION-SCREEN END   OF BLOCK BL2_3.

SELECTION-SCREEN END   OF BLOCK BL2.

************************************************************************
INITIALIZATION.
************************************************************************
* is it possible to be a functional methods ?

* 選択画面のパラメータを定義致します。
%_P_FILESP_%_APP_%-TEXT = '更新用論理パス(SAPサーバ)'.
%_P_FILENM_%_APP_%-TEXT = 'ファイル名'.

%_P_FILELC_%_APP_%-TEXT = '更新用ファイル名(ローカル)'.
P_FILELC = 'C:\'.
%_P_RD1_%_APP_%-TEXT    = 'SAPサーバ内からファイルを取得'.
%_P_RD2_%_APP_%-TEXT    = 'ローカルからファイルを取得'.

*
%_P_CSV_%_APP_%-TEXT    = 'CSV形式の取得(SJIS+カンマ編集のみ) '.
%_P_CSV2_%_APP_%-TEXT    = 'CSV形式の取得(SJIS+カンマ編集のみ) '.


%_P_SQLTAB_%_APP_%-TEXT = '更新先テーブルID'.
%_P_SQL_%_APP_%-TEXT    = 'SQL処理内容'.
%_P_CURR_%_APP_%-TEXT   = '通貨型(Curr)を1/100変換する'.
%_P_INDC_%_APP_%-TEXT   = '処理件数表示'.
%_P_MANDT_%_APP_%-TEXT  = '先頭にクライアント列（MANDT）を追加する'.
%_P_HEAD_%_APP_%-TEXT  = 'ヘッダ行（1行）をスキップする'.

%_P_COMMIT_%_APP_%-TEXT  = '部分コミットを実施する'.
%_P_COMCNT_%_APP_%-TEXT  = 'コミット単位(件)を入力して下さい'.

%_P_INDCNT_%_APP_%-TEXT  = '処理表示件数（何件ごとに表示？)'.
P_INDCNT = 1000.
P_COMCNT = 50000.

%_P_INDATE_%_APP_%-TEXT    = '登録/更新 日付'.
%_P_INTIME_%_APP_%-TEXT    = '登録/更新 時刻'.
%_P_INUSER_%_APP_%-TEXT    = '登録/更新 ユーザID'.
%_P_INFOCK_%_APP_%-TEXT    = '登録/更新に値をセットする'.

%_P_FN_IND_%_APP_%-TEXT    = '登録日付のDB項目名'.
%_P_FN_INT_%_APP_%-TEXT    = '登録時刻のDB項目名'.
%_P_FN_INU_%_APP_%-TEXT    = '登録ユーザのDB項目名'.
%_P_FN_UPD_%_APP_%-TEXT    = '更新日付のDB項目名'.
%_P_FN_UPT_%_APP_%-TEXT    = '更新時刻のDB項目名'.
%_P_FN_UPU_%_APP_%-TEXT    = '更新ユーザのDB項目名'.

* FRAME TITLE
TITLE-01 = '実行パラメータ'.
TITLE-02 = 'オプション(SAPサーバ内からファイルを取得する時のみ有効)'.
TITLE-03 = '表示制御'.
TITLE-04 = 'コミット制御'.
TITLE-05 = '項目編集'.
TITLE-06 = '登録/更新の設定値'.
TITLE-07 = '登録/更新のDB項目'.

* Set dynamic sql parameters /// We shouldn't set usual instructuon as "
PERFORM FRM_SET_PARAMTER_VAL: USING '1' 'MODIFY'.
*                                USING '2' 'MODIFY',
*                                USING '3' 'INSERT'.

NAME = 'P_SQL'.
CALL FUNCTION 'VRM_SET_VALUES'
EXPORTING
ID     = NAME
VALUES = LIST.

************************************************************************
START-OF-SELECTION.
************************************************************************

* 内部テーブルのダイナミック指定
* 選択画面で定義した構造を内部テーブルとして宣言
PERFORM FRM_CREATE_ITAB_ON_DYNA.

* <データの取得>
* SAPサーバからの取得
IF P_RD1 = 'X'.

IF P_CSV2 = 'X'. " CSV
PERFORM FRM_LUPLOAD5 USING P_FILESP.
ELSE.           " TAB
PERFORM FRM_LUPLOAD3 USING P_FILESP.
ENDIF.
ELSE.
* フロントエンドからの取得
* 選択画面で定義したパスからファイルを取得する

IF P_CSV = 'X'. " CSV
PERFORM FRM_LUPLOAD4 USING P_FILELC.
ELSE.           " TAB
PERFORM FRM_LUPLOAD2 USING P_FILELC.
ENDIF.
ENDIF.

*更新用のワークにデータを渡す。
PERFORM FRM_MOVE_DATA_ITAB.

*更新用日付・時刻・ユーザの一括更新をする。
PERFORM FRM_UPD_DATA_ITAB.

*テーブルへの更新処理
PERFORM FRM_ISSUE_SQL .

*&---------------------------------------------------------------------*
*&      Form  FRM_LUPLOAD2
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_ZROT001  text
*      -->P_P_FILENM  text
*----------------------------------------------------------------------*
FORM FRM_LUPLOAD2  USING    ARG_FILENM.

DATA:
LDF_FNM    TYPE STRING,             "ファイル名
LDF_LENGTH TYPE I,                  "ファイル長
LDF_MSGV1  TYPE SYMSGV.             "メッセージ変数

**--入力ファイル名の型を変更
LDF_FNM = ARG_FILENM.

**--汎用モジュール呼び出し(ローカルファイルのアップロード)
CALL FUNCTION 'GUI_UPLOAD'
EXPORTING
FILENAME                = LDF_FNM          "入力したファイル名
FILETYPE                = GCF_TYP          "ASC
HAS_FIELD_SEPARATOR     = GCF_ON           "TAB形式
IMPORTING
FILELENGTH              = LDF_LENGTH       "ファイル長
TABLES
DATA_TAB                = <IT_FS>          "共通内部テーブルに
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
OTHERS                  = 17.

IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.


ENDFORM.                    " FRM_LUPLOAD2
*&---------------------------------------------------------------------*
*&      Form  FRM_CREATE_ITAB_ON_DYNA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_CREATE_ITAB_ON_DYNA .

* <データ読込み用> ****************************
W_TABNAME = P_SQLTAB.
* 内部テーブルの動的生成
CREATE DATA W_DREF TYPE TABLE OF (W_TABNAME).
ASSIGN W_DREF->* TO <IT_FS>.

* 構造の動的生成
CREATE DATA W_DREF TYPE (W_TABNAME).
ASSIGN W_DREF->* TO <WK_FS>.

* <データ更新先> ******************************
W_TABNAME = P_SQLTAB.
* 内部テーブルの動的生成
CREATE DATA W_DREF TYPE TABLE OF (W_TABNAME).
ASSIGN W_DREF->* TO <IT_FS_TO>.

* 構造の動的生成
CREATE DATA W_DREF TYPE (W_TABNAME).
ASSIGN W_DREF->* TO <WK_FS_TO>.

**
CREATE DATA W_DREF2 TYPE TABLE OF (W_TABNAME).
ASSIGN W_DREF2->* TO <IT_FS_COM>.



ENDFORM.                    " FRM_CREATE_ITAB_ON_DYNA
*&---------------------------------------------------------------------*
*&      Form  FRM_ISSUE_SQL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_ISSUE_SQL .
** インジケータの表示
IF P_INDC = 'X'.
PERFORM FRM_SHOW_INDICATOR USING WK_COUNT
' 3/3 レコード更新中'.
ENDIF.



* 指定件数毎のコミットの場合
IF P_COMMIT = 'X'.
PERFORM FRM_COMMIT_PART.

* 一括更新の場合
ELSE.

W_TABNAME = P_SQLTAB.
MODIFY (W_TABNAME) FROM TABLE <IT_FS_TO> .

IF SY-SUBRC = 0.
WRITE:/ W_TABNAME, 'の更新:成功:', SY-DBCNT, '件'.
MESSAGE S999(28) WITH W_TABNAME 'の更新:成功:' SY-DBCNT '件'.
ELSE.
MESSAGE E999(28) WITH W_TABNAME 'の更新:失敗: リターンコード' SY-SUBRC .
ENDIF.

ENDIF.


*  CASE P_SQL.
*    WHEN 1. " UPDATE
*      W_TABNAME = P_SQLTAB.
*      UPDATE (W_TABNAME) FROM TABLE <IT_FS_TO> .
*
*    WHEN 2. " MODIFY
*      W_TABNAME = P_SQLTAB.
*      MODIFY (W_TABNAME) FROM TABLE <IT_FS_TO> .
*
*    WHEN 3. " INSERT
*      W_TABNAME = P_SQLTAB.
*      INSERT (W_TABNAME) FROM TABLE <IT_FS_TO> .
*
**    WHEN 4. "
*  ENDCASE.
*
*
*  IF SY-SUBRC = 0.
*
*  ELSE.
*
*  ENDIF.


ENDFORM.                    " FRM_ISSUE_SQL
*&---------------------------------------------------------------------*
*&      Form  FRM_MOVE_DATA_ITAB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_MOVE_DATA_ITAB .

CLEAR WK_COUNT.

LOOP AT <IT_FS> INTO <WK_FS>.

** インジケータの表示
DATA WK_I TYPE I.

IF P_INDC = 'X'.
WK_COUNT = WK_COUNT + 1.
WK_I = WK_COUNT MOD P_INDCNT.
IF WK_I = 0.
PERFORM FRM_SHOW_INDICATOR USING WK_COUNT
'件目 2/3 レコードセット中'.
ENDIF.
ENDIF.


MOVE-CORRESPONDING <WK_FS> TO <WK_FS_TO>.

*   <WK_FS_TO>-MANDT = SY-MANDT.
APPEND <WK_FS_TO> TO <IT_FS_TO>.

ENDLOOP.

*
IF P_INDC = 'X'.
WK_COUNT = WK_COUNT + 1.
WK_I = WK_COUNT MOD P_INDCNT.
IF WK_I = 0.
PERFORM FRM_SHOW_INDICATOR USING WK_COUNT
'件目 2/3 レコードセット中'.
ENDIF.
ENDIF.

WRITE:/ 'データ読込件数', WK_COUNT, '件'.
MESSAGE S999(28) WITH 'データ読込件数' WK_COUNT '件'.

ENDFORM.                    " FRM_MOVE_DATA_ITAB
*&---------------------------------------------------------------------*
*&      Form  FRM_SCREEN_CTL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_SCREEN_CTL .

*  LOOP AT SCREEN.
** ローカルファイルの入力禁止
*    IF  SCREEN-NAME = 'P_FILELC'.
*      IF P_RD1 = 'X'.
*        SCREEN-INPUT = 0.
*      ELSE.
*        SCREEN-INPUT = 1.
*      ENDIF.
*      MODIFY SCREEN.
** サーバファイルの入力を禁止する。
*    ELSEIF SCREEN-NAME = 'P_FILESP'.
*      IF P_RD2 = 'X'.
*        SCREEN-INPUT = 0.
*      ELSE.
*        SCREEN-INPUT = 1.
*      ENDIF.
*      MODIFY SCREEN.
*    ENDIF.
*
*  ENDLOOP.

ENDFORM.                    " FRM_SCREEN_CTL
*&---------------------------------------------------------------------*
*&      Form  FRM_SET_PARAMTER_VAL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0166   text
*      -->P_0167   text
*----------------------------------------------------------------------*
FORM FRM_SET_PARAMTER_VAL  USING    ARG_KEY
ARG_TEXT.

VALUE-KEY =  ARG_KEY.
VALUE-TEXT = ARG_TEXT.
APPEND VALUE TO LIST.

ENDFORM.                    " FRM_SET_PARAMTER_VAL
*&---------------------------------------------------------------------*
*&      Form  FRM_LUPLOAD3
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_FILESP  text
*----------------------------------------------------------------------*
FORM FRM_LUPLOAD3  USING  ARG_FILE.

DATA WK_INNAME LIKE FILENAME-FILEINTERN.
DATA WK_INPUTFILE(100).

WK_INNAME = ARG_FILE.

CALL FUNCTION 'FILE_GET_NAME'
EXPORTING
LOGICAL_FILENAME = WK_INNAME
IMPORTING
FILE_NAME        = WK_INPUTFILE
EXCEPTIONS
FILE_NOT_FOUND   = 1
OTHERS           = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

DATA WK_OPENFILE(255).
CLEAR WK_COUNT.

CONCATENATE WK_INPUTFILE P_FILENM INTO WK_OPENFILE.

DATA LV_CODEPAGE TYPE  CPCODEPAGE.

CALL FUNCTION 'NLS_GET_FRONTEND_CP'
EXPORTING
LANGU                 = SY-LANGU
FETYPE                = 'MS'
IMPORTING
FRONTEND_CODEPAGE     = LV_CODEPAGE
EXCEPTIONS
ILLEGAL_SYST_CODEPAGE = 1
NO_FRONTEND_CP_FOUND  = 2
INTERNAL_OR_DB_ERROR  = 3
OTHERS                = 4.

*  OPEN DATASET LV_FILENAME FOR INPUT IN LEGACY TEXT MODE CODE PAGE LV_C

* Open the inputfile for reading in text mode
*  OPEN DATASET WK_OPENFILE FOR INPUT IN LEGACY TEXT MODE CODE PAGE LV_C

OPEN DATASET WK_OPENFILE FOR INPUT IN TEXT MODE ENCODING DEFAULT .
*  OPEN DATASET WK_OPENFILE FOR INPUT IN TEXT MODE ENCODING NON-UNICODE


IF SY-SUBRC NE 0.
EXIT.
MESSAGE E999(28) WITH WK_OPENFILE 'のオープンに失敗しましたリターンコード' SY-SUBRC .
ENDIF.

DATA WK_TEXT2(5000).
DATA WK_FIRST.

DO.
READ DATASET WK_OPENFILE INTO WK_TEXT2 . "LENGTH LENG.

IF SY-SUBRC <> 0.
EXIT.
ENDIF.

*   ヘッダ１行をスキップする。
IF P_HEAD = 'X' AND WK_FIRST IS INITIAL.
WK_FIRST = 'X'.
CONTINUE.
ENDIF.

** インジケータの表示
DATA WK_I TYPE I.

IF P_INDC = 'X'.
WK_COUNT = WK_COUNT + 1.
WK_I = WK_COUNT MOD P_INDCNT.
IF WK_I = 0.
PERFORM FRM_SHOW_INDICATOR USING WK_COUNT
'件 1/3 レコードインポート中'.
ENDIF.
ENDIF.

*  ファイル分割処理
PERFORM FRM_SPLIT_DATA USING WK_TEXT2.

*  金額の100分の1対応
PERFORM FRM_SET_DATA_SYNBOL .

*   内部テーブルへの値の格納
APPEND <WK_FS> TO <IT_FS>.

ENDDO.

CLOSE DATASET WK_OPENFILE.

ENDFORM.                    " FRM_LUPLOAD3
*&---------------------------------------------------------------------*
*&      Form  FRM_SET_DATA_SYNBOL
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WK_OPENFILE  text
*----------------------------------------------------------------------*
FORM FRM_SET_DATA_SYNBOL.

DATA: BEGIN OF WK_DD03L,
FIELDNAME LIKE DD03L-FIELDNAME,
POSITION  LIKE DD03L-POSITION,
COMPTYPE  LIKE DD03L-COMPTYPE,
DATATYPE  LIKE DD03L-DATATYPE,
END OF WK_DD03L,
IT_DD03L LIKE TABLE OF WK_DD03L.

SELECT * FROM DD03L INTO CORRESPONDING FIELDS OF TABLE IT_DD03L
WHERE TABNAME  = P_SQLTAB  " TABLE 名称
*  AND  COMPTYPE = 'E'   .   " データ構造
AND  COMPTYPE <> 'S'   .   " データ構造


SORT IT_DD03L BY POSITION ASCENDING.

DATA WK_LOOP_MAX LIKE SY-DBCNT. " 最大ループ
DATA WK_LOOP_CUR LIKE SY-DBCNT. " 現在ループ

* ループの最大回数をセットする。
WK_LOOP_MAX = SY-DBCNT.



* 項目渡し用のFS
FIELD-SYMBOLS: <WK_FIELD_FR> TYPE ANY.
FIELD-SYMBOLS: <WK_FIELD_TO> TYPE ANY.

* アサイン用のテキストフィールド
DATA WK_TEXTFIELD(30).

* カウンタ
DATA WK_COUNT(3) TYPE N.


*(項目の移動)

LOOP AT IT_DD03L INTO WK_DD03L.
*     値セット先フィールドの作成
CONCATENATE '<WK_FS>-' WK_DD03L-FIELDNAME INTO WK_TEXTFIELD.
ASSIGN (WK_TEXTFIELD) TO <WK_FIELD_TO>.

*     値セット元フィールドの作成
WK_COUNT = WK_COUNT + 1.
CONCATENATE 'WK_TAB-F' WK_COUNT INTO WK_TEXTFIELD.
ASSIGN (WK_TEXTFIELD) TO <WK_FIELD_FR>.

* 通貨型項目を100分の１に変換する
IF P_CURR = 'X' AND WK_DD03L-DATATYPE = 'CURR'.
<WK_FIELD_FR> = <WK_FIELD_FR> / 100.
ENDIF.

* 登録更新時刻の上書き
IF P_INFOCK = 'X' .
* 登録・更新日付
IF WK_DD03L-FIELDNAME = P_FN_IND OR
WK_DD03L-FIELDNAME = P_FN_UPD.
<WK_FIELD_FR> = P_INDATE.
ENDIF.
* 登録・更新時刻
IF WK_DD03L-FIELDNAME = P_FN_INT OR
WK_DD03L-FIELDNAME = P_FN_UPT.
<WK_FIELD_FR> = P_INTIME.
ENDIF.
* 登録・更新者
IF WK_DD03L-FIELDNAME = P_FN_INU  OR
WK_DD03L-FIELDNAME = P_FN_UPU.
<WK_FIELD_FR> = P_INUSER.
ENDIF.
ENDIF.

MOVE <WK_FIELD_FR> TO <WK_FIELD_TO>.

ENDLOOP.

ENDFORM.                    " FRM_SET_DATA_SYNBOL
*&---------------------------------------------------------------------*
*&      Form  FRM_SPLIT_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WK_TEXT2  text
*----------------------------------------------------------------------*
FORM FRM_SPLIT_DATA USING ARG_TEXT.

**
DATA G_DELIM TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.

* タブ区切り
DATA C_HEX TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.

IF P_MANDT = 'X'.
CONCATENATE SY-MANDT ARG_TEXT INTO ARG_TEXT SEPARATED BY C_HEX.
ENDIF.

* split 200  / shouled we prep, such a huge number of table objects?  ★★
*               just make sure.. ARG_TEXT >>>>>>>>>>> -- pp
SPLIT ARG_TEXT AT G_DELIM INTO
WK_TAB-F001	WK_TAB-F002	WK_TAB-F003	WK_TAB-F004	WK_TAB-F005	WK_TAB-F006	WK_TAB-F007	WK_TAB-F008	WK_TAB-F009	WK_TAB-F010
WK_TAB-F011	WK_TAB-F012	WK_TAB-F013	WK_TAB-F014	WK_TAB-F015	WK_TAB-F016	WK_TAB-F017	WK_TAB-F018	WK_TAB-F019	WK_TAB-F020
WK_TAB-F021	WK_TAB-F022	WK_TAB-F023	WK_TAB-F024	WK_TAB-F025	WK_TAB-F026	WK_TAB-F027	WK_TAB-F028	WK_TAB-F029	WK_TAB-F030
WK_TAB-F031	WK_TAB-F032	WK_TAB-F033	WK_TAB-F034	WK_TAB-F035	WK_TAB-F036	WK_TAB-F037	WK_TAB-F038	WK_TAB-F039	WK_TAB-F040
WK_TAB-F041	WK_TAB-F042	WK_TAB-F043	WK_TAB-F044	WK_TAB-F045	WK_TAB-F046	WK_TAB-F047	WK_TAB-F048	WK_TAB-F049	WK_TAB-F050
WK_TAB-F051	WK_TAB-F052	WK_TAB-F053	WK_TAB-F054	WK_TAB-F055	WK_TAB-F056	WK_TAB-F057	WK_TAB-F058	WK_TAB-F059	WK_TAB-F060
WK_TAB-F061	WK_TAB-F062	WK_TAB-F063	WK_TAB-F064	WK_TAB-F065	WK_TAB-F066	WK_TAB-F067	WK_TAB-F068	WK_TAB-F069	WK_TAB-F070
WK_TAB-F071	WK_TAB-F072	WK_TAB-F073	WK_TAB-F074	WK_TAB-F075	WK_TAB-F076	WK_TAB-F077	WK_TAB-F078	WK_TAB-F079	WK_TAB-F080
WK_TAB-F081	WK_TAB-F082	WK_TAB-F083	WK_TAB-F084	WK_TAB-F085	WK_TAB-F086	WK_TAB-F087	WK_TAB-F088	WK_TAB-F089	WK_TAB-F090
WK_TAB-F091	WK_TAB-F092	WK_TAB-F093	WK_TAB-F094	WK_TAB-F095	WK_TAB-F096	WK_TAB-F097	WK_TAB-F098	WK_TAB-F099	WK_TAB-F100
WK_TAB-F101	WK_TAB-F102	WK_TAB-F103	WK_TAB-F104	WK_TAB-F105	WK_TAB-F106	WK_TAB-F107	WK_TAB-F108	WK_TAB-F109	WK_TAB-F110
WK_TAB-F111	WK_TAB-F112	WK_TAB-F113	WK_TAB-F114	WK_TAB-F115	WK_TAB-F116	WK_TAB-F117	WK_TAB-F118	WK_TAB-F119	WK_TAB-F120
WK_TAB-F121	WK_TAB-F122	WK_TAB-F123	WK_TAB-F124	WK_TAB-F125	WK_TAB-F126	WK_TAB-F127	WK_TAB-F128	WK_TAB-F129	WK_TAB-F130
WK_TAB-F131	WK_TAB-F132	WK_TAB-F133	WK_TAB-F134	WK_TAB-F135	WK_TAB-F136	WK_TAB-F137	WK_TAB-F138	WK_TAB-F139	WK_TAB-F140
WK_TAB-F141	WK_TAB-F142	WK_TAB-F143	WK_TAB-F144	WK_TAB-F145	WK_TAB-F146	WK_TAB-F147	WK_TAB-F148	WK_TAB-F149	WK_TAB-F150
WK_TAB-F151	WK_TAB-F152	WK_TAB-F153	WK_TAB-F154	WK_TAB-F155	WK_TAB-F156	WK_TAB-F157	WK_TAB-F158	WK_TAB-F159	WK_TAB-F160
WK_TAB-F161	WK_TAB-F162	WK_TAB-F163	WK_TAB-F164	WK_TAB-F165	WK_TAB-F166	WK_TAB-F167	WK_TAB-F168	WK_TAB-F169	WK_TAB-F170
WK_TAB-F171	WK_TAB-F172	WK_TAB-F173	WK_TAB-F174	WK_TAB-F175	WK_TAB-F176	WK_TAB-F177	WK_TAB-F178	WK_TAB-F179	WK_TAB-F180
WK_TAB-F181	WK_TAB-F182	WK_TAB-F183	WK_TAB-F184	WK_TAB-F185	WK_TAB-F186	WK_TAB-F187	WK_TAB-F188	WK_TAB-F189	WK_TAB-F190
WK_TAB-F191	WK_TAB-F192	WK_TAB-F193	WK_TAB-F194	WK_TAB-F195	WK_TAB-F196	WK_TAB-F197	WK_TAB-F198	WK_TAB-F199	WK_TAB-F200
.

ENDFORM.                    " FRM_SPLIT_DATA
*&---------------------------------------------------------------------*
*&      Form  FRM_UPD_DATA_ITAB
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM FRM_UPD_DATA_ITAB .

* BAN ★★★★★★★★★★★★★★★★.

CHECK P_INFOCK IS NOT INITIAL.

*<WK_FS_TO>-ZTOROKUDATE = P_INDATE.
*<WK_FS_TO>-ZTOROKUTIME = P_INTIME.
*<WK_FS_TO>-ZTOROKUID   = P_INUSER.
*<WK_FS_TO>-ZKOSHINDATE = P_INDATE.
*<WK_FS_TO>-ZKOSHINTIME = P_INTIME.
*<WK_FS_TO>-ZKOSHINID   = P_INUSER.
*
*
*UPDATE <IT_FS_TO>.
*    SET ZTOROKUDATE
*        ZTOROKUTIME
*ZTOROKUID
*ZKOSHINDATE
*ZKOSHINTIME
*ZKOSHINID
*
*
*PARAMETERS : P_INDATE  TYPE ZSCA0001-ZTOROKUDATE.
*PARAMETERS : P_INTIME  TYPE ZSCA0001-ZTOROKUTIME.
*PARAMETERS : P_INUSER  TYPE ZSCA0001-ZTOROKUID.
*
ENDFORM.                    " FRM_UPD_DATA_ITAB
*&---------------------------------------------------------------------*
*&      Form  FRM_SHOW_INDICATOR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WK_COUNT  text
*----------------------------------------------------------------------*
FORM FRM_SHOW_INDICATOR  USING ARG_COUNT ARG_TEXT.

DATA: W_TEXT(20) TYPE C.
DATA: W_INDEX_N(8) TYPE N.

W_INDEX_N = ARG_COUNT.
CONCATENATE W_INDEX_N ARG_TEXT INTO W_TEXT.
CALL FUNCTION 'FI_PROGRESS_INDICATOR'
EXPORTING
PERCENTAGE = 0
TEXT       = W_TEXT.
* MESSAGECLASS = ' '
* MESSAGENUMBER = ' '
* MESSAGEPAR1 = ' '
* MESSAGEPAR2 = ' '
* MESSAGEPAR3 = ' '
* MESSAGEPAR4 = ' '

ENDFORM.                    " FRM_SHOW_INDICATOR
*&---------------------------------------------------------------------*
*&      Form  FRM_COMMIT_PART
*&---------------------------------------------------------------------*
FORM FRM_COMMIT_PART .

* P_COMCNT ☆コミット件数
DATA WK_COUNT TYPE I.
DATA WK_EXEC  TYPE I. "実行カウント数

* 更新テーブル名をセットする。
W_TABNAME = P_SQLTAB.

IF P_COMCNT IS INITIAL.
P_COMCNT = 50000.
ENDIF.

LOOP AT <IT_FS_TO> INTO <WK_FS_TO>.

* コミット単位になるまでCOMテーブルに値をセットする。
WK_COUNT = WK_COUNT + 1.
APPEND <WK_FS_TO> TO <IT_FS_COM>.

* コミット単位になったら、更新を行う。
IF WK_COUNT = P_COMCNT.
MODIFY (W_TABNAME) FROM TABLE <IT_FS_COM> .
* 実施件数をEXECに格納。
IF SY-SUBRC = 0.
WK_EXEC = WK_EXEC + SY-DBCNT.
COMMIT WORK.
WRITE:/ W_TABNAME, 'の更新:成功:', SY-DBCNT, '件'.
MESSAGE S999(28) WITH W_TABNAME 'の更新:成功:' SY-DBCNT '件'.
ELSE.
MESSAGE E999(28) WITH W_TABNAME 'の更新:失敗: リターンコード' SY-SUBRC .
ENDIF.
CLEAR WK_COUNT.
REFRESH <IT_FS_COM>.
ENDIF.
ENDLOOP.

* ☆ループ終了後に、WK_COUNT が0でない場合は、最後のコミットを行う。
IF WK_COUNT <> 0.
MODIFY (W_TABNAME) FROM TABLE <IT_FS_COM> .
* 実施件数をEXECに格納。
IF SY-SUBRC = 0.
WK_EXEC = WK_EXEC + SY-DBCNT.
COMMIT WORK.
WRITE:/ W_TABNAME, 'の更新:成功:', SY-DBCNT, '件'.
MESSAGE S999(28) WITH W_TABNAME 'の更新:成功:' SY-DBCNT '件'.
ENDIF.
ENDIF.

WRITE:/ W_TABNAME ,'の更新:完了　合計:', WK_EXEC, '件'.
MESSAGE S999(28) WITH W_TABNAME 'の更新:完了　合計:' WK_EXEC '件'.


ENDFORM.                    " FRM_COMMIT_PART
*&---------------------------------------------------------------------*
*&      Form  FRM_LUPLOAD4
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_FILELC  text
*----------------------------------------------------------------------*
FORM FRM_LUPLOAD4  USING    ARG_FILENM.

DATA:
LDF_FNM    TYPE STRING,             "ファイル名
LDF_LENGTH TYPE I,                  "ファイル長
LDF_MSGV1  TYPE SYMSGV.             "メッセージ変数

**--入力ファイル名の型を変更
LDF_FNM = ARG_FILENM.


***
DATA: BEGIN OF ITAB OCCURS 0,
REC(4000) TYPE C,
END OF ITAB.
DATA  WK_CSV LIKE ITAB.


CALL METHOD CL_GUI_FRONTEND_SERVICES=>GUI_UPLOAD
EXPORTING
FILENAME            = LDF_FNM
FILETYPE            = 'ASC'
HAS_FIELD_SEPARATOR = 'X'
CHANGING
DATA_TAB            = ITAB[]
EXCEPTIONS
OTHERS              = 17.
***

LOOP AT ITAB INTO WK_CSV.

*  ファイル分割処理
PERFORM FRM_SPLIT_CSV USING WK_CSV.

*    SPLIT ITAB-REC AT ',' INTO <WK_FS>.

*   動的に値をセットする
PERFORM FRM_SET_FIELDS_CSV USING WK_CSV.


*   内部テーブルへの値の格納
APPEND <WK_FS> TO <IT_FS>.


ENDLOOP.


ENDFORM.                    " FRM_LUPLOAD4
*&---------------------------------------------------------------------*
*&      Form  FRM_SPLIT_CSV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WK_CSV  text
*----------------------------------------------------------------------*
FORM FRM_SPLIT_CSV  USING ARG_TEXT.

DATA WK_SPACE(2000).

*ダブルコーテーションを削除
OVERLAY ARG_TEXT WITH WK_SPACE ONLY '"'.

*スペースの間詰め
CONDENSE ARG_TEXT NO-GAPS.

* クライアント付与
CONCATENATE SY-MANDT ARG_TEXT INTO ARG_TEXT SEPARATED BY ','.


SPLIT ARG_TEXT AT ',' INTO
WK_TAB-F001	WK_TAB-F002	WK_TAB-F003	WK_TAB-F004	WK_TAB-F005	WK_TAB-F006	WK_TAB-F007	WK_TAB-F008	WK_TAB-F009	WK_TAB-F010
WK_TAB-F011	WK_TAB-F012	WK_TAB-F013	WK_TAB-F014	WK_TAB-F015	WK_TAB-F016	WK_TAB-F017	WK_TAB-F018	WK_TAB-F019	WK_TAB-F020
WK_TAB-F021	WK_TAB-F022	WK_TAB-F023	WK_TAB-F024	WK_TAB-F025	WK_TAB-F026	WK_TAB-F027	WK_TAB-F028	WK_TAB-F029	WK_TAB-F030
WK_TAB-F031	WK_TAB-F032	WK_TAB-F033	WK_TAB-F034	WK_TAB-F035	WK_TAB-F036	WK_TAB-F037	WK_TAB-F038	WK_TAB-F039	WK_TAB-F040
WK_TAB-F041	WK_TAB-F042	WK_TAB-F043	WK_TAB-F044	WK_TAB-F045	WK_TAB-F046	WK_TAB-F047	WK_TAB-F048	WK_TAB-F049	WK_TAB-F050
WK_TAB-F051	WK_TAB-F052	WK_TAB-F053	WK_TAB-F054	WK_TAB-F055	WK_TAB-F056	WK_TAB-F057	WK_TAB-F058	WK_TAB-F059	WK_TAB-F060
WK_TAB-F061	WK_TAB-F062	WK_TAB-F063	WK_TAB-F064	WK_TAB-F065	WK_TAB-F066	WK_TAB-F067	WK_TAB-F068	WK_TAB-F069	WK_TAB-F070
WK_TAB-F071	WK_TAB-F072	WK_TAB-F073	WK_TAB-F074	WK_TAB-F075	WK_TAB-F076	WK_TAB-F077	WK_TAB-F078	WK_TAB-F079	WK_TAB-F080
WK_TAB-F081	WK_TAB-F082	WK_TAB-F083	WK_TAB-F084	WK_TAB-F085	WK_TAB-F086	WK_TAB-F087	WK_TAB-F088	WK_TAB-F089	WK_TAB-F090
WK_TAB-F091	WK_TAB-F092	WK_TAB-F093	WK_TAB-F094	WK_TAB-F095	WK_TAB-F096	WK_TAB-F097	WK_TAB-F098	WK_TAB-F099	WK_TAB-F100
WK_TAB-F101	WK_TAB-F102	WK_TAB-F103	WK_TAB-F104	WK_TAB-F105	WK_TAB-F106	WK_TAB-F107	WK_TAB-F108	WK_TAB-F109	WK_TAB-F110
WK_TAB-F111	WK_TAB-F112	WK_TAB-F113	WK_TAB-F114	WK_TAB-F115	WK_TAB-F116	WK_TAB-F117	WK_TAB-F118	WK_TAB-F119	WK_TAB-F120
WK_TAB-F121	WK_TAB-F122	WK_TAB-F123	WK_TAB-F124	WK_TAB-F125	WK_TAB-F126	WK_TAB-F127	WK_TAB-F128	WK_TAB-F129	WK_TAB-F130
WK_TAB-F131	WK_TAB-F132	WK_TAB-F133	WK_TAB-F134	WK_TAB-F135	WK_TAB-F136	WK_TAB-F137	WK_TAB-F138	WK_TAB-F139	WK_TAB-F140
WK_TAB-F141	WK_TAB-F142	WK_TAB-F143	WK_TAB-F144	WK_TAB-F145	WK_TAB-F146	WK_TAB-F147	WK_TAB-F148	WK_TAB-F149	WK_TAB-F150
WK_TAB-F151	WK_TAB-F152	WK_TAB-F153	WK_TAB-F154	WK_TAB-F155	WK_TAB-F156	WK_TAB-F157	WK_TAB-F158	WK_TAB-F159	WK_TAB-F160
WK_TAB-F161	WK_TAB-F162	WK_TAB-F163	WK_TAB-F164	WK_TAB-F165	WK_TAB-F166	WK_TAB-F167	WK_TAB-F168	WK_TAB-F169	WK_TAB-F170
WK_TAB-F171	WK_TAB-F172	WK_TAB-F173	WK_TAB-F174	WK_TAB-F175	WK_TAB-F176	WK_TAB-F177	WK_TAB-F178	WK_TAB-F179	WK_TAB-F180
WK_TAB-F181	WK_TAB-F182	WK_TAB-F183	WK_TAB-F184	WK_TAB-F185	WK_TAB-F186	WK_TAB-F187	WK_TAB-F188	WK_TAB-F189	WK_TAB-F190
WK_TAB-F191	WK_TAB-F192	WK_TAB-F193	WK_TAB-F194	WK_TAB-F195	WK_TAB-F196	WK_TAB-F197	WK_TAB-F198	WK_TAB-F199	WK_TAB-F200
.

ENDFORM.                    " FRM_SPLIT_CSV
*&---------------------------------------------------------------------*
*&      Form  FRM_SET_FIELDS_CSV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_WK_CSV  text
*----------------------------------------------------------------------*
FORM FRM_SET_FIELDS_CSV  USING ARG_CSV.

DATA: BEGIN OF WK_DD03L,
FIELDNAME LIKE DD03L-FIELDNAME,
POSITION  LIKE DD03L-POSITION,
COMPTYPE  LIKE DD03L-COMPTYPE,
DATATYPE  LIKE DD03L-DATATYPE,
END OF WK_DD03L,
IT_DD03L LIKE TABLE OF WK_DD03L.

SELECT * FROM DD03L INTO CORRESPONDING FIELDS OF TABLE IT_DD03L
WHERE TABNAME  = P_SQLTAB  " TABLE 名称
*  AND  COMPTYPE = 'E'   .   " データ構造
AND  COMPTYPE <> 'S'   .   " データ構造


SORT IT_DD03L BY POSITION ASCENDING.

DATA WK_LOOP_MAX LIKE SY-DBCNT. " 最大ループ
DATA WK_LOOP_CUR LIKE SY-DBCNT. " 現在ループ

* ループの最大回数をセットする。
WK_LOOP_MAX = SY-DBCNT.


* 項目渡し用のFS
FIELD-SYMBOLS: <WK_FIELD_FR> TYPE ANY.
FIELD-SYMBOLS: <WK_FIELD_TO> TYPE ANY.

* アサイン用のテキストフィールド
DATA WK_TEXTFIELD(30).

* カウンタ
DATA WK_COUNT(3) TYPE N.


*(項目の移動)

LOOP AT IT_DD03L INTO WK_DD03L.
*     値セット先フィールドの作成
CONCATENATE '<WK_FS>-' WK_DD03L-FIELDNAME INTO WK_TEXTFIELD.
ASSIGN (WK_TEXTFIELD) TO <WK_FIELD_TO>.

*     値セット元フィールドの作成
WK_COUNT = WK_COUNT + 1.
CONCATENATE 'WK_TAB-F' WK_COUNT INTO WK_TEXTFIELD.
ASSIGN (WK_TEXTFIELD) TO <WK_FIELD_FR>.

MOVE <WK_FIELD_FR> TO <WK_FIELD_TO>.

ENDLOOP.

ENDFORM.                    " FRM_SET_FIELDS_CSV
*&---------------------------------------------------------------------*
*&      Form  FRM_LUPLOAD5
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_P_FILESP  text
*----------------------------------------------------------------------*
FORM FRM_LUPLOAD5  USING  ARG_FILE.

DATA WK_INNAME LIKE FILENAME-FILEINTERN.
DATA WK_INPUTFILE(100).

WK_INNAME = ARG_FILE.

CALL FUNCTION 'FILE_GET_NAME'
EXPORTING
LOGICAL_FILENAME = WK_INNAME
IMPORTING
FILE_NAME        = WK_INPUTFILE
EXCEPTIONS
FILE_NOT_FOUND   = 1
OTHERS           = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

DATA WK_OPENFILE(255).
CLEAR WK_COUNT.

CONCATENATE WK_INPUTFILE P_FILENM INTO WK_OPENFILE.

DATA LV_CODEPAGE TYPE  CPCODEPAGE.

CALL FUNCTION 'NLS_GET_FRONTEND_CP'
EXPORTING
LANGU                 = SY-LANGU
FETYPE                = 'MS'
IMPORTING
FRONTEND_CODEPAGE     = LV_CODEPAGE
EXCEPTIONS
ILLEGAL_SYST_CODEPAGE = 1
NO_FRONTEND_CP_FOUND  = 2
INTERNAL_OR_DB_ERROR  = 3
OTHERS                = 4.

*  OPEN DATASET LV_FILENAME FOR INPUT IN LEGACY TEXT MODE CODE PAGE LV_C

* Open the inputfile for reading in text mode
*  OPEN DATASET WK_OPENFILE FOR INPUT IN LEGACY TEXT MODE CODE PAGE LV_C

*  OPEN DATASET WK_OPENFILE FOR INPUT IN TEXT MODE ENCODING DEFAULT .
OPEN DATASET WK_OPENFILE FOR INPUT IN TEXT MODE ENCODING NON-UNICODE.


IF SY-SUBRC NE 0.
EXIT.
MESSAGE E999(28) WITH WK_OPENFILE 'のオープンに失敗しましたリターンコード' SY-SUBRC .
ENDIF.

DATA WK_TEXT2(5000).
DATA WK_FIRST.

DO.
READ DATASET WK_OPENFILE INTO WK_TEXT2 . "LENGTH LENG.

IF SY-SUBRC <> 0.
EXIT.
ENDIF.

*   ヘッダ１行をスキップする。
IF P_HEAD = 'X' AND WK_FIRST IS INITIAL.
WK_FIRST = 'X'.
CONTINUE.
ENDIF.

** インジケータの表示
DATA WK_I TYPE I.

IF P_INDC = 'X'.
WK_COUNT = WK_COUNT + 1.
WK_I = WK_COUNT MOD P_INDCNT.
IF WK_I = 0.
PERFORM FRM_SHOW_INDICATOR USING WK_COUNT
'件 1/3 レコードインポート中'.
ENDIF.
ENDIF.

*  ファイル分割処理
*  PERFORM FRM_SPLIT_DATA USING WK_TEXT2.
*  ファイル分割処理
PERFORM FRM_SPLIT_CSV USING WK_TEXT2.

*  金額の100分の1対応
PERFORM FRM_SET_DATA_SYNBOL .

*   内部テーブルへの値の格納
APPEND <WK_FS> TO <IT_FS>.

ENDDO.

CLOSE DATASET WK_OPENFILE.


ENDFORM.                    " FRM_LUPLOAD5
