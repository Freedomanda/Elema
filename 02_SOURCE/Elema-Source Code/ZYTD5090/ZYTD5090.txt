*&---------------------------------------------------------------------*
*&[プログラム名]
*&  ZYTD5090   購買発注変更BDC
*&
*&[処理概要]
*&  購買発注変更BDCを行う。
*&
*&[改定履歴]
*& YYYY/MM/DD  Programar         Description
*& 2012/08/22  ISID              ES-UP
*&---------------------------------------------------------------------*
REPORT ZYTD5090
LINE-SIZE  170 LINE-COUNT 58
MESSAGE-ID Y1 .

TABLES : EKKO .

TYPES : BEGIN OF T_IN ,
EBELN LIKE EKKO-EBELN ,
EKGRP LIKE EKKO-EKGRP ,
END OF T_IN ,
BEGIN OF T_DP ,
EBELN LIKE EKKO-EBELN ,
MAE_EKGRP LIKE EKKO-EKGRP ,
ATO_EKGRP LIKE EKKO-EKGRP ,
RESULT(100) TYPE C ,
END OF T_DP .
* Add ES-UP 2012/08/22 -->
*-----------------------------------------------------------------------
*  固定値
*-----------------------------------------------------------------------
CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
* Add ES-UP 2012/08/22 <--

DATA : IN_WRK TYPE T_IN ,
IN_TAB TYPE TABLE OF T_IN ,
R3_WRK TYPE T_IN ,
R3_TAB TYPE TABLE OF T_IN ,
DP_WRK TYPE T_DP ,
DP_TAB TYPE TABLE OF T_DP ,
BDC_TAB TYPE TABLE OF BDCDATA WITH HEADER LINE ,
BDC_MSG TYPE TABLE OF BDCMSGCOLL WITH HEADER LINE .

DATA : W_FIRST(1) TYPE C ,
W_MODE(1) TYPE C VALUE 'N' .
* NDSC KURI ADD カウンター追加
DATA : W_COUNT1 TYPE I,
W_COUNT2 TYPE I,
W_COUNT3 TYPE I,
W_COUNT4 TYPE I.
* Del ES-UP 2012/08/22 -->
*CONSTANTS : W_TAB TYPE X VALUE '09' .
* Del ES-UP 2012/08/22 <--
SELECTION-SCREEN : BEGIN OF BLOCK 1 WITH FRAME TITLE TEXT-001.
PARAMETERS : IN_FILE(128) TYPE C OBLIGATORY.
SELECTION-SCREEN : END OF BLOCK 1.
PARAMETERS   P_TEST AS CHECKBOX .

START-OF-SELECTION .

PERFORM READ_FILE .
PERFORM DATA_GET .
PERFORM BDC_GOGO .
PERFORM WRITE_LIST .

*---------------------------------------------------------------------*
*       FORM Read_File                                                *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM READ_FILE .
DATA : IN_LINE(30) TYPE C .
* Add ES-UP 2012/08/22 -->
DATA L_CODEPAGE TYPE ABAP_ENCODING.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
* Add ES-UP 2012/08/22 <--
MOVE 'X' TO W_FIRST .
* Mod ES-UP 2012/08/22 -->
*  OPEN DATASET IN_FILE FOR INPUT IN TEXT MODE .
OPEN DATASET IN_FILE FOR INPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
* Mod ES-UP 2012/08/22 <--
IF SY-SUBRC NE  0 .
MESSAGE I209 .
STOP .
ENDIF .
DO .
READ DATASET IN_FILE INTO IN_LINE  .
IF SY-SUBRC NE 0 .
EXIT .
ENDIF .
SPLIT IN_LINE
* Mod ES-UP 2012/08/22 -->
*      AT  W_TAB
AT  CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
* Mod ES-UP 2012/08/22 <--
INTO IN_WRK-EBELN
IN_WRK-EKGRP
.
APPEND IN_WRK TO IN_TAB .
CLEAR : IN_WRK , W_FIRST .
ENDDO .
IF W_FIRST EQ  'X' .
MESSAGE I204 .
STOP .
ENDIF .
CLOSE DATASET IN_FILE .
* NDSC KURI ADD 2003/04/02 入力件数カウント
CLEAR : W_COUNT1 , W_COUNT2 , W_COUNT3 , W_COUNT4.
DESCRIBE TABLE IN_TAB LINES W_COUNT4.

ENDFORM .
*---------------------------------------------------------------------*
*       FORM Data_Get                                                 *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM DATA_GET .
SELECT EBELN EKGRP
FROM EKKO
INTO CORRESPONDING FIELDS OF TABLE R3_TAB
FOR ALL ENTRIES IN IN_TAB
WHERE EBELN EQ IN_TAB-EBELN
.
IF SY-SUBRC NE 0 .
MESSAGE I008 .
STOP .
ENDIF .
ENDFORM .
*---------------------------------------------------------------------*
*       FORM BDC_GoGo                                                 *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM BDC_GOGO .
DATA : W_FNAM LIKE BDCDATA-FNAM ,
W_FNAM2 LIKE BDCDATA-FNAM ,
NAST_COUNT(2) TYPE N .

SORT : IN_TAB BY EBELN  ,
R3_TAB BY EBELN  .
LOOP AT IN_TAB INTO IN_WRK .
MOVE : IN_WRK-EBELN TO DP_WRK-EBELN .
READ TABLE R3_TAB INTO R3_WRK WITH KEY EBELN = IN_WRK-EBELN .
IF SY-SUBRC NE 0 .
* Ｒ/３に処理対象データが存在しない場合
MOVE '対象データがありません' TO DP_WRK-RESULT .
ELSE .
* Ｒ/３に処理対象データが存在した場合
MOVE : R3_WRK-EKGRP TO DP_WRK-MAE_EKGRP ,
IN_WRK-EKGRP TO DP_WRK-ATO_EKGRP .
CONCATENATE :DP_WRK-MAE_EKGRP
'→'
DP_WRK-ATO_EKGRP
INTO  DP_WRK-RESULT
SEPARATED BY ' '  .
PERFORM SET_BDC USING : 'SAPMM06E' '0105'  'X' ,
'BDC_CURSOR' 'RM06E-BSTNR' '' ,
'BDC_OKCODE' '/00' '' ,
'RM06E-BSTNR' IN_WRK-EBELN '' ,
'SAPMM06E' '0120' 'X' ,
'BDC_CURSOR' 'RM06E-EBELP' '' ,
'BDC_OKCODE' '=KOPF' '' ,
'SAPMM06E' '0101' 'X' ,
'BDC_CURSOR' 'EKKO-EKGRP' '' ,
* ↓保存
*                               'EKKO-EKGRP' IN_WRK-EKGRP '' ,
*                    'BDC_OKCODE' '=BU' '' .
* ↑保存
*↓出力登録編
'BDC_OKCODE' '=DR' '' ,
'EKKO-EKGRP' IN_WRK-EKGRP '' ,
'SAPDV70A' '0100' 'X' .
SELECT COUNT( * ) FROM NAST
INTO NAST_COUNT
WHERE KAPPL EQ 'EF'
AND  OBJKY EQ IN_WRK-EBELN
.
ADD 1 TO NAST_COUNT .
CONCATENATE : 'DNAST-KSCHL('
NAST_COUNT
')'
INTO W_FNAM ,
'NAST-NACHA('
NAST_COUNT
')'
INTO W_FNAM2
.
CLEAR : NAST_COUNT .
PERFORM SET_BDC USING : W_FNAM  'ZMXX' '' ,
W_FNAM2 '9' '' ,
'BDC_OKCODE' '/00' '' ,
'SAPDV70A' '0100' 'X' ,
'BDC_CURSOR' 'DV70A-BTEXT' '' ,
'BDC_OKCODE' '=V70S' '' .

*↑出力登録編
*


*                               'SAPMM06E' '0120' 'X' ,
*                               'BDC_CURSOR' 'RM06E-EBELP' '' ,
*                               'BDC_OKCODE' '=BU' '' ,
** 出力タイプが無い場合↓
*                               'SAPLSPO1' '0300' 'X' ,
*                               'BDC_OKCODE' 'YES' '' ,
*                               'SAPMM06E' '0120' 'X' ,
*                               'BDC_CURSOR' 'RM06E-EBELP' '' ,
*                               'BDC_OKCODE' '=BU' '' ,
*                               'SAPLSPO1' '0300' 'X' ,
*                               'BDC_OKCODE' 'YES' '' .
*                               'SAPLSPO1' '0100' 'X' ,
*                               'BDC_OKCODE' 'YES' '' ,
*                               'SAPLSPO1' '0300' 'X' ,
*                               'BDC_OKCODE' 'YES' '' .
IF P_TEST NE 'X' .
PERFORM CALL_TRAN USING 'ME22' .
ENDIF .
ENDIF .
APPEND DP_WRK TO DP_TAB .
CLEAR :  DP_WRK , R3_WRK , IN_WRK  , W_FNAM , W_FNAM2 .
ENDLOOP .
ENDFORM .

*---------------------------------------------------------------------*
*       FORM Write_List                                               *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM WRITE_LIST .
LOOP AT DP_TAB INTO DP_WRK .
WRITE AT : /01 DP_WRK-EBELN ,
20 DP_WRK-RESULT .
CLEAR : DP_WRK .
ENDLOOP .

* NDSC KURI ADD 処理結果出力
SKIP.
WRITE  : /01 'ファイル読込件数' , 20 W_COUNT4,
/01 'BDC実行件数' , 20 W_COUNT1,
/01 'BDC変更件数' , 20 W_COUNT2,
/01 'BDCエラー件数' , 20 W_COUNT3.
MESSAGE S401 WITH '変更対象データ件数' W_COUNT4.
MESSAGE S401 WITH 'BDC実行件数' W_COUNT1.
MESSAGE S401 WITH 'BDC変更件数' W_COUNT2.
MESSAGE S401 WITH 'BDCエラー件数' W_COUNT3.

ENDFORM .
*---------------------------------------------------------------------*
*       FORM Set_BDC                                                  *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  P_DAT                                                         *
*  -->  P_VAL                                                         *
*  -->  P_FLG                                                         *
*---------------------------------------------------------------------*
FORM SET_BDC USING P_DAT P_VAL P_FLG .
MOVE : P_FLG TO BDC_TAB-DYNBEGIN .
IF P_FLG EQ 'X' .
MOVE : P_DAT TO BDC_TAB-PROGRAM ,
P_VAL TO BDC_TAB-DYNPRO .
ELSE .
MOVE : P_DAT TO BDC_TAB-FNAM ,
P_VAL TO BDC_TAB-FVAL .
ENDIF .
APPEND : BDC_TAB .
CLEAR : BDC_TAB .
ENDFORM .
*---------------------------------------------------------------------*
*       FORM Call_Tran                                                *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  P_TRCD                                                        *
*---------------------------------------------------------------------*
FORM CALL_TRAN USING P_TRCD .
DATA : W_MSG LIKE MESSAGE ,
W_MSGNO LIKE SY-MSGNO .

CALL TRANSACTION P_TRCD
USING   BDC_TAB
MODE    W_MODE
MESSAGES INTO    BDC_MSG.
* NDSC KURI ADD 処理結果カウンター追加
ADD 1 TO W_COUNT1.    " BDC 実行カウント
IF SY-SUBRC = 0.
ADD 1 TO W_COUNT2. " ＯＫカウント
ELSE.
ADD 1 TO W_COUNT3. " エラーカウント
MESSAGE S401 WITH '購買発注番号：' IN_WRK-EBELN.
WRITE : '購買発注番号：' , IN_WRK-EBELN.
LOOP AT BDC_MSG .
MOVE : BDC_MSG-MSGNR TO W_MSGNO .
CALL FUNCTION 'WRITE_MESSAGE'
EXPORTING
MSGID         = BDC_MSG-MSGID
MSGNO         = W_MSGNO
MSGTY         = BDC_MSG-MSGTYP
MSGV1         = BDC_MSG-MSGV1
MSGV2         = BDC_MSG-MSGV2
MSGV3         = BDC_MSG-MSGV3
MSGV4         = BDC_MSG-MSGV4
*       MSGV5         = BDC_MSG-MSGV5
IMPORTING
*       ERROR         =
MESSG         = W_MSG
*       MSGLN         =
.
MESSAGE ID BDC_MSG-MSGID
TYPE 'S'
NUMBER W_MSGNO
WITH BDC_MSG-MSGV1
BDC_MSG-MSGV2
BDC_MSG-MSGV3
BDC_MSG-MSGV4.
*      WRITE W_MSG-MSGTX.
* MESSAGE 出力方法変更
*      MOVE W_MSG-MSGTX TO DP_WRK-RESULT .
WRITE W_MSG-MSGTX.
ENDLOOP .
ENDIF.

REFRESH : BDC_TAB , BDC_MSG .

ENDFORM .
