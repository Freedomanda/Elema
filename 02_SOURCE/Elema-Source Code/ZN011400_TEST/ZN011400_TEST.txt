*&---------------------------------------------------------------------*
*&  REPORT ZN011400                                                    *
*&         入金予定入力（売上）                                        *
*&---------------------------------------------------------------------*
*&  機能     : 入金予定の入力を行う
*&
*&  作成日   : 2012/02/07
*&  作成者   : S.TAKIKAWA(solfis)
*&---------------------------------------------------------------------*
*&  変更履歴 : 2012/03/05 K.KAJISA(SOLFIS)
*&  変更内容 : QA177〜181対応
*&---------------------------------------------------------------------*
*&  変更履歴 : 2012/03/26 K.KAJISA(SOLFIS)
*&  変更内容 : QA154対応,QA187対応
*&---------------------------------------------------------------------*
*&  変更履歴 : 2012/03/27 K.KAJISA(SOLFIS)
*&  変更内容 : インデックス対応
*&---------------------------------------------------------------------*
*&  変更履歴 : 2012/04/04 K.FURUYA(SOLFIS)
*&  変更内容 : 入力可能明細数を10⇒99に変更
*&---------------------------------------------------------------------*
*&  変更履歴 : 2012/04/09 K.KAJISA(SOLFIS)
*&  変更内容 : 入金予定がない場合に初期提案を行う
*&---------------------------------------------------------------------*
*&  変更履歴 : 2012/05/09 K.KAJISA(SOLFIS)
*&  変更内容 : オーバーフロー対策
*&---------------------------------------------------------------------*
*&  変更履歴 : 2012/05/30 K.FURUYA(SOLFIS)
*&  変更内容 : 入金条件メモを表示
*&---------------------------------------------------------------------*

REPORT ZN011400
NO STANDARD PAGE HEADING
LINE-SIZE  170
LINE-COUNT 58
MESSAGE-ID YN01.
*----------------------------------------------------------------------*
*   構造/テーブル定義
*----------------------------------------------------------------------*
* 入金予定データ取得用
TYPES:T_TYP_ZN005   TYPE STANDARD TABLE OF ZN005.
* 外部データ(売上)対象データ取得
TYPES:BEGIN OF TYP_YN110,
GJAHR     TYPE YNOUTGJAHR,    "外部会計年度
SLPDOC    TYPE YNOUTDOC,      "外部番号
DTLDOC    TYPE YNOUTDTLDOC,   "外部明細番号
KNETXAMT  TYPE YNETXAMT,      "税込金額
END   OF TYP_YN110,
T_TYP_YN110   TYPE STANDARD TABLE OF TYP_YN110.
* 画面9000:テーブルコントロール用
TYPES:BEGIN OF TYP_MEISAI,
CEL       TYPE CHAR1,         "行選択ボタン
IZFBDT    TYPE ZNEIZFBDT,     "入金予定日
IWRBTR    TYPE ZNEIWRBTR,     "入金金額
KESSAI    TYPE CHAR2,         "決済
SOUSAI    TYPE CHAR1,         "相殺(チェックボックス)
ILIFNR    TYPE ZNEILIFNR,     "相殺仕入先
IMEMO     TYPE ZNEMEMO,       "備考(コメント)
IZLSCH    TYPE ZNEIZLSCH,     "支払方法【非表示】
INSDT     TYPE ZNEINSDAT,     "登録日【非表示】
INSTM     TYPE ZNEINSTIM,     "登録時刻【非表示】
INSUSR    TYPE ZNEINSUSR,     "登録ユーザ【非表示】
IKUNNR    TYPE ZNEIKUNNR,     "入金先【非表示】
AUFLG     TYPE ZNEAUFLG,      "入金消込【非表示】
AUDAT     TYPE ZNEAUDAT,      "入金消込日【非表示】
AUTIM     TYPE ZNEAUTIM,      "入金消込時刻【非表示】
AUUSR     TYPE ZNEAUUSR,      "入金消込ユーザ【非表示】
IBELNER   TYPE ZNEIBELNER,    "決済伝票番号【非表示】
IGJAHR    TYPE ZNEIGJAHR,     "決済会計年度【非表示】
IBUDAT    TYPE ZNEIBUDAT,     "決済転記日【非表示】
END   OF TYP_MEISAI,
*    テーブルデータ型
T_TYP_MEISAI   TYPE STANDARD TABLE OF TYP_MEISAI.
*----------------------------------------------------------------------*
*   内部テーブル定義
*----------------------------------------------------------------------*
DATA:
T_ZN005        TYPE T_TYP_ZN005,    "入金予定データ取得用
W_ZN005        TYPE ZN005,
T_MEISAI       TYPE T_TYP_MEISAI,   "画面9000:テーブルコントロール
W_MEISAI       TYPE TYP_MEISAI.

* 2012/03/23 ADD START
DATA:
T_ZN008        TYPE STANDARD TABLE OF ZN008, "規定外マスタ(売上)
W_ZN008        TYPE ZN008.
* 2012/03/23 ADD END

*----------------------------------------------------------------------*
*   変数定義
*----------------------------------------------------------------------*
DATA:
W_ERR_FLG      TYPE CHAR1,               "エラーフラグ
W_SAVE_ERR     TYPE CHAR1,               "保存時チェックエラーフラグ
W_ANSWER       TYPE CHAR1,               "POPUP 回答
W_CHANGE_SOUSAI_FLG TYPE CHAR1,          "相殺変更フラグ
G_KUNN2        TYPE KUNNR,               "入金先
* 画面9000用項目
G_BUKRS        TYPE BUKRS,               "会社コード
G_KUNNR        TYPE KUNNR,               "仕入先コード
G_NAME1        TYPE NAME1,               "仕入先名
G_CZFBDT       TYPE ZNECZFBDT,           "照合締日
G_WAERS        TYPE WAERS,               "通貨コード
G_MEMO(50)     TYPE C,                   "入金条件メモ　"2012/05/30
G_YN110_SUM    TYPE YNETXAMT,            "照合金額
G_ZUMI_SUM     TYPE YNETXAMT,            "支払済金額
* 2012/05/09 QA321 MOD START
*  G_MEISAI_SUM   TYPE YNETXAMT,            "明細合計
G_MEISAI_SUM(10) TYPE P DECIMALS 2,
*  2012/05/09 QA321 MOD END
G_FIELDNAME    TYPE CHAR50,              "エラー項目名
G_LINE         TYPE I.                   "行カウンタ

* 2012/03/23 ADD START
DATA:
G_ZTERM        TYPE KNVV-ZTERM.          "支払条件（日付用）
* 2012/03/23 ADD END
**2012/03/26 ADD START QA-187
** 外部データ 存在判定
*DATA:G_OK_FLG(1) TYPE C.
**2012/03/26 ADD END   QA-187

*2012/04/09 ADD START QA-266
* 外部データ 存在判定
DATA:G_INIT_DATA(1) TYPE C.
*2012/04/09 ADD END   QA-266


*----------------------------------------------------------------------*
*   定数定義
*----------------------------------------------------------------------*
CONSTANTS:
C_ON         TYPE C VALUE 'X',
C_LOCK_MODE  TYPE ENQMODE VALUE 'E',
* POPUP押しボタン
C_ANSWER_OK  TYPE CHAR1 VALUE '1',
C_ANSWER_NG  TYPE CHAR1 VALUE '2',
* SCREEN属性
C_SCREEN_ON  TYPE CHAR1 VALUE '1',
C_SCREEN_OFF TYPE CHAR1 VALUE '0',
* 支払条件
C_OFFSET     TYPE ZNEPZLSCH VALUE 'S'.  "相殺

*----------------------------------------------------------------------*
*   選択画面
*----------------------------------------------------------------------*
* データ選択
SELECTION-SCREEN:BEGIN OF BLOCK BL1 WITH FRAME TITLE TEXT-001.
PARAMETERS:P_BUK    TYPE BUKRS OBLIGATORY          "会社コード
MEMORY ID BUK.
PARAMETERS:P_KUN    TYPE KUNNR OBLIGATORY.         "得意先コード(支払)
PARAMETERS:P_DAY    TYPE ZNECZFBDT.                "締日
SELECTION-SCREEN:END   OF BLOCK BL1.
* システム項目
SELECTION-SCREEN:BEGIN OF BLOCK BL2 WITH FRAME TITLE TEXT-002.
*  2012/03/05 DEL START
* 取引先機能削除
*  PARAMETERS:P_PAR    TYPE KNVP-PARVW OBLIGATORY.    "取引先機能
*  2012/03/05 DEL END
PARAMETERS:P_VKO    TYPE VKORG OBLIGATORY.         "販売組織
PARAMETERS:P_VTW    TYPE VTWEG OBLIGATORY.         "流通チャネル
PARAMETERS:P_SPA    TYPE SPART OBLIGATORY.         "製品部門
SELECTION-SCREEN:END   OF BLOCK BL2.

*----------------------------------------------------------------------*
*  INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
*----------------------------------------------------------------------*
*  AT SELECTION-SCREEN
*----------------------------------------------------------------------*
AT SELECTION-SCREEN.
PERFORM F_DATA_CHECK.
*----------------------------------------------------------------------*
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

* 初期処理
PERFORM INT_SEC.
* 主処理
PERFORM MAIN_SEC.
**2012/03/26 ADD START QA-187
*  IF G_OK_FLG <> C_ON.
**   照合締日 & では、照合されていません
*    MESSAGE S937 WITH P_DAY.
*    EXIT.
*  ENDIF.
**2012/03/26 ADD END   QA-187
CHECK W_ERR_FLG = SPACE.
* 次画面へ
CALL SCREEN 9000.

*&---------------------------------------------------------------------*
*&      Form  F_DATA_CHECK
*&---------------------------------------------------------------------*
*       データチェック
*----------------------------------------------------------------------*
FORM F_DATA_CHECK.
DATA:LW_BUKRS   TYPE BUKRS,      "会社コード存在チェック用
LW_EDATE   TYPE ZNEEDATE,   "照合締日チェック用
LW_ZFBDT   TYPE ZFBDT,      "初期値提案用
LW_MESSAGE TYPE CHAR10.

* 会社コード入力値チェック
SELECT SINGLE BUKRS
INTO LW_BUKRS
FROM T001
WHERE BUKRS = P_BUK.
IF SY-SUBRC <> 0.
MESSAGE E750 WITH P_BUK.
ENDIF.
* 2012/03/23 ADD START
CLEAR:G_NAME1,G_ZTERM,G_WAERS.
* 2012/03/23 ADD END
* 得意先(支払)入力値チェック
SELECT SINGLE
KNA1~NAME1
* 2012/03/23 ADD START
KNVV~ZTERM
* 2012/03/23 ADD END
KNVV~WAERS
INTO (G_NAME1,
* 2012/03/23 ADD START
G_ZTERM,
* 2012/03/23 ADD END
G_WAERS)
FROM KNA1 INNER JOIN KNVV
ON KNA1~KUNNR = KNVV~KUNNR
WHERE KNA1~KUNNR = P_KUN
AND KNVV~VKORG = P_VKO
AND KNVV~VTWEG = P_VTW
AND KNVV~SPART = P_SPA.

IF SY-SUBRC <> 0.
MESSAGE E752 WITH P_KUN.
ENDIF.

* 締日の日付チェック
IF NOT  P_DAY IS INITIAL.
CALL FUNCTION 'YK_ZFBDT_GET_BY_KNVV'
EXPORTING
I_CORD               = P_KUN
I_VKORG              = P_VKO
I_VTWEG              = P_VTW
I_SPART              = P_SPA
I_DAY                = P_DAY
IMPORTING
E_ZFBDT              = LW_ZFBDT
EXCEPTIONS
NO_GET_T052          = 1
NO_GOOD_GETDAY       = 2
NO_GET_ZTERM         = 3
OTHERS               = 4.
IF SY-SUBRC = 0.
IF LW_ZFBDT <> P_DAY.
* 2012/03/05 MOD START
*-- エラーメッセージ変更
*        WRITE LW_ZFBDT TO LW_MESSAGE.
*        MESSAGE E000 WITH TEXT-E05
*                          LW_MESSAGE
*                          TEXT-E06.
*     入力された締日が、適切ではありません。
MESSAGE E913.
* 2012/03/05 MOD END
ENDIF.
ENDIF.

ENDIF.

* 締日の初期値提案
IF P_DAY IS INITIAL.
CALL FUNCTION 'YK_ZFBDT_GET_BY_KNVV'
EXPORTING
I_CORD               = P_KUN
I_VKORG              = P_VKO
I_VTWEG              = P_VTW
I_SPART              = P_SPA
I_DAY                = SY-DATUM
IMPORTING
E_ZFBDT_OLD          = LW_ZFBDT
EXCEPTIONS
NO_GET_T052          = 1
NO_GOOD_GETDAY       = 2
NO_GET_ZTERM         = 3
OTHERS               = 4.

IF SY-SUBRC <> 0.
CLEAR:LW_ZFBDT.
ENDIF.
P_DAY = LW_ZFBDT.
ENDIF.

ENDFORM.                    " F_DATA_CHECK
*&---------------------------------------------------------------------*
*&      Form  int_sec
*&---------------------------------------------------------------------*
*       初期化処理
*----------------------------------------------------------------------*
FORM INT_SEC.
CLEAR:W_ERR_FLG, G_BUKRS, G_KUNNR, G_CZFBDT,
G_YN110_SUM, G_ZUMI_SUM, G_KUNN2.
CLEAR:T_ZN005.

*2012/04/09 ADD START QA-266
* 外部データ 存在判定
CLEAR:G_INIT_DATA.
*2012/04/09 ADD END   QA-266

ENDFORM.                    " int_sec
*&---------------------------------------------------------------------*
*&      Form  main_sec
*&---------------------------------------------------------------------*
*       主処理
*----------------------------------------------------------------------*
FORM MAIN_SEC.

* 2012/03/05 DEL START
*-- 不要処理の削除
** 必須チェック
*  IF P_DAY IS INITIAL.
*    MESSAGE I901 WITH TEXT-011.
*    W_ERR_FLG = C_ON.
*    EXIT.
*  ENDIF.
* 2012/03/05 DEL END

* ロック処理
PERFORM LOCK_PROC.
CHECK W_ERR_FLG = SPACE.
* 入金予定データ取得
PERFORM GET_ZN005.
* 照合金額(YN110)取得
PERFORM GET_YN110.
**2012/03/26 ADD START QA-187
*  CHECK G_OK_FLG = C_ON.
**2012/03/26 ADD END   QA-187
* 入金先の取得
PERFORM GET_KNVP.
* 2012/03/23 ADD START
* 初期提案
PERFORM SET_DAFAULT_REC.
* 2012/03/23 ADD END
* その他画面項目の設定
PERFORM MAKE_DYNPRO_9000.

ENDFORM.                    " main_sec
*&---------------------------------------------------------------------*
*&      画面9000テーブルコントロール制御
*&---------------------------------------------------------------------*
* DECLARATION OF TABLECONTROL 'TCL_MEISAI' ITSELF
CONTROLS: TCL_MEISAI TYPE TABLEVIEW USING SCREEN 9000.

* LINES OF TABLECONTROL 'TCL_MEISAI'
DATA:     G_TCL_MEISAI_LINES  LIKE SY-LOOPC.

DATA:     OK_CODE LIKE SY-UCOMM.

* OUTPUT MODULE FOR TABLECONTROL 'TCL_MEISAI':
* GET LINES OF TABLECONTROL
MODULE TCL_MEISAI_GET_LINES OUTPUT.
G_TCL_MEISAI_LINES = SY-LOOPC.
* 画面属性変更
PERFORM SCREEN_INIT_TYPE.
ENDMODULE.

* INPUT MODULE FOR TABLECONTROL 'TCL_MEISAI': MODIFY TABLE
MODULE TCL_MEISAI_MODIFY INPUT.
* 必須チェック
IF W_MEISAI-KESSAI = TEXT-005.      "未のデータのみチェック
PERFORM MEISAI_HISSU USING W_MEISAI.
ENDIF.
* 相殺チェックボックスの値変更による、値クリア
IF  W_CHANGE_SOUSAI_FLG = C_ON
AND W_MEISAI-SOUSAI = SPACE.
W_MEISAI-ILIFNR = SPACE.
ENDIF.
* 正常の場合は画面項目を内部テーブルに更新
MODIFY T_MEISAI
FROM W_MEISAI
INDEX TCL_MEISAI-CURRENT_LINE.

ENDMODULE.

* INPUT MODULE FOR TABLECONTROL 'TCL_MEISAI': MARK TABLE
MODULE TCL_MEISAI_MARK INPUT.
MODIFY T_MEISAI
FROM W_MEISAI
INDEX TCL_MEISAI-CURRENT_LINE
TRANSPORTING CEL.
ENDMODULE.

* INPUT MODULE FOR TABLECONTROL 'TCL_MEISAI': PROCESS USER COMMAND
MODULE TCL_MEISAI_USER_COMMAND INPUT.
PERFORM USER_OK_TC USING    'TCL_MEISAI'
'T_MEISAI'
'CEL'
CHANGING OK_CODE.
ENDMODULE.

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  USER_OK_TC                                               *
*&---------------------------------------------------------------------*
FORM USER_OK_TC USING    P_TC_NAME TYPE DYNFNAM
P_TABLE_NAME
P_MARK_NAME
CHANGING P_OK      LIKE SY-UCOMM.

*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA: L_OK              TYPE SY-UCOMM,
L_OFFSET          TYPE I.
*-END OF LOCAL DATA----------------------------------------------------*

* Table control specific operations                                    *
*   evaluate TC name and operations                                    *
SEARCH P_OK FOR P_TC_NAME.
IF SY-SUBRC <> 0.
EXIT.
ENDIF.
L_OFFSET = STRLEN( P_TC_NAME ) + 1.
L_OK = P_OK+L_OFFSET.
* execute general and TC specific operations                           *
CASE L_OK.
WHEN 'INSR'.                      "insert row
PERFORM FCODE_INSERT_ROW USING    P_TC_NAME
P_TABLE_NAME.
CLEAR P_OK.

WHEN 'DELE'.                      "delete row
PERFORM FCODE_DELETE_ROW USING    P_TC_NAME
P_TABLE_NAME
P_MARK_NAME.
CLEAR P_OK.

WHEN 'P--' OR                     "top of list
'P-'  OR                     "previous page
'P+'  OR                     "next page
'P++'.                       "bottom of list
PERFORM COMPUTE_SCROLLING_IN_TC USING P_TC_NAME
L_OK.
CLEAR P_OK.
*     WHEN 'L--'.                       "total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN 'L-'.                        "column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN 'R+'.                        "column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN 'R++'.                       "total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
WHEN 'MARK'.                      "mark all filled lines
PERFORM FCODE_TC_MARK_LINES USING P_TC_NAME
P_TABLE_NAME
P_MARK_NAME   .
CLEAR P_OK.

WHEN 'DMRK'.                      "demark all filled lines
PERFORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
P_TABLE_NAME
P_MARK_NAME .
CLEAR P_OK.

*     WHEN 'SASCEND'   OR
*          'SDESCEND'.                  "sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

ENDCASE.

ENDFORM.                              " USER_OK_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_INSERT_ROW                                         *
*&---------------------------------------------------------------------*
FORM FCODE_INSERT_ROW
USING    P_TC_NAME           TYPE DYNFNAM
P_TABLE_NAME             .

*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA L_LINES_NAME       LIKE FELD-NAME.
DATA L_SELLINE          LIKE SY-STEPL.
DATA L_LASTLINE         TYPE I.
DATA L_LINE             TYPE I.
DATA L_TABLE_NAME       LIKE FELD-NAME.
FIELD-SYMBOLS <TC>                 TYPE CXTAB_CONTROL.
FIELD-SYMBOLS <TABLE>              TYPE STANDARD TABLE.
FIELD-SYMBOLS <LINES>              TYPE I.
*-END OF LOCAL DATA----------------------------------------------------*

DATA:LW_LINE     TYPE I,            "行数チェック用
LW_MEISAI   TYPE TYP_MEISAI.   "初期値データ

ASSIGN (P_TC_NAME) TO <TC>.

* get the table, which belongs to the tc                               *
CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*----- 行数チェック
DESCRIBE TABLE <TABLE> LINES LW_LINE.
*2012/04/04 MOD START
*  IF LW_LINE >= 10.
IF LW_LINE >= 99.
*2012/04/04 MOD END
CLEAR:OK_CODE.
MESSAGE I000 WITH TEXT-E01.
EXIT.
ENDIF.

* get looplines of TableControl
CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_LINES_NAME.
ASSIGN (L_LINES_NAME) TO <LINES>.

* get current line
GET CURSOR LINE L_SELLINE.
IF SY-SUBRC <> 0.                   " append line to table
L_SELLINE = <TC>-LINES + 1.
*   set top line and new cursor line                                   *
IF L_SELLINE > <LINES>.
<TC>-TOP_LINE = L_SELLINE - <LINES> + 1 .
L_LINE = 1.
ELSE.
<TC>-TOP_LINE = 1.
L_LINE = L_SELLINE.
ENDIF.
ELSE.                               " insert line into table
L_SELLINE = <TC>-TOP_LINE + L_SELLINE - 1.
*   set top line and new cursor line                                   *
L_LASTLINE = L_SELLINE + <LINES> - 1.
IF L_LASTLINE <= <TC>-LINES.
<TC>-TOP_LINE = L_SELLINE.
L_LINE = 1.
ELSEIF <LINES> > <TC>-LINES.
<TC>-TOP_LINE = 1.
L_LINE = L_SELLINE.
ELSE.
<TC>-TOP_LINE = <TC>-LINES - <LINES> + 2 .
L_LINE = L_SELLINE - <TC>-TOP_LINE + 1.
ENDIF.
ENDIF.
* insert initial line
LW_MEISAI-KESSAI = TEXT-005.        "未
LW_MEISAI-IKUNNR = G_KUNN2.         "入金先
INSERT LW_MEISAI INTO <TABLE> INDEX L_SELLINE. "初期値データを追加
<TC>-LINES = <TC>-LINES + 1.
* set cursor
SET CURSOR LINE L_LINE.

ENDFORM.                              " FCODE_INSERT_ROW

*&---------------------------------------------------------------------*
*&      Form  FCODE_DELETE_ROW                                         *
*&---------------------------------------------------------------------*
FORM FCODE_DELETE_ROW
USING    P_TC_NAME           TYPE DYNFNAM
P_TABLE_NAME
P_MARK_NAME   .

*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA L_TABLE_NAME       LIKE FELD-NAME.

FIELD-SYMBOLS <TC>         TYPE CXTAB_CONTROL.
FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
FIELD-SYMBOLS <WA>.
FIELD-SYMBOLS <MARK_FIELD>.
*-END OF LOCAL DATA----------------------------------------------------*
* 明細データチェック用
DATA:LW_MEISAI   TYPE TYP_MEISAI.

ASSIGN (P_TC_NAME) TO <TC>.

* get the table, which belongs to the tc                               *
CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

* delete marked lines                                                  *
DESCRIBE TABLE <TABLE> LINES <TC>-LINES.

LOOP AT <TABLE> ASSIGNING <WA>.

*   access to the component 'FLAG' of the table header                 *
ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

IF <MARK_FIELD> = 'X'.
*      削除行のチェック
LW_MEISAI = <WA>.
IF LW_MEISAI-KESSAI = TEXT-004.   "済のデータ
MESSAGE I000 WITH TEXT-E02.
EXIT.
ENDIF.
DELETE <TABLE> INDEX SYST-TABIX.
IF SY-SUBRC = 0.
<TC>-LINES = <TC>-LINES - 1.
ENDIF.
ENDIF.
ENDLOOP.

ENDFORM.                              " FCODE_DELETE_ROW

*&---------------------------------------------------------------------*
*&      Form  COMPUTE_SCROLLING_IN_TC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*      -->P_OK       ok code
*----------------------------------------------------------------------*
FORM COMPUTE_SCROLLING_IN_TC USING    P_TC_NAME
P_OK.
*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA L_TC_NEW_TOP_LINE     TYPE I.
DATA L_TC_NAME             LIKE FELD-NAME.
DATA L_TC_LINES_NAME       LIKE FELD-NAME.
DATA L_TC_FIELD_NAME       LIKE FELD-NAME.

FIELD-SYMBOLS <TC>         TYPE CXTAB_CONTROL.
FIELD-SYMBOLS <LINES>      TYPE I.
*-END OF LOCAL DATA----------------------------------------------------*

ASSIGN (P_TC_NAME) TO <TC>.
* get looplines of TableControl
CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_TC_LINES_NAME.
ASSIGN (L_TC_LINES_NAME) TO <LINES>.


* is no line filled?                                                   *
IF <TC>-LINES = 0.
*   yes, ...                                                           *
L_TC_NEW_TOP_LINE = 1.
ELSE.
*   no, ...                                                            *
CALL FUNCTION 'SCROLLING_IN_TABLE'
EXPORTING
ENTRY_ACT             = <TC>-TOP_LINE
ENTRY_FROM            = 1
ENTRY_TO              = <TC>-LINES
LAST_PAGE_FULL        = 'X'
LOOPS                 = <LINES>
OK_CODE               = P_OK
OVERLAPPING           = 'X'
IMPORTING
ENTRY_NEW             = L_TC_NEW_TOP_LINE
EXCEPTIONS
NO_ENTRY_OR_PAGE_ACT  = 01
NO_ENTRY_TO           = 02
NO_OK_CODE_OR_PAGE_GO = 03
OTHERS                = 99.
ENDIF.

* get actual tc and column                                             *
GET CURSOR FIELD L_TC_FIELD_NAME
AREA  L_TC_NAME.

IF SYST-SUBRC = 0.
IF L_TC_NAME = P_TC_NAME.
*     set actual column                                                *
SET CURSOR FIELD L_TC_FIELD_NAME LINE 1.
ENDIF.
ENDIF.

* set the new top line                                                 *
<TC>-TOP_LINE = L_TC_NEW_TOP_LINE.


ENDFORM.                              " COMPUTE_SCROLLING_IN_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_MARK_LINES
*&---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_MARK_LINES USING P_TC_NAME
P_TABLE_NAME
P_MARK_NAME.
*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA L_TABLE_NAME       LIKE FELD-NAME.

FIELD-SYMBOLS <TC>         TYPE CXTAB_CONTROL.
FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
FIELD-SYMBOLS <WA>.
FIELD-SYMBOLS <MARK_FIELD>.
*-END OF LOCAL DATA----------------------------------------------------*

ASSIGN (P_TC_NAME) TO <TC>.

* get the table, which belongs to the tc                               *
CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

* mark all filled lines                                                *
LOOP AT <TABLE> ASSIGNING <WA>.

*   access to the component 'FLAG' of the table header                 *
ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

<MARK_FIELD> = 'X'.
ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_DEMARK_LINES
*&---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
P_TABLE_NAME
P_MARK_NAME .
*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA L_TABLE_NAME       LIKE FELD-NAME.

FIELD-SYMBOLS <TC>         TYPE CXTAB_CONTROL.
FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
FIELD-SYMBOLS <WA>.
FIELD-SYMBOLS <MARK_FIELD>.
*-END OF LOCAL DATA----------------------------------------------------*

ASSIGN (P_TC_NAME) TO <TC>.

* get the table, which belongs to the tc                               *
CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

* demark all filled lines                                              *
LOOP AT <TABLE> ASSIGNING <WA>.

*   access to the component 'FLAG' of the table header                 *
ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

<MARK_FIELD> = SPACE.
ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines
*&---------------------------------------------------------------------*
*&      Form  LOCK_PROC
*&---------------------------------------------------------------------*
*       ロック処理
*----------------------------------------------------------------------*
FORM LOCK_PROC.

DATA: L_USER TYPE SY-MSGV1.

CALL FUNCTION 'ENQUEUE_EZN005'
EXPORTING
MODE_ZN002           = C_LOCK_MODE
BUKRS                = P_BUK
KUNNR                = P_KUN
CZFBDT               = P_DAY
EXCEPTIONS
FOREIGN_LOCK         = 1
SYSTEM_FAILURE       = 2
OTHERS               = 3.

IF SY-SUBRC <> 0.
L_USER = SY-MSGV1.
MESSAGE I756 WITH TEXT-003 L_USER.
W_ERR_FLG = C_ON.
ENDIF.

ENDFORM.                    " LOCK_PROC
*&---------------------------------------------------------------------*
*&      Form  GET_ZN005
*&---------------------------------------------------------------------*
*       入金予定データ取得
*----------------------------------------------------------------------*
FORM GET_ZN005.

SELECT *
INTO TABLE T_ZN005
FROM ZN005
WHERE BUKRS = P_BUK
AND KUNNR = P_KUN
AND CZFBDT = P_DAY.

IF SY-SUBRC = 0.
*   入金消込がONのデータの金額を合算
LOOP AT T_ZN005 INTO W_ZN005
WHERE AUFLG = C_ON.
G_ZUMI_SUM = G_ZUMI_SUM + W_ZN005-IWRBTR.   "入金予定額
ENDLOOP.
ENDIF.

ENDFORM.                    " GET_ZN005
*&---------------------------------------------------------------------*
*&      Form  GET_YN110
*&---------------------------------------------------------------------*
*       照合金額取得
*----------------------------------------------------------------------*
FORM GET_YN110.
DATA:LT_YN110    TYPE T_TYP_YN110,    "外部データ(売上)対象データ取得
LW_YN110    TYPE TYP_YN110.

**2012/03/26 ADD START QA-187
*  CLEAR:G_OK_FLG.
**2012/03/26 ADD END   QA-187

SELECT GJAHR            "外部会計年度
SLPDOC           "外部番号
DTLDOC           "外部明細番号
KNETXAMT         "税込金額
INTO TABLE LT_YN110
FROM YN110
* 2012/03/27 MOD インデックス対応 START
*   WHERE VRFCTON = P_KUN
*     AND CZFBDT  = P_DAY
*     AND BUKRS   = P_BUK
*     AND DELFLG  = SPACE.
WHERE  BUKRS   = P_BUK
AND  CZFBDT  = P_DAY
AND  VRFCTON = P_KUN
AND  DELFLG  = SPACE.
* 2012/03/27 MOD インデックス対応 END
* 取得した税込金額を合算
IF SY-SUBRC = 0.
**2012/03/26 ADD START QA-187
*    G_OK_FLG = C_ON.
**2012/03/26 ADD END   QA-187
LOOP AT LT_YN110 INTO LW_YN110.
G_YN110_SUM = G_YN110_SUM + LW_YN110-KNETXAMT.  "照合金額
ENDLOOP.
ENDIF.

ENDFORM.                    " GET_YN110
*&---------------------------------------------------------------------*
*&      Form  GET_KNVP
*&---------------------------------------------------------------------*
*       入金先の取得
*----------------------------------------------------------------------*
FORM GET_KNVP.
* 2012/03/05 DEL START
*-- 取引先機能の処理は廃止
** 選択画面の取引先機能の得意先コードを取得
*  SELECT SINGLE KUNN2     "取引先の得意先コード
*    INTO G_KUNN2
*    FROM KNVP
*   WHERE KUNNR = P_KUN    "得意先
*     AND VKORG = P_VKO    "販売組織
*     AND VTWEG = P_VTW    "流通チャネル
*     AND SPART = P_SPA    "製品部門
*     AND PARVW = P_PAR.   "取引先機能
*
** 取得できない場合は、自コード(得意先(支払))を設定
*  IF SY-SUBRC <> 0.
*    G_KUNN2 = P_KUN.
*  ENDIF.
* 2012/03/05 DEL END

ENDFORM.                    " GET_KNVP
*&---------------------------------------------------------------------*
*&      Form  MAKE_DYNPRO_9000
*&---------------------------------------------------------------------*
*       その他画面項目の設定
*----------------------------------------------------------------------*
FORM MAKE_DYNPRO_9000.
CLEAR:T_MEISAI.
REFRESH:T_MEISAI.
* 会社コード
G_BUKRS = P_BUK.
* 得意先コード
G_KUNNR = P_KUN.
* 照合締日
G_CZFBDT = P_DAY.
*2012/05/30 ADD START　入金条件メモ
PERFORM GET_MEMO USING    G_KUNNR
G_BUKRS
CHANGING G_MEMO.
*2012/05/30 ADD END

* テーブルコントロールデータの編集
LOOP AT T_ZN005 INTO W_ZN005.
CLEAR:W_MEISAI.
*   入金予定日(入金日)
W_MEISAI-IZFBDT = W_ZN005-IZFBDT.
*   支払予定額(支払金額)
W_MEISAI-IWRBTR = W_ZN005-IWRBTR.
*   決済
IF W_ZN005-AUFLG = C_ON.
W_MEISAI-KESSAI = TEXT-004.      "済
W_MEISAI-IKUNNR = W_ZN005-IKUNNR. "入金先【非表示】
W_MEISAI-IZLSCH = W_ZN005-IZLSCH. "支払方法【非表示】
W_MEISAI-INSDT  = W_ZN005-INSDT.  "登録日【非表示】
W_MEISAI-INSTM  = W_ZN005-INSTM.  "登録時刻【非表示】
W_MEISAI-INSUSR = W_ZN005-INSUSR. "登録ユーザ【非表示】

ELSE.
W_MEISAI-KESSAI = TEXT-005.      "未
W_MEISAI-IKUNNR = G_KUNN2.       "入金先【非表示】
ENDIF.
*   相殺
IF W_ZN005-IZLSCH = C_OFFSET.
W_MEISAI-SOUSAI = C_ON.          "X
ELSE.
W_MEISAI-SOUSAI = SPACE.         "初期値
ENDIF.
*   相殺仕入先
W_MEISAI-ILIFNR  = W_ZN005-ILIFNR.
*   備考(コメント)
W_MEISAI-IMEMO   = W_ZN005-IMEMO.
*-----非表示項目
W_MEISAI-AUFLG   = W_ZN005-AUFLG.     "入金消込
W_MEISAI-AUDAT   = W_ZN005-AUDAT.     "入金消込日
W_MEISAI-AUTIM   = W_ZN005-AUTIM.     "入金消込時刻
W_MEISAI-AUUSR   = W_ZN005-AUUSR.     "入金消込ユーザ
W_MEISAI-IBELNER = W_ZN005-IBELNER.   "決済伝票番号
W_MEISAI-IGJAHR  = W_ZN005-IGJAHR.    "決済会計年度
W_MEISAI-IBUDAT  = W_ZN005-IBUDAT.    "決済転記日
APPEND W_MEISAI TO T_MEISAI.

*   明細合計
G_MEISAI_SUM = G_MEISAI_SUM + W_MEISAI-IWRBTR.
ENDLOOP.

ENDFORM.                    " MAKE_DYNPRO_9000
*&---------------------------------------------------------------------*
*&      Module  STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*       画面9000:PBO
*----------------------------------------------------------------------*
MODULE STATUS_9000 OUTPUT.

SET PF-STATUS 'G_9000'.
SET TITLEBAR 'T_9000'.

* 保存時エラーが発生している場合、カーソルを設定
IF W_SAVE_ERR = C_ON.
SET CURSOR FIELD G_FIELDNAME LINE G_LINE.
ENDIF.
CLEAR:G_LINE,W_SAVE_ERR.

ENDMODULE.                 " STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*&      Form  SCREEN_INIT_TYPE
*&---------------------------------------------------------------------*
*       画面属性変更
*----------------------------------------------------------------------*
FORM SCREEN_INIT_TYPE.
LOOP AT SCREEN.
*   決済[済]の明細の場合は、すべての項目が入力不可
IF W_MEISAI-KESSAI = TEXT-004.      "済の明細
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_OFF    "相殺得意先
C_SCREEN_OFF.   "デフォルト属性
ELSEIF W_MEISAI-KESSAI  = TEXT-005.    "未が設定されている.
IF W_MEISAI-SOUSAI = C_ON.
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_ON     "相殺得意先
C_SCREEN_ON.    "デフォルト属性
ELSE.
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_OFF    "相殺得意先
C_SCREEN_ON.    "デフォルト属性
ENDIF.
ELSE.   "未も済も設定されていないデータ
ENDIF.
*2012/03/26 ADD START QA-154
*   相殺と相殺仕入先は常に入力不可
*   (入力制御を戻す場合はQA-154の修正箇所をコメントアウト)
IF SCREEN-NAME = 'W_MEISAI-ILIFNR'.  "相殺仕入先
SCREEN-INPUT = C_SCREEN_OFF.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-SOUSAI'.  "相殺
SCREEN-INPUT = C_SCREEN_OFF.
ENDIF.
*2012/03/26 ADD END  QA-154
*   更新
MODIFY SCREEN.
ENDLOOP.

ENDFORM.                    " SCREEN_INIT_TYPE
*&---------------------------------------------------------------------*
*&      Form  SCREEN_INPUT_TYPE
*&---------------------------------------------------------------------*
*       画面属性変更
*----------------------------------------------------------------------*
*      -->P_ILIFNR          相殺仕入先
*      -->P_DEFAULT         その他画面項目のデフォルト値
*----------------------------------------------------------------------*
FORM SCREEN_INPUT_TYPE USING    P_ILIFNR    TYPE CHAR1
P_DEFAULT   TYPE CHAR1.
* どの明細も入力可能
IF SCREEN-NAME = 'W_MEISAI-IZFBDT'.  "入金日
SCREEN-INPUT = P_DEFAULT.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-IWRBTR'.  "入金金額
SCREEN-INPUT = P_DEFAULT.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-SOUSAI'.  "相殺
SCREEN-INPUT = P_DEFAULT.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-IMEMO'.   "備考
SCREEN-INPUT = P_DEFAULT.
ENDIF.

* レコードによって入力可/不可が変更になる
IF SCREEN-NAME = 'W_MEISAI-ILIFNR'.  "相殺仕入先
SCREEN-INPUT = P_ILIFNR.
ENDIF.

ENDFORM.                    " SCREEN_INPUT_TYPE
*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       画面9000:PAI EXITコマンド
*----------------------------------------------------------------------*
MODULE EXIT_COMMAND_9000 INPUT.

CASE OK_CODE.
*----- 前画面/キャンセルボタン押下時
WHEN 'BACK'
OR 'CANC'.
*     終了確認のポップアップ表示
PERFORM CALL_POPUP    USING TEXT-006   "MESSAGE
SPACE      "POPUP TITLE
CHANGING W_ANSWER.
*     "はい"の場合はロック解除し、前画面に戻る
IF W_ANSWER = C_ANSWER_OK.
PERFORM UNLOCK_PROC.
LEAVE TO SCREEN 0.   "前画面に戻る
ENDIF.

*----- 中止ボタン押下時
WHEN 'EXIT'.
*     終了確認のポップアップ表示
PERFORM CALL_POPUP    USING TEXT-006   "MESSAGE
SPACE      "POPUP TITLE
CHANGING W_ANSWER.
*     "はい"の場合はロック解除し、ＰＧ終了
IF W_ANSWER = C_ANSWER_OK.
PERFORM UNLOCK_PROC.
LEAVE PROGRAM.       "PG終了
ENDIF.
ENDCASE.

ENDMODULE.                 " EXIT_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*&      Form  CALL_POPUP
*&---------------------------------------------------------------------*
*       ポップアップ表示
*----------------------------------------------------------------------*
*      -->P_TEXT_001      MESSAGE
*      -->P_TEXT_002      POPUP TEXT
*      <--P_LW_ANSWER     回答
*----------------------------------------------------------------------*
FORM CALL_POPUP USING     P_TEXT_001   TYPE ANY
P_TEXT_002   TYPE ANY
CHANGING  P_ANSWER     TYPE CHAR1.
CLEAR:P_ANSWER.
CALL FUNCTION 'POPUP_TO_CONFIRM'
EXPORTING
*     TITLEBAR                    = P_TEXT_002
TEXT_QUESTION               = P_TEXT_001
DEFAULT_BUTTON              = C_ANSWER_NG
DISPLAY_CANCEL_BUTTON       = SPACE
IMPORTING
ANSWER                      = P_ANSWER
EXCEPTIONS
TEXT_NOT_FOUND              = 1
OTHERS                      = 2.

IF SY-SUBRC <> 0.
CLEAR:P_ANSWER.
ENDIF.

ENDFORM.                    " CALL_POPUP
*&---------------------------------------------------------------------*
*&      Form  UNLOCK_PROC
*&---------------------------------------------------------------------*
*       ロック解除
*----------------------------------------------------------------------*
FORM UNLOCK_PROC.

CALL FUNCTION 'DEQUEUE_EZN005'
EXPORTING
MODE_ZN005           = C_LOCK_MODE
BUKRS                = P_BUK
KUNNR                = P_KUN
CZFBDT               = P_DAY
EXCEPTIONS
FOREIGN_LOCK         = 1
SYSTEM_FAILURE       = 2
OTHERS               = 3.

ENDFORM.                    " UNLOCK_PROC
*&---------------------------------------------------------------------*
*&      Module  LINE_COUNT  INPUT
*&---------------------------------------------------------------------*
*       行カウント
*----------------------------------------------------------------------*
MODULE LINE_COUNT INPUT.

* 現在ループ中の行数をカウントする
G_LINE = G_LINE + 1.

ENDMODULE.                 " LINE_COUNT  INPUT
*&---------------------------------------------------------------------*
*&      Form  MEISAI_HISSU
*&---------------------------------------------------------------------*
*       明細データ必須チェック
*----------------------------------------------------------------------*
*      -->P_MEISAI      テーブルコントロールデータ
*----------------------------------------------------------------------*
FORM MEISAI_HISSU USING    P_MEISAI TYPE TYP_MEISAI.

* 入金日必須チェック
IF P_MEISAI-IZFBDT IS INITIAL.    "入金日
SET CURSOR FIELD 'W_MEISAI-IZFBDT' LINE G_LINE.
MESSAGE E901 WITH TEXT-007.
ENDIF.

* 入金金額必須チェック
IF P_MEISAI-IWRBTR IS INITIAL.
SET CURSOR FIELD 'W_MEISAI-IWRBTR' LINE G_LINE.
MESSAGE E901 WITH TEXT-008. "入金金額
ENDIF.

* 相殺仕入先必須チェック
* 相殺チェックボックスがONにした時はチェックしない
IF W_CHANGE_SOUSAI_FLG IS INITIAL.
IF  P_MEISAI-SOUSAI = C_ON
AND P_MEISAI-ILIFNR IS INITIAL.
SET CURSOR FIELD 'W_MEISAI-ILIFNR' LINE G_LINE.
MESSAGE E901 WITH TEXT-010.  "相殺仕入先
ENDIF.
ENDIF.

ENDFORM.                    " MEISAI_HISSU
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       画面9000:PAI USERコマンド
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9000 INPUT.

* 金額合計算出
CLEAR:G_MEISAI_SUM,G_LINE,W_SAVE_ERR.
LOOP AT T_MEISAI INTO W_MEISAI.
G_MEISAI_SUM = G_MEISAI_SUM + W_MEISAI-IWRBTR.
ENDLOOP.

CASE OK_CODE.
*----- 保存ボタン押下時
WHEN 'SAVE'.
CLEAR:W_SAVE_ERR, OK_CODE.
*     チェック
LOOP AT T_MEISAI INTO W_MEISAI.
*       現在ループ中の行数をカウントする
G_LINE = G_LINE + 1.
IF W_MEISAI-KESSAI = TEXT-005.          "未のデータのみチェック
PERFORM MEISAI_HISSU USING W_MEISAI.  "必須チェック
ENDIF.
ENDLOOP.
*** 2012/06/22 INSERT START ***
*     照合金額が０だが、入金予定データ有り(+-0)をエラーとする。
IF  G_LINE NE 0
AND G_YN110_SUM = 0.
MESSAGE E937 WITH P_DAY.
ENDIF.
*** 2012/06/22 INSERT END ***
PERFORM SAVE_CHECK.                     "入力値チェック
CHECK W_SAVE_ERR = SPACE.
*     終了確認のポップアップ表示
PERFORM CALL_POPUP    USING TEXT-009    "MESSAGE
SPACE       "POPUP TITLE
CHANGING W_ANSWER.
*     "はい"の場合
IF W_ANSWER = C_ANSWER_OK.
*       ＤＢ更新
PERFORM SAVE_DATA.
IF W_SAVE_ERR = SPACE.   "正常終了の場合
*         ロック解除
PERFORM UNLOCK_PROC.
COMMIT WORK AND WAIT.
MESSAGE S929.
LEAVE TO SCREEN 0.     "選択画面に戻る
ENDIF.
ENDIF.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*&      Form  SAVE_CHECK
*&---------------------------------------------------------------------*
*       保存時のチェック
*----------------------------------------------------------------------*
FORM SAVE_CHECK.
DATA:LW_SUM   TYPE YNETXAMT.

CLEAR:G_LINE.
LOOP AT T_MEISAI INTO W_MEISAI.
G_LINE = G_LINE + 1.
IF W_MEISAI-KESSAI = TEXT-005.      "未のデータのみチェック

*     相殺仕入先の入力値チェック
PERFORM CHECK_ILIFNR    USING W_MEISAI-ILIFNR
CHANGING W_SAVE_ERR.
IF W_SAVE_ERR = C_ON.
G_FIELDNAME = 'W_MEISAI-ILIFNR'.
EXIT.
ENDIF.
ENDIF.

*   入力金額合算
LW_SUM = LW_SUM + W_MEISAI-IWRBTR.

ENDLOOP.
IF W_SAVE_ERR = C_ON.
EXIT.
ENDIF.

* 支払金額チェック
IF LW_SUM <> G_YN110_SUM.
MESSAGE I000 WITH TEXT-E03.
W_SAVE_ERR = C_ON.
ENDIF.

ENDFORM.                    " SAVE_CHECK
*&---------------------------------------------------------------------*
*&      Form  SAVE_DATA
*&---------------------------------------------------------------------*
*       データ更新
*----------------------------------------------------------------------*
FORM SAVE_DATA.
DATA:LW_ZN005   TYPE ZN005,        "ZN005登録データ
LT_ZN005   TYPE STANDARD TABLE OF ZN005,
LW_SEQ     TYPE ZNESEQ,       "ＳＥＱカウント用
LW_DATUM   TYPE DATUM,        "登録日付
LW_UZEIT   TYPE UZEIT,        "登録時刻
LW_UNAME   TYPE SYUNAME.      "登録ユーザ
* 登録情報の退避
LW_DATUM = SY-DATUM.
LW_UZEIT = SY-UZEIT.
LW_UNAME = SY-UNAME.

* データ編集
LOOP AT T_MEISAI INTO W_MEISAI.
CLEAR:LW_ZN005.
LW_SEQ            = LW_SEQ + 1.
LW_ZN005-BUKRS    = G_BUKRS.           "会社コード
LW_ZN005-KUNNR    = G_KUNNR.           "得意先コード(支払)
LW_ZN005-CZFBDT   = G_CZFBDT.          "照合締日
LW_ZN005-SEQ      = LW_SEQ.            "SEQ
LW_ZN005-IZFBDT   = W_MEISAI-IZFBDT.   "支払予定日
IF W_MEISAI-AUFLG IS INITIAL.
IF W_MEISAI-SOUSAI = C_ON.             "支払条件
LW_ZN005-IZLSCH   = C_OFFSET.
ELSE.
LW_ZN005-IZLSCH   = SPACE.
ENDIF.
ELSE.
LW_ZN005-IZLSCH = W_MEISAI-IZLSCH.
ENDIF.
LW_ZN005-WAERS    = G_WAERS.           "通貨コード
LW_ZN005-IWRBTR   = W_MEISAI-IWRBTR.   "入金予定額
LW_ZN005-IKUNNR   = W_MEISAI-IKUNNR.   "入金先
LW_ZN005-ILIFNR   = W_MEISAI-ILIFNR.   "相殺先
LW_ZN005-IMEMO    = W_MEISAI-IMEMO.    "備考
IF W_MEISAI-INSDT IS INITIAL.
LW_ZN005-INSDT    = LW_DATUM.          "登録日
LW_ZN005-INSTM    = LW_UZEIT.          "登録時刻
LW_ZN005-INSUSR   = LW_UNAME.          "登録ユーザ
ELSE.
LW_ZN005-INSDT    = W_MEISAI-INSDT.    "登録日
LW_ZN005-INSTM    = W_MEISAI-INSTM.    "登録時刻
LW_ZN005-INSUSR   = W_MEISAI-INSUSR.   "登録ユーザ
ENDIF.
LW_ZN005-AUFLG    = W_MEISAI-AUFLG.    "入金消込
LW_ZN005-AUDAT    = W_MEISAI-AUDAT.    "入金消込日
LW_ZN005-AUTIM    = W_MEISAI-AUTIM.    "入金消込時刻
LW_ZN005-AUUSR    = W_MEISAI-AUUSR.    "入金消込ユーザ
LW_ZN005-IBELNER  = W_MEISAI-IBELNER.  "決済伝票番号
LW_ZN005-IGJAHR   = W_MEISAI-IGJAHR.   "決済会計年度
LW_ZN005-IBUDAT   = W_MEISAI-IBUDAT.   "決済転記日
APPEND LW_ZN005 TO LT_ZN005.
ENDLOOP.

* 元のデータを削除

*2012/04/09 ADD START QA-266
IF G_INIT_DATA IS INITIAL. "既にデータ登録あり
*2012/04/09 ADD END   QA-266
DELETE ZN005 FROM TABLE T_ZN005.  "取得したデータ
IF SY-SUBRC <> 0.
ROLLBACK WORK.
MESSAGE I793 WITH TEXT-003.
W_SAVE_ERR = C_ON.
EXIT.
ENDIF.
*2012/04/09 ADD START QA-266
ENDIF.
*2012/04/09 ADD END   QA-266
* 今回のデータを登録
INSERT ZN005 FROM TABLE LT_ZN005.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
MESSAGE I758 WITH TEXT-003.
W_SAVE_ERR = C_ON.
EXIT.
ENDIF.

ENDFORM.                    " SAVE_DATA
*&---------------------------------------------------------------------*
*&      Form  CHECK_ILIFNR
*&---------------------------------------------------------------------*
*       相殺仕入先の入力値チェック
*----------------------------------------------------------------------*
*      -->P_ILIFNR       相殺仕入先
*      <--P_SAVE_ERR     エラーフラグ
*----------------------------------------------------------------------*
FORM CHECK_ILIFNR USING    P_ILIFNR      TYPE LIFNR
CHANGING P_SAVE_ERR    TYPE CHAR1.
DATA:LW_LIFNR   TYPE LIFNR.

CHECK NOT P_ILIFNR IS INITIAL.
* 仕入先マスタ検索
SELECT SINGLE LIFNR
INTO LW_LIFNR
FROM LFB1
WHERE LIFNR = P_ILIFNR
AND BUKRS = P_BUK.
* 存在しない場合はエラー
IF SY-SUBRC <> 0.
MESSAGE I000 WITH TEXT-010
P_ILIFNR
TEXT-E04.
SET CURSOR FIELD 'T_MEISAI-ILIFNR' LINE G_LINE.
P_SAVE_ERR = C_ON.
ENDIF.

ENDFORM.                    " CHECK_ILIFNR
*&---------------------------------------------------------------------*
*&      Module  PZFBDT_HELP  INPUT
*&---------------------------------------------------------------------*
*       入金日検索ヘルプ
*----------------------------------------------------------------------*
MODULE PZFBDT_HELP INPUT.
DATA:LW_DATE   LIKE WORKFLDS-GKDAY.

CALL FUNCTION 'F4_DATE'
IMPORTING
SELECT_DATE                        = LW_DATE
EXCEPTIONS
CALENDAR_BUFFER_NOT_LOADABLE       = 1
DATE_AFTER_RANGE                   = 2
DATE_BEFORE_RANGE                  = 3
DATE_INVALID                       = 4
FACTORY_CALENDAR_NOT_FOUND         = 5
HOLIDAY_CALENDAR_NOT_FOUND         = 6
PARAMETER_CONFLICT                 = 7
OTHERS                             = 8.

W_MEISAI-IZFBDT = LW_DATE.

ENDMODULE.                 " PZFBDT_HELP  INPUT
*&---------------------------------------------------------------------*
*&      Module  CHANGE_SOUSAI  INPUT
*&---------------------------------------------------------------------*
*       相殺変更フラグをON
*----------------------------------------------------------------------*
MODULE CHANGE_SOUSAI INPUT.

W_CHANGE_SOUSAI_FLG = C_ON.

ENDMODULE.                 " CHANGE_SOUSAI  INPUT
*&---------------------------------------------------------------------*
*&      Module  ILIFNR_INPUT_CHECK  INPUT
*&---------------------------------------------------------------------*
*       相殺仕入先入力チェック（毎回実施）
*----------------------------------------------------------------------*
MODULE ILIFNR_INPUT_CHECK INPUT.

IF  W_CHANGE_SOUSAI_FLG = SPACE    "相殺チェックフラグを変更していない
AND W_MEISAI-KESSAI = TEXT-005.    "未のデータのみチェック
IF  W_MEISAI-SOUSAI = C_ON
AND W_MEISAI-ILIFNR IS INITIAL.
SET CURSOR FIELD 'W_MEISAI-ILIFNR' LINE G_LINE.
MESSAGE E901 WITH TEXT-010.  "相殺仕入先
ENDIF.
ENDIF.

CLEAR:W_CHANGE_SOUSAI_FLG.

ENDMODULE.                 " ILIFNR_INPUT_CHECK  INPUT
* 2012/03/23 ADD START
*&---------------------------------------------------------------------*
*&      Form  SET_DAFAULT_REC
*&---------------------------------------------------------------------*
*       初期値提案
*----------------------------------------------------------------------*
FORM SET_DAFAULT_REC.
DATA:L_W_ZN008  TYPE ZN008.
DATA:L_ZAN      TYPE YN110-KNETXAMT,
L_SUM      TYPE YN110-KNETXAMT.

* 外部データの集計額が初期値以外で、入金予定がゼロ件の場合のみ実行
CHECK G_YN110_SUM <> 0.
CHECK T_ZN005[] IS INITIAL.

*2012/04/09 ADD START QA-266
* 外部データ 存在判定
G_INIT_DATA = C_ON.   "既に登録されているデータはなし
*2012/04/09 ADD END   QA-266

* 規定外マスタ取得
REFRESH:T_ZN008.
CLEAR:W_ZN008,L_W_ZN008.
SELECT *
INTO TABLE T_ZN008
FROM ZN008
WHERE KUNNR = P_KUN
AND WAERS = G_WAERS.

* 規定外マスタなし
IF T_ZN008[] IS INITIAL.
PERFORM SET_UPDATA USING G_YN110_SUM             "税込金額
G_ZTERM. "条件（支払日）
EXIT.
* 規定外マスタあり
ELSE.
LOOP AT T_ZN008 INTO W_ZN008.
IF  W_ZN008-LOWAMT =< G_YN110_SUM      "閾値が外部集計以下
AND W_ZN008-LOWAMT >= L_W_ZN008-LOWAMT."で最大
L_W_ZN008 = W_ZN008.
ENDIF.
ENDLOOP.
W_ZN008 = L_W_ZN008.
ENDIF.
*<決まった規定外マスタをどう使うのかの分岐>---------START
CLEAR:L_ZAN,L_SUM.
L_SUM = G_YN110_SUM.
* %モード
IF W_ZN008-PER1 <> 0. "1-分割（％）
PERFORM PERSENT_MODE USING P_KUN
G_WAERS
L_SUM
CHANGING L_ZAN.
** 金額モード
ELSEIF W_ZN008-PAY1 <> 0. "1-分割（金額）
PERFORM KINGAKU_MODE USING P_KUN
G_WAERS
L_SUM
CHANGING L_ZAN.
ELSE.
*   ％なし、金額なし判断
*    規定外マスタありなら 最初から全額残モード
PERFORM SET_UPDATA USING L_SUM             "税込金額
W_ZN008-ZTERM_PZ. "条件（支払日）
EXIT.
ENDIF.
*<決まった規定外マスタをどう使うのかの分岐>---------END
* 規定外マスタの１〜４でも集計額がまかなえない場合、残りを残額へ
IF L_ZAN <> 0.
PERFORM SET_UPDATA USING  L_ZAN             "税込金額
W_ZN008-ZTERM_PZ. "条件（支払日）
ENDIF.
ENDFORM.                    " SET_DAFAULT_REC
*&---------------------------------------------------------------------*
*&      Form  GET_ZFBDT
*&---------------------------------------------------------------------*
*       入金予定日取得
*----------------------------------------------------------------------*
*      --> V_ZTERM         支払条件
*      <-- W_MEISAI-IZFBDT 入金予定日
*----------------------------------------------------------------------*
FORM GET_ZFBDT USING V_ZTERM.
DATA:L_ZTERM TYPE KNVV-ZTERM.

CLEAR:W_ZN005-IZFBDT.
L_ZTERM = V_ZTERM.
CALL FUNCTION 'YK_ZFBDT_GET_BY_ZTERM'
EXPORTING
I_ZTERM              = L_ZTERM
I_DAY                = P_DAY
IMPORTING
E_SIHARAIBI          = W_ZN005-IZFBDT
EXCEPTIONS
NO_GET_T052            = 1
NO_GOOD_GETDAY       = 2
NO_GOOD_DAY          = 3
OTHERS               = 4.
IF SY-SUBRC <> 0.
CLEAR:W_ZN005-IZFBDT.
ENDIF.
ENDFORM.                    " GET_ZFBDT
*&---------------------------------------------------------------------*
*&      Form  PERSENT_MODE
*&---------------------------------------------------------------------*
*       ％での支払方法決定
*----------------------------------------------------------------------*
*      -->L_KUNNR     得意先
*      -->L_WAERS     通貨
*      -->L_SUM       税込金額合計
*----------------------------------------------------------------------*
FORM PERSENT_MODE USING  L_KUNNR   TYPE KUNNR
L_WAERS   TYPE WAERS
L_SUM     TYPE YN110-KNETXAMT
CHANGING L_ZAN     TYPE YN110-KNETXAMT.

DATA:L_SUM_ZAN TYPE YN210-KNETXAMT,
L_SIHARAI TYPE YN210-KNETXAMT.
L_SUM_ZAN = L_SUM.

* 条件１
CLEAR L_SIHARAI.
L_SIHARAI = L_SUM * ( W_ZN008-PER1 / 100 ).
PERFORM SET_UPDATA USING L_SIHARAI         "税込金額
W_ZN008-ZTERM_P1. "条件（支払日）
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.

CHECK L_SUM_ZAN <> 0.

* 条件2
IF  W_ZN008-PER2 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
L_SIHARAI = L_SUM * ( W_ZN008-PER2 / 100 ).
PERFORM SET_UPDATA USING L_SIHARAI         "税込金額
W_ZN008-ZTERM_P2. "条件（支払日）
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
ENDIF.
CHECK L_SUM_ZAN <> 0.

* 条件3
IF  W_ZN008-PER3 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
L_SIHARAI = L_SUM * ( W_ZN008-PER3 / 100 ).

PERFORM SET_UPDATA USING L_SIHARAI         "税込金額
W_ZN008-ZTERM_P3. "条件（支払日）
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
ENDIF.

CHECK L_SUM_ZAN <> 0.
* 条件4
IF  W_ZN008-PER4 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
L_SIHARAI = L_SUM * ( W_ZN008-PER4 / 100 ).
PERFORM SET_UPDATA USING L_SIHARAI         "税込金額
W_ZN008-ZTERM_P4. "条件（支払日）
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
ENDIF.

ENDFORM.                    " PERSENT_MODE
*&---------------------------------------------------------------------*
*&      Form  SET_UPDATA
*&---------------------------------------------------------------------*
*       テーブル更新用一時データ作成
*----------------------------------------------------------------------*
*      -->L_SUM      支払予定額
*      -->L_ZTERM_P  支払条件(日)
*----------------------------------------------------------------------*
FORM SET_UPDATA USING    L_SUM     TYPE YN110-KNETXAMT
L_ZTERM_P TYPE ZN005-IZTERM.
CLEAR:W_ZN005.
PERFORM GET_ZFBDT USING L_ZTERM_P.
W_ZN005-IWRBTR  = L_SUM.     "税込金額
APPEND W_ZN005 TO T_ZN005.

ENDFORM.                    " SET_UPDATA

*&---------------------------------------------------------------------*
*&      Form  KINGAKU_MODE
*&---------------------------------------------------------------------*
*       支払方法決定 金額モード
*----------------------------------------------------------------------*
*      -->L_KUNNR    得意先
*      -->L_WAERS    通貨
*      -->L_SUM      支払予定額
*----------------------------------------------------------------------*
FORM KINGAKU_MODE USING    L_KUNNR TYPE KUNNR
L_WAERS TYPE WAERS
L_SUM   TYPE YN110-KNETXAMT
CHANGING L_ZAN   TYPE YN110-KNETXAMT.

DATA:L_SUM_ZAN TYPE YN210-KNETXAMT,
L_SIHARAI TYPE YN210-KNETXAMT.

L_SUM_ZAN = L_SUM.
L_ZAN = L_SUM_ZAN.
* 条件１
CLEAR L_SIHARAI.
IF L_SUM_ZAN  >= W_ZN008-PAY1. "条件金額が合計値を越える
L_SIHARAI = W_ZN008-PAY1.
ELSE.                          "条件金額で合計値をまかなえない
L_SIHARAI = L_SUM_ZAN.
ENDIF.

PERFORM SET_UPDATA USING L_SIHARAI         "税込金額
W_ZN008-ZTERM_P1. "条件（支払日）
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
CHECK L_SUM_ZAN <> 0.

* 条件2
IF  W_ZN008-PAY2 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
IF L_SUM_ZAN  >= W_ZN008-PAY2. "条件金額が合計値を越える
L_SIHARAI = W_ZN008-PAY2.
ELSE.                          "条件金額で合計値をまかなえない
L_SIHARAI = L_SUM_ZAN.
ENDIF.

PERFORM SET_UPDATA USING L_SIHARAI         "税込金額
W_ZN008-ZTERM_P2. "条件（支払日）
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
CHECK L_SUM_ZAN <> 0.
ENDIF.

* 条件3
IF  W_ZN008-PAY3 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
IF L_SUM_ZAN  >= W_ZN008-PAY3. "条件金額が合計値を越える
L_SIHARAI = W_ZN008-PAY3.
ELSE.                          "条件金額で合計値をまかなえない
L_SIHARAI = L_SUM_ZAN.
ENDIF.

PERFORM SET_UPDATA USING L_SIHARAI         "税込金額
W_ZN008-ZTERM_P3. "条件（支払日）
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
CHECK L_SUM_ZAN <> 0.
ENDIF.

* 条件4
IF  W_ZN008-PAY4 IS INITIAL.
EXIT.
ELSE.
CLEAR L_SIHARAI.
IF L_SUM_ZAN  >= W_ZN008-PAY4. "条件金額が合計値を越える
L_SIHARAI = W_ZN008-PAY4.
ELSE.                          "条件金額で合計値をまかなえない
L_SIHARAI = L_SUM_ZAN.
ENDIF.

PERFORM SET_UPDATA USING L_SIHARAI         "税込金額
W_ZN008-ZTERM_P4. "条件（支払日）
L_SUM_ZAN = L_SUM_ZAN -  L_SIHARAI.
L_ZAN = L_SUM_ZAN.
CHECK L_SUM_ZAN <> 0.
ENDIF.


ENDFORM.                    " KINGAKU_MODE
* 2012/03/23 ADD END
*&---------------------------------------------------------------------*
*&      Form  GET_MEMO
*&---------------------------------------------------------------------*
*       入金条件メモ取得
*----------------------------------------------------------------------*
*      -->P_KEY1      得意先コード
*      -->P_KEY2    　会社コード
*      <--P_MEMO     入金条件メモ
*----------------------------------------------------------------------*
FORM GET_MEMO USING    P_KEY1
P_KEY2
CHANGING P_MEMO.

DATA:LT_MEMO TYPE TABLE OF TLINE,
L_MEMO  TYPE TLINE,
L_ID    TYPE THEAD-TDID,
L_KEY   TYPE THEAD-TDNAME,
L_LANG  TYPE THEAD-TDSPRAS,
L_OBJ   TYPE THEAD-TDOBJECT.

CLEAR:L_MEMO,L_ID,L_KEY,L_LANG,L_OBJ.
REFRESH LT_MEMO.

*ID
L_ID = 'ZF04'.
*キー設定
L_KEY(10)    = P_KEY1.
L_KEY+10(4)  = P_KEY2.
*言語
L_LANG = SY-LANGU.
*オブジェクト
L_OBJ  = 'KNB1'.


CALL FUNCTION 'READ_TEXT'
EXPORTING
ID                            =  L_ID
LANGUAGE                      =  L_LANG
NAME                          =  L_KEY
OBJECT                        =  L_OBJ
TABLES
LINES                         =  LT_MEMO
EXCEPTIONS
ID                            = 1
LANGUAGE                      = 2
NAME                          = 3
NOT_FOUND                     = 4
OBJECT                        = 5
REFERENCE_CHECK               = 6
WRONG_ACCESS_TO_ARCHIVE       = 7
OTHERS                        = 8.

IF SY-SUBRC = 0.
READ TABLE LT_MEMO INTO L_MEMO INDEX 1.
P_MEMO = L_MEMO-TDLINE.
ELSE.
CLEAR P_MEMO.
ENDIF.

ENDFORM.                    " GET_MEMO
