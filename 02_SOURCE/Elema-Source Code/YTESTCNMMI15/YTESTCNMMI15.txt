*&---------------------------------------------------------------------*
*& プログラムID : YTESTCNMMI15
*& 作成者       : 王蘇風
*& 作成日       : 2015/12/02
*& 処理概要     : 1.アップロードしたファイルを元に対象データを取得する
*&                2.対象レコードを一つずつチェックする
*&                3.問題がない対象レコードがテーブルに登録する、
*&                  問題がある対象レコードがダウンロードする
*&                4.処理結果が一覧画面に表示する
*&---------------------------------------------------------------------*
REPORT  YTESTCNMMI15 MESSAGE-ID YTEST NO STANDARD PAGE HEADING.
*---------------------------------------------------------------------
*   宣言部
*---------------------------------------------------------------------
TYPES:

* アップロードデータ
BEGIN OF TYP_UPLOAD,
WERKS       TYPE STRING,                     "プラント
LGORT       TYPE STRING,                     "保管場所
VTWEG       TYPE STRING,                     "流通チャネル
PRODH       TYPE STRING,                     "P-CODE
STOQF       TYPE STRING,                     "在庫区分
STOPF       TYPE STRING,                     "在庫分配区分
RSTOPF      TYPE STRING,                     "入出庫区分
STODATE     TYPE STRING,                     "在庫日付
MENGE       TYPE STRING,                     "在庫数量
COMMENTS    TYPE STRING,                     "注釈
DATAS       TYPE STRING,                     "生成日付
USERS       TYPE STRING,                     "作成者
OTHERS      TYPE STRING,                     "余計な項目
END   OF TYP_UPLOAD,

* 比較データ
BEGIN OF TYP_HKKU,
WERKS       TYPE YTESTT04-WERKS,             "プラント
LGORT       TYPE YTESTT04-LGORT,             "保管場所
VTWEG       TYPE YTESTT04-VTWEG,             "流通チャネル
PRODH       TYPE YTESTT04-PRODH,             "P-CODE
STOQF       TYPE YTESTT04-STOQF,             "在庫区分
STOPF       TYPE YTESTT04-STOPF,             "在庫分配区分
RSTOPF      TYPE YTESTT04-RSTOPF,            "入出庫区分
STODATE     TYPE YTESTT04-STODATE,           "在庫日付
END   OF TYP_HKKU,

* 保管場所
BEGIN OF TYP_T001L,
WERKS       TYPE T001W-WERKS,                "プラント
LGORT       TYPE T001L-LGORT,                "保管場所
END   OF TYP_T001L,

TYP_T_MARA    TYPE STANDARD TABLE OF MARA-MATNR, "P-Code
TYP_T_TVTW    TYPE STANDARD TABLE OF TVTW-VTWEG, "流通チャネル
TYP_T_T001L   TYPE STANDARD TABLE OF TYP_T001L,  "保管場所
TYP_T_T001W   TYPE STANDARD TABLE OF T001W-WERKS,"プラント
TYP_T_HKKU    TYPE STANDARD TABLE OF TYP_HKKU,   "比較データ
TYP_T_UPDATE  TYPE STANDARD TABLE OF YTESTT04,   "更新用テーブル

* ダウンロードデータ
BEGIN OF TYP_DOWLOD,
MESSAGE     TYPE CHAR255,                    "ダウンロード情報
END   OF TYP_DOWLOD.

DATA:
TD_UPINFO     TYPE TABLE OF STRING,            "アップロード情報
TD_DOWLOD     TYPE TABLE OF TYP_DOWLOD,        "ダウンロードデータ
TD_UPLOAD     TYPE TABLE OF TYP_UPLOAD,        "アップロードデータ
TD_YTST04     TYPE TABLE OF YTESTT04.          "対象データ

CONSTANTS:
CNS_MSG_E     TYPE SY-MSGTY        VALUE 'E',    "タイプ
CNS_MSG_S     TYPE SY-MSGTY        VALUE 'S',    "タイプ
CNS_STOQF_A   TYPE YTESTT04-STOQF  VALUE 'A',    "在庫区分
CNS_STOQF_P   TYPE YTESTT04-STOQF  VALUE 'P',    "在庫区分
CNS_IN        TYPE YTESTT04-RSTOPF VALUE 'IN',   "入出庫区分
CNS_OUT       TYPE YTESTT04-RSTOPF VALUE 'OUT',  "入出庫区分
CNS_TOT       TYPE YTESTT04-RSTOPF VALUE 'TOT',  "入出庫区分
CNS_STOPF_L   TYPE YTESTT04-STOPF  VALUE '11',   "在庫分配区分
CNS_STOPF_B   TYPE YTESTT04-STOPF  VALUE '21',   "在庫分配区分
CNS_STOPF_N   TYPE YTESTT04-STOPF  VALUE '31'.   "在庫分配区分

SELECTION-SCREEN BEGIN OF BLOCK UPLOAD WITH FRAME TITLE TEXT-001.
SELECTION-SCREEN SKIP 1.
PARAMETERS:
P_UPLOAD    TYPE CHAR128 OBLIGATORY,         "アップロードパス
P_DOWLOD    TYPE CHAR128 OBLIGATORY.         "ログパス
SELECTION-SCREEN SKIP 1.
SELECTION-SCREEN END   OF BLOCK UPLOAD.
**********************************************************************
INITIALIZATION.

* 初期処理
PERFORM FRM_PROC_INIT.
**********************************************************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_UPLOAD.

* アップロードファイルパスの取得
PERFORM FRM_UPLOAD_FILE.
**********************************************************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_DOWLOD.

* ダウンロードファイルパスの取得
PERFORM FRM_DOWNLOAD_FILE.
**********************************************************************
AT SELECTION-SCREEN.

IF SY-BATCH = SPACE.
*-  アップロードパスの存在チェック
PERFORM FRM_CHECK_PASS.
ENDIF.
**********************************************************************
START-OF-SELECTION.

* 主処理
PERFORM FRM_PROC_MAIN.
*&---------------------------------------------------------------------*
*&      Form  FRM_PROC_INIT
*&---------------------------------------------------------------------*
*       初期処理
*----------------------------------------------------------------------*
FORM FRM_PROC_INIT.

* 初期処理
CLEAR:
TD_YTST04[],                                 "対象データ
TD_DOWLOD[],                                 "ダウンロードデータ
TD_UPLOAD[].                                 "アップロードデータ

ENDFORM.                    " FRM_PROC_INIT
*&---------------------------------------------------------------------*
*&      Form  FRM_PROC_MAIN
*&---------------------------------------------------------------------*
*       主処理
*----------------------------------------------------------------------*
FORM FRM_PROC_MAIN.

* ファイルの取り込み処理
PERFORM FRM_PROC_UPLOAD.

* 対象データのチェック
PERFORM FRM_CHECK_DATA.

* データの登録処理
PERFORM FRM_PROC_LOGON.

* エラーデータのダウンロード
PERFORM FRM_PROC_DOWLOD.

* レイアウト処理
PERFORM FRM_PROC_LAYOUT.

ENDFORM.                    " FRM_PROC_MAIN
*&---------------------------------------------------------------------*
*&      Form  FRM_PROC_UPLOAD
*&---------------------------------------------------------------------*
*       ファイルの取り込み処理
*----------------------------------------------------------------------*
FORM FRM_PROC_UPLOAD.

* プログラムの実行方式を判断する
IF SY-BATCH = SPACE.
*-  オンライン実行の場合
PERFORM FRM_PROC_ONLINE.
ELSE.
*-  バックグラウンド実行の場合
PERFORM FRM_PROC_BACKGD.
ENDIF.

ENDFORM.                    " FRM_PROC_UPLOAD
*&---------------------------------------------------------------------*
*&      Form  FRM_CHECK_DATA
*&---------------------------------------------------------------------*
*       対象データのチェック
*----------------------------------------------------------------------*
FORM FRM_CHECK_DATA.

* ローカル変数定義
DATA:
LTD_MARA    TYPE TABLE OF MARA-MATNR,        "P-Code
LTD_TVTW    TYPE TABLE OF TVTW-VTWEG,        "流通チャネル
LTD_T001L   TYPE TABLE OF TYP_T001L,         "保管場所
LTD_T001W   TYPE TABLE OF T001W-WERKS,       "プラント
LW_NUM      TYPE I,                          "数字書式
LW_LINE     TYPE I,                          "項目件数
LTD_BAKUP   TYPE TABLE OF STRING,            "バックアップ表
LTH_STRING  TYPE STRING,                     "アップロード情報
LTH_UPLOAD  TYPE TYP_UPLOAD,                 "アップロードデータ
LW_TABIX    TYPE SY-TABIX,                   "内部テーブルの索引
LW_MESSAGE  TYPE CHAR255.                    "メッセージ

* プラントの取得
PERFORM FRM_SELECT_T001W CHANGING LTD_T001W.

* 保管場所の取得
PERFORM FRM_SELECT_T001L CHANGING LTD_T001L.

* 流通チャネルの取得
PERFORM FRM_SELECT_TVTW CHANGING LTD_TVTW.

* P-Codeの取得
PERFORM FRM_SELECT_MARA CHANGING LTD_MARA.

LOOP AT TD_UPINFO INTO LTH_STRING.

LW_TABIX = SY-TABIX.

*-  項目数の調査処理
SPLIT LTH_STRING AT cl_abap_char_utilities=>horizontal_tab
INTO TABLE LTD_BAKUP.
*-  項目数の算出
DESCRIBE TABLE LTD_BAKUP LINES LW_LINE.      "項目件数

*-  項目件数の判断
IF LW_LINE < 12.
MESSAGE S002 WITH LW_TABIX INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
CONTINUE.
ENDIF.

*-  アップロードデータの取得
SPLIT LTH_STRING AT cl_abap_char_utilities=>horizontal_tab
INTO LTH_UPLOAD-WERKS         "プラント
LTH_UPLOAD-LGORT         "保管場所
LTH_UPLOAD-VTWEG         "流通チャネル
LTH_UPLOAD-PRODH         "P-CODE
LTH_UPLOAD-STOQF         "在庫区分
LTH_UPLOAD-STOPF         "在庫分配区分
LTH_UPLOAD-RSTOPF        "入出庫区分
LTH_UPLOAD-STODATE       "在庫日付
LTH_UPLOAD-MENGE         "在庫数量
LTH_UPLOAD-COMMENTS      "注釈
LTH_UPLOAD-DATAS         "生成日付
LTH_UPLOAD-USERS         "作成者
LTH_UPLOAD-OTHERS.       "余計な項目
APPEND LTH_UPLOAD TO TD_UPLOAD.

*-  プラントのチェック
IF LTH_UPLOAD-WERKS IS INITIAL.
MESSAGE S003 WITH LW_TABIX TEXT-M01 INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ELSE.
READ TABLE LTD_T001W TRANSPORTING NO FIELDS
WITH KEY TABLE_LINE = LTH_UPLOAD-WERKS   "プラント
BINARY SEARCH.
*--   リターンコードの判定
IF SY-SUBRC <> 0.
MESSAGE S010 WITH LW_TABIX TEXT-M01 INTO LW_MESSAGE.
*---    エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ENDIF.
ENDIF.

*- 保管場所のチェック
IF LTH_UPLOAD-LGORT IS INITIAL.
MESSAGE S003 WITH LW_TABIX TEXT-M02 INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ELSE.
READ TABLE LTD_T001L TRANSPORTING NO FIELDS
WITH KEY WERKS = LTH_UPLOAD-WERKS            "プラント
LGORT = LTH_UPLOAD-LGORT            "保管場所
BINARY SEARCH.
*--   リターンコードの判定
IF SY-SUBRC <> 0.
MESSAGE S010 WITH LW_TABIX TEXT-M02 INTO LW_MESSAGE.
*---    エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ENDIF.
ENDIF.

*-  流通チャネルのチェック
IF LTH_UPLOAD-VTWEG IS INITIAL.
MESSAGE S003 WITH LW_TABIX TEXT-M03 INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ELSE.
READ TABLE LTD_TVTW TRANSPORTING NO FIELDS
WITH KEY TABLE_LINE = LTH_UPLOAD-VTWEG   "流通チャネル
BINARY SEARCH.
*--   リターンコードの判定
IF SY-SUBRC <> 0.
MESSAGE S010 WITH LW_TABIX TEXT-M03 INTO LW_MESSAGE.
*---    エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ENDIF.
ENDIF.

*-  P-Codeのチェック
IF LTH_UPLOAD-PRODH IS INITIAL.
MESSAGE S003 WITH LW_TABIX TEXT-M04 INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ELSE.
READ TABLE LTD_MARA TRANSPORTING NO FIELDS
WITH KEY TABLE_LINE = LTH_UPLOAD-PRODH   "品目コード
BINARY SEARCH.
*--   リターンコードの判定
IF SY-SUBRC <> 0.
MESSAGE S010 WITH LW_TABIX TEXT-M04 INTO LW_MESSAGE.
*---    エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ENDIF.
ENDIF.

*-  在庫区分のチェック
IF LTH_UPLOAD-STOQF IS INITIAL.
MESSAGE S003 WITH LW_TABIX TEXT-M08 INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ELSE.
IF LTH_UPLOAD-STOQF <> CNS_STOQF_A AND
LTH_UPLOAD-STOQF <> CNS_STOQF_P.
MESSAGE S010 WITH LW_TABIX TEXT-M08 INTO LW_MESSAGE.
*---    エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ENDIF.
ENDIF.

*-  在庫分配区分のチェック
IF LTH_UPLOAD-STOPF IS INITIAL.
MESSAGE S003 WITH LW_TABIX TEXT-M05 INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ELSE.
IF LTH_UPLOAD-STOPF <> CNS_STOPF_L AND
LTH_UPLOAD-STOPF <> CNS_STOPF_B AND
LTH_UPLOAD-STOPF <> CNS_STOPF_N.
MESSAGE S010 WITH LW_TABIX TEXT-M05 INTO LW_MESSAGE.
*---    エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ENDIF.
ENDIF.

*-  入出庫区分のチェック
IF LTH_UPLOAD-RSTOPF IS INITIAL.
MESSAGE S003 WITH LW_TABIX TEXT-M09 INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ELSE.
IF LTH_UPLOAD-RSTOPF <> CNS_IN AND
LTH_UPLOAD-RSTOPF <> CNS_OUT AND
LTH_UPLOAD-RSTOPF <> CNS_TOT.
MESSAGE S010 WITH LW_TABIX TEXT-M09 INTO LW_MESSAGE.
*---    エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ENDIF.
ENDIF.

*-  数量のチェック
IF LTH_UPLOAD-MENGE IS INITIAL.
MESSAGE S003 WITH LW_TABIX TEXT-M06 INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ELSE.
CATCH SYSTEM-EXCEPTIONS CONVT_NO_NUMBER = 4.
LW_NUM = LTH_UPLOAD-MENGE.
ENDCATCH.
*--   変数書式の判断
IF SY-SUBRC <> 0.
MESSAGE S004 WITH LW_TABIX INTO LW_MESSAGE.
*---    エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ENDIF.
ENDIF.

*-  在庫日付のチェック
IF LTH_UPLOAD-STODATE = SPACE.
MESSAGE S003 WITH LW_TABIX TEXT-M07 INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ELSE.
*--   在庫日付の書式の判断
*      CALL FUNCTION 'CONVERT_DATE_WITH_THRESHOLD'
*        EXPORTING
*          INPUT                           = LTH_UPLOAD-STODATE
*         PLAUSIBILITY_CHECK              = 'X'
*         THRESHOLD                       = 50
**       IMPORTING
**         OUTPUT                          =
*       EXCEPTIONS
*         PLAUSIBILITY_CHECK_FAILED       = 1
*         WRONG_FORMAT_IN_INPUT           = 2
*         OTHERS                          = 3
*                .
*      IF SY-SUBRC <> 0.
*        MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*        WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*      ENDIF.
CALL FUNCTION 'CONVERT_DATE_INPUT'
EXPORTING
INPUT                           = LTH_UPLOAD-STODATE
PLAUSIBILITY_CHECK              = ABAP_ON
EXCEPTIONS
PLAUSIBILITY_CHECK_FAILED       = 1
WRONG_FORMAT_IN_INPUT           = 2
OTHERS                          = 3.
*--   リターンコードの判定
IF SY-SUBRC <> 0.
MESSAGE S005 WITH LW_TABIX INTO LW_MESSAGE.
*---    エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ENDIF.
ENDIF.

*-  生成日付のチェック
IF LTH_UPLOAD-DATAS = SPACE.
MESSAGE S003 WITH LW_TABIX TEXT-M10 INTO LW_MESSAGE.
*--   エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ELSE.
*--   生成日付の書式の判断
CALL FUNCTION 'CONVERT_DATE_INPUT'
EXPORTING
INPUT                           = LTH_UPLOAD-DATAS
PLAUSIBILITY_CHECK              = ABAP_ON
EXCEPTIONS
PLAUSIBILITY_CHECK_FAILED       = 1
WRONG_FORMAT_IN_INPUT           = 2
OTHERS                          = 3.
*--   リターンコードの判定
IF SY-SUBRC <> 0.
MESSAGE S008 WITH LW_TABIX INTO LW_MESSAGE.
*---    エラーデータの編集
PERFORM FRM_EDIT_ERROR USING LW_MESSAGE.
ENDIF.
ENDIF.

ENDLOOP.

ENDFORM.                    " FRM_CHECK_DATA
*&---------------------------------------------------------------------*
*&      Form  FRM_PROC_DOWLOD
*&---------------------------------------------------------------------*
*       エラーデータのダウンロード
*----------------------------------------------------------------------*
FORM FRM_PROC_DOWLOD.

* プログラムの実行方式を判断する
IF SY-BATCH = SPACE.
*-  オンライン処理
PERFORM FRM_DOLOAD_ONLINE.
ELSE.
*-  バックグラウンド処理
PERFORM FRM_DOLOAD_BKGROUND.
ENDIF.

ENDFORM.                    " FRM_PROC_DOWLOD
*&---------------------------------------------------------------------*
*&      Form  FRM_EDIT_ERROR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  I_MESSAGE      メッセージ
*----------------------------------------------------------------------*
FORM FRM_EDIT_ERROR USING I_MESSAGE TYPE TYP_DOWLOD-MESSAGE.

* ローカル変数定義
DATA:
LTH_DOWLOD  TYPE TYP_DOWLOD.                 "ダウンロードデータ

LTH_DOWLOD-MESSAGE = I_MESSAGE.                "情報
APPEND LTH_DOWLOD TO TD_DOWLOD.

ENDFORM.                    " FRM_EDIT_ERROR
*&---------------------------------------------------------------------*
*&      Form  FRM_PROC_LAYOUT
*&---------------------------------------------------------------------*
*       レイアウト処理
*----------------------------------------------------------------------*
FORM FRM_PROC_LAYOUT.

* ローカル変数定義
DATA:
LTH_DOWLOD  TYPE TYP_DOWLOD.                 "ダウンロードデータ

* タイトルの設定
SET TITLEBAR '100'.

LOOP AT TD_DOWLOD INTO LTH_DOWLOD.
WRITE:
/ LTH_DOWLOD-MESSAGE.                      "ダウンロード情報
ENDLOOP.

ENDFORM.                    " FRM_PROC_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  FRM_UPLOAD_FILE
*&---------------------------------------------------------------------*
*       アップロードファイルパスの取得
*----------------------------------------------------------------------*
FORM FRM_UPLOAD_FILE.

* ローカル変数定義
DATA:
LTD_FILE TYPE FILETABLE,                     "選択したファイルを維持するテーブル
LW_RC    TYPE I.                             "リターンコード ファイル数

* アップロードファイルパスの取得
CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
CHANGING
FILE_TABLE              = LTD_FILE         "選択したファイルを維持するテーブル
RC                      = LW_RC            "リターンコード ファイル数
EXCEPTIONS
FILE_OPEN_DIALOG_FAILED = 1
CNTL_ERROR              = 2
ERROR_NO_GUI            = 3
NOT_SUPPORTED_BY_GUI    = 4
OTHERS                  = 5.

* リターンコードの判定
IF SY-SUBRC = 0.
*-  アップロードファイルパスの取得
READ TABLE LTD_FILE INTO P_UPLOAD INDEX 1.
ELSE.
*-  システムメッセージの出力
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

ENDFORM.                    " FRM_UPLOAD_FILE
*&---------------------------------------------------------------------*
*&      Form  FRM_DOWNLOAD_FILE
*&---------------------------------------------------------------------*
*       ダウンロードファイルパスの取得
*----------------------------------------------------------------------*
FORM FRM_DOWNLOAD_FILE.

* ローカル変数定義
DATA:
LW_FNAME    TYPE STRING,                     "ファイル名
LW_PATH     TYPE STRING,                     "ファイルパス
LW_FUPATH   TYPE STRING.                     "ファイルパスと名

* ダウンロードファイルパスの取得
CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_SAVE_DIALOG
CHANGING
FILENAME             = LW_FNAME            "ファイル名
PATH                 = LW_PATH             "ファイルパス
FULLPATH             = LW_FUPATH           "ファイルパスと名
EXCEPTIONS
CNTL_ERROR           = 1
ERROR_NO_GUI         = 2
NOT_SUPPORTED_BY_GUI = 3
OTHERS               = 4.

* リターンコードの判定
IF SY-SUBRC <> 0.
*-  システムメッセージの出力
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ELSE.
*-  ダウンロードファイルパスの取得
P_DOWLOD = LW_FUPATH.
ENDIF.

ENDFORM.                    " FRM_DOWNLOAD_FILE
*&---------------------------------------------------------------------*
*&      Form  FRM_PROC_ONLINE
*&---------------------------------------------------------------------*
*       オンライン実行の場合
*----------------------------------------------------------------------*
FORM FRM_PROC_ONLINE.

* ローカル変数定義
DATA:
LW_FILENAME TYPE STRING.                     "アップロードパス

LW_FILENAME = P_UPLOAD.                        "アップロードパス

* ファイルのアップロード処理
CALL FUNCTION 'GUI_UPLOAD'
EXPORTING
FILENAME                = LW_FILENAME      "アップロードパス
FILETYPE                = 'ASC'
TABLES
DATA_TAB                = TD_UPINFO        "アップロード情報
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
OTHERS                  = 17.
* リターンコードの判定
IF SY-SUBRC <> 0.
*-- メッセージの出力
MESSAGE S001 DISPLAY LIKE CNS_MSG_E.
LEAVE LIST-PROCESSING.
ENDIF.

* 削除処理
DELETE TD_UPINFO INDEX 1.

IF TD_UPINFO IS INITIAL.
*-  メッセージの出力
MESSAGE S013 DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

ENDFORM.                    " FRM_PROC_ONLINE
*&---------------------------------------------------------------------*
*&      Form  FRM_PROC_BACKGD
*&---------------------------------------------------------------------*
*       バックグラウンド実行の場合
*----------------------------------------------------------------------*
FORM FRM_PROC_BACKGD.

* ローカル変数定義
DATA:
LW_STING    TYPE STRING.                     "レコード情報

* オーペン処理
OPEN DATASET P_UPLOAD FOR INPUT
IN TEXT MODE ENCODING UTF-8
IGNORING CONVERSION ERRORS.

* リターンコードの判定
IF SY-SUBRC <> 0.
*-  メッセージの出力
MESSAGE E009.
ENDIF.

DO.

*-  ファイルの取り込み処理
READ DATASET P_UPLOAD INTO LW_STING.

*-  リターンコードの判定
IF SY-SUBRC = 0.
APPEND LW_STING TO TD_UPINFO.
ELSE.
EXIT.
ENDIF.

ENDDO.

* クロース処理
CLOSE DATASET P_UPLOAD.

* 削除処理
DELETE TD_UPINFO INDEX 1.

IF TD_UPINFO IS INITIAL.
*-  メッセージの出力
MESSAGE E013.
ENDIF.

ENDFORM.                    " FRM_PROC_BACKGD
*&---------------------------------------------------------------------*
*&      Form  FRM_PROC_LOGON
*&---------------------------------------------------------------------*
*       データの登録処理
*----------------------------------------------------------------------*
FORM FRM_PROC_LOGON.

* ローカル変数定義
DATA:
LTD_INSERT  TYPE TABLE OF YTESTT04,          "登録用テーブル
LTD_UPDATE  TYPE TABLE OF YTESTT04,          "更新用テーブル
LTH_YTST04  TYPE YTESTT04,                   "対象データ
LTD_HKKU    TYPE TABLE OF TYP_HKKU.          "比較データ

* ダウンロードデータの初期値の判断
CHECK TD_DOWLOD IS INITIAL.

* 対象データの取得
PERFORM FRM_GET_DATA.

* テーブルをロックする
PERFORM FRM_LOCK_TABLE.

* 対象データの取得
PERFORM FRM_SELECT_YTESTT04 CHANGING LTD_HKKU.

LOOP AT  TD_YTST04 INTO LTH_YTST04.

*-  ソート処理
SORT LTD_HKKU BY WERKS   ASCENDING           "プラント
LGORT   ASCENDING           "保管場所
VTWEG   ASCENDING           "流通チャネル
PRODH   ASCENDING           "P-CODE
STOQF   ASCENDING           "在庫区分
STOPF   ASCENDING           "在庫分配区分
RSTOPF  ASCENDING           "入出庫区分
STODATE ASCENDING.          "在庫日付

READ TABLE LTD_HKKU TRANSPORTING NO FIELDS
WITH KEY WERKS    = LTH_YTST04-WERKS       "プラント
LGORT    = LTH_YTST04-LGORT       "保管場所
VTWEG    = LTH_YTST04-VTWEG       "流通チャネル
PRODH    = LTH_YTST04-PRODH       "P-CODE
STOQF    = LTH_YTST04-STOQF       "在庫区分
STOPF    = LTH_YTST04-STOPF       "在庫分配区分
RSTOPF   = LTH_YTST04-RSTOPF      "入出庫区分
STODATE  = LTH_YTST04-STODATE     "在庫日付
BINARY SEARCH.

*-  リターンコードの判定
IF SY-SUBRC = 0.
APPEND LTH_YTST04 TO LTD_UPDATE.
ELSE.
APPEND LTH_YTST04 TO LTD_INSERT.
ENDIF.

ENDLOOP.

* 登録処理
PERFORM FRM_INSERT_YTESTT04 USING LTD_INSERT.

* 更新処理
PERFORM FRM_UPDATE_YTESTT04 USING LTD_UPDATE.

COMMIT WORK AND WAIT.

* ロックを解除する
PERFORM FRM_UNLOCK_TABLE.

ENDFORM.                    " FRM_PROC_LOGON
*&---------------------------------------------------------------------*
*&      Form  FRM_SELECT_YTESTT04
*&---------------------------------------------------------------------*
*       対象データの取得
*----------------------------------------------------------------------*
*  <--  T_HKKU        比較データ
*----------------------------------------------------------------------*
FORM FRM_SELECT_YTESTT04 CHANGING T_HKKU TYPE TYP_T_HKKU.

* ローカル変数定義
DATA:
LTD_BAK_YTST04 TYPE TABLE OF YTESTT04.       "対象データ

LTD_BAK_YTST04[] = TD_YTST04[].

* ソート処理
SORT LTD_BAK_YTST04 BY WERKS    ASCENDING      "プラント
LGORT    ASCENDING      "保管場所
VTWEG    ASCENDING      "流通チャネル
PRODH    ASCENDING      "P-CODE
STOQF    ASCENDING      "在庫区分
STOPF    ASCENDING      "在庫分配区分
RSTOPF   ASCENDING      "入出庫区分
STODATE  ASCENDING.     "在庫日付

* 重複項の削除処理
DELETE ADJACENT DUPLICATES FROM LTD_BAK_YTST04
COMPARING WERKS          "プラント
LGORT          "保管場所
VTWEG          "流通チャネル
PRODH          "P-CODE
STOQF          "在庫区分
STOPF          "在庫分配区分
RSTOPF         "入出庫区分
STODATE.       "在庫日付

* 比較データの取得
SELECT WERKS                                   "プラント
LGORT                                   "保管場所
VTWEG                                   "流通チャネル
PRODH                                   "P-CODE
STOQF                                   "在庫区分
STOPF                                   "在庫分配区分
RSTOPF                                  "入出庫区分
STODATE                                 "在庫日付
FROM YTESTT04
INTO TABLE T_HKKU
FOR ALL ENTRIES IN LTD_BAK_YTST04
WHERE WERKS    = LTD_BAK_YTST04-WERKS         "プラント
AND LGORT    = LTD_BAK_YTST04-LGORT         "保管場所
AND VTWEG    = LTD_BAK_YTST04-VTWEG         "流通チャネル
AND PRODH    = LTD_BAK_YTST04-PRODH         "P-CODE
AND STOQF    = LTD_BAK_YTST04-STOQF         "在庫区分
AND STOPF    = LTD_BAK_YTST04-STOPF         "在庫分配区分
AND RSTOPF   = LTD_BAK_YTST04-RSTOPF        "入出庫区分
AND STODATE  = LTD_BAK_YTST04-STODATE.      "在庫日付

ENDFORM.                    " FRM_SELECT_YTESTT04
*&---------------------------------------------------------------------*
*&      Form  FRM_GET_DATA
*&---------------------------------------------------------------------*
*       対象データの取得
*----------------------------------------------------------------------*
FORM FRM_GET_DATA.

* ローカル変数定義
DATA:
LTH_YTST04  TYPE YTESTT04,                   "対象データ
LTH_UPLOAD  TYPE TYP_UPLOAD.                 "アップロードデータ

LOOP AT TD_UPLOAD INTO LTH_UPLOAD.
LTH_YTST04-WERKS     = LTH_UPLOAD-WERKS.     "プラント
LTH_YTST04-LGORT     = LTH_UPLOAD-LGORT.     "保管場所
LTH_YTST04-VTWEG     = LTH_UPLOAD-VTWEG.     "流通チャネル
LTH_YTST04-PRODH     = LTH_UPLOAD-PRODH.     "P-CODE
LTH_YTST04-STOQF     = LTH_UPLOAD-STOQF.     "在庫区分
LTH_YTST04-STOPF     = LTH_UPLOAD-STOPF.     "在庫分配区分
LTH_YTST04-RSTOPF    = LTH_UPLOAD-RSTOPF.    "入出庫区分
LTH_YTST04-STODATE   = LTH_UPLOAD-STODATE.   "在庫日付
LTH_YTST04-MENGE     = LTH_UPLOAD-MENGE.     "在庫数量
LTH_YTST04-COMMENTS  = LTH_UPLOAD-COMMENTS.  "注釈
LTH_YTST04-DATAS     = LTH_UPLOAD-DATAS.     "生成日付
LTH_YTST04-USERS     = LTH_UPLOAD-USERS.     "作成者
LTH_YTST04-UDATE     = SY-DATUM.             "システム日付
LTH_YTST04-CRNAM     = SY-UNAME.             "ユーザ
APPEND LTH_YTST04 TO TD_YTST04.
ENDLOOP.

ENDFORM.                    " FRM_GET_DATA
*&---------------------------------------------------------------------*
*&      Form  FRM_LOCK_TABLE
*&---------------------------------------------------------------------*
*       テーブルをロックする
*----------------------------------------------------------------------*
FORM FRM_LOCK_TABLE.

* テーブルをロックする
CALL FUNCTION 'ENQUEUE_EZYTESTT04'
EXPORTING
MODE_YTESTT04        = 'E'
EXCEPTIONS
FOREIGN_LOCK         = 1
SYSTEM_FAILURE       = 2
OTHERS               = 3.

* リターンコードの判定
IF SY-SUBRC <> 0.

IF SY-BATCH = SPACE.
*--   メッセージの出力
MESSAGE ID SY-MSGID TYPE CNS_MSG_S NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE CNS_MSG_E.

LEAVE LIST-PROCESSING.
ELSE.
*--   メッセージの出力
MESSAGE ID SY-MSGID TYPE CNS_MSG_E NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

ENDIF.

ENDFORM.                    " FRM_LOCK_TABLE
*&---------------------------------------------------------------------*
*&      Form  FRM_UNLOCK_TABLE
*&---------------------------------------------------------------------*
*       ロックを解除する
*----------------------------------------------------------------------*
FORM FRM_UNLOCK_TABLE.

* ロックを解除する
CALL FUNCTION 'DEQUEUE_EZYTESTT04'.

ENDFORM.                    " FRM_UNLOCK_TABLE
*&---------------------------------------------------------------------*
*&      Form  FRM_INSERT_YTESTT04
*&---------------------------------------------------------------------*
*       登録処理
*----------------------------------------------------------------------*
*  -->  T_INSERT        登録用テーブル
*----------------------------------------------------------------------*
FORM FRM_INSERT_YTESTT04 USING T_INSERT TYPE TYP_T_UPDATE.

* ローカル変数定義
DATA:
LW_LINE     TYPE I,                          "削除前件数
LW_LINES    TYPE I,                          "削除後件数
LTH_DOWLOD  TYPE TYP_DOWLOD,                 "ダウンロードデータ
LW_COUNT    TYPE I.                          "登録件数

* チェック処理
CHECK T_INSERT IS NOT INITIAL.

* 削除前件数の算出
DESCRIBE TABLE T_INSERT LINES LW_LINE.

* ソート処理
SORT T_INSERT BY WERKS   ASCENDING             "プラント
LGORT   ASCENDING             "保管場所
VTWEG   ASCENDING             "流通チャネル
PRODH   ASCENDING             "P-CODE
STOQF   ASCENDING             "在庫区分
STOPF   ASCENDING             "在庫分配区分
RSTOPF  ASCENDING             "入出庫区分
STODATE ASCENDING.            "在庫日付

* 重複な項目の削除
DELETE ADJACENT DUPLICATES FROM T_INSERT
COMPARING WERKS          "プラント
LGORT          "保管場所
VTWEG          "流通チャネル
PRODH          "P-CODE
STOQF          "在庫区分
STOPF          "在庫分配区分
RSTOPF         "入出庫区分
STODATE.       "在庫日付
* 削除後件数の算出
DESCRIBE TABLE T_INSERT LINES LW_LINES.

IF LW_LINES <>  LW_LINE.
IF SY-BATCH = SPACE.
*--   メッセージの出力
MESSAGE S016 DISPLAY LIKE CNS_MSG_E.
LEAVE LIST-PROCESSING.
ELSE.
*--   メッセージの出力
MESSAGE E016.
ENDIF.
ENDIF.

*-  登録処理
INSERT YTESTT04 FROM TABLE T_INSERT ACCEPTING DUPLICATE KEYS.

*-  リターンコードの判定
IF SY-SUBRC <> 0.
IF SY-BATCH = SPACE.
ROLLBACK WORK.
*---    ロックを解除する
PERFORM FRM_UNLOCK_TABLE.
*---    メッセージの出力
MESSAGE S015 DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ELSE.
ROLLBACK WORK.
*---    ロックを解除する
PERFORM FRM_UNLOCK_TABLE.
*---    メッセージの出力
MESSAGE E015.
ENDIF.
ENDIF.

* 登録データの算出
DESCRIBE TABLE T_INSERT LINES LW_COUNT.

* 成功に登録する場合
MESSAGE S006 WITH LW_COUNT INTO LTH_DOWLOD.
APPEND LTH_DOWLOD TO TD_DOWLOD.

ENDFORM.                    " FRM_INSERT_YTESTT04
*&---------------------------------------------------------------------*
*&      Form  FRM_UPDATE_YTESTT04
*&---------------------------------------------------------------------*
*       更新処理
*----------------------------------------------------------------------*
*  -->  T_UPDATE        更新用テーブル
*----------------------------------------------------------------------*
FORM FRM_UPDATE_YTESTT04 USING T_UPDATE TYPE TYP_T_UPDATE.

* ローカル変数定義
DATA:
LW_LINE     TYPE I,                          "削除前件数
LW_LINES    TYPE I,                          "削除後件数
LTH_DOWLOD  TYPE TYP_DOWLOD,                 "ダウンロードデータ
LW_COUNT    TYPE I.                          "更新件数

* チェック処理
CHECK T_UPDATE IS NOT INITIAL.

* 削除前件数の算出
DESCRIBE TABLE T_UPDATE LINES LW_LINE.

* ソート処理
SORT T_UPDATE BY WERKS   ASCENDING             "プラント
LGORT   ASCENDING             "保管場所
VTWEG   ASCENDING             "流通チャネル
PRODH   ASCENDING             "P-CODE
STOQF   ASCENDING             "在庫区分
STOPF   ASCENDING             "在庫分配区分
RSTOPF  ASCENDING             "入出庫区分
STODATE ASCENDING.            "在庫日付

* 重複な項目の削除
DELETE ADJACENT DUPLICATES FROM T_UPDATE
COMPARING WERKS          "プラント
LGORT          "保管場所
VTWEG          "流通チャネル
PRODH          "P-CODE
STOQF          "在庫区分
STOPF          "在庫分配区分
RSTOPF         "入出庫区分
STODATE.       "在庫日付
* 削除後件数の算出
DESCRIBE TABLE T_UPDATE LINES LW_LINES.

IF LW_LINES <>  LW_LINE.
IF SY-BATCH = SPACE.
*--   メッセージの出力
MESSAGE S016 DISPLAY LIKE CNS_MSG_E.
LEAVE LIST-PROCESSING.
ELSE.
*--   メッセージの出力
MESSAGE E016.
ENDIF.
ENDIF.

* 更新処理
UPDATE YTESTT04 FROM TABLE T_UPDATE.

*-- リターンコードの判定
IF SY-SUBRC <> 0.

IF SY-BATCH = SPACE.
ROLLBACK WORK.
*---    ロックを解除する
PERFORM FRM_UNLOCK_TABLE.
*---    メッセージの出力
MESSAGE S007 DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ELSE.
ROLLBACK WORK.
*---    ロックを解除する
PERFORM FRM_UNLOCK_TABLE.
*---    メッセージの出力
MESSAGE E007.
ENDIF.

ENDIF.

* 更新データの算出
DESCRIBE TABLE T_UPDATE LINES LW_COUNT.

* 成功に更新する場合
MESSAGE S014 WITH LW_COUNT INTO LTH_DOWLOD.
APPEND LTH_DOWLOD TO TD_DOWLOD.

ENDFORM.                    " FRM_UPDATE_YTESTT04
*&---------------------------------------------------------------------*
*&      Form  FRM_SELECT_T001W
*&---------------------------------------------------------------------*
*       プラントの取得
*----------------------------------------------------------------------*
*  <--  p2        プラント
*----------------------------------------------------------------------*
FORM FRM_SELECT_T001W CHANGING T_T001W TYPE TYP_T_T001W.

SELECT WERKS                                   "プラント
FROM T001W
INTO TABLE T_T001W.

* ソート処理
SORT T_T001W BY TABLE_LINE ASCENDING.          "プラント

ENDFORM.                    " FRM_SELECT_T001W
*&---------------------------------------------------------------------*
*&      Form  FRM_SELECT_T001L
*&---------------------------------------------------------------------*
*       保管場所の取得
*----------------------------------------------------------------------*
*  <--  T_T001L        保管場所
*----------------------------------------------------------------------*
FORM FRM_SELECT_T001L CHANGING T_T001L TYPE TYP_T_T001L.

SELECT WERKS                                   "プラント
LGORT                                   "保管場所
FROM T001L
INTO TABLE T_T001L.

* ソート処理
SORT T_T001L BY WERKS ASCENDING                "プラント
LGORT ASCENDING.               "保管場所

ENDFORM.                    " FRM_SELECT_T001L
*&---------------------------------------------------------------------*
*&      Form  FRM_SELECT_TVTW
*&---------------------------------------------------------------------*
*       流通チャネルの取得
*----------------------------------------------------------------------*
*   <-- T_TVTW  流通チャネル
*----------------------------------------------------------------------*
FORM FRM_SELECT_TVTW  CHANGING T_TVTW TYPE TYP_T_TVTW.

SELECT VTWEG                                   "流通チャネル
FROM TVTW
INTO TABLE T_TVTW.

* ソート処理
SORT T_TVTW BY TABLE_LINE ASCENDING.           "流通チャネル

ENDFORM.                    " FRM_SELECT_TVTW
*&---------------------------------------------------------------------*
*&      Form  FRM_SELECT_MARA
*&---------------------------------------------------------------------*
*       P-Codeの取得
*----------------------------------------------------------------------*
*  <--  T_MARA        P-Code
*----------------------------------------------------------------------*
FORM FRM_SELECT_MARA CHANGING T_MARA TYPE TYP_T_MARA.

SELECT MATNR                                   "P-Code
FROM MARA
INTO TABLE T_MARA.

* ソート処理
SORT T_MARA BY TABLE_LINE ASCENDING.           "P-Code

ENDFORM.                    " FRM_SELECT_MARA
*&---------------------------------------------------------------------*
*&      Form  FRM_DOLOAD_ONLINE
*&---------------------------------------------------------------------*
*       オンライン処理
*----------------------------------------------------------------------*
FORM FRM_DOLOAD_ONLINE.

* ローカル変数定義
DATA:
LW_FILENAME TYPE STRING.                     "ログパス

LW_FILENAME = P_DOWLOD.

* エラーデータのダウンロード
CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
FILENAME                = LW_FILENAME      "ダウンロードパス
FILETYPE                = 'ASC'
TABLES
DATA_TAB                = TD_DOWLOD        "ダウンロードデータ
EXCEPTIONS
FILE_WRITE_ERROR        = 1
NO_BATCH                = 2
GUI_REFUSE_FILETRANSFER = 3
INVALID_TYPE            = 4
NO_AUTHORITY            = 5
UNKNOWN_ERROR           = 6
HEADER_NOT_ALLOWED      = 7
SEPARATOR_NOT_ALLOWED   = 8
FILESIZE_NOT_ALLOWED    = 9
HEADER_TOO_LONG         = 10
DP_ERROR_CREATE         = 11
DP_ERROR_SEND           = 12
DP_ERROR_WRITE          = 13
UNKNOWN_DP_ERROR        = 14
ACCESS_DENIED           = 15
DP_OUT_OF_MEMORY        = 16
DISK_FULL               = 17
DP_TIMEOUT              = 18
FILE_NOT_FOUND          = 19
DATAPROVIDER_EXCEPTION  = 20
CONTROL_FLUSH_ERROR     = 21
OTHERS                  = 22.
*-  リターンコードの判定
IF SY-SUBRC <> 0.
*--   メッセージの出力
MESSAGE S011 DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

ENDFORM.                    " FRM_DOLOAD_ONLINE
*&---------------------------------------------------------------------*
*&      Form  FRM_DOLOAD_BKGROUND
*&---------------------------------------------------------------------*
*       バックグラウンド処理
*----------------------------------------------------------------------*
FORM FRM_DOLOAD_BKGROUND.

* ローカル変数定義
DATA:
LTH_DOWLOD  TYPE TYP_DOWLOD.                 "ダウンロードデータ

* オーペン処理
OPEN DATASET P_DOWLOD FOR OUTPUT
IN TEXT MODE ENCODING UTF-8
IGNORING CONVERSION ERRORS.

* 書き込み処理
LOOP AT TD_DOWLOD INTO LTH_DOWLOD.
TRANSFER LTH_DOWLOD-MESSAGE TO P_DOWLOD.
ENDLOOP.

* クロース処理
CLOSE DATASET P_UPLOAD.

ENDFORM.                    " FRM_DOLOAD_BKGROUND
*&---------------------------------------------------------------------*
*&      Form  FRM_CHECK_PASS
*&---------------------------------------------------------------------*
*       アップロードパスの存在チェック
*----------------------------------------------------------------------*
FORM FRM_CHECK_PASS.

* ローカル変数定義
DATA:
LW_RESULT  TYPE ABAP_BOOL,                   "リターンコード
LW_UPLOAD  TYPE STRING.                      "アップロードパス

LW_UPLOAD = P_UPLOAD.

CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_EXIST
EXPORTING
FILE                 = LW_UPLOAD           "アップロードパス
RECEIVING
RESULT               = LW_RESULT           "リターンコード
EXCEPTIONS
CNTL_ERROR           = 1
ERROR_NO_GUI         = 2
WRONG_PARAMETER      = 3
NOT_SUPPORTED_BY_GUI = 4
OTHERS               = 5.

* リターンコードの判定
IF LW_RESULT <> ABAP_ON.
*- メッセージの出力
MESSAGE E017.
ENDIF.

ENDFORM.                    " FRM_CHECK_PASS
