REPORT ZZUNREJE LINE-SIZE 200.
INCLUDE RVDIREKT.
* Unreject sales items referring to active purchase orders
TABLES: VBFA, VBAP, VBEP, EKPO, EKET, T100, EBAN, TVAP, EBKN.

DATA: BEGIN OF PROT OCCURS 1,
VBELN LIKE VBAP-VBELN,
POSNR LIKE VBAP-POSNR,
BANFN LIKE VBEP-BANFN,
BNFPO LIKE VBEP-BNFPO,
MENGE LIKE EKPO-MENGE,
ABGRU LIKE VBAP-ABGRU,
ETENR LIKE VBEP-ETENR,
ETTYP LIKE VBEP-ETTYP,
RC(3) TYPE N,
TEXT(80),
END OF PROT,
PROT_NEXT LIKE PROT,
DA_RC(3) TYPE N,
DA_TABIX LIKE SY-TABIX,
DA_DBCNT LIKE SY-DBCNT,
OLD_VBELN LIKE VBAP-VBELN,
DA_NEW_PRICING.

FIELD-SYMBOLS: <SVBAP-TABIX> LIKE SY-TABIX,
<FUNCTION_NEW_PRICING> TYPE C.

CONSTANTS: ABGRU_NULL LIKE VBAP-ABGRU VALUE IS INITIAL,
TRUE VALUE CHARX.

SELECTION-SCREEN BEGIN OF BLOCK 001 WITH FRAME TITLE TEXT-102.
SELECT-OPTIONS: VBELN FOR VBAP-VBELN,
POSNR FOR VBAP-POSNR,
ABGRU FOR VBAP-ABGRU,
PSTYV FOR VBAP-PSTYV.
PARAMETERS: UPDATE AS CHECKBOX DEFAULT SPACE.
SELECTION-SCREEN END OF BLOCK 001.
SELECTION-SCREEN BEGIN OF BLOCK 002 WITH FRAME TITLE TEXT-103.
PARAMETERS: AUSF RADIOBUTTON GROUP 001,
KURZ RADIOBUTTON GROUP 001 DEFAULT 'X'.
SELECTION-SCREEN END OF BLOCK 002.

SELECT * FROM VBAP WHERE VBELN IN VBELN AND
POSNR IN POSNR AND
PSTYV IN PSTYV AND
ABGRU IN ABGRU AND
NOT ABGRU EQ ABGRU_NULL.

SELECT * FROM VBEP WHERE VBELN = VBAP-VBELN AND
POSNR = VBAP-POSNR AND
WMENG GT 0.
EXIT.
ENDSELECT.
IF SY-SUBRC NE 0.
PERFORM PROTOKOLL USING '001'.
CONTINUE.
ENDIF.
IF VBEP-BSART IS INITIAL.
PERFORM PROTOKOLL USING '002'.
CONTINUE.
ENDIF.
IF VBEP-BWART IS INITIAL.
PERFORM PROTOKOLL USING '003'.
CONTINUE.
ENDIF.
IF VBAP-SOBKZ NE CHARE.
PERFORM PROTOKOLL USING '004'.
CONTINUE.
ENDIF.

* Bestellung aus Belegfluﬂ suchen, die L÷KZ hat
DA_RC = 005.
SELECT * FROM VBFA WHERE VBELV = VBAP-VBELN AND
POSNV = VBAP-POSNR AND
VBTYP_N EQ VBTYP_BESTELL.
DA_RC = 006.
SELECT * FROM EKPO WHERE EBELN = VBFA-VBELN AND
EBELP = VBFA-POSNN.
IF EKPO-LOEKZ EQ SPACE.
DA_RC = 000.
EXIT.
ELSE.

DA_RC = 007.
ENDIF.
ENDSELECT.
IF DA_RC = 000.
EXIT.
ENDIF.
ENDSELECT.
IF DA_RC NE 000.
PERFORM PROTOKOLL USING DA_RC.
CONTINUE.
ENDIF.

SELECT * FROM EKET WHERE EBELN = EKPO-EBELN AND
EBELP = EKPO-EBELP.
EXIT.
ENDSELECT.
IF SY-SUBRC NE 0.
PERFORM PROTOKOLL USING '012'.
CONTINUE.
ENDIF.

IF UPDATE EQ TRUE.
UPDATE EBAN SET LOEKZ = SPACE WHERE BANFN = EKET-BANFN AND
BNFPO = EKET-BNFPO.
IF SY-SUBRC NE 0.
PERFORM PROTOKOLL USING '010'.
CONTINUE.
ENDIF.

UPDATE EBKN SET LOEKZ = SPACE WHERE BANFN = EKET-BANFN AND
BNFPO = EKET-BNFPO.
IF SY-SUBRC NE 0.
PERFORM PROTOKOLL USING '011'.
CONTINUE.
ENDIF.

SELECT SINGLE KOWRR INTO VBAP-KOWRR
FROM TVAP WHERE PSTYV = VBAP-PSTYV.
VBAP-ABGRU = SPACE.
VBAP-KBMENG = EKPO-MENGE.
UPDATE VBAP.
IF SY-SUBRC NE 0.
PERFORM PROTOKOLL USING '008'.
CONTINUE.
ENDIF.

VBEP-BANFN = EKET-BANFN.
VBEP-BNFPO = EKET-BNFPO.
VBEP-BMENG = EKPO-MENGE.
VBEP-WEPOS = CHARC.
UPDATE VBEP.
IF SY-SUBRC NE 0.
PERFORM PROTOKOLL USING '009'.
CONTINUE.
ENDIF.
ENDIF.

PERFORM PROTOKOLL USING '000'.

ENDSELECT.
DA_DBCNT = SY-DBCNT.

* ƒnderungen vornehmen
IF UPDATE EQ TRUE.

* Datenbank‰nderungen aus Vorstep durchfÅEren
COMMIT WORK AND WAIT.

SORT PROT BY RC VBELN POSNR ETENR.

MESSAGE S999(V1) WITH 'Kundenauftr‰ge lesen...'.
CLEAR OLD_VBELN.
LOOP AT PROT WHERE RC EQ 000.
DA_TABIX = SY-TABIX + 1.

* Erste Position des Belegs (Vermeidung von AT NEW ... )
IF PROT-VBELN NE OLD_VBELN.
CALL FUNCTION 'SD_SALES_DOCUMENT_READ'
EXPORTING
DOCUMENT_NUMBER = PROT-VBELN
EXCEPTIONS
ERROR_MESSAGE   = 1
OTHERS          = 2.
DA_RC = SY-SUBRC.
IF SY-SUBRC > 0.
PERFORM FEHLER_AUSGEBEN.
ENDIF.
OLD_VBELN = PROT-VBELN.
ELSE.
DA_RC = 0.
ENDIF.

* Preisfindung fÅE alle Positionen mit 'A' aufrufen (alten Wert mer
IF DA_RC EQ 0.
ASSIGN ('(SAPFV45P)SVBAP-TABIX') to <SVBAP-TABIX>.
ASSIGN ('(SAPFV45P)FUNCTION_NEW_PRICING')
TO <FUNCTION_NEW_PRICING>.
PERFORM XVBAP_LESEN_DIREKT(SAPFV45P) USING PROT-POSNR
CHANGING <SVBAP-TABIX>.
PERFORM VBAP_BEARBEITEN_VORBEREITEN(SAPFV45P).
DA_NEW_PRICING = <FUNCTION_NEW_PRICING>.
<FUNCTION_NEW_PRICING> = 'A'.
PERFORM VBAP_BEARBEITEN_ENDE(SAPFV45P).
<FUNCTION_NEW_PRICING> = DA_NEW_PRICING.
ENDIF.

* Letzte Position des Belegs (Vermeidung von AT LAST)
READ TABLE PROT INDEX DA_TABIX INTO PROT_NEXT.
IF PROT_NEXT-VBELN NE PROT-VBELN OR SY-SUBRC NE 0.
* Status aktualisieren (Absagestatus, Lieferstatus etc.)
CALL FUNCTION 'SD_SALES_DOCUMENT_PERFORM'
EXPORTING
IN_PROGRAM = 'SAPFV45P'
PERFORM    = 'XVBUP_NEUERMITTELN'.
CALL FUNCTION 'SD_SALES_DOCUMENT_SAVE'
EXPORTING
SYNCHRON                   = 'X'

STATUS_BUFFER_REFRESH      = 'X'
REQUISITION_BUFFER_REFRESH = 'X'
EXCEPTIONS
ERROR_MESSAGE              = 1
OTHERS                     = 2.
IF SY-SUBRC EQ 0.
SY-MSGID = 'V1'.
SY-MSGNO = '311'.
SY-MSGV1 = 'Verkaufsbeleg'.
SY-MSGV2 = PROT-VBELN.
ELSE.
PROT-RC = 013.
ENDIF.
* Beim Sichern die letzte Meldung ausgeben
PERFORM FEHLER_AUSGEBEN.
ENDIF.

ENDLOOP.
MESSAGE S999(V1) WITH 'Fertig.'.
ENDIF.

* Ausgabe
SORT PROT BY VBELN POSNR RC.
LOOP AT PROT.
CHECK KURZ EQ SPACE OR
PROT-RC EQ 000 OR
PROT-RC GE 005.
IF PROT-RC EQ 000.
FORMAT COLOR COL_POSITIVE.
IF UPDATE EQ SPACE.
PROT-TEXT = TEXT-101.
ENDIF.
ELSE.
FORMAT COLOR COL_NEGATIVE.
ENDIF.
WRITE: /    PROT-VBELN,
PROT-POSNR,
PROT-ETENR,
PROT-BANFN,
PROT-BNFPO,
PROT-RC,
PROT-TEXT.
ENDLOOP.

FORMAT COLOR COL_TOTAL.
SKIP.
WRITE: / TEXT-100, DA_DBCNT.


*&-----------------------------------------------------------------
*&      Form  PROTOKOLL
*&-----------------------------------------------------------------
*       Eintrag in Protokoll aufnehmen
*------------------------------------------------------------------
FORM PROTOKOLL USING    VALUE(P).
FIELD-SYMBOLS: <F>.
DATA: NAME(8) VALUE 'TEXT-&'.
CLEAR PROT.

MOVE-CORRESPONDING: VBAP TO PROT, VBEP TO PROT.
PROT-BANFN = EKET-BANFN.
PROT-BNFPO = EKET-BNFPO.
PROT-MENGE = EKPO-MENGE.

REPLACE '&' WITH P INTO NAME.
ASSIGN (NAME) TO <F>.
MOVE: P TO PROT-RC, <F> TO PROT-TEXT.

APPEND PROT.

ENDFORM.                               " PROTOKOLL
*------------------------------------------------------------------
*        FORM FEHLER_AUSGEBEN
*------------------------------------------------------------------
*        Fehlermeldung in die prot ausgeben
*------------------------------------------------------------------
FORM FEHLER_AUSGEBEN.

DATA: DA_OUTPUT(160).

SELECT SINGLE * FROM T100 WHERE ARBGB = SY-MSGID
AND MSGNR = SY-MSGNO
AND SPRSL = SY-LANGU.
DA_OUTPUT = T100-TEXT.

REPLACE '&1' WITH SY-MSGV1 INTO DA_OUTPUT.
IF SY-SUBRC NE 0.
REPLACE '&' WITH SY-MSGV1 INTO DA_OUTPUT.
ENDIF.
CONDENSE DA_OUTPUT.
REPLACE '&2' WITH SY-MSGV2 INTO DA_OUTPUT.
IF SY-SUBRC NE 0.
REPLACE '&' WITH SY-MSGV2 INTO DA_OUTPUT.
ENDIF.
CONDENSE DA_OUTPUT.
REPLACE '&3' WITH SY-MSGV3 INTO DA_OUTPUT.
IF SY-SUBRC NE 0.
REPLACE '&' WITH SY-MSGV3 INTO DA_OUTPUT.
ENDIF.
CONDENSE DA_OUTPUT.
REPLACE '&4' WITH SY-MSGV4 INTO DA_OUTPUT.
IF SY-SUBRC NE 0.
REPLACE '&' WITH SY-MSGV4 INTO DA_OUTPUT.
ENDIF.
CONDENSE DA_OUTPUT.

CONCATENATE SY-MSGID SY-MSGNO DA_OUTPUT INTO PROT-TEXT
SEPARATED BY SPACE.
MODIFY PROT.

ENDFORM.
