************************************************************************
*  Report ・Y_TOOL_STEPCOUNTER
*  Function・Source code line count
*  Creation Date・2013/03/28
*  Create by・Wu Changchun
*  Version・01
*  Comments・ ＊Program Type
*             #Report program
*             # include program
*             #dynpro program
*             #Function module
*           ＊For Unicode
*           ＊Source code download
*           ＊Data delcare and process line count
*           ＊Line selection to show source code
************************************************************************
REPORT ZTEST_ISID21 NO STANDARD PAGE HEADING
LINE-SIZE 170.

************************************************************************
*TYPES
************************************************************************
TYPES: BEGIN OF typ_program,
mainprogram     TYPE trdir-name,    "Main program
name            TYPE trdir-name,    "Program name
dynr            TYPE d020t-dynr,    "Dynpro No
totalstep       TYPE p LENGTH 6 DECIMALS 0, "Total lines
processstep     TYPE p LENGTH 6 DECIMALS 0, "Process lines
commentstep     TYPE p LENGTH 6 DECIMALS 0, "comment lines
spacestep       TYPE p LENGTH 6 DECIMALS 0, "Space lines
mainflg(1)      TYPE c,             "Main program flag
funcname        TYPE rs38l_fnam,    "FM name
group           TYPE rs38l_area,    "Function group name
END OF typ_program.

*File output type
TYPES: BEGIN OF typ_file,
mainp         TYPE trdir-name,     "Main Program name
name          TYPE trdir-name,     "Program name
dynr          TYPE d020t-dynr,     "Dynpro No
lineno(6)     TYPE n,              "Line No
commentflg(1) TYPE c,              "Comment line flag
source(255)   TYPE c,              "Source code line
END OF typ_file.

************************************************************************
* Workareas
************************************************************************
DATA: gs_rec_file TYPE typ_file,
gs_rec_program TYPE typ_program.

************************************************************************
*Internal Tables
************************************************************************
DATA: gt_program TYPE TABLE OF typ_program,
gt_file TYPE TABLE OF typ_file.

************************************************************************
*variables
************************************************************************
DATA: gv_ucomm TYPE sy-ucomm,         "User command
gv_det1  TYPE c,                "screen settlement flag
gv_det3  TYPE c,                "screen settlement flag
gv_progname(40) TYPE c,
gv_defpath(100) TYPE c.         "Default Path

************************************************************************
*Constants
************************************************************************
CONSTANTS: g_con_filetype(10) TYPE c VALUE 'ASC',  "file output format
g_con_kaku(4)      TYPE c VALUE '.txt', "Source file extend
g_con_dict_ref(20) TYPE c VALUE 'D       .',
g_con_x            TYPE c VALUE 'X',
g_con_msgs         TYPE c VALUE 'S',    "MSG_TYP S
g_con_msge         TYPE c VALUE 'E',    "MSG_TYP E
g_con_msgi         TYPE c VALUE 'I',    "MSG_TYP I
g_con_msgid1(2)    TYPE c VALUE '00',   "MSG_ID  00
g_con_msgno1(3)    TYPE c VALUE '001'.  "MSG_NO  001

************************************************************************
*SELECTION-SCREEN
************************************************************************
SELECTION-SCREEN BEGIN OF BLOCK block1 WITH FRAME TITLE s_title1.

* - Report program, Include program, Dynpro program
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_r3 RADIOBUTTON GROUP rb02 DEFAULT 'X'
USER-COMMAND b1 MODIF ID sb6 .
SELECTION-SCREEN COMMENT 4(64) p_com3.
SELECTION-SCREEN END OF LINE.
*  Function Module
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_r4 RADIOBUTTON GROUP rb02 MODIF ID sb6.
SELECTION-SCREEN COMMENT 4(14) p_com4.
SELECTION-SCREEN END OF LINE.

*  Class
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_r5 RADIOBUTTON GROUP rb02 MODIF ID sb6.
SELECTION-SCREEN COMMENT 4(14) p_com5.
SELECTION-SCREEN END OF LINE.

*  username
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_r9 AS CHECKBOX USER-COMMAND bbb MODIF ID sb6.
SELECTION-SCREEN COMMENT 4(14) p_com94.
PARAMETERS: p_usern TYPE sy-uname DEFAULT sy-uname.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN SKIP 1.

*  Program ID
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(32) s_text01 FOR FIELD s_progid.
SELECTION-SCREEN POSITION 35.
SELECT-OPTIONS s_progid FOR gv_progname. "NO INTERVALS .
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN SKIP 1.

SELECTION-SCREEN BEGIN OF BLOCK block4 WITH FRAME TITLE s_title4.
*  Not cont space line
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN POSITION 1.
PARAMETERS p_space AS CHECKBOX.
SELECTION-SCREEN COMMENT 4(24) s_text02.
SELECTION-SCREEN END OF LINE.

* Not count the include which not used in main program
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN POSITION 1.
PARAMETERS p_includ AS CHECKBOX.
SELECTION-SCREEN COMMENT 4(64) s_text07.
SELECTION-SCREEN END OF LINE.

* Count data declare lines
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN POSITION 1.
PARAMETERS p_datadf AS CHECKBOX.
SELECTION-SCREEN COMMENT 4(40) s_text14.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN END OF BLOCK block4.
SELECTION-SCREEN END OF BLOCK block1.

SELECTION-SCREEN BEGIN OF BLOCK block2 WITH FRAME TITLE s_title2.
*-screen output
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_r1 RADIOBUTTON GROUP rb01 DEFAULT 'X'
USER-COMMAND b1 MODIF ID sb1.
SELECTION-SCREEN COMMENT 4(14) p_com1.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN SKIP 1.
*-file output
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS: p_r2 RADIOBUTTON GROUP rb01 MODIF ID sb2.
SELECTION-SCREEN COMMENT 4(14) p_com2.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF BLOCK block3 WITH FRAME.
*---output target
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(24) s_text03 FOR FIELD p_filenm.
SELECTION-SCREEN POSITION 35.
PARAMETERS: p_filenm TYPE rlgrap-filename
DEFAULT gv_defpath MODIF ID sb3.
SELECTION-SCREEN END OF LINE.

*---file output option(head)
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN PUSHBUTTON 1(2) pb_det1
USER-COMMAND det1 MODIF ID sd1.
SELECTION-SCREEN COMMENT 4(30) s_text09 MODIF ID sd1.
SELECTION-SCREEN END OF LINE.

*---file output option(Item)
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN PUSHBUTTON 1(2) pb_det2
USER-COMMAND det2 MODIF ID sd2.
SELECTION-SCREEN COMMENT 4(30) s_text10 MODIF ID sd2.
SELECTION-SCREEN END OF LINE.

*---Program source output(All lines)
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN POSITION 4.
PARAMETERS p_chk_a AS CHECKBOX MODIF ID sb4.
SELECTION-SCREEN COMMENT 7(40) s_text04 MODIF ID sb4.
SELECTION-SCREEN END OF LINE.

*---Program source output(Comment lines)
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN POSITION 4.
PARAMETERS p_chk_c AS CHECKBOX MODIF ID sb4.
SELECTION-SCREEN COMMENT 7(40) s_text05 MODIF ID sb4.
SELECTION-SCREEN END OF LINE.

*---Program source output(Process lines)
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN POSITION 4.
PARAMETERS p_chk_p AS CHECKBOX MODIF ID sb4.
SELECTION-SCREEN COMMENT 7(40) s_text06 MODIF ID sb4.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK block3.
SELECTION-SCREEN END OF BLOCK block2.

SELECTION-SCREEN BEGIN OF BLOCK block5 WITH FRAME TITLE s_title5.
*----Process option(head)
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN PUSHBUTTON 1(2) pb_det3
USER-COMMAND det3 MODIF ID sd3.
SELECTION-SCREEN COMMENT 4(30) s_text11 MODIF ID sd3.
SELECTION-SCREEN END OF LINE.

*-Process option(item)
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN PUSHBUTTON 1(2) pb_det4
USER-COMMAND det4 MODIF ID sd4.
SELECTION-SCREEN COMMENT 4(32) s_text12 MODIF ID sd4.
SELECTION-SCREEN END OF LINE.

*Process count (1~999)☆ < 100 recommend
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN POSITION 4.
PARAMETERS p_count(4) TYPE n DEFAULT '500' MODIF ID sb5.
SELECTION-SCREEN COMMENT 9(50) s_text08 FOR FIELD p_count
MODIF ID sb5.
SELECTION-SCREEN END OF LINE.

*File Output Method(Unicode Check Before version 46C)
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN POSITION 4.
PARAMETERS p_46c AS CHECKBOX MODIF ID sb5.
SELECTION-SCREEN COMMENT 9(67) s_text13 MODIF ID sb5.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK block5.
************************************************************************
* INITIALIZATION
************************************************************************
INITIALIZATION.

* selection screen text
s_title1 = 'Target Object'(t01).
s_title2 = 'Output Separate'(t02).
s_title4 = 'Process Option'(t03).
s_title5 = 'Process Set'(t04).
p_com1   = 'Screen Output'(t05).
p_com2   = 'File Output'(t06).
p_com3   = 'Report program, Include program, Dynpro program'(t07).
p_com4   = 'Functin module'(t08).
p_com5   = 'Class'(s10).
p_com94  = 'By username'(t38).
s_text01 = 'Program ID'(t09).
s_text02 = 'Not Count Blank line'(t10).
s_text03 = 'Download Destination'(t11).
s_text04 = 'Source Code Output(Full lines)'(t12).
s_text05 = 'Source Code Output(Comment lines)'(t13).
s_text06 = 'Source Code Output(Process lines)'(t14).
s_text07 =
'Not count the include which not used in main program'(t15).
s_text08 = 'Process count (1~999)☆ < 100 recommend'(t16).
s_text09 = 'File Output Option'(t17).
s_text10 = 'File Output Option'(t17).
s_text11 = 'Process Set'(t18).
s_text12 = 'Process Set'(t18).
s_text13 =
'File Output Method(Unicode Check Before version 46C)'(t19).
s_text14 = 'Count the data declare part as comment'(t20).

* Button text set
MOVE '+'(t21) TO pb_det1.     "Selection screen  head
MOVE '-'(t22) TO pb_det2.     "Selection screen item
MOVE '+'(t21) TO pb_det3.     "Selection screen  head
MOVE '-'(t22) TO pb_det4.     "Selection screen item

gv_defpath = 'C:\Source Code\Step_count.csv'(t65).

************************************************************************
*  AT SELECTION-SCREEN OUTPUT
************************************************************************
AT SELECTION-SCREEN OUTPUT.

* SELECTION-SCREEN SET
PERFORM f_screen_output.

************************************************************************
* AT SELECTION-SCREEN
************************************************************************
AT SELECTION-SCREEN.

* SELECTION-SCREEN CHECK
PERFORM f_screen_select.

CHECK sy-ucomm IS INITIAL OR sy-ucomm = 'ONLI'.

* SELECTION-SCREEN OBLIGATORY CHECK
PERFORM f_check_screen.

************************************************************************
* AT SELECTION-SCREEN
************************************************************************
*F4-HELP for field s_progid-low
AT SELECTION-SCREEN ON VALUE-REQUEST FOR: s_progid-low,s_progid-high.

* F4-HELP
PERFORM f_kensaku_help.

************************************************************************
* AT SELECTION-SCREEN
************************************************************************
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_filenm.
DATA: lt_filetable TYPE filetable,
lv_rc         TYPE i,
lv_title      TYPE string,
lv_extend     TYPE string,
lv_dir        TYPE string,
lv_def_file   TYPE string .
lv_dir = gv_defpath.
lv_title = 'Select Download File'(t71).
lv_extend = 'All Files (*.*)'(t70).
lv_def_file = 'Step_count.csv'(t58).

CALL METHOD cl_gui_frontend_services=>file_open_dialog
EXPORTING
window_title            = lv_title
default_extension       = lv_extend
default_filename        = lv_def_file
initial_directory       = lv_dir
CHANGING
file_table              = lt_filetable
rc                      = lv_rc
EXCEPTIONS
file_open_dialog_failed = 1
cntl_error              = 2
error_no_gui            = 3
not_supported_by_gui    = 4
OTHERS                  = 5.
IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ELSE.
READ TABLE lt_filetable INTO p_filenm INDEX 1.
ENDIF.

************************************************************************
* START-OF-SELECTION
************************************************************************
START-OF-SELECTION.

PERFORM f_get_program.
PERFORM f_stepcount.

IF p_r1 = g_con_x.
PERFORM f_out_screen.
ELSE.
PERFORM f_out_file.
ENDIF.

************************************************************************
* AT LINE-SELECTION
************************************************************************
*Line selection process
AT LINE-SELECTION.

PERFORM f_line_selection.

************************************************************************
*   PG Info Get
*   F_GET_PROGRAM
************************************************************************
FORM f_get_program.

TYPES: BEGIN OF l_typ_tfdir,
funcname TYPE tfdir-funcname,
pname    TYPE tfdir-pname,
END OF l_typ_tfdir.

DATA: l_rec_tfdir TYPE l_typ_tfdir,
l_tab_tfdir TYPE TABLE OF l_typ_tfdir.

TYPES: BEGIN OF l_typ_trdir,
name     TYPE trdir-name,
funcname TYPE tfdir-funcname,
END OF l_typ_trdir.

DATA: l_rec_trdir TYPE l_typ_trdir,
l_tab_trdir TYPE TABLE OF l_typ_trdir.

TYPES: BEGIN OF l_typ_includes,
*           default(40) TYPE c,
default TYPE rs38l-include,
END OF l_typ_includes.

DATA: l_rec_includes TYPE rs38l-include,"l_typ_includes,
l_tab_includes TYPE TABLE OF l_typ_includes."l_typ_includes.

TYPES: BEGIN OF l_typ_d020t,
prog TYPE d020t-prog,
dynr TYPE d020t-dynr,
END OF l_typ_d020t.

DATA: l_rec_d020t TYPE l_typ_d020t,
l_tab_d020t TYPE TABLE OF l_typ_d020t.

DATA: l_wrk_cnt      TYPE i,
l_wrk_funcname TYPE rs38l-name,    "Program Name
l_wrk_includes TYPE rs38l-include,
l_wrk_group    TYPE rs38l-area.
*----------------------------------------------------------------------

IF p_r4 = g_con_x.
SELECT funcname
pname
INTO CORRESPONDING FIELDS OF TABLE l_tab_tfdir
FROM tfdir
WHERE funcname IN s_progid.

IF sy-subrc = 0.
LOOP AT l_tab_tfdir INTO l_rec_tfdir.
SELECT SINGLE name
INTO l_rec_trdir-name
FROM trdir
WHERE name = l_rec_tfdir-pname.

l_rec_trdir-funcname = l_rec_tfdir-funcname.

APPEND l_rec_trdir TO l_tab_trdir.
ENDLOOP.
ELSE.
MESSAGE ID g_con_msgid1 TYPE g_con_msgs NUMBER g_con_msgno1
WITH 'Program ID is invalid'(t72).
EXIT.
ENDIF.
ELSEif p_r3 = g_con_x.
SELECT name
INTO CORRESPONDING FIELDS OF TABLE l_tab_trdir
FROM trdir
WHERE name IN s_progid.

IF sy-subrc <> 0.
MESSAGE ID g_con_msgid1 TYPE g_con_msgs NUMBER g_con_msgno1
WITH 'Program ID is invalid'(t72).
EXIT.

ENDIF.
ELSEif p_r5 = g_con_x.
SELECT name
INTO CORRESPONDING FIELDS OF TABLE l_tab_trdir
FROM trdir
WHERE name IN s_progid.

LOOP AT l_tab_trdir INTO l_rec_trdir.
FIND '=' in l_rec_trdir-name.
IF sy-subrc <> 0.
delete l_tab_trdir INDEX  sy-tabix.
ENDIF.
IF NOT ( l_rec_trdir-name(1) = 'Y' OR l_rec_trdir-name(1) =
'Z' ).
delete l_tab_trdir INDEX  sy-tabix.
ENDIF.
ENDLOOP.
ENDIF.

DESCRIBE TABLE l_tab_trdir LINES l_wrk_cnt.
IF l_wrk_cnt > p_count.
MESSAGE ID g_con_msgid1 TYPE g_con_msgs NUMBER g_con_msgno1
WITH '・The max process Number is:'(t73)
p_count.
EXIT.
ENDIF.

CLEAR gt_program.
LOOP AT l_tab_trdir INTO l_rec_trdir.
IF p_r4 = g_con_x.
CLEAR: l_wrk_includes,
l_wrk_group.
*-----Function module[FUNCTION_INCLUDE_INFO]
CALL FUNCTION 'FUNCTION_INCLUDE_INFO'
CHANGING
funcname            = l_rec_trdir-funcname
include             = l_wrk_includes
group               = l_wrk_group
EXCEPTIONS
function_not_exists = 1
include_not_exists  = 2
group_not_exists    = 3
no_selections       = 4
no_function_include = 5
OTHERS              = 6.

CLEAR gs_rec_program.
gs_rec_program-mainprogram = l_wrk_includes.
gs_rec_program-name        = l_wrk_includes.
gs_rec_program-funcname    = l_rec_trdir-funcname.
gs_rec_program-group       = l_wrk_group.
gs_rec_program-mainflg     = g_con_x.
APPEND gs_rec_program TO gt_program.

IF p_includ <> g_con_x.
CLEAR gs_rec_program.
gs_rec_program-mainprogram = l_wrk_includes.
gs_rec_program-name        = l_rec_trdir-name.
APPEND gs_rec_program TO gt_program.

*-----Function module[RS_GET_ALL_INCLUDES]
CALL FUNCTION 'RS_GET_ALL_INCLUDES'
EXPORTING
program      = l_rec_trdir-name
TABLES
includetab   = l_tab_includes
EXCEPTIONS
not_existent = 1
no_program   = 2
OTHERS       = 3.

LOOP AT l_tab_includes INTO l_rec_includes.
CLEAR: l_wrk_funcname,
l_wrk_group.
*---------Function module[FUNCTION_INCLUDE_INFO]
CALL FUNCTION 'FUNCTION_INCLUDE_INFO'
CHANGING
funcname            = l_wrk_funcname
include             = l_rec_includes
group               = l_wrk_group
EXCEPTIONS
function_not_exists = 1
include_not_exists  = 2
group_not_exists    = 3
no_selections       = 4
no_function_include = 5
OTHERS              = 6.

IF l_wrk_funcname IS INITIAL.
CLEAR gs_rec_program.
gs_rec_program-mainprogram = l_wrk_includes.
gs_rec_program-name        = l_rec_includes.
gs_rec_program-group       = l_wrk_group.
APPEND gs_rec_program TO gt_program.
ELSE.
CONTINUE.
ENDIF.
ENDLOOP.
ENDIF.
ELSE.
find  '=' in l_rec_trdir-name.
IF sy-subrc = 0.
CONTINUE.
ENDIF.
CLEAR gs_rec_program.
gs_rec_program-mainprogram = l_rec_trdir-name.
gs_rec_program-name        = l_rec_trdir-name.
gs_rec_program-mainflg     = g_con_x.
APPEND gs_rec_program TO gt_program.

IF p_includ <> g_con_x.
*-------Function module[RS_GET_ALL_INCLUDES]
CALL FUNCTION 'RS_GET_ALL_INCLUDES'
EXPORTING
program      = l_rec_trdir-name
TABLES
includetab   = l_tab_includes
EXCEPTIONS
not_existent = 1
no_program   = 2
OTHERS       = 3.

LOOP AT l_tab_includes INTO l_rec_includes.
CLEAR gs_rec_program.
gs_rec_program-mainprogram = l_rec_trdir-name.
gs_rec_program-name        = l_rec_includes.
APPEND gs_rec_program TO gt_program.
ENDLOOP.
ENDIF.
ENDIF.

SELECT prog
dynr
INTO CORRESPONDING FIELDS OF TABLE l_tab_d020t
FROM d020t
WHERE prog =  l_rec_trdir-name
AND dynr <> '1000'
AND lang =  sy-langu.

LOOP AT l_tab_d020t INTO l_rec_d020t.
CLEAR gs_rec_program.
gs_rec_program-mainprogram = l_rec_trdir-name.
gs_rec_program-name        = l_rec_d020t-prog.
gs_rec_program-dynr        = l_rec_d020t-dynr.
APPEND gs_rec_program TO gt_program.
ENDLOOP.
ENDLOOP.

ENDFORM.                                                  "F_GET_PROGRAM
************************************************************************
*   Gain line count
*   F_STEPCOUNT
************************************************************************
FORM f_stepcount.

TYPES: BEGIN OF l_typ_255clm,
line(255) TYPE c,
END OF l_typ_255clm.

DATA: l_rec_255clm TYPE l_typ_255clm,
ls_rec_program TYPE typ_program,
l_tab_255clm TYPE TABLE OF l_typ_255clm.

DATA: l_rec_d020s TYPE d020s,
l_rec_d021s TYPE d021s,
l_rec_d022s TYPE d022s,
l_rec_d023s TYPE d023s.

DATA: l_tab_d021s TYPE TABLE OF d021s,
l_tab_d022s TYPE TABLE OF d022s,
l_tab_d023s TYPE TABLE OF d023s.

*-TEXTPOOL
DATA: l_rec_textpool TYPE textpool,
l_tab_textpool TYPE TABLE OF textpool.

DATA: l_wrk_dynpro_prog(44) TYPE c,
l_wrk_totalstep(6)    TYPE p,
l_wrk_commentstep(6)  TYPE p,
l_wrk_processstep(6)  TYPE p,
l_wrk_spacestep(6)    TYPE p,
l_wrk_datastep(6)     TYPE p,
l_wrk_column          TYPE i,
l_wrk_column_text(1)  TYPE c,
l_flg_con(1)          TYPE c,
l_wrk_com1(20)        TYPE c,
l_wrk_com2(20)        TYPE c,
l_flg_do(1)           TYPE c,
l_flg_val(1)          TYPE c,
l_wrk_line            TYPE i,
l_wrk_off             TYPE i,
l_flg_cmt(1)          TYPE c.
*-----------------------------------------------------------------------

CLEAR gs_rec_program.
LOOP AT gt_program INTO gs_rec_program.
IF gs_rec_program-dynr = ''.
READ REPORT gs_rec_program-name INTO l_tab_255clm.
ELSE.
CLEAR: l_rec_d020s,
l_tab_d021s,
l_tab_d022s,
l_tab_d023s,
l_wrk_dynpro_prog.

l_wrk_dynpro_prog       = gs_rec_program-name.
l_wrk_dynpro_prog+40(4) = gs_rec_program-dynr.

IMPORT DYNPRO l_rec_d020s l_tab_d021s l_tab_d022s l_tab_d023s
ID l_wrk_dynpro_prog.

IF sy-subrc = 0.
l_tab_255clm[] = l_tab_d022s[].
ENDIF.
ENDIF.

*   Gain total lines
DESCRIBE TABLE l_tab_255clm LINES l_wrk_totalstep.

CLEAR: gs_rec_file,
l_rec_255clm.

LOOP AT l_tab_255clm INTO l_rec_255clm.
gs_rec_file-name   = gs_rec_program-name.
gs_rec_file-dynr   = gs_rec_program-dynr.
CASE g_con_x.
WHEN p_r3.
gs_rec_file-mainp   = gs_rec_program-mainprogram.
WHEN p_r4.
CLEAR: ls_rec_program.
READ TABLE gt_program INTO ls_rec_program
with key mainprogram = gs_rec_program-mainprogram
mainflg     = 'X'.
IF SY-SUBRC = 0.
gs_rec_file-mainp   = ls_rec_program-funcname.
ENDIF.
WHEN OTHERS.
ENDCASE.
IF p_r5 IS NOT INITIAL.

ENDIF.

gs_rec_file-lineno = gs_rec_file-lineno + 1.

IF l_rec_255clm = ' '.
ADD 1 TO l_wrk_commentstep.
ADD 1 TO l_wrk_spacestep.
gs_rec_file-source     = l_rec_255clm.
gs_rec_file-commentflg = g_con_x.
APPEND gs_rec_file TO gt_file.
CLEAR gs_rec_file-commentflg.

CONTINUE.
ENDIF.

SHIFT l_rec_255clm LEFT DELETING LEADING space.

IF l_rec_255clm(1) = '*' OR l_rec_255clm(1) = '"'.
ADD 1 TO l_wrk_commentstep.
gs_rec_file-source     = l_rec_255clm.
gs_rec_file-commentflg = g_con_x.
APPEND gs_rec_file TO gt_file.
CLEAR gs_rec_file-commentflg.

CONTINUE.
ENDIF.

*      l_wrk_column = -1.
*      IF .
*
*      ENDIF.
*      DO 255 TIMES.
*        ADD 1 TO l_wrk_column.
*        l_wrk_column_text = l_rec_255clm+l_wrk_column(1).
*        IF l_wrk_column_text = '"'.
*          ADD 1 TO l_wrk_commentstep.
*          gs_rec_file-commentflg = g_con_x.
*          l_flg_con             = g_con_x.
*
*          EXIT.
*        ELSEIF l_wrk_column_text <> ' '.
*          EXIT.
*        ENDIF.
*      ENDDO.

gs_rec_file-source = l_rec_255clm.
APPEND gs_rec_file TO gt_file.
CLEAR gs_rec_file-commentflg.

IF NOT l_flg_con IS INITIAL.
CLEAR l_flg_con.
CONTINUE.
ENDIF.

SPLIT l_rec_255clm AT space INTO l_wrk_com1
l_wrk_com2.

IF l_flg_do IS INITIAL.
CLEAR l_flg_val.
l_wrk_column = -1.
l_wrk_line   = STRLEN( l_rec_255clm ).

DO l_wrk_line TIMES.
ADD 1 TO l_wrk_column.
CASE l_rec_255clm+l_wrk_column(1).
WHEN ''''.
IF l_flg_val IS INITIAL.
l_flg_val = g_con_x.
ELSE.
CLEAR l_flg_val.
ENDIF.

WHEN '"'.
IF l_flg_val IS INITIAL.
l_flg_do = g_con_x.
EXIT.
ENDIF.

WHEN '.'.
IF l_flg_val IS INITIAL.
EXIT.
ENDIF.
ENDCASE.

IF sy-index = l_wrk_line.
l_flg_do = g_con_x.
ENDIF.
ENDDO.

FIND ':' IN l_wrk_com1 MATCH OFFSET l_wrk_off.
IF sy-subrc = 0.
REPLACE SECTION OFFSET l_wrk_off OF l_wrk_com1 WITH space.
ENDIF.

CASE l_wrk_com1.
WHEN 'TYPES'
OR 'DATA'
OR 'CONSTANTS'
OR 'INCLUDE'
OR 'TABLES'
OR 'RANGES'
OR 'CONTROLS'
OR 'TYPE-POOLS'
OR 'FIELD-SYMBOLS'.

ADD 1 TO l_wrk_datastep.
gs_rec_file-source     = l_rec_255clm.
gs_rec_file-commentflg = g_con_x.
APPEND gs_rec_file TO gt_file.
CLEAR gs_rec_file-commentflg.

l_flg_cmt = g_con_x.
CONTINUE.
ENDCASE.

gs_rec_file-source = l_rec_255clm.
APPEND gs_rec_file TO gt_file.
CLEAR: gs_rec_file-commentflg,
l_flg_cmt.
ELSE.
IF NOT l_flg_cmt IS INITIAL.
ADD 1 TO l_wrk_datastep.
gs_rec_file-source     = l_rec_255clm.
gs_rec_file-commentflg = g_con_x.
APPEND gs_rec_file TO gt_file.
CLEAR gs_rec_file-commentflg.
ELSE.
gs_rec_file-source = l_rec_255clm.
APPEND gs_rec_file TO gt_file.
CLEAR: gs_rec_file-commentflg,
l_flg_cmt.
ENDIF.

CLEAR l_flg_val.
l_wrk_column = -1.
l_wrk_line   = STRLEN( l_rec_255clm ).
DO l_wrk_line TIMES.
ADD 1 TO l_wrk_column.
CASE l_rec_255clm+l_wrk_column(1).
WHEN ''''.
IF l_flg_val IS INITIAL.
l_flg_val = g_con_x.
ELSE.
CLEAR: l_flg_val.
ENDIF.

WHEN '"'.
IF l_flg_val IS INITIAL.
l_flg_val = g_con_x.
EXIT.
ENDIF.

WHEN '.'.
IF l_flg_val IS INITIAL.
CLEAR l_flg_do.
IF NOT l_flg_cmt IS INITIAL.
CLEAR l_flg_cmt.
EXIT.
ENDIF.
ENDIF.
ENDCASE.
ENDDO.
ENDIF.
ENDLOOP.

IF p_space = g_con_x.
gs_rec_program-totalstep   = l_wrk_totalstep - l_wrk_spacestep.
gs_rec_program-processstep = l_wrk_totalstep - l_wrk_commentstep.
gs_rec_program-commentstep = l_wrk_commentstep - l_wrk_spacestep.
ELSE.
gs_rec_program-totalstep   = l_wrk_totalstep.
gs_rec_program-processstep = l_wrk_totalstep - l_wrk_commentstep.
gs_rec_program-commentstep = l_wrk_commentstep.
ENDIF.

IF p_datadf = g_con_x.
gs_rec_program-processstep = gs_rec_program-processstep -
l_wrk_datastep.
gs_rec_program-commentstep = gs_rec_program-commentstep +
l_wrk_datastep.
ENDIF.

MODIFY gt_program FROM gs_rec_program.

CLEAR: l_wrk_totalstep,
l_wrk_commentstep,
l_wrk_spacestep,
l_wrk_datastep.

gs_rec_file-name   = gs_rec_program-name.
gs_rec_file-dynr   = gs_rec_program-dynr.
gs_rec_file-commentflg = g_con_x.

CLEAR: l_rec_textpool.
REFRESH l_tab_textpool.

READ TEXTPOOL gs_rec_program-name INTO l_tab_textpool LANGUAGE
sy-langu.
SORT l_tab_textpool BY id key.

*   List header: Column headings
READ TABLE l_tab_textpool TRANSPORTING NO FIELDS WITH KEY id = 'H'.
IF sy-subrc = 0.
CLEAR:  gs_rec_file-source.
APPEND gs_rec_file TO gt_file.
gs_rec_file-lineno = gs_rec_file-lineno + 1.
gs_rec_file-source =  '*List header: Column headings・'(t60).
APPEND gs_rec_file TO gt_file.

CLEAR l_rec_textpool.
LOOP AT l_tab_textpool INTO l_rec_textpool WHERE id = 'H'.
CLEAR:  gs_rec_file-source.
gs_rec_file-lineno = gs_rec_file-lineno + 1.
CONCATENATE '* ' l_rec_textpool-key ':' l_rec_textpool-entry
INTO gs_rec_file-source.
APPEND gs_rec_file TO gt_file.
ENDLOOP.
ENDIF.

*   Text symbol text
READ TABLE l_tab_textpool TRANSPORTING NO FIELDS WITH KEY id = 'I'.
IF sy-subrc = 0.
CLEAR:  gs_rec_file-source.
APPEND gs_rec_file TO gt_file.
gs_rec_file-lineno = gs_rec_file-lineno + 1.
gs_rec_file-source =  '*Text symbol text・'(t61).
APPEND gs_rec_file TO gt_file.

CLEAR l_rec_textpool.
LOOP AT l_tab_textpool INTO l_rec_textpool WHERE id = 'I'.
CLEAR:  gs_rec_file-source.
gs_rec_file-lineno = gs_rec_file-lineno + 1.
CONCATENATE '* ' l_rec_textpool-key ':' l_rec_textpool-entry
INTO gs_rec_file-source.
APPEND gs_rec_file TO gt_file.
ENDLOOP.
ENDIF.

*   Selection text
READ TABLE l_tab_textpool TRANSPORTING NO FIELDS WITH KEY id = 'S'.
IF sy-subrc = 0.
CLEAR:  gs_rec_file-source.
APPEND gs_rec_file TO gt_file.
gs_rec_file-lineno = gs_rec_file-lineno + 1.
gs_rec_file-source =  '*Selection text・'(t62).
APPEND gs_rec_file TO gt_file.

CLEAR l_rec_textpool.
LOOP AT l_tab_textpool INTO l_rec_textpool WHERE id = 'S'.
CLEAR:  gs_rec_file-source.
gs_rec_file-lineno = gs_rec_file-lineno + 1.
CONCATENATE '* ' l_rec_textpool-key ':' l_rec_textpool-entry
INTO gs_rec_file-source.
APPEND gs_rec_file TO gt_file.
ENDLOOP.
ENDIF.

*   List Title: Titlebar
READ TABLE l_tab_textpool TRANSPORTING NO FIELDS WITH KEY id = 'T'.
IF sy-subrc = 0.
CLEAR:  gs_rec_file-source.
APPEND gs_rec_file TO gt_file.
gs_rec_file-lineno = gs_rec_file-lineno + 1.
gs_rec_file-source =  '*List Title: Titlebar・'(t63).
APPEND gs_rec_file TO gt_file.

CLEAR l_rec_textpool.
LOOP AT l_tab_textpool INTO l_rec_textpool WHERE id = 'T'.
CLEAR:  gs_rec_file-source.
gs_rec_file-lineno = gs_rec_file-lineno + 1.
CONCATENATE '* ' l_rec_textpool-key ':' l_rec_textpool-entry
INTO gs_rec_file-source.
APPEND gs_rec_file TO gt_file.
ENDLOOP.
ENDIF.

ENDLOOP.

ENDFORM.                                                    "F_STEPCOUNT
************************************************************************
*   screen output process
*   F_OUT_SCREEN
************************************************************************
FORM f_out_screen.

TYPES: BEGIN OF l_typ_out,
name(40)        TYPE c,    "Program Name
dynr(4)         TYPE c,    "Dynpro No.
totalstep(6)    TYPE c,    "Total
processstep(6)  TYPE c,    "Process Lines
commentstep(6)  TYPE c,    "Comment Lines
programinfo(60) TYPE c,    "PG Info
END OF l_typ_out.

DATA l_rec_out TYPE l_typ_out.

DATA: l_wrk_percent(3)        TYPE p,
l_wrk_totalstep_bk(6)   TYPE p,
l_wrk_processstep_bk(6) TYPE p,
l_wrk_commentstep_bk(6) TYPE p,
l_wrk_funcname(145)     TYPE c,
l_wrk_group(145)        TYPE c.
*-----------------------------------------------------------------------
CLEAR gs_rec_program.
LOOP AT gt_program INTO gs_rec_program.

l_wrk_funcname = gs_rec_program-funcname.
l_wrk_group    = gs_rec_program-group.

AT NEW mainprogram.
IF p_r4 = g_con_x.
WRITE / sy-uline
.
FORMAT INTENSIFIED ON.
FORMAT COLOR 7.
WRITE :/1  'Function module:'(t74),
18 l_wrk_funcname.
WRITE / sy-uline.
FORMAT INTENSIFIED OFF.
WRITE :/1  'Function Module:'(t74),
18 l_wrk_group.
WRITE / sy-uline.
ENDIF.

*-----Head output
*      FORMAT INTENSIFIED OFF.
FORMAT COLOR OFF.
WRITE :/1 'Program ID'(t09),
41 'Dynpro No.'(t76),
62 'Total'(t77),
68 '('(t78),
73 'Process'(t79),
81 'Comment'(t80),
92 ')'(t81),
97 'Percentage'(t82),
103 'Title'(t83).
FORMAT INTENSIFIED ON.
WRITE / sy-uline.
ENDAT.

*   Main program line color set
IF gs_rec_program-mainflg = g_con_x.
FORMAT COLOR 1.
ELSE.
FORMAT INTENSIFIED OFF.
FORMAT COLOR 1.
ENDIF.

CLEAR: l_wrk_percent,
l_rec_out-programinfo.
PERFORM f_get_item USING gs_rec_program-name
gs_rec_program-dynr
gs_rec_program-totalstep
gs_rec_program-commentstep
CHANGING l_wrk_percent
l_rec_out-programinfo.

WRITE gs_rec_program-name        TO l_rec_out-name.
WRITE gs_rec_program-dynr        TO l_rec_out-dynr.
WRITE gs_rec_program-totalstep   TO l_rec_out-totalstep.
WRITE gs_rec_program-processstep TO l_rec_out-processstep.
WRITE gs_rec_program-commentstep TO l_rec_out-commentstep.

WRITE :/1 l_rec_out-name,
41(4) l_rec_out-dynr NO-ZERO RIGHT-JUSTIFIED,
61 l_rec_out-totalstep(6),
68 '('(t78),
72 l_rec_out-processstep(6),
82 l_rec_out-commentstep(6),
92 ')'(t81),
95 l_wrk_percent,
100 '%',
103 l_rec_out-programinfo.

l_wrk_totalstep_bk   = l_wrk_totalstep_bk   +
gs_rec_program-totalstep.
l_wrk_processstep_bk = l_wrk_processstep_bk +
gs_rec_program-processstep.
l_wrk_commentstep_bk = l_wrk_commentstep_bk +
gs_rec_program-commentstep.

AT END OF mainprogram.
FORMAT COLOR OFF.
WRITE / sy-uline.

l_wrk_percent = l_wrk_commentstep_bk / l_wrk_totalstep_bk * 100.

WRITE gs_rec_program-name   TO l_rec_out-name.
WRITE gs_rec_program-dynr   TO l_rec_out-dynr.
WRITE l_wrk_totalstep_bk   TO l_rec_out-totalstep.
WRITE l_wrk_processstep_bk TO l_rec_out-processstep.
WRITE l_wrk_commentstep_bk TO l_rec_out-commentstep.

WRITE :/1  'TOTAL'(t75),
61 l_rec_out-totalstep(6),
68 '('(t78),
72 l_rec_out-processstep(6),
82 l_rec_out-commentstep(6),
92 ')'(t81),
95 l_wrk_percent,
100 '%'.
SKIP 2.

CLEAR: l_wrk_totalstep_bk,
l_wrk_processstep_bk,
l_wrk_commentstep_bk.
ENDAT.
ENDLOOP.

ENDFORM.                                                   "F_OUT_SCREEN
************************************************************************
*   File output process
*   F_OUT_FILE
************************************************************************
FORM f_out_file.

DATA: l_rec_csvformat(600) TYPE c,
l_tab_csvformat LIKE TABLE OF l_rec_csvformat.

DATA: l_wrk_percent(3)          TYPE p,
l_wrk_programinfo(60)     TYPE c,
l_wrk_totalstep_bk(6)     TYPE p,
l_wrk_processstep_bk(6)   TYPE p,
l_wrk_commentstep_bk(6)   TYPE p,
l_wrk_percent_unit(5)     TYPE c.

DATA: l_wrk_dynr_c(4)           TYPE c,
l_wrk_totalstep_c(6)      TYPE c,
l_wrk_processstep_c(6)    TYPE c,
l_wrk_commentstep_c(6)    TYPE c,
l_wrk_percent_c(3)        TYPE c,
l_wrk_totalstep_bk_c(6)   TYPE c,
l_wrk_processstep_bk_c(6) TYPE c,
l_wrk_commentstep_bk_c(6) TYPE c.
*-----------------------------------------------------------------------
IF gt_program IS INITIAL.
EXIT.
ENDIF.

LOOP AT gt_program INTO gs_rec_program.
AT NEW mainprogram.
*-Head
CONCATENATE '"[Program ID]"'       ','
'"[Dynpro No.]"'         ','
'"[Total Lines]"'     ','
'"[Process Lines]"'     ','
'"[Comment Lines]"' ','
'"[Percentage]"'               ','
'"[Title]"'               ','
INTO l_rec_csvformat.
APPEND l_rec_csvformat TO l_tab_csvformat.
ENDAT.

PERFORM f_get_item USING gs_rec_program-name
gs_rec_program-dynr
gs_rec_program-totalstep
gs_rec_program-commentstep
CHANGING l_wrk_percent
l_wrk_programinfo.

WRITE gs_rec_program-dynr        TO l_wrk_dynr_c.
WRITE gs_rec_program-totalstep   TO l_wrk_totalstep_c.
WRITE gs_rec_program-processstep TO l_wrk_processstep_c.
WRITE gs_rec_program-commentstep TO l_wrk_commentstep_c.
WRITE l_wrk_percent             TO l_wrk_percent_c.

CONCATENATE l_wrk_percent_c '%' INTO l_wrk_percent_unit SEPARATED
BY space.

CLEAR l_rec_csvformat.
CONCATENATE '"' gs_rec_program-name  '"' ','
'"' l_wrk_dynr_c        '"' ','
'"' l_wrk_totalstep_c   '"' ','
'"' l_wrk_processstep_c '"' ','
'"' l_wrk_commentstep_c '"' ','
'"' l_wrk_percent_unit  '"' ','
'"' l_wrk_programinfo   '"' ','
INTO l_rec_csvformat.
APPEND l_rec_csvformat TO l_tab_csvformat.

l_wrk_totalstep_bk   = l_wrk_totalstep_bk   +
gs_rec_program-totalstep.
l_wrk_processstep_bk = l_wrk_processstep_bk +
gs_rec_program-processstep.
l_wrk_commentstep_bk = l_wrk_commentstep_bk +
gs_rec_program-commentstep.

AT END OF mainprogram.

*     Gain present
l_wrk_percent = l_wrk_commentstep_bk / l_wrk_totalstep_bk * 100.

WRITE l_wrk_totalstep_bk   TO l_wrk_totalstep_bk_c.
WRITE l_wrk_processstep_bk TO l_wrk_processstep_bk_c.
WRITE l_wrk_commentstep_bk TO l_wrk_commentstep_bk_c.
WRITE l_wrk_percent        TO l_wrk_percent_c.

CONCATENATE l_wrk_percent_c '%' INTO l_wrk_percent_unit
SEPARATED BY space.

*-- Calaculte totle line
CONCATENATE '"[Totle]"' ','
'" "' ','
'"' l_wrk_totalstep_bk_c   '"' ','
'"' l_wrk_processstep_bk_c '"' ','
'"' l_wrk_commentstep_bk_c '"' ','
'"' l_wrk_percent_unit     '"' ','
'" "' ','
INTO l_rec_csvformat.
APPEND l_rec_csvformat TO l_tab_csvformat.

CLEAR l_rec_csvformat.
APPEND l_rec_csvformat TO l_tab_csvformat.
APPEND l_rec_csvformat TO l_tab_csvformat.

CLEAR: l_wrk_totalstep_bk,
l_wrk_processstep_bk,
l_wrk_commentstep_bk.
ENDAT.
ENDLOOP.

IF p_46c = g_con_x.
PERFORM f_download_2 TABLES l_tab_csvformat
USING ''
0
''.
ELSE.
PERFORM f_download_1 TABLES l_tab_csvformat
USING ''
''
0
''.
ENDIF.

IF p_chk_a = g_con_x OR
p_chk_c = g_con_x OR
p_chk_p = g_con_x.

PERFORM f_out_option.
ENDIF.

ENDFORM.                                                     "F_OUT_FILE
************************************************************************
*   source file output process
*    F_OUT_OPTION
************************************************************************
FORM f_out_option.

* Full source line
TYPES: BEGIN OF l_typ_all,
source(255) TYPE c,   "Source Line
END OF l_typ_all.

DATA: l_rec_all TYPE l_typ_all,
l_tab_all TYPE TABLE OF l_typ_all.


* Comment source line
TYPES: BEGIN OF l_typ_comment,
source(255) TYPE c,   "Source line
END OF l_typ_comment.

DATA: l_rec_comment TYPE l_typ_comment,
l_tab_comment TYPE TABLE OF l_typ_comment.


* Process source line
TYPES: BEGIN OF l_typ_process,
source(255) TYPE c,    "Source line
END OF l_typ_process.
DATA: ls_rec_file TYPE typ_file.
DATA: lv_posi   TYPE i.
DATA: l_rec_process TYPE l_typ_process,
l_tab_process TYPE TABLE OF l_typ_process.
*-----------------------------------------------------------------------

SORT gt_file ASCENDING BY mainp name  dynr lineno commentflg.
IF p_chk_a = g_con_x.
DELETE ADJACENT DUPLICATES FROM gt_file
COMPARING mainp name  dynr lineno.
ELSE.
DELETE ADJACENT DUPLICATES FROM gt_file COMPARING ALL FIELDS.
ENDIF.

LOOP AT gt_file INTO gs_rec_file.
ls_rec_file  = gs_rec_file.
IF p_r5 IS NOT INITIAL.
FIND '=' in gs_rec_file-name match OFFSET lv_posi.
IF sy-subrc <> 0.
CONTINUE.
ENDIF.
ENDIF.

IF p_chk_a = g_con_x.
CLEAR l_rec_all.
MOVE gs_rec_file-source TO l_rec_all-source.
APPEND l_rec_all TO l_tab_all.
ENDIF.

IF p_chk_c = g_con_x.
IF gs_rec_file-commentflg = g_con_x.
CLEAR l_rec_comment.
MOVE gs_rec_file-source TO l_rec_comment-source.
APPEND l_rec_comment TO l_tab_comment.
ENDIF.
ENDIF.

IF p_chk_p = g_con_x.
IF gs_rec_file-commentflg <> g_con_x.
CLEAR l_rec_process.
MOVE gs_rec_file-source TO l_rec_process-source.
APPEND l_rec_process TO l_tab_process.
ENDIF.
ENDIF.

AT END OF dynr.
IF p_chk_a = g_con_x.
IF p_46c = g_con_x.
PERFORM f_download_2 TABLES l_tab_all
USING ls_rec_file-name
ls_rec_file-dynr
'A'.
ELSE.
IF p_r5 IS NOT INITIAL.
ls_rec_file-mainp = ls_rec_file-name(lv_posi).
ENDIF.
PERFORM f_download_1 TABLES l_tab_all
USING ls_rec_file-name
ls_rec_file-mainp
ls_rec_file-dynr
'A'.
ENDIF.
ENDIF.

IF p_chk_c = g_con_x.
IF p_46c = g_con_x.
PERFORM f_download_2 TABLES l_tab_comment
USING ls_rec_file-name
ls_rec_file-dynr
'C'.
ELSE.
IF p_r5 IS NOT INITIAL.
ls_rec_file-mainp = ls_rec_file-name(lv_posi).
ENDIF.
PERFORM f_download_1 TABLES l_tab_comment
USING ls_rec_file-name
ls_rec_file-mainp
ls_rec_file-dynr
'C'.
ENDIF.
ENDIF.

IF p_chk_p = g_con_x.
IF p_46c = g_con_x.
PERFORM f_download_2 TABLES l_tab_process
USING ls_rec_file-name
ls_rec_file-dynr
'P'.
ELSE.
IF p_r5 IS NOT INITIAL.
ls_rec_file-mainp = ls_rec_file-name(lv_posi).
ENDIF.
PERFORM f_download_1 TABLES l_tab_process
USING ls_rec_file-name
ls_rec_file-mainp
ls_rec_file-dynr
'P'.
ENDIF.
ENDIF.

CLEAR: l_rec_all,
l_tab_all,
l_rec_comment,
l_tab_comment,
l_rec_process,
l_tab_process.
ENDAT.
ENDLOOP.

ENDFORM.                                                   "F_OUT_OPTION
************************************************************************
*    F_DOWNLOAD_1
*   Description: local file output・Since version 47・
************************************************************************
FORM f_download_1 TABLES tp_out  TYPE table
USING up_name TYPE trdir-name
up_subf TYPE trdir-name
up_dynr TYPE d020t-dynr
up_st   TYPE c.

DATA: l_wrk_filename    TYPE rlgrap-filename,
l_wrk_path        TYPE filep,
l_wrk_file        TYPE filep,
l_wrk_filename_st TYPE string,
l_wrk_frontend_cp TYPE cpcodepage,
l_wrk_codepage    TYPE abap_encod.
*-----------------------------------------------------------------------

IF up_st IS NOT INITIAL.
*   Gerate filename
IF up_dynr IS INITIAL.
CONCATENATE up_name g_con_kaku INTO l_wrk_filename.
ELSE.
CONCATENATE up_name '_' up_dynr g_con_kaku INTO l_wrk_filename.
ENDIF.

CASE up_st.
WHEN 'C'.
CONCATENATE 'COMMENT_' l_wrk_filename INTO l_wrk_filename.
WHEN 'P'.
CONCATENATE 'PROCESS_' l_wrk_filename INTO l_wrk_filename.
ENDCASE.

*   Splite path and file name
CALL FUNCTION 'TRINT_SPLIT_FILE_AND_PATH'
EXPORTING
full_name     = p_filenm
IMPORTING
stripped_name = l_wrk_file
file_path     = l_wrk_path
EXCEPTIONS
x_error       = 1
OTHERS        = 2.
IF up_subf IS NOT INITIAL.
CONCATENATE l_wrk_path up_subf '\' l_wrk_filename INTO
l_wrk_filename_st.
ELSE.
CONCATENATE l_wrk_path  l_wrk_filename INTO l_wrk_filename_st.
ENDIF.
ELSE.
*   Splite path and file name
CALL FUNCTION 'TRINT_SPLIT_FILE_AND_PATH'
EXPORTING
full_name     = p_filenm
IMPORTING
stripped_name = l_wrk_file
file_path     = l_wrk_path
EXCEPTIONS
x_error       = 1
OTHERS        = 2.
IF NOT l_wrk_file CS '.'.
CONCATENATE l_wrk_file '.csv' INTO l_wrk_file.
ENDIF.
IF up_subf IS NOT INITIAL.
CONCATENATE l_wrk_path up_subf '\' l_wrk_file INTO
l_wrk_filename_st.
ELSE.
CONCATENATE l_wrk_path l_wrk_file INTO l_wrk_filename_st.
ENDIF.
*    CONCATENATE l_wrk_path s_progid-low '\' l_wrk_file INTO
*l_wrk_filename_st.
ENDIF.

CALL FUNCTION 'NLS_GET_FRONTEND_CP'
EXPORTING
langu                 = sy-langu
IMPORTING
frontend_codepage     = l_wrk_frontend_cp
EXCEPTIONS
illegal_syst_codepage = 1
no_frontend_cp_found  = 2
internal_or_db_error  = 3
OTHERS                = 4.

IF sy-subrc = 0.
l_wrk_codepage = l_wrk_frontend_cp.
ELSE.
MESSAGE ID g_con_msgid1 TYPE g_con_msge NUMBER g_con_msgno1
WITH 'System Error'(t28).
ENDIF.

IF sy-uname = 'SSCEXTCWU'.
l_wrk_codepage = '8400'.
ENDIF.

CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
*     BIN_FILESIZE                    =
filename                        = l_wrk_filename_st
filetype                        = g_con_filetype
append                          = g_con_x
write_field_separator           = g_con_x
*     HEADER                          = '00'
trunc_trailing_blanks           = g_con_x
*     WRITE_LF                        = g_con_x
*     COL_SELECT                      = ' '
*     COL_SELECT_MASK                 = ' '
dat_mode                        = g_con_x
*     CONFIRM_OVERWRITE               = ' '
*     NO_AUTH_CHECK                   = ' '
codepage                        = l_wrk_codepage
*     IGNORE_CERR                     = ABAP_TRUE
*     REPLACEMENT                     = '#'
*     WRITE_BOM                       = ' '
*     TRUNC_TRAILING_BLANKS_EOL       = g_con_x
*     WK1_N_FORMAT                    = ' '
*     WK1_N_SIZE                      = ' '
*     WK1_T_FORMAT                    = ' '
*     WK1_T_SIZE                      = ' '
*   IMPORTING
*     FILELENGTH                      =
TABLES
data_tab                        = tp_out
*     FIELDNAMES                      =
EXCEPTIONS
file_write_error                = 1
no_batch                        = 2
gui_refuse_filetransfer         = 3
invalid_type                    = 4
no_authority                    = 5
unknown_error                   = 6
header_not_allowed              = 7
separator_not_allowed           = 8
filesize_not_allowed            = 9
header_too_long                 = 10
dp_error_create                 = 11
dp_error_send                   = 12
dp_error_write                  = 13
unknown_dp_error                = 14
access_denied                   = 15
dp_out_of_memory                = 16
disk_full                       = 17
dp_timeout                      = 18
file_not_found                  = 19
dataprovider_exception          = 20
control_flush_error             = 21
OTHERS                          = 22
.

IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

ENDFORM.                                                   "F_DOWNLOAD_1
************************************************************************
*   F_DOWNLOAD_2
*   Description: Local file output・Before version46C・

************************************************************************
FORM f_download_2 TABLES tp_out  TYPE table
USING up_name TYPE trdir-name
up_dynr TYPE d020t-dynr
up_st   TYPE c.

DATA: l_wrk_filename    TYPE rlgrap-filename,
l_wrk_path        TYPE filep,
l_wrk_file        TYPE filep.
*-----------------------------------------------------------------------
IF up_st IS NOT INITIAL.
*   Generate file name
IF up_dynr IS INITIAL.
CONCATENATE up_name g_con_kaku INTO l_wrk_filename.
ELSE.
CONCATENATE up_name '_' up_dynr g_con_kaku INTO l_wrk_filename.
ENDIF.

CASE up_st.
WHEN 'C'.
CONCATENATE 'COMMENT_' l_wrk_filename INTO l_wrk_filename.
WHEN 'P'.
CONCATENATE 'PROCESS_' l_wrk_filename INTO l_wrk_filename.
ENDCASE.

*    Splite path and file name
CALL FUNCTION 'TRINT_SPLIT_FILE_AND_PATH'
EXPORTING
full_name     = p_filenm
IMPORTING
stripped_name = l_wrk_file
file_path     = l_wrk_path
EXCEPTIONS
x_error       = 1
OTHERS        = 2.

CONCATENATE l_wrk_path s_progid-low '\' l_wrk_filename INTO
l_wrk_filename.
ENDIF.


CALL FUNCTION 'WS_DOWNLOAD'
EXPORTING
filename                = l_wrk_filename
filetype                = 'DAT'
TABLES
data_tab                = tp_out
EXCEPTIONS
file_open_error         = 1
file_write_error        = 2
invalid_filesize        = 3
invalid_type            = 4
no_batch                = 5
unknown_error           = 6
invalid_table_width     = 7
gui_refuse_filetransfer = 8
customer_error          = 9
OTHERS                  = 10.

IF sy-subrc <> 0.
MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.

ENDFORM.                                                   "F_DOWNLOAD_2
************************************************************************
*    F_GET_ITEM
************************************************************************
FORM f_get_item USING up_name
up_dynr
up_totalstep
up_commentstep
CHANGING cp_percent
cp_programinfo.

DATA: l_rec_textpool TYPE textpool,
l_tab_textpool TYPE TABLE OF textpool.
*-----------------------------------------------------------------------

cp_percent = up_commentstep / up_totalstep * 100.

IF up_dynr <> ''.
SELECT SINGLE dtxt
INTO cp_programinfo
FROM d020t
WHERE prog = up_name
AND dynr = up_dynr
AND lang = sy-langu.
ELSE.
READ TEXTPOOL up_name INTO l_tab_textpool LANGUAGE sy-langu.
CLEAR l_rec_textpool.
READ TABLE l_tab_textpool
WITH KEY id = 'R' INTO l_rec_textpool.
cp_programinfo = l_rec_textpool-entry.
ENDIF.

ENDFORM.                                                     "F_GET_ITEM
************************************************************************
*   AT LINE SELECTION OUTPUT
*   F_LINE_SELECTION
************************************************************************
FORM f_line_selection.

TYPES: BEGIN OF l_typ_255clm,
line(255) TYPE c,
END OF l_typ_255clm.

DATA: l_rec_255clm TYPE l_typ_255clm,
l_tab_255clm TYPE TABLE OF l_typ_255clm.

DATA: l_rec_d020s TYPE d020s,
l_rec_d021s TYPE d021s,
l_rec_d022s TYPE d022s,
l_rec_d023s TYPE d023s.

DATA: l_tab_d021s TYPE TABLE OF d021s,
l_tab_d022s TYPE TABLE OF d022s,
l_tab_d023s TYPE TABLE OF d023s.

*-TEXTPOOL
DATA: l_rec_textpool TYPE textpool,
l_tab_textpool TYPE TABLE OF textpool.

TYPES: BEGIN OF l_typ_out,
linecnt(6)  TYPE n,  "Line no
separate(1) TYPE c,  "separate character
source(255) TYPE c,  "Source Code
END OF l_typ_out.

DATA l_rec_out TYPE l_typ_out.

DATA: l_wrk_name            TYPE trdir-name,
l_wrk_dynpro_prog(44) TYPE c,
l_wrk_linecnt(6)      TYPE n.
*-----------------------------------------------------------------------

CLEAR l_wrk_name.
SELECT SINGLE name
INTO l_wrk_name
FROM trdir
WHERE name = sy-lisel(40).

IF sy-subrc = 0.
IF sy-lisel+41(4) IS INITIAL.
*     Gain source code
READ REPORT sy-lisel(40) INTO l_tab_255clm.
ELSE.
l_wrk_dynpro_prog       = sy-lisel(40).
l_wrk_dynpro_prog+40(4) = sy-lisel+40(4).
*     Gain source code
IMPORT DYNPRO l_rec_d020s l_tab_d021s l_tab_d022s l_tab_d023s
ID l_wrk_dynpro_prog.

IF sy-subrc = 0.
l_tab_255clm[] = l_tab_d022s[].
ENDIF.
ENDIF.

*   Output process
NEW-PAGE LINE-SIZE 255.

READ TEXTPOOL sy-lisel(40) INTO l_tab_textpool LANGUAGE sy-langu.

*   Head
WRITE: /1  'Program ID:'(t09),
15 sy-lisel(40),
/1  'Dynpro No :'(t26),
15 sy-lisel+40(4),
/1  'Program Name・'(t27),
15 sy-lisel+101(69),
/   sy-uline,
/1  'Line No'(t25),
7  sy-vline,
8  'Source Code'(t92),
/   sy-uline.

*   Item
CLEAR: l_rec_255clm,
l_wrk_linecnt.
LOOP AT l_tab_255clm INTO l_rec_255clm.
ADD 1 TO l_wrk_linecnt.
WRITE l_wrk_linecnt NO-ZERO TO l_rec_out-linecnt.
l_rec_out-separate = '|'.
l_rec_out-source   = l_rec_255clm.
WRITE / l_rec_out.
ENDLOOP.

*   List header: Column headings
READ TABLE l_tab_textpool TRANSPORTING NO FIELDS WITH KEY id = 'H'.
IF sy-subrc = 0.
WRITE: /1  'List header: Column headings・'(t40),
/   sy-uline.
CLEAR l_rec_textpool.
LOOP AT l_tab_textpool INTO l_rec_textpool WHERE id = 'H'.
WRITE: /1 l_rec_textpool-key, 15 ':', 18 l_rec_textpool-entry.
ENDLOOP.
ENDIF.

*   Text symbol text
READ TABLE l_tab_textpool TRANSPORTING NO FIELDS WITH KEY id = 'I'.
IF sy-subrc = 0.
WRITE: /1  'Text symbol text・'(t41),
/   sy-uline.
CLEAR l_rec_textpool.
LOOP AT l_tab_textpool INTO l_rec_textpool WHERE id = 'I'.
WRITE: /1 l_rec_textpool-key, 15 ':', 18 l_rec_textpool-entry.
ENDLOOP.
ENDIF.

*   Selection text
READ TABLE l_tab_textpool TRANSPORTING NO FIELDS WITH KEY id = 'S'.
IF sy-subrc = 0.
WRITE: /1  'Selection text・'(t42),
/   sy-uline.
CLEAR l_rec_textpool.
LOOP AT l_tab_textpool INTO l_rec_textpool WHERE id = 'S'.
IF l_rec_textpool-entry = g_con_dict_ref .
l_rec_textpool-entry = 'Ref Dictionary'(t47).
ENDIF.
WRITE: /1 l_rec_textpool-key, 15 ':', 18 l_rec_textpool-entry.
ENDLOOP.
ENDIF.

*   List Title: Titlebar
READ TABLE l_tab_textpool TRANSPORTING NO FIELDS WITH KEY id = 'T'.
IF sy-subrc = 0.
WRITE: /1  'List Title: Titlebar・'(t43),
/   sy-uline.
CLEAR l_rec_textpool.
LOOP AT l_tab_textpool INTO l_rec_textpool WHERE id = 'T'.
WRITE: /1 l_rec_textpool-key, 15 ':', 18 l_rec_textpool-entry.
ENDLOOP.
ENDIF.
ENDIF.

ENDFORM.                                               "F_LINE_SELECTION
************************************************************************
*   Search help
*   F_KENSAKU_HELP

************************************************************************
FORM f_kensaku_help.

TYPES BEGIN OF l_typ_dynpfields.
INCLUDE TYPE dynpread.
TYPES END OF l_typ_dynpfields.

DATA: l_rec_dynpfields TYPE l_typ_dynpfields,
l_tab_dynpfields TYPE TABLE OF l_typ_dynpfields.

DATA l_wrk_object_type TYPE seu_obj.
*-----------------------------------------------------------------------

IF p_r3 = g_con_x.
l_wrk_object_type = 'PROG'.
ELSEIF p_r4 = g_con_x.
l_wrk_object_type = 'FF'.
ENDIF.

l_rec_dynpfields-fieldname = 'S_PROGID-LOW'.
APPEND l_rec_dynpfields TO l_tab_dynpfields.

CALL FUNCTION 'DYNP_VALUES_READ'
EXPORTING
dyname               = sy-repid
dynumb               = sy-dynnr
TABLES
dynpfields           = l_tab_dynpfields
EXCEPTIONS
OTHERS.

READ TABLE l_tab_dynpfields INDEX 1 INTO l_rec_dynpfields.

CALL FUNCTION 'REPOSITORY_INFO_SYSTEM_F4'
EXPORTING
object_type          = l_wrk_object_type
object_name          = l_rec_dynpfields-fieldvalue
IMPORTING
object_name_selected = s_progid-low
EXCEPTIONS
cancel               = 1
wrong_type           = 2
OTHERS               = 3.

ENDFORM.                                                 "F_KENSAKU_HELP
************************************************************************
*   USER COMMAND PROCESS
*   F_SCREEN_SELECT
************************************************************************
FORM f_screen_select.

CASE sy-ucomm.
*   File output option_show
WHEN 'DET1'.
gv_ucomm = 'DET1'.
*   File output option_ not show
WHEN 'DET2'.
gv_ucomm = 'DET2'.
*   Process object option_head
WHEN 'DET3'.
gv_ucomm = 'DET3'.
*   Process object option_ not show
WHEN 'DET4'.
gv_ucomm = 'DET4'.
*   File output
WHEN 'B1'.
CLEAR: s_progid.
REFRESH: s_progid.
gv_ucomm = 'B1'.
WHEN 'BBB'.
gv_ucomm = 'BBB'.
ENDCASE.

ENDFORM.                                                "F_SCREEN_SELECT

************************************************************************
*     selection screen output catelog
*    F_SCREEN_OUTPUT
************************************************************************
FORM f_screen_output.

CASE gv_ucomm.
WHEN space.
LOOP AT SCREEN.
*       Process object option_ not show
IF screen-group1 = 'SD4'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.
*       Process object option_item
IF screen-group1 = 'SB5'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.
*       File output option_ not show
IF screen-group1 = 'SD2'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.
*       File output option_ item
IF screen-group1 = 'SB4'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.
ENDLOOP.

PERFORM f_screen_edit_1.

*   Detail selected
WHEN 'DET1'.
LOOP AT SCREEN.
*       File output option_show
IF screen-group1 = 'SD1'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.

*       File output option_show
IF screen-group1 = 'SB4'.
screen-active = '1'.
MODIFY SCREEN.
ENDIF.
ENDLOOP.

PERFORM f_screen_edit_1.
PERFORM f_screen_edit_3.

gv_det1 = g_con_x.

*   Detail selected
WHEN 'DET2'.
LOOP AT SCREEN.
*       File output option_head
IF screen-group1 = 'SD2'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.

*       File output option_ item
IF screen-group1 = 'SB4'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.
ENDLOOP.

PERFORM f_screen_edit_1.
PERFORM f_screen_edit_3.

gv_det1 = space.

WHEN 'DET3'.
LOOP AT SCREEN.
*       Process object option_head
IF screen-group1 = 'SD3'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.

*       Process object option_item
IF screen-group1 = 'SB5'.
screen-active = '1'.
MODIFY SCREEN.
ENDIF.
ENDLOOP.

PERFORM f_screen_edit_1.
PERFORM f_screen_edit_2.

gv_det3 = g_con_x.
WHEN 'DET4'.
LOOP AT SCREEN.
*       Process object option_head
IF screen-group1 = 'SD4'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.

*       Process object option_item
IF screen-group1 = 'SB5'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.
ENDLOOP.

PERFORM f_screen_edit_1.
PERFORM f_screen_edit_2.

gv_det3 = space.
WHEN 'B1'.
PERFORM f_screen_edit_1.
PERFORM f_screen_edit_2.
PERFORM f_screen_edit_3.
WHEN 'BBB'.
PERFORM append_s_progid.
ENDCASE.

ENDFORM.                                                "F_SCREEN_OUTPUT
************************************************************************
*   selection screen edit1
*   F_SCREEN_EDIT_1
************************************************************************
FORM f_screen_edit_1.

IF p_r1 = g_con_x.
CLEAR p_filenm.       " download target
p_chk_a = space.      "program source output(Full lines)
p_chk_c = space.      "program source output(Comment lines)
p_chk_p = space.      "program source output(Process lines)

LOOP AT SCREEN.
IF screen-group1 = 'SB3' OR
screen-group1 = 'SB4'.
screen-input = 0.
screen-value_help = 0.
MODIFY SCREEN.
ENDIF.
ENDLOOP.
ELSE.
IF p_filenm IS INITIAL.
p_filenm = gv_defpath.
ENDIF.
ENDIF.

ENDFORM.                                                "F_SCREEN_EDIT_1

************************************************************************
*   Name ・selection screen edit2
*   F_SCREEN_EDIT_2
************************************************************************
FORM f_screen_edit_2.

IF gv_det1 = g_con_x.
LOOP AT SCREEN.
*     Detail item set
IF screen-group1 = 'SD1'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.

*     Option item set
IF screen-group1 = 'SB4'.
screen-active = '1'.
MODIFY SCREEN.
ENDIF.
ENDLOOP.
ELSE.
LOOP AT SCREEN.
*     Detail item set
IF screen-group1 = 'SD2'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.

*     Option item set
IF screen-group1 = 'SB4'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.
ENDLOOP.
ENDIF.

ENDFORM.                                                "F_SCREEN_EDIT_2

************************************************************************
*   SELECTION SCREEN EDIT
*   F_SCREEN_EDIT_3
************************************************************************
FORM f_screen_edit_3.

IF gv_det3 = g_con_x.
LOOP AT SCREEN.
*     Detail selection screen set
IF screen-group1 = 'SD3'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.

*     OPTION ITEM SET
IF screen-group1 = 'SB5'.
screen-active = '1'.
MODIFY SCREEN.
ENDIF.
ENDLOOP.
ELSE.
LOOP AT SCREEN.
*     Detail item set
IF screen-group1 = 'SD4'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.

*     Option item set
IF screen-group1 = 'SB5'.
screen-active = '0'.
MODIFY SCREEN.
ENDIF.
ENDLOOP.
ENDIF.

ENDFORM.                                                "F_SCREEN_EDIT_3

************************************************************************
* SELECTION-SCREEN OBLIGATORY CHECK
* F_CHECK_SCREEN
************************************************************************
FORM f_check_screen.

IF p_count IS INITIAL.
SET CURSOR FIELD 'P_COUNT'.
MESSAGE ID g_con_msgid1 TYPE g_con_msge NUMBER g_con_msgno1
WITH 'Process count is between 1 and 999'(t22).
ENDIF.

IF s_progid-low IS INITIAL.
SET CURSOR FIELD 'S_PROGID-LOW'.
MESSAGE ID g_con_msgid1 TYPE g_con_msge NUMBER g_con_msgno1
WITH 'Please enter program ID'(t23).
ENDIF.

IF p_r2 = g_con_x.
IF p_filenm IS INITIAL.
SET CURSOR FIELD 'P_FILENM'.
MESSAGE ID g_con_msgid1 TYPE g_con_msge NUMBER g_con_msgno1
WITH 'Please enter download target'(t85).
ENDIF.
ENDIF.

ENDFORM.                                                 "F_CHECK_SCREEN
*&---------------------------------------------------------------------*
*&      Form  APPEND_S_PROGID
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM append_s_progid .
TYPES: BEGIN OF l_typ_tfdir,
funcname TYPE tfdir-funcname,
pname    TYPE tfdir-pname,
END OF l_typ_tfdir.

DATA: l_rec_tfdir TYPE l_typ_tfdir,
lv_line     TYPE i,
l_tab_tfdir TYPE TABLE OF l_typ_tfdir.

TYPES: BEGIN OF l_typ_trdir,
name     TYPE trdir-name,
funcname TYPE tfdir-funcname,
END OF l_typ_trdir.

DATA: l_rec_trdir TYPE l_typ_trdir,
l_tab_trdir TYPE TABLE OF l_typ_trdir.

IF p_r9 IS NOT INITIAL.
IF p_r4 = g_con_x.
IF p_usern = '*'.
SELECT funcname
pname
INTO CORRESPONDING FIELDS OF TABLE l_tab_tfdir
FROM tfdir
INNER JOIN trdir
ON tfdir~pname = trdir~name.
ELSE.
SELECT funcname
pname
INTO CORRESPONDING FIELDS OF TABLE l_tab_tfdir
FROM tfdir
INNER JOIN trdir
ON tfdir~pname = trdir~name
WHERE (   trdir~cnam = p_usern
OR trdir~unam = p_usern ).
ENDIF.

IF sy-subrc = 0.
LOOP AT l_tab_tfdir INTO l_rec_tfdir.
IF  NOT ( l_rec_tfdir-funcname(1) = 'Y'
OR l_rec_tfdir-funcname(1) = 'Z' ).
CONTINUE.
ENDIF.
s_progid-sign = 'I'.
s_progid-option = 'EQ'.
s_progid-low =  l_rec_tfdir-funcname.
APPEND s_progid.
ENDLOOP.
ENDIF.
ELSEIF p_r3 = g_con_x.
IF p_usern = '*'.
SELECT name
INTO CORRESPONDING FIELDS OF TABLE l_tab_trdir
FROM trdir
WHERE  subc = '1'.    "Executable
ELSE.
SELECT name
INTO CORRESPONDING FIELDS OF TABLE l_tab_trdir
FROM trdir
WHERE ( cnam = p_usern OR unam = p_usern )
AND subc = '1'.    "Executable
ENDIF.

IF sy-subrc = 0.
LOOP AT l_tab_trdir INTO l_rec_trdir.
IF l_rec_trdir-name(1) = '/'.
CONTINUE.
ENDIF.
IF  NOT ( ( l_rec_trdir-name(1) = 'Y' )
OR ( l_rec_trdir-name(1) = 'Z' ) ).
CONTINUE.
ENDIF.
s_progid-sign = 'I'.
s_progid-option = 'EQ'.
s_progid-low =  l_rec_trdir-name.
APPEND s_progid.
ENDLOOP.
ENDIF.
ELSEIF p_r5 = g_con_x.
IF  p_usern = '*'..
SELECT name
INTO CORRESPONDING FIELDS OF TABLE l_tab_trdir
FROM trdir
WHERE "( cnam = p_usern OR unam = p_usern )
occurs = ' '
AND dbapl = 'S'
AND appl = 'S'.
ELSE.
SELECT name
INTO CORRESPONDING FIELDS OF TABLE l_tab_trdir
FROM trdir
WHERE ( cnam = p_usern OR unam = p_usern )
AND occurs = ' '
AND dbapl = 'S'
AND appl = 'S'.
ENDIF.

IF sy-subrc = 0.
LOOP AT l_tab_trdir INTO l_rec_trdir.
IF l_rec_trdir-name(1) = '/'.
CONTINUE.
ENDIF.
IF  NOT ( ( l_rec_trdir-name(1) = 'Y' )
OR ( l_rec_trdir-name(1) = 'Z' ) ).
CONTINUE.
ENDIF.
find '=' in l_rec_trdir-name match OFFSET lv_line.
IF sy-subrc <> 0.
CONTINUE.
ENDIF.
s_progid-sign = 'I'.
s_progid-option = 'EQ'.
s_progid-low =  l_rec_trdir-name.
APPEND s_progid.
ENDLOOP.
ENDIF.
ENDIF.
delete ADJACENT DUPLICATES FROM s_progid.

ENDIF.
ENDFORM.                    " APPEND_S_PROGID
