*&---------------------------------------------------------------------*
*&[プログラム名]
*&  ZYTD5090   購買発注変更BDC
*&
*&[処理概要]
*&  購買発注変更BDCを行う。
*&
*&[改定履歴]
*& YYYY/MM/DD  Programar         Description
*& 2012/08/28  ISID              ES-UP
*&---------------------------------------------------------------------*
REPORT ZYTD5080
LINE-SIZE  170 LINE-COUNT 58
MESSAGE-ID Y1.

TABLES : EBAN .

TYPES : BEGIN OF T_IN ,
BANFN LIKE EBAN-BANFN ,
BNFPO LIKE EBAN-BNFPO ,
EKGRP LIKE EBAN-EKGRP ,
END OF T_IN ,
BEGIN OF T_DP ,
BANFN LIKE EBAN-BANFN ,
BNFPO LIKE EBAN-BNFPO ,
MAE_EKGRP LIKE EBAN-EKGRP ,
ATO_EKGRP LIKE EBAN-EKGRP ,
RESULT(100) TYPE C ,
END OF T_DP .

DATA : IN_WRK TYPE T_IN ,
IN_TAB TYPE TABLE OF T_IN ,
R3_WRK TYPE T_IN ,
R3_TAB TYPE TABLE OF T_IN ,
DP_WRK TYPE T_DP ,
DP_TAB TYPE TABLE OF T_DP ,
BDC_TAB TYPE TABLE OF BDCDATA WITH HEADER LINE ,
BDC_MSG TYPE TABLE OF BDCMSGCOLL WITH HEADER LINE .

DATA : W_FIRST(1) TYPE C ,
W_MODE(1) TYPE C VALUE 'N' .

* Mod ES-UP 2012/08/22 -->
*CONSTANTS : W_TAB TYPE X VALUE '09' .
constants: W_TAB type string value CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.
* Mod ES-UP 2012/08/22 <--

* NDSC KURI ADD カウンター追加
DATA : W_COUNT1 TYPE I,
W_COUNT2 TYPE I,
W_COUNT3 TYPE I,
W_COUNT4 TYPE I.

SELECTION-SCREEN : BEGIN OF BLOCK 1 WITH FRAME TITLE TEXT-001.
PARAMETERS : IN_FILE(128) TYPE C OBLIGATORY.
SELECTION-SCREEN : END OF BLOCK 1.
PARAMETERS   P_TEST AS CHECKBOX .

START-OF-SELECTION .

PERFORM READ_FILE .
PERFORM DATA_GET .
PERFORM BDC_GOGO .
PERFORM WRITE_LIST .

*---------------------------------------------------------------------*
*       FORM READ_FILE                                                *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM READ_FILE .
* Mod ES-UP 2012/08/22 -->
CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
DATA L_CODEPAGE TYPE CPCODEPAGE.
* Mod ES-UP 2012/08/22 <--
DATA : IN_LINE(30) TYPE C .
MOVE 'X' TO W_FIRST .
* Mod ES-UP 2012/08/22 -->
*  OPEN DATASET IN_FILE FOR INPUT IN TEXT MODE .
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).

OPEN DATASET IN_FILE FOR INPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
* Mod ES-UP 2012/08/22 <--
IF SY-SUBRC NE  0 .
MESSAGE I209 .
STOP .
ENDIF .
DO .
READ DATASET IN_FILE INTO IN_LINE  .
IF SY-SUBRC NE 0 .
EXIT .
ENDIF .
SPLIT IN_LINE
AT  W_TAB
INTO IN_WRK-BANFN
IN_WRK-BNFPO
IN_WRK-EKGRP.

APPEND IN_WRK TO IN_TAB .
CLEAR : IN_WRK , W_FIRST .
ENDDO .
IF W_FIRST EQ  'X' .
MESSAGE I204 .
STOP .
ENDIF .
CLOSE DATASET IN_FILE .
* 2003/04/07 NDSC KURI ADD カウンタ
CLEAR: W_COUNT1,W_COUNT2,W_COUNT3,W_COUNT4.
DESCRIBE TABLE IN_TAB LINES W_COUNT4.

ENDFORM .
*---------------------------------------------------------------------*
*       FORM DATA_GET                                                 *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM DATA_GET .
SELECT BANFN BNFPO EKGRP
FROM EBAN
INTO CORRESPONDING FIELDS OF TABLE R3_TAB
FOR ALL ENTRIES IN IN_TAB
WHERE BANFN EQ IN_TAB-BANFN
AND  BNFPO EQ IN_TAB-BNFPO.

IF SY-SUBRC NE 0 .
MESSAGE I008 .
STOP .
ENDIF .
ENDFORM .

*---------------------------------------------------------------------*
*       FORM BDC_GOGO                                                 *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM BDC_GOGO .
DATA : W_MEISAI(20) TYPE C  .
SORT : IN_TAB BY BANFN BNFPO ,
R3_TAB BY BANFN BNFPO .
LOOP AT IN_TAB INTO IN_WRK .
MOVE : IN_WRK-BANFN TO DP_WRK-BANFN ,
IN_WRK-BNFPO TO DP_WRK-BNFPO .
READ TABLE R3_TAB INTO R3_WRK WITH KEY BANFN = IN_WRK-BANFN
BNFPO = IN_WRK-BNFPO .
IF SY-SUBRC NE 0 .
* Ｒ/３に処理対象データが存在しない場合
MOVE '対象データがありません' TO DP_WRK-RESULT .
ELSE .
* Ｒ/３に処理対象データが存在した場合
MOVE : R3_WRK-EKGRP TO DP_WRK-MAE_EKGRP ,
IN_WRK-EKGRP TO DP_WRK-ATO_EKGRP .
CONCATENATE :DP_WRK-MAE_EKGRP
'→'
DP_WRK-ATO_EKGRP
INTO  DP_WRK-RESULT.
* 2003/04/07　BDCﾁｮﾋﾞ変
*        SEPARATED BY ' '  ,
*                   'EBAN-EKGRP('
*                   IN_WRK-BNFPO+2(2)
*                   ')'
*              INTO W_MEISAI .
* 第一画面
PERFORM SET_BDC USING : 'SAPMM06B' '0105'  'X' ,
'BDC_CURSOR' 'EBAN-BANFN' '' ,
'EBAN-BANFN' IN_WRK-BANFN '',
'BDC_OKCODE' '/00' '' ,
* 明細指定
'SAPMM06B' '0106' 'X' ,
'RM06B-BNFPO' IN_WRK-BNFPO '' ,
'BDC_OKCODE' '/00' '' ,
*                              'EBAN-BANFN' IN_WRK-BANFN '' ,
'SAPMM06B' '0106' 'X' ,
'RM06B-BNFPO' IN_WRK-BNFPO '' ,
*                              'RM06B-TCSELFLAG(01)' 'X' '',
'EBAN-EKGRP(01)' IN_WRK-EKGRP '' ,
'BDC_OKCODE' '=BU' '' ,
'SAPMM06B' '0102' 'X' ,
'EBAN-EKGRP' IN_WRK-EKGRP '' ,
'BDC_OKCODE' '=BU' '' .
IF P_TEST NE 'X' .
PERFORM CALL_TRAN USING 'ME52' .
ENDIF .
ENDIF .
APPEND DP_WRK TO DP_TAB .
CLEAR :  DP_WRK , R3_WRK , IN_WRK , W_MEISAI .
ENDLOOP .
ENDFORM .

*---------------------------------------------------------------------*
*       FORM WRITE_LIST                                               *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
FORM WRITE_LIST .
LOOP AT DP_TAB INTO DP_WRK .
WRITE AT : /01 DP_WRK-BANFN ,
13 DP_WRK-BNFPO ,
20 DP_WRK-RESULT .
CLEAR : DP_WRK .
ENDLOOP .
* 件数出力
SKIP.
WRITE  : /01 '変更対象データ件数' , 20 W_COUNT4,
/01 'BDC実行件数' , 20 W_COUNT1,
/01 'BDC変更件数' , 20 W_COUNT2,
/01 'BDCエラー件数' , 20 W_COUNT3.
MESSAGE S401 WITH '変更対象データ件数' W_COUNT4.
MESSAGE S401 WITH 'BDC実行件数' W_COUNT1.
MESSAGE S401 WITH 'BDC変更件数' W_COUNT2.
MESSAGE S401 WITH 'BDCエラー件数' W_COUNT3.

ENDFORM .
*---------------------------------------------------------------------*
*       FORM SET_BDC                                                  *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  P_DAT                                                         *
*  -->  P_VAL                                                         *
*  -->  P_FLG                                                         *
*---------------------------------------------------------------------*
FORM SET_BDC USING P_DAT P_VAL P_FLG .
MOVE : P_FLG TO BDC_TAB-DYNBEGIN .
IF P_FLG EQ 'X' .
MOVE : P_DAT TO BDC_TAB-PROGRAM ,
P_VAL TO BDC_TAB-DYNPRO .
ELSE .
MOVE : P_DAT TO BDC_TAB-FNAM ,
P_VAL TO BDC_TAB-FVAL .
ENDIF .
APPEND : BDC_TAB .
CLEAR : BDC_TAB .
ENDFORM .

*---------------------------------------------------------------------*
*       FORM CALL_TRAN                                                *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  P_TRCD                                                        *
*---------------------------------------------------------------------*
FORM CALL_TRAN USING P_TRCD .
DATA : W_MSG LIKE MESSAGE ,
W_MSGNO LIKE SY-MSGNO .

CALL TRANSACTION P_TRCD
USING   BDC_TAB
MODE    W_MODE
MESSAGES INTO    BDC_MSG.
* NDSC KURI ADD 処理結果カウンター追加
ADD 1 TO W_COUNT1.    " BDC 実行カウント
IF SY-SUBRC = 0.
ADD 1 TO W_COUNT2. " ＯＫカウント
ELSE.
ADD 1 TO W_COUNT3. " エラーカウント
MESSAGE S402 WITH '購買依頼番号：' IN_WRK-BANFN IN_WRK-BNFPO.
WRITE : '購買依頼番号：' , IN_WRK-BANFN , IN_WRK-BNFPO.
LOOP AT BDC_MSG .
MOVE : BDC_MSG-MSGNR TO W_MSGNO .
CALL FUNCTION 'WRITE_MESSAGE'
EXPORTING
MSGID         = BDC_MSG-MSGID
MSGNO         = W_MSGNO
MSGTY         = BDC_MSG-MSGTYP
MSGV1         = BDC_MSG-MSGV1
MSGV2         = BDC_MSG-MSGV2
MSGV3         = BDC_MSG-MSGV3
MSGV4         = BDC_MSG-MSGV4
*       MSGV5         = BDC_MSG-MSGV5
IMPORTING
*       ERROR         =
MESSG         = W_MSG
*       MSGLN         =
.
MESSAGE ID BDC_MSG-MSGID
*          Type BDC_MSG-MSGTYP
TYPE 'S'
NUMBER W_MSGNO
WITH BDC_MSG-MSGV1
BDC_MSG-MSGV2
BDC_MSG-MSGV3
BDC_MSG-MSGV4.
WRITE W_MSG-MSGTX.
ENDLOOP .
ENDIF.
REFRESH : BDC_TAB , BDC_MSG .

ENDFORM .
