***---------------------------------------------------------------------
** (c) Copyright 1998 OptiSystems Solutions LTD. All Rights Reserved  **
***---------------------------------------------------------------------
*   INCLUDE YSQZDALG
*&---------------------------------------------------------------------*
*&      Form  PRINT_STAT
*&---------------------------------------------------------------------*
FORM PRINT_STAT.
DATA: CFI TYPE I,  CFA TYPE I,
CCH TYPE I,
CAN TYPE I,
CAY TYPE I,
CPR TYPE I.
****
SY-LSIND = 0.  CVS = ' '.
WRITE: / 'Analysis Statistic'(001) COLOR 7.HIDE CVS.
WRITE: / '------------------------------'.HIDE CVS.
****
SELECT COUNT( * ) FROM YSQ_SQL_EX INTO CFI
WHERE Y_STATUS = 'FI' AND Y_DATE IN P_DAT.
SELECT COUNT( * ) FROM YSQ_SQL_EX INTO CCH
WHERE Y_STATUS = 'CH' AND Y_DATE IN P_DAT.
CFA = CFI + CCH.
SELECT COUNT( * ) FROM YSQ_SQL_EX INTO CAN
WHERE Y_STATUS = 'AN' AND Y_DATE IN P_DAT.
SELECT COUNT( * ) FROM YSQ_SQL_EX INTO CAY
WHERE Y_STATUS = 'AY' AND Y_DATE IN P_DAT.
SELECT COUNT( * ) FROM YSQ_SQL_EX INTO CPR
WHERE Y_STATUS = 'PR' AND Y_DATE IN P_DAT.
*hotspot
IF CFA > 0.
WRITE: /(4) CFA COLOR 1, 'Programs for analysis   -'(002)
HOTSPOT COLOR 5.
CVS = 'a'.  HIDE CVS.
ELSE.
WRITE: /(4) CFA COLOR 1, 'Programs for analysis   -'(002) COLOR 5.
CVS = ' '.  HIDE CVS.
ENDIF.

IF CAY > 0.
WRITE: /(4) CAY COLOR 1, 'Programs after analysis -'(004)
HOTSPOT COLOR 5.
CVS = 'y'.  HIDE CVS.
ELSE.
WRITE: /(4) CAY COLOR 1, 'Programs after analysis -'(004) COLOR 5.
CVS = ' '.  HIDE CVS.
ENDIF.
****
CVS = ' '.
WRITE: / '------------------------------'.  HIDE CVS.
****
IF CFA = 0.
WRITE: / 'There are no SQLs for analysis.'(006). HIDE CVS.
*  set pf-status 'ANOT'.
SET PF-STATUS 'SUMN'.
ELSE.
WRITE: / 'There are SQLs for analysis.'(007). HIDE CVS.
* write: / 'The analysis may take a few minutes.'(008). hide cvs.
SET PF-STATUS 'SUMA'.
ENDIF.
****
WRITE: / . HIDE CVS.
WRITE: / 'Click on '''(030)  NO-GAP ,
'Programs for analysis'(002) NO-GAP,
'    to execute sql analysis.'(031).  HIDE CVS.

*Write: / . hide cvs.

WRITE: / 'Click on '''(030)  NO-GAP,
'Programs after analysis'(004)  NO-GAP,
''' to look at sql analysis results.'(032). HIDE CVS.
*******

ENDFORM.                    " PRINT_STAT
*&---------------------------------------------------------------------*
*&      Form  AA_PREP
*&---------------------------------------------------------------------*
FORM PRE_AA_PREP.
****
*Set pf-status 'MAIN'.
SET TITLEBAR ' '.
*set user-command 'MAIN'.
CVD = ' '.
*******
ENDFORM.                    " AA_PREP
*&---------------------------------------------------------------------*
*&      Form  PRINT_LINES
*&---------------------------------------------------------------------*
FORM PRINT_LINES TABLES PTB_TESQL TYPE YSQZC_TB_TBL_EXP_SQL
USING WHAT TXT.
****
CVS = '-'.  WSS = 0.
*write: / '-----------------------------------'.    hide: cvs, wss.
SY-LSIND = 1.
*Vlad write: / txt.                                      hide: cvs, wss.
*Vlad write: / '-----------------------------------'.    hide: cvs, wss.
*Vlad write: / '- program'(020), 'transaction'(021),
*Vlad       '    table'(022), '      date  '(023),
*Vlad       ' time in '(024), 'total time'(025).        hide: cvs, wss.
*Vladwrite: /
*Vlad  '----------------------------------------------------------------
HIDE: CVS, WSS.
cvs = cvd.
***Vlad
IF WHAT = 'CH'.
NEW-PAGE.
FORMAT INTENSIFIED.
FORMAT COLOR COL_BACKGROUND.
*     write: /20 text-011 color 7.
*     perform ysq_write_header_of_list.
ENDIF.
***Vlad
****
LOOP AT PTB_TESQL.

IF WHAT <> 'res' AND PTB_TESQL-Y_STATUS <> WHAT. CONTINUE. ENDIF.
****
WSS = SY-TABIX.
SEC = PTB_TESQL-Y_DELTA.
SEC = SEC / 1000.
IF WHAT <> 'AY' AND WHAT <> 'res'.
WRITE: / SY-VLINE, CVS  AS CHECKBOX INPUT .
ELSE.
WRITE: / SY-VLINE, SPACE .
ENDIF.
DATA: LTBL LIKE YMA_SCREEN-Y_ZS_TABLE.
LTBL = PTB_TESQL-WP_TABLE.
PERFORM YMA_FLIP_FLOP.                       " Write color of lines
WRITE:
*         wss+3,
PTB_TESQL-Y_PROGRAM,
SY-VLINE,
PTB_TESQL-Y_TRAN   UNDER C_TRANZ_NAME,
SY-VLINE,
LTBL UNDER C_TABLE_NAME ,                        "ptb_tesql-
SY-VLINE,
PTB_TESQL-Y_DATE  UNDER TEXT-023,
SY-VLINE,
PTB_TESQL-Y_SQL_S UNDER TEXT-024,
SY-VLINE,
SEC UNDER TEXT-025, SY-VLINE.
IF WHAT = 'res'.
CASE PTB_TESQL-Y_STATUS.
WHEN 'AY'.  WRITE: 'Found'(026).
WHEN 'AN'.  WRITE: 'Not Found'(027).
ENDCASE.
ENDIF.
****
hide: cvs, wss.
ENDLOOP.
*****
WSS = 0. CVS = '-'.
*vlad write: / '-----------------------------------'.    hide: cvs, wss.
ULINE /1(G_LENG).
* write: / 'Vasa'.
*******
ENDFORM.                    " PRINT_LINES
*&---------------------------------------------------------------------*
*&      Form  DB_LOAD_SQL
*&---------------------------------------------------------------------*
FORM DB_LOAD_SQL USING PSTAT.
****
IF PSTAT <> 'CH'. REFRESH TB_TESQL. STD-KSTR = 0.  ENDIF.
****
SELECT * FROM YSQ_SQL_EX APPENDING TABLE TB_TESQL
*        where y_status like pstat and y_date in p_dat
WHERE Y_STATUS = PSTAT AND Y_DATE IN P_DAT
ORDER BY Y_PROGRAM DESCENDING.
*        order by wp_table.
*        order by y_delta descending.
ADD SY-DBCNT TO STD-KSTR.
IF STD-KSTR = 0.  EXIT.  ENDIF.
**** sort
CASE STD-SG_SORT.
WHEN 't'. SORT TB_TESQL BY WP_TABLE Y_DATE Y_NO_CYCLE.
WHEN 'p'. SORT TB_TESQL BY Y_PROGRAM.
WHEN 'd'. SORT TB_TESQL BY Y_DATE DESCENDING Y_NO_CYCLE Y_PROGRAM.
ENDCASE.
*******
ENDFORM.                    " DB_LOAD_SQL
*&---------------------------------------------------------------------*
*&      Form  READ_SQL_LIST
*&---------------------------------------------------------------------*
FORM READ_SQL_LIST.  "->tb_lsql
DATA: KK TYPE I, NS TYPE I, NN(7) TYPE N.
****
IF SY-PFKEY(3) <> 'LIS'.  EXIT.  ENDIF.
****
STD-KA_SQL = 0.
CLEAR TB_LSQL[].
ADD STD-KSHP TO STD-KSTR.
****
DO STD-KSTR TIMES.
NS = SY-INDEX.   "+ std-kshp.
READ LINE NS.
IF SY-SUBRC <> 0. EXIT. ENDIF.
****
NN = WSS.  NS = NN.
WS = SY-LISEL.
*** Check if checkbox is fill
IF WS+2(1) = 'X'.
ADD 1 TO STD-KA_SQL.
READ TABLE TB_TESQL INDEX NN.   " sy-index.
APPEND TB_TESQL TO TB_LSQL.
ENDIF.
ENDDO.
*******
ENDFORM.                    " READ_SQL_LIST
*&---------------------------------------------------------------------*
*&      Form  PRINT_SQL
*&---------------------------------------------------------------------*
FORM PRINT_SQL.
****

LOOP AT TB_LSQL.
WSS = SY-TABIX.
WRITE: / SY-VLINE NO-GAP,
TB_LSQL-Y_PROGRAM UNDER C_PROGRAM_NAME,
TB_LSQL-Y_TRAN    UNDER C_TRANZ_NAME ,
TB_LSQL-WP_TABLE  UNDER C_TABLE_NAME,
TB_LSQL-Y_DATE    UNDER TEXT-023,
TB_LSQL-Y_SQL_S   UNDER TEXT-024,
TB_LSQL-Y_SQL_E   UNDER TEXT-025.
WRITE: / '----------------------'.
****
SELECT * FROM YSQ_SQL_TX
WHERE Y_SERVER   = TB_LSQL-Y_SERVER
AND Y_DATE     = TB_LSQL-Y_COL1_D
AND Y_NO_CYCLE = TB_LSQL-Y_COL1_I
AND Y_ADDRESS  = TB_LSQL-Y_ADDRESS.
WRITE: / YSQ_SQL_TX-Y_NUMBER, YSQ_SQL_TX-Y_TEXT.
ENDSELECT.
WRITE: / '--------------------------------------------' NO-GAP,
'----------------------------------------'.
*******
ENDLOOP.
*******
ENDFORM.                    " PRINT_SQL
*&---------------------------------------------------------------------*
*&      Form  OUT_SELECT
*&---------------------------------------------------------------------*
FORM OUT_SELECT.
****
SY-TABIX = WSS.
READ TABLE TB_TESQL INDEX SY-TABIX.
IF SY-SUBRC <> 0.  EXIT.  ENDIF.
****
SELECT * FROM YSQ_ZP_PRG WHERE Y_PROGRAM = TB_TESQL-Y_PROGRAM.
WRITE: / '----------------------------------------------------------'.
WRITE: / '=========================================================='.
WRITE: / 'pr=', YSQ_ZP_PRG-Y_PROGRAM, 'k=', YSQ_ZP_PRG-Y_COU_SQL,
YSQ_ZP_PRG-TYPA.
WRITE: / '--------- links -----------'.
SELECT * FROM YSQ_ZL_LNK
WHERE Y_PROGRAM = YSQ_ZP_PRG-Y_PROGRAM.
WRITE: / 'inc=',  YSQ_ZL_LNK-Y_INCLUDE,
'lin=',  YSQ_ZL_LNK-Y_LIN_NUM,
' <==> sql=',  YSQ_ZL_LNK-Y_SQL_NUM.
ENDSELECT.
WRITE: / '--------- sql-----------'.
SELECT * FROM YSQ_ZQ_SQL
WHERE Y_PROGRAM = YSQ_ZP_PRG-Y_PROGRAM.
WRITE: / 'sql=',    YSQ_ZQ_SQL-Y_SQL_NUM,
'kol=',    YSQ_ZQ_SQL-Y_STR_COU.
SELECT * FROM YSQ_ZQ_TXT
WHERE Y_PROGRAM = YSQ_ZP_PRG-Y_PROGRAM
AND Y_SQL_NUM = YSQ_ZQ_SQL-Y_SQL_NUM.
WRITE: / '     n=',  YSQ_ZQ_TXT-Y_STR_NUM,
YSQ_ZQ_TXT-Y_TEXT.
ENDSELECT.
ENDSELECT.
WRITE: / '--------- lin-----------'.
SELECT * FROM YSQ_ZP_LIN
WHERE Y_PROGRAM = YSQ_ZP_PRG-Y_PROGRAM.
WRITE: / 'inc=', (9)YSQ_ZP_LIN-Y_INCLUDE,
'lin=',    YSQ_ZP_LIN-Y_LIN_NUM,
'kol=',    YSQ_ZP_LIN-Y_COU_STR,
'dat=',    YSQ_ZP_LIN-UDAT,
'ver=',    YSQ_ZP_LIN-VERN,
'kor=',    YSQ_ZP_LIN-TRKORR.

SELECT * FROM YSQ_ZP_SEL
WHERE Y_PROGRAM = YSQ_ZP_PRG-Y_PROGRAM
AND Y_INCLUDE = YSQ_ZP_LIN-Y_INCLUDE
AND Y_LIN_NUM = YSQ_ZP_LIN-Y_LIN_NUM.
WRITE: / '     n=',    YSQ_ZP_SEL-Y_STR_NUM,
YSQ_ZP_SEL-Y_TEXT.
ENDSELECT.

SELECT * FROM YSQ_ZP_IDX
WHERE Y_PROGRAM = YSQ_ZP_PRG-Y_PROGRAM
AND Y_INCLUDE = YSQ_ZP_LIN-Y_INCLUDE
AND Y_LIN_NUM = YSQ_ZP_LIN-Y_LIN_NUM.
WRITE: / '         index n=',    YSQ_ZP_IDX-Y_STR_NUM,
YSQ_ZP_IDX-Y_FIELD.
ENDSELECT.
ENDSELECT.
ENDSELECT.

*******
ENDFORM.                    " OUT_SELECT
*&---------------------------------------------------------------------*
*&      Form  LIST_FOR_ANL
*&---------------------------------------------------------------------*
FORM LIST_FOR_ANL.
****
PERFORM DB_LOAD_SQL USING 'FI'.
PERFORM PRINT_LISTS USING 'FI'.
PERFORM DB_LOAD_SQL USING 'CH'.
PERFORM PRINT_LISTS USING 'CH'.
*******
ENDFORM.                    " LIST_FOR_ANL
*&---------------------------------------------------------------------*
*&      Form  LIST_AFTER_ANL
*&---------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM LIST_AFTER_ANL.
****
PERFORM DB_LOAD_SQL USING 'AY'.
PERFORM PRINT_LISTS USING 'AY'.
*******
ENDFORM.                    " LIST_AFTER_ANL
*&---------------------------------------------------------------------*
*&      Form  AC1_RESULT_FOR_SQL
*&---------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM AR_RESULT_FOR_SQL.
DATA: TB_YSQ_SQL_EX LIKE YSQ_SQL_EX OCCURS 0.
****
SY-TABIX = WSS.
READ TABLE TB_TESQL INDEX SY-TABIX.
****
IF SY-PFKEY = 'LISA'.
*   ysq_sql_ex = tb_tesql.
*   export ysq_sql_ex to memory id 'ZL'.
*   submit ymasqlpr with p_sap = 'Z' and return.
****
APPEND TB_TESQL TO TB_YSQ_SQL_EX.
EXPORT TB_YSQ_SQL_EX TO MEMORY ID 'ZL'.
SUBMIT YMASQLPR WITH P_SAP = 'Z' AND RETURN.
****
ELSE.   " sy-pfkey = 'LISF'.
REFRESH TB_LSQL.
APPEND TB_TESQL TO TB_LSQL.
PERFORM AU_EXEC_ANAL.
READ TABLE TB_LSQL INDEX 1.
****
IF TB_LSQL-Y_STATUS = 'AN'.
*    std-sgs = 'd'.
*   write: / 'Program line not found'(019).
APPEND TB_LSQL TO TB_YSQ_SQL_EX.
EXPORT TB_YSQ_SQL_EX TO MEMORY ID 'ZL'.
SUBMIT YMASQLPR WITH P_SAP = 'Z' AND RETURN.
ELSE.
APPEND TB_LSQL TO TB_YSQ_SQL_EX.
EXPORT TB_YSQ_SQL_EX TO MEMORY ID 'ZL'.
SUBMIT YMASQLPR WITH P_SAP = 'Z' AND RETURN.
*     ysq_sql_ex = tb_lsql.
*     export ysq_sql_ex to memory id 'ZL'.
*     submit ymasqlpr with p_sap = 'Z' and return.
ENDIF.
ENDIF.
*******
REFRESH TB_TESQL.
*******
ENDFORM.                    " AC1_RESULT_FOR_SQL
