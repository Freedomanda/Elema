*&---------------------------------------------------------------------*
*&  REPORT ZN010200                                                    *
*&         支払予定入力（仕入）                                        *
*&---------------------------------------------------------------------*
*&  機能     : 支払予定の入力を行う
*&
*&  作成日   : 2012/01/20
*&  作成者   : S.TAKIKAWA(solfis)
*&  変更履歴 :
*&  変更内容 :
*&---------------------------------------------------------------------*
REPORT ZN010200
NO STANDARD PAGE HEADING
LINE-SIZE  170
LINE-COUNT 58
MESSAGE-ID YN01.
*----------------------------------------------------------------------*
*   構造/テーブル定義
*----------------------------------------------------------------------*
* 支払予定データ取得用
TYPES:T_TYP_ZN002   TYPE STANDARD TABLE OF ZN002.
* 外部データ(仕入)対象データ取得
TYPES:BEGIN OF TYP_YN210,
GJAHR     TYPE YNOUTGJAHR,    "外部会計年度
SLPDOC    TYPE YNOUTDOC,      "外部番号
DTLDOC    TYPE YNOUTDTLDOC,   "外部明細番号
KNETXAMT  TYPE YNETXAMT,      "税込金額
END   OF TYP_YN210,
T_TYP_YN210   TYPE STANDARD TABLE OF TYP_YN210.
* 前渡金データの取得
TYPES:BEGIN OF TYP_BSIS,
BUKRS    TYPE BUKRS,        "会社コード
HKONT    TYPE HKONT,        "総勘定元帳勘定
AUGDT    TYPE AUGDT,        "決済日付
AUGBL    TYPE AUGBL,        "決済伝票番号
ZUONR    TYPE DZUONR,       "ソートキー
GJAHR    TYPE GJAHR,        "会計年度
BELNR    TYPE BELNR_D,      "会計伝票番号
BUZEI    TYPE BUZEI,        "会計伝票内の明細番号
WAERS    TYPE WAERS,        "通貨コード
SHKZG    TYPE SHKZG,        "借方/貸方フラグ
WRBTR    TYPE WRBTR,        "伝票通貨額
END  OF TYP_BSIS,
T_TYP_BSIS  TYPE STANDARD TABLE OF TYP_BSIS.
* 画面9000:テーブルコントロール用
TYPES:BEGIN OF TYP_MEISAI,
CEL       TYPE CHAR1,         "行選択ボタン
PZFBDT    TYPE DATUM,         "支払予定日(支払日)
PZLSCH    TYPE CHAR10,        "支払方法
PZTERM    TYPE ZNEPZTERM,     "サイト
PWRBTR    TYPE ZNEPWRBTR,     "支払予定額(支払金額)
KESSAI    TYPE CHAR6,         "支払
PADVNC    TYPE ZNEPADVNC,     "前渡済
PZLSPR    TYPE ZNEZLSPR,      "自動支払保留(保留)
PKUNNR    TYPE ZNEPKUNNR,     "相殺先
PLIFNR    TYPE ZNEPLIFNR,     "振替仕入先(振替先)
PZTERM_D  TYPE ZNEZTERM_D,    "仕入割引条件
PMEMO     TYPE ZNEMEMO,       "備考(コメント)
INSDT     TYPE ZNEINSDAT,     "登録日【非表示】
INSTM     TYPE ZNEINSTIM,     "登録時刻【非表示】
INSUSR    TYPE ZNEINSUSR,     "登録ユーザ【非表示】
PHKONT    TYPE ZNEPHKONT,     "振替勘定【非表示】
PSTFLG    TYPE ZNEPSTFLG,     "会計振替【非表示】
PSTDT     TYPE ZNEPSTDAT,     "会計振替日【非表示】
PSTTM     TYPE ZNEPSTTIM,     "会計振替時刻【非表示】
PSTUSR    TYPE ZNEPSTUSR,     "会計振替ユーザ【非表示】
BELNR     TYPE BELNR_D,       "会計伝票番号【非表示】
GJAHR     TYPE GJAHR,         "会計年度【非表示】
BUDAT     TYPE BUDAT,         "伝票の転記日付【非表示】
END   OF TYP_MEISAI,
*    テーブルデータ型
T_TYP_MEISAI   TYPE STANDARD TABLE OF TYP_MEISAI.
* 画面9000:LISTBOX用
TYPES:BEGIN OF TYP_PADVNC_LIST,
PADVNC       TYPE ZNEPZLSCH,  "支払方法
PADVNC_NAME  TYPE VAL_TEXT,   "固定値の内容説明
END   OF TYP_PADVNC_LIST,
T_TYP_PADVNC_LIST  TYPE STANDARD TABLE OF TYP_PADVNC_LIST.
* 画面9000:保留検索ヘルプ用
TYPES:BEGIN OF TYP_PZLSPR_HELP,
ZAHLS        TYPE DZAHLS,     "支払保留キー
TEXTL        TYPE TEXTL_008,  "支払保留理由テキスト
END   OF TYP_PZLSPR_HELP,
T_TYP_PZLSPR_HELP   TYPE STANDARD TABLE OF TYP_PZLSPR_HELP.

*----------------------------------------------------------------------*
*   内部テーブル定義
*----------------------------------------------------------------------*
DATA:
T_ZN002        TYPE T_TYP_ZN002,    "支払予定データ取得用
W_ZN002        TYPE ZN002,
T_BSIS         TYPE T_TYP_BSIS,     "前渡金データの取得
W_BSIS         TYPE TYP_BSIS,
T_MEISAI       TYPE T_TYP_MEISAI,   "画面9000:テーブルコントロール
W_MEISAI       TYPE TYP_MEISAI,
T_PZLSCH_LIST  TYPE T_TYP_PADVNC_LIST, "画面9000:LISTBOX
W_PZLSCH_LIST  TYPE TYP_PADVNC_LIST,
T_PZLSPR_HELP  TYPE T_TYP_PZLSPR_HELP,  "画面9000:保留検索ヘルプ用
W_PZLSPR_HELP  TYPE TYP_PZLSPR_HELP.
*----------------------------------------------------------------------*
*   変数定義
*----------------------------------------------------------------------*
DATA:
W_ERR_FLG      TYPE CHAR1,               "エラーフラグ
W_CHANGE_PZLSCH_FLG TYPE CHAR1,          "支払条件変更フラグ
W_SAVE_ERR     TYPE CHAR1,               "保存時チェックエラーフラグ
W_ANSWER       TYPE CHAR1,               "POPUP 回答
* 画面9000用項目
G_BUKRS        TYPE BUKRS,               "会社コード
G_LIFNR        TYPE LIFNR,               "仕入先コード
G_NAME1        TYPE NAME1,               "仕入先名
G_CZFBDT       TYPE ZNECZFBDT,           "照合締日
G_WAERS        TYPE WAERS,               "通貨コード
G_YN210_SUM    TYPE YNETXAMT,            "照合金額(請求)
G_ZUMI_SUM     TYPE YNETXAMT,            "支払済金額
G_BSIS_SUM     TYPE YNETXAMT,            "前渡残額
G_MEISAI_SUM   TYPE YNETXAMT,            "明細合計
G_FIELDNAME    TYPE CHAR50,              "エラー項目名
G_LINE         TYPE I.                   "行カウンタ
*----------------------------------------------------------------------*
*   定数定義
*----------------------------------------------------------------------*
CONSTANTS:
C_ON         TYPE C VALUE 'X',
* POPUP押しボタン
C_ANSWER_OK  TYPE CHAR1 VALUE '1',
C_ANSWER_NG  TYPE CHAR1 VALUE '2',
* SCREEN属性
C_SCREEN_ON  TYPE CHAR1 VALUE '1',
C_SCREEN_OFF TYPE CHAR1 VALUE '0',
* 支払条件
C_FURIKOMI   TYPE ZNEPZLSCH VALUE 'T',
C_KYOTO      TYPE ZNEPZLSCH VALUE 'K',
C_FACTORING  TYPE ZNEPZLSCH VALUE 'Z',
C_OVERSEAS   TYPE ZNEPZLSCH VALUE 'E',
C_BILL       TYPE ZNEPZLSCH VALUE 'B',
C_OFFSET     TYPE ZNEPZLSCH VALUE 'S',
C_OTHER      TYPE ZNEPZLSCH VALUE '9',
*
C_LIFNR_DEF  TYPE LIFNR VALUE '+',    "仕入先デフォルト
C_LOCK_MODE  TYPE ENQMODE VALUE 'E',
C_LIKE       TYPE CHAR1 VALUE '%',
C_SHKZG_KARI TYPE SHKZG VALUE 'S'.    "借方

*----------------------------------------------------------------------*
*   選択画面
*----------------------------------------------------------------------*
* データ選択
SELECTION-SCREEN:BEGIN OF BLOCK BL1 WITH FRAME TITLE TEXT-001.
PARAMETERS:P_BUK    TYPE BUKRS OBLIGATORY.         "会社コード
PARAMETERS:P_LIF    TYPE LIFNR OBLIGATORY.         "仕入先(請求)
PARAMETERS:P_DAY    TYPE ZNECZFBDT.                "締日
SELECTION-SCREEN:END   OF BLOCK BL1.
* システム項目
SELECTION-SCREEN:BEGIN OF BLOCK BL2 WITH FRAME TITLE TEXT-002.
PARAMETERS:P_HKONT  TYPE SKB1-SAKNR OBLIGATORY.   "前渡金勘定
PARAMETERS:P_PHKONT TYPE SKB1-SAKNR OBLIGATORY.   "支払仮勘定
PARAMETERS:P_EKORG  TYPE T024E-EKORG OBLIGATORY.  "購買組織
SELECTION-SCREEN:END   OF BLOCK BL2.

*----------------------------------------------------------------------*
*  INITIALIZATION
*----------------------------------------------------------------------*
INITIALIZATION.
*----------------------------------------------------------------------*
*  AT SELECTION-SCREEN
*----------------------------------------------------------------------*
AT SELECTION-SCREEN.
PERFORM F_DATA_CHECK.
*----------------------------------------------------------------------*
* START-OF-SELECTION.
*----------------------------------------------------------------------*
START-OF-SELECTION.

* 初期処理
PERFORM INT_SEC.
* 主処理
PERFORM MAIN_SEC.
CHECK W_ERR_FLG = SPACE.
* 次画面へ
CALL SCREEN 9000.

*&---------------------------------------------------------------------*
*&      Form  F_DATA_CHECK
*&---------------------------------------------------------------------*
*       データチェック
*----------------------------------------------------------------------*
FORM F_DATA_CHECK.
DATA:LW_BUKRS   TYPE BUKRS,      "会社コード存在チェック用
LW_EDATE   TYPE ZNEEDATE,   "照合締日チェック用
LW_ZFBDT   TYPE ZFBDT,      "初期値提案用
LW_MESSAGE TYPE CHAR10.

* 会社コード入力値チェック
SELECT SINGLE BUKRS
INTO LW_BUKRS
FROM T001
WHERE BUKRS = P_BUK.
IF SY-SUBRC <> 0.
MESSAGE E750 WITH P_BUK.
ENDIF.

* 仕入先(請求先)入力値チェック
SELECT SINGLE
NAME1
WAERS
INTO (G_NAME1,
G_WAERS)
FROM LFA1 INNER JOIN LFM1
ON LFA1~LIFNR = LFM1~LIFNR
WHERE LFA1~LIFNR = P_LIF
AND LFM1~EKORG = P_EKORG.
IF SY-SUBRC <> 0.
MESSAGE E753 WITH P_LIF.
ENDIF.

IF NOT  P_DAY IS INITIAL.
*   締日が終了されていないかチェック
SELECT SINGLE EDATE
INTO LW_EDATE
FROM ZN001
WHERE BUKRS = P_BUK
AND LIFNR = P_LIF.
IF SY-SUBRC <> 0.
SELECT SINGLE EDATE
INTO LW_EDATE
FROM ZN001
WHERE BUKRS = P_BUK
AND LIFNR = C_LIFNR_DEF.   "+で検索
ENDIF.
*   選択画面に入力された締日 >= 取得した照合終了日の場合エラー
IF P_DAY > LW_EDATE.
MESSAGE E000 WITH TEXT-E09
P_LIF
TEXT-E10.
ENDIF.

*   仕入先の支払基準締日と入力された締日日付チェック
CALL FUNCTION 'YK_ZFBDT_GET_BY_LFM1'
EXPORTING
I_CORD               = P_LIF
I_EKORG              = P_EKORG
I_DAY                = P_DAY
IMPORTING
E_ZFBDT              = LW_ZFBDT
EXCEPTIONS
NO_GET_T052          = 1
NO_GOOD_GETDAY       = 2
NO_GET_ZTERM         = 3
OTHERS               = 4.
IF SY-SUBRC = 0.
IF LW_ZFBDT <> P_DAY.
WRITE LW_ZFBDT TO LW_MESSAGE.
MESSAGE E000 WITH TEXT-E07
LW_MESSAGE
TEXT-E08.
ENDIF.
ENDIF.

ENDIF.

* 締日の初期値提案
IF P_DAY IS INITIAL.
CALL FUNCTION 'YK_ZFBDT_GET_BY_LFM1'
EXPORTING
I_CORD               = P_LIF
I_EKORG              = P_EKORG
I_DAY                = SY-DATUM
IMPORTING
E_ZFBDT_OLD          = LW_ZFBDT
EXCEPTIONS
NO_GET_T052          = 1
NO_GOOD_GETDAY       = 2
NO_GET_ZTERM         = 3
OTHERS               = 4
.
IF SY-SUBRC <> 0.
CLEAR:LW_ZFBDT.
ENDIF.
P_DAY = LW_ZFBDT.
ENDIF.

ENDFORM.                    " F_DATA_CHECK
*&---------------------------------------------------------------------*
*&      Form  int_sec
*&---------------------------------------------------------------------*
*       初期化処理
*----------------------------------------------------------------------*
FORM INT_SEC.
CLEAR:W_ERR_FLG, G_BUKRS, G_LIFNR, G_CZFBDT,
G_YN210_SUM,
G_ZUMI_SUM, G_BSIS_SUM.
CLEAR:T_ZN002.

ENDFORM.                    " int_sec
*&---------------------------------------------------------------------*
*&      Form  main_sec
*&---------------------------------------------------------------------*
*       主処理
*----------------------------------------------------------------------*
FORM MAIN_SEC.

* 必須チェック
IF P_DAY IS INITIAL.
MESSAGE I901 WITH TEXT-015.
W_ERR_FLG = C_ON.
EXIT.
ENDIF.
* ロック処理
PERFORM LOCK_PROC.
CHECK W_ERR_FLG = SPACE.
* 支払予定データ取得
PERFORM GET_ZN002.
* 照合金額(YN210)取得
PERFORM GET_YN210.
* 前渡金額取得
PERFORM GET_BSIS.
* その他画面項目の設定
PERFORM MAKE_DYNPRO_9000.

ENDFORM.                    " main_sec
*&---------------------------------------------------------------------*
*&      画面9000テーブルコントロール制御
*&---------------------------------------------------------------------*
* DECLARATION OF TABLECONTROL 'TCL_MEISAI' ITSELF
CONTROLS: TCL_MEISAI TYPE TABLEVIEW USING SCREEN 9000.

* LINES OF TABLECONTROL 'TCL_MEISAI'
DATA:     G_TCL_MEISAI_LINES  LIKE SY-LOOPC.

DATA:     OK_CODE LIKE SY-UCOMM.

* OUTPUT MODULE FOR TABLECONTROL 'TCL_MEISAI':
* GET LINES OF TABLECONTROL
MODULE TCL_MEISAI_GET_LINES OUTPUT.
G_TCL_MEISAI_LINES = SY-LOOPC.
* 画面属性変更
PERFORM SCREEN_INIT_TYPE.
ENDMODULE.

* INPUT MODULE FOR TABLECONTROL 'TCL_MEISAI': MODIFY TABLE
MODULE TCL_MEISAI_MODIFY INPUT.

* 必須チェック
*  IF W_CHANGE_PZLSCH_FLG = SPACE
*  OR W_MEISAI-KESSAI = TEXT-004.      "未処理のデータのみチェック
IF W_CHANGE_PZLSCH_FLG = SPACE
AND W_MEISAI-KESSAI = TEXT-004.      "未処理のデータのみチェック

PERFORM MEISAI_HISSU USING W_MEISAI.
ENDIF.

* 支払方法変更時に元データの項目クリア/初期値設定
IF W_CHANGE_PZLSCH_FLG = C_ON.
PERFORM MEISAI_CHANGE_TYPE CHANGING W_MEISAI.
CLEAR:W_CHANGE_PZLSCH_FLG.
ENDIF.

* 勘定の自動設定
IF W_MEISAI-KESSAI = TEXT-004.  "未の場合
IF W_MEISAI-PADVNC = C_ON.    "前渡済がONの場合
W_MEISAI-PHKONT = P_HKONT.  "前渡勘定を設定
ELSE.
W_MEISAI-PHKONT = P_PHKONT. "支払仮勘定を設定
ENDIF.
ENDIF.

* 正常の場合は画面項目を内部テーブルに更新
MODIFY T_MEISAI
FROM W_MEISAI
INDEX TCL_MEISAI-CURRENT_LINE.
ENDMODULE.

* INPUT MODULE FOR TABLECONTROL 'TCL_MEISAI': MARK TABLE
MODULE TCL_MEISAI_MARK INPUT.
MODIFY T_MEISAI
FROM W_MEISAI
INDEX TCL_MEISAI-CURRENT_LINE
TRANSPORTING CEL.
ENDMODULE.

* INPUT MODULE FOR TABLECONTROL 'TCL_MEISAI': PROCESS USER COMMAND
MODULE TCL_MEISAI_USER_COMMAND INPUT.
PERFORM USER_OK_TC USING    'TCL_MEISAI'
'T_MEISAI'
'CEL'
CHANGING OK_CODE.
ENDMODULE.

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  USER_OK_TC                                               *
*&---------------------------------------------------------------------*
FORM USER_OK_TC USING    P_TC_NAME TYPE DYNFNAM
P_TABLE_NAME
P_MARK_NAME
CHANGING P_OK      LIKE SY-UCOMM.

*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA: L_OK              TYPE SY-UCOMM,
L_OFFSET          TYPE I.
*-END OF LOCAL DATA----------------------------------------------------*

* Table control specific operations                                    *
*   evaluate TC name and operations                                    *
SEARCH P_OK FOR P_TC_NAME.
IF SY-SUBRC <> 0.
EXIT.
ENDIF.
L_OFFSET = STRLEN( P_TC_NAME ) + 1.
L_OK = P_OK+L_OFFSET.
* execute general and TC specific operations                           *
CASE L_OK.
WHEN 'INSR'.                      "insert row
PERFORM FCODE_INSERT_ROW USING    P_TC_NAME
P_TABLE_NAME.
CLEAR P_OK.

WHEN 'DELE'.                      "delete row
PERFORM FCODE_DELETE_ROW USING    P_TC_NAME
P_TABLE_NAME
P_MARK_NAME.
CLEAR P_OK.

WHEN 'P--' OR                     "top of list
'P-'  OR                     "previous page
'P+'  OR                     "next page
'P++'.                       "bottom of list
PERFORM COMPUTE_SCROLLING_IN_TC USING P_TC_NAME
L_OK.
CLEAR P_OK.
*     WHEN 'L--'.                       "total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN 'L-'.                        "column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN 'R+'.                        "column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN 'R++'.                       "total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
WHEN 'MARK'.                      "mark all filled lines
PERFORM FCODE_TC_MARK_LINES USING P_TC_NAME
P_TABLE_NAME
P_MARK_NAME   .
CLEAR P_OK.

WHEN 'DMRK'.                      "demark all filled lines
PERFORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
P_TABLE_NAME
P_MARK_NAME .
CLEAR P_OK.

*     WHEN 'SASCEND'   OR
*          'SDESCEND'.                  "sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

ENDCASE.

ENDFORM.                              " USER_OK_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_INSERT_ROW                                         *
*&---------------------------------------------------------------------*
FORM FCODE_INSERT_ROW
USING    P_TC_NAME           TYPE DYNFNAM
P_TABLE_NAME             .

*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA L_LINES_NAME       LIKE FELD-NAME.
DATA L_SELLINE          LIKE SY-STEPL.
DATA L_LASTLINE         TYPE I.
DATA L_LINE             TYPE I.
DATA L_TABLE_NAME       LIKE FELD-NAME.
FIELD-SYMBOLS <TC>                 TYPE CXTAB_CONTROL.
FIELD-SYMBOLS <TABLE>              TYPE STANDARD TABLE.
FIELD-SYMBOLS <LINES>              TYPE I.
*-END OF LOCAL DATA----------------------------------------------------*

DATA:LW_LINE     TYPE I,            "桁数チェック用
LW_MEISAI   TYPE TYP_MEISAI.   "初期値データ

ASSIGN (P_TC_NAME) TO <TC>.

* get the table, which belongs to the tc                               *
CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*----- 行数チェック
DESCRIBE TABLE <TABLE> LINES LW_LINE.
IF LW_LINE >= 10.
CLEAR:OK_CODE.
MESSAGE I000 WITH TEXT-E03.
EXIT.
ENDIF.

* get looplines of TableControl
CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_LINES_NAME.
ASSIGN (L_LINES_NAME) TO <LINES>.

* get current line
GET CURSOR LINE L_SELLINE.
IF SY-SUBRC <> 0.                   " append line to table
L_SELLINE = <TC>-LINES + 1.
*   set top line and new cursor line                                   *
IF L_SELLINE > <LINES>.
<TC>-TOP_LINE = L_SELLINE - <LINES> + 1 .
L_LINE = 1.
ELSE.
<TC>-TOP_LINE = 1.
L_LINE = L_SELLINE.
ENDIF.
ELSE.                               " insert line into table
L_SELLINE = <TC>-TOP_LINE + L_SELLINE - 1.
*   set top line and new cursor line                                   *
L_LASTLINE = L_SELLINE + <LINES> - 1.
IF L_LASTLINE <= <TC>-LINES.
<TC>-TOP_LINE = L_SELLINE.
L_LINE = 1.
ELSEIF <LINES> > <TC>-LINES.
<TC>-TOP_LINE = 1.
L_LINE = L_SELLINE.
ELSE.
<TC>-TOP_LINE = <TC>-LINES - <LINES> + 2 .
L_LINE = L_SELLINE - <TC>-TOP_LINE + 1.
ENDIF.
ENDIF.
* insert initial line
*   INSERT INITIAL LINE INTO <TABLE> INDEX L_SELLINE.
LW_MEISAI-KESSAI = TEXT-004.        "未
INSERT LW_MEISAI INTO <TABLE> INDEX L_SELLINE.  "初期値データを追加
<TC>-LINES = <TC>-LINES + 1.
* set cursor
SET CURSOR LINE L_LINE.

ENDFORM.                              " FCODE_INSERT_ROW

*&---------------------------------------------------------------------*
*&      Form  FCODE_DELETE_ROW                                         *
*&---------------------------------------------------------------------*
FORM FCODE_DELETE_ROW
USING    P_TC_NAME           TYPE DYNFNAM
P_TABLE_NAME
P_MARK_NAME   .

*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA L_TABLE_NAME       LIKE FELD-NAME.

FIELD-SYMBOLS <TC>         TYPE CXTAB_CONTROL.
FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
FIELD-SYMBOLS <WA>.
FIELD-SYMBOLS <MARK_FIELD>.
*-END OF LOCAL DATA----------------------------------------------------*
* 明細データチェック用
DATA:LW_MEISAI   TYPE TYP_MEISAI.

ASSIGN (P_TC_NAME) TO <TC>.

* get the table, which belongs to the tc                               *
CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

* delete marked lines                                                  *
DESCRIBE TABLE <TABLE> LINES <TC>-LINES.

LOOP AT <TABLE> ASSIGNING <WA>.

*   access to the component 'FLAG' of the table header                 *
ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

IF <MARK_FIELD> = 'X'.
*      削除行のチェック
LW_MEISAI = <WA>.
IF ( LW_MEISAI-KESSAI = TEXT-003 )    "未消込
OR ( LW_MEISAI-KESSAI = TEXT-016 ).   "または完了のデータ
MESSAGE I000 WITH TEXT-E02.
EXIT.
ENDIF.
DELETE <TABLE> INDEX SYST-TABIX.
IF SY-SUBRC = 0.
<TC>-LINES = <TC>-LINES - 1.
ENDIF.
ENDIF.
ENDLOOP.

ENDFORM.                              " FCODE_DELETE_ROW

*&---------------------------------------------------------------------*
*&      Form  COMPUTE_SCROLLING_IN_TC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*      -->P_OK       ok code
*----------------------------------------------------------------------*
FORM COMPUTE_SCROLLING_IN_TC USING    P_TC_NAME
P_OK.
*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA L_TC_NEW_TOP_LINE     TYPE I.
DATA L_TC_NAME             LIKE FELD-NAME.
DATA L_TC_LINES_NAME       LIKE FELD-NAME.
DATA L_TC_FIELD_NAME       LIKE FELD-NAME.

FIELD-SYMBOLS <TC>         TYPE CXTAB_CONTROL.
FIELD-SYMBOLS <LINES>      TYPE I.
*-END OF LOCAL DATA----------------------------------------------------*

ASSIGN (P_TC_NAME) TO <TC>.
* get looplines of TableControl
CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_TC_LINES_NAME.
ASSIGN (L_TC_LINES_NAME) TO <LINES>.


* is no line filled?                                                   *
IF <TC>-LINES = 0.
*   yes, ...                                                           *
L_TC_NEW_TOP_LINE = 1.
ELSE.
*   no, ...                                                            *
CALL FUNCTION 'SCROLLING_IN_TABLE'
EXPORTING
ENTRY_ACT             = <TC>-TOP_LINE
ENTRY_FROM            = 1
ENTRY_TO              = <TC>-LINES
LAST_PAGE_FULL        = 'X'
LOOPS                 = <LINES>
OK_CODE               = P_OK
OVERLAPPING           = 'X'
IMPORTING
ENTRY_NEW             = L_TC_NEW_TOP_LINE
EXCEPTIONS
NO_ENTRY_OR_PAGE_ACT  = 01
NO_ENTRY_TO           = 02
NO_OK_CODE_OR_PAGE_GO = 03
OTHERS                = 99.
ENDIF.

* get actual tc and column                                             *
GET CURSOR FIELD L_TC_FIELD_NAME
AREA  L_TC_NAME.

IF SYST-SUBRC = 0.
IF L_TC_NAME = P_TC_NAME.
*     set actual column                                                *
SET CURSOR FIELD L_TC_FIELD_NAME LINE 1.
ENDIF.
ENDIF.

* set the new top line                                                 *
<TC>-TOP_LINE = L_TC_NEW_TOP_LINE.


ENDFORM.                              " COMPUTE_SCROLLING_IN_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_MARK_LINES
*&---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_MARK_LINES USING P_TC_NAME
P_TABLE_NAME
P_MARK_NAME.
*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA L_TABLE_NAME       LIKE FELD-NAME.

FIELD-SYMBOLS <TC>         TYPE CXTAB_CONTROL.
FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
FIELD-SYMBOLS <WA>.
FIELD-SYMBOLS <MARK_FIELD>.
*-END OF LOCAL DATA----------------------------------------------------*

ASSIGN (P_TC_NAME) TO <TC>.

* get the table, which belongs to the tc                               *
CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

* mark all filled lines                                                *
LOOP AT <TABLE> ASSIGNING <WA>.

*   access to the component 'FLAG' of the table header                 *
ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

<MARK_FIELD> = 'X'.
ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_DEMARK_LINES
*&---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
P_TABLE_NAME
P_MARK_NAME .
*-BEGIN OF LOCAL DATA--------------------------------------------------*
DATA L_TABLE_NAME       LIKE FELD-NAME.

FIELD-SYMBOLS <TC>         TYPE CXTAB_CONTROL.
FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
FIELD-SYMBOLS <WA>.
FIELD-SYMBOLS <MARK_FIELD>.
*-END OF LOCAL DATA----------------------------------------------------*

ASSIGN (P_TC_NAME) TO <TC>.

* get the table, which belongs to the tc                               *
CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

* demark all filled lines                                              *
LOOP AT <TABLE> ASSIGNING <WA>.
*   access to the component 'FLAG' of the table header                 *
ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.
<MARK_FIELD> = SPACE.
ENDLOOP.

ENDFORM.                                          "fcode_tc_mark_lines
*&---------------------------------------------------------------------*
*&      Form  LOCK_PROC
*&---------------------------------------------------------------------*
*       ロック処理
*----------------------------------------------------------------------*
FORM LOCK_PROC.

DATA: L_USER TYPE SY-MSGV1.

CALL FUNCTION 'ENQUEUE_EZN002'
EXPORTING
MODE_ZN002           = C_LOCK_MODE
BUKRS                = P_BUK
LIFNR                = P_LIF
CZFBDT               = P_DAY
EXCEPTIONS
FOREIGN_LOCK         = 1
SYSTEM_FAILURE       = 2
OTHERS               = 3.

IF SY-SUBRC <> 0.
L_USER = SY-MSGV1.
MESSAGE I756 WITH TEXT-014 L_USER.
W_ERR_FLG = C_ON.
ENDIF.

ENDFORM.                    " LOCK_PROC
*&---------------------------------------------------------------------*
*&      Form  GET_ZN002
*&---------------------------------------------------------------------*
*       支払予定データ取得
*----------------------------------------------------------------------*
FORM GET_ZN002.

SELECT *
INTO TABLE T_ZN002
FROM ZN002
WHERE BUKRS = P_BUK
AND LIFNR = P_LIF
AND CZFBDT = P_DAY.

IF SY-SUBRC = 0.
*   会計振替がONのデータの金額を合算
LOOP AT T_ZN002 INTO W_ZN002
WHERE PSTFLG = C_ON.
G_ZUMI_SUM = G_ZUMI_SUM + W_ZN002-PWRBTR.   "支払済金額
ENDLOOP.
ENDIF.

ENDFORM.                    " GET_ZN002
*&---------------------------------------------------------------------*
*&      Form  GET_YN210
*&---------------------------------------------------------------------*
*       照合金額取得
*----------------------------------------------------------------------*
FORM GET_YN210.
DATA:LT_YN210    TYPE T_TYP_YN210,    "外部データ(仕入)対象データ取得
LW_YN210    TYPE TYP_YN210.

SELECT GJAHR            "外部会計年度
SLPDOC           "外部番号
DTLDOC           "外部明細番号
KNETXAMT         "税込金額
INTO TABLE LT_YN210
FROM YN210
WHERE VRFCTON = P_LIF
AND CZFBDT  = P_DAY
AND BUKRS   = P_BUK
AND DELFLG  = SPACE.

* 取得した税込金額を合算
IF SY-SUBRC = 0.
LOOP AT LT_YN210 INTO LW_YN210.
G_YN210_SUM = G_YN210_SUM + LW_YN210-KNETXAMT.
ENDLOOP.
ENDIF.

ENDFORM.                    " GET_YN210
*&---------------------------------------------------------------------*
*&      Form  GET_BSIS
*&---------------------------------------------------------------------*
*       前渡金額取得
*----------------------------------------------------------------------*
FORM GET_BSIS.
DATA:LT_BSIS       TYPE T_TYP_BSIS,      "前渡金データの取得
LW_BSIS       TYPE TYP_BSIS,
LW_LIFNR      TYPE CHAR10,          "仕入先編集用
LW_WAERS_FLG  TYPE XFLAG.           "異なる通貨フラグ

* 画面入力された仕入先の前ゼロを削除
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = P_LIF
IMPORTING
OUTPUT        = LW_LIFNR.
CONCATENATE C_LIKE LW_LIFNR C_LIKE
INTO LW_LIFNR.

SELECT BUKRS            "会社コード
HKONT            "総勘定元帳勘定
AUGDT            "決済日付
AUGBL            "決済伝票番号
ZUONR            "ソートキー
GJAHR            "会計年度
BELNR            "会計伝票番号
BUZEI            "会計伝票内の明細番号
WAERS            "通貨コード
SHKZG            "借方/貸方フラグ
WRBTR            "伝票通貨額
INTO TABLE LT_BSIS
FROM BSIS
WHERE BUKRS = P_BUK
AND HKONT = P_HKONT
AND ZUONR LIKE LW_LIFNR.

* 取得した伝票通貨額を合算
IF SY-SUBRC = 0.
LOOP AT LT_BSIS INTO LW_BSIS.
*     仕入先と同じ通貨コードの伝票のみ合算
IF LW_BSIS-WAERS = G_WAERS.
IF LW_BSIS-SHKZG = C_SHKZG_KARI.    "借方の場合加算
G_BSIS_SUM = G_BSIS_SUM + LW_BSIS-WRBTR.
ELSE.                               "貸方の場合減算
G_BSIS_SUM = G_BSIS_SUM - LW_BSIS-WRBTR.
ENDIF.
ELSE.
LW_WAERS_FLG = C_ON.
ENDIF.
ENDLOOP.
ENDIF.

* 異なる通貨コードの伝票が存在する場合はワーニングを表示
IF LW_WAERS_FLG = C_ON.
MESSAGE S000 WITH TEXT-E01.
ENDIF.

ENDFORM.                    " GET_BSIS
*&---------------------------------------------------------------------*
*&      Form  MAKE_DYNPRO_9000
*&---------------------------------------------------------------------*
*       その他画面項目の設定
*----------------------------------------------------------------------*
FORM MAKE_DYNPRO_9000.
DATA:L_RC TYPE SY-SUBRC.

CLEAR:T_MEISAI.
REFRESH:T_MEISAI.
* 会社コード
G_BUKRS = P_BUK.
* 仕入先コード
G_LIFNR = P_LIF.
* 照合締日
G_CZFBDT = P_DAY.
* テーブルコントロールデータの編集
LOOP AT T_ZN002 INTO W_ZN002.
CLEAR:W_MEISAI.
*   支払予定日(支払日)
W_MEISAI-PZFBDT = W_ZN002-PZFBDT.
*   支払方法
W_MEISAI-PZLSCH = W_ZN002-PZLSCH.
*   サイト
W_MEISAI-PZTERM = W_ZN002-PZTERM.
*   支払予定額(支払金額)
W_MEISAI-PWRBTR = W_ZN002-PWRBTR.
*   決済
IF W_ZN002-PSTFLG = C_ON.
CLEAR:L_RC.
PERFORM CHECK_BELNR USING W_ZN002-GJAHR
W_ZN002-BELNR
W_ZN002-PHKONT
CHANGING L_RC.
IF ( L_RC = 0 ).
W_MEISAI-KESSAI = TEXT-016.      "完了
ELSE.
W_MEISAI-KESSAI = TEXT-003.      "未消込
ENDIF.
W_MEISAI-INSDT = W_ZN002-INSDT.
W_MEISAI-INSTM = W_ZN002-INSTM.
W_MEISAI-INSUSR = W_ZN002-INSUSR.
ELSE.
W_MEISAI-KESSAI = TEXT-004.      "未処理
ENDIF.
*   前渡済
W_MEISAI-PADVNC = W_ZN002-PADVNC.
*   自動支払保留(保留)
W_MEISAI-PZLSPR = W_ZN002-PZLSPR.
*   相殺先
W_MEISAI-PKUNNR = W_ZN002-PKUNNR.
*   振替仕入先(振替先)
W_MEISAI-PLIFNR = W_ZN002-PLIFNR.
*   仕入割引条件
W_MEISAI-PZTERM_D = W_ZN002-PZTERM_D.
*   備考(コメント)
W_MEISAI-PMEMO = W_ZN002-PMEMO.
*   振替勘定
IF W_ZN002-PSTFLG = SPACE.      "会計振替が初期値
IF W_ZN002-PADVNC = C_ON.     "前渡済がONの場合
W_MEISAI-PHKONT = P_HKONT.  "前渡勘定を設定
ELSE.
W_MEISAI-PHKONT = P_PHKONT. "支払仮勘定を設定
ENDIF.
ELSE.
W_MEISAI-PHKONT = W_ZN002-PHKONT. "もとの値を設定
ENDIF.
*-----非表示項目
W_MEISAI-PSTFLG = W_ZN002-PSTFLG. "会計振替
W_MEISAI-PSTDT  = W_ZN002-PSTDT.  "会計振替日
W_MEISAI-PSTTM  = W_ZN002-PSTTM.  "会計振替時刻
W_MEISAI-PSTUSR = W_ZN002-PSTUSR. "会計振替ユーザ
W_MEISAI-BELNR  = W_ZN002-BELNR.  "会計伝票番号
W_MEISAI-GJAHR  = W_ZN002-GJAHR.  "会計年度
W_MEISAI-BUDAT  = W_ZN002-BUDAT.  "伝票の転記日付
APPEND W_MEISAI TO T_MEISAI.

*   明細合計
G_MEISAI_SUM = G_MEISAI_SUM + W_MEISAI-PWRBTR.
ENDLOOP.

ENDFORM.                    " MAKE_DYNPRO_9000
*&---------------------------------------------------------------------*
*&      Module  STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*       画面9000:PBO
*----------------------------------------------------------------------*
MODULE STATUS_9000 OUTPUT.

SET PF-STATUS 'G_0100'.
SET TITLEBAR  'T_0100'.

* 保存時エラーが発生している場合、カーソルを設定
IF W_SAVE_ERR = C_ON.
SET CURSOR FIELD G_FIELDNAME LINE G_LINE.
ENDIF.
CLEAR:G_LINE,W_SAVE_ERR.

ENDMODULE.                 " STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  EXIT_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       画面9000:PAI EXITコマンド
*----------------------------------------------------------------------*
MODULE EXIT_COMMAND_9000 INPUT.

CASE OK_CODE.
*----- 前画面/キャンセルボタン押下時
WHEN 'BACK'
OR 'CANC'.
*     終了確認のポップアップ表示
PERFORM CALL_POPUP    USING TEXT-011   "MESSAGE
SPACE      "POPUP TITLE
CHANGING W_ANSWER.
*     "はい"の場合はロック解除し、前画面に戻る
IF W_ANSWER = C_ANSWER_OK.
PERFORM UNLOCK_PROC.
LEAVE TO SCREEN 0.   "前画面に戻る
ENDIF.

*----- 中止ボタン押下時
WHEN 'EXIT'.
*     終了確認のポップアップ表示
PERFORM CALL_POPUP    USING TEXT-011   "MESSAGE
SPACE      "POPUP TITLE
CHANGING W_ANSWER.
*     "はい"の場合はロック解除し、ＰＧ終了
IF W_ANSWER = C_ANSWER_OK.
PERFORM UNLOCK_PROC.
LEAVE PROGRAM.       "PG終了
ENDIF.
ENDCASE.

ENDMODULE.                 " EXIT_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       画面9000:PAI USERコマンド
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9000 INPUT.

* 金額合計算出
CLEAR:G_MEISAI_SUM,G_LINE,W_SAVE_ERR.
LOOP AT T_MEISAI INTO W_MEISAI.
G_MEISAI_SUM = G_MEISAI_SUM + W_MEISAI-PWRBTR.
ENDLOOP.

CASE OK_CODE.
*----- 保存ボタン押下時
WHEN 'SAVE'.
CLEAR:W_SAVE_ERR, OK_CODE.
*     チェック
LOOP AT T_MEISAI INTO W_MEISAI.
*       現在ループ中の行数をカウントする
G_LINE = G_LINE + 1.
IF W_MEISAI-KESSAI = TEXT-004.       "未処理のデータのみチェック
PERFORM MEISAI_HISSU USING W_MEISAI. "必須チェック
ENDIF.
ENDLOOP.
PERFORM SAVE_CHECK.                   "入力値チェック
CHECK W_SAVE_ERR = SPACE.
*     終了確認のポップアップ表示
PERFORM CALL_POPUP    USING TEXT-012   "MESSAGE
SPACE      "POPUP TITLE
CHANGING W_ANSWER.
*     "はい"の場合
IF W_ANSWER = C_ANSWER_OK.
*       ＤＢ更新
PERFORM SAVE_DATA.
IF W_SAVE_ERR = SPACE.   "正常終了の場合
*         ロック解除
PERFORM UNLOCK_PROC.
COMMIT WORK AND WAIT.
MESSAGE S929.
LEAVE TO SCREEN 0.     "選択画面に戻る
ENDIF.
ENDIF.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*&      Form  MEISAI_HISSU
*&---------------------------------------------------------------------*
*       明細データ必須チェック
*----------------------------------------------------------------------*
*      -->P_MEISAI      テーブルコントロールデータ
*----------------------------------------------------------------------*
FORM MEISAI_HISSU USING    P_MEISAI TYPE TYP_MEISAI.

CASE P_MEISAI-PZLSCH.
*   振込
WHEN C_FURIKOMI.
"支払日チェック
PERFORM INIT_CHECK_PZFBDT USING P_MEISAI.
"支払金額チェック
PERFORM INIT_CHECK_PWRBTR USING P_MEISAI.
*   ファクタリング（京都）
WHEN C_KYOTO.
"支払日チェック
PERFORM INIT_CHECK_PZFBDT USING P_MEISAI.
"サイトチェック
PERFORM INIT_CHECK_PZTERM USING P_MEISAI.
"支払金額チェック
PERFORM INIT_CHECK_PWRBTR USING P_MEISAI.
*   ファクタリング
WHEN C_FACTORING.
"支払日チェック
PERFORM INIT_CHECK_PZFBDT USING P_MEISAI.
"サイトチェック
PERFORM INIT_CHECK_PZTERM USING P_MEISAI.
"支払金額チェック
PERFORM INIT_CHECK_PWRBTR USING P_MEISAI.
*   海外振込
WHEN C_OVERSEAS.
"支払日チェック
PERFORM INIT_CHECK_PZFBDT USING P_MEISAI.
"支払金額チェック
PERFORM INIT_CHECK_PWRBTR USING P_MEISAI.
*   手形
WHEN C_BILL.
"支払日チェック
PERFORM INIT_CHECK_PZFBDT USING P_MEISAI.
"サイトチェック
PERFORM INIT_CHECK_PZTERM USING P_MEISAI.
"支払金額チェック
PERFORM INIT_CHECK_PWRBTR USING P_MEISAI.
*   相殺
WHEN C_OFFSET.
"支払日チェック
PERFORM INIT_CHECK_PZFBDT USING P_MEISAI.
"相殺得意先
PERFORM INIT_CHECK_PKUNNR USING P_MEISAI.
"支払金額チェック
PERFORM INIT_CHECK_PWRBTR USING P_MEISAI.
*   その他
WHEN C_OTHER.
"支払日チェック
PERFORM INIT_CHECK_PZFBDT USING P_MEISAI.
"支払金額チェック
PERFORM INIT_CHECK_PWRBTR USING P_MEISAI.
WHEN OTHERS.
"支払方法チェック
PERFORM INIT_CHECK_PZLSCH USING P_MEISAI.
ENDCASE.

ENDFORM.                    " MEISAI_HISSU
*&---------------------------------------------------------------------*
*&      Form  INIT_CHECK_PZFBDT
*&---------------------------------------------------------------------*
*       初期値チェック【支払予定日】
*----------------------------------------------------------------------*
*      -->P_MEISAI      テーブルコントロールデータ
*----------------------------------------------------------------------*
FORM INIT_CHECK_PZFBDT USING    P_MEISAI TYPE TYP_MEISAI.

IF P_MEISAI-PZFBDT IS INITIAL.    "支払日
SET CURSOR FIELD 'W_MEISAI-PZFBDT' LINE G_LINE.
MESSAGE E901 WITH TEXT-005.
ENDIF.

ENDFORM.                    " INIT_CHECK_PZFBDT
*&---------------------------------------------------------------------*
*&      Form  INIT_CHECK_PWRBTR
*&---------------------------------------------------------------------*
*       初期値チェック【支払金額】
*----------------------------------------------------------------------*
*      -->P_MEISAI      テーブルコントロールデータ
*----------------------------------------------------------------------*
FORM INIT_CHECK_PWRBTR USING    P_MEISAI TYPE TYP_MEISAI.

IF P_MEISAI-PWRBTR IS INITIAL.
SET CURSOR FIELD 'W_MEISAI-PWRBTR' LINE G_LINE.
MESSAGE E901 WITH TEXT-013. "支払金額
ENDIF.

ENDFORM.                    " INIT_CHECK_PWRBTR
*&---------------------------------------------------------------------*
*&      Form  INIT_CHECK_PZTERM
*&---------------------------------------------------------------------*
*       初期値チェック【サイト】
*----------------------------------------------------------------------*
*      -->P_MEISAI      テーブルコントロールデータ
*----------------------------------------------------------------------*
FORM INIT_CHECK_PZTERM USING    P_MEISAI TYPE TYP_MEISAI.

IF P_MEISAI-PZTERM IS INITIAL.
SET CURSOR FIELD 'W_MEISAI-PZTERM' LINE G_LINE.
MESSAGE E901 WITH TEXT-006.
ENDIF.

ENDFORM.                    " INIT_CHECK_PZTERM
*&---------------------------------------------------------------------*
*&      Form  INIT_CHECK_PKUNNR
*&---------------------------------------------------------------------*
*       初期値チェック【相殺得意先】
*----------------------------------------------------------------------*
*      -->P_MEISAI      テーブルコントロールデータ
*----------------------------------------------------------------------*
FORM INIT_CHECK_PKUNNR USING    P_MEISAI TYPE TYP_MEISAI.

IF P_MEISAI-PKUNNR IS INITIAL.
SET CURSOR FIELD 'W_MEISAI-PKUNNR' LINE G_LINE.
MESSAGE E901 WITH TEXT-007.
ENDIF.

ENDFORM.                    " INIT_CHECK_PKUNNR
*&---------------------------------------------------------------------*
*&      Form  INIT_CHECK_PZLSCH
*&---------------------------------------------------------------------*
*       初期値チェック【支払方法】
*----------------------------------------------------------------------*
*      -->P_MEISAI      テーブルコントロールデータ
*----------------------------------------------------------------------*
FORM INIT_CHECK_PZLSCH USING    P_MEISAI TYPE TYP_MEISAI.

IF P_MEISAI-PZLSCH IS INITIAL.
SET CURSOR FIELD 'W_MEISAI-PZLSCH' LINE G_LINE.
MESSAGE E901 WITH TEXT-017.
ENDIF.

ENDFORM.                    " INIT_CHECK_PKUNNR
*&---------------------------------------------------------------------*
*&      Form  MEISAI_CHANGE_TYPE
*&---------------------------------------------------------------------*
*       支払い条件変更時のデータ更新
*----------------------------------------------------------------------*
*      <--P_MEISAI      テーブルコントロールデータ
*----------------------------------------------------------------------*
FORM MEISAI_CHANGE_TYPE CHANGING P_MEISAI  TYPE TYP_MEISAI.

CASE P_MEISAI-PZLSCH.
*   振込
WHEN C_FURIKOMI.
CLEAR:P_MEISAI-PZTERM,      "サイト
P_MEISAI-PKUNNR,      "相殺
P_MEISAI-PZLSPR.      "自動支払保留
P_MEISAI-PHKONT = P_PHKONT. "振替勘定
*   ファクタリング（京都）
WHEN C_KYOTO.
CLEAR:P_MEISAI-PKUNNR,      "相殺
P_MEISAI-PZTERM_D,    "仕入割引
P_MEISAI-PZLSPR.      "自動支払保留
P_MEISAI-PHKONT = P_PHKONT. "振替勘定
*   ファクタリング
WHEN C_FACTORING.
CLEAR:P_MEISAI-PKUNNR,      "相殺
P_MEISAI-PZTERM_D,    "仕入割引
P_MEISAI-PZLSPR.      "自動支払保留
P_MEISAI-PHKONT = P_PHKONT. "振替勘定
*   海外振込
WHEN C_OVERSEAS.
CLEAR:P_MEISAI-PZTERM,      "サイト
P_MEISAI-PKUNNR,      "相殺
P_MEISAI-PZTERM_D,    "仕入割引
P_MEISAI-PZLSPR.      "自動支払保留
P_MEISAI-PHKONT = P_PHKONT. "振替勘定
*   手形
WHEN C_BILL.
CLEAR:P_MEISAI-PKUNNR,      "相殺
P_MEISAI-PZTERM_D,    "仕入割引
P_MEISAI-PZLSPR.      "自動支払保留
P_MEISAI-PHKONT = P_PHKONT. "振替勘定
*   相殺
WHEN C_OFFSET.
CLEAR:P_MEISAI-PZTERM,      "サイト
P_MEISAI-PADVNC,      "前渡
P_MEISAI-PZTERM_D.    "仕入割引
*      P_MEISAI-PZLSPR = 'B'.      "自動支払保留
P_MEISAI-PZLSPR = 'A'.      "自動支払保留
P_MEISAI-PHKONT = P_PHKONT. "振替勘定
*   その他
WHEN C_OTHER.
CLEAR:P_MEISAI-PZTERM,      "サイト
P_MEISAI-PKUNNR,      "相殺
P_MEISAI-PZTERM_D.    "仕入割引
P_MEISAI-PZLSPR = 'A'.      "自動支払保留
P_MEISAI-PHKONT = P_PHKONT. "振替勘定
ENDCASE.

ENDFORM.                    " MEISAI_CHANGE_TYPE
*&---------------------------------------------------------------------*
*&      Form  SCREEN_INIT_TYPE
*&---------------------------------------------------------------------*
*       画面属性変更
*----------------------------------------------------------------------*
FORM SCREEN_INIT_TYPE.

LOOP AT SCREEN.
*   未消込または完了の明細の場合は、すべての項目が入力不可
IF ( W_MEISAI-KESSAI = TEXT-003 )    "未消込
OR ( W_MEISAI-KESSAI = TEXT-016 ).   "または完了のデータ
*      SCREEN-INPUT = C_SCREEN_OFF.
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_OFF    "サイト
C_SCREEN_OFF    "前渡
C_SCREEN_OFF    "相殺
C_SCREEN_OFF    "仕入割引
C_SCREEN_OFF    "自動支払保留
C_SCREEN_OFF.   "デフォルト属性
*   決済[未]の明細の場合は、支払条件により入力/入力不可を変更
ELSE.

"支払条件
CASE W_MEISAI-PZLSCH.
*       振込
WHEN C_FURIKOMI.
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_OFF  "サイト
C_SCREEN_ON   "前渡
C_SCREEN_OFF  "相殺
C_SCREEN_ON   "仕入割引
*                                          C_SCREEN_ON   "自動支払保留
C_SCREEN_OFF   "自動支払保留
C_SCREEN_ON.  "デフォルト属性
*       ファクタリング（京都）
WHEN C_KYOTO.
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_ON   "サイト
C_SCREEN_ON   "前渡
C_SCREEN_OFF  "相殺
C_SCREEN_OFF  "仕入割引
*                                          C_SCREEN_ON   "自動支払保留
C_SCREEN_OFF   "自動支払保留
C_SCREEN_ON.  "デフォルト属性
*       ファクタリング
WHEN C_FACTORING.
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_ON   "サイト
C_SCREEN_ON   "前渡
C_SCREEN_OFF  "相殺
C_SCREEN_OFF  "仕入割引
*                                          C_SCREEN_ON   "自動支払保留
C_SCREEN_OFF   "自動支払保留
C_SCREEN_ON.  "デフォルト属性
*       海外振込
WHEN C_OVERSEAS.
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_OFF  "サイト
C_SCREEN_ON   "前渡
C_SCREEN_OFF  "相殺
C_SCREEN_OFF  "仕入割引
*                                          C_SCREEN_ON   "自動支払保留
C_SCREEN_OFF   "自動支払保留
C_SCREEN_ON.  "デフォルト属性
*       手形
WHEN C_BILL.
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_ON   "サイト
C_SCREEN_ON   "前渡
C_SCREEN_OFF  "相殺
C_SCREEN_OFF  "仕入割引
*                                          C_SCREEN_ON   "自動支払保留
C_SCREEN_OFF   "自動支払保留
C_SCREEN_ON.  "デフォルト属性
*       相殺
WHEN C_OFFSET.
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_OFF  "サイト
C_SCREEN_OFF  "前渡
C_SCREEN_ON   "相殺
C_SCREEN_OFF  "仕入割引
C_SCREEN_OFF  "自動支払保留
C_SCREEN_ON.  "デフォルト属性
*       その他
WHEN C_OTHER.
PERFORM SCREEN_INPUT_TYPE USING C_SCREEN_OFF  "サイト
C_SCREEN_ON   "前渡
C_SCREEN_OFF  "相殺
C_SCREEN_OFF  "仕入割引
C_SCREEN_OFF  "自動支払保留
C_SCREEN_ON.  "デフォルト属性
*       初期データの場合
WHEN SPACE.
IF W_MEISAI-KESSAI  = TEXT-004.    "未処理が設定されている
IF  SCREEN-NAME     = 'W_MEISAI-PZLSCH'.
SCREEN-INPUT = C_SCREEN_ON.
ENDIF.
ENDIF.
WHEN OTHERS.

ENDCASE.
ENDIF.
*   更新
MODIFY SCREEN.
ENDLOOP.

ENDFORM.                    " SCREEN_INIT_TYPE
*&---------------------------------------------------------------------*
*&      Form  SCREEN_INPUT_TYPE
*&---------------------------------------------------------------------*
*       画面属性変更
*----------------------------------------------------------------------*
*      -->P_PZTERM          サイトの画面属性
*      -->P_PADVNC          前渡の画面属性
*      -->P_PKUNNR          相殺の画面属性
*      -->P_PZTERM_D        仕入割引の画面属性
*      -->P_PZLSPR          自動支払保留の画面属性
*      -->P_DEFAULT         その他画面項目のデフォルト値
*----------------------------------------------------------------------*
FORM SCREEN_INPUT_TYPE  USING P_PZTERM    TYPE CHAR1
P_PADVNC    TYPE CHAR1
P_PKUNNR    TYPE CHAR1
P_PZTERM_D  TYPE CHAR1
P_PZLSPR    TYPE CHAR1
P_DEFAULT   TYPE CHAR1.

* どの明細も入力可能
IF SCREEN-NAME = 'W_MEISAI-PZFBDT'.
SCREEN-INPUT = P_DEFAULT.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-PZLSCH'.
SCREEN-INPUT = P_DEFAULT.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-PWRBTR'.
SCREEN-INPUT = P_DEFAULT.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-PLIFNR'.
SCREEN-INPUT = P_DEFAULT.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-PMEMO'.
SCREEN-INPUT = P_DEFAULT.
ENDIF.

* 各支払条件によって入力可/入力不可が変わる
IF SCREEN-NAME = 'W_MEISAI-PZTERM'.  "サイト
SCREEN-INPUT = P_PZTERM.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-PADVNC'.  "前渡
SCREEN-INPUT = P_PADVNC.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-PKUNNR'.  "相殺
SCREEN-INPUT = P_PKUNNR.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-PZTERM_D'. "仕入割引
SCREEN-INPUT = P_PZTERM_D.
ENDIF.
IF SCREEN-NAME = 'W_MEISAI-PZLSPR'.   "自動支払保留
SCREEN-INPUT = P_PZLSPR.
ENDIF.

ENDFORM.                    " SCREEN_INPUT_TYPE
*&---------------------------------------------------------------------*
*&      Module  CHANGE_PZLSCH  INPUT
*&---------------------------------------------------------------------*
*       支払条件変更フラグをON
*----------------------------------------------------------------------*
MODULE CHANGE_PZLSCH INPUT.

W_CHANGE_PZLSCH_FLG = C_ON.

ENDMODULE.                 " CHANGE_PZLSCH  INPUT
*&---------------------------------------------------------------------*
*&      Form  SAVE_CHECK
*&---------------------------------------------------------------------*
*       保存時のチェック
*----------------------------------------------------------------------*
FORM SAVE_CHECK.
DATA:LW_SUM   TYPE YNETXAMT.

CLEAR:G_LINE.
LOOP AT T_MEISAI INTO W_MEISAI.
G_LINE = G_LINE + 1.
IF W_MEISAI-KESSAI = TEXT-004.      "未処理のデータのみチェック
*     サイトの入力値チェック
PERFORM CHECK_PZTERM    USING W_MEISAI-PZTERM
CHANGING W_SAVE_ERR.
IF W_SAVE_ERR = C_ON.
G_FIELDNAME = 'W_MEISAI-PZTERM'.
EXIT.
ENDIF.

*     相殺得意先の入力値チェック
PERFORM CHECK_PKUNNR    USING W_MEISAI-PKUNNR
CHANGING W_SAVE_ERR.
IF W_SAVE_ERR = C_ON.
G_FIELDNAME = 'W_MEISAI-PKUNNR'.
EXIT.
ENDIF.

*     名寄仕入先の入力値チェック
PERFORM CHECK_PLIFNR    USING W_MEISAI-PLIFNR
CHANGING W_SAVE_ERR.
IF W_SAVE_ERR = C_ON.
G_FIELDNAME = 'W_MEISAI-PLIFNR'.
EXIT.
ENDIF.

*     仕入値引の入力値チェック
PERFORM CHECK_PZTERM_D  USING W_MEISAI-PZTERM_D
CHANGING W_SAVE_ERR.
IF W_SAVE_ERR = C_ON.
G_FIELDNAME = 'W_MEISAI-PZTERM_D'.
EXIT.
ENDIF.

*     自動支払保留の入力値チェック
PERFORM CHECK_PZLSPR  USING W_MEISAI-PZLSPR
CHANGING W_SAVE_ERR.
IF W_SAVE_ERR = C_ON.
G_FIELDNAME = 'W_MEISAI-PZLSPR'.
EXIT.
ENDIF.
ENDIF.

*   支払金額合算
LW_SUM = LW_SUM + W_MEISAI-PWRBTR.
ENDLOOP.

* エラーが発生している場合は、ここでチェック終了
IF W_SAVE_ERR = C_ON.
EXIT.
ENDIF.

* 支払金額チェック
IF LW_SUM <> G_YN210_SUM.
MESSAGE I000 WITH TEXT-E06.
W_SAVE_ERR = C_ON.
ENDIF.

ENDFORM.                    " SAVE_CHECK
*&---------------------------------------------------------------------*
*&      Form  CHECK_PZTERM
*&---------------------------------------------------------------------*
*       サイトの入力値チェック
*----------------------------------------------------------------------*
*      -->P_PZTERM          サイト
*      <--P_SAVE_ERR        エラーフラグ
*----------------------------------------------------------------------*
FORM CHECK_PZTERM    USING P_PZTERM     TYPE ZNEPZTERM
CHANGING P_SAVE_ERR   TYPE CHAR1.
DATA:LW_ZTERM  TYPE DZTERM.

CHECK NOT P_PZTERM IS INITIAL.
* マスタ存在チェック
SELECT ZTERM
INTO LW_ZTERM
FROM T052
UP TO 1 ROWS
WHERE ZTERM = P_PZTERM.
ENDSELECT.

IF SY-SUBRC <> 0.
MESSAGE I000 WITH TEXT-006
P_PZTERM
TEXT-E04.
SET CURSOR FIELD 'T_MEISAI-PZTERM' LINE G_LINE.
W_SAVE_ERR = C_ON.
EXIT.
ENDIF.

* 固定値でチェック
IF P_PZTERM = '0001'
OR P_PZTERM+0(1) = 'S'
OR P_PZTERM+0(1) = 'Z'.
ELSE.
MESSAGE I000 WITH TEXT-006
P_PZTERM
TEXT-E05.
SET CURSOR FIELD 'W_MEISAI-PZTERM' LINE G_LINE.
W_SAVE_ERR = C_ON.
EXIT.
ENDIF.

ENDFORM.                    " CHECK_PZTERM
*&---------------------------------------------------------------------*
*&      Form  CHECK_PKUNNR
*&---------------------------------------------------------------------*
*       相殺の入力値チェック
*----------------------------------------------------------------------*
*      -->P_PKUNNR          相殺
*      <--P_SAVE_ERR        エラーフラグ
*----------------------------------------------------------------------*
FORM CHECK_PKUNNR USING    P_PKUNNR     TYPE ZNEPKUNNR
CHANGING P_SAVE_ERR   TYPE CHAR1.
DATA:LW_KUNNR   TYPE KUNNR.

CHECK NOT P_PKUNNR IS INITIAL.
* マスタ存在チェック
SELECT SINGLE KUNNR
INTO LW_KUNNR
FROM KNB1
WHERE KUNNR = P_PKUNNR
AND BUKRS = P_BUK.
IF SY-SUBRC <> 0.
MESSAGE I000 WITH TEXT-007
P_PKUNNR
TEXT-E04.
P_SAVE_ERR = C_ON.
ENDIF.

ENDFORM.                    " CHECK_PKUNNR
*&---------------------------------------------------------------------*
*&      Form  CHECK_PLIFNR
*&---------------------------------------------------------------------*
*       振替先の入力値チェック
*----------------------------------------------------------------------*
*      -->P_PLIFNR          振替先
*      <--P_SAVE_ERR        エラーフラグ
*----------------------------------------------------------------------*
FORM CHECK_PLIFNR USING    P_PLIFNR     TYPE ZNEPLIFNR
CHANGING P_SAVE_ERR   TYPE CHAR1.
DATA:LW_LIFNR   TYPE LIFNR.

CHECK NOT P_PLIFNR IS INITIAL.
* マスタ存在チェック
SELECT SINGLE LFM1~LIFNR
INTO LW_LIFNR
FROM LFB1 INNER JOIN LFM1
ON LFB1~LIFNR = LFM1~LIFNR
WHERE LFB1~LIFNR = P_PLIFNR
AND LFB1~BUKRS = P_BUK
AND LFM1~EKORG = P_EKORG.

IF SY-SUBRC <> 0.
MESSAGE I000 WITH TEXT-008
P_PLIFNR
TEXT-E04.
SET CURSOR FIELD 'W_MEISAI-PLIFNR' LINE G_LINE.
P_SAVE_ERR = C_ON.
ENDIF.

ENDFORM.                    " CHECK_PLIFNR
*&---------------------------------------------------------------------*
*&      Form  CHECK_PZTERM_D
*&---------------------------------------------------------------------*
*       仕入値引きの入力値チェック
*----------------------------------------------------------------------*
*      -->P_PZTERM_D        仕入値引き
*      <--P_SAVE_ERR        エラーフラグ
*----------------------------------------------------------------------*
FORM CHECK_PZTERM_D USING    P_PZTERM_D  TYPE ZNEZTERM_D
CHANGING P_SAVE_ERR  TYPE CHAR1.
DATA:LW_ZTERM  TYPE DZTERM.

CHECK NOT P_PZTERM_D IS INITIAL.
* マスタ存在チェック
SELECT ZTERM
INTO LW_ZTERM
FROM T052
UP TO 1 ROWS
WHERE ZTERM = P_PZTERM_D.
ENDSELECT.

IF SY-SUBRC <> 0.
MESSAGE I000 WITH TEXT-009
P_PZTERM_D
TEXT-E04.
SET CURSOR FIELD 'W_MEISAI-PZTERM_D' LINE G_LINE.
W_SAVE_ERR = C_ON.
EXIT.
ENDIF.

* 固定値でチェック
IF P_PZTERM_D+0(1) = 'W'.
ELSE.
MESSAGE I000 WITH TEXT-009
P_PZTERM_D
TEXT-E05.
SET CURSOR FIELD 'W_MEISAI-PZTERM_D' LINE G_LINE.
W_SAVE_ERR = C_ON.
EXIT.
ENDIF.

ENDFORM.                    " CHECK_PZTERM_D
*&---------------------------------------------------------------------*
*&      Form  CHECK_PZLSPR
*&---------------------------------------------------------------------*
*       自動支払保留の入力値チェック
*----------------------------------------------------------------------*
*      -->P_PZLSPR          自動支払保留
*      <--P_SAVE_ERR        エラーフラグ
*----------------------------------------------------------------------*
FORM CHECK_PZLSPR USING    P_PZLSPR      TYPE ZNEZLSPR
CHANGING P_SAVE_ERR    TYPE CHAR1.
DATA:LW_ZAHLS   TYPE DZAHLS.

CHECK NOT P_PZLSPR IS INITIAL.
* マスタ存在チェック
SELECT SINGLE ZAHLS
INTO LW_ZAHLS
FROM T008
WHERE ZAHLS = P_PZLSPR.

IF SY-SUBRC <> 0.
MESSAGE I000 WITH TEXT-010
P_PZLSPR
TEXT-E04.
SET CURSOR FIELD 'W_MEISAI-PZLSPR' LINE G_LINE.
W_SAVE_ERR = C_ON.
EXIT.
ENDIF.

ENDFORM.                    " CHECK_PZLSPR
*&---------------------------------------------------------------------*
*&      Form  SAVE_DATA
*&---------------------------------------------------------------------*
*       データ更新
*----------------------------------------------------------------------*
FORM SAVE_DATA.
DATA:LW_ZN002   TYPE ZN002,        "ZN002登録データ
LT_ZN002   TYPE STANDARD TABLE OF ZN002,
LW_SEQ     TYPE ZNESEQ,       "ＳＥＱカウント用
LW_DATUM   TYPE DATUM,        "登録日付
LW_UZEIT   TYPE UZEIT,        "登録時刻
LW_UNAME   TYPE SYUNAME.      "登録ユーザ

* 登録情報の退避
LW_DATUM = SY-DATUM.
LW_UZEIT = SY-UZEIT.
LW_UNAME = SY-UNAME.

* データ編集
LOOP AT T_MEISAI INTO W_MEISAI.
LW_SEQ            = LW_SEQ + 1.
LW_ZN002-BUKRS    = G_BUKRS.           "会社コード
LW_ZN002-LIFNR    = G_LIFNR.           "仕入先コード(請求先)
LW_ZN002-CZFBDT   = G_CZFBDT.          "照合締日
LW_ZN002-SEQ      = LW_SEQ.            "SEQ
LW_ZN002-PZFBDT   = W_MEISAI-PZFBDT.   "支払予定日
LW_ZN002-PZLSCH   = W_MEISAI-PZLSCH.   "支払方法
LW_ZN002-PZTERM   = W_MEISAI-PZTERM.   "サイト
LW_ZN002-PHKONT   = W_MEISAI-PHKONT.   "振替勘定
LW_ZN002-WAERS    = G_WAERS.           "通貨コード
LW_ZN002-PWRBTR   = W_MEISAI-PWRBTR.   "支払予定額
LW_ZN002-PADVNC   = W_MEISAI-PADVNC.   "前渡済
LW_ZN002-PLIFNR   = W_MEISAI-PLIFNR.   "振替仕入先
LW_ZN002-PKUNNR   = W_MEISAI-PKUNNR.   "相殺先
LW_ZN002-PZTERM_D = W_MEISAI-PZTERM_D. "仕入割引条件
LW_ZN002-PZLSPR   = W_MEISAI-PZLSPR.   "自動支払保留
LW_ZN002-PMEMO    = W_MEISAI-PMEMO.    "備考
*   [済]のデータは登録情報も更新しない
IF W_MEISAI-INSDT IS INITIAL.
LW_ZN002-INSDT    = LW_DATUM.          "登録日
LW_ZN002-INSTM    = LW_UZEIT.          "登録時刻
LW_ZN002-INSUSR   = LW_UNAME.          "登録ユーザ
ELSE.
LW_ZN002-INSDT    = W_MEISAI-INSDT.    "登録日
LW_ZN002-INSTM    = W_MEISAI-INSTM.    "登録時刻
LW_ZN002-INSUSR   = W_MEISAI-INSUSR.   "登録ユーザ
ENDIF.
LW_ZN002-PSTFLG   = W_MEISAI-PSTFLG.   "会計振替
LW_ZN002-PSTDT    = W_MEISAI-PSTDT.    "会計振替日
LW_ZN002-PSTTM    = W_MEISAI-PSTTM.    "会計振替時刻
LW_ZN002-PSTUSR   = W_MEISAI-PSTUSR.   "会計振替ユーザ
LW_ZN002-BELNR    = W_MEISAI-BELNR.    "会計伝票番号
LW_ZN002-GJAHR    = W_MEISAI-GJAHR.    "会計年度
LW_ZN002-BUDAT    = W_MEISAI-BUDAT.    "伝票の転記日付
APPEND LW_ZN002 TO LT_ZN002.
ENDLOOP.

* 元のデータを削除
DELETE ZN002 FROM TABLE T_ZN002.  "取得したデータ
IF SY-SUBRC <> 0.
ROLLBACK WORK.
MESSAGE I793 WITH TEXT-014.
W_SAVE_ERR = C_ON.
EXIT.
ENDIF.
* 今回のデータを登録
INSERT ZN002 FROM TABLE LT_ZN002.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
MESSAGE I758 WITH TEXT-014.
W_SAVE_ERR = C_ON.
EXIT.
ENDIF.

ENDFORM.                    " SAVE_DATA
*&---------------------------------------------------------------------*
*&      Form  CALL_POPUP
*&---------------------------------------------------------------------*
*       ポップアップ表示
*----------------------------------------------------------------------*
*      -->P_TEXT_001      MESSAGE
*      -->P_TEXT_002      POPUP TEXT
*      <--P_LW_ANSWER     回答
*----------------------------------------------------------------------*
FORM CALL_POPUP USING     P_TEXT_001   TYPE ANY
P_TEXT_002   TYPE ANY
CHANGING  P_ANSWER     TYPE CHAR1.
CLEAR:P_ANSWER.
CALL FUNCTION 'POPUP_TO_CONFIRM'
EXPORTING
*     TITLEBAR                    = P_TEXT_002
TEXT_QUESTION               = P_TEXT_001
DEFAULT_BUTTON              = C_ANSWER_NG
DISPLAY_CANCEL_BUTTON       = SPACE
IMPORTING
ANSWER                      = P_ANSWER
EXCEPTIONS
TEXT_NOT_FOUND              = 1
OTHERS                      = 2.

IF SY-SUBRC <> 0.
CLEAR:P_ANSWER.
ENDIF.

ENDFORM.                    " CALL_POPUP
*&---------------------------------------------------------------------*
*&      Form  UNLOCK_PROC
*&---------------------------------------------------------------------*
*       ロック解除
*----------------------------------------------------------------------*
FORM UNLOCK_PROC.

CALL FUNCTION 'DEQUEUE_EZN002'
EXPORTING
MODE_ZN002           = C_LOCK_MODE
BUKRS                = P_BUK
LIFNR                = P_LIF
CZFBDT               = P_DAY
EXCEPTIONS
FOREIGN_LOCK         = 1
SYSTEM_FAILURE       = 2
OTHERS               = 3.

ENDFORM.                    " UNLOCK_PROC
*&---------------------------------------------------------------------*
*&      Module  CREATE_LIST_BOX  INPUT
*&---------------------------------------------------------------------*
*       LIST BOX作成
*----------------------------------------------------------------------*
MODULE CREATE_LIST_BOX INPUT.

IF T_PZLSCH_LIST[] IS INITIAL.
SELECT DOMVALUE_L
DDTEXT
INTO TABLE T_PZLSCH_LIST
FROM DD07T
WHERE DOMNAME = 'ZNDPZLSCH'
AND DDLANGUAGE = SY-LANGU.
ENDIF.

CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
EXPORTING
RETFIELD               = 'PADVNC'
VALUE_ORG              = 'S'
TABLES
VALUE_TAB              = T_PZLSCH_LIST
EXCEPTIONS
PARAMETER_ERROR        = 1
NO_VALUES_FOUND        = 2
OTHERS                 = 3.

ENDMODULE.                 " CREATE_LIST_BOX  INPUT
*&---------------------------------------------------------------------*
*&      Module  ZTERM_HELP  INPUT
*&---------------------------------------------------------------------*
*       サイト検索ヘルプ
*----------------------------------------------------------------------*
MODULE ZTERM_HELP INPUT.

PERFORM ZTERM_HELP CHANGING W_MEISAI-PZTERM.

ENDMODULE.                 " ZTERM_HELP  INPUT
*&---------------------------------------------------------------------*
*&      Module  ZTERM_D_HELP  INPUT
*&---------------------------------------------------------------------*
*       仕入割引検索ヘルプ
*----------------------------------------------------------------------*
MODULE ZTERM_D_HELP INPUT.

PERFORM ZTERM_HELP CHANGING W_MEISAI-PZTERM_D.

ENDMODULE.                 " ZTERM_D_HELP  INPUT
*&---------------------------------------------------------------------*
*&      Form  ZTERM_HELP
*&---------------------------------------------------------------------*
*       支払条件検索ヘルプ
*----------------------------------------------------------------------*
*      <--P_ZTERM     支払条件
*----------------------------------------------------------------------*
FORM ZTERM_HELP CHANGING P_ZTERM.

CALL FUNCTION 'FI_F4_ZTERM'
EXPORTING
I_KOART             = 'K'
I_ZTERM             = P_ZTERM
I_XSHOW             = SPACE
*     I_ZTYPE             = ' '
IMPORTING
E_ZTERM             = P_ZTERM
EXCEPTIONS
NOTHING_FOUND       = 1
OTHERS              = 2.

IF SY-SUBRC <> 0.
CLEAR:P_ZTERM.
ENDIF.

ENDFORM.                    " ZTERM_HELP
*&---------------------------------------------------------------------*
*&      Module  PZLSPR_HELP  INPUT
*&---------------------------------------------------------------------*
*       支払保留検索ヘルプ
*----------------------------------------------------------------------*
MODULE PZLSPR_HELP INPUT.
DATA:LT_ANS   TYPE TABLE OF DDSHRETVAL,
LW_ANS   TYPE DDSHRETVAL.

IF T_PZLSPR_HELP[] IS INITIAL.
SELECT ZAHLS
TEXTL
INTO TABLE T_PZLSPR_HELP
FROM T008T
WHERE SPRAS = SY-LANGU.
ENDIF.

CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
EXPORTING
RETFIELD               = 'ZAHLS'
VALUE_ORG              = 'S'
TABLES
VALUE_TAB              = T_PZLSPR_HELP
RETURN_TAB             = LT_ANS
EXCEPTIONS
PARAMETER_ERROR        = 1
NO_VALUES_FOUND        = 2
OTHERS                 = 3.
READ TABLE LT_ANS INTO LW_ANS INDEX 1.
W_MEISAI-PZLSPR = LW_ANS-FIELDVAL.

ENDMODULE.                 " PZLSPR_HELP  INPUT
*&---------------------------------------------------------------------*
*&      Module  PZFBDT_HELP  INPUT
*&---------------------------------------------------------------------*
*       支払予定日検索ヘルプ
*----------------------------------------------------------------------*
MODULE PZFBDT_HELP INPUT.
DATA:LW_DATE   LIKE WORKFLDS-GKDAY.

CALL FUNCTION 'F4_DATE'
IMPORTING
SELECT_DATE                        = LW_DATE
EXCEPTIONS
CALENDAR_BUFFER_NOT_LOADABLE       = 1
DATE_AFTER_RANGE                   = 2
DATE_BEFORE_RANGE                  = 3
DATE_INVALID                       = 4
FACTORY_CALENDAR_NOT_FOUND         = 5
HOLIDAY_CALENDAR_NOT_FOUND         = 6
PARAMETER_CONFLICT                 = 7
OTHERS                             = 8.

W_MEISAI-PZFBDT = LW_DATE.

ENDMODULE.                 " PZFBDT_HELP  INPUT
*&---------------------------------------------------------------------*
*&      Module  LINE_COUNT  INPUT
*&---------------------------------------------------------------------*
*       行カウント
*----------------------------------------------------------------------*
MODULE LINE_COUNT INPUT.

* 現在ループ中の行数をカウントする
G_LINE = G_LINE + 1.

ENDMODULE.                 " LINE_COUNT  INPUT
*&---------------------------------------------------------------------*
*&      Form  CHECK_BELNR
*&---------------------------------------------------------------------*
*       会計伝票決済チェック
*----------------------------------------------------------------------*
*      -->P_GJAHR  会計年度
*      -->P_BELNR  会計伝票番号
*      -->P_PHKONT 振替勘定コード
*      <--P_L_RC  リターンコード
*----------------------------------------------------------------------*
FORM CHECK_BELNR USING    P_GJAHR
P_BELNR
P_PHKONT
CHANGING P_RC.
SELECT COUNT(*)
FROM BSEG
WHERE BUKRS =  P_BUK
AND BELNR =  P_BELNR
AND GJAHR =  P_GJAHR
AND AUGBL <> ''
AND HKONT =  P_PHKONT.

P_RC = SY-SUBRC.

ENDFORM.                    " CHECK_BELNR
