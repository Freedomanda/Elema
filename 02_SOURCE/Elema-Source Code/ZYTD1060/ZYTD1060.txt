************************************************************************
* [プログラム名]
*        ZB024000  供給元一覧
* [処理概要]
*      ・ ローカル、またはサーバより移行ファイルを読込み、Ｒ／３供給元マ
*         にＢＤＣでデータを登録する。
*      ・ ＢＤＣの前に入力データに対し存在チェックをし、正常データのみで
*         Ｃを実行する。
*      ・ ＢＤＣ終了後、結果レポートを表示する。
*
* [改定履歴]
*　YYYY/MM/DD   Programar           Description
*  2002/01/31   PSD K.IGARASHI      新規開発
*  2002/05/09   NDSC K.KAJISA       件数出力法の変更
*  2010/03/25   SOLFIS S.IWAKI      すでに情報がある場合は追加する
*  2012/08/14   ISID                ES-UP
*  2014/08/29   ISID18              コードページを"UTF-8"に修正
*  2014/09/10   ISID19              グローバル化対応
*  2015/01/12   ISID11              アップロード時のBOMロジック改修
*  2015/02/04   ISID11              コードページ処理の再修正
*& 2015/05/20   ISID17              BDC日付書式とチェック時点
***********************************************************************
REPORT   ZB024000
MESSAGE-ID Z1
LINE-SIZE 155
NO STANDARD PAGE HEADING.
***********************************************************************
*   TYPES
***********************************************************************
* ＢＤＣ実行内部ＴＢＬ型
TYPES: BEGIN OF TYP_IFILE,
MATNR(18) TYPE C,               "仕入先コード
WERKS(4)  TYPE C,               "プラント
**** START UPD BY ISID17 2015/05/20 ****
*        VDATU(8)  TYPE C,               "有効開始日
*        BDATU(8)  TYPE C,               "有効終了日
VDATU     TYPE EORD-VDATU,       "有効開始日
BDATU     TYPE EORD-BDATU,       "有効終了日
**** END UPD BY ISID17 2015/05/20 ****
LIFNR(10) TYPE C,               "仕入先
EKORG(4)  TYPE C,               "購買組織
FESKZ(1)  TYPE C,               "固定供給元
END OF TYP_IFILE.

* 帳票出力項目ＴＢＬ型
TYPES: BEGIN OF TYP_WRITE,
MATNR(18)    TYPE C,            "仕入先コード
WERKS(4)     TYPE C,            "プラント
VDATU(8)     TYPE C,            "有効開始日
BDATU(8)     TYPE C,            "有効終了日
LIFNR(10)    TYPE C,            "仕入先
EKORG(4)     TYPE C,            "購買組織
FESKZ(1)     TYPE C,            "固定供給元
MESSAGE(100) TYPE C,            "メッセージ
ERR_FLG      TYPE C,            "エラーフラグ
END OF TYP_WRITE.
***********************************************************************
*   DATA
***********************************************************************
* 読込みファイル格納用内部ＴＢＬ
DATA: GF_IFILE TYPE TYP_IFILE,
GT_IFILE LIKE TABLE OF GF_IFILE.

* 正常データ用内部ＴＢＬ
DATA: GF_OFILE TYPE TYP_IFILE,
GT_OFILE LIKE TABLE OF GF_OFILE.

* 帳票出力用内部ＴＢＬ
DATA: GF_WRITE TYPE TYP_WRITE,
GT_WRITE LIKE TABLE OF GF_WRITE.

* 入力ファイル読込み用内部ＴＢＬ(READ)
* Mod ES-UP 2012/10/24 -->
*DATA: GF_FILEDATA(80) TYPE C,
DATA: GF_FILEDATA TYPE STRING,
* Mod ES-UP 2012/10/24 <--
GT_FILEDATA LIKE TABLE OF GF_FILEDATA.

* 更新処理用内部テーブル
DATA: GT_BDCDATA LIKE BDCDATA OCCURS 0 WITH HEADER LINE.

* バッチインプット処理システムメッセージ用内部ＴＢＬ
DATA: GT_MSGTAB LIKE BDCMSGCOLL OCCURS 0 WITH HEADER LINE,
GF_MSGTAB LIKE GT_MSGTAB.

* WRITE_MESSAGE変換済みメッセージ用内部ＴＢＬ
DATA: GT_BDCMSG LIKE MESSAGE OCCURS 0 WITH HEADER LINE.

* フラグ
DATA: G_FLG_ERR TYPE P VALUE 0,          "チェック処理用エラーフラグ
G_FLG_MSG TYPE P VALUE 0.          "メッセージ選別用フラグ

* カウンタ
DATA: G_CNT_IFILE    TYPE P VALUE 0,     "ＢＤＣ実行用内部ＴＢＬレコード
G_CNT_WRITE    TYPE P VALUE 0,     "帳票用内部ＴＢＬレコード数
G_CNT_FILEDATA TYPE P VALUE 0,     "読込み件数
G_CNT_INSERT   TYPE P VALUE 0,     "登録件数
G_CNT_ERR      TYPE P VALUE 0.     "エラー件数

* 実行結果ポップアップ表示用項目
DATA: CM_IFILE TYPE P VALUE 0,           "入力ファイル読込件数
CM_INS   TYPE P VALUE 0,           "登録件数
CM_ERR   TYPE P VALUE 0.           "エラー件数

DATA G_BDC_MODE TYPE C VALUE 'N'.

*** 汎用モジュール WS_FILENAME_GET ***
DATA: W_MASK(22)        TYPE C VALUE
',*.TXT,*.TXT,*.*,*.*.'.               "ファイルの種類
DATA: G_FILENM_GET      LIKE RLGRAP-FILENAME.       "ファイル名
DATA: W_DEF_FILENM(255) TYPE C.                     "ＰＣファイル名

***********************************************************************
*   CONSTANTS
***********************************************************************
CONSTANTS: CNS_MOD_001(15) TYPE C VALUE 'WS_FILENAME_GET',
CNS_MOD_002(9)  TYPE C VALUE 'WS_UPLOAD'.
CONSTANTS: CNS_TBL_001(4)  TYPE C VALUE 'MARA',
CNS_TBL_002(5)  TYPE C VALUE 'T001W',
CNS_TBL_003(4)  TYPE C VALUE 'LFA1',
CNS_TBL_004(4)  TYPE C VALUE 'EINA'.
CONSTANTS: CNS_NULL_X      TYPE X VALUE '00'.
* Add ES-UP 2012/08/14 -->
****START UPD 2014/08/29 ISID18****
*CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
**** START DEL 2015/02/04 ISID11 ****
*CONSTANTS CNS_UTF TYPE STRING VALUE `UTF-8`.
**** END DEL 2015/02/04 ISID11 ****
****END UPD 2014/08/29 ISID18****
* Add ES-UP 2012/08/14 <--
***********************************************************************
*   選択画面
***********************************************************************
**** START ADD 2014/09/09 ISID19 ****
PARAMETERS : P_BUKRS  TYPE T001-BUKRS OBLIGATORY.
**** END ADD 2014/09/09 ISID19 ****
* チェックのみ
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS C_CHK AS CHECKBOX.
SELECTION-SCREEN COMMENT 4(12) TEXT-001.
SELECTION-SCREEN END OF LINE.
* 入力ファイル
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT (12) TEXT-002 FOR FIELD P_IFILE.
SELECTION-SCREEN POSITION 17.
PARAMETERS P_IFILE TYPE RLGRAP-FILENAME OBLIGATORY.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN SKIP.

* ローカルより実行
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS R_R1 RADIOBUTTON GROUP RADI.
SELECTION-SCREEN COMMENT 4(16) TEXT-003.
SELECTION-SCREEN END OF LINE.

* サーバより実行
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS R_R2 RADIOBUTTON GROUP RADI.
SELECTION-SCREEN COMMENT 4(14) TEXT-004.
SELECTION-SCREEN END OF LINE.

************************************************************************
* ＡＴ　ＳＥＬＥＣＴＩＯＮ−ＳＣＲＥＥＮ　入力ファイルヘルプ
************************************************************************
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_IFILE.   "入力ヘルプ
*
*  CALL FUNCTION 'WS_FILENAME_GET'
*     EXPORTING
*         DEF_FILENAME           = W_DEF_FILENM
*         MASK                   = W_MASK
*         TITLE                  = '保管場所'
*     IMPORTING
*         FILENAME               = G_FILENM_GET
*     EXCEPTIONS
*         INV_WINSYS             = 1
*         NO_BATCH               = 2
*         SELECTION_CANCEL       = 3
*         SELECTION_ERROR        = 4
*         OTHERS                 = 5.
*
*  IF SY-SUBRC = 0.
*      P_IFILE = G_FILENM_GET.
*  ELSEIF SY-SUBRC = 3.
*      MESSAGE ID '00' TYPE 'S' NUMBER '208' WITH '処理中断'.
*      STOP.
*  ELSE.
*      MESSAGE I502 WITH CNS_MOD_001 SY-SUBRC.
*      STOP.
*  ENDIF.

**** START ADD 2014/09/10 ISID19 ****
************************************************************************
* 初期設定
************************************************************************
INITIALIZATION .
GET PARAMETER ID 'BUK' FIELD P_BUKRS.
************************************************************************
*  AT SELECTION-SCREEN.
************************************************************************
AT SELECTION-SCREEN.
PERFORM CHK_PRC.
**** END ADD 2014/09/10 ISID19 ****

************************************************************************
*   ＳＴＡＲＴ−ＯＦ−ＳＥＬＥＣＴＩＯＮ
************************************************************************
START-OF-SELECTION.

* 入力ファイルの読み込み
PERFORM FRM_IFILE_GET.
DESCRIBE TABLE GT_IFILE LINES G_CNT_FILEDATA."ファイル読込み件数

* ＢＤＣ実行用内部テーブル作成
LOOP AT GT_IFILE INTO GF_IFILE.

CLEAR G_FLG_ERR.
PERFORM CONV_LIFNR.
*--- データチェック処理
PERFORM FRM_DATA_CHECK.

*--- 正常用内部ＴＢＬの作成
IF G_FLG_ERR = 0.
PERFORM FRM_SET_GT_IFILE.
ENDIF.

ENDLOOP.

DESCRIBE TABLE GT_OFILE LINES G_CNT_IFILE.  "正常データ件数

* 更新処理(バッチインプット)、帳票作成処理
IF C_CHK <> 'X'.
PERFORM FRM_BACHI.
ENDIF.

* 帳票出力処理
PERFORM FRM_WRITE.

* 処理結果ポップアップ出力処理
PERFORM FRM_POPUP_MESSAGE.

************************************************************************
*   ＴＯＰ−ＯＦ−ＰＡＧＥ
************************************************************************
TOP-OF-PAGE.

WRITE: SY-ULINE,
0       TEXT-006, SY-REPID,    "プログラムID
40      TEXT-007,              "表題

**** START UPD 2014/09/10 ISID19 ****
*         95      TEXT-008, SY-DATUM,    "日付
*         115     TEXT-009, SY-UZEIT,    "時間
95      TEXT-008, SY-DATLO,    "日付
115     TEXT-009, SY-TIMLO,    "時間
**** END UPD 2014/09/10 ISID19 ****

130     SY-PAGNO, TEXT-010,    "貢
SY-ULINE,
/0(18)  TEXT-015,              "品目コード
20(8)   TEXT-016,              "プラント
30(10)  TEXT-017,              "有効開始日
42(10)  TEXT-018,              "有効終了日
54(10)  TEXT-019,              "仕入先
66(8)   TEXT-020,              "購買組織
76(10)  TEXT-021,              "固定供給元
88(100) TEXT-022,              "メッセージ
SY-ULINE.
************************************************************************
*   ＦＯＲＭ
************************************************************************
*&--------------------------------------------------------------------&*
*&      Form  frm_ifile_get                                           &*
*&--------------------------------------------------------------------&*
*       入力ファイル読込み処理
*----------------------------------------------------------------------*
FORM FRM_IFILE_GET.

*--- ローカルより実行選択時
IF R_R1 = 'X'.
PERFORM FRM_FILE_UPLODE.

*--- サーバより実行選択時
ELSEIF R_R2 = 'X'.
PERFORM FRM_FILE_READ.

ENDIF.

ENDFORM.                    " frm_ifile_get
*&--------------------------------------------------------------------&*
*&      Form  frm_file_uplode                                         &*
*&--------------------------------------------------------------------&*
*       ローカルより実行選択時のファイルの読込み
*----------------------------------------------------------------------*
FORM FRM_FILE_UPLODE.
*--- 入力FILEOPEN
* Mod ES-UP 2012/08/14 -->
*  CALL FUNCTION 'WS_UPLOAD'
*      EXPORTING
*          FILENAME                      = P_IFILE
*          FILETYPE                      = 'DAT'
*      TABLES
*          DATA_TAB                      = GT_IFILE
*      EXCEPTIONS
*          CONVERSION_ERROR              = 1
*          FILE_OPEN_ERROR               = 2
*          FILE_READ_ERROR               = 3
*          INVALID_TYPE                  = 4
*          NO_BATCH                      = 5
*          UNKNOWN_ERROR                 = 6
*          INVALID_TABLE_WIDTH           = 7
*          GUI_REFUSE_FILETRANSFER       = 8
*          CUSTOMER_ERROR                = 9
*          OTHERS                        = 10.
*
*    IF SY-SUBRC = 0.
*    ELSEIF SY-SUBRC = 2.
DATA L_FILE TYPE STRING.
DATA L_CODEPAGE TYPE ABAP_ENCODING.

**** START ADD 2015/02/04 ISID11 ****
DATA:
L_Z_OUTPUT_CP TYPE  ZTEGZZM001-Z_OUTPUT_CP,
L_SAPCODEPAGE TYPE STRING.

CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
EXPORTING
IMPPGM      = SY-REPID
IMPBUKRS    = P_BUKRS
IMPORTING
EXPCODEPAGE = L_Z_OUTPUT_CP.
**** END ADD 2015/02/04 ISID11 ****

****START UPD 2014/08/29 ISID18****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
**** START UPD 2015/02/04 ISID11 ****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_UTF ).
L_SAPCODEPAGE = L_Z_OUTPUT_CP.
IF L_SAPCODEPAGE IS NOT INITIAL.

L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).

ENDIF.
**** END UPD 2015/02/04 ISID11 ****
****END UPD 2014/08/29 ISID18****

L_FILE = P_IFILE.
CL_GUI_FRONTEND_SERVICES=>GUI_UPLOAD(
EXPORTING
FILENAME                = L_FILE
FILETYPE                = 'DAT'
HAS_FIELD_SEPARATOR     = ABAP_TRUE
*      HEADER_LENGTH           = 0
*      READ_BY_LINE            = 'X'
*      DAT_MODE                = SPACE
CODEPAGE                = L_CODEPAGE
*      IGNORE_CERR             = ABAP_TRUE
*      REPLACEMENT             = '#'
*      VIRUS_SCAN_PROFILE      = VIRUS_SCAN_PROFILE
*    IMPORTING
*      FILELENGTH              = FILELENGTH
*      HEADER                  = HEADER
CHANGING
DATA_TAB                = GT_IFILE
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
NOT_SUPPORTED_BY_GUI    = 17
ERROR_NO_GUI            = 18
OTHERS                  = 19 ).
IF SY-SUBRC = 0.
ELSEIF SY-SUBRC = 1.
* Mod ES-UP 2012/08/14 <--
MESSAGE S614 WITH TEXT-002.
STOP.
ELSE.
MESSAGE I502 WITH CNS_MOD_002 SY-SUBRC.
STOP.
ENDIF.

* ゼロ件ファイルチェック
IF GT_IFILE IS INITIAL.
MESSAGE I621.
STOP.
ENDIF.

ENDFORM.                    " frm_file_uplode
*&--------------------------------------------------------------------&*
*&      Form  frm_file_read                                           &*
*&--------------------------------------------------------------------&*
*       サーバより実行選択時のファイル読込み
*----------------------------------------------------------------------*
FORM FRM_FILE_READ.
* Mod ES-UP 2012/08/14 -->
*DATA: L_FDATA_X TYPE X,
*      L_TAB_X   TYPE X.
*
*  L_TAB_X = '09'.
**** START DEL 2014/09/04 ISID19 ****
* DATA L_CODEPAGE TYPE ABAP_ENCODING.
**** END DEL 2014/09/04 ISID19 ****

* Mod ES-UP 2012/08/14 <--
* 入力ファイルオープン
* Mod ES-UP 2012/08/14 -->
*  OPEN DATASET P_IFILE FOR INPUT IN TEXT MODE.
****START DEL 2014/08/29 ISID18****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
****END DEL 2014/08/29 ISID18****
**** START ADD 2015/02/04 ISID11 ****
DATA:
L_Z_OUTPUT_CP TYPE  ZTEGZZM001-Z_OUTPUT_CP,
L_SAPCODEPAGE TYPE STRING,
L_FLGUTF8  TYPE  FLAG,
L_SUBRC    TYPE SY-SUBRC,
L_CODEPAGE TYPE ABAP_ENCODING.

CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
EXPORTING
IMPPGM      = SY-REPID
IMPBUKRS    = P_BUKRS
IMPORTING
EXPCODEPAGE = L_Z_OUTPUT_CP
EXPFLGUTF8  = L_FLGUTF8.
**** END ADD 2015/02/04 ISID11 ****
**** START UPD 2014/08/31 ISID19 ****
*  OPEN DATASET P_IFILE FOR INPUT
*    IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
*    IGNORING CONVERSION ERRORS.
**** START ADD 2015/02/04 ISID11 ****
IF L_FLGUTF8 IS INITIAL.

L_SAPCODEPAGE = L_Z_OUTPUT_CP.
IF L_SAPCODEPAGE IS NOT INITIAL.

L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).

ENDIF.
TRY .
OPEN DATASET P_IFILE FOR INPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.

L_SUBRC = SY-SUBRC.

CATCH CX_SY_CODEPAGE_CONVERTER_INIT.

L_SUBRC = 8.

ENDTRY.

ELSE.
**** END ADD 2015/02/04 ISID11 ****
OPEN DATASET P_IFILE FOR INPUT IN TEXT MODE ENCODING UTF-8
**** START ADD 2015/01/12 ISID11 ****
SKIPPING BYTE-ORDER MARK
**** END ADD 2015/01/12 ISID11 ****
IGNORING CONVERSION ERRORS.
**** END UPD 2014/08/31 ISID19 ****
**** START ADD 2015/02/04 ISID11 ****
L_SUBRC = SY-SUBRC.

ENDIF.
**** END ADD 2015/02/04 ISID11 ****
* Mod ES-UP 2012/08/14 <--
**** START UPD 2015/02/04 ISID11 ****
*  IF SY-SUBRC <> 0.
IF L_SUBRC <> 0.
**** END UPD 2015/02/04 ISID11 ****
MESSAGE I306 WITH TEXT-002 P_IFILE.
CLOSE DATASET P_IFILE.
STOP.
ENDIF.

* 入力ファイル読込み
DO.
READ DATASET P_IFILE INTO GF_FILEDATA.
IF SY-SUBRC = 0.
* Mod ES-UP 2012/08/14 -->
*        SPLIT GF_FILEDATA AT L_TAB_X INTO GF_IFILE-MATNR
SPLIT GF_FILEDATA AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
INTO GF_IFILE-MATNR
* Mod ES-UP 2012/08/14 <--
GF_IFILE-WERKS
GF_IFILE-VDATU
GF_IFILE-BDATU
GF_IFILE-LIFNR
GF_IFILE-EKORG
GF_IFILE-FESKZ.
PERFORM CONV_LIFNR.               "仕入先ゼロ埋め 2002/05/24
APPEND GF_IFILE TO GT_IFILE.
ELSEIF SY-SUBRC = 4.
* Del ES-UP 2012/08/14 -->
*        L_FDATA_X = GF_FILEDATA+0(1).
*        IF L_FDATA_X <> CNS_NULL_X.
*          SPLIT GF_FILEDATA AT L_TAB_X INTO GF_IFILE-MATNR
*                                            GF_IFILE-WERKS
*                                            GF_IFILE-VDATU
*                                            GF_IFILE-BDATU
*                                            GF_IFILE-LIFNR
*                                            GF_IFILE-EKORG
*                                            GF_IFILE-FESKZ.
*          PERFORM CONV_LIFNR.               "仕入先ゼロ埋め  2002/05/24
*          APPEND GF_IFILE TO GT_IFILE.
*        ENDIF.
* Del ES-UP 2012/08/14 <--
CLOSE DATASET P_IFILE.
EXIT.
ENDIF.
ENDDO.

* ゼロ件ファイルチェック
IF GT_IFILE IS INITIAL.
MESSAGE I621.
STOP.
ENDIF.

ENDFORM.                    " frm_file_read
*&--------------------------------------------------------------------&*
*&      Form  frm_data_check                                          &*
*&--------------------------------------------------------------------&*
*       データチェック処理
*----------------------------------------------------------------------*
FORM FRM_DATA_CHECK.

* 品目存在チェック
PERFORM FRM_CHECK_MATNR.

* プラント存在チェック
IF G_FLG_ERR = 0.
PERFORM FRM_CHECK_WERKS.
ENDIF.

* 仕入先存在チェック
IF G_FLG_ERR = 0.
PERFORM FRM_CHECK_LIFNR.
ENDIF.

* 購買組織存在チェック
IF G_FLG_ERR = 0.
PERFORM FRM_CHECK_PORG.
ENDIF.
* 固定仕入先チェック
IF G_FLG_ERR = 0.
PERFORM FRM_CHECK_EORD.
ENDIF.


ENDFORM.                    " frm_data_check
*&--------------------------------------------------------------------&*
*&      Form  frm_check_1                                             &*
*&--------------------------------------------------------------------&*
*       品目存在チェック
*----------------------------------------------------------------------*
FORM FRM_CHECK_MATNR.

DATA: LF_MATNR LIKE MARA-MATNR,  "抽出項目格納領域
L_SUBRC LIKE SY-SUBRC.     "リターン値保管項目
*2002/06/21 ADD Start
IF GF_IFILE-MATNR(1) = ' '.
G_FLG_MSG = 6.
PERFORM FRM_SET_GT_WRITE.      "エラーレコード帳票登録
G_FLG_ERR = 1.
EXIT.
ENDIF.
*2002/06/21 ADD END
SELECT SINGLE MATNR
FROM MARA
INTO LF_MATNR
WHERE MATNR = GF_IFILE-MATNR.

IF SY-SUBRC = 0.
ELSEIF SY-SUBRC = 4.
G_FLG_MSG = 1.
PERFORM FRM_SET_GT_WRITE.      "エラーレコード帳票登録
G_FLG_ERR = 1.
ELSEIF SY-SUBRC = 8.
L_SUBRC = SY-SUBRC.
CLOSE DATASET P_IFILE.
MESSAGE A603 WITH SY-REPID CNS_TBL_001 L_SUBRC.
ENDIF.

ENDFORM.                    " frm_check_1
*&--------------------------------------------------------------------&*
*&      Form  frm_check_werks                                         &*
*&--------------------------------------------------------------------&*
*       プラント存在チェック
*----------------------------------------------------------------------*
FORM FRM_CHECK_WERKS.

DATA: L_WERKS LIKE T001W-WERKS,  "抽出項目格納領域
L_SUBRC LIKE SY-SUBRC.     "リターン値保管項目

SELECT SINGLE WERKS
FROM T001W
INTO L_WERKS
WHERE WERKS = GF_IFILE-WERKS.

IF SY-SUBRC = 0.

**** START ADD 2014/09/10 ISID19 ****
PERFORM CHK_WERKS USING GF_IFILE-WERKS
CHANGING G_FLG_ERR.
**** END ADD 2014/09/10 ISID19  ****

ELSEIF SY-SUBRC = 4.
G_FLG_MSG = 2.
PERFORM FRM_SET_GT_WRITE.      "エラーレコード帳票登録
G_FLG_ERR = 1.
ELSEIF SY-SUBRC = 8.
L_SUBRC = SY-SUBRC.
CLOSE DATASET P_IFILE.
MESSAGE A603 WITH SY-REPID CNS_TBL_002 L_SUBRC.
ENDIF.

ENDFORM.                    " frm_check_werks
*&--------------------------------------------------------------------&*
*&      Form  frm_check_lifnr                                         &*
*&--------------------------------------------------------------------&*
*       仕入先存在チェック
*----------------------------------------------------------------------*
FORM FRM_CHECK_LIFNR.

DATA: L_LIFNR LIKE LFA1-LIFNR,  "抽出項目格納領域
L_SUBRC LIKE SY-SUBRC.    "リターン値保管項目

SELECT SINGLE LIFNR
FROM LFA1
INTO L_LIFNR
WHERE LIFNR = GF_IFILE-LIFNR.

IF SY-SUBRC = 0.
ELSEIF SY-SUBRC = 4.
G_FLG_MSG = 3.
PERFORM FRM_SET_GT_WRITE.      "エラーレコード帳票登録
G_FLG_ERR = 1.
ELSEIF SY-SUBRC = 8.
L_SUBRC = SY-SUBRC.
CLOSE DATASET P_IFILE.
MESSAGE A603 WITH SY-REPID CNS_TBL_003 L_SUBRC.
ENDIF.

ENDFORM.                    " frm_check_lifnr
*&--------------------------------------------------------------------&*
*&      Form  frm_check_porg                                          &*
*&--------------------------------------------------------------------&*
*       購買組織存在チェック
*----------------------------------------------------------------------*
FORM FRM_CHECK_PORG.

DATA: LF_EINA LIKE EINA,              "抽出項目格納領域
LT_EINA LIKE TABLE OF LF_EINA,
L_SUBRC LIKE SY-SUBRC.          "リターン値保管項目

SELECT * FROM EINA
INTO CORRESPONDING FIELDS OF TABLE LT_EINA
WHERE MATNR = GF_IFILE-MATNR
AND   LIFNR = GF_IFILE-LIFNR.

IF SY-SUBRC = 0.
ELSEIF SY-SUBRC = 4.
G_FLG_MSG = 4.
PERFORM FRM_SET_GT_WRITE.      "エラーレコード帳票登録
G_FLG_ERR = 1.
ELSEIF SY-SUBRC = 8.
L_SUBRC = SY-SUBRC.
CLOSE DATASET P_IFILE.
MESSAGE A603 WITH SY-REPID CNS_TBL_004 L_SUBRC.
ENDIF.

ENDFORM.                    " frm_check_porg
*&--------------------------------------------------------------------&*
*&      Form  frm_set_gt_write                                        &*
*&--------------------------------------------------------------------&*
*       帳票設定処理
*----------------------------------------------------------------------*
FORM FRM_SET_GT_WRITE.

* メッセージの設定
CASE G_FLG_MSG.
WHEN 1.                            "品目がエラーの場合
GF_WRITE-MESSAGE = TEXT-011.
WHEN 2.                            "プラントがエラーの場合
GF_WRITE-MESSAGE = TEXT-012.
WHEN 3.                            "仕入先がエラーの場合
GF_WRITE-MESSAGE = TEXT-013.
WHEN 4.                            "購買組織がエラーの場合
GF_WRITE-MESSAGE = TEXT-014.
WHEN 5.                            "ＢＤＣエラー
GF_WRITE-MESSAGE = GT_BDCMSG-MSGTX. "メッセージ.
WHEN 6.
GF_WRITE-MESSAGE = TEXT-028.
ENDCASE.

* 帳票項目の登録
IF G_FLG_MSG = 5.
GF_WRITE-MATNR   = GF_OFILE-MATNR.  "品目
GF_WRITE-WERKS   = GF_OFILE-WERKS.  "プラント
GF_WRITE-VDATU   = GF_OFILE-VDATU.  "有効開始日
GF_WRITE-BDATU   = GF_OFILE-BDATU.  "有効終了日
GF_WRITE-LIFNR   = GF_OFILE-LIFNR.  "仕入先
GF_WRITE-EKORG   = GF_OFILE-EKORG.  "購買組織
GF_WRITE-FESKZ   = GF_OFILE-FESKZ.  "固定供給元
GF_WRITE-ERR_FLG = '0'.                "登録種別→エラー
ELSE.
GF_WRITE-MATNR   = GF_IFILE-MATNR.  "品目
GF_WRITE-WERKS   = GF_IFILE-WERKS.  "プラント
GF_WRITE-VDATU   = GF_IFILE-VDATU.  "有効開始日
GF_WRITE-BDATU   = GF_IFILE-BDATU.  "有効終了日
GF_WRITE-LIFNR   = GF_IFILE-LIFNR.  "仕入先
GF_WRITE-EKORG   = GF_IFILE-EKORG.  "購買組織
GF_WRITE-FESKZ   = GF_IFILE-FESKZ.  "固定供給元
GF_WRITE-ERR_FLG = '0'.                "登録種別→エラー
ENDIF.

APPEND GF_WRITE TO GT_WRITE.
G_CNT_ERR = G_CNT_ERR + 1.             "エラー件数カウント
CLEAR: GF_WRITE,
G_FLG_MSG.

ENDFORM.                    " frm_set_gt_write
*&--------------------------------------------------------------------&*
*&      Form  frm_set_gt_ifile                                        &*
*&--------------------------------------------------------------------&*
*       正常データ用内部ＴＢＬへの登録
*----------------------------------------------------------------------*
FORM FRM_SET_GT_IFILE.

GF_OFILE-MATNR = GF_IFILE-MATNR.  "品目
GF_OFILE-WERKS = GF_IFILE-WERKS.  "プラント
GF_OFILE-VDATU = GF_IFILE-VDATU.  "有効開始日
GF_OFILE-BDATU = GF_IFILE-BDATU.  "有効終了日
GF_OFILE-LIFNR = GF_IFILE-LIFNR.  "仕入先
GF_OFILE-EKORG = GF_IFILE-EKORG.  "購買組織
GF_OFILE-FESKZ = GF_IFILE-FESKZ.  "固定供給元

APPEND GF_OFILE TO GT_OFILE.
CLEAR GF_OFILE.

ENDFORM.                    " frm_set_gt_ifile
*&--------------------------------------------------------------------&*
*&      Form  frm_bachi                                               &*
*&--------------------------------------------------------------------&*
*       更新処理(バッチインプット)
*----------------------------------------------------------------------*
FORM FRM_BACHI.

LOOP AT GT_OFILE INTO GF_OFILE.
PERFORM FRM_MAKE_BACHITBL.  "更新処理用内部ＴＢＬ作成
CALL TRANSACTION 'ME01' USING GT_BDCDATA
MODE G_BDC_MODE
UPDATE 'S'
MESSAGES INTO GT_MSGTAB.

IF SY-SUBRC = 0.
PERFORM FRM_GET_MESSAGE.    "ＢＤＣメッセージ取得処理
PERFORM FRM_SET_WRITE.      "帳票作成処理
REFRESH: GT_BDCMSG,
GT_MSGTAB.
ELSEIF SY-SUBRC <> 0.
* 2002/02/27 PSD K.IGARASHI MOD ↓
*        MESSAGE A311 WITH text-005.
PERFORM FRM_GET_MESSAGE.    "ＢＤＣメッセージ取得処理
G_FLG_MSG = 5.
PERFORM FRM_SET_GT_WRITE.      "エラーレコード帳票登録
CLEAR G_FLG_MSG.
REFRESH: GT_BDCMSG,
GT_MSGTAB.
* 2002/02/27 PSD K.IGARASHI MOD ↑
ENDIF.

*    G_CNT_INSERT = G_CNT_INSERT + 1.              "登録件数


REFRESH GT_BDCDATA.

ENDLOOP.

ENDFORM.                    " frm_bachi
*&--------------------------------------------------------------------&*
*&      Form  frm_make_bachitbl                                       &*
*&--------------------------------------------------------------------&*
*       バッチ用内部テーブル作成
*----------------------------------------------------------------------*
FORM FRM_MAKE_BACHITBL.
**** START ADD BY ISID17 2015/05/20 ****
DATA: LW_VDATU TYPE CHAR10,
LW_BDATU TYPE CHAR10.

WRITE GF_OFILE-VDATU TO LW_VDATU.
WRITE GF_OFILE-BDATU TO LW_BDATU.
**** END ADD BY ISID17 2015/05/20 ****

* 第一画面
PERFORM BDC_DYNPRO USING 'SAPLMEOR' '0200'.
PERFORM BDC_FIELD  USING 'EORD-MATNR'
GF_OFILE-MATNR.
PERFORM BDC_FIELD  USING 'EORD-WERKS'
GF_OFILE-WERKS.
PERFORM BDC_FIELD  USING 'BDC_OKCODE'
'/00'.

* 第二画面
*2010/03/25 DEL START
*  PERFORM bdc_dynpro using 'SAPLMEOR' '0205'.
*  PERFORM bdc_field  using 'EORD-VDATU(01)'
*                            GF_OFILE-VDATU.
*  PERFORM bdc_field  using 'EORD-BDATU(01)'
*                            GF_OFILE-BDATU.
*  PERFORM bdc_field  using 'EORD-LIFNR(01)'
*                            GF_OFILE-LIFNR.
*  PERFORM bdc_field  using 'EORD-EKORG(01)'
*                            GF_OFILE-EKORG.
*  PERFORM bdc_field  using 'RM06W-FESKZ(01)'
*                            GF_OFILE-FESKZ.
*  PERFORM bdc_field  using 'BDC_OKCODE'
*                            '=BU'.
*2010/03/25 DEL END
*2010/03/25 ADD START
* 新規明細追加
PERFORM BDC_DYNPRO USING 'SAPLMEOR' '0205'.
PERFORM BDC_FIELD  USING 'BDC_OKCODE' '=NS'.
* 値セット
PERFORM BDC_DYNPRO USING 'SAPLMEOR' '0205'.
PERFORM BDC_FIELD  USING 'EORD-VDATU(02)'
**** START UPD BY ISID17 2015/05/20 ****
*                            GF_OFILE-VDATU.
LW_VDATU.
**** END UPD BY ISID17 2015/05/20 ****

PERFORM BDC_FIELD  USING 'EORD-BDATU(02)'
**** START UPD BY ISID17 2015/05/20 ****
*                            GF_OFILE-BDATU.
LW_BDATU.
**** END UPD BY ISID17 2015/05/20 ****

PERFORM BDC_FIELD  USING 'EORD-LIFNR(02)'
GF_OFILE-LIFNR.
PERFORM BDC_FIELD  USING 'EORD-EKORG(02)'
GF_OFILE-EKORG.
PERFORM BDC_FIELD  USING 'RM06W-FESKZ(02)'
GF_OFILE-FESKZ.
PERFORM BDC_FIELD  USING 'BDC_OKCODE'
'=BU'.
*2010/03/25 ADD END

ENDFORM.                    " frm_make_bachitbl
*----------------------------------------------------------------------*
*        Start new screen( バッチ内部TBL DYNPROレコード作成 ）
*----------------------------------------------------------------------*
FORM BDC_DYNPRO USING PROGRAM DYNPRO.

CLEAR GT_BDCDATA.

GT_BDCDATA-PROGRAM  = PROGRAM.
GT_BDCDATA-DYNPRO   = DYNPRO.
GT_BDCDATA-DYNBEGIN = 'X'.
APPEND GT_BDCDATA.

ENDFORM.                    "BDC_DYNPRO

*----------------------------------------------------------------------*
*        Insert field（ バッチ内部TBL 機能コードレコード作成
*----------------------------------------------------------------------*
FORM BDC_FIELD USING FNAM FVAL.

CLEAR GT_BDCDATA.

GT_BDCDATA-FNAM = FNAM.
GT_BDCDATA-FVAL = FVAL.
APPEND GT_BDCDATA.

ENDFORM.                    "BDC_FIELD
*&--------------------------------------------------------------------&*
*&      Form  frm_get_message                                         &*
*&--------------------------------------------------------------------&*
*       バッチインプット結果メッセージ取得
*----------------------------------------------------------------------*
FORM FRM_GET_MESSAGE.

DATA: L_MSGID LIKE SY-MSGID,    "汎用モジュール用メッセージＩＤ
L_MSGNO LIKE SY-MSGNO,    "汎用モジュール用メッセージ番号
L_MSGTY LIKE SY-MSGTY.    "汎用モジュール用メッセージタイプ

* メッセージ情報を汎用モジュール用項目に代入
READ TABLE GT_MSGTAB INTO GF_MSGTAB.
L_MSGID = GF_MSGTAB-MSGID.
L_MSGNO = GF_MSGTAB-MSGNR.
L_MSGTY = GF_MSGTAB-MSGTYP.

CALL FUNCTION 'WRITE_MESSAGE'
EXPORTING
MSGID = L_MSGID
MSGNO = L_MSGNO
MSGTY = L_MSGTY
*     MSGV1 = ' '
*     MSGV2 = ' '
*     MSGV3 = ' '
*     MSGV4 = ' '
*     MSGV5 = ' '
IMPORTING
*     ERROR =
MESSG = GT_BDCMSG
*     MSGLN =
.

ENDFORM.                    " frm_get_message
*&--------------------------------------------------------------------&*
*&      Form  frm_set_write                                           &*
*&--------------------------------------------------------------------&*
*       帳票出力用内部テーブルの設定
*----------------------------------------------------------------------*
FORM FRM_SET_WRITE.

GF_WRITE-MATNR   = GF_OFILE-MATNR.  "品目
GF_WRITE-WERKS   = GF_OFILE-WERKS.  "プラント
GF_WRITE-VDATU   = GF_OFILE-VDATU.  "有効開始日
GF_WRITE-BDATU   = GF_OFILE-BDATU.  "有効終了日
GF_WRITE-LIFNR   = GF_OFILE-LIFNR.  "仕入先
GF_WRITE-EKORG   = GF_OFILE-EKORG.  "購買組織
GF_WRITE-FESKZ   = GF_OFILE-FESKZ.  "固定供給元
GF_WRITE-MESSAGE = GT_BDCMSG-MSGTX. "メッセージ
GF_WRITE-ERR_FLG = '1'.             "登録種別→正常

APPEND GF_WRITE TO GT_WRITE.
G_CNT_INSERT = G_CNT_INSERT + 1.              "登録件数
CLEAR: GF_WRITE,
GT_BDCMSG.

ENDFORM.                    " frm_set_write
*&--------------------------------------------------------------------&*
*&      Form  frm_write                                               &*
*&--------------------------------------------------------------------&*
*       帳票出力処理
*----------------------------------------------------------------------*
FORM FRM_WRITE.

**** START UPD 2014/09/10 ISID19 ****
*  DATA: L_VDATU(10) TYPE C,
*        L_BDATU(10) TYPE C.
DATA:
L_VDATU TYPE SY-DATUM,
L_BDATU TYPE SY-DATUM.
**** END UPD 2014/09/10 ISID19 ****

* ソート処理( ERR or NO ERR/品目/プラント/仕入先 )
SORT GT_WRITE ASCENDING BY ERR_FLG
MATNR
WERKS
LIFNR.

LOOP AT GT_WRITE INTO GF_WRITE.
CLEAR:
L_VDATU,
L_BDATU.

**** START ADD 2014/09/10 ISID19 ****
L_VDATU = GF_WRITE-VDATU.
L_BDATU = GF_WRITE-BDATU.
*--- 有効開始日のチェック
CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
EXPORTING
DATE                      = L_VDATU
EXCEPTIONS
PLAUSIBILITY_CHECK_FAILED = 1
OTHERS                    = 2.
IF SY-SUBRC <> 0.
CLEAR L_VDATU.
ENDIF.
*--- 有効終了日のチェック
CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
EXPORTING
DATE                      = L_BDATU
EXCEPTIONS
PLAUSIBILITY_CHECK_FAILED = 1
OTHERS                    = 2.
IF SY-SUBRC <> 0.
CLEAR L_BDATU.
ENDIF.
**** END ADD 2014/09/10 ISID19 ****

**** START DEL 2014/09/10 ISID19 ****
*--- 有効開始日の編集
*    CONCATENATE GF_WRITE-VDATU+0(4) '/'
*                GF_WRITE-VDATU+4(2) '/'
*                GF_WRITE-VDATU+6(2)
*                INTO L_VDATU.
*
**--- 有効終了日の編集
*    CONCATENATE GF_WRITE-BDATU+0(4) '/'
*                GF_WRITE-BDATU+4(2) '/'
*                GF_WRITE-BDATU+6(2)
*                INTO L_BDATU.
**** END DEL 2014/09/10 ISID19 ****

WRITE: /0(18)   GF_WRITE-MATNR,    "品目
20(8)   GF_WRITE-WERKS.    "プラント
**** START ADD 2014/09/10 ISID19 ****
IF L_VDATU IS NOT INITIAL.
**** END ADD 2014/09/10 ISID19 ****
WRITE:    30(10)  L_VDATU.       "有効開始日
ENDIF.
**** START ADD 2014/09/10 ISID19 ****
IF L_BDATU IS NOT INITIAL.
**** END ADD 2014/09/10 ISID19 ****
WRITE:     42(10)  L_BDATU.      "有効終了日
ENDIF.
WRITE:  54(10)  GF_WRITE-LIFNR,    "仕入先
66(8)   GF_WRITE-EKORG,    "購買組織
76(10)  GF_WRITE-FESKZ,    "固定供給元
88(100) GF_WRITE-MESSAGE.  "メッセージ

ENDLOOP.

* エラーメッセージが無い場合の表示
IF G_CNT_ERR = 0.
SKIP.
WRITE /0 TEXT-023.
*2002/05/08 ADD START
ELSE.
ULINE.
**** START UPD 2014/09/10 ISID19 ****
*    WRITE:/1  '入力件数',
*           10  G_CNT_FILEDATA,
*           /1  '登録件数',
*           10  G_CNT_INSERT,
*           /1  'ERR件数',
*           10  G_CNT_ERR.
WRITE:/1  TEXT-029,
10  G_CNT_FILEDATA,
/1  TEXT-030,
10  G_CNT_INSERT,
/1  TEXT-031,
10  G_CNT_ERR.
**** END UPD 2014/09/10 ISID19 ****

*2002/05/08 ADD END
ENDIF.

ENDFORM.                    " frm_write
*&--------------------------------------------------------------------&*
*&      Form  frm_popup_message                                       &*
*&--------------------------------------------------------------------&*
*       実行結果ポップアップ表示
*----------------------------------------------------------------------*
FORM FRM_POPUP_MESSAGE.

CALL SCREEN 9000 STARTING AT 10 5.

ENDFORM.                    " frm_popup_message
*&--------------------------------------------------------------------&*
*&      Module  STATUS_9000  OUTPUT                                   &*
*&--------------------------------------------------------------------&*
*       実行結果ポップアップ表示ＰＢＯ
*----------------------------------------------------------------------*
MODULE STATUS_9000 OUTPUT.
*  SET PF-STATUS 'xxxxxxxx'.
SET TITLEBAR 'TZE011400'.

CM_IFILE = G_CNT_FILEDATA.    "入力ファイル読込件数
CM_INS   = G_CNT_INSERT.                 "登録件数
CM_ERR   = G_CNT_ERR.                  "エラー件数

ENDMODULE.                 " STATUS_9000  OUTPUT
*&--------------------------------------------------------------------&*
*&      Module  USER_COMMAND_9000  INPUT                              &*
*&--------------------------------------------------------------------&*
*       確認ボタンチェック
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9000 INPUT.

IF SY-UCOMM = 'OK_CODE'.
LEAVE SCREEN.
ENDIF.

ENDMODULE.                 " USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*&      Form  CONV_LIFNR
*&---------------------------------------------------------------------*
*       ゼロ埋め 2002/05/24 ADD
*----------------------------------------------------------------------*
FORM CONV_LIFNR.
*仕入先
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = GF_IFILE-LIFNR
IMPORTING
OUTPUT = GF_IFILE-LIFNR
EXCEPTIONS
OTHERS = 1.
*品目
CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
EXPORTING
INPUT  = GF_IFILE-MATNR
IMPORTING
OUTPUT = GF_IFILE-MATNR
EXCEPTIONS
OTHERS = 1.

ENDFORM.                    " CONV_LIFNR
*&---------------------------------------------------------------------*
*&      Form  frm_check_eord
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM FRM_CHECK_EORD.
DATA : L_FLAG TYPE C .

SELECT SINGLE FLIFN
FROM EORD
INTO L_FLAG
WHERE MATNR EQ GF_IFILE-MATNR
AND  WERKS EQ GF_IFILE-WERKS
AND  FLIFN EQ 'X'
AND  BDATU EQ '99991231'
.
IF SY-SUBRC EQ 0 .
CLEAR : GF_IFILE-FESKZ .
ENDIF .
ENDFORM.                    " frm_check_eord

**** START ADD 2014/09/10 ISID19 ****
*&---------------------------------------------------------------------*
*&      Form  CHK_PRC
*&---------------------------------------------------------------------*
*       チェック
*----------------------------------------------------------------------*
FORM CHK_PRC .

* 会社コード存在チェック
SELECT SINGLE BUKRS
FROM T001
INTO P_BUKRS
WHERE BUKRS = P_BUKRS.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'P_BUKRS'.
MESSAGE E016(Z3) WITH P_BUKRS.
*   会社コード & が存在しません。
ENDIF.

* 会社コード権限チェック
AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
ID 'BUKRS' FIELD P_BUKRS
ID 'ACTVT' FIELD '03'.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'P_BUKRS'.
MESSAGE E015(Z3) WITH P_BUKRS.
*   会社コード & では実行する権限がありません。
ENDIF.

ENDFORM.                    " CHK_PRC
*&---------------------------------------------------------------------*
*&      Form  CHK_WERKS
*&---------------------------------------------------------------------*
*       チェック
*----------------------------------------------------------------------*
*      -->P_WERKS     プラント
*      <--P_FLG_ERR   納品書種別
*----------------------------------------------------------------------*
FORM CHK_WERKS USING    P_WERKS   TYPE CHAR4
CHANGING P_FLG_ERR TYPE P.
DATA:
LW_MESSAGE   TYPE STRING,
LW_WERKS     TYPE WERKS.
LW_WERKS = P_WERKS.  "プラント

CALL FUNCTION 'ZEG_ZZ_WERKS_CHK'
EXPORTING
IMPBUKRS           = P_BUKRS         "会社コード
IMPWERKS           = LW_WERKS        "プラント
EXCEPTIONS
WERKS_NOT_EXIST    = 1
WERKS_NO_AUTHORITY = 2
WERKS_BUKRS_ERROR  = 3
OTHERS             = 4.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LW_MESSAGE.
*帳票設定処理
PERFORM FRM_SET_WRITE_ERR USING LW_MESSAGE.
P_FLG_ERR = 1.
ENDIF.

ENDFORM.                    " CHK_WERKS

*&--------------------------------------------------------------------&*
*&      Form  FRM_SET_WRITE_ERR                                       &*
*&--------------------------------------------------------------------&*
*       帳票設定処理
*       -->P_MESSAGE  エラーメッセージ
*----------------------------------------------------------------------*
FORM FRM_SET_WRITE_ERR USING P_MESSAGE TYPE STRING.

* メッセージの設定
GF_WRITE-MESSAGE = P_MESSAGE.       "プラントがエラーの場合
* 帳票項目の登録
GF_WRITE-MATNR   = GF_IFILE-MATNR.  "品目
GF_WRITE-WERKS   = GF_IFILE-WERKS.  "プラント
GF_WRITE-VDATU   = GF_IFILE-VDATU.  "有効開始日
GF_WRITE-BDATU   = GF_IFILE-BDATU.  "有効終了日
GF_WRITE-LIFNR   = GF_IFILE-LIFNR.  "仕入先
GF_WRITE-EKORG   = GF_IFILE-EKORG.  "購買組織
GF_WRITE-FESKZ   = GF_IFILE-FESKZ.  "固定供給元
GF_WRITE-ERR_FLG = '0'.             "登録種別→エラー
APPEND GF_WRITE TO GT_WRITE.
G_CNT_ERR = G_CNT_ERR + 1.          "エラー件数カウント
CLEAR: GF_WRITE.

ENDFORM.                    " FRM_SET_WRITE_ERR

**** END ADD 2014/09/10 ISID19 ****
*Text symbol text・
*001:Check only
*002:Input file
*003:Local perform
*004:Server perform
*005:Batch input  process
*006:PROGRAM-ID:
*007:** tSource list **
*008:Date
*009:Time
*010:G
*011:Material in R3 don't exist
*012:Plant in R3 don't exist
*013:Supplier in R3 don't exist
*014:Combination of Mate and Sup Pur Info don't exist
*015:Material
*016:Plant
*017:Beg Date
*018:End Date
*019:Sup
*020:Pur Org
*021:Fix goods
*022:Message
*023:Wrong data does not exist
*024:Exe Res
*025:Input File Read Num：
*026:Login Num：
*027:Err Num：
*028:Material front is blank
*029:In Num
*030:Log Num
*031:Err Num
*Selection text・
*P_BUKRS:        Company Code
