*&---------------------------------------------------------------------*
*& Report  Z_CCS_TEST04
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  z_ccs_test04.
TYPE-POOLS: slis.



DATA: gs_fcat TYPE lvc_s_fcat,

gt_fcat TYPE lvc_t_fcat,

gs_layo TYPE lvc_s_layo,

gs_grid TYPE lvc_s_glay.

DATA: gt_event TYPE slis_t_event WITH HEADER LINE,

gt_event_exit TYPE slis_t_event_exit WITH HEADER LINE.



DATA:  ref_grid TYPE REF TO cl_gui_alv_grid..



DATA: BEGIN OF gt_itab OCCURS 0,

aa TYPE c,

bb TYPE i,

cc TYPE p,

style TYPE lvc_t_styl,

END OF gt_itab.

DATA: wa_itab LIKE gt_itab.







*----------------------------------------------------------------------*

*       CLASS lcl_event_receiver DEFINITION

*----------------------------------------------------------------------*

*

*----------------------------------------------------------------------*

CLASS lcl_event_receiver DEFINITION.

PUBLIC SECTION.

METHODS handle_modify

FOR EVENT data_changed_finished OF cl_gui_alv_grid

IMPORTING e_modified et_good_cells.

ENDCLASS.                    "LCL_EVENT_RECEIVER DEFINITION

*----------------------------------------------------------------------*

*       CLASS LCL_EVENT_RECEIVER IMPLEMENTATION

*----------------------------------------------------------------------*

*

*----------------------------------------------------------------------*

CLASS lcl_event_receiver IMPLEMENTATION.

METHOD handle_modify.

*    PERFORM refresh.



DATA stbl TYPE lvc_s_stbl.



LOOP AT gt_itab INTO wa_itab.

wa_itab-cc = wa_itab-bb * 2 .

MODIFY gt_itab FROM wa_itab.

ENDLOOP.

*   #定刷新

stbl-row = 'X'." 基于行的#定刷新

stbl-col = 'X'." 基于列#定刷新

CALL METHOD ref_grid->refresh_table_display
EXPORTING
is_stable = stbl.

ENDMETHOD.                    "HANDLE_MODIFY

ENDCLASS.                    "LCL_EVENT_RECEIVER IMPLEMENTATION

DATA gt_event_receiver TYPE REF TO lcl_event_receiver .



START-OF-SELECTION.

gt_itab-aa = 'aa'.

gt_itab-bb = 1.

gt_itab-cc = '1.2'.

APPEND gt_itab.





gt_itab-aa = 'aa'.

gt_itab-bb = 1.

gt_itab-cc = '1.2'.

APPEND gt_itab.



gt_itab-aa = 'aa'.

gt_itab-bb = 1.

gt_itab-cc = '1.2'.

APPEND gt_itab.



PERFORM display_data .





*&---------------------------------------------------------------------*

*&      Form  display_data

*&---------------------------------------------------------------------*

*       text

*----------------------------------------------------------------------*

FORM display_data .

PERFORM set_fcat.

PERFORM set_layout.

*  gt_event-form = 'DATA_CHANGED'.

*  gt_event-name = slis_ev_data_changed.

*  APPEND gt_event.





*  gt_event_exit-ucomm  =  'ENTR'. "Enter = 'ENTR' & '/00' & ' '

*  APPEND gt_event_exit.



*  gt_event_exit-ucomm  =  '/00'.

*  APPEND gt_event_exit.

*

*  gt_event_exit-ucomm  =  ' '.

*  APPEND gt_event_exit.

*

*  gt_event_exit-ucomm  =  '&DATA_SAVE'.

*  APPEND gt_event_exit.



*

*  gt_event_exit-ucomm  = '&F03'.   "Back

*  APPEND gt_event_exit.

*  gt_event_exit-ucomm  = '&F15'.

*  APPEND gt_event_exit.

*  gt_event_exit-ucomm  = '&F12'.

*  APPEND gt_event_exit  .





PERFORM show_alv  TABLES gt_fcat  gt_itab[]

USING  gs_layo.

ENDFORM.                    " DISPLAY_DATA



*&---------------------------------------------------------------------*

FORM set_fcat .

PERFORM csalv_set_fcat USING:



" 'Field' 'Text' 'Edit' 'Zero' 'Type' 'Qfieldname' 'Key' 'Hostspot' 'Emphasize' 'Checkbox'

'AA'  'AA'  ''  ''  ''  ''  ''  ''  ''  '',

'BB'  'BB'  'X'  ''  ''  ''  ''  ''  ''  '',

'CC'  'CC'  ''  ''  ''  ''  ''  ''  ''  ''.

*        'DD'  'DD'  'X'  ''  ''  ''  ''  'X'  ''  'X',

*        'EE'  'EE'  ''  ''  ''  ''  ''  ''  ''  'X'  .



ENDFORM.                    " SET_FCAT

*&---------------------------------------------------------------------*

FORM set_layout .

gs_layo-zebra             = 'X'.

*  gs_layout-stylefname     = 'FIELD_STYLE'.

*  gs_layo-CWIDTH_OPT        =  'X'.

ENDFORM.                    " SET_LAYOUT

*&---------------------------------------------------------------------*

FORM csalv_set_fcat USING p_name

p_text

p_edit

p_zero

p_type

p_qfieldname

p_key

p_hotspot

p_emphasize

p_checkbox.



gs_fcat-fieldname   =  p_name.

*  gs_fcat-reptext_l   =

*  gs_fcat-selddictxt   =

gs_fcat-reptext     =  p_text.

gs_fcat-edit        =  p_edit.

gs_fcat-no_zero     =  p_zero.

gs_fcat-datatype    =  p_type.

gs_fcat-qfieldname  =  p_qfieldname.

gs_fcat-key         =  p_key.

gs_fcat-hotspot     =  p_hotspot.

gs_fcat-emphasize   =  p_emphasize.

gs_fcat-checkbox    =   p_checkbox.



APPEND gs_fcat TO  gt_fcat.

ENDFORM.                    "csalv_set_fcat



*&---------------------------------------------------------------------*



FORM show_alv TABLES  pt_fcat

pt_tab

USING   ps_layout.





*  gs_grid-edt_cll_cb = 'X'.



gt_event-name = 'CALLER_EXIT'.   "slis_ev_caller_exit_at_start事件

gt_event-form = 'FM_BUTTON'.

APPEND gt_event .



CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'

EXPORTING

i_callback_program                  = sy-repid

*    i_callback_user_command            = 'USER_COMMAND'
i_callback_top_of_page              = 'TOP_OF_PAGE'

*    i_grid_settings                    = gs_grid

is_layout_lvc                       = gs_layo

it_fieldcat_lvc                     = pt_fcat[]

it_events                          = gt_event[]

*     it_event_exit                     = gt_event_exit[]

TABLES

t_outtab                            = pt_tab

*   EXCEPTIONS

*     PROGRAM_ERROR                     = 1

*     OTHERS                            = 2

.

ENDFORM.                    "csalv_set_fcat

*&---------------------------------------------------------------------*

*&      Form  user_command

*&---------------------------------------------------------------------*

*       text

*----------------------------------------------------------------------*

*      -->P_UCOMM      text

*      -->PS_SELFIELD  text

*----------------------------------------------------------------------*

FORM user_command USING r_ucomm LIKE sy-ucomm

rs_selfield TYPE slis_selfield.



CASE r_ucomm.

WHEN '&DATA_SAVE'.



WHEN ' ' .

WHEN OTHERS.

ENDCASE.



ENDFORM.                    "user_command

*&---------------------------------------------------------------------*

*&      Form  SET_PF_STATUS

*&---------------------------------------------------------------------*

*       text

*----------------------------------------------------------------------*

*      -->RT_EXTAB   text

*----------------------------------------------------------------------*

FORM set_pf_status USING rt_extab TYPE slis_t_extab..

*  SET PF-STATUS '100'.

ENDFORM.                    "SET_PF_STATUS

*&---------------------------------------------------------------------*

*&      Form  fm_button

*&---------------------------------------------------------------------*

*       text

*----------------------------------------------------------------------*

*      -->E_GRID     text

*----------------------------------------------------------------------*

FORM fm_button USING e_grid TYPE slis_data_caller_exit.



CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'

*   EXPORTING

*     IR_SALV_FULLSCREEN_ADAPTER       =

IMPORTING

*     ET_EXCLUDING                     =

*     E_REPID                          =

*     E_CALLBACK_PROGRAM               =

*     E_CALLBACK_ROUTINE               =

e_grid                           = ref_grid

*     ET_FIELDCAT_LVC                  =

*     ER_TRACE                         =

*     E_FLG_NO_HTML                    =

*     ES_LAYOUT_KKBLO                  =

*     ES_SEL_HIDE                      =

*     ET_EVENT_EXIT                    =

*     ER_FORM_TOL                      =

*     ER_FORM_EOL                      =

.



*   CALL METHOD ref_grid->check_changed_data.

* #置enter事件

CALL METHOD ref_grid->register_edit_event
EXPORTING
i_event_id = cl_gui_alv_grid=>mc_evt_enter
EXCEPTIONS
error      = 1
OTHERS     = 2.





CREATE OBJECT gt_event_receiver.

SET HANDLER   gt_event_receiver->handle_modify FOR ref_grid.

ENDFORM.                    "FM_BUTTON
*&---------------------------------------------------------------------*
*&      Form  TOP_OF_PAGE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM top_of_page.

DATA: ls_info TYPE slis_listheader,
l_start TYPE boolean,
l_row   TYPE i,
l_logo  TYPE bds_typeid.
*        i_logo  TYPE c.

DATA: lr_logo        TYPE REF TO cl_salv_form_layout_logo,
lr_content     TYPE REF TO cl_salv_form_element,
lr_rows        TYPE REF TO cl_salv_form_layout_grid,
lr_row         TYPE REF TO cl_salv_form_layout_flow,
lr_grid_status TYPE REF TO cl_salv_form_layout_grid.

DATA:
it_list_commentary  TYPE slis_t_listheader.

ls_info-typ = 'S'.

ls_info-info = 'Selection1'.

APPEND ls_info TO it_list_commentary.

ls_info-typ = 'S'.

GET PARAMETER ID 'USR' FIELD ls_info-info.
*  ls_info-info = 'Selectionssssssssssssssss2                     '.

APPEND ls_info TO it_list_commentary.


CREATE OBJECT lr_rows.

*  i_logo = 'ENJOYSAP_LOGO'.

*  if i_logo is supplied and i_logo is not initial.
*    create object lr_logo.
*
*    lr_logo->set_left_content( lr_rows ).
*
*    l_logo = i_logo.
*    lr_logo->set_right_logo( l_logo ).
*
*    lr_content = lr_logo.
*  else.
lr_content = lr_rows.
*  endif.

LOOP AT it_list_commentary INTO ls_info WHERE typ EQ 'H'.
lr_row = lr_rows->add_row( ).
lr_row->create_header_information( text = ls_info-info ).
ENDLOOP.

*  l_start = 'X'.
*  loop at it_list_commentary into ls_info where typ eq 'S'.
*    if l_start eq 'X'.
*      clear l_start.
*      if lr_rows->get_row_count( ) ne 0.
*        lr_row = lr_rows->add_row( ).
*      endif.
*      clear l_row.
*      lr_row = lr_rows->add_row( ).
*      lr_grid_status = lr_row->create_grid( ).
*    endif.
*    add 1 to l_row.
*    lr_grid_status->create_label(
*      row    = l_row
*      column = 1
*      text   = ls_info-key ).
*    lr_grid_status->create_text(
*      row    = l_row
*      column = 2
*      text   = ls_info-info ).
*  endloop.

l_start = 'X'.

DO 3 TIMES.
IF l_start EQ 'X'.
CLEAR l_start.
IF lr_rows->get_row_count( ) NE 0.
lr_row = lr_rows->add_row( ).
ENDIF.
CLEAR l_row.
lr_row = lr_rows->add_row( ).
lr_grid_status = lr_row->create_grid( ).
ENDIF.
ADD 1 TO l_row.
READ TABLE it_list_commentary INTO ls_info INDEX l_row.
lr_grid_status->create_label(
row    = l_row
column = 1
text   = 'Col1' ).   "ls_info-key
lr_grid_status->create_text(
row    = l_row
column = 2
text   = ls_info-info ).
*    lr_grid_status->create_label(
*      row    = l_row
*      column = 3
*      text   = 'Col2' ).
lr_grid_status->create_text(
row    = l_row
column = 7
text   = ls_info-info ).




ENDDO.


*  l_start = 'X'.
*  loop at it_list_commentary into ls_info where typ eq 'A'.
*    if l_start eq 'X'.
*      clear l_start.
*      if lr_rows->get_row_count( ) ne 0.
*        lr_row = lr_rows->add_row( ).
*      endif.
*    endif.
*    lr_row = lr_rows->add_row( ).
*    lr_row->create_action_information( text = ls_info-info ).
*  endloop.

DATA: l_is_html TYPE sap_bool.

IMPORT alv_form_html TO l_is_html
FROM MEMORY ID 'ALV_FORM_HTML'.

CASE l_is_html.
WHEN abap_true.
cl_salv_form_content=>set( lr_content ).
EXPORT it_list_commentary TO MEMORY ID 'DYNDOS_FOR_ALV_EXCEL'.

WHEN abap_false.
DATA: lr_abap TYPE REF TO cl_salv_form_abap.
CREATE OBJECT lr_abap
EXPORTING
r_content = lr_content.
*      lr_abap->set_direct_list_output( abap_false ).  "Y6DK065711+Y7AK086412
lr_abap->display( ).
DATA: l_last_printed_linno TYPE i.
lr_abap->do_list_output(
EXPORTING
reserve_lines      = 0
CHANGING
last_printed_linno = l_last_printed_linno ).
ENDCASE.



*  DATA:
*    lr_row         type ref to cl_salv_form_layout_flow,
*    ls_info type slis_listheader,
*    l_row   type i,
*    lr_content     type ref to cl_salv_form_element,
*    lr_rows        type ref to cl_salv_form_layout_grid,
*    lT_LISTHEADER  TYPE  SLIS_T_LISTHEADER,
*    lr_grid_status type ref to cl_salv_form_layout_grid,
*        l_start type boolean.
*
* create object lr_rows.
*
*  ls_info-typ = 'S'.
*
*  ls_info-info = 'Selection1'.
*
*  APPEND ls_info TO lT_LISTHEADER.
*
*  ls_info-typ = 'S'.
*
*  ls_info-info = 'Selection2'.
*
*  APPEND ls_info TO lT_LISTHEADER.
*
*  ls_info-typ = 'S'.
*
*  ls_info-info = 'Selection3'.
*
*  APPEND ls_info TO lT_LISTHEADER.
*
*CLEAR ls_info.
*
*LOOP AT lT_LISTHEADER INTO ls_info.
*
*  l_start = 'X'.
*
*    if l_start eq 'X'.
*      clear l_start.
*      if lr_rows->get_row_count( ) ne 0.
*        lr_row = lr_rows->add_row( ).
*      endif.
*      clear l_row.
*      lr_row = lr_rows->add_row( ).
*      lr_grid_status = lr_row->create_grid( ).
*    endif.
*    add 1 to l_row.
*    lr_grid_status->create_label(
*      row    = l_row
*      column = 1
*      text   = ls_info-key ).
*    lr_grid_status->create_text(
*      row    = l_row
*      column = 2
*      text   = ls_info-info ).
*
*ENDLOOP.
*
*  data: l_is_html type sap_bool.
*
*  import alv_form_html to l_is_html
*         from memory id 'ALV_FORM_HTML'.
*
*  case l_is_html.
*    when abap_true.
*      cl_salv_form_content=>set( lr_content ).
*      export lT_LISTHEADER to memory id 'DYNDOS_FOR_ALV_EXCEL'.
*
*    when abap_false.
*      data: lr_abap type ref to cl_salv_form_abap.
*      create object lr_abap
*        exporting
*          r_content = lr_content.
**      lr_abap->set_direct_list_output( abap_false ).  "Y6DK065711+Y7AK086412
*      lr_abap->display( ).
*      data: l_last_printed_linno type i.
*      lr_abap->do_list_output(
*               exporting
*                 reserve_lines      = 0
*               changing
*                 last_printed_linno = l_last_printed_linno ).
*  endcase.


*  DATA: lt_listheader TYPE slis_t_listheader,
*
*        ls_listheader LIKE LINE OF lt_listheader.
*
*  ls_listheader-typ = 'H'.
*
*  ls_listheader-info = 'Xin''s alv HEADER'.
*
*  APPEND ls_listheader TO lt_listheader.
*
*  ls_listheader-typ = 'S'.
*
*  ls_listheader-info = 'Selection'.
*
*  APPEND ls_listheader TO lt_listheader.
*
*  ls_listheader-typ = 'A'.
*
*  ls_listheader-info = 'Action'.
*
*  APPEND ls_listheader TO lt_listheader.
*
*
*
*  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
*
*    EXPORTING
*
**      i_logo             = 'ENJOYSAP_LOGO'
*
*      it_list_commentary = lt_listheader.

ENDFORM.                    "TOP_OF_PAGE
