REPORT ZEG_FI_PROCESS_00001120_UPDATEFT.
* 2.0
*
DATA: TIME1 TYPE P, TIME2 TYPE P, RUNTIME(30), DEBUG, ATRA.
DATA: RC LIKE SY-SUBRC , V_RC LIKE SY-SUBRC.
DATA: DESTI LIKE RFCDES-RFCDEST.
DATA: FIELDNAME LIKE SY-REPID.
DATA: G_UPPER TYPE C.         "Gross/Kleinschreibung
*
TABLES : EUFUNC.
DATA: BEGIN OF UNTERSCHIED,            " Unterschiede bei Testdur
PARAMETER(30),
ALT(200),
NEU(200),                      " laufen
END OF UNTERSCHIED.
*
DATA : D102N_EXPORTKEY LIKE FUNCTDIR.
*
DATA : BEGIN OF EXPORTKEY,
DATAID LIKE EUFUNC-NUMMER,
SEQID  LIKE EUFUNC-SEQID,
END OF EXPORTKEY.
DATA : BEGIN OF EXCEPTIONS OCCURS 10,
NAME(30),
END OF EXCEPTIONS.
DATA : VEXCEPTION(30).
DATA : OEXCEPTION(30).
DATA : NR2(250) TYPE C.
DATA : TABLEN TYPE I.
DATA : EX TYPE REF TO CX_ROOT.
DATA : DESCR_REF TYPE REF TO CL_ABAP_TYPEDESCR.
DATA : RESULTAT(30) TYPE C.
DATA : REST(30)     TYPE C.
*
DATA: %_II_BKDF TYPE BKDF.
DATA: %_II_BKDFSUB TYPE BKDF_SUBST.
DATA: %_OI_BKDFSUB TYPE BKDF_SUBST.
DATA: %_VI_BKDFSUB TYPE BKDF_SUBST.
DATA: BEGIN OF %_IT_BKPF OCCURS 1.
INCLUDE STRUCTURE BKPF.
DATA: END OF %_IT_BKPF.
*
DATA: BEGIN OF %_OT_BKPF OCCURS 1.
INCLUDE STRUCTURE BKPF.
DATA: END OF %_OT_BKPF.
*
DATA: BEGIN OF %_VT_BKPF OCCURS 1.
INCLUDE STRUCTURE BKPF.
DATA: END OF %_VT_BKPF.
*
DATA: BEGIN OF %_IT_BSEG OCCURS 1.
INCLUDE STRUCTURE BSEG.
DATA: END OF %_IT_BSEG.
*
DATA: BEGIN OF %_OT_BSEG OCCURS 1.
INCLUDE STRUCTURE BSEG.
DATA: END OF %_OT_BSEG.
*
DATA: BEGIN OF %_VT_BSEG OCCURS 1.
INCLUDE STRUCTURE BSEG.
DATA: END OF %_VT_BSEG.
*
DATA: BEGIN OF %_IT_BKPFSUB OCCURS 1.
INCLUDE STRUCTURE BKPF_SUBST.
DATA: END OF %_IT_BKPFSUB.
*
DATA: BEGIN OF %_OT_BKPFSUB OCCURS 1.
INCLUDE STRUCTURE BKPF_SUBST.
DATA: END OF %_OT_BKPFSUB.
*
DATA: BEGIN OF %_VT_BKPFSUB OCCURS 1.
INCLUDE STRUCTURE BKPF_SUBST.
DATA: END OF %_VT_BKPFSUB.
*
DATA: BEGIN OF %_IT_BSEGSUB OCCURS 1.
INCLUDE STRUCTURE BSEG_SUBST.
DATA: END OF %_IT_BSEGSUB.
*
DATA: BEGIN OF %_OT_BSEGSUB OCCURS 1.
INCLUDE STRUCTURE BSEG_SUBST.
DATA: END OF %_OT_BSEGSUB.
*
DATA: BEGIN OF %_VT_BSEGSUB OCCURS 1.
INCLUDE STRUCTURE BSEG_SUBST.
DATA: END OF %_VT_BSEGSUB.
*
DATA: BEGIN OF %_IT_BSEC OCCURS 1.
INCLUDE STRUCTURE BSEC.
DATA: END OF %_IT_BSEC.
*
DATA: BEGIN OF %_OT_BSEC OCCURS 1.
INCLUDE STRUCTURE BSEC.
DATA: END OF %_OT_BSEC.
*
DATA: BEGIN OF %_VT_BSEC OCCURS 1.
INCLUDE STRUCTURE BSEC.
DATA: END OF %_VT_BSEC.
*
FORM EXISTENCE_CHECK CHANGING VARIA.
VARIA = 1.
ENDFORM.
FORM FUNCTION_CALL.
CLEAR %_OI_BKDFSUB.
%_OI_BKDFSUB = %_II_BKDFSUB.
CLEAR %_OT_BKPF.
REFRESH %_OT_BKPF.
LOOP AT %_IT_BKPF.
%_OT_BKPF = %_IT_BKPF.
APPEND %_OT_BKPF.
ENDLOOP.
CLEAR %_OT_BSEG.
REFRESH %_OT_BSEG.
LOOP AT %_IT_BSEG.
%_OT_BSEG = %_IT_BSEG.
APPEND %_OT_BSEG.
ENDLOOP.
CLEAR %_OT_BKPFSUB.
REFRESH %_OT_BKPFSUB.
LOOP AT %_IT_BKPFSUB.
%_OT_BKPFSUB = %_IT_BKPFSUB.
APPEND %_OT_BKPFSUB.
ENDLOOP.
CLEAR %_OT_BSEGSUB.
REFRESH %_OT_BSEGSUB.
LOOP AT %_IT_BSEGSUB.
%_OT_BSEGSUB = %_IT_BSEGSUB.
APPEND %_OT_BSEGSUB.
ENDLOOP.
CLEAR %_OT_BSEC.
REFRESH %_OT_BSEC.
LOOP AT %_IT_BSEC.
%_OT_BSEC = %_IT_BSEC.
APPEND %_OT_BSEC.
ENDLOOP.
*  TRANSAKTION = 'Repo', PROGRAM = REPORT
IF ATRA = '1'.
SET RUN TIME ANALYZER ON %_INTERNAL.
ENDIF.
IF DESTI IS INITIAL.
IF DEBUG = '1'. BREAK-POINT AT NEXT APPLICATION STATEMENT.
ENDIF.
DEBUG = SPACE.
GET RUN TIME FIELD TIME1.
CALL FUNCTION 'ZEG_FI_PROCESS_00001120_UPDATE'
EXPORTING
I_BKDF = %_II_BKDF
TABLES
T_BKPF = %_OT_BKPF
T_BSEG = %_OT_BSEG
T_BKPFSUB = %_OT_BKPFSUB
T_BSEGSUB = %_OT_BSEGSUB
T_BSEC = %_OT_BSEC
CHANGING
I_BKDFSUB = %_OI_BKDFSUB.
IF ATRA = '1'.
SET RUN TIME ANALYZER OFF %_INTERNAL.
ENDIF.
ELSE.
GET RUN TIME FIELD TIME1.
*  TRANSAKTION = 'Repo', PROGRAM = REPORT
IF ATRA = '1'.
SET RUN TIME ANALYZER ON %_INTERNAL.
ENDIF.
IF DESTI = 'SPACE'.
DESTI = ' '.
ENDIF.
CALL FUNCTION 'ZEG_FI_PROCESS_00001120_UPDATE' DESTINATION DESTI
EXPORTING
I_BKDF = %_II_BKDF
TABLES
T_BKPF = %_OT_BKPF
T_BSEG = %_OT_BSEG
T_BKPFSUB = %_OT_BKPFSUB
T_BSEGSUB = %_OT_BSEGSUB
T_BSEC = %_OT_BSEC
CHANGING
I_BKDFSUB = %_OI_BKDFSUB.
IF ATRA = '1'.
SET RUN TIME ANALYZER OFF %_INTERNAL.
ENDIF.
ENDIF.
GET RUN TIME FIELD TIME2.
RC = SY-SUBRC.
CLEAR EXCEPTIONS.
READ TABLE EXCEPTIONS INDEX RC.
IF SY-SUBRC = 0.
OEXCEPTION = EXCEPTIONS-NAME.
ELSE.
OEXCEPTION = RESULTAT.
ENDIF.
TIME1 = TIME2 - TIME1.
WRITE TIME1 TO RUNTIME.
CONDENSE RUNTIME.
ENDFORM.

FORM CLEAR_DATA.
CLEAR %_II_BKDF.
CLEAR %_II_BKDFSUB.
CLEAR %_OI_BKDFSUB.
CLEAR %_VI_BKDFSUB.
ENDFORM.
FORM CLEAR_TABLE.
CLEAR %_IT_BKPF.
REFRESH %_IT_BKPF.
CLEAR %_IT_BSEG.
REFRESH %_IT_BSEG.
CLEAR %_IT_BKPFSUB.
REFRESH %_IT_BKPFSUB.
CLEAR %_IT_BSEGSUB.
REFRESH %_IT_BSEGSUB.
CLEAR %_IT_BSEC.
REFRESH %_IT_BSEC.
ENDFORM.
FORM DELETE_LINE USING KEY INDEX.
CASE KEY.
WHEN 'T_BKPF'.
READ TABLE %_IT_BKPF INDEX INDEX.
IF SY-SUBRC = 0.
DELETE %_IT_BKPF INDEX INDEX.
ENDIF.
WHEN 'T_BSEG'.
READ TABLE %_IT_BSEG INDEX INDEX.
IF SY-SUBRC = 0.
DELETE %_IT_BSEG INDEX INDEX.
ENDIF.
WHEN 'T_BKPFSUB'.
READ TABLE %_IT_BKPFSUB INDEX INDEX.
IF SY-SUBRC = 0.
DELETE %_IT_BKPFSUB INDEX INDEX.
ENDIF.
WHEN 'T_BSEGSUB'.
READ TABLE %_IT_BSEGSUB INDEX INDEX.
IF SY-SUBRC = 0.
DELETE %_IT_BSEGSUB INDEX INDEX.
ENDIF.
WHEN 'T_BSEC'.
READ TABLE %_IT_BSEC INDEX INDEX.
IF SY-SUBRC = 0.
DELETE %_IT_BSEC INDEX INDEX.
ENDIF.
ENDCASE.
ENDFORM.
FORM INIT_EXCEPTIONS USING NAME.
CLEAR EXCEPTIONS.
MOVE NAME TO EXCEPTIONS-NAME.
APPEND EXCEPTIONS.
ENDFORM.
FORM PARAM_ACCESS_TYPES USING KEY DEST P_MODE P_UPPER.
DATA : INTKEY(31).
P_UPPER = G_UPPER.
INTKEY = DEST.
INTKEY+1 = KEY.
CONDENSE INTKEY.
CASE INTKEY.
WHEN 'II_BKDF'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'I_BKDF'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_II_BKDF.
WHEN 'II_BKDFSUB'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'I_BKDFSUB'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_II_BKDFSUB.
WHEN 'OI_BKDFSUB'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'I_BKDFSUB'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_OI_BKDFSUB.
WHEN 'VI_BKDFSUB'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'I_BKDFSUB'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_VI_BKDFSUB.
WHEN 'IT_BKPF'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BKPF'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_IT_BKPF[].
WHEN 'OT_BKPF'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BKPF'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_OT_BKPF[].
WHEN 'VT_BKPF'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BKPF'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_VT_BKPF[].
WHEN 'IT_BSEG'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BSEG'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_IT_BSEG[].
WHEN 'OT_BSEG'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BSEG'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_OT_BSEG[].
WHEN 'VT_BSEG'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BSEG'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_VT_BSEG[].
WHEN 'IT_BKPFSUB'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BKPFSUB'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_IT_BKPFSUB[].
WHEN 'OT_BKPFSUB'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BKPFSUB'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_OT_BKPFSUB[].
WHEN 'VT_BKPFSUB'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BKPFSUB'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_VT_BKPFSUB[].
WHEN 'IT_BSEGSUB'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BSEGSUB'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_IT_BSEGSUB[].
WHEN 'OT_BSEGSUB'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BSEGSUB'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_OT_BSEGSUB[].
WHEN 'VT_BSEGSUB'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BSEGSUB'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_VT_BSEGSUB[].
WHEN 'IT_BSEC'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BSEC'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_IT_BSEC[].
WHEN 'OT_BSEC'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BSEC'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_OT_BSEC[].
WHEN 'VT_BSEC'.
CALL FUNCTION 'RS_COMPLEX_OBJECT_EDIT'
EXPORTING
OBJECT_NAME = 'T_BSEC'
MODE = P_MODE
INSERT_TAB = 'X'
UPPER_CASE = P_UPPER
CHANGING
OBJECT = %_VT_BSEC[].
ENDCASE.
ENDFORM.
FORM PARAMETER_SET USING NAME DIRECTION VALUE.
DATA: L_NAME(31).
CONCATENATE DIRECTION NAME INTO L_NAME.
CASE L_NAME.
WHEN 'II_BKDF'.
PERFORM CB_CALLBACK_VALUE_SET(SAPLSEUJ)
USING VALUE
CHANGING %_II_BKDF.
WHEN 'II_BKDFSUB'.
PERFORM CB_CALLBACK_VALUE_SET(SAPLSEUJ)
USING VALUE
CHANGING %_II_BKDFSUB.
ENDCASE.
ENDFORM.
FORM PARAMETER_GET USING NAME DIRECTION
CHANGING   VALUE
OLD_VALUE.
DATA: L_NAME(31).
CONCATENATE DIRECTION NAME INTO L_NAME.
CASE L_NAME.
WHEN 'II_BKDF'.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_II_BKDF
CHANGING VALUE.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_II_BKDF
CHANGING OLD_VALUE.
WHEN 'OI_BKDFSUB'.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_OI_BKDFSUB
CHANGING VALUE.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_II_BKDFSUB
CHANGING OLD_VALUE.
WHEN 'OT_BKPF'.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_OT_BKPF[]
CHANGING VALUE.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_IT_BKPF[]
CHANGING OLD_VALUE.
WHEN 'OT_BSEG'.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_OT_BSEG[]
CHANGING VALUE.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_IT_BSEG[]
CHANGING OLD_VALUE.
WHEN 'OT_BKPFSUB'.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_OT_BKPFSUB[]
CHANGING VALUE.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_IT_BKPFSUB[]
CHANGING OLD_VALUE.
WHEN 'OT_BSEGSUB'.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_OT_BSEGSUB[]
CHANGING VALUE.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_IT_BSEGSUB[]
CHANGING OLD_VALUE.
WHEN 'OT_BSEC'.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_OT_BSEC[]
CHANGING VALUE.
PERFORM CB_CALLBACK_VALUE_GET(SAPLSEUJ)
USING %_IT_BSEC[]
CHANGING OLD_VALUE.
ENDCASE.
ENDFORM.
FORM PARAMETER_TABLE_SET USING NAME VALUE.
CASE NAME.
WHEN 'T_BKPF'.
%_OT_BKPF[] = VALUE.
WHEN 'T_BSEG'.
%_OT_BSEG[] = VALUE.
WHEN 'T_BKPFSUB'.
%_OT_BKPFSUB[] = VALUE.
WHEN 'T_BSEGSUB'.
%_OT_BSEGSUB[] = VALUE.
WHEN 'T_BSEC'.
%_OT_BSEC[] = VALUE.
ENDCASE.
ENDFORM.
FORM PARAMETER_TABLE_GET USING NAME
CHANGING   VALUE.
CASE NAME.
WHEN 'T_BKPF'.
VALUE = %_OT_BKPF[].
WHEN 'T_BSEG'.
VALUE = %_OT_BSEG[].
WHEN 'T_BKPFSUB'.
VALUE = %_OT_BKPFSUB[].
WHEN 'T_BSEGSUB'.
VALUE = %_OT_BSEGSUB[].
WHEN 'T_BSEC'.
VALUE = %_OT_BSEC[].
ENDCASE.
ENDFORM.
FORM PARAMETER_DESCRIBE USING CBPROG
NAME.
CASE NAME.
WHEN 'I_BKDF'.
PERFORM CB_CALLBACK_DESCRIBE IN PROGRAM (CBPROG)
USING %_II_BKDF
NAME.
WHEN 'I_BKDFSUB'.
PERFORM CB_CALLBACK_DESCRIBE IN PROGRAM (CBPROG)
USING %_II_BKDFSUB
NAME.
WHEN 'T_BKPF'.
PERFORM CB_CALLBACK_DESCRIBE IN PROGRAM (CBPROG)
USING %_OT_BKPF
NAME.
WHEN 'T_BSEG'.
PERFORM CB_CALLBACK_DESCRIBE IN PROGRAM (CBPROG)
USING %_OT_BSEG
NAME.
WHEN 'T_BKPFSUB'.
PERFORM CB_CALLBACK_DESCRIBE IN PROGRAM (CBPROG)
USING %_OT_BKPFSUB
NAME.
WHEN 'T_BSEGSUB'.
PERFORM CB_CALLBACK_DESCRIBE IN PROGRAM (CBPROG)
USING %_OT_BSEGSUB
NAME.
WHEN 'T_BSEC'.
PERFORM CB_CALLBACK_DESCRIBE IN PROGRAM (CBPROG)
USING %_OT_BSEC
NAME.
ENDCASE.
ENDFORM.
FORM PARAMETER_CONTAINER TABLES LCONT STRUCTURE SWCONT
USING NAME
DIRECTION .
CASE NAME.
WHEN 'II_BKDF'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_ELEMENT_SET'
EXPORTING
ELEMENT = NAME
FIELD   = %_II_BKDF
TABLES
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_ELEMENT_GET'
EXPORTING
ELEMENT = NAME
IMPORTING
FIELD   = %_II_BKDF
TABLES
CONTAINER = LCONT.
ENDIF.
WHEN 'II_BKDFSUB'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_ELEMENT_SET'
EXPORTING
ELEMENT = NAME
FIELD   = %_II_BKDFSUB
TABLES
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_ELEMENT_GET'
EXPORTING
ELEMENT = NAME
IMPORTING
FIELD   = %_II_BKDFSUB
TABLES
CONTAINER = LCONT.
ENDIF.
WHEN 'OI_BKDFSUB'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_ELEMENT_SET'
EXPORTING
ELEMENT = NAME
FIELD   = %_OI_BKDFSUB
TABLES
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_ELEMENT_GET'
EXPORTING
ELEMENT = NAME
IMPORTING
FIELD   = %_OI_BKDFSUB
TABLES
CONTAINER = LCONT.
ENDIF.
ENDCASE.
ENDFORM.
FORM TABLES_CONTAINER TABLES LCONT STRUCTURE SWCONT
USING NAME
DIRECTION.
CASE NAME.
WHEN 'IT_BKPF'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_TABLE_SET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_IT_BKPF
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_TABLE_GET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_IT_BKPF
CONTAINER = LCONT.
ENDIF.
WHEN 'IT_BSEG'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_TABLE_SET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_IT_BSEG
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_TABLE_GET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_IT_BSEG
CONTAINER = LCONT.
ENDIF.
WHEN 'IT_BKPFSUB'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_TABLE_SET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_IT_BKPFSUB
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_TABLE_GET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_IT_BKPFSUB
CONTAINER = LCONT.
ENDIF.
WHEN 'IT_BSEGSUB'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_TABLE_SET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_IT_BSEGSUB
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_TABLE_GET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_IT_BSEGSUB
CONTAINER = LCONT.
ENDIF.
WHEN 'IT_BSEC'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_TABLE_SET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_IT_BSEC
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_TABLE_GET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_IT_BSEC
CONTAINER = LCONT.
ENDIF.
WHEN 'OT_BKPF'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_TABLE_SET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_OT_BKPF
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_TABLE_GET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_OT_BKPF
CONTAINER = LCONT.
ENDIF.
WHEN 'OT_BSEG'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_TABLE_SET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_OT_BSEG
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_TABLE_GET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_OT_BSEG
CONTAINER = LCONT.
ENDIF.
WHEN 'OT_BKPFSUB'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_TABLE_SET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_OT_BKPFSUB
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_TABLE_GET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_OT_BKPFSUB
CONTAINER = LCONT.
ENDIF.
WHEN 'OT_BSEGSUB'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_TABLE_SET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_OT_BSEGSUB
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_TABLE_GET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_OT_BSEGSUB
CONTAINER = LCONT.
ENDIF.
WHEN 'OT_BSEC'.
IF DIRECTION = 'O'.
CALL FUNCTION 'SWC_TABLE_SET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_OT_BSEC
CONTAINER = LCONT.
ELSE.
CALL FUNCTION 'SWC_TABLE_GET'
EXPORTING
ELEMENT = NAME
TABLES
TABLE   = %_OT_BSEC
CONTAINER = LCONT.
ENDIF.
ENDCASE.
ENDFORM.
FORM SET_VARIABLES USING KEY VALUE.
CASE KEY.
WHEN '%%DEBUGON'.
DEBUG = 1.
WHEN '%%DEBUGOFF'.
DEBUG = 0.
WHEN '%%DESTI'.
DESTI = VALUE.
WHEN '%%ATRAON'.
ATRA = 1.
WHEN '%%ATRAOFF'.
ATRA = 0.
WHEN '%%UPPER'.
G_UPPER = VALUE.
ENDCASE.
ENDFORM.
FORM GET_VARIABLES USING    KEY
CHANGING VALUE.
CASE KEY.
WHEN '%%DEBUG'.
VALUE = DEBUG.
WHEN '%%DESTI'.
VALUE = DESTI.
WHEN '%%ATRA'.
VALUE = ATRA.
WHEN '%%SUBRC'.
VALUE = RC.
WHEN 'V%%SUBRC'.
VALUE = V_RC.
WHEN '%%TIME'.
VALUE = RUNTIME.
WHEN '%%UPPER'.
VALUE = G_UPPER.
WHEN '%%EXCCL'.
VALUE = RESULTAT.
ENDCASE.
ENDFORM.
FORM GET_EXC_CL CHANGING P_EXC_CL.
IF EX IS BOUND.
P_EXC_CL = EX.
ELSE.
CLEAR P_EXC_CL.
ENDIF.
ENDFORM.
FORM PARAMETER_READ_INPUT USING NAME
KEY
CHANGING VALUE.
CASE NAME.
WHEN 'I_BKDF'.
CATCH SYSTEM-EXCEPTIONS CONNE_IMPORT_WRONG_COMP_TYPE = 1
CONNE_IMPORT_WRONG_OBJECT_TYPE = 2
CONNE_IMPORT_WRONG_COMP_LENG = 3
CONNE_IMPORT_WRONG_FIELD_LENG = 6
CONNE_IMPORT_WRONG_STRUCTURE  = 7
CONNE_IMPORT_WRONG_FIELD_TYPE = 4
IMPORT_WRONG_END_POS = 8
IMPORT_ALIGNMENT_MISMATCH = 5.
IMPORT %_II_BKDF
FROM DATABASE EUFUNC(FL) ID KEY.
ENDCATCH.
VALUE = %_II_BKDF.
WHEN 'I_BKDFSUB'.
CATCH SYSTEM-EXCEPTIONS CONNE_IMPORT_WRONG_COMP_TYPE = 1
CONNE_IMPORT_WRONG_OBJECT_TYPE = 2
CONNE_IMPORT_WRONG_COMP_LENG = 3
CONNE_IMPORT_WRONG_FIELD_LENG = 6
CONNE_IMPORT_WRONG_STRUCTURE  = 7
CONNE_IMPORT_WRONG_FIELD_TYPE = 4
IMPORT_WRONG_END_POS = 8
IMPORT_ALIGNMENT_MISMATCH = 5.
IMPORT %_II_BKDFSUB
FROM DATABASE EUFUNC(FL) ID KEY.
ENDCATCH.
VALUE = %_II_BKDFSUB.
ENDCASE.
ENDFORM.
FORM PARAMETER_READ_OUTPUT USING NAME
KEY
CHANGING VALUE.
CASE NAME.
WHEN 'I_BKDF'.
CATCH SYSTEM-EXCEPTIONS CONNE_IMPORT_WRONG_COMP_TYPE = 1
CONNE_IMPORT_WRONG_OBJECT_TYPE = 2
CONNE_IMPORT_WRONG_COMP_LENG = 3
CONNE_IMPORT_WRONG_FIELD_TYPE = 4
CONNE_IMPORT_WRONG_FIELD_LENG = 6
CONNE_IMPORT_WRONG_STRUCTURE  = 7
IMPORT_WRONG_END_POS = 8
IMPORT_ALIGNMENT_MISMATCH = 5.
IMPORT %_II_BKDF
FROM DATABASE EUFUNC(FL) ID KEY.
ENDCATCH.
WHEN 'I_BKDFSUB'.
CATCH SYSTEM-EXCEPTIONS CONNE_IMPORT_WRONG_COMP_TYPE = 1
CONNE_IMPORT_WRONG_OBJECT_TYPE = 2
CONNE_IMPORT_WRONG_COMP_LENG = 3
CONNE_IMPORT_WRONG_FIELD_TYPE = 4
CONNE_IMPORT_WRONG_FIELD_LENG = 6
CONNE_IMPORT_WRONG_STRUCTURE  = 7
IMPORT_WRONG_END_POS = 8
IMPORT_ALIGNMENT_MISMATCH = 5.
IMPORT %_VI_BKDFSUB
FROM DATABASE EUFUNC(FL) ID KEY.
ENDCATCH.
ENDCASE.
ENDFORM.
FORM PARAMETER_COMPARE USING NAME
CHANGING VALUE.
CASE NAME.
WHEN 'I_BKDFSUB'.
IF %_OI_BKDFSUB <> %_VI_BKDFSUB.
VALUE = 'X'.
ELSE.
CLEAR VALUE.
ENDIF.
WHEN 'T_BKPF'.
IF %_OT_BKPF[] <> %_VT_BKPF[].
VALUE = 'X'.
ELSE.
CLEAR VALUE.
ENDIF.
WHEN 'T_BSEG'.
IF %_OT_BSEG[] <> %_VT_BSEG[].
VALUE = 'X'.
ELSE.
CLEAR VALUE.
ENDIF.
WHEN 'T_BKPFSUB'.
IF %_OT_BKPFSUB[] <> %_VT_BKPFSUB[].
VALUE = 'X'.
ELSE.
CLEAR VALUE.
ENDIF.
WHEN 'T_BSEGSUB'.
IF %_OT_BSEGSUB[] <> %_VT_BSEGSUB[].
VALUE = 'X'.
ELSE.
CLEAR VALUE.
ENDIF.
WHEN 'T_BSEC'.
IF %_OT_BSEC[] <> %_VT_BSEC[].
VALUE = 'X'.
ELSE.
CLEAR VALUE.
ENDIF.
ENDCASE.
ENDFORM.
FORM EXPORT_IMPORT_MEMORY USING SEL KEY STRUCTURE EXPORTKEY.
CASE SEL.
WHEN 'II'.
CATCH SYSTEM-EXCEPTIONS CONNE_IMPORT_WRONG_COMP_TYPE = 1
CONNE_IMPORT_WRONG_OBJECT_TYPE = 2
CONNE_IMPORT_WRONG_COMP_LENG = 3
CONNE_IMPORT_WRONG_FIELD_LENG = 6
CONNE_IMPORT_WRONG_STRUCTURE  = 7
CONNE_IMPORT_WRONG_FIELD_TYPE = 4
IMPORT_WRONG_END_POS = 8
IMPORT_ALIGNMENT_MISMATCH = 5.
IMPORT
%_II_BKDF
%_II_BKDFSUB
%_IT_BKPF
%_IT_BSEG
%_IT_BKPFSUB
%_IT_BSEGSUB
%_IT_BSEC
G_UPPER
FROM MEMORY ID KEY.
ENDCATCH.
WHEN 'IO'.
V_RC = RC.
%_VI_BKDFSUB = %_OI_BKDFSUB.
CLEAR %_VT_BKPF.
REFRESH %_VT_BKPF.
LOOP AT %_OT_BKPF.
%_VT_BKPF = %_OT_BKPF.
APPEND %_VT_BKPF.
ENDLOOP.
CLEAR %_VT_BSEG.
REFRESH %_VT_BSEG.
LOOP AT %_OT_BSEG.
%_VT_BSEG = %_OT_BSEG.
APPEND %_VT_BSEG.
ENDLOOP.
CLEAR %_VT_BKPFSUB.
REFRESH %_VT_BKPFSUB.
LOOP AT %_OT_BKPFSUB.
%_VT_BKPFSUB = %_OT_BKPFSUB.
APPEND %_VT_BKPFSUB.
ENDLOOP.
CLEAR %_VT_BSEGSUB.
REFRESH %_VT_BSEGSUB.
LOOP AT %_OT_BSEGSUB.
%_VT_BSEGSUB = %_OT_BSEGSUB.
APPEND %_VT_BSEGSUB.
ENDLOOP.
CLEAR %_VT_BSEC.
REFRESH %_VT_BSEC.
LOOP AT %_OT_BSEC.
%_VT_BSEC = %_OT_BSEC.
APPEND %_VT_BSEC.
ENDLOOP.
VEXCEPTION = OEXCEPTION.
EXPORT
%_II_BKDF
%_II_BKDFSUB
%_IT_BKPF
%_IT_BSEG
%_IT_BKPFSUB
%_IT_BSEGSUB
%_IT_BSEC
%_OI_BKDFSUB
%_VI_BKDFSUB
%_VT_BKPF
%_VT_BSEG
%_VT_BKPFSUB
%_VT_BSEGSUB
%_VT_BSEC
TIME1
V_RC
VEXCEPTION
G_UPPER
TO MEMORY ID KEY.
WHEN 'VI'.
CATCH SYSTEM-EXCEPTIONS CONNE_IMPORT_WRONG_COMP_TYPE = 1
CONNE_IMPORT_WRONG_OBJECT_TYPE = 2
CONNE_IMPORT_WRONG_COMP_LENG = 3
CONNE_IMPORT_WRONG_FIELD_LENG = 6
CONNE_IMPORT_WRONG_STRUCTURE  = 7
CONNE_IMPORT_WRONG_FIELD_TYPE = 4
IMPORT_WRONG_END_POS = 8
IMPORT_ALIGNMENT_MISMATCH = 5.
IMPORT
%_OI_BKDFSUB
%_VI_BKDFSUB
%_VT_BKPF
%_VT_BSEG
%_VT_BKPFSUB
%_VT_BSEGSUB
%_VT_BSEC
TIME1
V_RC
VEXCEPTION
G_UPPER
FROM MEMORY ID KEY.
ENDCATCH.
WHEN 'VO'.
V_RC = RC.
%_VI_BKDFSUB = %_OI_BKDFSUB.
CLEAR %_VT_BKPF.
REFRESH %_VT_BKPF.
LOOP AT %_OT_BKPF.
%_VT_BKPF = %_OT_BKPF.
APPEND %_VT_BKPF.
ENDLOOP.
CLEAR %_VT_BSEG.
REFRESH %_VT_BSEG.
LOOP AT %_OT_BSEG.
%_VT_BSEG = %_OT_BSEG.
APPEND %_VT_BSEG.
ENDLOOP.
CLEAR %_VT_BKPFSUB.
REFRESH %_VT_BKPFSUB.
LOOP AT %_OT_BKPFSUB.
%_VT_BKPFSUB = %_OT_BKPFSUB.
APPEND %_VT_BKPFSUB.
ENDLOOP.
CLEAR %_VT_BSEGSUB.
REFRESH %_VT_BSEGSUB.
LOOP AT %_OT_BSEGSUB.
%_VT_BSEGSUB = %_OT_BSEGSUB.
APPEND %_VT_BSEGSUB.
ENDLOOP.
CLEAR %_VT_BSEC.
REFRESH %_VT_BSEC.
LOOP AT %_OT_BSEC.
%_VT_BSEC = %_OT_BSEC.
APPEND %_VT_BSEC.
ENDLOOP.
VEXCEPTION = OEXCEPTION.
EXPORT
%_OI_BKDFSUB
%_VI_BKDFSUB
%_VT_BKPF
%_VT_BSEG
%_VT_BKPFSUB
%_VT_BSEGSUB
%_VT_BSEC
TIME1
V_RC
VEXCEPTION
G_UPPER
TO MEMORY ID KEY.
WHEN 'IV'.
CATCH SYSTEM-EXCEPTIONS CONNE_IMPORT_WRONG_COMP_TYPE = 1
CONNE_IMPORT_WRONG_OBJECT_TYPE = 2
CONNE_IMPORT_WRONG_COMP_LENG = 3
CONNE_IMPORT_WRONG_FIELD_LENG = 6
CONNE_IMPORT_WRONG_STRUCTURE  = 7
CONNE_IMPORT_WRONG_FIELD_TYPE = 4
IMPORT_WRONG_END_POS = 8
IMPORT_ALIGNMENT_MISMATCH = 5.
IMPORT
%_OI_BKDFSUB
%_VI_BKDFSUB
%_VT_BKPF
%_VT_BSEG
%_VT_BKPFSUB
%_VT_BSEGSUB
%_VT_BSEC
TIME1
V_RC
VEXCEPTION
G_UPPER
FROM MEMORY ID KEY.
ENDCATCH.
RC = V_RC.
%_OI_BKDFSUB = %_VI_BKDFSUB.
CLEAR %_OT_BKPF.
REFRESH %_OT_BKPF.
LOOP AT %_VT_BKPF.
%_OT_BKPF = %_VT_BKPF.
APPEND %_OT_BKPF.
ENDLOOP.
CLEAR %_OT_BSEG.
REFRESH %_OT_BSEG.
LOOP AT %_VT_BSEG.
%_OT_BSEG = %_VT_BSEG.
APPEND %_OT_BSEG.
ENDLOOP.
CLEAR %_OT_BKPFSUB.
REFRESH %_OT_BKPFSUB.
LOOP AT %_VT_BKPFSUB.
%_OT_BKPFSUB = %_VT_BKPFSUB.
APPEND %_OT_BKPFSUB.
ENDLOOP.
CLEAR %_OT_BSEGSUB.
REFRESH %_OT_BSEGSUB.
LOOP AT %_VT_BSEGSUB.
%_OT_BSEGSUB = %_VT_BSEGSUB.
APPEND %_OT_BSEGSUB.
ENDLOOP.
CLEAR %_OT_BSEC.
REFRESH %_OT_BSEC.
LOOP AT %_VT_BSEC.
%_OT_BSEC = %_VT_BSEC.
APPEND %_OT_BSEC.
ENDLOOP.
ENDCASE.
ENDFORM.
FORM EXPORT_IMPORT USING SEL KEY STRUCTURE D102N_EXPORTKEY.
CASE SEL.
WHEN 'II'.
CATCH SYSTEM-EXCEPTIONS CONNE_IMPORT_WRONG_COMP_TYPE = 1
CONNE_IMPORT_WRONG_OBJECT_TYPE = 2
CONNE_IMPORT_WRONG_COMP_LENG = 3
CONNE_IMPORT_WRONG_FIELD_LENG = 6
CONNE_IMPORT_WRONG_STRUCTURE  = 7
CONNE_IMPORT_WRONG_FIELD_TYPE = 4
IMPORT_WRONG_END_POS = 8
IMPORT_ALIGNMENT_MISMATCH = 5.
IMPORT
%_II_BKDF
%_II_BKDFSUB
%_IT_BKPF
%_IT_BSEG
%_IT_BKPFSUB
%_IT_BSEGSUB
%_IT_BSEC
G_UPPER
FROM DATABASE EUFUNC(FL) ID KEY ACCEPTING PADDING
IGNORING CONVERSION ERRORS.
ENDCATCH.
WHEN 'IO'.
V_RC = RC.
%_VI_BKDFSUB = %_OI_BKDFSUB.
CLEAR %_VT_BKPF.
REFRESH %_VT_BKPF.
LOOP AT %_OT_BKPF.
%_VT_BKPF = %_OT_BKPF.
APPEND %_VT_BKPF.
ENDLOOP.
CLEAR %_VT_BSEG.
REFRESH %_VT_BSEG.
LOOP AT %_OT_BSEG.
%_VT_BSEG = %_OT_BSEG.
APPEND %_VT_BSEG.
ENDLOOP.
CLEAR %_VT_BKPFSUB.
REFRESH %_VT_BKPFSUB.
LOOP AT %_OT_BKPFSUB.
%_VT_BKPFSUB = %_OT_BKPFSUB.
APPEND %_VT_BKPFSUB.
ENDLOOP.
CLEAR %_VT_BSEGSUB.
REFRESH %_VT_BSEGSUB.
LOOP AT %_OT_BSEGSUB.
%_VT_BSEGSUB = %_OT_BSEGSUB.
APPEND %_VT_BSEGSUB.
ENDLOOP.
CLEAR %_VT_BSEC.
REFRESH %_VT_BSEC.
LOOP AT %_OT_BSEC.
%_VT_BSEC = %_OT_BSEC.
APPEND %_VT_BSEC.
ENDLOOP.
VEXCEPTION = OEXCEPTION.
EXPORT
%_II_BKDF
%_II_BKDFSUB
%_IT_BKPF
%_IT_BSEG
%_IT_BKPFSUB
%_IT_BSEGSUB
%_IT_BSEC
%_OI_BKDFSUB
%_VI_BKDFSUB
%_VT_BKPF
%_VT_BSEG
%_VT_BKPFSUB
%_VT_BSEGSUB
%_VT_BSEC
TIME1
V_RC
VEXCEPTION
G_UPPER
TO DATABASE EUFUNC(FL) ID KEY.
WHEN 'VI'.
CATCH SYSTEM-EXCEPTIONS CONNE_IMPORT_WRONG_COMP_TYPE = 1
CONNE_IMPORT_WRONG_OBJECT_TYPE = 2
CONNE_IMPORT_WRONG_COMP_LENG = 3
CONNE_IMPORT_WRONG_FIELD_LENG = 6
CONNE_IMPORT_WRONG_STRUCTURE  = 7
CONNE_IMPORT_WRONG_FIELD_TYPE = 4
IMPORT_WRONG_END_POS = 8
IMPORT_ALIGNMENT_MISMATCH = 5.
IMPORT
%_OI_BKDFSUB
%_VI_BKDFSUB
%_VT_BKPF
%_VT_BSEG
%_VT_BKPFSUB
%_VT_BSEGSUB
%_VT_BSEC
TIME1
V_RC
VEXCEPTION
G_UPPER
FROM DATABASE EUFUNC(FL) ID KEY ACCEPTING PADDING
IGNORING CONVERSION ERRORS.
ENDCATCH.
WHEN 'VO'.
V_RC = RC.
%_VI_BKDFSUB = %_OI_BKDFSUB.
CLEAR %_VT_BKPF.
REFRESH %_VT_BKPF.
LOOP AT %_OT_BKPF.
%_VT_BKPF = %_OT_BKPF.
APPEND %_VT_BKPF.
ENDLOOP.
CLEAR %_VT_BSEG.
REFRESH %_VT_BSEG.
LOOP AT %_OT_BSEG.
%_VT_BSEG = %_OT_BSEG.
APPEND %_VT_BSEG.
ENDLOOP.
CLEAR %_VT_BKPFSUB.
REFRESH %_VT_BKPFSUB.
LOOP AT %_OT_BKPFSUB.
%_VT_BKPFSUB = %_OT_BKPFSUB.
APPEND %_VT_BKPFSUB.
ENDLOOP.
CLEAR %_VT_BSEGSUB.
REFRESH %_VT_BSEGSUB.
LOOP AT %_OT_BSEGSUB.
%_VT_BSEGSUB = %_OT_BSEGSUB.
APPEND %_VT_BSEGSUB.
ENDLOOP.
CLEAR %_VT_BSEC.
REFRESH %_VT_BSEC.
LOOP AT %_OT_BSEC.
%_VT_BSEC = %_OT_BSEC.
APPEND %_VT_BSEC.
ENDLOOP.
VEXCEPTION = OEXCEPTION.
EXPORT
%_OI_BKDFSUB
%_VI_BKDFSUB
%_VT_BKPF
%_VT_BSEG
%_VT_BKPFSUB
%_VT_BSEGSUB
%_VT_BSEC
TIME1
V_RC
VEXCEPTION
G_UPPER
TO DATABASE EUFUNC(FL) ID KEY.
WHEN 'IV'.
CATCH SYSTEM-EXCEPTIONS CONNE_IMPORT_WRONG_COMP_TYPE = 1
CONNE_IMPORT_WRONG_OBJECT_TYPE = 2
CONNE_IMPORT_WRONG_COMP_LENG = 3
CONNE_IMPORT_WRONG_FIELD_LENG = 6
CONNE_IMPORT_WRONG_STRUCTURE  = 7
CONNE_IMPORT_WRONG_FIELD_TYPE = 4
IMPORT_WRONG_END_POS = 8
IMPORT_ALIGNMENT_MISMATCH = 5.
IMPORT
%_OI_BKDFSUB
%_VI_BKDFSUB
%_VT_BKPF
%_VT_BSEG
%_VT_BKPFSUB
%_VT_BSEGSUB
%_VT_BSEC
TIME1
V_RC
VEXCEPTION
G_UPPER
FROM DATABASE EUFUNC(FL) ID KEY ACCEPTING PADDING
IGNORING CONVERSION ERRORS.
ENDCATCH.
RC = V_RC.
%_OI_BKDFSUB = %_VI_BKDFSUB.
CLEAR %_OT_BKPF.
REFRESH %_OT_BKPF.
LOOP AT %_VT_BKPF.
%_OT_BKPF = %_VT_BKPF.
APPEND %_OT_BKPF.
ENDLOOP.
CLEAR %_OT_BSEG.
REFRESH %_OT_BSEG.
LOOP AT %_VT_BSEG.
%_OT_BSEG = %_VT_BSEG.
APPEND %_OT_BSEG.
ENDLOOP.
CLEAR %_OT_BKPFSUB.
REFRESH %_OT_BKPFSUB.
LOOP AT %_VT_BKPFSUB.
%_OT_BKPFSUB = %_VT_BKPFSUB.
APPEND %_OT_BKPFSUB.
ENDLOOP.
CLEAR %_OT_BSEGSUB.
REFRESH %_OT_BSEGSUB.
LOOP AT %_VT_BSEGSUB.
%_OT_BSEGSUB = %_VT_BSEGSUB.
APPEND %_OT_BSEGSUB.
ENDLOOP.
CLEAR %_OT_BSEC.
REFRESH %_OT_BSEC.
LOOP AT %_VT_BSEC.
%_OT_BSEC = %_VT_BSEC.
APPEND %_OT_BSEC.
ENDLOOP.
ENDCASE.
ENDFORM.
FORM GET_EXCEPTION_DIFFERENCE
TABLES DIFFERENCES STRUCTURE UNTERSCHIED.
IF VEXCEPTION NE OEXCEPTION.
MOVE 'EXCEPTION' TO DIFFERENCES-PARAMETER.
IF VEXCEPTION = SPACE.
MOVE '-' TO DIFFERENCES-ALT.
ELSE.
MOVE VEXCEPTION TO DIFFERENCES-ALT.
ENDIF.
IF OEXCEPTION = SPACE.
MOVE '-' TO DIFFERENCES-NEU.
ELSE.
MOVE OEXCEPTION TO DIFFERENCES-NEU.
ENDIF.
APPEND DIFFERENCES.
ENDIF.
ENDFORM.
FORM COMPARE_DATA
TABLES DIFFERENCES STRUCTURE UNTERSCHIED
USING FIELD
CHANGING RETCODE.
DATA : SUBRC LIKE SY-SUBRC.
field-symbols: <l_f1> type x.
field-symbols: <l_f2> type x.
RETCODE = '='.
CLEAR DIFFERENCES.
CASE FIELD.
WHEN 'T_BKPF'.
DO.
READ TABLE %_OT_BKPF INDEX SY-INDEX.
SUBRC = SY-SUBRC.
READ TABLE %_VT_BKPF INDEX SY-INDEX.
IF SY-SUBRC NE 0 AND SUBRC NE 0.
EXIT.
ELSEIF SY-SUBRC NE 0.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_OT_BKPF to <l_f1> casting.
assign differences-neu to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ELSEIF SUBRC NE 0.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_VT_BKPF to <l_f1> casting.
assign differences-alt to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ELSEIF %_VT_BKPF
NE %_OT_BKPF.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_VT_BKPF to <l_f1> casting.
assign differences-alt to <l_f2> casting.
<l_f2> = <l_f1>.
assign %_OT_BKPF to <l_f1> casting.
assign differences-neu to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ENDIF.
ENDDO.
WHEN 'T_BSEG'.
DO.
READ TABLE %_OT_BSEG INDEX SY-INDEX.
SUBRC = SY-SUBRC.
READ TABLE %_VT_BSEG INDEX SY-INDEX.
IF SY-SUBRC NE 0 AND SUBRC NE 0.
EXIT.
ELSEIF SY-SUBRC NE 0.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_OT_BSEG to <l_f1> casting.
assign differences-neu to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ELSEIF SUBRC NE 0.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_VT_BSEG to <l_f1> casting.
assign differences-alt to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ELSEIF %_VT_BSEG
NE %_OT_BSEG.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_VT_BSEG to <l_f1> casting.
assign differences-alt to <l_f2> casting.
<l_f2> = <l_f1>.
assign %_OT_BSEG to <l_f1> casting.
assign differences-neu to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ENDIF.
ENDDO.
WHEN 'T_BKPFSUB'.
DO.
READ TABLE %_OT_BKPFSUB INDEX SY-INDEX.
SUBRC = SY-SUBRC.
READ TABLE %_VT_BKPFSUB INDEX SY-INDEX.
IF SY-SUBRC NE 0 AND SUBRC NE 0.
EXIT.
ELSEIF SY-SUBRC NE 0.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_OT_BKPFSUB to <l_f1> casting.
assign differences-neu to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ELSEIF SUBRC NE 0.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_VT_BKPFSUB to <l_f1> casting.
assign differences-alt to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ELSEIF %_VT_BKPFSUB
NE %_OT_BKPFSUB.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_VT_BKPFSUB to <l_f1> casting.
assign differences-alt to <l_f2> casting.
<l_f2> = <l_f1>.
assign %_OT_BKPFSUB to <l_f1> casting.
assign differences-neu to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ENDIF.
ENDDO.
WHEN 'T_BSEGSUB'.
DO.
READ TABLE %_OT_BSEGSUB INDEX SY-INDEX.
SUBRC = SY-SUBRC.
READ TABLE %_VT_BSEGSUB INDEX SY-INDEX.
IF SY-SUBRC NE 0 AND SUBRC NE 0.
EXIT.
ELSEIF SY-SUBRC NE 0.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_OT_BSEGSUB to <l_f1> casting.
assign differences-neu to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ELSEIF SUBRC NE 0.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_VT_BSEGSUB to <l_f1> casting.
assign differences-alt to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ELSEIF %_VT_BSEGSUB
NE %_OT_BSEGSUB.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_VT_BSEGSUB to <l_f1> casting.
assign differences-alt to <l_f2> casting.
<l_f2> = <l_f1>.
assign %_OT_BSEGSUB to <l_f1> casting.
assign differences-neu to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ENDIF.
ENDDO.
WHEN 'T_BSEC'.
DO.
READ TABLE %_OT_BSEC INDEX SY-INDEX.
SUBRC = SY-SUBRC.
READ TABLE %_VT_BSEC INDEX SY-INDEX.
IF SY-SUBRC NE 0 AND SUBRC NE 0.
EXIT.
ELSEIF SY-SUBRC NE 0.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_OT_BSEC to <l_f1> casting.
assign differences-neu to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ELSEIF SUBRC NE 0.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_VT_BSEC to <l_f1> casting.
assign differences-alt to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ELSEIF %_VT_BSEC
NE %_OT_BSEC.
RETCODE = SPACE.
MOVE FIELD TO DIFFERENCES-PARAMETER.
assign %_VT_BSEC to <l_f1> casting.
assign differences-alt to <l_f2> casting.
<l_f2> = <l_f1>.
assign %_OT_BSEC to <l_f1> casting.
assign differences-neu to <l_f2> casting.
<l_f2> = <l_f1>.
APPEND DIFFERENCES.
EXIT.
ENDIF.
ENDDO.
WHEN 'EXCEPTION'.
IF VEXCEPTION NE OEXCEPTION.
RETCODE = SPACE.
MOVE FIELD      TO DIFFERENCES-PARAMETER.
MOVE VEXCEPTION TO DIFFERENCES-ALT.
MOVE OEXCEPTION TO DIFFERENCES-NEU.
APPEND DIFFERENCES.
ENDIF.
ENDCASE.
ENDFORM.
