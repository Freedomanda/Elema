REPORT ZB010600 LINE-SIZE 255 .
************************************************************************
* [プログラム名]
*   ZB010600        LIS商品セグメント更新
*
* [処理概要]
*   品目マスタと商品セグメントが異なるLISの実績データを更新する
*   マスタ参照項目は販売ビューの品目階層（MVKE-PRODH）
*   更新対象LISテーブルはS901〜S904とS801･S802
*   品目階層は各テーブルのキー項目のため、更新対象を集計後
*   Delete/Insertで更新を行う
* [改定履歴]
*　YYYY/MM/DD   Programar         Description
*　2009/09/23   SOLFIS HATA       新規開発h
*　2012/05/07   SOLFIS JO         パフォーマンス改善
*　2012/06/11   SOLFIS TOHTAKE    パフォーマンス改善 PART2
*　2012/11/27   GSL    TOHTAKE    メモリエラー対応
*　2013/01/09   GSL    TOHTAKE    メモリエラー対応 PART2
************************************************************************
TABLES : S901 , S902 , S903 , S904 , S801 , S802 , "LISテーブル
MVKE .    "品目マスタの販売ビュー

TYPES : BEGIN OF TYP_CHECK ,
MATNR TYPE MARA-MATNR ,
PRODH TYPE MVKE-PRODH ,
CFLAG TYPE C ,
END OF TYP_CHECK .

*** 内部テーブル宣言
* 対象抽出用内部テーブル
DATA : T_S901 TYPE TABLE OF S901,
T_S902 TYPE TABLE OF S902 ,
T_S903 TYPE TABLE OF S903 ,
T_S904 TYPE TABLE OF S904 ,
T_S801 TYPE TABLE OF S801 ,
T_S802 TYPE TABLE OF S802 ,
T_MVKE TYPE TABLE OF TYP_CHECK .

* 差異レコード用内部テーブル
DATA : E_S901 TYPE TABLE OF S901 ,
E_S902 TYPE TABLE OF S902 ,
E_S903 TYPE TABLE OF S903 ,
E_S904 TYPE TABLE OF S904 ,
E_S801 TYPE TABLE OF S801 ,
E_S802 TYPE TABLE OF S802 ,
* 更新用レコード用内部テーブル
M_S901 TYPE TABLE OF S901 ,
M_S902 TYPE TABLE OF S902 ,
M_S903 TYPE TABLE OF S903 ,
M_S904 TYPE TABLE OF S904 ,
M_S801 TYPE TABLE OF S801 ,
M_S802 TYPE TABLE OF S802 ,
* 更新用レコードと同一キー対象用内部テーブル
D_S901 TYPE TABLE OF S901 ,
D_S902 TYPE TABLE OF S902 ,
D_S903 TYPE TABLE OF S903 ,
D_S904 TYPE TABLE OF S904 ,
D_S801 TYPE TABLE OF S801 ,
D_S802 TYPE TABLE OF S802 .

* 作業領域
DATA : W_S901 TYPE S901 ,
W_S902 TYPE S902 ,
W_S903 TYPE S903 ,
W_S904 TYPE S904 ,
W_S801 TYPE S801 ,
W_S802 TYPE S802 ,
W_MVKE TYPE TYP_CHECK.

**選択画面

SELECT-OPTIONS : S_SPMON FOR S901-SPMON OBLIGATORY ,
S_MATNR FOR S901-MATNR .
* 販売組織／流通チャネル
PARAMETERS : P_VKORG TYPE MVKE-VKORG ,
P_VTWEG TYPE MVKE-VTWEG .
* TEST実行
PARAMETERS  P_TEST AS CHECKBOX DEFAULT 'X' .

START-OF-SELECTION .

PERFORM INIT_SEC .
*2013/01/09 MOD START>>
*  PERFORM DATA_GET .
PERFORM DATA_EXIST_CHECK.
*  PERFORM DATA_CHECK .
*  PERFORM DATA_SORT .
*  PERFORM DATA_MOD .
PERFORM T901_EDIT .
PERFORM T902_EDIT .
PERFORM T903_EDIT .
PERFORM T904_EDIT .
PERFORM T801_EDIT .
PERFORM T802_EDIT .
*2013/01/09 MOD END<<
IF P_TEST IS INITIAL .
PERFORM DB_MOD .
ENDIF .
PERFORM LIST_OUT .
*&---------------------------------------------------------------------*
*&      Form  Init_Sec
*&---------------------------------------------------------------------*
*       初期化処理
*----------------------------------------------------------------------*
FORM INIT_SEC.
*　内部テーブル
CLEAR :T_S901 , T_S902 , T_S903 , T_S904 , T_S801 , T_S802 ,
T_MVKE ,
D_S901 , D_S902 , D_S903 , D_S904 , D_S801 , D_S802 ,
M_S901 , M_S902 , M_S903 , M_S904 , M_S801 , M_S802 ,
E_S901 , E_S902 , E_S903 , E_S904 , E_S801 , E_S802 ,
* 作業領域
W_S901 , W_S902 , W_S903 , W_S904 , W_S801 , W_S802 ,
W_MVKE .

ENDFORM.                    " Init_Sec
*2013/01/09 ADD START>>
*&---------------------------------------------------------------------*
*&      Form  DATA_EXIST_CHECK
*&---------------------------------------------------------------------*
*       各LISテーブルから実績データを取得し、データの存在チェックを行う
*----------------------------------------------------------------------*
*　VRSIO ＝　000　は実績データを取得している
*----------------------------------------------------------------------*
FORM DATA_EXIST_CHECK.

SELECT SINGLE *
FROM S901
INTO W_S901
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN S_MATNR .

CHECK SY-SUBRC <> 0.

SELECT SINGLE *
FROM S902
INTO W_S902
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN S_MATNR .

CHECK SY-SUBRC <> 0.

SELECT SINGLE *
FROM S903
INTO W_S903
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN S_MATNR .

CHECK SY-SUBRC <> 0.

SELECT SINGLE *
FROM S904
INTO W_S904
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN S_MATNR .

CHECK SY-SUBRC <> 0.

SELECT SINGLE *
FROM S801
INTO W_S801
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN  S_MATNR .

CHECK SY-SUBRC <> 0.

SELECT SINGLE *
FROM S802
INTO W_S802
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN  S_MATNR .

CHECK SY-SUBRC <> 0.

MESSAGE S400(Z1) WITH '対象データが存在しません' .
STOP.

ENDFORM.                    " DATA_EXIST_CHECK
*&---------------------------------------------------------------------*
*&      Form  T901_EDIT
*&---------------------------------------------------------------------*
*       T901テーブルから実績データを取得/編集
*----------------------------------------------------------------------*
*　VRSIO ＝　000　は実績データを取得している
*----------------------------------------------------------------------*
FORM T901_EDIT.
* 作業領域
DATA : L_S901   TYPE S901 ,
TMP_S901 TYPE S901 .
SELECT *
FROM S901
INTO TABLE T_S901
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN S_MATNR .

SELECT MATNR
PRODH
FROM MVKE
INTO CORRESPONDING FIELDS OF TABLE T_MVKE
FOR ALL ENTRIES IN T_S901
WHERE MATNR IN S_MATNR
AND MATNR EQ T_S901-MATNR
AND VKORG EQ P_VKORG
AND VTWEG EQ P_VTWEG .

SORT T_MVKE BY MATNR.

LOOP AT T_S901 INTO W_S901 .
CLEAR W_MVKE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = W_S901-MATNR
BINARY SEARCH.

IF SY-SUBRC EQ 0 .
IF W_S901-PRODH NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S901 TO E_S901 .
ENDIF.
ELSE .
IF W_S901-PRODH IS INITIAL .
PERFORM MVKE_MOD .
APPEND W_S901 TO E_S901 .
ENDIF .
ENDIF .
ENDLOOP .

SORT : E_S901 BY SSOUR
VRSIO
SPMON
SPTAG
SPWOC
SPBUP
VKORG
VKBUR
VKGRP
PKUNAG
MATNR ,
T_S901 BY SSOUR
VRSIO
SPMON
SPTAG
SPWOC
SPBUP
VKORG
VKBUR
VKGRP
PKUNAG
PRODH
MATNR .

*** S901
CLEAR : W_S901 .
READ TABLE E_S901 INTO TMP_S901 INDEX 1 .
CLEAR : TMP_S901-PRODH ,
TMP_S901-NETWR ,
TMP_S901-WAVWR ,
TMP_S901-ZZARAIGAKU .
LOOP AT E_S901 INTO L_S901 .
CLEAR : L_S901-PRODH .
IF L_S901(93) EQ TMP_S901(93) .
ADD : L_S901-NETWR TO TMP_S901-NETWR ,
L_S901-WAVWR TO TMP_S901-WAVWR ,
L_S901-ZZARAIGAKU TO TMP_S901-ZZARAIGAKU .
ELSE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S901-MATNR
BINARY SEARCH.
MOVE W_MVKE-PRODH TO TMP_S901-PRODH .
READ TABLE T_S901 INTO W_S901 WITH KEY
SSOUR = TMP_S901-SSOUR
VRSIO = TMP_S901-VRSIO
SPMON = TMP_S901-SPMON
SPTAG = TMP_S901-SPTAG
SPWOC = TMP_S901-SPWOC
SPBUP = TMP_S901-SPBUP
VKORG = TMP_S901-VKORG
VKBUR = TMP_S901-VKBUR
VKGRP = TMP_S901-VKGRP
PKUNAG = TMP_S901-PKUNAG
PRODH = TMP_S901-PRODH
MATNR = TMP_S901-MATNR
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S901 TO D_S901 .
ADD : TMP_S901-NETWR TO W_S901-NETWR ,
TMP_S901-WAVWR TO W_S901-WAVWR ,
TMP_S901-ZZARAIGAKU TO W_S901-ZZARAIGAKU .
ELSE .
MOVE TMP_S901 TO W_S901 .
ENDIF .
APPEND W_S901 TO M_S901 .
CLEAR : W_S901 , TMP_S901 .
MOVE L_S901 TO TMP_S901 .
ENDIF .
ENDLOOP .
IF NOT TMP_S901 IS INITIAL .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S901-MATNR
BINARY SEARCH.

MOVE W_MVKE-PRODH TO TMP_S901-PRODH .
READ TABLE T_S901 INTO W_S901 WITH KEY
SSOUR = TMP_S901-SSOUR
VRSIO = TMP_S901-VRSIO
SPMON = TMP_S901-SPMON
SPTAG = TMP_S901-SPTAG
SPWOC = TMP_S901-SPWOC
SPBUP = TMP_S901-SPBUP
VKORG = TMP_S901-VKORG
VKBUR = TMP_S901-VKBUR
VKGRP = TMP_S901-VKGRP
PKUNAG = TMP_S901-PKUNAG
PRODH = TMP_S901-PRODH
MATNR = TMP_S901-MATNR
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S901 TO D_S901 .
ADD : TMP_S901-NETWR TO W_S901-NETWR ,
TMP_S901-WAVWR TO W_S901-WAVWR ,
TMP_S901-ZZARAIGAKU TO W_S901-ZZARAIGAKU .
ELSE .
MOVE TMP_S901 TO W_S901 .
ENDIF .
APPEND W_S901 TO M_S901 .
ENDIF .

FREE T_S901.

ENDFORM.                    " T901_EDIT
*&---------------------------------------------------------------------*
*&      Form  T902_EDIT
*&---------------------------------------------------------------------*
*       T902テーブルから実績データを取得/編集
*----------------------------------------------------------------------*
*　VRSIO ＝　000　は実績データを取得している
*----------------------------------------------------------------------*
FORM T902_EDIT.
* 作業領域
DATA : L_S902   TYPE S902 ,
TMP_S902 TYPE S902 .
SELECT *
FROM S902
INTO TABLE T_S902
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN S_MATNR .

LOOP AT T_S902 INTO W_S902 .
CLEAR W_MVKE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = W_S902-MATNR
BINARY SEARCH.
IF SY-SUBRC EQ 0 .
IF W_S902-PRODH NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S902 TO E_S902 .
ENDIF.
ELSE .
PERFORM GET_MVKE USING W_S902-MATNR .
IF W_MVKE IS INITIAL .
CONTINUE .
ELSE.
SORT T_MVKE BY MATNR.
ENDIF .
IF W_S902-PRODH IS INITIAL .
PERFORM MVKE_MOD .
APPEND W_S902 TO E_S902 .
ELSEIF W_S902-PRODH NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S902 TO E_S902 .
ENDIF.
ENDIF .
ENDLOOP .
SORT : E_S902 BY SPMON
VKORG
VKBUR
VKGRP
KDGRP
ZZKUNNR1C
PKUNAG
MATKL
MATNR
VRSIO
SPTAG
SPWOC
SPBUP
SSOUR ,
T_S902 BY SPMON
VKORG
VKBUR
VKGRP
KDGRP
ZZKUNNR1C
PKUNAG
PRODH
MATKL
MATNR
VRSIO
SPTAG
SPWOC
SPBUP
SSOUR .

CLEAR : W_S902 .
READ TABLE E_S902 INTO TMP_S902 INDEX 1 .
CLEAR : TMP_S902-PRODH ,
TMP_S902-NETWR ,
TMP_S902-WAVWR ,
TMP_S902-ZZARAIGAKU ,
TMP_S902-UMMENGE .
LOOP AT E_S902 INTO L_S902 .
CLEAR : L_S902-PRODH .
IF L_S902(114) EQ TMP_S902(114) .
ADD : L_S902-NETWR TO TMP_S902-NETWR ,
L_S902-WAVWR TO TMP_S902-WAVWR ,
L_S902-ZZARAIGAKU TO TMP_S902-ZZARAIGAKU ,
L_S902-UMMENGE TO TMP_S902-UMMENGE .
ELSE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S902-MATNR
BINARY SEARCH.
MOVE W_MVKE-PRODH TO TMP_S902-PRODH .
READ TABLE T_S902 INTO W_S902 WITH KEY
SPMON = TMP_S902-SPMON
VKORG = TMP_S902-VKORG
VKBUR = TMP_S902-VKBUR
VKGRP = TMP_S902-VKGRP
KDGRP = TMP_S902-KDGRP
ZZKUNNR1C = TMP_S902-ZZKUNNR1C
PKUNAG = TMP_S902-PKUNAG
PRODH = TMP_S902-PRODH
MATKL = TMP_S902-MATKL
MATNR = TMP_S902-MATNR
VRSIO = TMP_S902-VRSIO
SPTAG = TMP_S902-SPTAG
SPWOC = TMP_S902-SPWOC
SPBUP = TMP_S902-SPBUP
SSOUR = TMP_S902-SSOUR
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S902 TO D_S902 .
ADD : TMP_S902-NETWR TO W_S902-NETWR ,
TMP_S902-WAVWR TO W_S902-WAVWR ,
TMP_S902-ZZARAIGAKU TO W_S902-ZZARAIGAKU ,
TMP_S902-UMMENGE TO W_S902-UMMENGE .
ELSE .
MOVE TMP_S902 TO W_S902 .
ENDIF .
APPEND W_S902 TO M_S902 .
CLEAR : W_S902 , TMP_S902 .
MOVE L_S902 TO TMP_S902 .
ENDIF .
ENDLOOP .
IF NOT TMP_S902 IS INITIAL .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S902-MATNR
BINARY SEARCH.
MOVE W_MVKE-PRODH TO TMP_S902-PRODH .
READ TABLE T_S902 INTO W_S902 WITH KEY
SPMON = TMP_S902-SPMON
VKORG = TMP_S902-VKORG
VKBUR = TMP_S902-VKBUR
VKGRP = TMP_S902-VKGRP
KDGRP = TMP_S902-KDGRP
ZZKUNNR1C = TMP_S902-ZZKUNNR1C
PKUNAG = TMP_S902-PKUNAG
PRODH = TMP_S902-PRODH
MATKL = TMP_S902-MATKL
MATNR = TMP_S902-MATNR
VRSIO = TMP_S902-VRSIO
SPTAG = TMP_S902-SPTAG
SPWOC = TMP_S902-SPWOC
SPBUP = TMP_S902-SPBUP
SSOUR = TMP_S902-SSOUR
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S902 TO D_S902 .
ADD : TMP_S902-NETWR TO W_S902-NETWR ,
TMP_S902-WAVWR TO W_S902-WAVWR ,
TMP_S902-ZZARAIGAKU TO W_S902-ZZARAIGAKU ,
TMP_S902-UMMENGE TO W_S902-UMMENGE .
ELSE .
MOVE TMP_S902 TO W_S902 .
ENDIF .
APPEND W_S902 TO M_S902 .
ENDIF .
FREE T_S902.

ENDFORM.                    " T902_EDIT
*&---------------------------------------------------------------------*
*&      Form  T903_EDIT
*&---------------------------------------------------------------------*
*       T903テーブルから実績データを取得/編集
*----------------------------------------------------------------------*
*　VRSIO ＝　000　は実績データを取得している
*----------------------------------------------------------------------*
FORM T903_EDIT.
* 作業領域
DATA : L_S903   TYPE S903 ,
TMP_S903 TYPE S903 .

SELECT *
FROM S903
INTO TABLE T_S903
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN S_MATNR .

LOOP AT T_S903 INTO W_S903 .
CLEAR W_MVKE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = W_S903-MATNR
BINARY SEARCH.
IF SY-SUBRC EQ 0 .
IF W_S903-PRODH NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S903 TO E_S903 .
ENDIF.
ELSE .
PERFORM GET_MVKE USING W_S903-MATNR .
IF W_MVKE IS INITIAL .
CONTINUE .
ELSE.
SORT T_MVKE BY MATNR.
ENDIF .
IF W_S903-PRODH IS INITIAL .
PERFORM MVKE_MOD .
APPEND W_S903 TO E_S903 .
ELSEIF W_S903-PRODH NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S903 TO E_S903 .
ENDIF.
ENDIF .
ENDLOOP .
SORT : E_S903 BY SPMON
VKORG
VKBUR
VKGRP
PKUNAG
MVGR1
MVGR2
MVGR3
MATNR
VRSIO
SPTAG
SPWOC
SPBUP
SSOUR ,
T_S903 BY SPMON
VKORG
VKBUR
VKGRP
PKUNAG
PRODH
MVGR1
MVGR2
MVGR3
MATNR
VRSIO
SPTAG
SPWOC
SPBUP
SSOUR .

*** S903
CLEAR : W_S903 .
READ TABLE E_S903 INTO TMP_S903 INDEX 1 .
CLEAR : TMP_S903-PRODH ,
TMP_S903-NETWR ,
TMP_S903-WAVWR ,
TMP_S903-ZZARAIGAKU .
LOOP AT E_S903 INTO L_S903 .
CLEAR : L_S903-PRODH .
IF L_S903(102) EQ TMP_S903(102) .
ADD : L_S903-NETWR TO TMP_S903-NETWR ,
L_S903-WAVWR TO TMP_S903-WAVWR ,
L_S903-ZZARAIGAKU TO TMP_S903-ZZARAIGAKU .
ELSE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S903-MATNR
BINARY SEARCH.

MOVE W_MVKE-PRODH TO TMP_S903-PRODH .
READ TABLE T_S903 INTO W_S903 WITH KEY
SPMON = TMP_S903-SPMON
VKORG = TMP_S903-VKORG
VKBUR = TMP_S903-VKBUR
VKGRP = TMP_S903-VKGRP
PKUNAG = TMP_S903-PKUNAG
PRODH = TMP_S903-PRODH
MVGR1 = TMP_S903-MVGR1
MVGR2 = TMP_S903-MVGR2
MVGR3 = TMP_S903-MVGR3
MATNR = TMP_S903-MATNR
VRSIO = TMP_S903-VRSIO
SPTAG = TMP_S903-SPTAG
SPWOC = TMP_S903-SPWOC
SPBUP = TMP_S903-SPBUP
SSOUR = TMP_S903-SSOUR
BINARY SEARCH
.

IF SY-SUBRC EQ 0 .
APPEND W_S903 TO D_S903 .
ADD : TMP_S903-NETWR TO W_S903-NETWR ,
TMP_S903-WAVWR TO W_S903-WAVWR ,
TMP_S903-ZZARAIGAKU TO W_S903-ZZARAIGAKU .
ELSE .
MOVE TMP_S903 TO W_S903 .
ENDIF .
APPEND W_S903 TO M_S903 .
CLEAR : W_S903 , TMP_S903 .
MOVE L_S903 TO TMP_S903 .
ENDIF .
ENDLOOP .
IF NOT TMP_S903 IS INITIAL .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S903-MATNR
BINARY SEARCH.

MOVE W_MVKE-PRODH TO TMP_S903-PRODH .
READ TABLE T_S903 INTO W_S903 WITH KEY
SPMON = TMP_S903-SPMON
VKORG = TMP_S903-VKORG
VKBUR = TMP_S903-VKBUR
VKGRP = TMP_S903-VKGRP
PKUNAG = TMP_S903-PKUNAG
PRODH = TMP_S903-PRODH
MVGR1 = TMP_S903-MVGR1
MVGR2 = TMP_S903-MVGR2
MVGR3 = TMP_S903-MVGR3
MATNR = TMP_S903-MATNR
VRSIO = TMP_S903-VRSIO
SPTAG = TMP_S903-SPTAG
SPWOC = TMP_S903-SPWOC
SPBUP = TMP_S903-SPBUP
SSOUR = TMP_S903-SSOUR
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S903 TO D_S903 .
ADD : TMP_S903-NETWR TO W_S903-NETWR ,
TMP_S903-WAVWR TO W_S903-WAVWR ,
TMP_S903-ZZARAIGAKU TO W_S903-ZZARAIGAKU .
ELSE .
MOVE TMP_S903 TO W_S903 .
ENDIF .
APPEND W_S903 TO M_S903 .
ENDIF .
FREE T_S903.

ENDFORM.                    " T903_EDIT
*&---------------------------------------------------------------------*
*&      Form  T904_EDIT
*&---------------------------------------------------------------------*
*       T904テーブルから実績データを取得/編集
*----------------------------------------------------------------------*
*　VRSIO ＝　000　は実績データを取得している
*----------------------------------------------------------------------*
FORM T904_EDIT.
* 作業領域
DATA : L_S904   TYPE S904 ,
TMP_S904 TYPE S904 .
SELECT *
FROM S904
INTO TABLE T_S904
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN S_MATNR .

LOOP AT T_S904 INTO W_S904 .
CLEAR W_MVKE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = W_S904-MATNR
BINARY SEARCH.

IF SY-SUBRC EQ 0 .
IF W_S904-PRODH NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S904 TO E_S904 .
ENDIF.
ELSE .
PERFORM GET_MVKE USING W_S904-MATNR .
IF W_MVKE IS INITIAL .
CONTINUE .
ELSE.
SORT T_MVKE BY MATNR.
ENDIF .
IF W_S904-PRODH IS INITIAL .
PERFORM MVKE_MOD .
APPEND W_S904 TO E_S904 .
ELSEIF W_S904-PRODH NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S904 TO E_S904 .
ENDIF.
ENDIF .
ENDLOOP .

SORT : E_S904 BY SSOUR
VRSIO
SPMON
SPTAG
SPWOC
SPBUP
VKORG
MVGR4
VKBUR
VKGRP
PKUNAG
KVGR1
MATNR ,
T_S904 BY SSOUR
VRSIO
SPMON
SPTAG
SPWOC
SPBUP
VKORG
MVGR4
VKBUR
VKGRP
PKUNAG
PRODH
KVGR1
MATNR .

***S904
CLEAR : W_S904 .
READ TABLE E_S904 INTO TMP_S904 INDEX 1 .
CLEAR : TMP_S904-PRODH ,
TMP_S904-NETWR ,
TMP_S904-WAVWR ,
TMP_S904-ZZARAIGAKU .
LOOP AT E_S904 INTO L_S904 .
CLEAR : L_S904-PRODH .
IF L_S904(99) EQ TMP_S904(99) .
ADD : L_S904-NETWR TO TMP_S904-NETWR ,
L_S904-WAVWR TO TMP_S904-WAVWR ,
L_S904-ZZARAIGAKU TO TMP_S904-ZZARAIGAKU .
ELSE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S904-MATNR
* 2012/05/07 ADD START
BINARY SEARCH.
* 2012/05/07 ADD END
MOVE W_MVKE-PRODH TO TMP_S904-PRODH .
READ TABLE T_S904 INTO W_S904 WITH KEY
SSOUR = TMP_S904-SSOUR
VRSIO = TMP_S904-VRSIO
SPMON = TMP_S904-SPMON
SPTAG = TMP_S904-SPTAG
SPWOC = TMP_S904-SPWOC
SPBUP = TMP_S904-SPBUP
VKORG = TMP_S904-VKORG
MVGR4 = TMP_S904-MVGR4
VKBUR = TMP_S904-VKBUR
VKGRP = TMP_S904-VKGRP
PKUNAG = TMP_S904-PKUNAG
PRODH = TMP_S904-PRODH
KVGR1 = TMP_S904-KVGR1
MATNR = TMP_S904-MATNR
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S904 TO D_S904 .
ADD : TMP_S904-NETWR TO W_S904-NETWR ,
TMP_S904-WAVWR TO W_S904-WAVWR ,
TMP_S904-ZZARAIGAKU TO W_S904-ZZARAIGAKU .
ELSE .
MOVE TMP_S904 TO W_S904 .
ENDIF .
APPEND W_S904 TO M_S904 .
CLEAR : W_S904 , TMP_S904 .
MOVE L_S904 TO TMP_S904 .
ENDIF .
ENDLOOP .
IF NOT TMP_S904 IS INITIAL .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S904-MATNR
BINARY SEARCH.

MOVE W_MVKE-PRODH TO TMP_S904-PRODH .
READ TABLE T_S904 INTO W_S904 WITH KEY
SSOUR = TMP_S904-SSOUR
VRSIO = TMP_S904-VRSIO
SPMON = TMP_S904-SPMON
SPTAG = TMP_S904-SPTAG
SPWOC = TMP_S904-SPWOC
SPBUP = TMP_S904-SPBUP
VKORG = TMP_S904-VKORG
MVGR4 = TMP_S904-MVGR4
VKBUR = TMP_S904-VKBUR
VKGRP = TMP_S904-VKGRP
PKUNAG = TMP_S904-PKUNAG
PRODH = TMP_S904-PRODH
KVGR1 = TMP_S904-KVGR1
MATNR = TMP_S904-MATNR
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S904 TO D_S904 .
ADD : TMP_S904-NETWR TO W_S904-NETWR ,
TMP_S904-WAVWR TO W_S904-WAVWR ,
TMP_S904-ZZARAIGAKU TO W_S904-ZZARAIGAKU .
ELSE .
MOVE TMP_S904 TO W_S904 .
ENDIF .
APPEND W_S904 TO M_S904 .
ENDIF .

FREE T_S904.

ENDFORM.                    " T904_EDIT
*&---------------------------------------------------------------------*
*&      Form  T801_EDIT
*&---------------------------------------------------------------------*
*       T801テーブルから実績データを取得/編集
*----------------------------------------------------------------------*
*　VRSIO ＝　000　は実績データを取得している
*----------------------------------------------------------------------*
FORM T801_EDIT.
* 作業領域
DATA : L_S801   TYPE S801 ,
TMP_S801 TYPE S801 .

SELECT *
FROM S801
INTO TABLE T_S801
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN  S_MATNR .
LOOP AT T_S801 INTO W_S801 .
CLEAR W_MVKE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = W_S801-MATNR
BINARY SEARCH.

IF SY-SUBRC EQ 0 .
IF W_S801-PRDHA NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S801 TO E_S801 .
ENDIF.
ELSE .
PERFORM GET_MVKE USING W_S801-MATNR .
IF W_MVKE IS INITIAL .
CONTINUE .
ELSE.
SORT T_MVKE BY MATNR.
ENDIF .
IF W_S801-PRDHA IS INITIAL .
PERFORM MVKE_MOD .
APPEND W_S801 TO E_S801 .
ELSEIF W_S801-PRDHA NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S801 TO E_S801 .
ENDIF.
ENDIF .
ENDLOOP .

SORT : E_S801 BY SSOUR
VRSIO
SPMON
SPTAG
SPWOC
SPBUP
EKORG
WERKS
MATNR
EKGRP ,
T_S801 BY SSOUR
VRSIO
SPMON
SPTAG
SPWOC
SPBUP
EKORG
WERKS
PRDHA
MATNR
EKGRP .

***s801
CLEAR : W_S801 .
READ TABLE E_S801 INTO TMP_S801 INDEX 1 .
CLEAR : TMP_S801-PRDHA ,
TMP_S801-REWRT ,
TMP_S801-EFFWR ,
TMP_S801-WEMNG .
LOOP AT E_S801 INTO L_S801 .
CLEAR : L_S801-PRDHA .
IF L_S801(83) EQ TMP_S801(83) .
ADD : L_S801-REWRT TO TMP_S801-REWRT ,
L_S801-EFFWR TO TMP_S801-EFFWR ,
L_S801-WEMNG TO TMP_S801-WEMNG .
ELSE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S801-MATNR
BINARY SEARCH.

MOVE W_MVKE-PRODH TO TMP_S801-PRDHA .
READ TABLE T_S801 INTO W_S801 WITH KEY
SSOUR = TMP_S801-SSOUR
VRSIO = TMP_S801-VRSIO
SPMON = TMP_S801-SPMON
SPTAG = TMP_S801-SPTAG
SPWOC = TMP_S801-SPWOC
SPBUP = TMP_S801-SPBUP
EKORG = TMP_S801-EKORG
WERKS = TMP_S801-WERKS
PRDHA = TMP_S801-PRDHA
MATNR = TMP_S801-MATNR
EKGRP = TMP_S801-EKGRP
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S801 TO D_S801 .
ADD : TMP_S801-REWRT TO W_S801-REWRT ,
TMP_S801-EFFWR TO W_S801-EFFWR ,
TMP_S801-WEMNG TO W_S801-WEMNG ,
TMP_S801-MENGE TO W_S801-MENGE .
ELSE .
MOVE TMP_S801 TO W_S801 .
ENDIF .
APPEND W_S801 TO M_S801 .
CLEAR : W_S801 , TMP_S801 .
MOVE L_S801 TO TMP_S801 .
ENDIF .
ENDLOOP .
IF NOT TMP_S801 IS INITIAL .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S801-MATNR
BINARY SEARCH.

MOVE W_MVKE-PRODH TO TMP_S801-PRDHA .
READ TABLE T_S801 INTO W_S801 WITH KEY
SSOUR = TMP_S801-SSOUR
VRSIO = TMP_S801-VRSIO
SPMON = TMP_S801-SPMON
SPTAG = TMP_S801-SPTAG
SPWOC = TMP_S801-SPWOC
SPBUP = TMP_S801-SPBUP
EKORG = TMP_S801-EKORG
WERKS = TMP_S801-WERKS
PRDHA = TMP_S801-PRDHA
MATNR = TMP_S801-MATNR
EKGRP = TMP_S801-EKGRP
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S801 TO D_S801 .
ADD : TMP_S801-REWRT TO W_S801-REWRT ,
TMP_S801-EFFWR TO W_S801-EFFWR ,
TMP_S801-WEMNG TO W_S801-WEMNG ,
TMP_S801-MENGE TO W_S801-MENGE .
ELSE .
MOVE TMP_S801 TO W_S801 .
ENDIF .
APPEND W_S801 TO M_S801 .
ENDIF .
FREE T_S801.

ENDFORM.                    " T801_EDIT
*&---------------------------------------------------------------------*
*&      Form  T802_EDIT
*&---------------------------------------------------------------------*
*       T802テーブルから実績データを取得/編集
*----------------------------------------------------------------------*
*　VRSIO ＝　000　は実績データを取得している
*----------------------------------------------------------------------*
FORM T802_EDIT.
* 作業領域
DATA : L_S802   TYPE S802 ,
TMP_S802 TYPE S802 .
SELECT *
FROM S802
INTO TABLE T_S802
WHERE VRSIO EQ '000'
AND SPMON IN S_SPMON
AND MATNR IN  S_MATNR .

LOOP AT T_S802 INTO W_S802 .
CLEAR W_MVKE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = W_S802-MATNR
BINARY SEARCH.

IF SY-SUBRC EQ 0 .
IF W_S802-PRDHA NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S802 TO E_S802 .
ENDIF.
ELSE .
PERFORM GET_MVKE USING W_S802-MATNR .
IF W_MVKE IS INITIAL .
CONTINUE .
ELSE.
SORT T_MVKE BY MATNR.
ENDIF .
IF W_S802-PRDHA IS INITIAL .
PERFORM MVKE_MOD .
APPEND W_S802 TO E_S802 .
ELSEIF W_S802-PRDHA NE W_MVKE-PRODH .
PERFORM MVKE_MOD .
APPEND W_S802 TO E_S802 .
ENDIF.
ENDIF .
ENDLOOP .
SORT : E_S802 BY SSOUR
VRSIO
SPMON
SPTAG
SPWOC
SPBUP
EKORG
WERKS
MATNR
EKGRP
EBELN
EBELP ,
T_S802 BY SSOUR
VRSIO
SPMON
SPTAG
SPWOC
SPBUP
EKORG
WERKS
PRDHA
MATNR
EKGRP
EBELN
EBELP .

***S802
CLEAR : W_S802 .
READ TABLE E_S802 INTO TMP_S802 INDEX 1 .
CLEAR : TMP_S802-PRDHA ,
TMP_S802-REWRT ,
TMP_S802-EFFWR ,
TMP_S802-WEMNG .
LOOP AT E_S802 INTO L_S802 .
CLEAR : L_S802-PRDHA .
IF L_S802(98) EQ TMP_S802(98) .
ADD : L_S802-REWRT TO TMP_S802-REWRT ,
L_S802-EFFWR TO TMP_S802-EFFWR ,
L_S802-WEMNG TO TMP_S802-WEMNG .
ELSE .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S802-MATNR
BINARY SEARCH.
MOVE W_MVKE-PRODH TO TMP_S802-PRDHA .
READ TABLE T_S802 INTO W_S802 WITH KEY
SSOUR = TMP_S802-SSOUR
VRSIO = TMP_S802-VRSIO
SPMON = TMP_S802-SPMON
SPTAG = TMP_S802-SPTAG
SPWOC = TMP_S802-SPWOC
SPBUP = TMP_S802-SPBUP
EKORG = TMP_S802-EKORG
WERKS = TMP_S802-WERKS
PRDHA = TMP_S802-PRDHA
MATNR = TMP_S802-MATNR
EKGRP = TMP_S802-EKGRP
EBELN = TMP_S802-EBELN
EBELP = TMP_S802-EBELP
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S802 TO D_S802 .
ADD : TMP_S802-REWRT TO W_S802-REWRT ,
TMP_S802-EFFWR TO W_S802-EFFWR ,
TMP_S802-WEMNG TO W_S802-WEMNG ,
TMP_S802-MENGE TO W_S802-MENGE .
ELSE .
MOVE TMP_S802 TO W_S802 .
ENDIF .
APPEND W_S802 TO M_S802 .
CLEAR : W_S802 , TMP_S802 .
MOVE L_S802 TO TMP_S802 .
ENDIF .
ENDLOOP .
IF NOT TMP_S802 IS INITIAL .
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = TMP_S802-MATNR
BINARY SEARCH.

MOVE W_MVKE-PRODH TO TMP_S802-PRDHA .
READ TABLE T_S802 INTO W_S802 WITH KEY
SSOUR = TMP_S802-SSOUR
VRSIO = TMP_S802-VRSIO
SPMON = TMP_S802-SPMON
SPTAG = TMP_S802-SPTAG
SPWOC = TMP_S802-SPWOC
SPBUP = TMP_S802-SPBUP
EKORG = TMP_S802-EKORG
WERKS = TMP_S802-WERKS
PRDHA = TMP_S802-PRDHA
MATNR = TMP_S802-MATNR
EKGRP = TMP_S802-EKGRP
EBELN = TMP_S802-EBELN
EBELP = TMP_S802-EBELP
BINARY SEARCH
.
IF SY-SUBRC EQ 0 .
APPEND W_S802 TO D_S802 .
ADD : TMP_S802-REWRT TO W_S802-REWRT ,
TMP_S802-EFFWR TO W_S802-EFFWR ,
TMP_S802-WEMNG TO W_S802-WEMNG ,
TMP_S802-MENGE TO W_S802-MENGE .
ELSE .
MOVE TMP_S802 TO W_S802 .
ENDIF .
APPEND W_S802 TO M_S802 .
ENDIF .
FREE : T_S802,
T_MVKE.

IF M_S901[] IS INITIAL AND
M_S902[] IS INITIAL AND
M_S903[] IS INITIAL AND
M_S904[] IS INITIAL AND
M_S801[] IS INITIAL AND
M_S802[] IS INITIAL
.

MESSAGE S400(Z1) WITH '変更対象データが存在しません' .
STOP.
ENDIF.

ENDFORM.                    " T802_EDIT
*2013/01/09 ADD END<<

*2013/01/09 DEL START>>
**&---------------------------------------------------------------------*
**&      Form  Data_Get
**&---------------------------------------------------------------------*
**       各LISテーブルから実績データを取得
**----------------------------------------------------------------------*
**　VRSIO ＝　000　は実績データを取得している
**----------------------------------------------------------------------*
*FORM DATA_GET.
*
*  SELECT *
*  FROM S901
*  INTO TABLE T_S901
*  WHERE VRSIO EQ '000'
*    AND SPMON IN S_SPMON
*    AND MATNR IN S_MATNR .
*
*  SELECT *
*  FROM S902
*  INTO TABLE T_S902
*  WHERE VRSIO EQ '000'
*    AND SPMON IN S_SPMON
*    AND MATNR IN S_MATNR .
*
*  SELECT *
*  FROM S903
*  INTO TABLE T_S903
*  WHERE VRSIO EQ '000'
*    AND SPMON IN S_SPMON
*    AND MATNR IN S_MATNR .
*
*  SELECT *
*  FROM S904
*  INTO TABLE T_S904
*  WHERE VRSIO EQ '000'
*    AND SPMON IN S_SPMON
*    AND MATNR IN S_MATNR .
*
*  SELECT *
*  FROM S801
*  INTO TABLE T_S801
*  WHERE VRSIO EQ '000'
*    AND SPMON IN S_SPMON
*    AND MATNR IN  S_MATNR .
*
*  SELECT *
*  FROM S802
*  INTO TABLE T_S802
*  WHERE VRSIO EQ '000'
*    AND SPMON IN S_SPMON
*    AND MATNR IN  S_MATNR .
*
*  IF T_S901[] IS INITIAL AND
*     T_S902[] IS INITIAL AND
*     T_S903[] IS INITIAL AND
*     T_S904[] IS INITIAL AND
*     T_S801[] IS INITIAL AND
*     T_S802[] IS INITIAL
*  .
*
*    MESSAGE S400(Z1) WITH '対象データが存在しません' .
*    STOP.
*  ENDIF.
*
*  SELECT MATNR
*         PRODH
*    FROM MVKE
*    INTO CORRESPONDING FIELDS OF TABLE T_MVKE
*    FOR ALL ENTRIES IN T_S901
*   WHERE MATNR IN S_MATNR
*     AND MATNR EQ T_S901-MATNR
*     AND VKORG EQ P_VKORG
*     AND VTWEG EQ P_VTWEG .
*
*ENDFORM.                    " Data_Get

**&---------------------------------------------------------------------*
**&      Form  Data_Check
**&---------------------------------------------------------------------*
**       マスタとLISで商品セグメントが異なっている対象の抽出
**----------------------------------------------------------------------*
*FORM DATA_CHECK.
*
** 2012/06/11 ADD START
*  SORT T_MVKE BY MATNR.
** 2012/06/11 ADD END
*
*  LOOP AT T_S901 INTO W_S901 .
*    CLEAR W_MVKE .
*    READ TABLE T_MVKE INTO W_MVKE
** 2012/06/11 MOD START
**     WITH KEY MATNR = W_S901-MATNR .
*     WITH KEY MATNR = W_S901-MATNR
*     BINARY SEARCH.
** 2012/06/11 MOD END
*
*    IF SY-SUBRC EQ 0 .
*      IF W_S901-PRODH NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S901 TO E_S901 .
*      ENDIF.
*    ELSE .
*      IF W_S901-PRODH IS INITIAL .
*        PERFORM MVKE_MOD .
*        APPEND W_S901 TO E_S901 .
*      ENDIF .
*    ENDIF .
*  ENDLOOP .
*
*  LOOP AT T_S902 INTO W_S902 .
*    CLEAR W_MVKE .
*    READ TABLE T_MVKE INTO W_MVKE
** 2012/06/11 MOD START
**     WITH KEY MATNR = W_S902-MATNR .
*     WITH KEY MATNR = W_S902-MATNR
*     BINARY SEARCH.
** 2012/06/11 MOD END
*    IF SY-SUBRC EQ 0 .
*      IF W_S902-PRODH NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S902 TO E_S902 .
*      ENDIF.
*    ELSE .
*      PERFORM GET_MVKE USING W_S902-MATNR .
*      IF W_MVKE IS INITIAL .
*        CONTINUE .
** 2012/06/11 ADD START
*      ELSE.
*        SORT T_MVKE BY MATNR.
** 2012/06/11 ADD END
*      ENDIF .
*      IF W_S902-PRODH IS INITIAL .
*        PERFORM MVKE_MOD .
*        APPEND W_S902 TO E_S902 .
*      ELSEIF W_S902-PRODH NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S902 TO E_S902 .
*      ENDIF.
*    ENDIF .
*  ENDLOOP .
*
*  LOOP AT T_S903 INTO W_S903 .
*    CLEAR W_MVKE .
*    READ TABLE T_MVKE INTO W_MVKE
** 2012/06/11 MOD START
**     WITH KEY MATNR = W_S903-MATNR .
*     WITH KEY MATNR = W_S903-MATNR
*     BINARY SEARCH.
** 2012/06/11 MOD END
*    IF SY-SUBRC EQ 0 .
*      IF W_S903-PRODH NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S903 TO E_S903 .
*      ENDIF.
*    ELSE .
*      PERFORM GET_MVKE USING W_S903-MATNR .
*      IF W_MVKE IS INITIAL .
*        CONTINUE .
** 2012/06/11 ADD START
*      ELSE.
*        SORT T_MVKE BY MATNR.
** 2012/06/11 ADD END
*      ENDIF .
*      IF W_S903-PRODH IS INITIAL .
*        PERFORM MVKE_MOD .
*        APPEND W_S903 TO E_S903 .
*      ELSEIF W_S903-PRODH NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S903 TO E_S903 .
*      ENDIF.
*    ENDIF .
*  ENDLOOP .
*
*  LOOP AT T_S904 INTO W_S904 .
*    CLEAR W_MVKE .
*    READ TABLE T_MVKE INTO W_MVKE
** 2012/06/11 MOD START
**     WITH KEY MATNR = W_S904-MATNR .
*     WITH KEY MATNR = W_S904-MATNR
*     BINARY SEARCH.
** 2012/06/11 MOD END
*    IF SY-SUBRC EQ 0 .
*      IF W_S904-PRODH NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S904 TO E_S904 .
*      ENDIF.
*    ELSE .
*      PERFORM GET_MVKE USING W_S904-MATNR .
*      IF W_MVKE IS INITIAL .
*        CONTINUE .
** 2012/06/11 ADD START
*      ELSE.
*        SORT T_MVKE BY MATNR.
** 2012/06/11 ADD END
*      ENDIF .
*      IF W_S904-PRODH IS INITIAL .
*        PERFORM MVKE_MOD .
*        APPEND W_S904 TO E_S904 .
*      ELSEIF W_S904-PRODH NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S904 TO E_S904 .
*      ENDIF.
*    ENDIF .
*  ENDLOOP .
*
*  LOOP AT T_S801 INTO W_S801 .
*    CLEAR W_MVKE .
*    READ TABLE T_MVKE INTO W_MVKE
** 2012/06/11 MOD START
**     WITH KEY MATNR = W_S801-MATNR .
*     WITH KEY MATNR = W_S801-MATNR
*     BINARY SEARCH.
** 2012/06/11 MOD END
*    IF SY-SUBRC EQ 0 .
*      IF W_S801-PRDHA NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S801 TO E_S801 .
*      ENDIF.
*    ELSE .
*      PERFORM GET_MVKE USING W_S801-MATNR .
*      IF W_MVKE IS INITIAL .
*        CONTINUE .
** 2012/06/11 ADD START
*      ELSE.
*        SORT T_MVKE BY MATNR.
** 2012/06/11 ADD END
*      ENDIF .
*      IF W_S801-PRDHA IS INITIAL .
*        PERFORM MVKE_MOD .
*        APPEND W_S801 TO E_S801 .
*      ELSEIF W_S801-PRDHA NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S801 TO E_S801 .
*      ENDIF.
*    ENDIF .
*  ENDLOOP .
*
*  LOOP AT T_S802 INTO W_S802 .
*    CLEAR W_MVKE .
*    READ TABLE T_MVKE INTO W_MVKE
** 2012/06/11 MOD START
**     WITH KEY MATNR = W_S802-MATNR .
*     WITH KEY MATNR = W_S802-MATNR
*     BINARY SEARCH.
** 2012/06/11 MOD END
*    IF SY-SUBRC EQ 0 .
*      IF W_S802-PRDHA NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S802 TO E_S802 .
*      ENDIF.
*    ELSE .
*      PERFORM GET_MVKE USING W_S802-MATNR .
*      IF W_MVKE IS INITIAL .
*        CONTINUE .
** 2012/06/11 ADD START
*      ELSE.
*        SORT T_MVKE BY MATNR.
** 2012/06/11 ADD END
*      ENDIF .
*      IF W_S802-PRDHA IS INITIAL .
*        PERFORM MVKE_MOD .
*        APPEND W_S802 TO E_S802 .
*      ELSEIF W_S802-PRDHA NE W_MVKE-PRODH .
*        PERFORM MVKE_MOD .
*        APPEND W_S802 TO E_S802 .
*      ENDIF.
*    ENDIF .
*  ENDLOOP .
*ENDFORM.                    " Data_Check
*2013/01/09 DEL END<<

*&---------------------------------------------------------------------*
*&      Form  List_Out
*&---------------------------------------------------------------------*
*       対象データ一覧出力
*----------------------------------------------------------------------*
FORM LIST_OUT.
LOOP AT T_MVKE INTO W_MVKE WHERE CFLAG EQ 'X' .
WRITE:/ W_MVKE-MATNR , W_MVKE-PRODH .

FORMAT COLOR OFF .
WRITE / 'S901' .
WRITE / '【削除対象】' .
LOOP AT E_S901 INTO W_S901 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S901' .
ENDLOOP .
FORMAT COLOR 2.
LOOP AT D_S901 INTO W_S901 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S901' .
ENDLOOP .
FORMAT COLOR 3.
WRITE / '【更新対象】' .
LOOP AT M_S901 INTO W_S901 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S901' .
ENDLOOP .
FORMAT COLOR OFF .
WRITE / 'S902' .
WRITE / '【削除対象】' .
LOOP AT E_S902 INTO W_S902 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S902' .
ENDLOOP .
FORMAT COLOR 2.
LOOP AT D_S902 INTO W_S902 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S902' .
ENDLOOP .
FORMAT COLOR 3.
WRITE / '【更新対象】' .
LOOP AT M_S902 INTO W_S902 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S902' .
ENDLOOP .
FORMAT COLOR OFF .
WRITE / 'S903' .
WRITE / '【削除対象】' .
LOOP AT E_S903 INTO W_S903 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S903' .
ENDLOOP .
FORMAT COLOR 2.
LOOP AT D_S903 INTO W_S903 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S903' .
ENDLOOP .
FORMAT COLOR 3.
WRITE / '【更新対象】' .
LOOP AT M_S903 INTO W_S903 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S903' .
ENDLOOP .
FORMAT COLOR OFF .
WRITE / 'S904' .
WRITE / '【削除対象】' .
LOOP AT E_S904 INTO W_S904 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S904' .
ENDLOOP .
FORMAT COLOR 2.
LOOP AT D_S904 INTO W_S904 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S904' .
ENDLOOP .
FORMAT COLOR 3.
WRITE / '【更新対象】' .
LOOP AT M_S904 INTO W_S904 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S904' .
ENDLOOP .
FORMAT COLOR OFF .
WRITE / 'S801' .
WRITE / '【削除対象】' .
LOOP AT E_S801 INTO W_S801 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S801' .
ENDLOOP .
FORMAT COLOR 2.
LOOP AT D_S801 INTO W_S801 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S801' .
ENDLOOP .
FORMAT COLOR 3.
WRITE / '【更新対象】' .
LOOP AT M_S801 INTO W_S801 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S801' .
ENDLOOP .
FORMAT COLOR OFF .
WRITE / 'S802' .
WRITE / '【削除対象】' .
LOOP AT E_S802 INTO W_S802 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S802' .
ENDLOOP .
FORMAT COLOR 2.
LOOP AT D_S802 INTO W_S802 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S802' .
ENDLOOP .
FORMAT COLOR 3.
WRITE / '【更新対象】' .
LOOP AT M_S802 INTO W_S802 WHERE MATNR EQ W_MVKE-MATNR .
PERFORM WRITE_LINE USING 'S802' .
ENDLOOP .
FORMAT COLOR OFF .

CLEAR :W_MVKE .
ULINE .

ENDLOOP .
ENDFORM.                    " List_Out
*2013/01/09 DEL START>>
**&---------------------------------------------------------------------*
**&      Form  Data_Mod
**&---------------------------------------------------------------------*
**       更新用レコードの作製
**----------------------------------------------------------------------*
**  -->  p1        text
**  <--  p2        text
**----------------------------------------------------------------------*
*FORM DATA_MOD.
** 作業領域
*  DATA : L_S901 TYPE S901 ,
*         L_S902 TYPE S902 ,
*         L_S903 TYPE S903 ,
*         L_S904 TYPE S904 ,
*         L_S801 TYPE S801 ,
*         L_S802 TYPE S802 .
** 作業領域
*  DATA : TMP_S901 TYPE S901 ,
*         TMP_S902 TYPE S902 ,
*         TMP_S903 TYPE S903 ,
*         TMP_S904 TYPE S904 ,
*         TMP_S801 TYPE S801 ,
*         TMP_S802 TYPE S802 .
*
**** S901
*  CLEAR : W_S901 .
*  READ TABLE E_S901 INTO TMP_S901 INDEX 1 .
*  CLEAR : TMP_S901-PRODH ,
*          TMP_S901-NETWR ,
*          TMP_S901-WAVWR ,
*          TMP_S901-ZZARAIGAKU .
*  LOOP AT E_S901 INTO L_S901 .
*    CLEAR : L_S901-PRODH .
*    IF L_S901(93) EQ TMP_S901(93) .
*      ADD : L_S901-NETWR TO TMP_S901-NETWR ,
*            L_S901-WAVWR TO TMP_S901-WAVWR ,
*            L_S901-ZZARAIGAKU TO TMP_S901-ZZARAIGAKU .
*    ELSE .
*      READ TABLE T_MVKE INTO W_MVKE
*            WITH KEY MATNR = TMP_S901-MATNR
** 2012/05/07 ADD START
*            BINARY SEARCH.
** 2012/05/07 ADD END
*      MOVE W_MVKE-PRODH TO TMP_S901-PRODH .
*      READ TABLE T_S901 INTO W_S901 WITH KEY
*                        SSOUR = TMP_S901-SSOUR
*                        VRSIO = TMP_S901-VRSIO
*                        SPMON = TMP_S901-SPMON
*                        SPTAG = TMP_S901-SPTAG
*                        SPWOC = TMP_S901-SPWOC
*                        SPBUP = TMP_S901-SPBUP
*                        VKORG = TMP_S901-VKORG
*                        VKBUR = TMP_S901-VKBUR
*                        VKGRP = TMP_S901-VKGRP
*                        PKUNAG = TMP_S901-PKUNAG
*                        PRODH = TMP_S901-PRODH
*                        MATNR = TMP_S901-MATNR
** 2012/05/07 ADD START
*                        BINARY SEARCH
** 2012/05/07 ADD END
*.
*      IF SY-SUBRC EQ 0 .
*        APPEND W_S901 TO D_S901 .
*        ADD : TMP_S901-NETWR TO W_S901-NETWR ,
*              TMP_S901-WAVWR TO W_S901-WAVWR ,
*              TMP_S901-ZZARAIGAKU TO W_S901-ZZARAIGAKU .
*      ELSE .
*        MOVE TMP_S901 TO W_S901 .
*      ENDIF .
*      APPEND W_S901 TO M_S901 .
*      CLEAR : W_S901 , TMP_S901 .
*      MOVE L_S901 TO TMP_S901 .
*    ENDIF .
*  ENDLOOP .
*  IF NOT TMP_S901 IS INITIAL .
*    READ TABLE T_MVKE INTO W_MVKE
*           WITH KEY MATNR = TMP_S901-MATNR
** 2012/05/07 ADD START
*           BINARY SEARCH.
** 2012/05/07 ADD END
*    MOVE W_MVKE-PRODH TO TMP_S901-PRODH .
*    READ TABLE T_S901 INTO W_S901 WITH KEY
*                      SSOUR = TMP_S901-SSOUR
*                      VRSIO = TMP_S901-VRSIO
*                      SPMON = TMP_S901-SPMON
*                      SPTAG = TMP_S901-SPTAG
*                      SPWOC = TMP_S901-SPWOC
*                      SPBUP = TMP_S901-SPBUP
*                      VKORG = TMP_S901-VKORG
*                      VKBUR = TMP_S901-VKBUR
*                      VKGRP = TMP_S901-VKGRP
*                      PKUNAG = TMP_S901-PKUNAG
*                      PRODH = TMP_S901-PRODH
*                      MATNR = TMP_S901-MATNR
** 2012/05/07 ADD START
*                      BINARY SEARCH
** 2012/05/07 ADD END
*.
*    IF SY-SUBRC EQ 0 .
*      APPEND W_S901 TO D_S901 .
*      ADD : TMP_S901-NETWR TO W_S901-NETWR ,
*            TMP_S901-WAVWR TO W_S901-WAVWR ,
*            TMP_S901-ZZARAIGAKU TO W_S901-ZZARAIGAKU .
*    ELSE .
*      MOVE TMP_S901 TO W_S901 .
*    ENDIF .
*    APPEND W_S901 TO M_S901 .
*  ENDIF .
** 2012/11/27 ADD START
*  FREE T_S901.
** 2012/11/27 ADD END
**** S902
*  CLEAR : W_S902 .
*  READ TABLE E_S902 INTO TMP_S902 INDEX 1 .
*  CLEAR : TMP_S902-PRODH ,
*          TMP_S902-NETWR ,
*          TMP_S902-WAVWR ,
*          TMP_S902-ZZARAIGAKU ,
*          TMP_S902-UMMENGE .
*  LOOP AT E_S902 INTO L_S902 .
*    CLEAR : L_S902-PRODH .
*    IF L_S902(114) EQ TMP_S902(114) .
*      ADD : L_S902-NETWR TO TMP_S902-NETWR ,
*            L_S902-WAVWR TO TMP_S902-WAVWR ,
*            L_S902-ZZARAIGAKU TO TMP_S902-ZZARAIGAKU ,
*            L_S902-UMMENGE TO TMP_S902-UMMENGE .
*    ELSE .
*      READ TABLE T_MVKE INTO W_MVKE
*            WITH KEY MATNR = TMP_S902-MATNR
** 2012/05/07 ADD START
*            BINARY SEARCH.
** 2012/05/07 ADD END
*      MOVE W_MVKE-PRODH TO TMP_S902-PRODH .
*      READ TABLE T_S902 INTO W_S902 WITH KEY
*                      SPMON = TMP_S902-SPMON
*                      VKORG = TMP_S902-VKORG
*                      VKBUR = TMP_S902-VKBUR
*                      VKGRP = TMP_S902-VKGRP
*                      KDGRP = TMP_S902-KDGRP
*                      ZZKUNNR1C = TMP_S902-ZZKUNNR1C
*                      PKUNAG = TMP_S902-PKUNAG
*                      PRODH = TMP_S902-PRODH
*                      MATKL = TMP_S902-MATKL
*                      MATNR = TMP_S902-MATNR
*                      VRSIO = TMP_S902-VRSIO
*                      SPTAG = TMP_S902-SPTAG
*                      SPWOC = TMP_S902-SPWOC
*                      SPBUP = TMP_S902-SPBUP
*                      SSOUR = TMP_S902-SSOUR
** 2012/05/07 ADD START
*                      BINARY SEARCH
** 2012/05/07 ADD END
*.
*      IF SY-SUBRC EQ 0 .
*        APPEND W_S902 TO D_S902 .
*        ADD : TMP_S902-NETWR TO W_S902-NETWR ,
*              TMP_S902-WAVWR TO W_S902-WAVWR ,
*              TMP_S902-ZZARAIGAKU TO W_S902-ZZARAIGAKU ,
*              TMP_S902-UMMENGE TO W_S902-UMMENGE .
*      ELSE .
*        MOVE TMP_S902 TO W_S902 .
*      ENDIF .
*      APPEND W_S902 TO M_S902 .
*      CLEAR : W_S902 , TMP_S902 .
*      MOVE L_S902 TO TMP_S902 .
*    ENDIF .
*  ENDLOOP .
*  IF NOT TMP_S902 IS INITIAL .
*    READ TABLE T_MVKE INTO W_MVKE
*           WITH KEY MATNR = TMP_S902-MATNR
** 2012/05/07 ADD START
*           BINARY SEARCH.
** 2012/05/07 ADD END
*    MOVE W_MVKE-PRODH TO TMP_S902-PRODH .
*    READ TABLE T_S902 INTO W_S902 WITH KEY
*                      SPMON = TMP_S902-SPMON
*                      VKORG = TMP_S902-VKORG
*                      VKBUR = TMP_S902-VKBUR
*                      VKGRP = TMP_S902-VKGRP
*                      KDGRP = TMP_S902-KDGRP
*                      ZZKUNNR1C = TMP_S902-ZZKUNNR1C
*                      PKUNAG = TMP_S902-PKUNAG
*                      PRODH = TMP_S902-PRODH
*                      MATKL = TMP_S902-MATKL
*                      MATNR = TMP_S902-MATNR
*                      VRSIO = TMP_S902-VRSIO
*                      SPTAG = TMP_S902-SPTAG
*                      SPWOC = TMP_S902-SPWOC
*                      SPBUP = TMP_S902-SPBUP
*                      SSOUR = TMP_S902-SSOUR
** 2012/05/07 ADD START
*                      BINARY SEARCH
** 2012/05/07 ADD END
*.
*    IF SY-SUBRC EQ 0 .
*      APPEND W_S902 TO D_S902 .
*      ADD : TMP_S902-NETWR TO W_S902-NETWR ,
*            TMP_S902-WAVWR TO W_S902-WAVWR ,
*            TMP_S902-ZZARAIGAKU TO W_S902-ZZARAIGAKU ,
*            TMP_S902-UMMENGE TO W_S902-UMMENGE .
*    ELSE .
*      MOVE TMP_S902 TO W_S902 .
*    ENDIF .
*    APPEND W_S902 TO M_S902 .
*  ENDIF .
** 2012/11/27 ADD START
*  FREE T_S902.
** 2012/11/27 ADD END
**** S903
*  CLEAR : W_S903 .
*  READ TABLE E_S903 INTO TMP_S903 INDEX 1 .
*  CLEAR : TMP_S903-PRODH ,
*          TMP_S903-NETWR ,
*          TMP_S903-WAVWR ,
*          TMP_S903-ZZARAIGAKU .
*  LOOP AT E_S903 INTO L_S903 .
*    CLEAR : L_S903-PRODH .
*    IF L_S903(102) EQ TMP_S903(102) .
*      ADD : L_S903-NETWR TO TMP_S903-NETWR ,
*            L_S903-WAVWR TO TMP_S903-WAVWR ,
*            L_S903-ZZARAIGAKU TO TMP_S903-ZZARAIGAKU .
*    ELSE .
*      READ TABLE T_MVKE INTO W_MVKE
*            WITH KEY MATNR = TMP_S903-MATNR
** 2012/05/07 ADD START
*            BINARY SEARCH.
** 2012/05/07 ADD END
*      MOVE W_MVKE-PRODH TO TMP_S903-PRODH .
*      READ TABLE T_S903 INTO W_S903 WITH KEY
*                        SPMON = TMP_S903-SPMON
*                        VKORG = TMP_S903-VKORG
*                        VKBUR = TMP_S903-VKBUR
*                        VKGRP = TMP_S903-VKGRP
*                        PKUNAG = TMP_S903-PKUNAG
*                        PRODH = TMP_S903-PRODH
*                        MVGR1 = TMP_S903-MVGR1
*                        MVGR2 = TMP_S903-MVGR2
*                        MVGR3 = TMP_S903-MVGR3
*                        MATNR = TMP_S903-MATNR
*                        VRSIO = TMP_S903-VRSIO
*                        SPTAG = TMP_S903-SPTAG
*                        SPWOC = TMP_S903-SPWOC
*                        SPBUP = TMP_S903-SPBUP
*                        SSOUR = TMP_S903-SSOUR
** 2012/05/07 ADD START
*                        BINARY SEARCH
** 2012/05/07 ADD END
*.
*      IF SY-SUBRC EQ 0 .
*        APPEND W_S903 TO D_S903 .
*        ADD : TMP_S903-NETWR TO W_S903-NETWR ,
*              TMP_S903-WAVWR TO W_S903-WAVWR ,
*              TMP_S903-ZZARAIGAKU TO W_S903-ZZARAIGAKU .
*      ELSE .
*        MOVE TMP_S903 TO W_S903 .
*      ENDIF .
*      APPEND W_S903 TO M_S903 .
*      CLEAR : W_S903 , TMP_S903 .
*      MOVE L_S903 TO TMP_S903 .
*    ENDIF .
*  ENDLOOP .
*  IF NOT TMP_S903 IS INITIAL .
*    READ TABLE T_MVKE INTO W_MVKE
*           WITH KEY MATNR = TMP_S903-MATNR
** 2012/05/07 ADD START
*           BINARY SEARCH.
** 2012/05/07 ADD END
*    MOVE W_MVKE-PRODH TO TMP_S903-PRODH .
*    READ TABLE T_S903 INTO W_S903 WITH KEY
*                        SPMON = TMP_S903-SPMON
*                        VKORG = TMP_S903-VKORG
*                        VKBUR = TMP_S903-VKBUR
*                        VKGRP = TMP_S903-VKGRP
*                        PKUNAG = TMP_S903-PKUNAG
*                        PRODH = TMP_S903-PRODH
*                        MVGR1 = TMP_S903-MVGR1
*                        MVGR2 = TMP_S903-MVGR2
*                        MVGR3 = TMP_S903-MVGR3
*                        MATNR = TMP_S903-MATNR
*                        VRSIO = TMP_S903-VRSIO
*                        SPTAG = TMP_S903-SPTAG
*                        SPWOC = TMP_S903-SPWOC
*                        SPBUP = TMP_S903-SPBUP
*                        SSOUR = TMP_S903-SSOUR
** 2012/05/07 ADD START
*                        BINARY SEARCH
** 2012/05/07 ADD END
*.
*    IF SY-SUBRC EQ 0 .
*      APPEND W_S903 TO D_S903 .
*      ADD : TMP_S903-NETWR TO W_S903-NETWR ,
*            TMP_S903-WAVWR TO W_S903-WAVWR ,
*            TMP_S903-ZZARAIGAKU TO W_S903-ZZARAIGAKU .
*    ELSE .
*      MOVE TMP_S903 TO W_S903 .
*    ENDIF .
*    APPEND W_S903 TO M_S903 .
*  ENDIF .
** 2012/11/27 ADD START
*  FREE T_S903.
** 2012/11/27 ADD END
****S904
*  CLEAR : W_S904 .
*  READ TABLE E_S904 INTO TMP_S904 INDEX 1 .
*  CLEAR : TMP_S904-PRODH ,
*          TMP_S904-NETWR ,
*          TMP_S904-WAVWR ,
*          TMP_S904-ZZARAIGAKU .
*  LOOP AT E_S904 INTO L_S904 .
*    CLEAR : L_S904-PRODH .
*    IF L_S904(99) EQ TMP_S904(99) .
*      ADD : L_S904-NETWR TO TMP_S904-NETWR ,
*            L_S904-WAVWR TO TMP_S904-WAVWR ,
*            L_S904-ZZARAIGAKU TO TMP_S904-ZZARAIGAKU .
*    ELSE .
*      READ TABLE T_MVKE INTO W_MVKE
*            WITH KEY MATNR = TMP_S904-MATNR
** 2012/05/07 ADD START
*            BINARY SEARCH.
** 2012/05/07 ADD END
*      MOVE W_MVKE-PRODH TO TMP_S904-PRODH .
*      READ TABLE T_S904 INTO W_S904 WITH KEY
*                        SSOUR = TMP_S904-SSOUR
*                        VRSIO = TMP_S904-VRSIO
*                        SPMON = TMP_S904-SPMON
*                        SPTAG = TMP_S904-SPTAG
*                        SPWOC = TMP_S904-SPWOC
*                        SPBUP = TMP_S904-SPBUP
*                        VKORG = TMP_S904-VKORG
*                        MVGR4 = TMP_S904-MVGR4
*                        VKBUR = TMP_S904-VKBUR
*                        VKGRP = TMP_S904-VKGRP
*                        PKUNAG = TMP_S904-PKUNAG
*                        PRODH = TMP_S904-PRODH
*                        KVGR1 = TMP_S904-KVGR1
*                        MATNR = TMP_S904-MATNR
** 2012/05/07 ADD START
*                        BINARY SEARCH
** 2012/05/07 ADD END
*.
*      IF SY-SUBRC EQ 0 .
*        APPEND W_S904 TO D_S904 .
*        ADD : TMP_S904-NETWR TO W_S904-NETWR ,
*              TMP_S904-WAVWR TO W_S904-WAVWR ,
*              TMP_S904-ZZARAIGAKU TO W_S904-ZZARAIGAKU .
*      ELSE .
*        MOVE TMP_S904 TO W_S904 .
*      ENDIF .
*      APPEND W_S904 TO M_S904 .
*      CLEAR : W_S904 , TMP_S904 .
*      MOVE L_S904 TO TMP_S904 .
*    ENDIF .
*  ENDLOOP .
*  IF NOT TMP_S904 IS INITIAL .
*    READ TABLE T_MVKE INTO W_MVKE
*           WITH KEY MATNR = TMP_S904-MATNR
** 2012/05/07 ADD START
*           BINARY SEARCH.
** 2012/05/07 ADD END
*    MOVE W_MVKE-PRODH TO TMP_S904-PRODH .
*    READ TABLE T_S904 INTO W_S904 WITH KEY
*                      SSOUR = TMP_S904-SSOUR
*                      VRSIO = TMP_S904-VRSIO
*                      SPMON = TMP_S904-SPMON
*                      SPTAG = TMP_S904-SPTAG
*                      SPWOC = TMP_S904-SPWOC
*                      SPBUP = TMP_S904-SPBUP
*                      VKORG = TMP_S904-VKORG
*                      MVGR4 = TMP_S904-MVGR4
*                      VKBUR = TMP_S904-VKBUR
*                      VKGRP = TMP_S904-VKGRP
*                      PKUNAG = TMP_S904-PKUNAG
*                      PRODH = TMP_S904-PRODH
*                      KVGR1 = TMP_S904-KVGR1
*                      MATNR = TMP_S904-MATNR
** 2012/05/07 ADD START
*                      BINARY SEARCH
** 2012/05/07 ADD END
*.
*    IF SY-SUBRC EQ 0 .
*      APPEND W_S904 TO D_S904 .
*      ADD : TMP_S904-NETWR TO W_S904-NETWR ,
*            TMP_S904-WAVWR TO W_S904-WAVWR ,
*            TMP_S904-ZZARAIGAKU TO W_S904-ZZARAIGAKU .
*    ELSE .
*      MOVE TMP_S904 TO W_S904 .
*    ENDIF .
*    APPEND W_S904 TO M_S904 .
*  ENDIF .
** 2012/11/27 ADD START
*  FREE T_S904.
** 2012/11/27 ADD END
*
****s801
*  CLEAR : W_S801 .
*  READ TABLE E_S801 INTO TMP_S801 INDEX 1 .
*  CLEAR : TMP_S801-PRDHA ,
*          TMP_S801-REWRT ,
*          TMP_S801-EFFWR ,
*          TMP_S801-WEMNG .
*  LOOP AT E_S801 INTO L_S801 .
*    CLEAR : L_S801-PRDHA .
*    IF L_S801(83) EQ TMP_S801(83) .
*      ADD : L_S801-REWRT TO TMP_S801-REWRT ,
*            L_S801-EFFWR TO TMP_S801-EFFWR ,
*            L_S801-WEMNG TO TMP_S801-WEMNG .
*    ELSE .
*      READ TABLE T_MVKE INTO W_MVKE
*            WITH KEY MATNR = TMP_S801-MATNR
** 2012/05/07 ADD START
*            BINARY SEARCH.
** 2012/05/07 ADD END
*      MOVE W_MVKE-PRODH TO TMP_S801-PRDHA .
*      READ TABLE T_S801 INTO W_S801 WITH KEY
*                        SSOUR = TMP_S801-SSOUR
*                        VRSIO = TMP_S801-VRSIO
*                        SPMON = TMP_S801-SPMON
*                        SPTAG = TMP_S801-SPTAG
*                        SPWOC = TMP_S801-SPWOC
*                        SPBUP = TMP_S801-SPBUP
*                        EKORG = TMP_S801-EKORG
*                        WERKS = TMP_S801-WERKS
*                        PRDHA = TMP_S801-PRDHA
*                        MATNR = TMP_S801-MATNR
*                        EKGRP = TMP_S801-EKGRP
** 2012/05/07 ADD START
*                        BINARY SEARCH
** 2012/05/07 ADD END
*.
*      IF SY-SUBRC EQ 0 .
*        APPEND W_S801 TO D_S801 .
*        ADD : TMP_S801-REWRT TO W_S801-REWRT ,
*              TMP_S801-EFFWR TO W_S801-EFFWR ,
*              TMP_S801-WEMNG TO W_S801-WEMNG ,
*              TMP_S801-MENGE TO W_S801-MENGE .
*      ELSE .
*        MOVE TMP_S801 TO W_S801 .
*      ENDIF .
*      APPEND W_S801 TO M_S801 .
*      CLEAR : W_S801 , TMP_S801 .
*      MOVE L_S801 TO TMP_S801 .
*    ENDIF .
*  ENDLOOP .
*  IF NOT TMP_S801 IS INITIAL .
*    READ TABLE T_MVKE INTO W_MVKE
*           WITH KEY MATNR = TMP_S801-MATNR
** 2012/05/07 ADD START
*           BINARY SEARCH.
** 2012/05/07 ADD END
*    MOVE W_MVKE-PRODH TO TMP_S801-PRDHA .
*    READ TABLE T_S801 INTO W_S801 WITH KEY
*                      SSOUR = TMP_S801-SSOUR
*                      VRSIO = TMP_S801-VRSIO
*                      SPMON = TMP_S801-SPMON
*                      SPTAG = TMP_S801-SPTAG
*                      SPWOC = TMP_S801-SPWOC
*                      SPBUP = TMP_S801-SPBUP
*                      EKORG = TMP_S801-EKORG
*                      WERKS = TMP_S801-WERKS
*                      PRDHA = TMP_S801-PRDHA
*                      MATNR = TMP_S801-MATNR
*                      EKGRP = TMP_S801-EKGRP
** 2012/05/07 ADD START
*                      BINARY SEARCH
** 2012/05/07 ADD END
*.
*    IF SY-SUBRC EQ 0 .
*      APPEND W_S801 TO D_S801 .
*      ADD : TMP_S801-REWRT TO W_S801-REWRT ,
*            TMP_S801-EFFWR TO W_S801-EFFWR ,
*            TMP_S801-WEMNG TO W_S801-WEMNG ,
*            TMP_S801-MENGE TO W_S801-MENGE .
*    ELSE .
*      MOVE TMP_S801 TO W_S801 .
*    ENDIF .
*    APPEND W_S801 TO M_S801 .
*  ENDIF .
** 2012/11/27 ADD START
*  FREE T_S801.
** 2012/11/27 ADD END
****S802
*  CLEAR : W_S802 .
*  READ TABLE E_S802 INTO TMP_S802 INDEX 1 .
*  CLEAR : TMP_S802-PRDHA ,
*          TMP_S802-REWRT ,
*          TMP_S802-EFFWR ,
*          TMP_S802-WEMNG .
*  LOOP AT E_S802 INTO L_S802 .
*    CLEAR : L_S802-PRDHA .
*    IF L_S802(98) EQ TMP_S802(98) .
*      ADD : L_S802-REWRT TO TMP_S802-REWRT ,
*            L_S802-EFFWR TO TMP_S802-EFFWR ,
*            L_S802-WEMNG TO TMP_S802-WEMNG .
*    ELSE .
*      READ TABLE T_MVKE INTO W_MVKE
*            WITH KEY MATNR = TMP_S802-MATNR
** 2012/05/07 ADD START
*            BINARY SEARCH.
** 2012/05/07 ADD END
*      MOVE W_MVKE-PRODH TO TMP_S802-PRDHA .
*      READ TABLE T_S802 INTO W_S802 WITH KEY
*                        SSOUR = TMP_S802-SSOUR
*                        VRSIO = TMP_S802-VRSIO
*                        SPMON = TMP_S802-SPMON
*                        SPTAG = TMP_S802-SPTAG
*                        SPWOC = TMP_S802-SPWOC
*                        SPBUP = TMP_S802-SPBUP
*                        EKORG = TMP_S802-EKORG
*                        WERKS = TMP_S802-WERKS
*                        PRDHA = TMP_S802-PRDHA
*                        MATNR = TMP_S802-MATNR
*                        EKGRP = TMP_S802-EKGRP
*                        EBELN = TMP_S802-EBELN
*                        EBELP = TMP_S802-EBELP
** 2012/05/07 ADD START
*                        BINARY SEARCH
** 2012/05/07 ADD END
*.
*      IF SY-SUBRC EQ 0 .
*        APPEND W_S802 TO D_S802 .
*        ADD : TMP_S802-REWRT TO W_S802-REWRT ,
*              TMP_S802-EFFWR TO W_S802-EFFWR ,
*              TMP_S802-WEMNG TO W_S802-WEMNG ,
*              TMP_S802-MENGE TO W_S802-MENGE .
*      ELSE .
*        MOVE TMP_S802 TO W_S802 .
*      ENDIF .
*      APPEND W_S802 TO M_S802 .
*      CLEAR : W_S802 , TMP_S802 .
*      MOVE L_S802 TO TMP_S802 .
*    ENDIF .
*  ENDLOOP .
*  IF NOT TMP_S802 IS INITIAL .
*    READ TABLE T_MVKE INTO W_MVKE
*           WITH KEY MATNR = TMP_S802-MATNR
** 2012/05/07 ADD START
*           BINARY SEARCH.
** 2012/05/07 ADD END
*    MOVE W_MVKE-PRODH TO TMP_S802-PRDHA .
*    READ TABLE T_S802 INTO W_S802 WITH KEY
*                      SSOUR = TMP_S802-SSOUR
*                      VRSIO = TMP_S802-VRSIO
*                      SPMON = TMP_S802-SPMON
*                      SPTAG = TMP_S802-SPTAG
*                      SPWOC = TMP_S802-SPWOC
*                      SPBUP = TMP_S802-SPBUP
*                      EKORG = TMP_S802-EKORG
*                      WERKS = TMP_S802-WERKS
*                      PRDHA = TMP_S802-PRDHA
*                      MATNR = TMP_S802-MATNR
*                      EKGRP = TMP_S802-EKGRP
*                      EBELN = TMP_S802-EBELN
*                      EBELP = TMP_S802-EBELP
** 2012/05/07 ADD START
*                      BINARY SEARCH
** 2012/05/07 ADD END
*.
*    IF SY-SUBRC EQ 0 .
*      APPEND W_S802 TO D_S802 .
*      ADD : TMP_S802-REWRT TO W_S802-REWRT ,
*            TMP_S802-EFFWR TO W_S802-EFFWR ,
*            TMP_S802-WEMNG TO W_S802-WEMNG ,
*            TMP_S802-MENGE TO W_S802-MENGE .
*    ELSE .
*      MOVE TMP_S802 TO W_S802 .
*    ENDIF .
*    APPEND W_S802 TO M_S802 .
*  ENDIF .
** 2012/11/27 ADD START
*  FREE : T_S802,
*         T_MVKE.
** 2012/11/27 ADD END
*  IF M_S901[] IS INITIAL AND
*     M_S902[] IS INITIAL AND
*     M_S903[] IS INITIAL AND
*     M_S904[] IS INITIAL AND
*     M_S801[] IS INITIAL AND
*     M_S802[] IS INITIAL
*  .
*
*    MESSAGE S400(Z1) WITH '変更対象データが存在しません' .
*    STOP.
*  ENDIF.
*
*ENDFORM.                    " Data_Mod
*2013/01/09 DEL END<<
*&---------------------------------------------------------------------*
*&      Form  get_mvke
*&---------------------------------------------------------------------*
*　品目マスタの販売ビューから品目階層を取得
*----------------------------------------------------------------------*
*      -->P_MATNR  品目コード
*----------------------------------------------------------------------*
FORM GET_MVKE USING    P_MATNR.
SELECT SINGLE MATNR
PRODH
FROM MVKE
INTO CORRESPONDING FIELDS OF W_MVKE
WHERE MATNR EQ P_MATNR
AND VKORG EQ P_VKORG
AND VTWEG EQ P_VTWEG .

IF SY-SUBRC EQ 0 .
APPEND W_MVKE TO T_MVKE .
ENDIF .
ENDFORM.                    " get_mvke
*2013/01/09 DEL START>>
**&---------------------------------------------------------------------*
**&      Form  data_sort
**&---------------------------------------------------------------------*
**       各LISテーブルのキー毎にソートする
**----------------------------------------------------------------------*
*FORM DATA_SORT.
*  SORT : E_S901 BY SSOUR
*                  VRSIO
*                  SPMON
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  VKORG
*                  VKBUR
*                  VKGRP
*                  PKUNAG
**                  PRODH
*                  MATNR ,
** 2012/05/07 ADD START
*         T_S901 BY SSOUR
*                  VRSIO
*                  SPMON
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  VKORG
*                  VKBUR
*                  VKGRP
*                  PKUNAG
*                  PRODH
*                  MATNR ,
** 2012/05/07 ADD END
*         E_S902 BY SPMON
*                  VKORG
*                  VKBUR
*                  VKGRP
*                  KDGRP
*                  ZZKUNNR1C
*                  PKUNAG
**                  PRODH
*                  MATKL
*                  MATNR
*                  VRSIO
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  SSOUR ,
** 2012/05/07 ADD START
*         T_S902 BY SPMON
*                  VKORG
*                  VKBUR
*                  VKGRP
*                  KDGRP
*                  ZZKUNNR1C
*                  PKUNAG
*                  PRODH
*                  MATKL
*                  MATNR
*                  VRSIO
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  SSOUR ,
** 2012/05/07 ADD END
*         E_S903 BY SPMON
*                  VKORG
*                  VKBUR
*                  VKGRP
*                  PKUNAG
**                  PRODH
*                  MVGR1
*                  MVGR2
*                  MVGR3
*                  MATNR
*                  VRSIO
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  SSOUR ,
** 2012/05/07 ADD START
*         T_S903 BY SPMON
*                  VKORG
*                  VKBUR
*                  VKGRP
*                  PKUNAG
*                  PRODH
*                  MVGR1
*                  MVGR2
*                  MVGR3
*                  MATNR
*                  VRSIO
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  SSOUR ,
** 2012/05/07 ADD END
*         E_S904 BY SSOUR
*                  VRSIO
*                  SPMON
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  VKORG
*                  MVGR4
*                  VKBUR
*                  VKGRP
*                  PKUNAG
**                  PRODH
*                  KVGR1
*                  MATNR ,
** 2012/05/07 ADD START
*         T_S904 BY SSOUR
*                  VRSIO
*                  SPMON
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  VKORG
*                  MVGR4
*                  VKBUR
*                  VKGRP
*                  PKUNAG
*                  PRODH
*                  KVGR1
*                  MATNR ,
** 2012/05/07 ADD END
*         E_S801 BY SSOUR
*                  VRSIO
*                  SPMON
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  EKORG
*                  WERKS
**                  PRDHA
*                  MATNR
*                  EKGRP ,
** 2012/05/07 ADD START
*         T_S801 BY SSOUR
*                  VRSIO
*                  SPMON
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  EKORG
*                  WERKS
*                  PRDHA
*                  MATNR
*                  EKGRP ,
** 2012/05/07 ADD END
*         E_S802 BY SSOUR
*                  VRSIO
*                  SPMON
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  EKORG
*                  WERKS
**                  PRDHA
*                  MATNR
*                  EKGRP
*                  EBELN
*                  EBELP ,
** 2012/05/07 ADD START
*         T_S802 BY SSOUR
*                  VRSIO
*                  SPMON
*                  SPTAG
*                  SPWOC
*                  SPBUP
*                  EKORG
*                  WERKS
*                  PRDHA
*                  MATNR
*                  EKGRP
*                  EBELN
*                  EBELP .
*
** 2012/06/11 DEL START
**  SORT T_MVKE BY MATNR.
** 2012/06/11 DEL END
** 2012/05/07 ADD END
*ENDFORM.                    " data_sort
*2013/01/09 DEL END<<


*---------------------------------------------------------------------*
*       FORM WRITE_LINE                                               *
*---------------------------------------------------------------------*
*       テーブルに合わせた形で一覧行を出力する
*---------------------------------------------------------------------*
*  -->  P_TABLE                                                       *
*---------------------------------------------------------------------*
FORM WRITE_LINE USING P_TABLE .
CASE P_TABLE .
WHEN  'S901' .
WRITE : / W_S901-SPMON ,
W_S901-VKORG ,
W_S901-VKBUR ,
W_S901-VKGRP ,
W_S901-PKUNAG ,
W_S901-PRODH ,
W_S901-MATNR ,
W_S901-NETWR CURRENCY W_S901-STWAE ,
W_S901-WAVWR CURRENCY W_S901-STWAE ,
W_S901-ZZARAIGAKU CURRENCY W_S901-STWAE .
WHEN  'S902' .
WRITE : / W_S902-SPMON ,
W_S902-VKORG ,
W_S902-VKBUR ,
W_S902-VKGRP ,
W_S902-KDGRP ,
W_S902-ZZKUNNR1C ,
W_S902-PKUNAG ,
W_S902-PRODH ,
W_S902-MATKL ,
W_S902-MATNR ,
W_S902-NETWR CURRENCY W_S902-STWAE ,
W_S902-WAVWR CURRENCY W_S902-STWAE ,
W_S902-ZZARAIGAKU CURRENCY W_S902-STWAE ,
W_S902-UMMENGE UNIT W_S902-VRKME .
WHEN 'S903' .
WRITE : / W_S903-SPMON ,
W_S903-VKORG ,
W_S903-VKBUR ,
W_S903-VKGRP ,
W_S903-PKUNAG ,
W_S903-PRODH ,
W_S903-MVGR1 ,
W_S903-MVGR2 ,
W_S903-MVGR3 ,
W_S903-MATNR ,
W_S903-NETWR CURRENCY W_S903-STWAE ,
W_S903-WAVWR CURRENCY W_S903-STWAE ,
W_S903-ZZARAIGAKU CURRENCY W_S903-STWAE .

WHEN 'S904' .
WRITE : / W_S904-SPMON ,
W_S904-VKORG ,
W_S904-MVGR4 ,
W_S904-VKBUR ,
W_S904-VKGRP ,
W_S904-PKUNAG ,
W_S904-PRODH ,
W_S904-KVGR1 ,
W_S904-MATNR ,
W_S904-NETWR CURRENCY W_S904-STWAE ,
W_S904-WAVWR CURRENCY W_S904-STWAE ,
W_S904-ZZARAIGAKU CURRENCY W_S904-STWAE .


WHEN  'S801' .
WRITE : / W_S801-SPMON ,
W_S801-EKORG ,
W_S801-WERKS ,
W_S801-PRDHA ,
W_S801-MATNR ,
W_S801-EKGRP ,
W_S801-REWRT CURRENCY W_S801-HWAER ,
W_S801-EFFWR CURRENCY W_S801-HWAER ,
W_S801-WEMNG UNIT W_S801-BASME ,
W_S801-MENGE UNIT W_S801-BASME .

WHEN 'S802' .
WRITE : / W_S802-SPMON ,
W_S802-EKORG ,
W_S802-WERKS ,
W_S802-PRDHA ,
W_S802-MATNR ,
W_S802-EKGRP ,
W_S802-EBELN ,
W_S802-EBELP ,
W_S802-REWRT CURRENCY W_S802-HWAER ,
W_S802-EFFWR CURRENCY W_S802-HWAER ,
W_S802-WEMNG UNIT W_S802-BASME ,
W_S802-MENGE UNIT W_S802-BASME .


ENDCASE .
ENDFORM .

*---------------------------------------------------------------------*
*       FORM DB_MOD                                                   *
*---------------------------------------------------------------------*
*       LISテーブルの更新（Delete/Insert）
*---------------------------------------------------------------------*
FORM DB_MOD .
IF NOT D_S901[] IS INITIAL .
DELETE S901 FROM TABLE D_S901 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.

IF NOT D_S902[] IS INITIAL .
DELETE S902 FROM TABLE D_S902 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.

IF NOT D_S903[] IS INITIAL .
DELETE S903 FROM TABLE D_S903 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.

IF NOT D_S904[] IS INITIAL .
DELETE S904 FROM TABLE D_S904 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.

IF NOT D_S801[] IS INITIAL .
DELETE S801 FROM TABLE D_S801 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.

IF NOT D_S802[] IS INITIAL .
DELETE S802 FROM TABLE D_S802 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.
IF NOT E_S901[] IS INITIAL .
DELETE S901 FROM TABLE E_S901 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.

IF NOT E_S902[] IS INITIAL .
DELETE S902 FROM TABLE E_S902 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.

IF NOT E_S903[] IS INITIAL .

DELETE S903 FROM TABLE E_S903 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.

IF NOT E_S904[] IS INITIAL .
DELETE S904 FROM TABLE E_S904 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.

IF NOT E_S801[] IS INITIAL .
DELETE S801 FROM TABLE E_S801 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.

IF NOT E_S802[] IS INITIAL .
DELETE S802 FROM TABLE E_S802 .
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.
ENDIF.


INSERT S901 FROM TABLE M_S901  ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.

INSERT S902 FROM TABLE M_S902  ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.

INSERT S903 FROM TABLE M_S903  ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.

INSERT S904 FROM TABLE M_S904  ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.

INSERT S801 FROM TABLE M_S801  ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.

INSERT S802 FROM TABLE M_S802  ACCEPTING DUPLICATE KEYS  .

IF SY-SUBRC NE 0 .
ROLLBACK WORK .
MESSAGE E639(Z1) .
EXIT.
ENDIF.

ENDFORM .

*---------------------------------------------------------------------*
*       FORM MVKE_MOD                                                 *
*---------------------------------------------------------------------*
*       対象品目の更新
*---------------------------------------------------------------------*
FORM MVKE_MOD .
* 2012/06/11 ADD START
READ TABLE T_MVKE INTO W_MVKE
WITH KEY MATNR = W_MVKE-MATNR
BINARY SEARCH.
* 2012/06/11 ADD END

MOVE 'X' TO W_MVKE-CFLAG .

MODIFY T_MVKE
FROM W_MVKE
* 2012/06/11 MOD START
INDEX SY-TABIX
*  TRANSPORTING CFLAG
TRANSPORTING CFLAG.
*  WHERE MATNR EQ W_MVKE-MATNR .
* 2012/06/11 MOD END
ENDFORM .
