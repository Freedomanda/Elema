*&---------------------------------------------------------------------*
*&  Include           ZEGMMR0210F00
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  MODIFY_SCREEN
*&---------------------------------------------------------------------*
*       画面制御
*----------------------------------------------------------------------*
FORM MODIFY_SCREEN .
LOOP AT SCREEN.
CASE SCREEN-GROUP1.
WHEN 'TY1'.
IF RB_01 = 'X'.
SCREEN-ACTIVE = '1'.
ELSE.
SCREEN-ACTIVE = '0'.
ENDIF.
WHEN 'TY2'.
IF RB_02 = 'X'.
SCREEN-ACTIVE = '1'.
ELSE.
SCREEN-ACTIVE = '0'.
ENDIF.
ENDCASE.
MODIFY SCREEN.
ENDLOOP.
ENDFORM.                    " MODIFY_SCREEN
*&---------------------------------------------------------------------*
*&      Form  F_INITIALIZATION
*&---------------------------------------------------------------------*
*       初期設定
*----------------------------------------------------------------------*
FORM F_INITIALIZATION .
CLEAR :GT_ONE_STEP_ALL ,
GT_ONE_STEP_N ,
GT_ONE_STEP_E ,
GT_LIPS_B ,
GST_LIPS_B ,
GT_LIPS,
GT_LIPS_S,
GT_DETAIL_STATUS ,
GST_DETAIL_STATUS ,
GT_TWO_STEP_QTY_B ,
GT_TWO_STEP_QTY_S ,
GT_TWO_STEP_QTY ,
GT_TWO_STEP,
GT_TWO_STEP_B ,
GT_TWO_STEP_ALL,
GR_ALVGRID,
GR_CCONTAINER,
GT_FIELDCAT,
GS_LAYOUT,
GST_ONE_STEP,
GT_BDCDATA[],
GT_MESSTAB[].
ENDFORM.                    " F_INITIALIZATION

*&---------------------------------------------------------------------*
*&      Form  CHECK_INPUT
*&---------------------------------------------------------------------*
*        入力チェック
*----------------------------------------------------------------------*
FORM CHECK_INPUT .
* プラント存在チェック
PERFORM CHECK_WERKS.
* プラント入庫保管場所存在チェック
PERFORM CHECK_LGORT.
* 品目コード存在チェック
PERFORM CHECK_MATNR.
* プラントの権限チェック
PERFORM CHECK_WERKS_AUTH.
ENDFORM.                    " CHECK_INPUT
*----------------------------------------------------------------------*
*&      Form  CHECK_WERKS
*&---------------------------------------------------------------------*
*       プラントコード存在チェック
*----------------------------------------------------------------------*
FORM CHECK_WERKS .
DATA: LW_WERKS   TYPE T001W-WERKS.

SELECT SINGLE WERKS
INTO LW_WERKS
FROM T001W
WHERE WERKS = P_WERKS.

IF SY-SUBRC <> 0.
SET CURSOR FIELD 'P_WERKS'.
*   プラント ( &1 ) は存在しません
MESSAGE E004(ZMEGSD01) WITH P_WERKS.
ENDIF.
ENDFORM.                    " CHECK_WERKS
*&---------------------------------------------------------------------*
*       プラント入庫保管場所存在チェック
*----------------------------------------------------------------------*
FORM CHECK_LGORT.
DATA: LW_LGORT   TYPE LGORT_D.
IF RB_01 = 'X'.
IF S_LGORTG IS NOT INITIAL .
SELECT SINGLE LGORT
INTO  LW_LGORT
FROM T001L
WHERE WERKS = P_WERKS
AND  LGORT IN S_LGORTG.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_LGORTG-LOW'.
*   指定されたプラントと保管場所&の整合性がありません
MESSAGE E133(ZMEGSD01) WITH S_LGORTG-LOW.
ENDIF.
ENDIF.
IF P_LGORT IS NOT INITIAL .
SELECT SINGLE LGORT
INTO  LW_LGORT
FROM T001L
WHERE WERKS = P_WERKS
AND  LGORT = P_LGORT.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'P_LGORT'.
*   指定されたプラントと保管場所&の整合性がありません
MESSAGE E133(ZMEGSD01) WITH P_LGORT.
ENDIF.
ENDIF.
ELSEIF RB_02 = 'X'.
IF S_LGORT IS NOT INITIAL .
SELECT SINGLE LGORT
INTO  LW_LGORT
FROM T001L
WHERE WERKS = P_WERKS
AND  LGORT IN S_LGORT.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_LGORT-LOW'.
*   指定されたプラントと保管場所&の整合性がありません
MESSAGE E133(ZMEGSD01) WITH S_LGORT-LOW.
ENDIF.
ENDIF.
IF P_LGORTN IS NOT INITIAL .
SELECT SINGLE LGORT
INTO  LW_LGORT
FROM T001L
WHERE WERKS = P_WERKS
AND  LGORT = P_LGORTN.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'P_LGORTN'.
*   指定されたプラントと保管場所&の整合性がありません
MESSAGE E133(ZMEGSD01) WITH P_LGORTN.
ENDIF.
ENDIF.
ENDIF.
ENDFORM.                    " CHECK_LGORT
*&---------------------------------------------------------------------*
*&      Form  CHECK_MATNR
*&---------------------------------------------------------------------*
*       品目コード存在チェック
*----------------------------------------------------------------------*
FORM CHECK_MATNR .
TYPES: BEGIN OF LTYP_MATNR,
MATNR TYPE MARA-MATNR,
END OF LTYP_MATNR.

DATA: LTD_MATNR   TYPE STANDARD TABLE OF LTYP_MATNR,
LST_MATNR   TYPE LTYP_MATNR.
IF RB_02 = 'X'.
IF S_MATNR IS NOT INITIAL.
SELECT MATNR
INTO TABLE LTD_MATNR
FROM MARA
WHERE MATNR IN S_MATNR.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_MATNR-LOW'.
*   品目コード( &1 ) は存在しません
MESSAGE E134(ZMEGSD01) WITH S_MATNR-LOW.
ENDIF.
ENDIF.
ENDIF.
ENDFORM.                    " CHECK_MATNR
*&---------------------------------------------------------------------*
*&      Form  CHECK_WERKS_AUTH
*&---------------------------------------------------------------------*
*       プラントの権限チェック
*----------------------------------------------------------------------*
FORM CHECK_WERKS_AUTH .
AUTHORITY-CHECK OBJECT 'M_MSEG_WMB'
ID 'WERKS' FIELD P_WERKS
ID 'ACTVT' FIELD '01'.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'P_WERKS'.
*     プラントに対する実行権限がありません
MESSAGE E003(ZMEGSD01).
ENDIF.
ENDFORM.                    " CHECK_WERKS_AUTH
*&---------------------------------------------------------------------
*
*&      Form  CHECK_ROW
*&---------------------------------------------------------------------*
*       行選択のチェック処理
*----------------------------------------------------------------------*

FORM CHECK_ROW_ONE_STEP  .
READ TABLE TD_ONE_STEP TRANSPORTING NO FIELDS
WITH KEY SEL = 'X'.
IF SY-SUBRC <> 0.
MESSAGE E008(ZMEGSD01).
*   行が選択されていません。
ENDIF.
ENDFORM.                    " CHECK_ROW

*&---------------------------------------------------------------------*
*&      Form  CHECK_QTY
*&---------------------------------------------------------------------*
*       在庫転送可否チェック
*----------------------------------------------------------------------*
FORM CHECK_QTY_ONE_STEP CHANGING O_LT_ONE_STEP TYPE TYP_TD_ONE_STEP.
DATA:LT_ONE_STEP    TYPE STANDARD TABLE OF ZSEGSD0038,
LST_ONE_STEP  TYPE  ZSEGSD0038,
LF_XBLNR         TYPE MKPF-XBLNR,
LV_TABIX          TYPE SY-TABIX,
LV_XBLNR_MSG TYPE STRING,
LV_TABIX_MSG  TYPE STRING,
LV_TABIX_STR   TYPE STRING,
LT_MSG            TYPE STANDARD TABLE OF BAPIRET2,
"エラーメッセージ表示内部テーブル
LST_MSG          LIKE LINE OF LT_MSG,"エラーメッセージ構造
LF_LGORT            TYPE LGORT_D,
LV_LGORT_MSG TYPE STRING,
LT_ONE_STEP_TMP TYPE STANDARD TABLE OF ZSEGSD0038,
LST_ONE_STEP_TMP TYPE ZSEGSD0038,
LST_ONE_STEP_TMP1 TYPE ZSEGSD0038,
LR_GRID TYPE REF TO CL_GUI_ALV_GRID.

CLEAR GT_ONE_STEP_N[].

"alvリスト選択した同一参照伝票番号用
LT_ONE_STEP = TD_ONE_STEP.
LOOP AT LT_ONE_STEP INTO  LST_ONE_STEP WHERE  SEL = 'X' .
MOVE-CORRESPONDING LST_ONE_STEP TO LST_ONE_STEP_TMP.
APPEND  LST_ONE_STEP_TMP TO LT_ONE_STEP_TMP .
ENDLOOP.
LOOP AT  LT_ONE_STEP INTO  LST_ONE_STEP.
READ TABLE LT_ONE_STEP_TMP INTO LST_ONE_STEP_TMP
WITH KEY XBLNR = LST_ONE_STEP-XBLNR.
IF SY-SUBRC = 0 .
MOVE-CORRESPONDING LST_ONE_STEP TO LST_ONE_STEP_TMP1.
APPEND  LST_ONE_STEP_TMP1 TO GT_ONE_STEP_N .
ENDIF.
ENDLOOP.
LOOP AT GT_ONE_STEP_N INTO LST_ONE_STEP.
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
* 移動数量 > 在庫数量の場合
IF LST_ONE_STEP-MENGE > LST_ONE_STEP-LABST.
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
CONCATENATE TEXT-001 ':'  LST_ONE_STEP-XBLNR
INTO LV_XBLNR_MSG.
LV_TABIX_STR =  LV_TABIX.
CONCATENATE TEXT-002 ':'  LV_TABIX_STR
INTO LV_TABIX_MSG.
* 在庫が足りないですので、移動数量は在庫数量より少ない行を選択してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '0135'.
LST_MSG-MESSAGE_V1 = LV_XBLNR_MSG.
LST_MSG-MESSAGE_V2 =  LV_TABIX_MSG.
APPEND LST_MSG TO LT_MSG.
ENDIF.
* 入庫先保管場所を入力してください。
IF LST_ONE_STEP-LGORT_NYU IS INITIAL .
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
CONCATENATE TEXT-001 ':'  LST_ONE_STEP-XBLNR
INTO LV_XBLNR_MSG.
LV_TABIX_STR =  LV_TABIX.
CONCATENATE TEXT-002 ':'  LV_TABIX_STR
INTO LV_TABIX_MSG.
*     入庫先保管場所を入力してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '0137'.
LST_MSG-MESSAGE_V1 = LV_XBLNR_MSG.
LST_MSG-MESSAGE_V2 = LV_TABIX_MSG.
APPEND LST_MSG TO LT_MSG.
ELSE.
IF LST_ONE_STEP-LGORT_NYU = LST_ONE_STEP-LGORT.
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
CONCATENATE TEXT-001 ':'  LST_ONE_STEP-XBLNR
INTO LV_XBLNR_MSG.
LV_TABIX_STR =  LV_TABIX.
CONCATENATE TEXT-002 ':'  LV_TABIX_STR
INTO LV_TABIX_MSG.
*      出庫元保管場所と入庫先保管場所は一致しないように入力してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '0138'.
LST_MSG-MESSAGE_V1 = LV_XBLNR_MSG.
LST_MSG-MESSAGE_V2 = LV_TABIX_MSG.
APPEND LST_MSG TO LT_MSG.
ENDIF.
SELECT SINGLE LGORT
INTO  LF_LGORT
FROM T001L
WHERE WERKS  = LST_ONE_STEP-WERKS
AND  LGORT = LST_ONE_STEP-LGORT_NYU.
IF SY-SUBRC <> 0.
*     指定されたプラントと保管場所&の整合性がありません
LV_LGORT_MSG = LST_ONE_STEP-LGORT_NYU.
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '0133'.
LST_MSG-MESSAGE_V1 = LV_LGORT_MSG.
APPEND LST_MSG TO LT_MSG.
ENDIF.
ENDIF.
ENDLOOP.
* 何回入庫時、移動数量の合計と在庫数量の比較
PERFORM CHECK_QTY_ONE_B USING  GT_ONE_STEP_N
CHANGING LT_MSG.

IF LT_MSG[] IS NOT INITIAL.
CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
IMPORTING
E_GRID = LR_GRID.
LR_GRID->REFRESH_TABLE_DISPLAY( ).
ENDIF.

* エラーメッセージ表示
CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
TABLES
I_BAPIRET2_TAB = LT_MSG.

* 移動数量 <= 在庫数量の場合
IF LT_MSG[] IS  INITIAL.
MESSAGE S141(ZMEGSD01).
W_CHECK_PASSED = 'X'.
ELSE.
LEAVE SCREEN.
ENDIF.
O_LT_ONE_STEP  = GT_ONE_STEP_N.
SORT GT_ONE_STEP_N BY XBLNR LGORT_NYU.
ENDFORM.                    " CHECK_QTY

*&---------------------------------------------------------------------*
*&      Form  CHECK_ROW_two_step
*&---------------------------------------------------------------------*
*       行選択のチェック処理(二次)
*----------------------------------------------------------------------*
FORM CHECK_ROW_TWO_STEP .
DATA LT_INDEX TYPE  LVC_T_ROW.
*　選択された行を取得
GR_ALVGRID->GET_SELECTED_ROWS(
IMPORTING
ET_INDEX_ROWS = LT_INDEX    " 選択された行の行数
*      et_row_no     =     " Numeric IDs of Selected Rows
).

IF LINES(  LT_INDEX  ) = 0.
MESSAGE E008(ZMEGSD01) .
*   行が選択されていません。
ENDIF.
ENDFORM.                    " CHECK_ROW_two_step
*&---------------------------------------------------------------------*
*&      Form  CHECK_QTY_TWO_STEP
*&---------------------------------------------------------------------*
*       在庫足りるかチェック処理(二次)
*----------------------------------------------------------------------*
FORM CHECK_QTY_TWO_STEP CHANGING O_LT_TWO_STEP TYPE TYP_TD_TWO_STEP.
DATA: LT_INDEX TYPE  LVC_T_ROW,
LT_ROW_NO TYPE LVC_T_ROID,
LST_ROW_NO LIKE LINE OF LT_ROW_NO,
LT_TWO_STEP TYPE TYP_TD_TWO_STEP,
LST_TWO_STEP TYPE ZSEGSD0039,
LV_FLG_QTY TYPE CHAR1,
LV_FLG_LOCATION TYPE CHAR1,
LV_TABIX TYPE SY-TABIX,
LV_TABIX_MSG  TYPE STRING,
LV_TABIX_STR   TYPE STRING,
LV_LGORT_MSG  TYPE STRING,
LT_MSG            TYPE STANDARD TABLE OF BAPIRET2,
"エラーメッセージ表示内部テーブル
LST_MSG          LIKE LINE OF LT_MSG,"エラーメッセージ構造
LW_LGORT            TYPE LGORT_D,
LV_MATNR_MSG TYPE STRING,
LST_TWO_STEP_TMP TYPE ZSEGSD0039,
LT_TWO_STEP_TMP TYPE TYP_TD_TWO_STEP.

*　選択された行を取得
GR_ALVGRID->GET_SELECTED_ROWS(
IMPORTING
ET_INDEX_ROWS = LT_INDEX    " 選択された行の行数
ET_ROW_NO     =     LT_ROW_NO " " 選択された行の行数NO
).
LT_TWO_STEP = TD_TWO_STEP.
LOOP AT LT_TWO_STEP INTO  LST_TWO_STEP.
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
READ TABLE LT_ROW_NO INTO  LST_ROW_NO
WITH  KEY  ROW_ID =  LV_TABIX.
IF SY-SUBRC = 0.
MOVE-CORRESPONDING  LST_TWO_STEP TO LST_TWO_STEP_TMP.
APPEND LST_TWO_STEP_TMP TO LT_TWO_STEP_TMP.
CLEAR LST_TWO_STEP_TMP.
IF LST_TWO_STEP-MENGE IS INITIAL.
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
CONCATENATE TEXT-004 ':'  LST_TWO_STEP-MATNR
INTO LV_MATNR_MSG.
LV_TABIX_STR =  LV_TABIX.
CONCATENATE TEXT-002 ':'  LV_TABIX_STR
INTO LV_TABIX_MSG.
*       移動数量を入力してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '0136'.
LST_MSG-MESSAGE_V1 = LV_MATNR_MSG.
LST_MSG-MESSAGE_V2 =  LV_TABIX_MSG.
APPEND LST_MSG TO LT_MSG.
ELSE.
* 移動数量 > 在庫数量の場合
IF LST_TWO_STEP-MENGE > LST_TWO_STEP-LABST.
CLEAR LV_TABIX.
LV_TABIX = SY-TABIX.
CONCATENATE TEXT-004 ':'  LST_TWO_STEP-MATNR
INTO LV_MATNR_MSG.
LV_TABIX_STR =  LV_TABIX.
CONCATENATE TEXT-002 ':'  LV_TABIX_STR
INTO LV_TABIX_MSG.
* 在庫が足りないですので、移動数量を在庫数量より少ないように修正してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '135'.
LST_MSG-MESSAGE_V1 = LV_MATNR_MSG.
LST_MSG-MESSAGE_V2 =  LV_TABIX_MSG.
APPEND LST_MSG TO LT_MSG.
ENDIF.
ENDIF.
IF LST_TWO_STEP-LGORT_NYUKO IS INITIAL .
CLEAR LV_TABIX.
LV_TABIX = SY-TABIX.
CONCATENATE TEXT-004 ':'  LST_TWO_STEP-MATNR
INTO LV_MATNR_MSG.
LV_TABIX_STR =  LV_TABIX.
CONCATENATE TEXT-002 ':'  LV_TABIX_STR
INTO LV_TABIX_MSG.
*     入庫先保管場所を入力してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '0137'.
LST_MSG-MESSAGE_V1 = LV_MATNR_MSG.
LST_MSG-MESSAGE_V2 =  LV_TABIX_MSG.
APPEND LST_MSG TO LT_MSG.
ELSE.
IF LST_TWO_STEP-LGORT_NYUKO = LST_TWO_STEP-LGORT.
CLEAR LV_TABIX.
LV_TABIX = SY-TABIX.
CONCATENATE TEXT-004 ':'  LST_TWO_STEP-MATNR
INTO LV_MATNR_MSG.
LV_TABIX_STR =  LV_TABIX.
CONCATENATE TEXT-002 ':'  LV_TABIX_STR
INTO LV_TABIX_MSG.
*      出庫元保管場所と入庫先保管場所は一致しないように入力してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '0138'.
LST_MSG-MESSAGE_V1 = LV_MATNR_MSG.
LST_MSG-MESSAGE_V2 =  LV_TABIX_MSG.
APPEND LST_MSG TO LT_MSG.
ELSE.
SELECT SINGLE LGORT
INTO  LW_LGORT
FROM MARD
WHERE WERKS  = LST_TWO_STEP-WERKS
AND  LGORT =  LST_TWO_STEP-LGORT_NYUKO.
IF SY-SUBRC <> 0.
LV_LGORT_MSG  = LST_TWO_STEP-LGORT_NYUKO.
*     指定されたプラントと保管場所&の整合性がありません
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '0133'.
LST_MSG-MESSAGE_V1 = LV_LGORT_MSG.
APPEND LST_MSG TO LT_MSG.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
ENDLOOP.
* 何回入庫時、移動数量の合計と在庫数量の比較
PERFORM CHECK_QTY_TWO_B USING  LT_TWO_STEP_TMP
CHANGING LT_MSG.
IF LT_MSG[] IS NOT INITIAL.
GR_ALVGRID->REFRESH_TABLE_DISPLAY(
).
ENDIF.
GR_ALVGRID->SET_SELECTED_ROWS(
EXPORTING
IT_ROW_NO =   LT_ROW_NO
IT_INDEX_ROWS = LT_INDEX
).
IF LINES( LT_MSG ) = 1 .
READ TABLE LT_MSG INTO LST_MSG INDEX 1.
MESSAGE ID LST_MSG-ID TYPE 'S'
NUMBER LST_MSG-NUMBER
WITH LST_MSG-MESSAGE_V1
LST_MSG-MESSAGE_V2
LST_MSG-MESSAGE_V3
LST_MSG-MESSAGE_V4
DISPLAY LIKE 'E'.
RETURN.
ENDIF.
* エラーメッセージ表示
CALL FUNCTION 'C14ALD_BAPIRET2_SHOW'
TABLES
I_BAPIRET2_TAB = LT_MSG.
IF LT_MSG[] IS INITIAL.
MESSAGE S141(ZMEGSD01).
W_CHECK_PASSED = 'X'.
ELSE.
LEAVE SCREEN.
ENDIF.
O_LT_TWO_STEP = LT_TWO_STEP_TMP.
ENDFORM.                    " CHECK_QTY_TWO_STEP
*&---------------------------------------------------------------------*
*&      Form  CHECK_QTY_B
*&---------------------------------------------------------------------*
*       何回入庫時数量チェック一時
*----------------------------------------------------------------------*
FORM CHECK_QTY_ONE_B  USING I_ONE_STEP_N TYPE TYP_TD_ONE_STEP
CHANGING O_LT_MSG TYPE  TYP_MSG .
TYPES: BEGIN OF TYP_ONE,
XBLNR TYPE XBLNR,
MATNR  TYPE MATNR,
WERKS TYPE WERKS_D,
LGORT TYPE LGORT_D,
CHARG  TYPE CHARG_D,
KDAUF TYPE ZVBELN,
KDPOS TYPE ZPOSNR,
BKTXT  TYPE BKTXT,
BUDAT  TYPE BUDAT,
LIFNR    TYPE LIFNR,
NAME1  TYPE ZNAME1,
MAKTX  TYPE MAKTX,
LGORT_NYU  TYPE LGORT_D,
MENGE TYPE ZMENGE_M,
MEINS  TYPE MEINS,
LABST TYPE ZMENGE_L,
MEINS_ZAIKO   TYPE MEINS,
SEL TYPE ZESEL,
END OF TYP_ONE.
DATA : LT_ONE_BATCH TYPE STANDARD TABLE OF TYP_ONE,
LT_ONE_BATCH_TMP TYPE STANDARD TABLE OF TYP_ONE,
"alvリスト選択した同一参照伝票番号用ロット
LT_ONE_NOBATCH TYPE STANDARD TABLE OF TYP_ONE,
LT_ONE_NOBATCH_TMP TYPE STANDARD TABLE OF TYP_ONE,
LT_ONE_SAL TYPE STANDARD TABLE OF TYP_ONE,
LT_ONE_SAL_TMP TYPE STANDARD TABLE OF TYP_ONE,
LT_ONE_TMP TYPE STANDARD TABLE OF TYP_ONE,
LST_ONE TYPE TYP_ONE,
LST_ONE_TMP TYPE TYP_ONE,
LST_ONE_STEP  TYPE  ZSEGSD0038,
LV_TABIX TYPE SY-TABIX,
LV_XBLNR_MSG1 TYPE STRING,
LV_XBLNR_MSG2 TYPE STRING,
LV_XBLNR_MSG3 TYPE STRING,
LV_XBLNR_MSG4 TYPE STRING,
LV_TABIX_MSG  TYPE STRING,
LV_TABIX_STR   TYPE STRING,
LST_MSG TYPE BAPIRET2.
DATA: LT_ONE_STEP_QTY    TYPE TYP_TD_QTY,
LT_ONE_STEP_QTY_B TYPE TYP_TD_QTY,
LT_ONE_STEP_QTY_S TYPE TYP_TD_QTY,
LT_LIPS_B                 TYPE TYP_TD_LIPS,
LT_ONE_BATCH_TMP1 TYPE TYP_TD_ONE_STEP,
LT_ONE_SAL_TMP1 TYPE TYP_TD_ONE_STEP,
LT_ONE_NOBATCH_TMP1 TYPE TYP_TD_ONE_STEP,
LST_ONE_TMP1 TYPE ZSEGSD0038.
LOOP AT GT_ONE_STEP_N INTO LST_ONE_STEP.
CLEAR LST_ONE_STEP-XBLNR.
IF LST_ONE_STEP-KDAUF IS NOT INITIAL .
*     受注在庫
MOVE-CORRESPONDING LST_ONE_STEP TO LST_ONE.
APPEND LST_ONE TO LT_ONE_SAL.
ELSE.
IF LST_ONE_STEP-CHARG IS NOT INITIAL.
*        利用可能在庫ロットあり
MOVE-CORRESPONDING LST_ONE_STEP TO LST_ONE.
APPEND LST_ONE TO LT_ONE_BATCH .

ELSE.
*     利用可能在庫ロットなし
MOVE-CORRESPONDING LST_ONE_STEP TO LST_ONE.
APPEND LST_ONE TO LT_ONE_NOBATCH .
ENDIF.
ENDIF.
CLEAR: LST_ONE_STEP,
LST_ONE.
ENDLOOP.
*  最新の在庫の取得
*   受注在庫取得
IF LT_ONE_SAL IS NOT INITIAL .
LOOP AT  LT_ONE_SAL INTO LST_ONE  .
MOVE-CORRESPONDING LST_ONE TO  LST_ONE_TMP1 .
APPEND LST_ONE_TMP1 TO LT_ONE_SAL_TMP1.
CLEAR  LST_ONE_TMP1 .
ENDLOOP.
PERFORM GET_QTY_ONE_STEP_S USING LT_ONE_SAL_TMP1
CHANGING LT_ONE_STEP_QTY_S.
IF  LT_ONE_STEP_QTY_S IS NOT INITIAL .
CLEAR LT_LIPS_B[].
PERFORM GET_MISYUKO_ONE_STEP_S USING LT_ONE_STEP_QTY_S
CHANGING LT_LIPS_B.
GT_LIPS_B = LT_LIPS_B.
IF GT_LIPS_B[] IS NOT INITIAL.
PERFORM EDIT_QTY_ONE_STEP_S CHANGING LT_ONE_STEP_QTY_S.
ENDIF.
* 出力先の在庫数量、単位、保管場所の編集(ロットあり)一時
PERFORM SET_OUTPUT_ONE_STEP_S USING LT_ONE_STEP_QTY_S
CHANGING LT_ONE_SAL_TMP1.
ENDIF.
ENDIF.
CLEAR LT_ONE_SAL.
LOOP AT LT_ONE_SAL_TMP1 INTO LST_ONE_TMP1 .
MOVE-CORRESPONDING LST_ONE_TMP1 TO  LST_ONE .
APPEND LST_ONE  TO LT_ONE_SAL.
CLEAR LST_ONE.
ENDLOOP.
*  最新の在庫の取得
*  ロット管理ありのデータの利用可能在庫取得
IF LT_ONE_BATCH IS NOT INITIAL.
LOOP AT  LT_ONE_BATCH INTO LST_ONE  .
MOVE-CORRESPONDING LST_ONE TO  LST_ONE_TMP1 .
APPEND LST_ONE_TMP1 TO LT_ONE_BATCH_TMP1.
CLEAR  LST_ONE_TMP1 .
ENDLOOP.
PERFORM GET_QTY_ONE_STEP_B USING LT_ONE_BATCH_TMP1
CHANGING LT_ONE_STEP_QTY_B.
* 出荷未出庫の分を取得する
IF LT_ONE_STEP_QTY_B IS NOT INITIAL.
PERFORM GET_MISYUKO_ONE_STEP_B USING LT_ONE_STEP_QTY_B
CHANGING LT_LIPS_B.
GT_LIPS_B = LT_LIPS_B.
IF GT_LIPS_B[] IS NOT INITIAL.
PERFORM EDIT_QTY_ONE_STEP_B CHANGING LT_ONE_STEP_QTY_B.
ENDIF.
ENDIF.
* 出力先の在庫数量、単位、保管場所の編集(ロットあり)
PERFORM SET_OUTPUT_ONE_STEP USING LT_ONE_STEP_QTY_B
CHANGING LT_ONE_BATCH_TMP1.
ENDIF.
CLEAR LT_ONE_BATCH.
LOOP AT LT_ONE_BATCH_TMP1 INTO LST_ONE_TMP1 .
MOVE-CORRESPONDING LST_ONE_TMP1 TO  LST_ONE .
APPEND LST_ONE  TO LT_ONE_BATCH.
CLEAR LST_ONE.
ENDLOOP.
*  最新の在庫の取得
*  ロット管理なしのデータの利用可能在庫取得
IF LT_ONE_NOBATCH  IS NOT INITIAL.
LOOP AT  LT_ONE_NOBATCH  INTO LST_ONE  .
MOVE-CORRESPONDING LST_ONE TO  LST_ONE_TMP1 .
APPEND LST_ONE_TMP1 TO LT_ONE_NOBATCH_TMP1.
CLEAR  LST_ONE_TMP1 .
ENDLOOP.
PERFORM GET_QTY_ONE_STEP USING LT_ONE_NOBATCH_TMP1
CHANGING LT_ONE_STEP_QTY.
* 出荷未出庫の分を取得する
IF LT_ONE_STEP_QTY IS NOT INITIAL .
CLEAR LT_LIPS_B[].
PERFORM GET_MISYUKO_ONE_STEP USING LT_ONE_STEP_QTY
CHANGING LT_LIPS_B.
GT_LIPS_B = LT_LIPS_B.
IF GT_LIPS_B[] IS NOT INITIAL.
PERFORM EDIT_QTY_ONE_STEP CHANGING LT_ONE_STEP_QTY.
ENDIF.
ENDIF.
* 出力先の在庫数量、単位、保管場所の編集(ロットあり)一時
PERFORM SET_OUTPUT_ONE_STEP_NOBATCH USING LT_ONE_STEP_QTY
CHANGING
LT_ONE_NOBATCH_TMP1 .
ENDIF.
CLEAR LT_ONE_NOBATCH.
LOOP AT LT_ONE_NOBATCH_TMP1 INTO LST_ONE_TMP1 .
MOVE-CORRESPONDING LST_ONE_TMP1 TO  LST_ONE .
APPEND LST_ONE  TO LT_ONE_NOBATCH.
CLEAR LST_ONE.
ENDLOOP.
SORT LT_ONE_SAL  BY  XBLNR
MATNR
WERKS
LGORT
CHARG
KDAUF
KDPOS.
SORT LT_ONE_BATCH   BY   XBLNR
MATNR
WERKS
LGORT
CHARG.
SORT LT_ONE_NOBATCH   BY   XBLNR
MATNR
WERKS
LGORT.
*   受注在庫の移動数量の集計
LOOP AT LT_ONE_SAL  INTO LST_ONE.
CLEAR LV_TABIX.
LV_TABIX = SY-TABIX.
AT END OF KDPOS.
SUM.
READ TABLE LT_ONE_SAL  INTO  LST_ONE_TMP INDEX LV_TABIX.
LST_ONE_TMP-MENGE = LST_ONE-MENGE.
APPEND  LST_ONE_TMP TO LT_ONE_SAL_TMP.
ENDAT.
ENDLOOP.
*   受注在庫の集計した移動数量と在庫数量の比較
IF LT_ONE_SAL_TMP  IS NOT INITIAL .
LOOP AT LT_ONE_SAL_TMP INTO LST_ONE_TMP  .
IF LST_ONE_TMP-MENGE > LST_ONE_TMP-LABST.
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.

CONCATENATE TEXT-004  ':' LST_ONE_TMP-MATNR ','

INTO LV_XBLNR_MSG1.

CONCATENATE   TEXT-005 ':'  LST_ONE_TMP-WERKS
', '
TEXT-006':'  LST_ONE_TMP-LGORT ','
INTO LV_XBLNR_MSG2.
CONCATENATE   TEXT-008 ':'  LST_ONE_TMP-KDAUF
', '
TEXT-009 ':'  LST_ONE_TMP-KDPOS  ','
INTO LV_XBLNR_MSG3.
CONCATENATE   TEXT-007 ':'  LST_ONE_TMP-CHARG
INTO LV_XBLNR_MSG4.
* 在庫が足りないですので、移動数量は在庫数量より少ない行を選択してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '142'.
LST_MSG-MESSAGE_V1 = LV_XBLNR_MSG1.
LST_MSG-MESSAGE_V2 = LV_XBLNR_MSG2.
LST_MSG-MESSAGE_V3 = LV_XBLNR_MSG3.
LST_MSG-MESSAGE_V4 = LV_XBLNR_MSG4.
APPEND LST_MSG TO O_LT_MSG.
ENDIF.
ENDLOOP.
ENDIF.
*   利用可能在庫(ロットあり)の移動数量の集計
LOOP AT LT_ONE_BATCH  INTO LST_ONE.
CLEAR LV_TABIX.
LV_TABIX = SY-TABIX.
AT END OF CHARG.
SUM.
READ TABLE LT_ONE_BATCH  INTO  LST_ONE_TMP INDEX LV_TABIX.
LST_ONE_TMP-MENGE  = LST_ONE-MENGE.
APPEND  LST_ONE_TMP TO LT_ONE_BATCH_TMP.
ENDAT.
ENDLOOP.
*   利用可能在庫(ロットあり)の集計した移動数量と在庫数量の比較
IF LT_ONE_BATCH_TMP  IS NOT INITIAL .
LOOP AT LT_ONE_BATCH_TMP INTO LST_ONE_TMP  .
IF LST_ONE_TMP-MENGE > LST_ONE_TMP-LABST.
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
CONCATENATE TEXT-004 ':'  LST_ONE_TMP-MATNR ','
INTO LV_XBLNR_MSG1.
CONCATENATE TEXT-005 ':'  LST_ONE_TMP-WERKS ','
INTO LV_XBLNR_MSG2.
CONCATENATE  TEXT-006 ':'  LST_ONE_TMP-LGORT ','
INTO LV_XBLNR_MSG3.
CONCATENATE   TEXT-007 ':'  LST_ONE_TMP-CHARG ','
INTO LV_XBLNR_MSG4.
* 在庫が足りないですので、移動数量は在庫数量より少ない行を選択してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '142'.
LST_MSG-MESSAGE_V1 = LV_XBLNR_MSG1.
LST_MSG-MESSAGE_V2 = LV_XBLNR_MSG2.
LST_MSG-MESSAGE_V3 = LV_XBLNR_MSG3.
LST_MSG-MESSAGE_V4 = LV_XBLNR_MSG4.
APPEND LST_MSG TO O_LT_MSG.
ENDIF.
ENDLOOP.
ENDIF.
*   利用可能在庫(ロットなし)の移動数量の集計
LOOP AT LT_ONE_NOBATCH  INTO LST_ONE.
CLEAR LV_TABIX.
LV_TABIX = SY-TABIX.
AT END OF LGORT.
SUM.
READ TABLE LT_ONE_NOBATCH  INTO  LST_ONE_TMP INDEX LV_TABIX.
LST_ONE_TMP-MENGE = LST_ONE-MENGE.
APPEND  LST_ONE_TMP TO LT_ONE_NOBATCH_TMP.
ENDAT.
ENDLOOP.
*   利用可能在庫(ロットなしの集計した移動数量と在庫数量の比較
IF LT_ONE_NOBATCH_TMP  IS NOT INITIAL .
LOOP AT LT_ONE_NOBATCH_TMP INTO LST_ONE_TMP  .
IF LST_ONE_TMP-MENGE > LST_ONE_TMP-LABST.
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
CONCATENATE TEXT-004 ':'  LST_ONE_TMP-MATNR ','
INTO LV_XBLNR_MSG1.
CONCATENATE  TEXT-005 ':'  LST_ONE_TMP-WERKS ','
INTO LV_XBLNR_MSG2.
CONCATENATE  TEXT-006 ':'  LST_ONE_TMP-LGORT ','
INTO LV_XBLNR_MSG3.
* 在庫が足りないですので、移動数量は在庫数量より少ない行を選択してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '142'.
LST_MSG-MESSAGE_V1 = LV_XBLNR_MSG1.
LST_MSG-MESSAGE_V2 = LV_XBLNR_MSG2.
LST_MSG-MESSAGE_V3 = LV_XBLNR_MSG3.
APPEND LST_MSG TO O_LT_MSG.
ENDIF.
ENDLOOP.
ENDIF.
LOOP AT TD_ONE_STEP INTO  LST_ONE_STEP .
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
READ TABLE LT_ONE_NOBATCH INTO LST_ONE
WITH KEY BKTXT = LST_ONE_STEP-BKTXT
BUDAT =  LST_ONE_STEP-BUDAT
LIFNR  = LST_ONE_STEP-LIFNR
NAME1 = LST_ONE_STEP-NAME1
MATNR = LST_ONE_STEP-MATNR
MAKTX = LST_ONE_STEP-MAKTX
WERKS = LST_ONE_STEP-WERKS
LGORT = LST_ONE_STEP-LGORT.
IF SY-SUBRC = 0.
LST_ONE_STEP-LABST = LST_ONE-LABST.
MODIFY TD_ONE_STEP FROM LST_ONE_STEP INDEX  LV_TABIX .
ENDIF.
READ TABLE LT_ONE_BATCH INTO LST_ONE
WITH KEY BKTXT = LST_ONE_STEP-BKTXT
BUDAT =  LST_ONE_STEP-BUDAT
LIFNR  = LST_ONE_STEP-LIFNR
NAME1 = LST_ONE_STEP-NAME1
MATNR = LST_ONE_STEP-MATNR
MAKTX = LST_ONE_STEP-MAKTX
WERKS = LST_ONE_STEP-WERKS
LGORT = LST_ONE_STEP-LGORT
CHARG = LST_ONE_STEP-CHARG .

IF SY-SUBRC = 0.
LST_ONE_STEP-LABST = LST_ONE-LABST.
MODIFY TD_ONE_STEP FROM LST_ONE_STEP INDEX  LV_TABIX .
ENDIF.
READ TABLE LT_ONE_SAL INTO LST_ONE
WITH KEY BKTXT = LST_ONE_STEP-BKTXT
BUDAT =  LST_ONE_STEP-BUDAT
LIFNR  = LST_ONE_STEP-LIFNR
NAME1 = LST_ONE_STEP-NAME1
MATNR = LST_ONE_STEP-MATNR
MAKTX = LST_ONE_STEP-MAKTX
WERKS = LST_ONE_STEP-WERKS
LGORT = LST_ONE_STEP-LGORT
CHARG = LST_ONE_STEP-CHARG
KDAUF =  LST_ONE_STEP-KDAUF
KDPOS =  LST_ONE_STEP-KDPOS .

IF SY-SUBRC = 0.
LST_ONE_STEP-LABST = LST_ONE-LABST.
MODIFY TD_ONE_STEP FROM LST_ONE_STEP INDEX  LV_TABIX .
ENDIF.
ENDLOOP.
ENDFORM.                    " CHECK_QTY_B
*&---------------------------------------------------------------------*
*&      Form  CHECK_QTY_TWO_B
*&---------------------------------------------------------------------*
*       分納時の数量チェック二次
*----------------------------------------------------------------------*
FORM CHECK_QTY_TWO_B  USING    I_TWO_STEP_TMP TYPE TYP_TD_TWO_STEP
CHANGING O_LT_MSG TYPE  TYP_MSG .
TYPES: BEGIN OF TYP_TWO,
MATNR  TYPE MATNR,
WERKS TYPE WERKS_D,
LGORT TYPE LGORT_D,
CHARG  TYPE CHARG_D,
VBELN TYPE ZVBELN,
POSNR TYPE ZPOSNR,
MAKTX  TYPE MAKTX,
LGORT_NYUKO  TYPE ZLGORT_R,
MENGE TYPE ZMENGE_M,
MEINS  TYPE MEINS,
LABST TYPE ZMENGE_L,
MEINS_ZAIKO   TYPE MEINS,
SEL TYPE ZESEL,
END OF TYP_TWO.
DATA : LT_TWO_BATCH TYPE STANDARD TABLE OF TYP_TWO,
LT_TWO_BATCH_TMP TYPE STANDARD TABLE OF TYP_TWO,
"alvリスト選択した同一参照伝票番号用ロット
LT_TWO_NOBATCH TYPE STANDARD TABLE OF TYP_TWO,
LT_TWO_NOBATCH_TMP TYPE STANDARD TABLE OF TYP_TWO,
LT_TWO_SAL TYPE STANDARD TABLE OF TYP_TWO,
LT_TWO_SAL_TMP TYPE STANDARD TABLE OF TYP_TWO,
LT_TWO_TMP TYPE STANDARD TABLE OF TYP_TWO,
LST_TWO TYPE TYP_TWO,
LST_TWO_TMP TYPE TYP_TWO,
LST_TWO_STEP  TYPE  ZSEGSD0039,
LV_TABIX TYPE SY-TABIX,
LV_MATNR_MSG1 TYPE STRING,
LV_MATNR_MSG2 TYPE STRING,
LV_MATNR_MSG3 TYPE STRING,
LV_MATNR_MSG4 TYPE STRING,
LV_TABIX_MSG  TYPE STRING,
LV_TABIX_STR   TYPE STRING,
LST_MSG TYPE BAPIRET2,
LT_TWO_NOBATCH_TMP1 TYPE TYP_TD_TWO_STEP,
LT_TWO_SAL_TMP1 TYPE TYP_TD_TWO_STEP,
LT_TWO_BATCH_TMP1 TYPE TYP_TD_TWO_STEP,
LST_TWO_TMP1 TYPE ZSEGSD0039,
LT_TWO_STEP_QTY_S TYPE TYP_TD_QTY,
LT_TWO_STEP_QTY_B TYPE TYP_TD_QTY,
LT_TWO_STEP_QTY TYPE TYP_TD_QTY,
LT_LIPS_S TYPE TYP_TD_LIPS,
LT_LIPS_B TYPE TYP_TD_LIPS,
LT_LIPS TYPE TYP_TD_LIPS.
LOOP AT  I_TWO_STEP_TMP INTO LST_TWO_STEP.
IF LST_TWO_STEP-VBELN IS NOT INITIAL .
*     受注在庫
MOVE-CORRESPONDING LST_TWO_STEP TO LST_TWO.
APPEND LST_TWO TO LT_TWO_SAL.
ELSE.
IF LST_TWO_STEP-CHARG IS NOT INITIAL.
*        利用可能在庫ロットあり
MOVE-CORRESPONDING LST_TWO_STEP TO LST_TWO.
APPEND LST_TWO TO LT_TWO_BATCH .
ELSE.
*     利用可能在庫ロットなし
MOVE-CORRESPONDING LST_TWO_STEP TO LST_TWO.
APPEND LST_TWO TO LT_TWO_NOBATCH .
ENDIF.
ENDIF.
CLEAR: LST_TWO_STEP,
LST_TWO.
ENDLOOP.
*  最新の在庫の取得
*   受注在庫取得
IF LT_TWO_SAL IS NOT INITIAL .
LOOP AT LT_TWO_SAL INTO LST_TWO  .
MOVE-CORRESPONDING LST_TWO TO  LST_TWO_TMP1 .
APPEND LST_TWO_TMP1 TO LT_TWO_SAL_TMP1.
CLEAR  LST_TWO_TMP1 .
ENDLOOP.
PERFORM GET_QTY_MSKA_S  USING LT_TWO_SAL_TMP1
CHANGING LT_TWO_STEP_QTY_S.
* 出荷未出庫の分を取得する
IF LT_TWO_STEP_QTY_S IS NOT INITIAL.
PERFORM GET_MISYUKO_S USING LT_TWO_STEP_QTY_S
CHANGING LT_LIPS_S.
ENDIF.
GT_LIPS_S = LT_LIPS_S.
* 在庫数量の編集
PERFORM EDIT_QTY_SAL CHANGING LT_TWO_STEP_QTY_S.
GT_TWO_STEP_QTY_S = LT_TWO_STEP_QTY_S.
* 出力先の在庫数量、単位、保管場所の編集
PERFORM SET_QTY_OUTPUT_S CHANGING LT_TWO_SAL_TMP1.
ENDIF.
CLEAR LT_TWO_SAL.
LOOP AT LT_TWO_SAL_TMP1 INTO LST_TWO_TMP1 .
MOVE-CORRESPONDING LST_TWO_TMP1 TO  LST_TWO .
APPEND LST_TWO  TO  LT_TWO_SAL.
CLEAR LST_TWO.
ENDLOOP.
*   ロット管理ありのデータの利用可能在庫取得
IF LT_TWO_BATCH IS NOT INITIAL.
LOOP AT LT_TWO_BATCH  INTO LST_TWO  .
MOVE-CORRESPONDING LST_TWO TO  LST_TWO_TMP1 .
APPEND LST_TWO_TMP1 TO LT_TWO_BATCH_TMP1 .
CLEAR  LST_TWO_TMP1 .
ENDLOOP.
PERFORM GET_QTY_B TABLES  LT_TWO_BATCH_TMP1
CHANGING LT_TWO_STEP_QTY_B.

* 出荷未出庫の分を取得する(ロットあり)
IF LT_TWO_STEP_QTY_B IS NOT INITIAL.
PERFORM GET_MISYUKO_B USING LT_TWO_STEP_QTY_B
CHANGING LT_LIPS_B.
ENDIF.
GT_LIPS_B = LT_LIPS_B.
* 在庫数量の編集(ロットあり)
PERFORM EDIT_QTY_TWO_STEP CHANGING LT_TWO_STEP_QTY_B.
GT_TWO_STEP_QTY_B = LT_TWO_STEP_QTY_B.
* 出力先の在庫数量、単位、保管場所の編集(ロットあり)
PERFORM SET_QTY_OUTPUT CHANGING LT_TWO_BATCH_TMP1.
ENDIF.
CLEAR LT_TWO_BATCH .
LOOP AT LT_TWO_BATCH_TMP1 INTO LST_TWO_TMP1 .
MOVE-CORRESPONDING LST_TWO_TMP1 TO  LST_TWO .
APPEND LST_TWO  TO LT_TWO_BATCH.
CLEAR LST_TWO.
ENDLOOP.
IF LT_TWO_NOBATCH IS NOT INITIAL.
LOOP AT LT_TWO_NOBATCH  INTO LST_TWO  .
MOVE-CORRESPONDING LST_TWO TO  LST_TWO_TMP1 .
APPEND LST_TWO_TMP1 TO LT_TWO_NOBATCH_TMP1 .
CLEAR  LST_TWO_TMP1 .
ENDLOOP.
PERFORM GET_QTY_MARD_N  USING     LT_TWO_NOBATCH_TMP1
CHANGING LT_TWO_STEP_QTY.

* 出荷未出庫の分を取得する(ロットなし)
IF LT_TWO_STEP_QTY IS NOT INITIAL.
CLEAR LT_LIPS.
PERFORM GET_MISYUKO USING LT_TWO_STEP_QTY
CHANGING LT_LIPS.

GT_LIPS = LT_LIPS.
* 在庫数量の編集(ロットなし)
PERFORM EDIT_QTY_NOBATCH CHANGING LT_TWO_STEP_QTY.
ENDIF.
GT_TWO_STEP_QTY = LT_TWO_STEP_QTY.
* 出力先の在庫数量、単位、保管場所の編集(ロットなし)
PERFORM SET_QTY_OUTPUT_NOBATCH CHANGING LT_TWO_NOBATCH_TMP1.
ENDIF.
CLEAR LT_TWO_NOBATCH .
LOOP AT LT_TWO_NOBATCH_TMP1 INTO LST_TWO_TMP1 .
MOVE-CORRESPONDING LST_TWO_TMP1 TO  LST_TWO .
APPEND LST_TWO  TO LT_TWO_NOBATCH.
CLEAR LST_TWO.
ENDLOOP.
SORT LT_TWO_SAL  BY  MATNR
WERKS
LGORT
CHARG
VBELN
POSNR.
SORT LT_TWO_BATCH   BY  MATNR
WERKS
LGORT
CHARG.
SORT LT_TWO_NOBATCH   BY MATNR
WERKS
LGORT.
*   受注在庫の移動数量の集計
LOOP AT LT_TWO_SAL  INTO LST_TWO.
CLEAR LV_TABIX.
LV_TABIX = SY-TABIX.
AT END OF POSNR.
SUM.
READ TABLE LT_TWO_SAL  INTO  LST_TWO_TMP INDEX LV_TABIX.
LST_TWO_TMP-MENGE = LST_TWO-MENGE.
APPEND  LST_TWO_TMP TO LT_TWO_SAL_TMP.
ENDAT.
ENDLOOP.
*   受注在庫の集計した移動数量と在庫数量の比較
IF LT_TWO_SAL_TMP  IS NOT INITIAL .
LOOP AT LT_TWO_SAL_TMP INTO LST_TWO_TMP  .
IF LST_TWO_TMP-MENGE > LST_TWO_TMP-LABST.
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
CONCATENATE TEXT-004  ':' LST_TWO_TMP-MATNR ','
INTO  LV_MATNR_MSG1.

CONCATENATE   TEXT-005 ':'  LST_TWO_TMP-WERKS
', '
TEXT-006':'  LST_TWO_TMP-LGORT','
INTO  LV_MATNR_MSG2.
CONCATENATE   TEXT-008 ':'  LST_TWO_TMP-VBELN
', '
TEXT-009 ':'  LST_TWO_TMP-POSNR ','
INTO  LV_MATNR_MSG3.
CONCATENATE   TEXT-007 ':'  LST_TWO_TMP-CHARG
INTO  LV_MATNR_MSG4.
* 在庫が足りないですので、移動数量は在庫数量より少ない行を選択してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '142'.
LST_MSG-MESSAGE_V1 = LV_MATNR_MSG1.
LST_MSG-MESSAGE_V2 =  LV_MATNR_MSG2.
LST_MSG-MESSAGE_V3 = LV_MATNR_MSG3.
LST_MSG-MESSAGE_V4 =  LV_MATNR_MSG4.
APPEND LST_MSG TO O_LT_MSG.
ENDIF.
ENDLOOP.
ENDIF.
*   利用可能在庫(ロットあり)の移動数量の集計
LOOP AT LT_TWO_BATCH  INTO LST_TWO.
CLEAR LV_TABIX.
LV_TABIX = SY-TABIX.
AT END OF CHARG.
SUM.
READ TABLE LT_TWO_BATCH  INTO  LST_TWO_TMP INDEX LV_TABIX.
LST_TWO_TMP-MENGE  = LST_TWO-MENGE.
APPEND  LST_TWO_TMP TO LT_TWO_BATCH_TMP.
ENDAT.
ENDLOOP.
*   利用可能在庫(ロットあり)の集計した移動数量と在庫数量の比較
IF LT_TWO_BATCH_TMP  IS NOT INITIAL .
LOOP AT LT_TWO_BATCH_TMP INTO LST_TWO_TMP  .
IF LST_TWO_TMP-MENGE > LST_TWO_TMP-LABST.
CONCATENATE TEXT-004 ':'  LST_TWO_TMP-MATNR ','
INTO LV_MATNR_MSG1.
CONCATENATE TEXT-005 ':'  LST_TWO_TMP-WERKS ','
INTO LV_MATNR_MSG2.
CONCATENATE  TEXT-006 ':'  LST_TWO_TMP-LGORT','
INTO LV_MATNR_MSG3.
CONCATENATE   TEXT-007 ':'  LST_TWO_TMP-CHARG
INTO LV_MATNR_MSG4.
* 在庫が足りないですので、移動数量は在庫数量より少ない行を選択してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '142'.
LST_MSG-MESSAGE_V1 = LV_MATNR_MSG1.
LST_MSG-MESSAGE_V2 = LV_MATNR_MSG2.
LST_MSG-MESSAGE_V3 = LV_MATNR_MSG3.
LST_MSG-MESSAGE_V4 = LV_MATNR_MSG4.
APPEND LST_MSG TO O_LT_MSG.
ENDIF.
ENDLOOP.
ENDIF.
*   利用可能在庫(ロットなし)の移動数量の集計
LOOP AT LT_TWO_NOBATCH  INTO LST_TWO.
CLEAR LV_TABIX.
LV_TABIX = SY-TABIX.
AT END OF LGORT.
SUM.
READ TABLE LT_TWO_NOBATCH  INTO  LST_TWO_TMP INDEX LV_TABIX.
LST_TWO_TMP-MENGE = LST_TWO-MENGE.
APPEND  LST_TWO_TMP TO LT_TWO_NOBATCH_TMP.
ENDAT.
ENDLOOP.
*   利用可能在庫(ロットなし)の集計した移動数量と在庫数量の比較
IF LT_TWO_NOBATCH_TMP  IS NOT INITIAL .
LOOP AT LT_TWO_NOBATCH_TMP INTO LST_TWO_TMP  .
IF LST_TWO_TMP-MENGE > LST_TWO_TMP-LABST.
CONCATENATE TEXT-004 ':'  LST_TWO_TMP-MATNR ','
INTO LV_MATNR_MSG1.
CONCATENATE  TEXT-005 ':'  LST_TWO_TMP-WERKS ','
INTO LV_MATNR_MSG2.
CONCATENATE  TEXT-006 ':'  LST_TWO_TMP-LGORT ','
INTO LV_MATNR_MSG3.
* 在庫が足りないですので、移動数量は在庫数量より少ない行を選択してください。
LST_MSG-TYPE = 'E'.
LST_MSG-ID = 'ZMEGSD01'.
LST_MSG-NUMBER = '142'.
LST_MSG-MESSAGE_V1 = LV_MATNR_MSG1.
LST_MSG-MESSAGE_V2 = LV_MATNR_MSG2.
LST_MSG-MESSAGE_V3 = LV_MATNR_MSG3.
APPEND LST_MSG TO O_LT_MSG.
ENDIF.
ENDLOOP.
ENDIF.
LOOP AT TD_TWO_STEP INTO  LST_TWO_STEP .
CLEAR  LV_TABIX.
LV_TABIX = SY-TABIX.
READ TABLE LT_TWO_NOBATCH INTO LST_TWO
WITH KEY MATNR =  LST_TWO_STEP-MATNR
WERKS =  LST_TWO_STEP-WERKS
LGORT = LST_TWO_STEP-LGORT.

IF SY-SUBRC = 0.
LST_TWO_STEP-LABST = LST_TWO-LABST.
MODIFY TD_TWO_STEP FROM LST_TWO_STEP INDEX  LV_TABIX .
ENDIF.
READ TABLE  LT_TWO_BATCH INTO LST_TWO
WITH KEY MATNR =  LST_TWO_STEP-MATNR
WERKS =  LST_TWO_STEP-WERKS
LGORT = LST_TWO_STEP-LGORT
CHARG = LST_TWO_STEP-CHARG .

IF SY-SUBRC = 0.
LST_TWO_STEP-LABST = LST_TWO-LABST.
MODIFY TD_TWO_STEP FROM LST_TWO_STEP INDEX  LV_TABIX .
ENDIF.
READ TABLE LT_TWO_SAL INTO LST_TWO
WITH KEY MATNR =  LST_TWO_STEP-MATNR
WERKS =  LST_TWO_STEP-WERKS
LGORT = LST_TWO_STEP-LGORT
CHARG = LST_TWO_STEP-CHARG
VBELN = LST_TWO_STEP-VBELN
POSNR = LST_TWO_STEP-POSNR.

IF SY-SUBRC = 0.
LST_TWO_STEP-LABST = LST_TWO-LABST.
MODIFY TD_TWO_STEP FROM LST_TWO_STEP INDEX  LV_TABIX .
ENDIF.
ENDLOOP.
ENDFORM.                    " CHECK_QTY_TWO_B
