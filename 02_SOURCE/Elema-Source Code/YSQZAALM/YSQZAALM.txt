***---------------------------------------------------------------------
** (c) Copyright 1998 OptiSystems Solutions LTD. All Rights Reserved  **
***---------------------------------------------------------------------
*-------------------------------------------------------------------
***INCLUDE YSQZSALM .
*-------------------------------------------------------------------
*&---------------------------------------------------------------------*
*&      Form  MM_SCAN_TEXT
*&---------------------------------------------------------------------*
FORM MM_SCAN_TEXT TABLES PTXT TYPE YSQZS_TB_TXTS
PTSC TYPE YSQZS_TB_SCAN
PTST TYPE YSQZS_TB_STMT
USING PSG PRC TYPE I.
**** " -> ~  : -> \
**** txtp -> tisc
IF PSG <> ' '.
LOOP AT PTXT.
CONDENSE PTXT.
TRANSLATE PTXT USING '.~,^" :\'.
****
REPLACE '(' WITH '` ' INTO PTXT.
WHILE SY-SUBRC = 0.
REPLACE '(' WITH '` ' INTO PTXT.
ENDWHILE.
TRANSLATE PTXT USING '`('.
****
REPLACE '*)' WITH '* `' INTO PTXT.
WHILE SY-SUBRC = 0.
REPLACE '*)' WITH '* `' INTO PTXT.
ENDWHILE.
TRANSLATE PTXT USING '`)'.
****
MODIFY PTXT.
ENDLOOP.
ENDIF.
****
SCAN ABAP-SOURCE PTXT TOKENS  INTO PTSC
STATEMENTS  INTO PTST.
PRC = SY-SUBRC.
DESCRIBE TABLE PTSC LINES STP-KSTR.
*******
ENDFORM.                    " MM_SCAN_TEXT
*&---------------------------------------------------------------------*
*&      Form  MM_TEST_PARAM_TYP
*&---------------------------------------------------------------------*
FORM MM_TEST_PARAM_TYP USING  P_FSG  TYPE YSQZS_ST_FIELD_SG.
DATA: S1.
****
S1 = P_FSG-FLD.
**** literal
IF S1 = '['.              P_FSG-SG = '['.  EXIT.  ENDIF.
**** number
IF S1 CO '+-1234567890.'. P_FSG-SG = 'n'.  EXIT.  ENDIF.
**** id - variable
*perform mm_test_local using p_fsg tmod.
*p_fsg-sg = 'v'.
*******
ENDFORM.                    " MM_TEST_PARAM_TYP
*&---------------------------------------------------------------------*
*&      Form  CO01_TABLES
*&---------------------------------------------------------------------*
FORM CO01_FROM.
**** kol
IF ST_SQL-FROM-KTAB <> ST_SEL-FROM-KTAB.
ST_SEL-ID-GOOD = 'n'.  EXIT.
ENDIF.
**** tb 1
IF ST_SQL-FROM-KTAB = 1 AND ST_SQL-FROM-TAB <> ST_SEL-FROM-TAB.
ST_SEL-ID-GOOD = 'n'.  EXIT.
ENDIF.
**** multy
LOOP AT ST_SQL-FROM-TABS INTO WNAMTB.
READ TABLE ST_SEL-FROM-TABS INTO WSS WITH KEY TXT = WNAMTB.
IF SY-SUBRC <> 0.  ST_SEL-ID-GOOD = 'n'.  EXIT.  ENDIF.
ENDLOOP.
*******
ENDFORM.                    " CO01_TABLES
*&---------------------------------------------------------------------*
*&      Form  MM_CREATE_ST_SEL
*&---------------------------------------------------------------------*
FORM MM_CREATE_ST_SEL USING PNSCAN LIKE SY-TABIX PTYP.
****
CLEAR ST_SEL.
ST_SEL-ID-TYP  = PTYP.
ST_SEL-ID-NAMI = STS-NAMI.
ADD 1 TO STS-NSEL.
ST_SEL-ID-NSEL = STS-NSEL.
****
READ TABLE TISC INDEX PNSCAN.
ST_SEL-ID-FRI = TISC-ROW.
****
ST_SEL-ID-FRS = TIST-FROM.
ST_SEL-ID-TOS = TIST-TO.
**** scan
LOOP AT TISC FROM ST_SEL-ID-FRS TO ST_SEL-ID-TOS.
APPEND TISC TO ST_SEL-SCAN.
ENDLOOP.
*******
ENDFORM.                    " MM_CREATE_ST_SEL
*&---------------------------------------------------------------------*
*&      Form  CO05_ORDER
*&---------------------------------------------------------------------*
FORM CO05_ORDER.
DATA: WFLS2   TYPE YSQZS_ST_FIELD_SG.
**** no sql
IF ST_SQL-ORDER-TYP = ' '.
IF ST_SEL-ORDER-TYP <> ' '.  ST_SEL-ID-GOOD = 'n'.  ENDIF.
EXIT.
ENDIF.
**** sql y
IF ST_SEL-ORDER-TYP = ' '.
ST_SEL-ID-GOOD = 'n'.  EXIT.
ENDIF.
**** primary key
IF ST_SEL-ORDER-TYP = 'pr'.  EXIT.  ENDIF.
**** kol
IF ST_SQL-ORDER-KFL <> ST_SEL-ORDER-KFL.
ST_SEL-ID-GOOD = 'n'.  EXIT.
ENDIF.
**** = loop
DO ST_SQL-ORDER-KFL TIMES.
READ TABLE ST_SEL-ORDER-FLSG INTO WFLS  INDEX SY-INDEX.
READ TABLE ST_SQL-ORDER-FLSG INTO WFLS2 INDEX SY-INDEX.
IF WFLS-SG <> WFLS2-SG.  ST_SEL-ID-GOOD = 'n'.  ENDIF.
ENDDO.
IF ST_SEL-ID-GOOD = 'n'.  EXIT.  ENDIF.
*******
ENDFORM.                    " CO05_ORDER
*&---------------------------------------------------------------------*
*&      Form  CO02_OPT
*&---------------------------------------------------------------------*
FORM CO02_OPT_FLD.
**** distinct
IF ST_SQL-OPT-SG_DIST <> ST_SEL-OPT-SG_DIST.
ST_SEL-ID-GOOD = 'n'.
EXIT.
ENDIF.
**** dy
IF ST_SEL-FLD-TYP = 'dy'.  EXIT.  ENDIF.
**** select *
IF ST_SEL-FLD-TYP = '*'.
IF ST_SQL-ANL-SG_ZV <> 'y' AND ST_SQL-ANL-SG_ZV <> '*'.
ST_SEL-ID-GOOD = 'n'.
ENDIF.
EXIT.
ENDIF.
**** kol
IF ST_SEL-FLD-KFL <> ST_SQL-FLD-KFL.
ST_SEL-ID-GOOD = 'n'.
EXIT.
ENDIF.
**** fields
LOOP AT ST_SEL-FLD-FLD INTO WS.
READ TABLE ST_SQL-FLD-FLD INTO WS2 INDEX SY-TABIX.
IF WS <> WS2.  ST_SEL-ID-GOOD = 'n'.  EXIT.  ENDIF.
ENDLOOP.
*******
ENDFORM.                    " CO02_OPT
*&---------------------------------------------------------------------*
*&      Form  CO03_WHERE
*&---------------------------------------------------------------------*
FORM CO03_WHERE.
**** typ
IF ST_SEL-WHERE-TYP = 'dy'. EXIT. ENDIF.
**** mndt clnd
IF ST_SEL-DD-SG_MNDT = 'y' AND ST_SEL-FROM-SG_CLND = ' '.
IF ST_SQL-WHERE-TYP = ' ' OR ST_SQL-ANL-SG_MNDT <> 'y'.
ST_SEL-ID-GOOD = 'n'.  EXIT.
ENDIF.
ENDIF.
**** up to
IF ST_SEL-FROM-SG_UPTO = 'y'.
IF ST_SQL-WHERE-TYP = ' ' OR ST_SQL-ANL-SG_ROWN = ' '.
ST_SEL-ID-GOOD = 'n'.  EXIT.
ENDIF.
ENDIF.
**** single
IF ST_SEL-OPT-SG_SING = 'y' AND ST_SEL-WHERE-SG_KEY = ' '.
IF ST_SQL-WHERE-TYP = ' ' OR ST_SQL-ANL-SG_ROWN = ' '.
ST_SEL-ID-GOOD = 'n'.  EXIT.
ENDIF.
ENDIF.
**** in like - other
IF ST_SEL-WHERE-TYP <> ' '     AND
ST_SEL-WHERE-SG_IN_LI = ' ' AND
ST_SEL-WHERE-SG_OTHER = 'y'.
IF ST_SQL-WHERE-TYP = ' '. ST_SEL-ID-GOOD = 'n'.  EXIT. ENDIF.
ENDIF.
**** list sql in sel
LOOP AT ST_SQL-WHERE-FLIN INTO WFLS WHERE SG = 'd'.
**zs AX1K912026 vvvvvvvvvvv
CHECK WFLS-FLD <> 'MANDT'
AND WFLS-FLD <> 'CLIENT'
AND WFLS-FLD <> 'ROWNUM'.
**zs AX1K912026 ^^^^^^^^^^^
READ TABLE ST_SEL-WHERE-FLIN INTO WFLS2
WITH KEY FLD = WFLS-FLD  SG = 'd'.
IF SY-SUBRC <> 0. ST_SEL-ID-GOOD = 'n'.  EXIT. ENDIF.
ENDLOOP.
IF ST_SEL-ID-GOOD = 'n'.  EXIT. ENDIF.
**** list sel in sql
LOOP AT ST_SEL-WHERE-FLIN INTO WFLS WHERE SG = 'd'.
WI = SY-TABIX + 1.
READ TABLE ST_SEL-WHERE-FLIN INTO WFLS2 INDEX WI.
CHECK WFLS2-SG = 'o'.
****
READ TABLE ST_SQL-WHERE-FLIN INTO WFLS2
WITH KEY FLD = WFLS-FLD  SG = 'd'.
IF SY-SUBRC <> 0. ST_SEL-ID-GOOD = 'n'.  EXIT. ENDIF.
ENDLOOP.
IF ST_SEL-ID-GOOD = 'n'.  EXIT. ENDIF.
*******
ENDFORM.                    " CO03_WHERE
*&---------------------------------------------------------------------*
*&      Form  MM_SCAN_TISC
*&---------------------------------------------------------------------*
FORM MM_SCAN_TISC.
****
CLEAR: STS-KINC, STS-KSEL, STS-KEXEC, STS-KIMEX.
LOOP AT TIST.
READ TABLE TISC INDEX TIST-FROM.
CASE TISC-STR.
WHEN 'INCLUDE'.  TIST-TYPE = 'i'.  ADD 1 TO STS-KINC.
WHEN 'SELECT'.   TIST-TYPE = 's'.  ADD 1 TO STS-KSEL.
WHEN 'IMPORT'.   TIST-TYPE = 'e'.  ADD 1 TO STS-KIMEX.
WHEN 'EXPORT'.   TIST-TYPE = 'e'.  ADD 1 TO STS-KIMEX.
WHEN 'EXEC'.     TIST-TYPE = 'q'.  ADD 1 TO STS-KEXEC.
WHEN OTHERS. CONTINUE.
ENDCASE.
MODIFY TIST.
ENDLOOP.
*******
ENDFORM.                    " MM_SCAN_TISC
*&---------------------------------------------------------------------*
*&      Form  MM_SEARCH_IMPEX
*----------------------------------------------------------------------*
FORM MM_SEARCH_IMPEX USING P_RC.
**** DATABASE
SEARCH TISC FOR 'DATABASE' STARTING AT STP-ITSC
ENDING AT TIST-TO.
IF SY-SUBRC <> 0.  P_RC = -1.  EXIT.  ENDIF.
**** DIRECTORY
SEARCH TISC FOR 'DIRECTORY' STARTING AT STP-ITSC
ENDING AT TIST-TO.
IF SY-SUBRC = 0.  P_RC = -1.  EXIT.  ENDIF.
****
P_RC = 0.
*******
ENDFORM.                    " MM_SEARCH_IMPEX
*&---------------------------------------------------------------------*
*&      Form  AE41_PARSING_IMPEX
*&---------------------------------------------------------------------*
FORM AZ1_PARSING_IMPEX.
DATA: II LIKE SY-TABIX.
****
PERFORM MM_CREATE_WTSC.
**** creating st_sel from wtsc(tisc)
SEARCH WTSC FOR 'DATABASE'.
II = SY-TABIX + 1.
READ TABLE WTSC INDEX II.
****
SHIFT WTSC-STR RIGHT UP TO '('.
SHIFT WTSC-STR RIGHT BY 1 PLACES.
SHIFT WTSC-STR LEFT DELETING LEADING SPACE.
****
ST_SEL-FROM-TAB = WTSC-STR.
*******
ENDFORM.                    " AE41_PARSING_IMPEX
*&---------------------------------------------------------------------*
*&      Form  MM_CREATE_WTSC
*&---------------------------------------------------------------------*
FORM MM_CREATE_WTSC.
****
ASSIGN COMPONENT 'STR' OF STRUCTURE WTSC TO <LL>.
****
*******
ENDFORM.                    " MM_CREATE_WTSC
*&---------------------------------------------------------------------*
*&      Form  AE42_COMPARE_SQL_IMPEX
*&---------------------------------------------------------------------*
FORM AZ2_COMPARE_SQL_IMPEX.
****
IF ST_SQL-FROM-TAB = ST_SEL-FROM-TAB.  ST_SEL-ID-GOOD = 'y'.
ELSE.                                  ST_SEL-ID-GOOD = 'n'.
ENDIF.
*******
ENDFORM.                    " AE42_COMPARE_SQL_IMPEX
*&---------------------------------------------------------------------*
*&      Form  AE43_SAVE_IMPEX
*&---------------------------------------------------------------------*
FORM AZ3_SAVE_IMPEX.
DATA: LREST TYPE I.
****
ADD 1 TO STS-NGSEL.
****
TB_SELL-TYP  = 'ie'.
TB_SELL-NAMI = ST_SEL-ID-NAMI.
TB_SELL-NUMS = ST_SEL-ID-FRI.
TB_SELL-SELN = STS-NGSEL.
APPEND TB_SELL.
****
LREST = C_TXTS_LEN.
CLEAR TB_SELT.  TB_SELT-SELN = STS-NGSEL.
LOOP AT TISC FROM ST_SEL-ID-FRS TO ST_SEL-ID-TOS.
CASE TISC-STR.
*  WHEN 'IMPORT'.  TB_SELL-TYP  = 'im'.
*  WHEN 'EXPORT'.  TB_SELL-TYP  = 'ex'.
*  WHEN 'FROM'.
*     IF  TB_SELL-TYP  = 'im'.
*     ADD 1 TO TB_SELT-NUMS.
*     APPEND TB_SELT.
*     LREST = C_TXTS_LEN.  CLEAR TB_SELT-TXT.
*  WHEN 'TO' OR 'FROM'.
WHEN OTHERS.
IF TISC-LEN >= LREST.
ADD 1 TO TB_SELT-NUMS.
APPEND TB_SELT.
LREST = C_TXTS_LEN.  CLEAR TB_SELT-TXT.
ENDIF.
ENDCASE.
****
concatenate  tb_selt-txt tisc-str into tb_selt-txt
SEPARATED BY SPACE.
LREST = LREST - TISC-LEN - 1.
ENDLOOP.
****
ADD 1 TO TB_SELT-NUMS.
APPEND TB_SELT.
*******
ENDFORM.                    " AE43_SAVE_IMPEX
