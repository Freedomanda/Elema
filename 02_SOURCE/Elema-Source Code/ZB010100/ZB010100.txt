REPORT ZB010100     message-id Z1
line-size  170
line-count  65
no standard page heading.
***********************************************************************
***プログラムID  ZB010100
***プログラム名  出荷伝票出力タイプ登録(移行)
***処理概要      出荷伝票の納品書出力用の出力タイプを入力ファイルより
***              バッチインプットで出力マスタに登録する
***作成者        STTD06(NDSC)
***作成日        2002.02.14
***更新履歴
************************************************************************
***CHECK OR BDC
PARAMETERS:P_CHK AS CHECKBOX.
***入力ファイル
PARAMETERS:P_IFILE(128) TYPE C LOWER CASE OBLIGATORY.
***ローカル読込 OR サーバ読込
PARAMETERS:P_R1 RADIOBUTTON GROUP RADI,
P_R2 RADIOBUTTON GROUP RADI.
***使用テーブル
TABLES:KNA1,     "得意先マスタ
TVST.     " 組織単位: 出荷ポイント
***内部テーブル定義
* CSVファイル読込用
data : begin of dtab occurs 0 ,
dline(1000) type c ,  "データ読込み用
end of dtab .
*データチェックテーブル
Data:Begin Of TAB Occurs 0,
KSCHL like NAST-KSCHL, "出力タイプ
VSTEL LIKE LIKP-VSTEL, "出荷ポイント
KUNNR like KNA1-KUNNR, "得意先
PARVW LIKE NAST-PARVW, "取引先機能
NACHA LIKE NAST-NACHA, "送信媒体
VSZTP LIKE NAST-VSZTP, "送信時刻
SPRAS LIKE NAST-SPRAS, "言語
End Of TAB.
*BDC実行テーブル
Data:Begin Of ITAB Occurs 0,
KSCHL like NAST-KSCHL, "出力タイプ
VSTEL LIKE LIKP-VSTEL, "出荷ポイント
KUNNR like KNA1-KUNNR, "得意先
PARVW LIKE NAST-PARVW, "取引先機能
NACHA LIKE NAST-NACHA, "送信媒体
VSZTP LIKE NAST-VSZTP, "送信時刻
SPRAS LIKE NAST-SPRAS, "言語
End Of ITAB.
*エラーデータプールテーブル
Data:Begin Of ETAB Occurs 0,
KSCHL like NAST-KSCHL,
VSTEL LIKE LIKP-VSTEL, "出荷ポイント
KUNNR like KNA1-KUNNR,
PARVW LIKE NAST-PARVW,
NACHA LIKE NAST-NACHA,
VSZTP LIKE NAST-VSZTP,
SPRAS LIKE NAST-SPRAS,
MESSAGE(100),
End Of ETAB.
* BDCテーブル
data : begin of bdc_tab occurs 0 .
include structure bdcdata.
data : end of bdc_tab .
***データエレメント定義
*** 汎用モジュール WS_FILENAME_GET ***
DATA: W_MASK(22)        TYPE C VALUE
',*.TXT,*.TXT,*.*,*.*.'.                 "ファイルの種類
DATA: G_FILENM_GET      LIKE RLGRAP-FILENAME.             "ファイル名
DATA: W_DEF_FILENM(255) TYPE C.                             "PCﾌｧｲﾙ名
DATA:BDC_MODE(1) TYPE C value 'N',
LIN TYPE P,
S_CNT TYPE P,
E_CNT TYPE P.
DATA:W_TAB TYPE X VALUE '09'.
data : w_msg like message.
***********************************************************************
START-OF-SELECTION.
IF P_R1 = 'X'.
PERFORM DATA_GET_S. "サーバよりファイルをゲット
ELSE.
PERFORM DATA_GET_L. "ローカルよりファイルをゲット
ENDIF.
PERFORM DATA_CHECK.   "得意先コード存在チェック
IF P_CHK = SPACE.
PERFORM BDC_SEC.      "BDC実行
ENDIF.
END-OF-SELECTION.       "
PERFORM DSP.          "結果表示レポート
***
top-of-page.
skip.
uline.
write:/000 '出力タイプ'(001),
015 '出荷ポイント'(008),
030 '得意先'(002),
045 '取引先機能'(003),
060 '媒体'(004),
065 '出力時刻'(005),
078 '言語'(006),
087 'メッセージ'(007).
uline.
***********************************************************************
*** サーバよりファイルをゲット
************************************************************************
FORM DATA_GET_S.
REFRESH:DTAB,TAB.CLEAR:DTAB,TAB,LIN.
open dataset p_ifile for input in text mode .
do .
read dataset p_ifile into dtab-dline.
if sy-subrc <> 0.
exit .
endif .
append dtab. clear dtab.
enddo.
*データ件数カウント
DESCRIBE TABLE DTAB LINES LIN.
IF LIN < 1.
MESSAGE I621.  "ファイルにデータが存在しません
STOP.
ENDIF.
*CSV 分割　処理
CLEAR:DTAB,TAB.
LOOP AT DTAB.
SPLIT DTAB-DLINE AT W_TAB INTO
TAB-KSCHL
TAB-KUNNR
TAB-PARVW
TAB-NACHA
TAB-VSZTP
TAB-SPRAS.
APPEND TAB.
CLEAR:DTAB,TAB.
ENDLOOP.
ENDFORM.
***********************************************************************
*** ローカルよりファイルをゲット
************************************************************************
FORM DATA_GET_L.
REFRESH:DTAB.CLEAR:TAB,LIN.
CALL FUNCTION 'WS_UPLOAD'
EXPORTING
*     CODEPAGE                      = ' '
FILENAME                      = P_IFILE
FILETYPE                      = 'DAT'
*     HEADLEN                       = ' '
*     LINE_EXIT                     = ' '
*     TRUNCLEN                      = ' '
*     USER_FORM                     = ' '
*     USER_PROG                     = ' '
*     DAT_D_FORMAT                  = ' '
*   IMPORTING
*     FILELENGTH                    =
TABLES
DATA_TAB                      = TAB
EXCEPTIONS
CONVERSION_ERROR              = 1
FILE_OPEN_ERROR               = 2
FILE_READ_ERROR               = 3
INVALID_TYPE                  = 4
NO_BATCH                      = 5
UNKNOWN_ERROR                 = 6
INVALID_TABLE_WIDTH           = 7
GUI_REFUSE_FILETRANSFER       = 8
CUSTOMER_ERROR                = 9
OTHERS                        = 10
.
IF SY-SUBRC = 2 OR SY-SUBRC = 3.
MESSAGE I209.
STOP.
ENDIF.

DESCRIBE TABLE TAB LINES LIN.
IF LIN < 1.
MESSAGE I621.   "ファイルにデータが存在しません
STOP.
ENDIF.

ENDFORM.
************************************************************************
*** 得意先コード存在チェック
***********************************************************************
FORM DATA_CHECK.
DATA:W_KUNNR LIKE KNA1-KUNNR.
REFRESH:ITAB,ETAB.
CLEAR:TAB,ITAB,ETAB,E_CNT.
LOOP AT TAB.
CLEAR:W_KUNNR.
***出力タイプチェック
IF TAB-KSCHL <> 'ZS20' AND TAB-KSCHL <> 'ZS21' AND
TAB-KSCHL <> 'ZS22'.
MOVE-CORRESPONDING TAB TO ETAB.
ETAB-MESSAGE = '出力タイプが間違っています'.
APPEND ETAB.
CLEAR:ETAB.
E_CNT = E_CNT + 1.
CONTINUE.
ENDIF.
***出荷ポイントチェック
CLEAR:TVST.
SELECT SINGLE VSTEL INTO TVST-VSTEL
FROM TVST WHERE VSTEL = TAB-VSTEL.
IF SY-SUBRC <> 0.
MOVE-CORRESPONDING TAB TO ETAB.
ETAB-MESSAGE = '出荷ポイントがR/3に存在しません'.
APPEND ETAB.CLEAR ETAB.
E_CNT = E_CNT + 1.
CONTINUE.
ENDIF.
***得意先チェック
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT         = TAB-KUNNR
IMPORTING
OUTPUT        = W_KUNNR
.

CLEAR:KNA1.
SELECT SINGLE KUNNR INTO KNA1-KUNNR FROM KNA1
WHERE KUNNR = W_KUNNR.
IF SY-SUBRC <> 0.
MOVE-CORRESPONDING TAB TO ETAB.
ETAB-MESSAGE = '得意先コードがR/3に存在しません'.
APPEND ETAB.
CLEAR ETAB.
E_CNT = E_CNT + 1.
ELSE.
MOVE-CORRESPONDING TAB TO ITAB.
APPEND ITAB.
CLEAR:ITAB.
ENDIF.
ENDLOOP.
ENDFORM.
***********************************************************************
*** BDC実行
************************************************************************
FORM BDC_SEC.
clear:itab,ETAB,S_CNT.
bdc_mode = 'N'.
loop at itab.
refresh bdc_tab.
perform get_bdc using :'X' 'SAPMV13B' '0100' ,
''  'RV13B-KSCHL' itab-kschl,
''  'BDC_OKCODE'  '=ANTA',
'X' 'SAPLV14A' '0100',
''  'BDC_OKCODE'  '=WEIT',
'X' 'SAPMV13B'  '1903',
''  'KOMB-LFART' 'LF',
''  'KOMB-VSTEL' itab-vstel,
''  'KOMB-KUNWE(01)' itab-kunnr,
''  'NACH-PARVW(01)' itab-parvw,
''  'NACH-NACHA(01)' itab-nacha,
''  'NACH-VSZTP(01)' itab-vsztp,
''  'BDC_OKCODE' '=SICH'.
call transaction 'VV21'
using     bdc_tab
mode   BDC_MODE
update  'S' .
if sy-subrc <> 0 .
perform err_mes.
move-corresponding Itab to etab .
etab-message = w_msg .
append etab. clear etab .
E_CNT = E_CNT + 1.
else .
move-corresponding Itab to etab .
etab-message = '正常に登録されました'.
APPEND ETAB.CLEAR:ETAB.
add 1 to S_CNT .
endif.
endloop.
ENDFORM.
************************************************************************
***  BDCﾃｰﾌﾞﾙの作成
************************************************************************
form get_bdc using dynbegin p_name dynp.
if dynbegin = 'X'.
clear bdc_tab.
move:p_name to bdc_tab-program,
dynp   to bdc_tab-dynpro,
'X'    to bdc_tab-dynbegin.
append bdc_tab.
else.
clear bdc_tab.
move: p_name to bdc_tab-fnam,
dynp   to bdc_tab-fval.
append bdc_tab.
endif.
endform.                    " GET_BDC
************************************************************************
*       汎用モジュール「WRITE_MESSAGE」
************************************************************************
form err_mes.
call function 'WRITE_MESSAGE'
exporting
msgid = sy-msgid
msgno = sy-msgno
msgty = sy-msgty
msgv1 = sy-msgv1
msgv2 = sy-msgv2
msgv3 = sy-msgv3
msgv4 = sy-msgv4
msgv5 = ' '
importing
messg = w_msg
exceptions
others = 1.
endform.                    " ERR_MES
***********************************************************************
***
***********************************************************************
FORM DSP.
DATA:CNT TYPE P.
DESCRIBE TABLE ETAB LINES LIN.
IF LIN < 1.
WRITE:/000 'エラーデータは存在しませんでした'.
ENDIF.
clear:etab.
loop at etab.
write:/ etab-KSCHL under text-001,
ETAB-VSTEL UNDER TEXT-008,
etab-KUNNR under text-002,
etab-PARVW under text-003,
etab-NACHA under text-004,
etab-VSZTP under text-005,
etab-SPRAS under text-006,
etab-MESSAGE under text-007.

endloop.
ENDFORM.
