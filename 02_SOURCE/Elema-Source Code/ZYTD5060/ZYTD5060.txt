*&-------------------------------------------------------------------
*& Report  ZYTD5060
*&-------------------------------------------------------------------
* [プログラム名]
*   ZYTD5060        受注残変更BDC(組織対応)
* [処理概要]
* [改定履歴]
*  2012/08/08   ISID              ES-UP
*  2014/02/28   GSL               DMW5926:利益センタ変更エラー対応
*&-------------------------------------------------------------------

REPORT ZYTD5060
LINE-SIZE  170 LINE-COUNT 58
MESSAGE-ID Y1 .

* テーブル宣言
TABLES : VBAK ,    "販売伝票：ヘッダデータ
VBAP ,    "販売伝票：明細データ
YS0011 .  "受注残分析テーブル

* 構造定義
TYPES : BEGIN OF T_EG ,    "営業グループ
*          MAE_VKGRP LIKE VBAK-VKGRP ,
KUNNR LIKE VBAK-KUNNR ,
VKGRP LIKE VBAK-VKGRP ,
END OF T_EG ,
BEGIN OF T_ES ,    "営業所・利益センタ
VKGRP LIKE VBAK-VKGRP ,
VKBUR LIKE VBAK-VKBUR ,
PRCTR LIKE VBAP-PRCTR ,
*          VKBUR LIKE VBAK-VKBUR ,
END OF T_ES ,
*        BEGIN OF T_RC ,    "利益センタ
*          MAE_PRCTR LIKE VBAP-PRCTR ,
*          ATO_PRCTR LIKE VBAP-PRCTR ,
*        END OF T_RC ,
BEGIN OF T_DATA ,  "対象データ
VBELN LIKE VBAP-VBELN ,  "伝票番号
POSNR LIKE VBAP-POSNR ,  "明細番号
KUNNR LIKE VBAK-KUNNR ,  "得意先コード
VKGRP LIKE VBAK-VKGRP ,  "営業グループ
VKBUR LIKE VBAK-VKBUR ,  "営業所
PRCTR LIKE VBAP-PRCTR ,  "利益センタ
*2014/02/28 Add Start
AUDAT TYPE VBAK-AUDAT,   "伝票日付 (受信日/送信日)
*2014/02/28 Add End
END OF T_DATA ,
BEGIN OF T_KI ,
BANFN LIKE EBAN-BANFN ,  "購買依頼番号
BNFPO LIKE EBAN-BNFPO ,  "購買依頼明細番号
EKGRP LIKE EBAN-EKGRP ,  "購買グループ
END  OF T_KI ,
BEGIN OF T_KH ,
EBELN LIKE EKKO-EBELN ,  "購買発注番号
EKGRP LIKE EKKO-EKGRP ,  "購買グループ
END OF T_KH ,
BEGIN OF T_DISP ,
*          VBELN Like VBAK-VBELN ,  "伝票番号
VBELN(10) TYPE N      ,  "伝票番号
POSNR LIKE VBAP-POSNR ,  "明細番号
KUNNR LIKE VBAK-KUNNR ,  "得意先コード
MAE_VKGRP LIKE VBAK-VKGRP ,  "営業グループ
ATO_VKGRP LIKE VBAK-VKGRP ,  "営業グループ
MAE_VKBUR LIKE VBAK-VKBUR ,  "営業所
ATO_VKBUR LIKE VBAK-VKBUR ,  "営業所
MAE_PRCTR LIKE VBAP-PRCTR ,  "利益センタ
ATO_PRCTR LIKE VBAP-PRCTR ,  "利益センタ
BANFN LIKE EBAN-BANFN ,  "購買依頼番号
BNFPO LIKE EBAN-BNFPO ,  "購買依頼明細番号
EBELN LIKE EKKO-EBELN ,  "購買発注番号
END OF T_DISP ,
*2014/02/28 Add Start
* 更新後の利益センタを取得
*(受注伝票の利益センタは、YSP02より自動設定される)
BEGIN OF T_PRC,
VBELN TYPE VBAP-VBELN ,  "伝票番号
POSNR TYPE VBAP-POSNR ,  "明細番号
PRCTR TYPE VBAP-PRCTR ,  "利益センタ
END   OF T_PRC.
*2014/02/28 Add End

DATA : EG_WRK TYPE T_EG ,            "営業グループワークスペース
EG_TAB TYPE TABLE OF T_EG ,   "営業グループ内部テーブル
ES_WRK TYPE T_ES ,            "営業所・利益センタワークスペース
ES_TAB TYPE TABLE OF T_ES ,   "営業所・利益センタ内部テーブル
*       RC_WRK TYPE T_RC ,            "利益センタワークスペース
*       RC_TAB TYPE TABLE OF T_RC ,   "利益センタ内部テーブル
KI_WRK TYPE T_KI ,            "購買依頼ワークスペース
KI_TAB TYPE TABLE OF T_KI ,   "購買依頼内部テーブル
KH_WRK TYPE T_KH ,            "購買発注ワークスペース
KH_TAB TYPE TABLE OF T_KH ,   "購買発注内部テーブル
IN_WRK TYPE T_DATA ,          "対象データワークスペース
IN_TAB TYPE TABLE OF T_DATA , "対象データ内部テーブル
DP_WRK TYPE T_DISP ,          "出力対象データワークスペース
DP_TAB TYPE TABLE OF T_DISP , "出力対象データ内部テーブル
L_LINE(100) TYPE C ,
BDC_TAB TYPE TABLE OF BDCDATA WITH HEADER LINE ,
BDC_MSG TYPE TABLE OF BDCMSGCOLL WITH HEADER LINE ,
*2014/02/28 Add Start
TW_PRC TYPE T_PRC,            "変更後の利益センタ
TB_PRC TYPE TABLE OF T_PRC.
*2014/02/28 Add End

* NDSC KURI ADD カウンター追加
DATA : W_COUNT1 TYPE I,
W_COUNT2 TYPE I,
W_COUNT3 TYPE I,
W_COUNT4 TYPE I.

* Mod ES-UP 2012/08/22 -->
*CONSTANTS : W_TAB TYPE X VALUE '09' .
CONSTANTS: W_TAB TYPE STRING VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.
* Mod ES-UP 2012/08/22 <--
* 選択画面
SELECTION-SCREEN : BEGIN OF BLOCK 1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS : S_KUNNR FOR VBAK-KUNNR,     "得意先コード
S_VBELN FOR VBAK-VBELN.     " 受注番号
SELECTION-SCREEN : END OF BLOCK 1.
SELECTION-SCREEN SKIP 1.
SELECTION-SCREEN : BEGIN OF BLOCK 2 WITH FRAME TITLE TEXT-002.
PARAMETERS : ES_FILE(128) TYPE C OBLIGATORY , "営業所・利益センタ
EG_FILE(128) TYPE C OBLIGATORY . "営業Ｇ
*             RC_FILE(128) TYPE C OBLIGATORY . "利益センタ
SELECTION-SCREEN : END OF BLOCK 2.
SELECTION-SCREEN SKIP 1.
SELECTION-SCREEN : BEGIN OF BLOCK 3 WITH FRAME TITLE TEXT-003.
PARAMETERS : KI_FILE(128) TYPE C OBLIGATORY , "購買依頼ファイル
KH_FILE(128) TYPE C OBLIGATORY . "購買発注ファイル
SELECTION-SCREEN : END OF BLOCK 3.
PARAMETERS : P_CHK AS CHECKBOX .
PARAMETERS   W_MODE(1) TYPE C NO-DISPLAY.
* END
************************************************************************
START-OF-SELECTION .
************************************************************************
CASE W_MODE.
WHEN 'A'.
WHEN 'E'.
WHEN OTHERS.
W_MODE = 'N'.
ENDCASE.
* 入力件数カウンタ追加
CLEAR: W_COUNT1,W_COUNT2,W_COUNT3,W_COUNT4.
PERFORM READ_FILE .
PERFORM DATA_GET .
PERFORM BDC_GOGO .
PERFORM OUT_PUT .
*2014/02/28 Add Start
*変更後の利益センタ取得
PERFORM GET_PRC.
*2014/02/28 Add End
PERFORM WRITE_LIST .
* データ抽出処理
FORM DATA_GET .

DATA W_CNT TYPE I.

SELECT VBELN POSNR VKGRP VKBUR KUNNR
*2014/02/28 Add Start
AUDAT
*2014/02/28 Add End
*    FROM YS0011
*    INTO CORRESPONDING FIELDS OF TABLE IN_TAB
*   WHERE KUNNR IN S_KUNNR
INTO CORRESPONDING FIELDS OF TABLE IN_TAB
FROM YS0011 FOR ALL ENTRIES IN EG_TAB
WHERE KUNNR EQ EG_TAB-KUNNR
* NDSC KURI 受注番号追加
AND   VBELN IN S_VBELN.

LOOP AT  IN_TAB INTO IN_WRK.
IF NOT IN_WRK-KUNNR IN S_KUNNR.
DELETE IN_TAB WHERE KUNNR = IN_WRK-KUNNR.
ENDIF.
ENDLOOP.
CLEAR W_CNT.
DESCRIBE TABLE IN_TAB LINES W_CNT.
IF W_CNT IS INITIAL.
MESSAGE S008. STOP.
ENDIF.

*  IF SY-SUBRC NE 0 .
** NDSC KURI MESSAGE ADD
*    MESSAGE S600.
*    STOP .
*  ENDIF .
* NDSC KURI 対象件数カウント
DESCRIBE TABLE IN_TAB LINES W_COUNT4.
LOOP AT IN_TAB INTO IN_WRK .
SELECT SINGLE PRCTR
FROM VBAP
INTO CORRESPONDING FIELDS OF IN_WRK
WHERE VBELN EQ IN_WRK-VBELN
AND  POSNR EQ IN_WRK-POSNR.

MODIFY IN_TAB FROM IN_WRK .

*    Write :/ IN_WRK .
CLEAR : IN_WRK .
ENDLOOP .
SORT IN_TAB BY VBELN POSNR .
ENDFORM .                    "DATA_GET


* BDC実行
FORM BDC_GOGO .
DATA : W_VBELN LIKE VBAP-VBELN ,
W_FIRST(1) TYPE C .

REFRESH : BDC_TAB .
CLEAR : BDC_TAB ,IN_WRK .

MOVE : 'X' TO W_FIRST .

LOOP AT IN_TAB INTO IN_WRK .
IF W_FIRST EQ 'X' .
MOVE : IN_WRK-VBELN TO W_VBELN .
* ヘッダ部分更新
PERFORM SET_HEADER .
ENDIF .
IF IN_WRK-VBELN NE W_VBELN .
* 保存用セット
PERFORM SET_SAVE .
* トランザクション呼び出し
PERFORM CALL_TRAN USING 'VA02' .
* ヘッダセット
PERFORM SET_HEADER .
ENDIF .
* 明細セット
PERFORM : GET_IRAI ,
GET_HACHU .
MOVE : IN_WRK-VBELN TO DP_WRK-VBELN ,
IN_WRK-POSNR TO DP_WRK-POSNR .
*2014/02/28 Mod Start
*    PERFORM SET_MEISAI USING IN_WRK-POSNR .
CLEAR ES_WRK.
*2014/02/28 Mod End
MOVE : IN_WRK-VBELN TO W_VBELN .
CLEAR : W_FIRST , IN_WRK .
ENDLOOP .
*
IF W_FIRST NE 'X' .
PERFORM SET_SAVE .
PERFORM CALL_TRAN USING 'VA02' .
ENDIF .
ENDFORM .                    "BDC_GOGO

* BDCセット
FORM SET_BDC USING P_DAT P_VAL P_FLG .
MOVE : P_FLG TO BDC_TAB-DYNBEGIN .
IF P_FLG EQ 'X' .
MOVE : P_DAT TO BDC_TAB-PROGRAM ,
P_VAL TO BDC_TAB-DYNPRO .
ELSE .
MOVE : P_DAT TO BDC_TAB-FNAM ,
P_VAL TO BDC_TAB-FVAL .
ENDIF .
APPEND : BDC_TAB .
CLEAR : BDC_TAB .
ENDFORM .                    "SET_BDC

*---------------------------------------------------------------------*
*       FORM Call_Tran                                                *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  P_TRCD                                                        *
*---------------------------------------------------------------------*
FORM CALL_TRAN USING P_TRCD .
DATA : W_MSG LIKE MESSAGE ,
W_MSGNO LIKE SY-MSGNO .
IF P_CHK EQ 'X' .
REFRESH : BDC_TAB , BDC_MSG .
APPEND DP_WRK TO DP_TAB .
CLEAR : DP_WRK .
EXIT .
ENDIF .
CALL TRANSACTION P_TRCD
USING   BDC_TAB
MODE    W_MODE
MESSAGES INTO    BDC_MSG.
* NDSC KURI ADD 処理結果カウンター追加
ADD 1 TO W_COUNT1.    " BDC 実行カウント
IF SY-SUBRC = 0.
ADD 1 TO W_COUNT2. " ＯＫカウント
ELSE.
ADD 1 TO W_COUNT3. " エラーカウント
WRITE: '受注番号' , DP_WRK-VBELN.
MESSAGE S401 WITH '受注番号：' DP_WRK-VBELN.
LOOP AT BDC_MSG .
MOVE : BDC_MSG-MSGNR TO W_MSGNO .
CALL FUNCTION 'WRITE_MESSAGE'
EXPORTING
MSGID = BDC_MSG-MSGID
MSGNO = W_MSGNO
MSGTY = BDC_MSG-MSGTYP
MSGV1 = BDC_MSG-MSGV1
MSGV2 = BDC_MSG-MSGV2
MSGV3 = BDC_MSG-MSGV3
MSGV4 = BDC_MSG-MSGV4
*         MSGV5 = BDC_MSG-MSGV5
IMPORTING
*         ERROR =
MESSG = W_MSG.
*       MSGLN         =
MESSAGE ID BDC_MSG-MSGID
*          Type BDC_MSG-MSGTYP
TYPE 'S'
NUMBER W_MSGNO
WITH BDC_MSG-MSGV1
BDC_MSG-MSGV2
BDC_MSG-MSGV3
BDC_MSG-MSGV4.
WRITE W_MSG-MSGTX.
ENDLOOP .
ENDIF.
*   END
REFRESH : BDC_TAB , BDC_MSG .
APPEND DP_WRK TO DP_TAB .
CLEAR : DP_WRK .

ENDFORM .                    "CALL_TRAN

* ヘッダセット
FORM SET_HEADER .
PERFORM SET_BDC USING : 'SAPMV45A' '0102' 'X' ,
'BDC_OKCODE' '/00' '' ,
'VBAK-VBELN' IN_WRK-VBELN '' ,
'SAPMV45A' '4001' 'X' ,
'BDC_OKCODE' '=KKAU' '' ,
'SAPMV45A' '4002' 'X' ,
'BDC_OKCODE' '/EBACK' '' .
READ TABLE EG_TAB INTO EG_WRK WITH KEY KUNNR = IN_WRK-KUNNR .
IF SY-SUBRC EQ 0 .
PERFORM SET_BDC USING 'VBAK-VKGRP' EG_WRK-VKGRP '' .
*    MOVE-CORRESPONDING EG_WRK TO DP_WRK .
MOVE : EG_WRK-VKGRP TO DP_WRK-ATO_VKGRP ,
IN_WRK-VKGRP TO DP_WRK-MAE_VKGRP ,
IN_WRK-KUNNR TO DP_WRK-KUNNR .
*    Perform : Get_Irai ,
*              Get_Hachu .
ENDIF.
*  READ TABLE ES_TAB INTO ES_WRK WITH KEY VKGRP = IN_WRK-VKGRP .
READ TABLE ES_TAB INTO ES_WRK WITH KEY VKGRP = DP_WRK-ATO_VKGRP .
IF SY-SUBRC EQ 0 .
PERFORM SET_BDC USING 'VBAK-VKBUR' ES_WRK-VKBUR '' .
MOVE : ES_WRK-VKBUR TO DP_WRK-ATO_VKBUR ,
IN_WRK-VKBUR TO DP_WRK-MAE_VKBUR .
*    MOVE-CORRESPONDING ES_WRK TO DP_WRK .
ENDIF.
CLEAR : ES_WRK , EG_WRK .
ENDFORM .                    "SET_HEADER

*2014/02/28 Del Start
** 明細セット
*FORM SET_MEISAI USING P_MEI .
*  DATA : W_CURSOR(20) TYPE C ,
*         W_FNAM(20)   TYPE C .
** 2003/04/07 ndsc kuri add bdc ﾁｮﾋﾞ変
**  CONCATENATE : 'RV45A-VBAP_SELKZ(' P_MEI+3(2)  ')'
**         INTO   W_FNAM ,
**                'VBAP-POSNR(' P_MEI+3(2) ')'
**         INTO   W_CURSOR
**  .
**  PERFORM SET_BDC USING : 'SAPMV45A' '4001' 'X' ,
**                          'BDC_OKCODE' '=PDE2' '' ,
**                          'BDC_CURSOR' W_CURSOR '' ,
**                          W_FNAM 'X' '' ,
*  PERFORM SET_BDC USING : 'SAPMV45A' '4001' 'X' ,
*                          'BDC_OKCODE' '=POPO' '' ,
*                          'SAPMV45A' '0251' 'X',
*                          'BDC_CURSOR' 'RV45A-POSNR' '',
*                          'BDC_OKCODE' '=POSI' '',
*                          'RV45A-POSNR' P_MEI '',
** 詳細ボタン
*                          'SAPMV45A' '4001' 'X',
*                          'BDC_OKCODE' '=PKNT' '',
*                          'BDC_CURSOR' 'VBAP-POSNR(01)' '',
*                          'RV45A-VBAP_SELKZ(01)' 'X' ''.
*
*  PERFORM SET_BDC USING : 'SAPMV45A' '4003' 'X' ,
*                          'BDC_OKCODE' '/00' '',
*                          'SAPLKACB' '0002' 'X' ,
*                          'BDC_CURSOR' 'COBL-PRCTR' '' ,
*                          'BDC_OKCODE' '=ENTE' '' .
*
**  READ TABLE ES_TAB INTO ES_WRK WITH KEY VKGRP = IN_WRK-VKGRP .
*  READ TABLE ES_TAB INTO ES_WRK WITH KEY VKGRP = DP_WRK-ATO_VKGRP .
*  IF SY-SUBRC EQ 0 .
**    MOVE-CORRESPONDING ES_WRK TO DP_WRK .
*    MOVE : ES_WRK-PRCTR TO DP_WRK-ATO_PRCTR ,
*           IN_WRK-PRCTR TO DP_WRK-MAE_PRCTR .
*    PERFORM SET_BDC USING : 'COBL-PRCTR' ES_WRK-PRCTR '' .
*  ENDIF.
*
*  PERFORM SET_BDC USING : 'BDC_SUBSCR' 'SAPLKACB' '' .
*  CLEAR : W_CURSOR , W_FNAM , ES_WRK .
*ENDFORM .                    "SET_MEISAI
*2014/02/28 Del End

* 保存セット
FORM SET_SAVE .
PERFORM SET_BDC USING : 'SAPMV45A' '4001' 'X' ,
'BDC_OKCODE' '=SICH' '' .
ENDFORM .                    "SET_SAVE

* 変換ファイル読み込み
FORM READ_FILE .
REFRESH BDC_TAB .
* Mod ES-UP 2012/08/22 -->
*  OPEN DATASET : ES_FILE FOR INPUT IN TEXT MODE .
CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
DATA L_CODEPAGE TYPE CPCODEPAGE.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).

OPEN DATASET ES_FILE FOR INPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
* Mod ES-UP 2012/08/22 <--
IF SY-SUBRC NE 0.
MESSAGE S209. STOP.
ENDIF.
* Mod ES-UP 2012/08/22 -->
*  OPEN DATASET : EG_FILE FOR INPUT IN TEXT MODE .
OPEN DATASET EG_FILE FOR INPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
* Mod ES-UP 2012/08/22 <--
*                RC_FILE FOR INPUT IN TEXT MODE .
* NDSC KURI MESSAGE ADD
IF SY-SUBRC NE 0.
MESSAGE S209. STOP.
ENDIF.
DO .
READ DATASET ES_FILE INTO L_LINE .
IF SY-SUBRC NE 0 .
EXIT .
ENDIF .
SPLIT L_LINE AT W_TAB
INTO ES_WRK-VKGRP
ES_WRK-VKBUR
ES_WRK-PRCTR .
APPEND : ES_WRK TO ES_TAB .
CLEAR : ES_WRK , L_LINE .
ENDDO .
* ndsc kuri add kunnr sort 2003/04/01
SORT ES_TAB BY VKGRP.
DO .
READ DATASET EG_FILE INTO L_LINE .
IF SY-SUBRC NE 0 .
EXIT .
ENDIF .
SPLIT L_LINE AT W_TAB
INTO EG_WRK-KUNNR
EG_WRK-VKGRP .
PERFORM CONVERT_ALPHA CHANGING EG_WRK-KUNNR .
*    MOVE : 'EQ'         TO S_KUNNR-OPTION ,
*           'I'          TO S_KUNNR-SIGN ,
*           EG_WRK-KUNNR TO S_KUNNR-LOW .
APPEND : EG_WRK TO EG_TAB .
*             S_KUNNR .
CLEAR : EG_WRK , L_LINE .
ENDDO .
* ndsc kuri add kunnr sort 2003/04/01
SORT EG_TAB BY KUNNR.
*  DO .
*    READ DATASET RC_FILE INTO L_LINE .
*    IF SY-SUBRC NE 0 .
*      EXIT .
*    ENDIF .
*    SPLIT L_LINE AT W_TAB
*               INTO RC_WRK-MAE_PRCTR
*                    RC_WRK-ATO_PRCTR .
*    APPEND : RC_WRK TO RC_TAB .
*    CLEAR : RC_WRK , L_LINE .
*  ENDDO .
CLOSE DATASET : EG_FILE , ES_FILE ."RC_FILE .
ENDFORM .                    "READ_FILE

* ファイル出力
FORM OUT_PUT .

DATA : KI_LINE(25) TYPE C ,
KH_LINE(20) TYPE C .
* Add ES-UP 2012/08/22 -->
CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
DATA L_CODEPAGE TYPE CPCODEPAGE.

L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
* Add ES-UP 2012/08/22 <--

* Mod ES-UP 2012/08/22 -->
*  OPEN DATASET : KI_FILE  FOR OUTPUT IN TEXT MODE .
OPEN DATASET KI_FILE FOR OUTPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
* Mod ES-UP 2012/08/22 <--
IF SY-SUBRC NE 0.
MESSAGE S209. STOP.
ENDIF.

* Mod ES-UP 2012/08/22 -->
*  OPEN DATASET : KH_FILE  FOR OUTPUT IN TEXT MODE .
OPEN DATASET KH_FILE FOR OUTPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
* Mod ES-UP 2012/08/22 <--
IF SY-SUBRC NE 0.
MESSAGE S209. STOP.
ENDIF.

LOOP AT KI_TAB INTO KI_WRK .
CONCATENATE  KI_WRK-BANFN
KI_WRK-BNFPO
KI_WRK-EKGRP
INTO   KI_LINE
SEPARATED BY W_TAB .
TRANSFER KI_LINE TO KI_FILE .
CLEAR : KI_LINE , KI_WRK .
ENDLOOP .

LOOP AT KH_TAB INTO KH_WRK .
CONCATENATE  KH_WRK-EBELN
KH_WRK-EKGRP
INTO   KH_LINE
SEPARATED BY W_TAB .
TRANSFER KH_LINE TO KH_FILE .
CLEAR : KH_LINE , KH_WRK .
ENDLOOP .

CLOSE DATASET : KI_FILE  ,
KH_FILE  .

ENDFORM .                    "OUT_PUT
* 購買依頼取得
FORM GET_IRAI .
DATA : W_KI TYPE T_KI .
CLEAR : DP_WRK-BANFN , DP_WRK-BNFPO .
* NDSC KURI ADD 2003/03/31 NDSC KURI 購買明細番号も取得する。
*  SELECT BANFN
SELECT BANFN BNFPO
FROM  VBEP
*   INTO  KI_WRK-BANFN
INTO  (KI_WRK-BANFN , KI_WRK-BNFPO)
WHERE VBELN EQ IN_WRK-VBELN
AND  POSNR EQ IN_WRK-POSNR
AND  BANFN NE SPACE .
EXIT .
ENDSELECT .
IF SY-SUBRC EQ 0 .
MOVE : KI_WRK-BANFN  TO DP_WRK-BANFN ,
*           IN_WRK-POSNR  TO DP_WRK-BNFPO .
KI_WRK-BNFPO  TO DP_WRK-BNFPO .
READ TABLE EG_TAB INTO EG_WRK WITH KEY KUNNR = IN_WRK-KUNNR .
IF SY-SUBRC EQ 0 .
MOVE : EG_WRK-VKGRP TO KI_WRK-EKGRP .
*             IN_WRK-POSNR     TO KI_WRK-BNFPO .
READ TABLE KI_TAB INTO W_KI WITH KEY BANFN = KI_WRK-BANFN
BNFPO = KI_WRK-BNFPO .
IF SY-SUBRC NE 0 .
APPEND KI_WRK TO KI_TAB .
ENDIF .
CLEAR : KI_WRK , W_KI , EG_WRK .
ENDIF .
ENDIF .
ENDFORM .                    "GET_IRAI
* 購買発注取得
FORM GET_HACHU .
DATA : W_KH TYPE T_KH .
CLEAR : DP_WRK-EBELN .
SELECT VBELN
FROM VBFA
INTO KH_WRK-EBELN
WHERE VBELV EQ IN_WRK-VBELN
AND  POSNV EQ IN_WRK-POSNR
AND  VBTYP_N EQ 'V'
AND  VBELN NE SPACE .
ENDSELECT .
IF SY-SUBRC EQ 0 .
MOVE : KH_WRK-EBELN TO DP_WRK-EBELN .
READ TABLE EG_TAB INTO EG_WRK WITH KEY KUNNR = IN_WRK-KUNNR .
IF SY-SUBRC EQ 0 .
MOVE : EG_WRK-VKGRP TO KH_WRK-EKGRP .
READ TABLE KH_TAB INTO W_KH WITH KEY EBELN = KH_WRK-EBELN .
IF SY-SUBRC NE 0 .
APPEND KH_WRK TO KH_TAB .

ENDIF .
CLEAR : KH_WRK , W_KH , EG_WRK .
ENDIF .
ENDIF .
ENDFORM .                    "GET_HACHU
* 一覧出力
FORM WRITE_LIST .
LOOP AT DP_TAB INTO DP_WRK .
PERFORM CONVERT_ALPHA CHANGING DP_WRK-VBELN .
WRITE AT :/01 DP_WRK-VBELN ,
11 '-' ,
12 DP_WRK-POSNR .
IF DP_WRK-BANFN NE SPACE .
WRITE AT : 20 DP_WRK-BANFN ,
30 '-' ,
31 DP_WRK-BNFPO .
ENDIF .
IF DP_WRK-EBELN NE SPACE .
WRITE AT 37 DP_WRK-EBELN .
ENDIF .
IF DP_WRK-ATO_VKBUR NE SPACE .
WRITE AT : 52 DP_WRK-MAE_VKBUR ,
57 '→' ,
60 DP_WRK-ATO_VKBUR .
ENDIF .
IF DP_WRK-ATO_VKGRP NE SPACE .
WRITE AT : 67 DP_WRK-MAE_VKGRP ,
71 '→' ,
74 DP_WRK-ATO_VKGRP .
ENDIF .
*2014/02/28 Mod Start
*    IF DP_WRK-ATO_PRCTR NE SPACE .
*      WRITE AT : 79 DP_WRK-MAE_PRCTR ,
*                 84 '→' ,
*                 87 DP_WRK-ATO_PRCTR .
*    ENDIF .
CLEAR: TW_PRC,
IN_WRK.
READ TABLE IN_TAB INTO IN_WRK
WITH KEY VBELN = DP_WRK-VBELN
POSNR = DP_WRK-POSNR.
READ TABLE TB_PRC INTO TW_PRC
WITH KEY VBELN = DP_WRK-VBELN
POSNR = DP_WRK-POSNR.
IF SY-SUBRC = 0.
WRITE AT : 79 IN_WRK-PRCTR ,
84 '→' ,
87 TW_PRC-PRCTR .
ENDIF.
*2014/02/28 Mod End
WRITE AT 94 DP_WRK-KUNNR .
CLEAR : DP_WRK .
ENDLOOP .
* NDSC KURI ADD 処理結果出力
SKIP.
WRITE  : /01 '変更対象データ件数' , 20 W_COUNT4,
/01 'BDC実行件数' , 20 W_COUNT1,
/01 'BDC変更件数' , 20 W_COUNT2,
/01 'BDCエラー件数' , 20 W_COUNT3.
MESSAGE S401 WITH '変更対象データ件数' W_COUNT4.
MESSAGE S401 WITH 'BDC実行件数' W_COUNT1.
MESSAGE S401 WITH 'BDC変更件数' W_COUNT2.
MESSAGE S401 WITH 'BDCエラー件数' W_COUNT3.

ENDFORM .                    "WRITE_LIST
*---------------------------------------------------------------------*
*       FORM Convert_Alpha                                            *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  P_VALUE                                                       *
*---------------------------------------------------------------------*
FORM CONVERT_ALPHA CHANGING P_VALUE .
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = P_VALUE
IMPORTING
OUTPUT = P_VALUE.
ENDFORM .                    "CONVERT_ALPHA
*&---------------------------------------------------------------------*
*&      Form  GET_PRC
*&---------------------------------------------------------------------*
*       変更後の利益センタ取得
*----------------------------------------------------------------------*
FORM GET_PRC .

TYPES: BEGIN OF T_YSP02,
VKBUR TYPE YSP02-VKBUR,
VKGRP TYPE YSP02-VKGRP,
DATBI TYPE YSP02-DATBI,
PRCTR TYPE YSP02-PRCTR,
DATAB TYPE YSP02-DATAB,
END   OF T_YSP02.

DATA: LTB_PRC   TYPE TABLE OF T_PRC,
LTW_YSP02 TYPE T_YSP02,
LTB_YSP02 TYPE TABLE OF T_YSP02.

* チェックボックス（チェックのみ）確認
IF P_CHK EQ 'X' .

SELECT  VKBUR VKGRP
DATBI PRCTR
DATAB
INTO  TABLE LTB_YSP02
FROM  YSP02.

* 変更後の営業所と営業グループをキーに、利益センタを取得する
LOOP AT DP_TAB INTO DP_WRK.
*キー日付：伝票日付 (受信日/送信日)を取得する
READ TABLE IN_TAB INTO IN_WRK
WITH KEY VBELN = DP_WRK-VBELN
POSNR = DP_WRK-POSNR.
IF SY-SUBRC = 0.
*利益センタを取得する
LOOP AT LTB_YSP02 INTO  LTW_YSP02
WHERE VKBUR =  DP_WRK-ATO_VKBUR
AND   VKGRP =  DP_WRK-ATO_VKGRP
AND   DATBI >= IN_WRK-AUDAT
AND   DATAB <= IN_WRK-AUDAT.
EXIT.
ENDLOOP.

IF SY-SUBRC = 0.
TW_PRC-VBELN = IN_WRK-VBELN.
TW_PRC-POSNR = IN_WRK-POSNR.
TW_PRC-PRCTR = LTW_YSP02-PRCTR.
APPEND TW_PRC TO TB_PRC.
ENDIF.
ENDIF.
CLEAR: IN_WRK, TW_PRC.
ENDLOOP.
ELSE.
* 受注伝票の利益センタを取得する
LTB_PRC[] = DP_TAB[].

SELECT  VBELN POSNR PRCTR
INTO  TABLE TB_PRC
FROM  VBAP FOR ALL ENTRIES IN LTB_PRC
WHERE VBELN = LTB_PRC-VBELN
AND   POSNR = LTB_PRC-POSNR.
ENDIF.

ENDFORM.                    " GET_PRC
