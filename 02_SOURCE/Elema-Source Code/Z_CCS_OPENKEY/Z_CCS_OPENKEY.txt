*&---------------------------------------------------------------------*
*& Report  Z_CCS_OPENKEY
*&---------------------------------------------------------------------*
*&  Content     :個別購買データ・在庫データをアドオンテーブルに格納する。
*&  Date        :2010/08/27
*&  User        :S.KURATA(SOLFIS)
*&---------------------------------------------------------------------*
* Modified
* Update user   :
* Update time   :
* Update detail :
*&---------------------------------------------------------------------*


REPORT  Z_CCS_OPENKEY.

*ADD START YYYY/MM/DD UserName 依頼

*ADD END YYYY/MM/DD UserName 依頼


*UPD START YYYY/MM/DD UserName 依頼

*UPD END YYYY/MM/DD UserName 依頼


*DEL START YYYY/MM/DD UserName 依頼

*DEL END YYYY/MM/DD UserName 依頼


**** START ADD YYYY/MM/DD UserName ****

**** END ADD YYYY/MM/DD UserName ****

**** START UPD YYYY/MM/DD UserName ****

**** END UPD YYYY/MM/DD UserName ****

**** START DEL YYYY/MM/DD UserName ****

**** END DEL YYYY/MM/DD UserName ****

*DATA:
*  l_KBETR12 TYPE KONP-KBETR,   "発注単価
*  l_KBETR16 TYPE char16.   "発注単価
*  DATA L_IDOC_AMOUNT(255) TYPE C.
*DATA L_EBETR_M(11) TYPE P DECIMALS 6.               "20030916 MOD
*l_KBETR12 = '123456789.12-'.
**l_KBETR16 = l_KBETR12.
**--- 汎用モジュール金額変換モジュール
*  CALL FUNCTION 'CURRENCY_AMOUNT_SAP_TO_IDOC'
*       EXPORTING
*            CURRENCY    = 'JPY'
*            SAP_AMOUNT  = l_KBETR12
*       IMPORTING
*            IDOC_AMOUNT = L_IDOC_AMOUNT
*       EXCEPTIONS
*            OTHERS      = 1.
*  L_EBETR_M = L_IDOC_AMOUNT.
*  L_EBETR_M =  L_EBETR_M / 1.
*WRITE l_KBETR12 to l_KBETR16.
*WRITE / l_KBETR12.
*WRITE / '++++++'.
*WRITE / l_KBETR16.
*WRITE / L_IDOC_AMOUNT.
*WRITE / L_EBETR_M.


*DATA:
*  l_dd04t   TYPE DD04T.
*
*l_dd04t-ROLLNAME   = 'YTESTCCS001'.
*l_dd04t-DDLANGUAGE = 'EN'.
*l_dd04t-AS4LOCAL   = 'A'.
**l_dd04t-AS4VERS    =
*l_dd04t-DDTEXT    = 'SUCC1'.
*l_dd04t-REPTEXT   = 'Onetwothree'.
*l_dd04t-SCRTEXT_S = 'Onetwo'.
*l_dd04t-SCRTEXT_M = 'ThreeFour'.
*l_dd04t-SCRTEXT_L = 'FivetoTen'.
*
*INSERT DD04T from l_dd04t.
*IF sy-subrc = 0.
*  WRITE 'ok'.
*ENDIF.


*TYPES:
*  BEGIN OF TYP_TD_PRODH,
*    PRODH TYPE T179T-PRODH,          "品目階層
*  END OF TYP_TD_PRODH.
*DATA:
*  LTD_PRODH  TYPE STANDARD TABLE OF TYP_TD_PRODH.
*
*DATA:
*  lc_cc  TYPE char20.
*lc_cc = '%使用不可%'.
**使用不可が含まれる、すべて品目階層対象を取得
*CLEAR LTD_PRODH.
*SELECT PRODH                         "品目階層
*  INTO TABLE LTD_PRODH
*  FROM T179T
* WHERE VTEXT LIKE lc_cc.         "使用不可が含まれる読み込むため
*
*WRITE 'OK'.

*CONSTANTS CNS_UTF TYPE STRING VALUE `UTF-8`.
*DATA:
*    L_NEW_FILE_NAME TYPE string.
**DATA L_CODEPAGE TYPE ABAP_ENCODING.
**  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_UTF ).
*L_NEW_FILE_NAME = '\\TECTED01\sapmnt\trans\123test.txt'.
***L_NEW_FILE_NAME = 'C:\Users\huashi\Desktop\123test.txt'.
*    OPEN DATASET L_NEW_FILE_NAME FOR INPUT
**      IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
**      IGNORING CONVERSION ERRORS.
*      IN        TEXT MODE ENCODING  UTF-8 IGNORING CONVERSION ERRORS.
*    IF SY-SUBRC <> 0.
*      MESSAGE S400(Z1) WITH 'ファイルオープンエラー'.
*      STOP.
*    ELSE.
*      WRITE 'XXXXXXXXXX'.
*    ENDIF.


*MESSAGE s083(Z3).

*DATA:
*      c_cc TYPE char20 VALUE '99999999',
*      c_cc1 TYPE char20.
*WRITE c_cc to c_cc1 CURRENCY 'JPY'.
*WRITE c_cc1.

*DATA:
*      I_DMBTR TYPE EKBE-DMBTR,
*      A1F_WL_ITANKA like BAPICURR-BAPICURR,
*      O_ITANKA TYPE ZNEN002-ITANKA.
*  I_DMBTR = '12345678901.12'.
**    I_DMBTR = '1234567.12'.
*  CALL FUNCTION 'BAPI_CURRENCY_CONV_TO_EXTERNAL'
*    EXPORTING
*      CURRENCY        = 'JPY'
*      AMOUNT_INTERNAL = I_DMBTR
*    IMPORTING
*      AMOUNT_EXTERNAL = A1F_WL_ITANKA.
**  O_ITANKA = A1F_WL_ITANKA.
*    TRY .
*    O_ITANKA = A1F_WL_ITANKA.
*  CATCH CX_SY_CONVERSION_OVERFLOW.
*    CLEAR O_ITANKA.
*  ENDTRY.

*  DATA:
*    A1F_WL_RETURN TYPE BAPIRETURN,
*    O_ITANKA TYPE ZNEN002-ITANKA,
*    A1F_WL_ITANKA like BAPICURR-BAPICURR.
*  O_ITANKA = '123456789.12'.
*  A1F_WL_ITANKA = O_ITANKA.
*  CALL FUNCTION 'BAPI_CURRENCY_CONV_TO_INTERNAL'
*    EXPORTING
*      CURRENCY             = 'JPY'
*      AMOUNT_EXTERNAL      = A1F_WL_ITANKA
*      MAX_NUMBER_OF_DIGITS = '11'
*    IMPORTING
*      AMOUNT_INTERNAL      = O_ITANKA
*      RETURN               = A1F_WL_RETURN.
*  IF A1F_WL_RETURN-TYPE = 'E' OR A1F_WL_RETURN-TYPE = 'A' OR
*     A1F_WL_RETURN-TYPE = 'X'.
*    CLEAR O_ITANKA.
*  ENDIF.


*  DATA:
*    A1F_WL_msg TYPE char128.
*  MESSAGE s139(Z3) WITH '99' INTO A1F_WL_msg.
*  WRITE : / A1F_WL_msg.

*DATA:
*  cc  TYPE char20,
*  c1  TYPE char20,
*  c2  TYPE char20,
*  pp  TYPE p LENGTH 6 DECIMALS 6.
*
*pp = '00312.123000'.
**pp = pp * 1000000.
**WRITE pp to cc no-ZERO.
**CONDENSE cc NO-GAPS.
*cc = pp.
*SPLIT cc at '.' INTO c1 c2.
*
*CALL FUNCTION 'STRING_REVERSE'
*  EXPORTING
*    STRING          = c2
*    LANG            = '1'
* IMPORTING
*   RSTRING         = c2
* EXCEPTIONS
*   TOO_SMALL       = 1
*   OTHERS          = 2
*          .
*IF SY-SUBRC <> 0.
** Implement suitable error handling here
*ENDIF.
*SHIFT c2 LEFT DELETING LEADING '0'.
*CALL FUNCTION 'STRING_REVERSE'
*  EXPORTING
*    STRING          = c2
*    LANG            = '1'
* IMPORTING
*   RSTRING         = c2
* EXCEPTIONS
*   TOO_SMALL       = 1
*   OTHERS          = 2
*          .
*IF SY-SUBRC <> 0.
** Implement suitable error handling here
*ENDIF.
**WRITE c2 to cc NO-ZERO.
**c2 = cc.
*CONCATENATE c1 c2 INTO cc SEPARATED BY '.'.
*WRITE cc.



*  DATA L_CODEPAGE TYPE ABAP_ENCODING.
**  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( 'UTF-8' ).
**   TRY.
*   CALL METHOD CL_ABAP_CODEPAGE=>SAP_CODEPAGE
*     EXPORTING
*       CODEPAGE = 'UTF-8'
*     RECEIVING
*       SAPCP    = L_CODEPAGE
*       .
**    CATCH CX_PARAMETER_INVALID .
**   ENDTRY.
**   WRITE L_CODEPAGE.
**   TABLES:t001.
**   SELECT *
**     FROM t001
**    WHERE bukrs = 'GR01'.

*DATA:
*  LC_VBELN   TYPE VBAK-VBELN,
**  LC_VBELN   TYPE char10,
*  LC_VBELN_o TYPE VBAK-VBELN,
*  lc_msg1     TYPE SYMSGV,
*  lc_msg2     TYPE SYMSGV.
*
*SELECT SINGLE VBELN
*  INTO LC_VBELN
*  FROM VBAK
* WHERE VBELN = '0004400000'.
*
*
**WRITE: LC_VBELN .
*
*CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*  EXPORTING
*    INPUT  = LC_VBELN
*  IMPORTING
*    OUTPUT = LC_VBELN_o.
**WRITE :/ LC_VBELN_o.
*CONCATENATE '販売管理伝票番号:' LC_VBELN INTO lc_msg1.
*CONCATENATE '販売管理伝票番号:' LC_VBELN_o INTO lc_msg2.
*WRITE : '正しくWriteの対象は外部です'.
*WRITE :/ '誤　り：', lc_msg1.
*WRITE :/ '正しく：', lc_msg2.
*MESSAGE lc_msg1 TYPE 'I'.
*MESSAGE lc_msg2 TYPE 'I'.


*DATA:
*    L_NEW_FILE_NAME TYPE string,
*    l_string TYPE string,
*    l_vbeln  TYPE char10,
*    l_vbe    TYPE VBAK-VBELN.
**L_NEW_FILE_NAME = '\\TECsvf01\data\Vbeln.txt'.
*L_NEW_FILE_NAME = '\\TECsvf01\data\VbelnO.txt'.
*    OPEN DATASET L_NEW_FILE_NAME FOR INPUT
*      IN        TEXT MODE ENCODING  UTF-8 IGNORING CONVERSION ERRORS.
*    DO.
*       READ DATASET L_NEW_FILE_NAME INTO l_string.
*       IF sy-subrc = 0.
*         exit.
*       ENDIF.
*    ENDDO.
*    SPLIT l_string at CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB INTO l_vbeln l_vbe.
*    MESSAGE l_vbe TYPE 'I'.

*DATA:
*  L_EBETR_M(9) TYPE P DECIMALS 6,   "25
*  L_EBETR_V(9) TYPE P DECIMALS 6,   "20
*  l_m(10)      TYPE p DECIMALS 6,
*  l_v(10)      TYPE p DECIMALS 6,
*  lc_25        TYPE char25,
*  lc_20        TYPE char25,
*  l_m6(9)      TYPE p DECIMALS 6,
*  l_v6(9)      TYPE p DECIMALS 6,
*
*  l_KBETR      TYPE  KONP-KBETR.    "発注単価  11-2
*l_kbetr = '123456789.12-'.
*lc_25   = '1,234,567,890,123.123456-'.
**'123,456,789.123456-'
**'12,123,456,789.123456-'
*l_m6 = '12123456789.123456-'.
**l_v6 =
*WRITE l_m6 to lc_25.
**WRITE lc_25 to lc_20.
*WRITE lc_25.
*CLEAR lc_25.
*lc_25 = l_m6.
*L_EBETR_M = lc_25.
*WRITE L_EBETR_M to lc_20.
*WRITE / lc_20.

*DATA:
*  l_p1    TYPE p LENGTH 8 DECIMALS 6,
*  l_p2    TYPE p LENGTH 9 DECIMALS 6,
*  l_or    TYPE ISOC_FACTOR,
*  l_Amt   TYPE WMTO_S-AMOUNT,
*  l_amt1  TYPE WMTO_S-AMOUNT.
*
*  l_p1 = '100'.
**  l_p2 = ''.
*  CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
*    EXPORTING
**     CLIENT                  = SY-MANDT
*      DATE                    = sy-datum
*      FOREIGN_AMOUNT          = l_p1
**      FOREIGN_CURRENCY        = 'JPY'
**      LOCAL_CURRENCY          = 'USD'
*      FOREIGN_CURRENCY        = 'USD'
*      LOCAL_CURRENCY          = 'JPY'
**     RATE                    = 0
**     TYPE_OF_RATE            = 'M'
**     READ_TCURR              = 'X'
*   IMPORTING
**     EXCHANGE_RATE           =
**     FOREIGN_FACTOR          =
*     LOCAL_AMOUNT            = l_p2
**     LOCAL_FACTOR            =
**     EXCHANGE_RATEX          =
**     FIXED_RATE              =
**     DERIVED_RATE_TYPE       =
*   EXCEPTIONS
*     NO_RATE_FOUND           = 1
*     OVERFLOW                = 2
*     NO_FACTORS_FOUND        = 3
*     NO_SPREAD_FOUND         = 4
*     DERIVED_2_TIMES         = 5
*     OTHERS                  = 6
*            .
*  IF SY-SUBRC <> 0.
** Implement suitable error handling here
*  ENDIF.
*  WRITE l_p2.
*
*
*  l_amt1 = l_p2.
*
*  CALL FUNCTION 'CURRENCY_AMOUNT_SAP_TO_DISPLAY'
*    EXPORTING
*      CURRENCY              = 'JPY'
*      AMOUNT_INTERNAL       = l_amt1
*   IMPORTING
*     AMOUNT_DISPLAY        = l_Amt
*   EXCEPTIONS
*     INTERNAL_ERROR        = 1
*     OTHERS                = 2
*            .
*  IF SY-SUBRC <> 0.
** Implement suitable error handling here
*  ENDIF.
*
*
*
*
*
**  CALL FUNCTION 'CURRENCY_AMOUNT_DISPLAY_TO_SAP'
**    EXPORTING
**      CURRENCY              = 'USD'
**      AMOUNT_DISPLAY        = l_amt1
**   IMPORTING
**     AMOUNT_INTERNAL       = l_Amt
**   EXCEPTIONS
**     INTERNAL_ERROR        = 1
**     OTHERS                = 2
**            .
**  IF SY-SUBRC <> 0.
*** Implement suitable error handling here
**  ENDIF.
*  WRITE / l_Amt.
*
**  CALL FUNCTION 'CURRENCY_CONVERTING_FACTOR'
**    EXPORTING
**      CURRENCY                = 'USD'
**   IMPORTING
**     FACTOR                  = l_or
**   EXCEPTIONS
**     TOO_MANY_DECIMALS       = 1
**     OTHERS                  = 2
**            .
**  IF SY-SUBRC <> 0.
*** Implement suitable error handling here
**  ENDIF.
**  WRITE l_or.
*DATA:
*  pp_ZEZAMOUNT   TYPE ZEZAMOUNT,
*  ss_aaa         TYPE string,
*  ss_c40         TYPE char40,
*  ss_c           TYPE char25.
*pp_ZEZAMOUNT = '123456789012.123-'.
*CALL FUNCTION 'ZEG_ZZ_RIGHTZERO_DETELE_TEST'
*  EXPORTING
*    IMPORIGINAL        = pp_ZEZAMOUNT
* IMPORTING
**   EXPNOZERO          =
*   EXPOUTNOZERO       = ss_aaa
*          .
**ss_c40 = ss_aaa.
**ss_c = ss_c40+15(25).
*ss_c = ss_aaa+15(25).
*WRITE ss_c.

*DATA:
*     OUTPUT TYPE char20.
*CALL FUNCTION 'MATERIAL_UNIT_CONVERSION'
*  EXPORTING
*   INPUT                        = 100
**   KZMEINH                      = ' '
*    MATNR                        = '#1890'
*    MEINH                        = 'PC'
*   MEINS                        = 'ST'
**   EXTENDED_CONV                = ' '
**   TYPE_UMR                     = ' '
**   NO_OUTPUT                    = ' '
**   CHARGE                       =
**   CHARG_CUOBJ                  =
*   WERKS                        = '1000'
* IMPORTING
**   ADDKO                        =
**   MEINS                        =
*   OUTPUT                       = OUTPUT
**   UMREN                        =
**   UMREZ                        =
**   BATCH_CONVERSION_ERROR       =
**   KZWSO                        =
* EXCEPTIONS
*   CONVERSION_NOT_FOUND         = 1
*   INPUT_INVALID                = 2
*   MATERIAL_NOT_FOUND           = 3
*   MEINH_NOT_FOUND              = 4
*   MEINS_MISSING                = 5
*   NO_MEINH                     = 6
*   OUTPUT_INVALID               = 7
*   OVERFLOW                     = 8
*   OTHERS                       = 9
*          .
*IF SY-SUBRC <> 0.
** Implement suitable error handling here
*ENDIF.
*
*WRITE OUTPUT.


*DATA:
*  lw_utf  TYPE char5 VALUE 'UTF-8',
*  L_CODEPAGE TYPE CPCODEPAGE,
*  ls_ss   TYPE string VALUE '\\TECsvf01\data\Vbeln.txt'.
*
*L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( 'UTF-8' ).
*
**open DATASET ls_ss for OUTPUT IN TEXT MODE ENCODING (  )
**       IGNORING CONVERSION ERRORS.
*
*OPEN DATASET ls_ss FOR OUTPUT IN LEGACY BINARY MODE CODE PAGE L_CODEPAGE IGNORING CONVERSION ERRORS.

*DATA:
**  lw_sss   TYPE string VALUE 'aaaa                       '.
*  lw_sss   TYPE char128 VALUE 'aaaa                       '.
*
*SHIFT lw_sss RIGHT DELETING TRAILING ''.
*CONDENSE lw_sss.
*WRITE lw_sss.


DATA:
LW_FNAME     TYPE STRING VALUE 'C:\Users\huashi\Desktop\Send\test.csv',
ltd_t001     TYPE STANDARD TABLE OF t001.


SELECT *
INTO CORRESPONDING FIELDS OF taBLE ltd_t001
FROM t001
UP TO 10 ROWS.


CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
*     BIN_FILESIZE                    =
FILENAME                        = LW_FNAME
FILETYPE                        = 'CSV'
*     APPEND                          = ' '
WRITE_FIELD_SEPARATOR           = cl_abap_char_utilities=>horizontal_tab
*     HEADER                          = '00'
*     TRUNC_TRAILING_BLANKS           = ' '
*     WRITE_LF                        = 'X'
*     COL_SELECT                      = ' '
*     COL_SELECT_MASK                 = ' '
*     DAT_MODE                        = ' '
*     CONFIRM_OVERWRITE               = ' '
*     NO_AUTH_CHECK                   = ' '
*     CODEPAGE                        = ' '
*     IGNORE_CERR                     = ABAP_TRUE
*     REPLACEMENT                     = '#'
*     WRITE_BOM                       = ' '
*     TRUNC_TRAILING_BLANKS_EOL       = 'X'
*     WK1_N_FORMAT                    = ' '
*     WK1_N_SIZE                      = ' '
*     WK1_T_FORMAT                    = ' '
*     WK1_T_SIZE                      = ' '
*     WRITE_LF_AFTER_LAST_LINE        = ABAP_TRUE
*     SHOW_TRANSFER_STATUS            = ABAP_TRUE
*   IMPORTING
*     FILELENGTH                      =
TABLES
DATA_TAB                        = ltd_t001
*     FIELDNAMES                      =
EXCEPTIONS
FILE_WRITE_ERROR                = 1
NO_BATCH                        = 2
GUI_REFUSE_FILETRANSFER         = 3
INVALID_TYPE                    = 4
NO_AUTHORITY                    = 5
UNKNOWN_ERROR                   = 6
HEADER_NOT_ALLOWED              = 7
SEPARATOR_NOT_ALLOWED           = 8
FILESIZE_NOT_ALLOWED            = 9
HEADER_TOO_LONG                 = 10
DP_ERROR_CREATE                 = 11
DP_ERROR_SEND                   = 12
DP_ERROR_WRITE                  = 13
UNKNOWN_DP_ERROR                = 14
ACCESS_DENIED                   = 15
DP_OUT_OF_MEMORY                = 16
DISK_FULL                       = 17
DP_TIMEOUT                      = 18
FILE_NOT_FOUND                  = 19
DATAPROVIDER_EXCEPTION          = 20
CONTROL_FLUSH_ERROR             = 21
OTHERS                          = 22
.
IF SY-SUBRC <> 0.
* Implement suitable error handling here
WRITE 'Error'.
ENDIF.
