*&---------------------------------------------------------------------*
*& Report  ZYTD6030
*&
*&---------------------------------------------------------------------*
*&  機能     ： 得意先マスタ（受注先） 登録・変更ＢＩ用ファイル作成
*&  作成日   ： 2012/03/02
*&  作成者   ： SOLFIS(H.JO)
*&---------------------------------------------------------------------*
*&  変更履歴 ：
*&  変更内容 ：
*&---------------------------------------------------------------------*
*&
*& 仕様
*& ・本プログラムは入力ファイルに従い、標準BIプログラムである
*&　 RFBIDE00用のファイルを出力するところまでを行う。
*&   従って後続における標準BIプログラムRFBIDE00の実行を前提とする。
*&   (登録PG:ZYTD2070を元に変更機能を追加)
*&
*& ・入力ファイルの仕様は以下のとおり。
*&　 →形式は「タブ区切りテキスト」。
*&     格納先は「ローカルフォルダ」、あるいは「サーバディレクトリ」
*&
*& ・出力ファイルの仕様は以下のとおり。
*&　　→形式は「固定長テキスト」。格納先は「サーバディレクトリ」
*&
*& ・銀行詳細データ、取引先機能の更新は
*&　　→既存データをすべて削除して、新規登録する。
*&
*& ・処理終了後ダイアログボックスでログ(件数)を表示する。
*&---------------------------------------------------------------------*
REPORT ZYTD6030 MESSAGE-ID Y1
NO STANDARD PAGE HEADING.
*&---------------------------------------------------------------------*
*& Table定義                                                           *
*&---------------------------------------------------------------------*
TABLES:BGR00,      "セッションレコード
BKN00,      "ヘッダレコード
BKNA1,      "一般データ
BKNB1,      "会社コードデータ
BKNVV,      "販売エリアデータ
BKNVI,      "税データ
BKNBK,      "得意先銀行データ
BKNVP,      "取引先機能
BKNKK,      "得意先信用限度管理領域データ
DD03L.      "テーブル項目

*&---------------------------------------------------------------------*
*& TYPES定義                                                           *
*&---------------------------------------------------------------------*
TYPES:
BEGIN OF T_S_DATA,
KUNNR(10),                  "得意先コード
BUKRS(4),                   "会社コード
VKORG(4),                   "販売組織
VTWEG(2),                   "流通チャネル
SPART(2),                   "製品部門
KTOKD(4),                   "勘定グループ
ANRED(15),                  "敬称
NAME1(40),                                            "名称 1
NAME2(40),                                            "名称 2
NAME3(40),                                            "名称 3
NAME4(40),                                            "名称 4
SORTL(10),                  "検索条件
STRAS(60),                  "都道府県名
ORT01(40),                  "市区町村名
ORT02(35),                  "所在地
PSTLZ(10),                  "郵便番号
PFACH(10),                  "私書箱
PSTL2(10),                  "私書箱郵便番号
LAND1(3),                   "国コード
REGIO(3),                   "地域
SPRAS(2),                   "言語
TELF1(16),                  "電話番号１
TELFX(31),                  "ファックス番号
LIFNR(10),                  "仕入先コード
LZONE(10),                  "納入区域
BANKS(3),                   "国
BANKL(15),                  "銀行コード
BANKN(18),                  "銀行口座
BKONT(2),                   "銀行管理キー
NAME5(35),                  "取引先担当者名称１
TELF2(16),                  "取引先担当者電話番号１
NAMEV(35),                  "取引先担当者名前
AKONT(10),                  "統制勘定コード
ZUAWA(3),                   "ソートキー
ZTERM1(4),                  "支払条件
XZVER(1),                   "支払履歴記録
ZWELS(10),                  "支払方法
KVGR1(3),                   "得意先グループ１
KVGR2(3),                   "得意先グループ２
KVGR3(3),                   "得意先グループ３
KVGR4(3),                   "得意先グループ４
KVGR5(3),                   "得意先グループ５
KATR1(2),                   "属性１
KATR2(2),                   "属性２
KATR3(2),                   "属性３
KATR4(2),                   "属性４
KATR5(2),                   "属性５
VKBUR(4),                   "営業所
VKGRP(3),                   "営業所グループ
KDGRP(2),                   "得意先グループ
WAERS(5),                   "通貨コード
AWAHR(3),                   "受注可能性
KONDA(2),                   "値引グループ
KALKS(1),                   "価格設定区分
PLTYP(2),                   "価格グループ
VERSG(1),                   "統計グループ
LPRIO(2),                   "出荷優先順位
VSBED(2),                   "出荷条件
VWERK(4),                   "出荷プラント
KZAZU(1),                   "受注伝票結合可能
AUTLF(1),                   "一括納入
KZTLF(1),                   "分割納入／明細
ANTLF(1),                   "分納最大回数
MRNKZ(1),                   "マニュアル請求書更新
INCO1(3),                   "インコタームズ (1)
INCO2(23),                  "インコタームズ 2
ZTERM2(4),                  "支払条件(請求)
KTGRD(2),                   "勘定設定グループ
TAXKD(1),                   "税クラス
KTONR1(10),                 "取引先機能（請求）
KTONR2(10),                 "取引先機能（支払）
KTONR3(10),                 "取引先機能（担当）
KTONR4(10),                 "取引先機能（出荷）
KOINH(35),                  "口座名義人
KESSAI_S(1),                "仕入先決済
UMSA1(15),                  "年間売上高
JMZAH(6),                   "従業員数
KVERM(30),                  "コメント
HITYP(2),                   "階層タイプ
INTAD(130),                 "担当者Internet
KTONR5(10),                 "取引先機能（取引先）
KTONR6(10),                 "取引先機能（入金先）
KTONR7(10),                 "取引先機能（相殺対象）
KKBER(4),                   "与信管理領域
KLIMK(20),                  "与信限度額
CTLPC(3),                   "リスクカテゴリ
END OF T_S_DATA,
T_I_DATA    TYPE TABLE OF T_S_DATA,  "内部テーブル定義

BEGIN OF T_S_TAB,
DAT(1000),
END OF T_S_TAB,
T_I_TAB     TYPE TABLE OF T_S_TAB.   "内部テーブル定義

*&---------------------------------------------------------------------*
*& DATA定義                                                            *
*&---------------------------------------------------------------------*
*グローバル定義
* 処理件数COUNT用構造
DATA:
BEGIN OF GS_LINE,
IN        TYPE P,     "読込ファイルデータ件数
OUT       TYPE P,     "出力ファイルデータ件数
END OF GS_LINE,

* 処理データ格納用内部テーブル
GIT_DATA    TYPE T_I_DATA.
*----------------------------------------------------------------------*
* CONSTANTS定義
*----------------------------------------------------------------------*
CONSTANTS:
CNS_FLG_ON(1)  TYPE C     VALUE 'X',    "フラグON

* 記号系
BEGIN OF CNS_SYB,
TAB          TYPE X     VALUE '09',
SLA          TYPE C     VALUE '/',
END   OF CNS_SYB,

* 取引先機能
BEGIN OF CNS_PARVW,
SEIKYU       TYPE PARVW VALUE 'BP',    "請求先
SIHARAI      TYPE PARVW VALUE 'PY',    "支払人
EIGYO        TYPE PARVW VALUE 'PE',    "営業員
SHUKKA       TYPE PARVW VALUE 'SH',    "出荷先
TORIHIKI     TYPE PARVW VALUE 'Z3',    "取引先
NYUKIN       TYPE PARVW VALUE 'Y3',    "入金先
SOUSAI       TYPE PARVW VALUE 'Z2',    "相殺対象
END   OF CNS_PARVW,

* トランザクションコード
BEGIN OF CNS_TCD,
XD01         TYPE TCODE VALUE 'XD01',  "T-cd：得意先マスタ登録
XD02         TYPE TCODE VALUE 'XD02',  "T-cd：得意先マスタ更新
FD32         TYPE TCODE VALUE 'FD32',  "T-cd：得意先与信管理変更
END   OF CNS_TCD,

* トランザクションコード
BEGIN OF CNS_PROC,
CUSTOMER     TYPE C VALUE '1',  "得意先マスタ処理
CREDIT       TYPE C VALUE '2',  "得意先与信管理処理
END   OF CNS_PROC.


*&---------------------------------------------------------------------*
*& 選択画面定義                                                        *
*&---------------------------------------------------------------------*
*年度
PARAMETERS:P_UMJAH LIKE BKNA1-UMJAH.

SELECTION-SCREEN SKIP.

* 処理区分BLOCK
SELECTION-SCREEN BEGIN OF BLOCK BLK01 WITH FRAME TITLE TEXT-001.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS P_INS RADIOBUTTON GROUP RB1 DEFAULT 'X'.
SELECTION-SCREEN COMMENT (20) TEXT-002 FOR FIELD P_INS.
PARAMETERS P_UPD RADIOBUTTON GROUP RB1.
SELECTION-SCREEN COMMENT (20) TEXT-003 FOR FIELD P_UPD.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK BLK01.

SELECTION-SCREEN SKIP.

SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS P_ROC RADIOBUTTON GROUP RB2 DEFAULT 'X'.
SELECTION-SCREEN COMMENT (20) TEXT-004 FOR FIELD P_ROC.
SELECTION-SCREEN END OF LINE.

PARAMETERS:
P_RIN(128)  LOWER CASE.   "入力ﾌｧｲﾙ名(ローカル)

SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS P_SEV RADIOBUTTON GROUP RB2.
SELECTION-SCREEN COMMENT (20) TEXT-005 FOR FIELD P_SEV.
SELECTION-SCREEN END OF LINE.

PARAMETERS:
P_SIN(60)   LOWER CASE.                "入力ﾌｧｲﾙ名(サーバ)

SELECTION-SCREEN SKIP.

PARAMETERS:
P_OUT(60) LOWER CASE OBLIGATORY,       "出力ﾌｧｲﾙ名

P_GROUP TYPE BGR00-GROUP OBLIGATORY    "ﾊﾞｯﾁｲﾝﾌﾟｯﾄｾｯｼｮﾝ名
DEFAULT SY-REPID.

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN ON VALUE-REQUEST                                *
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_SIN.

* 検索HELP(サーバ)
PERFORM CHOOSE_SERVER_FILE USING P_SIN.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_RIN.

* 検索HELP(ローカル)
PERFORM OPEN_DIALOG CHANGING P_RIN.

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN                                                 *
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN.

* 入力チェック
PERFORM CHECK_INPUT.

*&---------------------------------------------------------------------*
*& START-OF-SELECTION                                                  *
*&---------------------------------------------------------------------*
START-OF-SELECTION.

* ファイル処理
PERFORM FILE_PROC.

* マスタチェック処理
PERFORM CHECK_PROC.

* ＢＤＣデータ作成処理
PERFORM CRATE_BDC_PROC.

* 結果出力処理
PERFORM INFO_PROC.

*&--------------------------------------------------------------------
*&      Form  CHOOSE_SERVER_FILE
*&--------------------------------------------------------------------
FORM CHOOSE_SERVER_FILE  USING  P_BKFILE.

DATA: L_PATH      TYPE DXFIELDS-LONGPATH,
L_ABEND_FLG TYPE DXFIELDS-ABENDFLAG.

CALL FUNCTION 'F4_DXFILENAME_TOPRECURSION'
EXPORTING
I_LOCATION_FLAG = 'A'
I_SERVER        = ''
I_PATH          = 'D:\'
FILEMASK        = '*.*'
FILEOPERATION   = 'R'
IMPORTING
O_PATH          = L_PATH
ABEND_FLAG      = L_ABEND_FLG
EXCEPTIONS
RFC_ERROR       = 1
OTHERS          = 2.

CHECK SY-SUBRC = 0
AND L_ABEND_FLG <> 'X'.

P_BKFILE = L_PATH.

ENDFORM.                    " CHOOSE_SERVER_FILE
*&---------------------------------------------------------------------*
*&      Form  OPEN_DIALOG
*&---------------------------------------------------------------------*
*       ファイルオープンダイアログ
*----------------------------------------------------------------------*
*      <--O_FILE  ローカルファイルパス
*----------------------------------------------------------------------*
FORM OPEN_DIALOG  CHANGING P_RCPATH.

DATA :
LV_TABLE    TYPE FILETABLE,
LV_RC       TYPE I,
LV_FILENAME TYPE STRING,
LW_TABLE    LIKE LINE OF LV_TABLE.

LV_FILENAME = P_RCPATH..

CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
EXPORTING
WINDOW_TITLE            = 'ローカルファイルの指定'
DEFAULT_FILENAME        =  LV_FILENAME
FILE_FILTER             = 'ALL FILES|*.*'
INITIAL_DIRECTORY       = 'C:\'
CHANGING
FILE_TABLE              = LV_TABLE
RC                      = LV_RC
EXCEPTIONS
FILE_OPEN_DIALOG_FAILED = 1
CNTL_ERROR              = 2
ERROR_NO_GUI            = 3
OTHERS                  = 4.

READ TABLE LV_TABLE INTO LW_TABLE INDEX 1.
P_RCPATH = LW_TABLE-FILENAME.

ENDFORM.                    " OPEN_DIALOG
*&---------------------------------------------------------------------*
*&      Form  CHECK_INPUT
*&---------------------------------------------------------------------*
*       入力チェック
*----------------------------------------------------------------------*
FORM CHECK_INPUT .

* 処理分岐
CASE CNS_FLG_ON.
*   ローカル選択
WHEN P_ROC.
CHECK P_RIN IS INITIAL.
SET CURSOR FIELD 'P_RIN'.
MESSAGE E401(Y1)
WITH '入力ファイル(ローカル)を入力してください'.

*   サーバ選択
WHEN P_SEV.
CHECK P_SIN IS INITIAL.
SET CURSOR FIELD 'P_SIN'.
MESSAGE E401(Y1)
WITH '入力ファイル（サーバ）を入力してください'.
*   その他
WHEN OTHERS.
*     処理なし

ENDCASE.

ENDFORM.                    " CHECK_INPUT
*&---------------------------------------------------------------------*
*&      Form  FILE_PROC
*&---------------------------------------------------------------------*
*       ファイル処理
*----------------------------------------------------------------------*
FORM FILE_PROC.

REFRESH GIT_DATA.
CLEAR GS_LINE.

* ファイルデータの読込
PERFORM OPEN_READ_PROC.

* 入力ファイル件数チェック
DESCRIBE TABLE GIT_DATA LINES GS_LINE-IN.

CHECK GS_LINE-IN = 0.
MESSAGE S401(Y1) WITH '入力ファイルが０件です'.
LEAVE LIST-PROCESSING.

ENDFORM.                    " FILE_PROC
*&---------------------------------------------------------------------*
*&      Form  OPEN_READ_PROC
*&---------------------------------------------------------------------*
*       ファイルオープン
*----------------------------------------------------------------------*
FORM OPEN_READ_PROC.

* 処理分岐
CASE CNS_FLG_ON.
*   ローカル選択
WHEN P_ROC.
*     ローカルファイル読込
PERFORM UPLOAD_LOCAL_FILE.

*   サーバ選択
WHEN P_SEV.

*     サーバファイル読込
PERFORM DATASET_SEVER_FILE.

*   その他
WHEN OTHERS.
*     処理なし

ENDCASE.

* 出力ファイル(サーバ)
OPEN DATASET P_OUT FOR OUTPUT IN TEXT MODE.
CHECK SY-SUBRC <> 0.
MESSAGE S401 WITH '出力ファイルオープンエラー'
P_OUT.
LEAVE LIST-PROCESSING.

ENDFORM.                    " OPEN_READ_PROC
*&---------------------------------------------------------------------*
*&      Form  UPLOAD_LOCAL_FILE
*&---------------------------------------------------------------------*
*       ローカルファイル読込
*----------------------------------------------------------------------*
FORM UPLOAD_LOCAL_FILE.

DATA :
LW_FILE       TYPE STRING.

LW_FILE = P_RIN.

CALL FUNCTION 'GUI_UPLOAD'
EXPORTING
FILENAME                = LW_FILE
HAS_FIELD_SEPARATOR     = CNS_FLG_ON
TABLES
DATA_TAB                = GIT_DATA
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
OTHERS                  = 17.

CHECK SY-SUBRC <> 0.
MESSAGE S401 WITH '入力ファイルオープンエラー'
P_RIN.
LEAVE LIST-PROCESSING.

ENDFORM.                    " UPLOAD_LOCAL_FILE
*&---------------------------------------------------------------------*
*&      Form  DATASET_SEVER_FILE
*&---------------------------------------------------------------------*
*       text　サーバファイル処理
*----------------------------------------------------------------------*
FORM DATASET_SEVER_FILE.

* ローカル定義
DATA:
LIT_TAB   TYPE T_I_TAB.

* 入力ファイル（サーバ）
OPEN DATASET P_SIN FOR INPUT IN TEXT MODE.
IF SY-SUBRC <> 0.
MESSAGE S401 WITH '入力ファイルオープンエラー'
P_SIN.
LEAVE LIST-PROCESSING.
ENDIF.

* ファイル読込処理
PERFORM READ_FILE
CHANGING LIT_TAB.

* ファイル項目分割処理
PERFORM SPLIT_DATA
USING LIT_TAB
CHANGING GIT_DATA.

ENDFORM.                    " DATASET_SEVER_FILE
*&---------------------------------------------------------------------*
*&      Form  READ_FILE
*&---------------------------------------------------------------------*
*       ファイル読込処理
*----------------------------------------------------------------------*
FORM READ_FILE CHANGING PIT_TAB TYPE T_I_TAB.

*  ローカル定義
DATA :
LS_TAB     TYPE T_S_TAB.

DO.
CLEAR LS_TAB.
READ DATASET P_SIN INTO LS_TAB.

IF SY-SUBRC <> 0.
EXIT.
ENDIF.
APPEND LS_TAB TO PIT_TAB.
ENDDO.
CLOSE DATASET P_SIN.
ENDFORM.                    " READ_FILE
*&---------------------------------------------------------------------*
*&      Form  SPLIT_DATA
*&---------------------------------------------------------------------*
*       分割処理
*----------------------------------------------------------------------*
FORM SPLIT_DATA USING    PIT_TAB    TYPE T_I_TAB
CHANGING PIT_DATA   TYPE T_I_DATA.

* ローカル定義
DATA :
LS_TAB     TYPE T_S_TAB,
LS_DATA    TYPE T_S_DATA.

LOOP AT PIT_TAB INTO LS_TAB.

CLEAR LS_DATA.
SPLIT LS_TAB AT CNS_SYB-TAB INTO
LS_DATA-KUNNR                  "得意先コード
LS_DATA-BUKRS                  "会社コード
LS_DATA-VKORG                  "販売組織
LS_DATA-VTWEG                  "流通チャネル
LS_DATA-SPART                  "製品部門
LS_DATA-KTOKD                  "勘定グループ
LS_DATA-ANRED                  "敬称
LS_DATA-NAME1                                         "名称 1
LS_DATA-NAME2                                         "名称 2
LS_DATA-NAME3                                         "名称 3
LS_DATA-NAME4                                         "名称 4
LS_DATA-SORTL                  "検索条件
LS_DATA-STRAS                  "都道府県名
LS_DATA-ORT01                  "市区町村名
LS_DATA-ORT02                  "所在地
LS_DATA-PSTLZ                  "郵便番号
LS_DATA-PFACH                  "私書箱
LS_DATA-PSTL2                  "私書箱郵便番号
LS_DATA-LAND1                  "国コード
LS_DATA-REGIO                  "地域
LS_DATA-SPRAS                  "言語
LS_DATA-TELF1                  "電話番号１
LS_DATA-TELFX                  "ファックス番号
LS_DATA-LIFNR                  "仕入先コード
LS_DATA-LZONE                  "納入区域
LS_DATA-BANKS                  "国
LS_DATA-BANKL                  "銀行コード
LS_DATA-BANKN                  "銀行口座
LS_DATA-BKONT                  "銀行管理キー
LS_DATA-NAME5                  "取引先担当者名称１
LS_DATA-TELF2                  "取引先担当者電話番号１
LS_DATA-NAMEV                  "取引先担当者名前
LS_DATA-AKONT                  "統制勘定コード
LS_DATA-ZUAWA                  "ソートキー
LS_DATA-ZTERM1                 "支払条件
LS_DATA-XZVER                  "支払履歴記録
LS_DATA-ZWELS                  "支払方法
LS_DATA-KVGR1                  "得意先グループ１
LS_DATA-KVGR2                  "得意先グループ２
LS_DATA-KVGR3                  "得意先グループ３
LS_DATA-KVGR4                  "得意先グループ４
LS_DATA-KVGR5                  "得意先グループ５
LS_DATA-KATR1                  "属性１
LS_DATA-KATR2                  "属性２
LS_DATA-KATR3                  "属性３
LS_DATA-KATR4                  "属性４
LS_DATA-KATR5                  "属性５
LS_DATA-VKBUR                  "営業所
LS_DATA-VKGRP                  "営業所グループ
LS_DATA-KDGRP                  "得意先グループ
LS_DATA-WAERS                  "通貨コード
LS_DATA-AWAHR                  "受注可能性
LS_DATA-KONDA                  "値引グループ
LS_DATA-KALKS                  "価格設定区分
LS_DATA-PLTYP                  "価格グループ
LS_DATA-VERSG                  "統計グループ
LS_DATA-LPRIO                  "出荷優先順位
LS_DATA-VSBED                  "出荷条件
LS_DATA-VWERK                  "出荷プラント
LS_DATA-KZAZU                  "受注伝票結合可能
LS_DATA-AUTLF                  "一括納入
LS_DATA-KZTLF                  "分割納入／明細
LS_DATA-ANTLF                  "分納最大回数
LS_DATA-MRNKZ                  "マニュアル請求書更新
LS_DATA-INCO1                  "インコタームズ (1)
LS_DATA-INCO2                  "インコタームズ 2
LS_DATA-ZTERM2                 "支払条件(請求)
LS_DATA-KTGRD                  "勘定設定グループ
LS_DATA-TAXKD                  "税クラス
LS_DATA-KTONR1                 "取引先機能（請求）
LS_DATA-KTONR2                 "取引先機能（支払）
LS_DATA-KTONR3                 "取引先機能（担当）
LS_DATA-KTONR4                 "取引先機能（出荷）
LS_DATA-KOINH                  "口座名義人
LS_DATA-KESSAI_S               "仕入先決済
LS_DATA-UMSA1                  "年間売上高
LS_DATA-JMZAH                  "従業員数
LS_DATA-KVERM                  "コメント
LS_DATA-HITYP                  "階層タイプ
LS_DATA-INTAD                  "担当者Internet
LS_DATA-KTONR5                 "取引先機能（取引先）
LS_DATA-KTONR6                 "取引先機能（入金先）
LS_DATA-KTONR7                 "取引先機能（相殺対象）
LS_DATA-KKBER                  "与信管理領域
LS_DATA-KLIMK                  "与信限度額
LS_DATA-CTLPC.                 "リスクカテゴリ
APPEND LS_DATA TO PIT_DATA.
ENDLOOP.

ENDFORM.                    " SPLIT_DATA
*&---------------------------------------------------------------------*
*&      Form  CHECK_PROC                                               *
*&---------------------------------------------------------------------*
*       マスタの存在チェック
*----------------------------------------------------------------------*
FORM CHECK_PROC.

* ローカル定義
DATA :
LW_ERFLG     TYPE C,          "エラーフラグ
LS_DATA      TYPE T_S_DATA,
LW_KUNNR_S   TYPE KNA1-KUNNR, "得意先(検索用)
LW_KUNNR_W   TYPE KNA1-KUNNR. "得意先(一次格納)

LOOP AT GIT_DATA INTO LS_DATA.

CLEAR:
LW_KUNNR_W,
LW_ERFLG.

*  前ゼロ処理
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = LS_DATA-KUNNR
IMPORTING
OUTPUT = LW_KUNNR_S.

*   得意先コード取得
SELECT SINGLE KUNNR
FROM KNA1
INTO LW_KUNNR_W
WHERE KUNNR = LW_KUNNR_S.

IF P_INS = CNS_FLG_ON.
*   登録時のマスタチェック

IF NOT LW_KUNNR_W IS INITIAL.
MESSAGE I401 WITH '得意先マスタに存在します.得意='
LS_DATA-KUNNR.
LW_ERFLG = CNS_FLG_ON.
ENDIF.
ELSE.
*   変更時のマスタチェック
IF LW_KUNNR_W IS INITIAL.
MESSAGE I401 WITH '得意先マスタに存在しません.得意='
LS_DATA-KUNNR.
LW_ERFLG = CNS_FLG_ON.
ENDIF.
ENDIF.

*  文字列の長さチェック
PERFORM CHECK_LENTH :
*                       名称１
USING LS_DATA
LS_DATA-NAME1
TEXT-T01
CHANGING LW_ERFLG,
*                       名称２
USING LS_DATA
LS_DATA-NAME2
TEXT-T02
CHANGING LW_ERFLG,
*                       名称３
USING LS_DATA
LS_DATA-NAME3
TEXT-T03
CHANGING LW_ERFLG,
*                       名称４
USING LS_DATA
LS_DATA-NAME4
TEXT-T04
CHANGING LW_ERFLG,
*                       都道府県名
USING LS_DATA
LS_DATA-STRAS
TEXT-T05
CHANGING LW_ERFLG,
*                       市区町村名
USING LS_DATA
LS_DATA-ORT01
TEXT-T06
CHANGING LW_ERFLG.

CHECK NOT LW_ERFLG IS INITIAL.

DELETE GIT_DATA
WHERE KUNNR = LS_DATA-KUNNR.


ENDLOOP.

ENDFORM.                    " CHECK_PROC
*&---------------------------------------------------------------------*
*&      Form  CRATE_BDC_PROC
*&---------------------------------------------------------------------*
*       出力用ＢＤＣデータ作成
*----------------------------------------------------------------------*
FORM CRATE_BDC_PROC.

* ローカル定義
DATA :
LS_DATA      TYPE T_S_DATA.

* セッションデータ用バッチ入力構造
PERFORM SET_BGR00.        "ｾｯｼｮﾝﾚｺｰﾄﾞ 作成

LOOP AT GIT_DATA INTO LS_DATA.

*   得意先のレコード
PERFORM SET_BKN00 USING CNS_PROC-CUSTOMER
LS_DATA.

*   一般データ設定
PERFORM SET_BKNA1 USING LS_DATA.

*   会社コードデータ設定
PERFORM SET_BKNB1 USING LS_DATA.

*   販売エーリアデータ設定
PERFORM SET_BKNVV USING LS_DATA.

*   税データ設定
PERFORM SET_BKNVI USING LS_DATA.

*   銀行データ設定
PERFORM SET_BKNBK USING LS_DATA.

*   取引先機能設定
PERFORM SET_BKNVP USING LS_DATA.

*   得意先与信管理変更のレコード
PERFORM SET_BKN00 USING CNS_PROC-CREDIT
LS_DATA.

*   得意先与信管理のステータスデータ設定
PERFORM SET_BKNKK USING LS_DATA.

*   出力レコード件数
ADD 1 TO GS_LINE-OUT.

ENDLOOP.

ENDFORM.                    " CRATE_BDC_PROC
*&---------------------------------------------------------------------*
*&      Form  SET_INIT_VAL
*&---------------------------------------------------------------------*
*       バッチテーブルへの初期値のセット
*----------------------------------------------------------------------*
*      -->P_DB   セット先データベース名
*----------------------------------------------------------------------*
FORM SET_INIT_VAL USING VALUE(P_DB).

* ローカル定義
FIELD-SYMBOLS <PT> TYPE ANY.
DATA: WK_DB(60) TYPE C.

* 変数の初期化
SELECT *
FROM DD03L
WHERE TABNAME = P_DB.

CONCATENATE P_DB '-' DD03L-FIELDNAME INTO WK_DB.
ASSIGN (WK_DB) TO <PT>.
<PT> = CNS_SYB-SLA.

ENDSELECT.

ENDFORM.                    " SET_INIT_VAL
*&---------------------------------------------------------------------*
*&      Form  SET_BGR00
*&---------------------------------------------------------------------*
*       ｾｯｼｮﾝﾚｺｰﾄﾞ 作成
*----------------------------------------------------------------------*
FORM SET_BGR00.

PERFORM SET_INIT_VAL USING 'BGR00'.

BGR00-STYPE  = '0'.           "レコードタイプ
BGR00-GROUP  = P_GROUP.       "グループ名(ｾｯｼｮﾝ名)
BGR00-MANDT  = SY-MANDT.      "クライアント
BGR00-USNAM  = SY-UNAME.      "ＵＳＥＲ　ＩＤ
BGR00-START  = ' '.           "開始日
BGR00-XKEEP  = CNS_FLG_ON.    "保持フラグ
BGR00-NODATA = CNS_SYB-SLA.   "バッチインプットなし項目
TRANSFER BGR00 TO P_OUT.

ENDFORM.                                                    " SET_BGR00
*&---------------------------------------------------------------------*
*&      Form  SET_BKN00
*&---------------------------------------------------------------------*
*       得意先のレコード
*----------------------------------------------------------------------*
*      -->PW_PROC  処理区分
*      -->PS_DATA  入力データ
*----------------------------------------------------------------------*
FORM SET_BKN00 USING PW_PROC
PS_DATA TYPE T_S_DATA.

* ローカル定義
DATA :
L_10N(10)    TYPE N,
L_4N(4)      TYPE N,
L_KUNNR      TYPE KNA1-KUNNR.

* 初期値の設定
PERFORM SET_INIT_VAL USING 'BKN00'.

* 前0処理
IF PS_DATA-KUNNR CO '1234567890 '.
L_10N = PS_DATA-KUNNR.
BKN00-KUNNR = L_10N.
ELSE.
BKN00-KUNNR = PS_DATA-KUNNR.
ENDIF.

IF PW_PROC = CNS_PROC-CUSTOMER.
*   得意先マスタ処理
IF P_INS = CNS_FLG_ON.
BKN00-TCODE  = CNS_TCD-XD01.        "Tr-CD:得意先マスタ登録
IF PS_DATA-KTOKD CO '1234567890 '.
L_4N = PS_DATA-KTOKD.
BKN00-KTOKD = L_4N.
ELSE.
BKN00-KTOKD  = PS_DATA-KTOKD.       "得意先勘定グループ
ENDIF.
ELSE.
BKN00-TCODE  = CNS_TCD-XD02.        "Tr-CD:得意先マスタ変更
ENDIF.
ELSEIF PW_PROC = CNS_PROC-CREDIT.
*   得意先与信管理処理
BKN00-TCODE = CNS_TCD-FD32.        "Tr-CD:得意先与信管理変更
BKN00-KKBER = 'C001'.              "与信管理領域
ENDIF.

BKN00-STYPE  = '1'.              "レコードタイプ
BKN00-BUKRS  = PS_DATA-BUKRS.    "会社コード
BKN00-VKORG  = PS_DATA-VKORG.    "販売組織
BKN00-VTWEG  = PS_DATA-VTWEG.    "流通チャネル
BKN00-SPART  = PS_DATA-SPART.    "製品部門

TRANSFER BKN00 TO P_OUT.

ENDFORM.                                                    " SET_BKN00
*&---------------------------------------------------------------------*
*&      Form  SET_BKNA1
*&---------------------------------------------------------------------*
*       一般データ設定
*----------------------------------------------------------------------*
*      -->PS_DATA  入力データ
*----------------------------------------------------------------------*
FORM SET_BKNA1 USING PS_DATA TYPE T_S_DATA.

* ローカル定義
DATA :
L_2N(02) TYPE N.

PERFORM SET_INIT_VAL USING 'BKNA1'.

BKNA1-STYPE  = '2'.              "レコードタイプ
BKNA1-TBNAM  = 'BKNA1'.          "テーブル名
BKNA1-ANRED  = PS_DATA-ANRED.    "敬称
BKNA1-NAME1  = PS_DATA-NAME1.                             "名称 1
BKNA1-NAME2  = PS_DATA-NAME2.    "漢字全選択称
BKNA1-NAME3  = PS_DATA-NAME3.    "カタカナ略称
BKNA1-NAME4  = PS_DATA-NAME4.    "漢字略称
BKNA1-SORTL  = PS_DATA-SORTL.    "ソート項目
BKNA1-STRAS  = PS_DATA-STRAS.    "都道府県名
BKNA1-PFACH  = PS_DATA-PFACH.    "私書箱
BKNA1-ORT01  = PS_DATA-ORT01.    "市区町村名
BKNA1-PSTLZ  = PS_DATA-PSTLZ.    "郵便番号
BKNA1-ORT02  = PS_DATA-ORT02.    "所在地
BKNA1-PSTL2  = PS_DATA-PSTL2.    "私書箱郵便番号
BKNA1-LAND1  = PS_DATA-LAND1.    "国コード
IF PS_DATA-REGIO CO '1234567890 '.
L_2N = PS_DATA-REGIO.
BKNA1-REGIO = L_2N.            "地域 (州、準州、国)
ELSE.
BKNA1-REGIO  = PS_DATA-REGIO.  "地域 (州、準州、国)
ENDIF.
BKNA1-SPRAS  = PS_DATA-SPRAS.    "言語キー
BKNA1-TELF1  = PS_DATA-TELF1.                             "電話番号 1
BKNA1-TELFX  = PS_DATA-TELFX.    "ファックス番号
BKNA1-LIFNR  = PS_DATA-LIFNR.    "仕入先(債権者)勘定設定
BKNA1-LZONE  = PS_DATA-LZONE.    "納入区域
BKNA1-UMSA1  = PS_DATA-UMSA1.    "年間売上高 (バッチインプット)
IF NOT PS_DATA-UMSA1 IS INITIAL AND
PS_DATA-UMSA1 <> '0'  AND
PS_DATA-UMSA1 <> CNS_SYB-SLA.
BKNA1-UMJAH  = P_UMJAH.        "販売年 (バッチインプット)
BKNA1-UWAER  = 'JPY'.          "販売通貨
ENDIF.
BKNA1-JMZAH  = PS_DATA-JMZAH.    "年間従業員数 (バッチインプット)
IF NOT PS_DATA-JMZAH IS INITIAL AND
PS_DATA-JMZAH <> '0'  AND
PS_DATA-JMZAH <> CNS_SYB-SLA.
BKNA1-JMJAH  = P_UMJAH.
ENDIF.
BKNA1-KATR1  = PS_DATA-KATR1.                             "属性 1
BKNA1-KATR2  = PS_DATA-KATR2.                             "属性 2
BKNA1-KATR3  = PS_DATA-KATR3.                             "属性 3
BKNA1-KATR4  = PS_DATA-KATR4.                             "属性 4
BKNA1-KATR5  = PS_DATA-KATR5.                             "属性 5

TRANSFER BKNA1 TO P_OUT.

ENDFORM.                                                    " SET_BKNA1
*&---------------------------------------------------------------------*
*&      Form  SET_BKNB1
*&---------------------------------------------------------------------*
*       会社コードデータ設定
*----------------------------------------------------------------------*
*      -->PS_DATA  入力データ
*----------------------------------------------------------------------*
FORM SET_BKNB1 USING PS_DATA TYPE T_S_DATA.

* ローカル定義
DATA :
L_4N(4) TYPE N.

PERFORM SET_INIT_VAL USING 'BKNB1'.

BKNB1-STYPE  = '2'.              "レコードタイプ
BKNB1-TBNAM  = 'BKNB1'.          "テーブル名
BKNB1-AKONT  = PS_DATA-AKONT.    "総勘定元帳統制勘定コード
BKNB1-ZUAWA  = PS_DATA-ZUAWA.    "割当番号ソートキー
IF PS_DATA-ZTERM1 CO '1234567890 '.
L_4N = PS_DATA-ZTERM1.
BKNB1-ZTERM = L_4N.            "支払条件キー
ELSE.
BKNB1-ZTERM  = PS_DATA-ZTERM1. "支払条件キー
ENDIF.
BKNB1-XZVER  = PS_DATA-XZVER.    "フラグ: 支払履歴記録
BKNB1-ZWELS  = PS_DATA-ZWELS.    "支払方法一覧
BKNB1-XVERR  = PS_DATA-KESSAI_S. "フラグ: 得意先と仕入先間の相殺決済
BKNB1-ZSABE  = PS_DATA-NAME5.    "得意先担当者
BKNB1-TLFNS  = PS_DATA-TELF2.    "Act.clk tel.no.
BKNB1-KVERM  = PS_DATA-KVERM.    "コメント
BKNB1-INTAD  = PS_DATA-INTAD.    "関係会社担当者のインターネット

TRANSFER BKNB1 TO P_OUT.

ENDFORM.                                                    " SET_BKNB1
*&---------------------------------------------------------------------*
*&      Form  SET_BKNVV
*&---------------------------------------------------------------------*
*       販売エーリアデータ設定
*----------------------------------------------------------------------*
*      -->PS_DATA  入力データ
*----------------------------------------------------------------------*
FORM SET_BKNVV USING PS_DATA TYPE T_S_DATA.

* ローカル定義
DATA :
L_2N(2) TYPE N,
L_4N(4) TYPE N.

PERFORM SET_INIT_VAL USING 'BKNVV'.

BKNVV-STYPE  = '2'.              "レコードタイプ
BKNVV-TBNAM  = 'BKNVV'.          "テーブル名
BKNVV-VKBUR  = PS_DATA-VKBUR.    "営業所
BKNVV-WAERS  = PS_DATA-WAERS.    "通貨コード
BKNVV-VKGRP  = PS_DATA-VKGRP.    "営業グループ
BKNVV-KDGRP  = PS_DATA-KDGRP.    "得意先グル−プ
BKNVV-KONDA  = PS_DATA-KONDA.    "値引グループ(得意先)
BKNVV-KALKS  = PS_DATA-KALKS.    "得意先の価格設定区分
BKNVV-LPRIO  = PS_DATA-LPRIO.    "出荷優先順位(バッチインプット)
BKNVV-PLTYP  = PS_DATA-PLTYP.    "価格グループ
BKNVV-VERSG  = PS_DATA-VERSG.    "統計グループ
BKNVV-KZAZU  = ' '.              "出荷処理時の受注伝票の結合可能区分
IF PS_DATA-VSBED CO '1234567890 '.
L_2N = PS_DATA-VSBED.
BKNVV-VSBED = L_2N.            "出荷条件
ELSE.
BKNVV-VSBED  = PS_DATA-VSBED.  "出荷条件
ENDIF.
BKNVV-VWERK  = PS_DATA-VWERK.    "出荷プラント
BKNVV-AUTLF  = PS_DATA-AUTLF.    "一括納入区分
BKNVV-KZTLF  = PS_DATA-KZTLF.    "明細レベルの分納納入
BKNVV-ANTLF  = PS_DATA-ANTLF.    "許可分割納入/明細の最大
BKNVV-MRNKZ  = PS_DATA-MRNKZ.    "マニュアル請求書更新
BKNVV-INCO1  = PS_DATA-INCO1.    "インコターム
BKNVV-INCO2  = PS_DATA-INCO2.    "インコターム 2
IF PS_DATA-ZTERM2 CO '1234567890 '.
L_4N = PS_DATA-ZTERM2.
BKNVV-ZTERM = L_4N.
ELSE.
BKNVV-ZTERM = PS_DATA-ZTERM2.   "支払条件キー
ENDIF.
IF PS_DATA-KTGRD CO '1234567890 '.
L_2N = PS_DATA-KTGRD.
BKNVV-KTGRD = L_2N.            "得意先の勘定設定グループ(*)
ELSE.
BKNVV-KTGRD  = PS_DATA-KTGRD.  "得意先の勘定設定グループ(*)
ENDIF.

BKNVV-KVGR1  = PS_DATA-KVGR1.    "得意先グループ 1
BKNVV-KVGR2  = PS_DATA-KVGR2.    "得意先グループ 2
BKNVV-KVGR3  = PS_DATA-KVGR3.    "得意先グループ 3
BKNVV-KVGR4  = PS_DATA-KVGR4.    "得意先グループ 4
BKNVV-KVGR5  = PS_DATA-KVGR5.    "得意先グループ 5

TRANSFER BKNVV TO P_OUT.

ENDFORM.                    " SET_BKNVV
*&---------------------------------------------------------------------*
*&      Form  SET_BKNVI
*&---------------------------------------------------------------------*
*       税データ設定
*----------------------------------------------------------------------*
*      -->PS_DATA  入力データ
*----------------------------------------------------------------------*
FORM SET_BKNVI USING PS_DATA TYPE T_S_DATA.

PERFORM SET_INIT_VAL USING 'BKN0VI'.

BKNVI-STYPE  = '2'.              "レコードタイプ
BKNVI-TBNAM  = 'BKNVI'.          "テーブル名
BKNVI-ALAND  = 'JP'.             "出荷国 (商品発送国)
BKNVI-TATYP  = 'MWST'.           "税カテゴリ (消費税等)
BKNVI-TAXKD  = PS_DATA-TAXKD.    "得意先に対する税クラス

TRANSFER BKNVI TO P_OUT.

ENDFORM.                    " SET_BKNVI
*&---------------------------------------------------------------------*
*&      Form  SET_BKNBK
*&---------------------------------------------------------------------*
*       銀行データ設定
*----------------------------------------------------------------------*
*      -->PS_DATA  入力データ
*----------------------------------------------------------------------*
FORM SET_BKNBK USING PS_DATA TYPE T_S_DATA.

* ローカル定義
DATA:
L_7N(7) TYPE N,
L_2N(2) TYPE N,
L_BANKS TYPE LFBK-BANKS, "銀行国コード
L_BANKL TYPE LFBK-BANKL, "銀行コード
L_BANKN TYPE LFBK-BANKN. "銀行口座番号

CHECK PS_DATA-BANKS <> CNS_SYB-SLA
AND PS_DATA-BANKL <> CNS_SYB-SLA
AND PS_DATA-BANKN <> CNS_SYB-SLA
AND PS_DATA-BKONT <> CNS_SYB-SLA
AND PS_DATA-KOINH <> CNS_SYB-SLA.

* 変更の場合、既存銀行データの削除
IF P_UPD = CNS_FLG_ON.

SELECT BANKS BANKL BANKN
INTO (L_BANKS, L_BANKL, L_BANKN)
FROM KNBK
WHERE KUNNR = BKN00-KUNNR.

PERFORM SET_INIT_VAL USING 'BKNBK'.

BKNBK-STYPE = '2'.             "ﾚｺｰﾄﾞﾀｲﾌﾟ
BKNBK-TBNAM = 'BKNBK'.         "ﾃｰﾌﾞﾙ名
BKNBK-BANKS = L_BANKS.         "銀行国コード
BKNBK-XDELE = 'X'.             "削除
BKNBK-BANKL = L_BANKL.         "銀行コード
BKNBK-BANKN = L_BANKN.         "銀行口座番号

TRANSFER BKNBK TO P_OUT.

ENDSELECT.

ENDIF.

PERFORM SET_INIT_VAL USING 'BKNBK'.

BKNBK-STYPE = '2'.              "レコードタイプ
BKNBK-TBNAM = 'BKNBK'.          "テーブル名
BKNBK-BANKS = PS_DATA-BANKS.    "銀行国コード
IF PS_DATA-BANKL CO '1234567890 '.
L_7N = PS_DATA-BANKL.
BKNBK-BANKL = L_7N.           "銀行コード
ELSE.
BKNBK-BANKL = PS_DATA-BANKL.  "銀行コード
ENDIF.
BKNBK-BANKN = PS_DATA-BANKN.    "銀行口座番号
IF PS_DATA-BKONT CO '1234567890 '.
L_2N = PS_DATA-BKONT.
BKNBK-BKONT = L_2N.           "銀行管理キー
ELSE.
BKNBK-BKONT = PS_DATA-BKONT.  "銀行管理キー
ENDIF.
BKNBK-KOINH = PS_DATA-KOINH.    "口座名義人

TRANSFER BKNBK TO P_OUT.

ENDFORM.                    " SET_BKNBK
*&---------------------------------------------------------------------*
*&      Form  SET_BKNVP
*&---------------------------------------------------------------------*
*       取引先機能設定
*----------------------------------------------------------------------*
*      -->PS_DATA  text
*----------------------------------------------------------------------*
FORM SET_BKNVP USING PS_DATA TYPE T_S_DATA.

* 請求先
PERFORM SET_PARVW USING CNS_PARVW-SEIKYU
PS_DATA-KTONR1.

* 支払人
PERFORM SET_PARVW USING CNS_PARVW-SIHARAI
PS_DATA-KTONR2.

* 営業員
PERFORM SET_PARVW USING CNS_PARVW-EIGYO
PS_DATA-KTONR3.

* 出荷先
PERFORM SET_PARVW USING CNS_PARVW-SHUKKA
PS_DATA-KTONR4.

* 取引先
PERFORM SET_PARVW USING CNS_PARVW-TORIHIKI
PS_DATA-KTONR5.

* 入金先
PERFORM SET_PARVW USING CNS_PARVW-NYUKIN
PS_DATA-KTONR6.

* 相殺対象
PERFORM SET_PARVW USING CNS_PARVW-SOUSAI
PS_DATA-KTONR7.

ENDFORM.                    " SET_BKNVP
*&---------------------------------------------------------------------*
*&      Form  set_parvw
*&---------------------------------------------------------------------*
*       取引先機能設定
*----------------------------------------------------------------------*
*      -->PW_PARVW  取引先機能コード
*      -->PW_KTONR  販売管理の取引先番号
*----------------------------------------------------------------------*
FORM SET_PARVW USING    PW_PARVW
PW_KTONR.

DATA:
L_KTONR(10) TYPE N,
L_KUNN2     TYPE KNVP-KUNN2,
L_LIFNR     TYPE KNVP-LIFNR,
L_PERNR     TYPE KNVP-PERNR,
L_PARVW     TYPE KNVP-PARVW.

CHECK NOT PW_KTONR IS INITIAL
AND PW_KTONR <> CNS_SYB-SLA.

PERFORM SET_INIT_VAL USING 'BKNVP'.

BKNVP-STYPE  = '2'.           "レコードタイプ
BKNVP-TBNAM  = 'BKNVP'.       "テーブル名
BKNVP-PARVW  = PW_PARVW.      "取引先機能コード
BKNVP-KTONR = PW_KTONR.     "販売管理の取引先番号

TRANSFER BKNVP TO P_OUT.

* 既に設定されているデータ削除
IF P_INS = CNS_FLG_ON.

CHECK PW_PARVW = CNS_PARVW-SEIKYU     "請求先
OR PW_PARVW = CNS_PARVW-SIHARAI    "支払人
OR PW_PARVW = CNS_PARVW-SHUKKA.    "出荷先

IF PW_KTONR CO '1234567890 '.
L_KTONR = PW_KTONR.
ENDIF.

IF L_KTONR <> BKN00-KUNNR.

PERFORM SET_INIT_VAL USING 'BKNVP'.

BKNVP-STYPE  = '2'.         "レコードタイプ
BKNVP-TBNAM  = 'BKNVP'.     "テーブル名
BKNVP-XDELE  = 'X'.         "フラグ:バッチインプットで登録削除?
BKNVP-PARVW  = PW_PARVW.    "取引先機能コード
BKNVP-KTONR  = BKN00-KUNNR. "販売管理の取引先番号

TRANSFER BKNVP TO P_OUT.

ENDIF.

ELSE.

CHECK PW_PARVW = CNS_PARVW-SEIKYU     "請求先
OR PW_PARVW = CNS_PARVW-SIHARAI    "支払人
OR PW_PARVW = CNS_PARVW-SHUKKA     "出荷先
OR PW_PARVW = CNS_PARVW-TORIHIKI   "取引先
OR PW_PARVW = CNS_PARVW-EIGYO      "営業員
OR PW_PARVW = CNS_PARVW-SOUSAI.    "相殺対象

*   取引先機能コード変換(外部→内部)
CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
EXPORTING
INPUT  = PW_PARVW
IMPORTING
OUTPUT = L_PARVW.

SELECT KUNN2
LIFNR
PERNR
INTO (L_KUNN2, L_LIFNR,L_PERNR)
FROM KNVP
WHERE KUNNR = BKN00-KUNNR
AND VKORG = BKN00-VKORG
AND VTWEG = BKN00-VTWEG
AND SPART = BKN00-SPART
AND PARVW = L_PARVW.

IF PW_KTONR CO '1234567890 '.
L_KTONR = PW_KTONR.
ENDIF.

IF L_KTONR <> L_KUNN2 AND
L_KTONR <> L_LIFNR AND
L_KTONR <> L_PERNR.

PERFORM SET_INIT_VAL USING 'BKNVP'.

BKNVP-STYPE  = '2'.         "レコードタイプ
BKNVP-TBNAM  = 'BKNVP'.     "テーブル名
BKNVP-XDELE  = 'X'.         "フラグバッチインプットで登録削除?
BKNVP-PARVW  = PW_PARVW.    "取引先機能コード

IF PW_PARVW = CNS_PARVW-SEIKYU  OR
PW_PARVW = CNS_PARVW-SIHARAI OR
PW_PARVW = CNS_PARVW-SHUKKA.

BKNVP-KTONR  = L_KUNN2.     "販売管理の取引先番号

ELSEIF PW_PARVW = CNS_PARVW-EIGYO.

BKNVP-KTONR  = L_PERNR.     "従業員番号

ELSE.

BKNVP-KTONR = L_LIFNR.     "販売管理の取引先番号

ENDIF.

TRANSFER BKNVP TO P_OUT.

ENDIF.

ENDSELECT.
ENDIF.

ENDFORM.                    " set_parvw
*&---------------------------------------------------------------------*
*&      Form  set_bknkk
*&---------------------------------------------------------------------*
*       得意先与信管理のステータスデータ設定
*----------------------------------------------------------------------*
*      -->PS_DATA  入力データ
*----------------------------------------------------------------------*
FORM SET_BKNKK USING PS_DATA TYPE T_S_DATA.

PERFORM SET_INIT_VAL USING 'BKNKK'.

BKNKK-STYPE  = '2'.            "レコードタイプ
BKNKK-TBNAM  = 'BKNKK'.        "テーブル名
BKNKK-KLIMK  = PS_DATA-KLIMK.  "与信限度額
BKNKK-CTLPC  = PS_DATA-CTLPC.  "リスクカテゴリ

TRANSFER BKNKK TO P_OUT.

ENDFORM.                    " set_bknkk
*&---------------------------------------------------------------------*
*&      Form  INFO_PROC
*&---------------------------------------------------------------------*
*       結果出力処理
*----------------------------------------------------------------------*
FORM INFO_PROC.

CLOSE DATASET P_OUT.

IF GS_LINE-OUT = 0.
MESSAGE I400 WITH 'データ作成するデータはありません'.
DELETE DATASET P_OUT.
OPEN DATASET P_OUT  FOR OUTPUT IN TEXT MODE.
CLOSE DATASET P_OUT.
ENDIF.

MESSAGE I402 WITH '読込件数=' GS_LINE-IN  '件'.
MESSAGE I402 WITH '対象件数=' GS_LINE-OUT '件'.

ENDFORM.                    " INFO_PROC
*&---------------------------------------------------------------------*
*&      Form  CHECK_LENTH
*&---------------------------------------------------------------------*
*       text  文字列の長さチェック
*----------------------------------------------------------------------*
FORM CHECK_LENTH USING PS_DATA   TYPE T_S_DATA
PW_CHARA
PW_TEXT
CHANGING PW_ERFLG.
DATA:
LW_LEN TYPE I.

CHECK PW_ERFLG IS INITIAL
AND PW_CHARA <> CNS_SYB-SLA.

* 文字列が35より大きいとき
LW_LEN = STRLEN( PW_CHARA ).
CHECK LW_LEN > 35.

MESSAGE I402 WITH  PW_TEXT
'が長すぎます.得意='
PS_DATA-KUNNR.
* ERRORフラグ
PW_ERFLG = CNS_FLG_ON.

ENDFORM.                    " CHECK_LENTH
