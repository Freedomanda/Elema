*&---------------------------------------------------------------------*
*&  Include           ZEGSDI0120_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_LOCAL_PATH
*&---------------------------------------------------------------------*
*       ローカルファイル名取得
*----------------------------------------------------------------------*
FORM GET_LOCAL_PATH .

DATA: LW_FILENAME    TYPE STRING,
LW_PATH        TYPE STRING,
LW_FULLPATH    TYPE STRING,
LW_USER_ACTION TYPE I.

CL_GUI_FRONTEND_SERVICES=>FILE_SAVE_DIALOG(
CHANGING
FILENAME             = LW_FILENAME
PATH                 = LW_PATH
FULLPATH             = LW_FULLPATH
USER_ACTION          = LW_USER_ACTION
*      FILE_ENCODING        = FILE_ENCODING
EXCEPTIONS
CNTL_ERROR           = 1
ERROR_NO_GUI         = 2
NOT_SUPPORTED_BY_GUI = 3
OTHERS               = 4 ).
IF SY-SUBRC = 0
AND LW_USER_ACTION = CL_GUI_FRONTEND_SERVICES=>ACTION_OK.
P_FNAME = LW_FULLPATH.
ENDIF.

ENDFORM.                    " GET_LOCAL_PATH
*&---------------------------------------------------------------------*
*&      Form  CHECK_INPUT
*&---------------------------------------------------------------------*
*       入力チェック
*----------------------------------------------------------------------*
FORM CHECK_INPUT .

* プラントコード存在チェック
PERFORM CHECK_WERKS.

* プラントの権限チェック
PERFORM CHECK_WERKS_AUTH.

ENDFORM.                    " CHECK_INPUT
*&---------------------------------------------------------------------*
*&      Form  CHECK_WERKS
*&---------------------------------------------------------------------*
*       プラントコード存在チェック
*----------------------------------------------------------------------*
FORM CHECK_WERKS .

TYPES: BEGIN OF LTYP_WERKS,
WERKS TYPE T001W-WERKS,
END OF LTYP_WERKS.

DATA: LTD_WERKS   TYPE STANDARD TABLE OF LTYP_WERKS,
LST_WERKS   TYPE LTYP_WERKS,
LST_WERKS_R LIKE LINE OF RD_WERKS.

SELECT WERKS
INTO TABLE LTD_WERKS
FROM T001W
WHERE WERKS IN S_WERKS.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_WERKS-LOW'.
*   プラント ( &1 ) は存在しません
MESSAGE E004(ZMEGSD01) WITH S_WERKS-LOW.
ENDIF.

REFRESH RD_WERKS.
LOOP AT LTD_WERKS INTO LST_WERKS.
LST_WERKS_R-SIGN = 'I'.
LST_WERKS_R-OPTION = 'EQ'.
LST_WERKS_R-LOW = LST_WERKS-WERKS.
APPEND LST_WERKS_R TO RD_WERKS.
ENDLOOP.

ENDFORM.                    " CHECK_WERKS
*&---------------------------------------------------------------------*
*&      Form  CHECK_WERKS_AUTH
*&---------------------------------------------------------------------*
*       プラントの権限チェック
*----------------------------------------------------------------------*
FORM CHECK_WERKS_AUTH .

DATA: LST_WERKS LIKE LINE OF RD_WERKS.

LOOP AT RD_WERKS INTO LST_WERKS.
AUTHORITY-CHECK OBJECT 'M_MSEG_WMB'
ID 'WERKS' FIELD LST_WERKS-LOW
ID 'ACTVT' FIELD '01'.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_WERKS-LOW'.
*     プラントに対する実行権限がありません
MESSAGE E003(ZMEGSD01).
ENDIF.
ENDLOOP.

ENDFORM.                    " CHECK_WERKS_AUTH
*&---------------------------------------------------------------------*
*&      Form  CHECK_OBLIGATORY
*&---------------------------------------------------------------------*
*       条件必須チェック
*----------------------------------------------------------------------*
FORM CHECK_OBLIGATORY .

* 選択画面のラジオボタン「Print」「Reprint」が選択されている場合
IF RB_PRINT = 'X'
OR RB_REPNT = 'X'.
IF P_PTRAY IS INITIAL.
SET CURSOR FIELD 'P_PTRAY'.
*     &1 が入力されていません。
MESSAGE E031(ZMEGSD01) WITH TEXT-M01.
ENDIF.
* 選択画面のラジオボタン「Download」が選択されている場合
ELSE.
IF P_FNAME IS INITIAL.
SET CURSOR FIELD 'P_FNAME'.
*     &1 が入力されていません。
MESSAGE E031(ZMEGSD01) WITH TEXT-M02.
ENDIF.
ENDIF.

ENDFORM.                    " CHECK_OBLIGATORY
*&---------------------------------------------------------------------*
*&      Form  MAIN_PROCESS
*&---------------------------------------------------------------------*
*       主処理
*----------------------------------------------------------------------*
FORM MAIN_PROCESS .

* テーブル定義
DATA:
*   請求伝票
LTD_VBRP         TYPE STANDARD TABLE OF TYP_VBRP,
LTD_ZTEGSDT017   TYPE STANDARD TABLE OF TYP_ZTEGSDT017,
*   他のデータ
LTD_KNA1         TYPE STANDARD TABLE OF TYP_KNA1,
LTD_ADRC         TYPE STANDARD TABLE OF TYP_ADRC,
**** START ADD 2015/02/25 ISID18 ****
LTD_VBPA         TYPE STANDARD TABLE OF TYP_VBPA,
LTD_VBPA_S       TYPE STANDARD TABLE OF TYP_VBPA,
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
LTD_USR21        TYPE STANDARD TABLE OF TYP_USR21,
LTD_USR21_S      TYPE STANDARD TABLE OF TYP_USR21,
**** END ADD 2015/02/26 ISID18 ****
LTD_VBKD         TYPE STANDARD TABLE OF TYP_VBKD,
**** START DEL 2015/02/15 ISID18 ****
*    LTD_T052U        TYPE STANDARD TABLE OF TYP_T052U,
**** END DEL 2015/02/15 ISID18 ****
LTD_ZTEGZZM002   TYPE STANDARD TABLE OF TYP_ZTEGZZM002,
LTD_T005X        TYPE STANDARD TABLE OF TYP_T005X,
*   他のデータ検索用
LTD_KNA1_S       TYPE STANDARD TABLE OF TYP_KNA1,
LTD_VBKD_S       TYPE STANDARD TABLE OF TYP_VBKD,
**** START DEL 2015/02/15 ISID18 ****
*    LTD_T052U_S      TYPE STANDARD TABLE OF TYP_T052U,
**** END DEL 2015/02/15 ISID18 ****
LTD_ZTEGZZM002_S TYPE STANDARD TABLE OF TYP_ZTEGZZM002,
*   編集出力用
LTD_DNCN         TYPE STANDARD TABLE OF TYP_DNCN,
LTD_FILE         TYPE STANDARD TABLE OF ZSEGSD0017,
**** START ADD 2015/02/15 ISID18 ****
LTD_ZTEGSDM011   TYPE TYP_TD_ZTEGSDM011,
LTD_ZTEGSDM011_S TYPE TYP_TD_ZTEGSDM011,
**** END ADD 2015/02/15 ISID18 ****
*   ファイル用
LW_FNAME(128)    TYPE C,
LW_OUTPUT_CP     TYPE ZTEGZZT001-Z_OUTPUT_CP,
*   出力結果用
LTD_MESSAGE      TYPE STANDARD TABLE OF TYP_MESSAGE,
LW_COUNT         TYPE I,
LW_NORMAL        TYPE I,
LW_ERROR         TYPE I.

* 請求/受注データ取得
PERFORM GET_BILLING_DATA CHANGING LTD_VBRP
LTD_ZTEGSDT017
LTD_KNA1_S
LTD_VBKD_S
**** START ADD 2015/02/25 ISID18 ****
LTD_VBPA_S
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
LTD_USR21_S
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*                                    LTD_T052U_S
LTD_ZTEGSDM011_S
**** END UPD 2015/02/15 ISID18 ****
LTD_ZTEGZZM002_S.
* 他のデータ取得
PERFORM GET_OTHER_DATA USING LTD_KNA1_S
LTD_VBKD_S
**** START ADD 2015/02/25 ISID18 ****
LTD_VBPA_S
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
LTD_USR21_S
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*                               LTD_T052U_S
LTD_ZTEGSDM011_S
**** END UPD 2015/02/15 ISID18 ****
LTD_ZTEGZZM002_S
CHANGING LTD_KNA1
LTD_ADRC
LTD_VBKD
**** START ADD 2015/02/25 ISID18 ****
LTD_VBPA
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
LTD_USR21
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*                               LTD_T052U
LTD_ZTEGSDM011
**** END UPD 2015/02/15 ISID18 ****
LTD_ZTEGZZM002
LTD_T005X.
* データの編集
PERFORM EDIT_DATA USING LTD_VBRP
LTD_ZTEGSDT017
LTD_KNA1
LTD_ADRC
LTD_VBKD
**** START ADD 2015/02/25 ISID18 ****
LTD_VBPA
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
LTD_USR21
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*                          LTD_T052U
LTD_ZTEGSDM011
**** END UPD 2015/02/15 ISID18 ****
LTD_ZTEGZZM002
LTD_T005X
CHANGING LTD_DNCN
LTD_FILE.
* テーブル更新
PERFORM UPDATE_TABLE USING LTD_DNCN
LTD_ZTEGSDT017
CHANGING LW_FNAME
LW_OUTPUT_CP
LTD_MESSAGE
LW_COUNT
LW_NORMAL
LW_ERROR.
* ファイル出力
PERFORM OUTPUT_FILE USING LTD_FILE
LW_FNAME
LW_OUTPUT_CP.

* 結果画面出力
PERFORM OUTPUT_RESULT USING LTD_MESSAGE
LW_FNAME
LW_COUNT
LW_NORMAL
LW_ERROR.

ENDFORM.                    " MAIN_PROCESS
*&---------------------------------------------------------------------*
*&      Form  GET_BILLING_DATA
*&---------------------------------------------------------------------*
*       請求/受注データ取得
*----------------------------------------------------------------------*
*      <--O_TD_VBRP
*      <--O_TD_VBRP
*      <--O_TD_KNA1_S
*      <--O_TD_VBKD_S
*      <--O_TD_T052U_S
*      <--O_TD_ZTEGZZM002_S
*----------------------------------------------------------------------*
FORM GET_BILLING_DATA CHANGING O_TD_VBRP         TYPE TYP_TD_VBRP
O_TD_ZTEGSDT017   TYPE TYP_TD_ZTEGSDT017
O_TD_KNA1_S       TYPE TYP_TD_KNA1
O_TD_VBKD_S       TYPE TYP_TD_VBKD
**** START ADD 2015/02/25 ISID18 ****
O_TD_VBPA_S       TYPE TYP_TD_VBPA
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
O_TD_USR21_S      TYPE TYP_TD_USR21
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*                               O_TD_T052U_S      TYPE TYP_TD_T052U
O_TD_ZTEGSDM011_S TYPE TYP_TD_ZTEGSDM011
**** END UPD 2015/02/15 ISID18 ****
O_TD_ZTEGZZM002_S TYPE TYP_TD_ZTEGZZM002.

DATA: LST_VBRP       TYPE TYP_VBRP,
LST_KNA1       TYPE TYP_KNA1,
LST_VBKD       TYPE TYP_VBKD,
**** START ADD 2015/02/25 ISID18 ****
LST_VBPA       TYPE TYP_VBPA,
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
LST_USR21      TYPE TYP_USR21,
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*        LST_T052U      TYPE TYP_T052U,
LST_ZTEGSDM011 TYPE TYP_ZTEGSDM011,
**** END UPD 2015/02/15 ISID18 ****
**** START OF ADD 2015/02/15 ISID18 ****
LST_ZTEGSDT017 TYPE TYP_ZTEGSDT017,
**** END OF ADD 2015/02/15 ISID18 ****
LST_ZTEGZZM002 TYPE TYP_ZTEGZZM002,
LTD_KEY1       TYPE TYP_TD_VBRP.

* 請求/受注データ取得
SELECT VBRK~VBELN  "請求伝票
VBRP~POSNR  "明細
VBRK~FKDAT  "請求日
VBRK~KUNRG  "請求先
VBRP~MATNR  "品目
VBRP~ARKTX  "テキスト
VBRP~FKIMG  "請求数量
VBRP~VRKME  "販売単位
VBAP~NETPR  "正味価格
VBAP~KPEIN  "価格条件単位
VBRK~WAERK  "伝票通貨
**** START UPD 2015/06/02 ISID18 ****
*         VBRK~NETWR  "正味額
VBRP~NETWR  "正味額
**** END UPD 2015/06/02 ISID18 ****
VBRP~AUBEL  "販売伝票
VBRP~AUPOS  "販売伝票明細
VBAP~KDMAT  "得意先品目
VBRP~WERKS  "プラント
VBRP~VKBUR  "営業所
VBRK~KUNAG  "受注先
VBRK~FKART  "請求タイプ
VBRK~FKTYP  "請求カテゴリ
VBRK~VBTYP  "伝票カテゴリ
VBRK~RFBSK  "転記ステータス
VBRP~VKGRP  "営業グループ
VBRP~VKORG_AUFT AS VKORG "販売組織
VBRP~VTWEG_AUFT AS VTWEG "流通チャネル
VBRK~ERDAT  "登録日
VBRK~ERNAM  "登録者
VBRP~VGBEL  "参照伝票
VBRP~VGPOS  "参照明細
VBRP~VGTYP  "先行伝票 Cat.
VBAK~AUART  "販売伝票タイプ
VBRK~ZTERM  "支払条件
VBRK~BUKRS  "会社コード
INTO TABLE O_TD_VBRP
FROM VBRK
INNER JOIN VBRP
ON VBRK~VBELN = VBRP~VBELN
INNER JOIN VBAP
ON VBRP~AUBEL = VBAP~VBELN
AND VBRP~AUPOS = VBAP~POSNR
INNER JOIN VBAK
ON VBAP~VBELN = VBAK~VBELN
WHERE VBRP~VKBUR IN S_VKBUR  "営業所
AND VBRK~FKDAT IN S_FKDAT  "請求日
AND VBRK~KUNRG IN S_KUNRG  "支払人
AND VBRK~KUNAG IN S_KUNAG  "受注先
AND VBRK~VBELN IN S_VBELN  "請求伝票
*     AND VBRP~AUBEL IN S_AUBEL  "販売伝票
AND VBAP~VBELN IN S_AUBEL  "販売伝票
AND VBRK~FKART IN S_FKART  "請求タイプ
AND VBRK~FKTYP IN S_FKTYP  "請求カテゴリ
AND VBRK~VBTYP IN S_VBTYP  "伝票カテゴリ
AND VBRK~RFBSK IN S_RFBSK  "転記ステータス
AND VBRP~VKGRP IN S_VKGRP  "営業グループ
**** START ADD 2015/02/25 ISID18 ****
AND VBAK~AUART IN S_AUART  "販売伝票タイプ
**** END ADD 2015/02/25 ISID18 ****
AND VBRK~VKORG IN S_VKORG  "販売組織
AND VBRK~VTWEG IN S_VTWEG  "流通チャネル
AND VBRP~MATNR IN S_MATNR  "品目コード
AND VBRK~ERDAT IN S_ERDAT  "登録日
AND VBRK~ERNAM IN S_ERNAM.  "登録者
IF SY-SUBRC <> 0.
*   対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'VBRK'.
LEAVE LIST-PROCESSING.
ENDIF.
SORT O_TD_VBRP BY VBELN ASCENDING
POSNR ASCENDING.

* 検索キー作成
LOOP AT O_TD_VBRP INTO LST_VBRP.
CLEAR LST_KNA1.
LST_KNA1-KUNNR = LST_VBRP-KUNRG.
APPEND LST_KNA1 TO O_TD_KNA1_S.

CLEAR LST_VBKD.
LST_VBKD-VBELN = LST_VBRP-AUBEL.
APPEND LST_VBKD TO O_TD_VBKD_S.

**** START ADD 2015/02/25 ISID18 ****
CLEAR LST_VBPA.
LST_VBPA-VBELN = LST_VBRP-AUBEL.
LST_VBPA-POSNR = LST_VBRP-AUPOS.
APPEND LST_VBPA TO O_TD_VBPA_S.
**** END ADD 2015/02/25 ISID18 ****

**** START ADD 2015/02/26 ISID18 ****
CLEAR LST_USR21.
LST_USR21-BNAME = LST_VBRP-ERNAM.
APPEND LST_USR21 TO O_TD_USR21_S.
**** END ADD 2015/02/26 ISID18 ****

**** START UPD 2015/02/15 ISID18 ****
*    CLEAR LST_T052U.
*    LST_T052U-ZTERM = LST_VBRP-ZTERM.
*    APPEND LST_T052U TO O_TD_T052U_S.
CLEAR LST_ZTEGSDM011.
LST_ZTEGSDM011-ZTERM = LST_VBRP-ZTERM.
APPEND LST_ZTEGSDM011 TO O_TD_ZTEGSDM011_S.
**** END UPD 2015/02/15 ISID18 ****

CLEAR LST_ZTEGZZM002.
LST_ZTEGZZM002-WAERS = LST_VBRP-WAERK.
APPEND LST_ZTEGZZM002 TO O_TD_ZTEGZZM002_S.
ENDLOOP.
SORT O_TD_KNA1_S BY KUNNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KNA1_S
COMPARING ALL FIELDS.
SORT O_TD_VBKD_S BY VBELN ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_VBKD_S
COMPARING ALL FIELDS.
**** START ADD 2015/02/25 ISID18 ****
SORT O_TD_VBPA_S BY VBELN ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_VBPA_S
COMPARING ALL FIELDS.
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
SORT O_TD_USR21_S BY BNAME ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_USR21_S
COMPARING ALL FIELDS.
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*  SORT O_TD_T052U_S BY ZTERM ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM O_TD_T052U_S
SORT O_TD_ZTEGSDM011_S BY ZTERM ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_ZTEGSDM011_S
**** END UPD 2015/02/15 ISID18 ****
COMPARING ALL FIELDS.
SORT O_TD_ZTEGZZM002_S BY WAERS ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_ZTEGZZM002_S
COMPARING ALL FIELDS.
LTD_KEY1[] = O_TD_VBRP[].
SORT LTD_KEY1 BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_KEY1
COMPARING VBELN
ERDAT.

* Output Management(Debit Note/Credit Note)取得
SELECT Z_OUTPUT_MODE  "出力モード
VBELN  "請求伝票
ERDAT  "レコード登録日
INTO TABLE O_TD_ZTEGSDT017
FROM ZTEGSDT017
FOR ALL ENTRIES IN LTD_KEY1
WHERE ( Z_OUTPUT_MODE = 'P'  "出力モード
OR Z_OUTPUT_MODE = 'D' ) "出力モード
AND VBELN           = LTD_KEY1-VBELN  "請求伝票
AND ERDAT           = LTD_KEY1-ERDAT. "レコード登録日
IF SY-SUBRC <> 0.
*   選択画面のラジオボタン「Reprint」が選択されている場合
IF RB_REPNT = 'X'.
*     対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'ZTEGSDT017'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDIF.
**** START ADD 2015/02/15 ISID18 ****
IF RB_PRINT = 'X'.
LOOP AT O_TD_ZTEGSDT017 INTO LST_ZTEGSDT017
WHERE Z_OUTPUT_MODE = 'P'.
DELETE O_TD_VBRP
WHERE VBELN = LST_ZTEGSDT017-VBELN.
ENDLOOP.
IF O_TD_VBRP[] IS INITIAL.
*     対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'VBRK'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDIF.
**** END ADD 2015/02/15 ISID18 ****
**** START ADD 2015/03/02 ISID18 ****
IF RB_REPNT = 'X'.
**** START UPD 2015/06/29 ISID18 ****
*    LOOP AT O_TD_ZTEGSDT017 INTO LST_ZTEGSDT017
*      WHERE Z_OUTPUT_MODE = 'P'.
*      DELETE O_TD_VBRP
*        WHERE VBELN <> LST_ZTEGSDT017-VBELN.
*    ENDLOOP.
LOOP AT O_TD_VBRP INTO LST_VBRP.
CLEAR LST_ZTEGSDT017.
LOOP AT O_TD_ZTEGSDT017 INTO LST_ZTEGSDT017
WHERE VBELN = LST_VBRP-VBELN.
EXIT.
ENDLOOP.
IF SY-SUBRC <> 0.
DELETE O_TD_VBRP
WHERE VBELN = LST_VBRP-VBELN.
ENDIF.
ENDLOOP.
**** END UPD 2015/06/29 ISID18 ****
IF SY-SUBRC <> 0 OR
O_TD_VBRP[] IS INITIAL.
*     対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'VBRK'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDIF.
**** END ADD 2015/03/02 ISID18 ****
SORT O_TD_ZTEGSDT017 BY Z_OUTPUT_MODE ASCENDING
VBELN         ASCENDING
ERDAT         ASCENDING.

ENDFORM.                    " GET_BILLING_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_OTHER_DATA
*&---------------------------------------------------------------------*
*       他のデータ取得
*----------------------------------------------------------------------*
*      -->I_TD_KNA1_S
*      -->I_TD_VBKD_S
*      -->I_TD_T052U_S
*      -->I_TD_ZTEGZZM002_S
*      <--O_TD_KNA1
*      <--O_TD_ADRC
*      <--O_TD_VBKD
*      <--O_TD_T052U
*      <--O_TD_ZTEGZZM002
*      <--O_TD_T005X
*----------------------------------------------------------------------*
FORM GET_OTHER_DATA  USING I_TD_KNA1_S       TYPE TYP_TD_KNA1
I_TD_VBKD_S       TYPE TYP_TD_VBKD
**** START ADD 2015/02/25 ISID18 ****
I_TD_VBPA_S       TYPE TYP_TD_VBPA
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
I_TD_USR21_S      TYPE TYP_TD_USR21
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*                           I_TD_T052U_S      TYPE TYP_TD_T052U
I_TD_ZTEGSDM011_S TYPE TYP_TD_ZTEGSDM011
**** END UPD 2015/02/15 ISID18 ****
I_TD_ZTEGZZM002_S TYPE TYP_TD_ZTEGZZM002
CHANGING O_TD_KNA1         TYPE TYP_TD_KNA1
O_TD_ADRC         TYPE TYP_TD_ADRC
O_TD_VBKD         TYPE TYP_TD_VBKD
**** START ADD 2015/02/25 ISID18 ****
O_TD_VBPA         TYPE TYP_TD_VBPA
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
O_TD_USR21        TYPE TYP_TD_USR21
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*                           O_TD_T052U        TYPE TYP_TD_T052U
O_TD_ZTEGSDM011   TYPE TYP_TD_ZTEGSDM011
**** END UPD 2015/02/15 ISID18 ****
O_TD_ZTEGZZM002   TYPE TYP_TD_ZTEGZZM002
O_TD_T005X        TYPE TYP_TD_T005X.

* 得意先情報取得
PERFORM GET_ADRC USING I_TD_KNA1_S
CHANGING O_TD_KNA1
O_TD_ADRC.
* 受注関連情報取得
PERFORM GET_VBKD USING I_TD_VBKD_S
CHANGING O_TD_VBKD.
**** START ADD 2015/02/25 ISID18 ****
PERFORM GET_VBPA USING I_TD_VBPA_S
CHANGING O_TD_VBPA.
**** END ADD 2015/02/25 ISID18 ****
* 支払条件テキスト取得
**** START UPD 2015/02/15 ISID18 ****
*  PERFORM GET_T052U USING I_TD_T052U_S
*                 CHANGING O_TD_T052U.
PERFORM GET_T052U USING I_TD_ZTEGSDM011_S
CHANGING O_TD_ZTEGSDM011.
**** END UPD 2015/02/15 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
* データ入力ユーザ取得
PERFORM GET_USR21 USING I_TD_USR21_S
CHANGING O_TD_USR21.
**** END ADD 2015/02/26 ISID18 ****
* 通貨コード変換取得
PERFORM GET_ZTEGZZM002 USING I_TD_ZTEGZZM002_S
CHANGING O_TD_ZTEGZZM002.
* 小数点書式、日付書式の変換用項目取得
PERFORM GET_FORMAT USING O_TD_KNA1
CHANGING O_TD_T005X.

ENDFORM.                    " GET_OTHER_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_ADRC
*&---------------------------------------------------------------------*
*       得意先情報取得
*----------------------------------------------------------------------*
*      -->I_TD_KNA1_S
*      <--O_TD_KNA1
*      <--O_TD_ADRC
*----------------------------------------------------------------------*
FORM GET_ADRC  USING I_TD_KNA1_S TYPE TYP_TD_KNA1
CHANGING O_TD_KNA1   TYPE TYP_TD_KNA1
O_TD_ADRC   TYPE TYP_TD_ADRC.

**** START ADD 2014/12/29 ISID11 ****
DATA:
LST_KEY   TYPE TYP_KNA1,
LTD_KEY   TYPE STANDARD TABLE OF TYP_KNA1,
LRD_ADRC  TYPE BUADDRNRRNG,
LST_ADRC  TYPE BUS_ADDRNUMBER_RANGE,
LTD_ADRC  TYPE ZTEGZZ002,
LST_ZSEGZZ0002  TYPE ZSEGZZ0002,
LST_OUT   TYPE TYP_ADRC.
**** END ADD 2014/12/29 ISID11 ****

IF I_TD_KNA1_S[] IS INITIAL.
RETURN.
ENDIF.

**** START DEL 2014/12/29 ISID11 ****
*  DATA LTD_KEY TYPE STANDARD TABLE OF TYP_KNA1.
**** END DEL 2014/12/29 ISID11 ****

* アドレス情報の取得
SELECT KUNNR  "得意先コード
ADRNR  "アドレス
LAND1  "国コード
INTO TABLE O_TD_KNA1
FROM KNA1
FOR ALL ENTRIES IN I_TD_KNA1_S
WHERE KUNNR = I_TD_KNA1_S-KUNNR.  "得意先コード
IF SY-SUBRC <> 0.
RETURN.
ENDIF.
SORT O_TD_KNA1 BY KUNNR ASCENDING.
LTD_KEY[] = O_TD_KNA1[].
SORT LTD_KEY BY ADRNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_KEY
COMPARING ADRNR.

**** START UPD 2014/12/25 ISID11 ****
* 請求先住所情報の取得
*  SELECT ADDRNUMBER  "アドレス
*         NAME1  "名称１
*         STREET  "地名
*         CITY1  "市区町村
***** START ADD 2014/12/25 ISID11 ****
*         STR_SUPPL1 "地名 2
*         STR_SUPPL2 "地名 3
***** END ADD 2014/12/25 ISID11 ****
*         TEL_NUMBER  "電話番号
*         FAX_NUMBER  "番号
*    INTO TABLE O_TD_ADRC
*    FROM ADRC
*     FOR ALL ENTRIES IN LTD_KEY
*   WHERE ADDRNUMBER = LTD_KEY-ADRNR.  "アドレス

LST_ADRC-SIGN   = 'I'.
LST_ADRC-OPTION = 'EQ'.

LOOP AT LTD_KEY INTO LST_KEY.

LST_ADRC-LOW = LST_KEY-ADRNR.
APPEND LST_ADRC TO LRD_ADRC.

ENDLOOP.

CALL FUNCTION 'ZEG_ZZ_ADRC_GET'
EXPORTING
IMPMULTITFLG     = '2'
IMPRNGADDRNUMBER = LRD_ADRC
IMPORTING
EXPTABADRC       = LTD_ADRC.

LOOP AT LTD_ADRC INTO LST_ZSEGZZ0002.
CLEAR:
LST_OUT.

LST_OUT-ADDRNUMBER = LST_ZSEGZZ0002-ADDRNUMBER.     "アドレス
LST_OUT-NAME1      = LST_ZSEGZZ0002-Z_NAME.         "名称１
LST_OUT-STREET     = LST_ZSEGZZ0002-Z_ADDRESS1.     "地名
LST_OUT-CITY1      = LST_ZSEGZZ0002-Z_ADDRESS2.     "市区町村
LST_OUT-STR_SUPPL1 = LST_ZSEGZZ0002-Z_ADDRESS3.     "地名 2
LST_OUT-STR_SUPPL2 = LST_ZSEGZZ0002-Z_ADDRESS4.     "地名 3
LST_OUT-TEL_NUMBER = LST_ZSEGZZ0002-TEL_NUMBER.     "電話番号
LST_OUT-FAX_NUMBER = LST_ZSEGZZ0002-FAX_NUMBER.     "番号
APPEND LST_OUT TO O_TD_ADRC.

ENDLOOP.
**** END UPD 2014/12/29 ISID11 ****

SORT O_TD_ADRC BY ADDRNUMBER ASCENDING.

ENDFORM.                    " GET_ADRC
*&---------------------------------------------------------------------*
*&      Form  GET_VBKD
*&---------------------------------------------------------------------*
*       受注関連情報取得
*----------------------------------------------------------------------*
*      -->I_TD_VBKD_S
*      <--O_TD_VBKD
*----------------------------------------------------------------------*
FORM GET_VBKD  USING I_TD_VBKD_S TYPE TYP_TD_VBKD
CHANGING O_TD_VBKD   TYPE TYP_TD_VBKD.

IF I_TD_VBKD_S[] IS INITIAL.
RETURN.
ENDIF.

SELECT VBELN  "販売伝票
BSTKD  "得意先発注番号
INTO TABLE O_TD_VBKD
FROM VBKD
FOR ALL ENTRIES IN I_TD_VBKD_S
WHERE VBELN = I_TD_VBKD_S-VBELN  "販売伝票
AND POSNR = SPACE.  "販売伝票明細
SORT O_TD_VBKD BY VBELN ASCENDING.

ENDFORM.                    " GET_VBKD
*&---------------------------------------------------------------------*
*&      Form  GET_T052U
*&---------------------------------------------------------------------*
*       支払条件テキスト取得
*----------------------------------------------------------------------*
*      -->I_TD_T052U_S
*      <--O_TD_T052U
*----------------------------------------------------------------------*
**** START UPD 2015/02/15 ISID18 ****
*FORM GET_T052U  USING I_TD_T052U_S TYPE TYP_TD_T052U
*             CHANGING O_TD_T052U   TYPE TYP_TD_T052U.
*
*  IF I_TD_T052U_S[] IS INITIAL.
*    RETURN.
*  ENDIF.
*
*  SELECT ZTERM  "支払条件キー
*         TEXT1  "支払条件の固有テキスト
*    INTO TABLE O_TD_T052U
*    FROM T052U
*     FOR ALL ENTRIES IN I_TD_T052U_S
*   WHERE SPRAS = SY-LANGU  "言語キー
*     AND ZTERM = I_TD_T052U_S-ZTERM. "支払条件キー
*  SORT O_TD_T052U BY ZTERM ASCENDING.

FORM GET_T052U
USING I_TD_ZTEGSDM011_S  TYPE TYP_TD_ZTEGSDM011
CHANGING O_TD_ZTEGSDM011 TYPE TYP_TD_ZTEGSDM011.

DATA LW_LANGU TYPE SY-LANGU.
IF I_TD_ZTEGSDM011_S[] IS INITIAL.
RETURN.
ENDIF.
IF P_LANGU IS NOT INITIAL.
LW_LANGU = P_LANGU.
ELSE.
LW_LANGU = SY-LANGU.
ENDIF.

SELECT ZTERM
Z_PAYMENT_TEXT
INTO TABLE O_TD_ZTEGSDM011
FROM ZTEGSDM011
FOR ALL ENTRIES IN I_TD_ZTEGSDM011_S
WHERE SPRAS = LW_LANGU
AND ZTERM = I_TD_ZTEGSDM011_S-ZTERM.
SORT O_TD_ZTEGSDM011 BY ZTERM ASCENDING.
**** END UPD 2015/02/15 ISID18 ****
ENDFORM.                    " GET_T052U
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGZZM002
*&---------------------------------------------------------------------*
*       通貨コード変換
*----------------------------------------------------------------------*
*      -->I_TD_ZTEGZZM002_S
*      <--O_TD_ZTEGZZM002
*----------------------------------------------------------------------*
FORM GET_ZTEGZZM002  USING I_TD_ZTEGZZM002_S TYPE TYP_TD_ZTEGZZM002
CHANGING O_TD_ZTEGZZM002   TYPE TYP_TD_ZTEGZZM002.

IF I_TD_ZTEGZZM002_S IS INITIAL.
RETURN.
ENDIF.

SELECT WAERS  "通貨コード
Z_WAERS  "変換後通貨コード
INTO TABLE O_TD_ZTEGZZM002
FROM ZTEGZZM002
FOR ALL ENTRIES IN I_TD_ZTEGZZM002_S
WHERE WAERS = I_TD_ZTEGZZM002_S-WAERS.  "通貨コード
SORT O_TD_ZTEGZZM002 BY WAERS ASCENDING.

ENDFORM.                    " GET_ZTEGZZM002
*&---------------------------------------------------------------------*
*&      Form  GET_FORMAT
*&---------------------------------------------------------------------*
*       小数点書式、日付書式の変換用項目取得
*----------------------------------------------------------------------*
*      -->I_TD_KNA1
*      <--O_TD_T005X
*----------------------------------------------------------------------*
FORM GET_FORMAT  USING I_TD_KNA1  TYPE TYP_TD_KNA1
CHANGING O_TD_T005X TYPE TYP_TD_T005X.

IF I_TD_KNA1[] IS INITIAL.
RETURN.
ENDIF.

DATA LTD_KEY TYPE STANDARD TABLE OF TYP_KNA1.

LTD_KEY[] = I_TD_KNA1[].
SORT LTD_KEY BY LAND1 ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_KEY
COMPARING LAND1.

SELECT LAND  "国コード
XDEZP  "小数点書式
DATFM  "日付書式
INTO TABLE O_TD_T005X
FROM T005X
FOR ALL ENTRIES IN LTD_KEY
WHERE LAND = LTD_KEY-LAND1.  "国コード
SORT O_TD_T005X BY LAND ASCENDING.

ENDFORM.                    " GET_FORMAT
*&---------------------------------------------------------------------*
*&      Form  EDIT_DATA
*&---------------------------------------------------------------------*
*       データの編集
*----------------------------------------------------------------------*
*      -->I_TD_VBRP
*      -->I_TD_ZTEGSDT017
*      -->I_TD_KNA1
*      -->I_TD_ADRC
*      -->I_TD_VBKD
*      -->I_TD_T052U
*      -->I_TD_ZTEGZZM002
*      -->I_TD_T005X
*      <--O_TD_DNCN
*      <--O_TD_FILE
*----------------------------------------------------------------------*
FORM EDIT_DATA  USING I_TD_VBRP       TYPE TYP_TD_VBRP
I_TD_ZTEGSDT017 TYPE TYP_TD_ZTEGSDT017
I_TD_KNA1       TYPE TYP_TD_KNA1
I_TD_ADRC       TYPE TYP_TD_ADRC
I_TD_VBKD       TYPE TYP_TD_VBKD
**** START ADD 2015/02/25 ISID18 ****
I_TD_VBPA       TYPE TYP_TD_VBPA
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
I_TD_USR21      TYPE TYP_TD_USR21
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*                      I_TD_T052U      TYPE TYP_TD_T052U
I_TD_ZTEGSDM011 TYPE TYP_TD_ZTEGSDM011
**** END UPD 2015/02/15 ISID18 ****
I_TD_ZTEGZZM002 TYPE TYP_TD_ZTEGZZM002
I_TD_T005X      TYPE TYP_TD_T005X
CHANGING O_TD_DNCN       TYPE TYP_TD_DNCN
O_TD_FILE       TYPE TYP_TD_FILE.

DATA: LST_VBRP       TYPE TYP_VBRP,
LST_KNA1       TYPE TYP_KNA1,
LST_ADRC       TYPE TYP_ADRC,
LST_VBKD       TYPE TYP_VBKD,
**** START ADD 2015/02/25 ISID18 ****
LST_VBPA       TYPE TYP_VBPA,
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
LST_USR21      TYPE TYP_USR21,
**** END ADD 2015/02/26 ISID18 ****
**** START UPD 2015/02/15 ISID18 ****
*        LST_T052U      TYPE TYP_T052U,
LST_ZTEGSDM011 TYPE TYP_ZTEGSDM011,
**** END UPD 2015/02/15 ISID18 ****
LST_ZTEGZZM002 TYPE TYP_ZTEGZZM002,
LST_T005X      TYPE TYP_T005X,
LST_DNCN       TYPE TYP_DNCN,
LST_FILE       TYPE ZSEGSD0017,
LW_NEW         TYPE CHAR1,
LW_NO_DATA     TYPE CHAR1,
LW_NAME        TYPE THEAD-TDNAME,
LW_QUAN        TYPE CHAR30,
**** START DEL 2015/02/15 ISID18 ****
*        LW_PRICE       TYPE CHAR30,
**** END DEL 2015/02/15 ISID18 ****
LW_AMOUNT      TYPE CHAR30,
**** START DEL 2015/02/15 ISID18 ****
*        LW_DATE        TYPE CHAR30,
**** END DEL 2015/02/15 ISID18 ****
**** START ADD 2015/02/15 ISID18 ****
LW_MSG(128)    TYPE C,
**** END ADD 2015/02/15 ISID18 ****
**** START ADD 2015/06/29 ISID18 ****
LW_LANGU       TYPE KNA1-SPRAS,
**** END ADD 2015/06/29 ISID18 ****
LTD_LINES      TYPE STANDARD TABLE OF TLINE,
LST_LINES      TYPE TLINE.

LOOP AT I_TD_VBRP INTO LST_VBRP.
AT NEW VBELN.
LW_NEW = 'X'.
CLEAR LW_NO_DATA.
ENDAT.

*   Reprint判断
IF  LW_NEW = 'X'
AND RB_REPNT = 'X'.
READ TABLE I_TD_ZTEGSDT017 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = 'P'
VBELN         = LST_VBRP-VBELN
ERDAT         = LST_VBRP-ERDAT.
IF SY-SUBRC <> 0.
LW_NO_DATA = 'X'.
ENDIF.
ENDIF.
IF LW_NO_DATA = 'X'.
CLEAR LW_NEW.
CONTINUE.
ENDIF.

*   他のデータの読み込み
IF LW_NEW = 'X'.
CLEAR LW_NEW.
CLEAR LST_KNA1.
CLEAR LST_ADRC.
CLEAR LST_T005X.
READ TABLE I_TD_KNA1 INTO LST_KNA1 BINARY SEARCH
WITH KEY KUNNR = LST_VBRP-KUNRG.
IF SY-SUBRC = 0.
READ TABLE I_TD_ADRC INTO LST_ADRC BINARY SEARCH
WITH KEY ADDRNUMBER = LST_KNA1-ADRNR.
READ TABLE I_TD_T005X INTO LST_T005X BINARY SEARCH
WITH KEY LAND = LST_KNA1-LAND1.
ENDIF.
CLEAR LST_VBKD.
READ TABLE I_TD_VBKD INTO LST_VBKD BINARY SEARCH
WITH KEY VBELN = LST_VBRP-AUBEL.
**** START UPD 2015/02/15 ISID18 ****
*      CLEAR LST_T052U.
*      READ TABLE I_TD_T052U INTO LST_T052U BINARY SEARCH
CLEAR LST_ZTEGSDM011.
READ TABLE I_TD_ZTEGSDM011 INTO LST_ZTEGSDM011 BINARY SEARCH
**** END UPD 2015/02/15 ISID18 ****
WITH KEY ZTERM = LST_VBRP-ZTERM.
CLEAR LST_ZTEGZZM002.
READ TABLE I_TD_ZTEGZZM002 INTO LST_ZTEGZZM002 BINARY SEARCH
WITH KEY WAERS = LST_VBRP-WAERK.
**** START ADD 2015/02/15 ISID18 ****
IF SY-SUBRC <> 0.
LST_ZTEGZZM002-Z_WAERS = LST_VBRP-WAERK.
ENDIF.
**** END ADD 2015/02/15 ISID18 ****
ENDIF.

CLEAR: LST_DNCN,
LST_FILE,
LW_AMOUNT,
LW_QUAN.
**** START DEL 2015/02/15 ISDI18 ****
*           LW_PRICE,
*           LW_DATE.
**** END DEL 2015/02/15 ISDI18 ****

*   BillingDocumentNo
LST_DNCN-VBELN = LST_VBRP-VBELN.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = LST_DNCN-VBELN
IMPORTING
OUTPUT = LST_FILE-VBELN.

*   BillingDocumentItem
LST_DNCN-POSNR = LST_VBRP-POSNR.
LST_FILE-POSNR = LST_DNCN-POSNR.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = LST_FILE-POSNR
IMPORTING
OUTPUT = LST_FILE-POSNR.

*   BillingDate
LST_DNCN-FKDAT = LST_VBRP-FKDAT.
**** START UPD 2015/02/15 ISID18 ****
*    WRITE LST_DNCN-FKDAT TO LW_DATE.
*    LST_FILE-FKDAT = LW_DATE.
LST_FILE-FKDAT = LST_VBRP-FKDAT.
**** END UPD 2015/02/15 ISID18 ****

*   ItemCode
LST_DNCN-MATNR = LST_VBRP-MATNR.
CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
EXPORTING
INPUT  = LST_DNCN-MATNR
IMPORTING
OUTPUT = LST_FILE-MATNR.

*   ItemText
**** START UPD 2015/02/15 ISID18 ****
*    LST_DNCN-ARKTX = LST_VBRP-ARKTX.
*    LST_FILE-ARKTX = LST_DNCN-ARKTX.
PERFORM GET_ITEM_TEXT
USING    LST_VBRP
CHANGING LST_DNCN-Z_MAKTX.
LST_FILE-Z_MAKTX = LST_DNCN-Z_MAKTX.
**** END UPD 2015/02/15 ISID18 ****

*   Unit
LST_DNCN-VRKME = LST_VBRP-VRKME.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT          = LST_DNCN-VRKME
LANGUAGE       = SY-LANGU
IMPORTING
OUTPUT         = LST_FILE-VRKME
EXCEPTIONS
UNIT_NOT_FOUND = 1
OTHERS         = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*   Quantity
LST_DNCN-FKIMG = LST_VBRP-FKIMG.
WRITE LST_DNCN-FKIMG TO LW_QUAN UNIT LST_DNCN-VRKME.
LST_FILE-FKIMG = LW_QUAN.

*   CurrencyUnitPrice
LST_DNCN-WAERK = LST_VBRP-WAERK.

*   UnitPrice
IF LST_VBRP-KPEIN IS NOT INITIAL.
LST_DNCN-NETPR = LST_VBRP-NETPR
/ LST_VBRP-KPEIN.
**** START ADD 2015/02/15 ISID18 ****
ELSE.
LST_DNCN-NETPR = LST_VBRP-NETPR.
**** END ADD 2015/02/15 ISID18 ****
ENDIF.
**** START UPD 2015/02/15 ISID18 ****
*    WRITE LST_DNCN-NETPR TO LW_PRICE CURRENCY LST_DNCN-WAERK.
*    LST_FILE-NETPR = LW_PRICE.
*   小数点6桁対応
PERFORM FRM_SET_DEC6
USING    LST_VBRP
CHANGING LST_FILE-NETPR.
**** END UPD 2015/02/15 ISID18 ****

*   OutputCurrencyPrice
LST_DNCN-WAERK_O = LST_ZTEGZZM002-Z_WAERS.
LST_FILE-WAERK_O = LST_DNCN-WAERK_O.

*   CurrencyAmount
LST_DNCN-WAERS = LST_VBRP-WAERK.

*   Amount
LST_DNCN-NETWR = LST_VBRP-NETWR.
WRITE LST_DNCN-NETWR TO LW_AMOUNT CURRENCY LST_DNCN-WAERS.
LST_FILE-NETWR = LW_AMOUNT.

*   OutputCurrencyAmount
LST_DNCN-WAERS_O = LST_ZTEGZZM002-Z_WAERS.
LST_FILE-WAERS_O = LST_DNCN-WAERS_O.

*   SONo
LST_DNCN-AUBEL = LST_VBRP-AUBEL.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = LST_DNCN-AUBEL
IMPORTING
OUTPUT = LST_FILE-AUBEL.

*   SOItem
LST_DNCN-AUPOS = LST_VBRP-AUPOS.
LST_FILE-AUPOS = LST_DNCN-AUPOS.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = LST_FILE-AUPOS
IMPORTING
OUTPUT = LST_FILE-AUPOS.

*   CustomerItemCode
LST_DNCN-KDMAT = LST_VBRP-KDMAT.
LST_FILE-KDMAT = LST_DNCN-KDMAT.

*   Plant
LST_DNCN-WERKS = LST_VBRP-WERKS.
LST_FILE-WERKS = LST_DNCN-WERKS.

*   SalesOffice
LST_DNCN-VKBUR = LST_VBRP-VKBUR.
LST_FILE-VKBUR = LST_DNCN-VKBUR.

*   CustCodeSoldTo
LST_DNCN-KUNAG = LST_VBRP-KUNAG.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = LST_DNCN-KUNAG
IMPORTING
OUTPUT = LST_FILE-KUNAG.

*   Billing Type
LST_DNCN-FKART = LST_VBRP-FKART.
LST_FILE-FKART = LST_DNCN-FKART.

*   BillingCategory
LST_DNCN-FKTYP = LST_VBRP-FKTYP.
LST_FILE-FKTYP = LST_DNCN-FKTYP.

*   DocumentCat
LST_DNCN-VBTYP = LST_VBRP-VBTYP.
LST_FILE-VBTYP = LST_DNCN-VBTYP.

*   PostingStatus
LST_DNCN-RFBSK = LST_VBRP-RFBSK.
LST_FILE-RFBSK = LST_DNCN-RFBSK.

*   SalesGroup
LST_DNCN-VKGRP = LST_VBRP-VKGRP.
LST_FILE-VKGRP = LST_DNCN-VKGRP.

*   SalesOrg
LST_DNCN-VKORG = LST_VBRP-VKORG.
LST_FILE-VKORG = LST_DNCN-VKORG.

*   DistrChannel
LST_DNCN-VTWEG = LST_VBRP-VTWEG.
LST_FILE-VTWEG = LST_DNCN-VTWEG.

*   CreatedOn
LST_DNCN-ERDAT = LST_VBRP-ERDAT.
**** START UPD 2015/02/15 ISID18 ****
*    WRITE LST_DNCN-ERDAT TO LW_DATE.
*    LST_FILE-ERDAT = LW_DATE.
LST_FILE-ERDAT = LST_VBRP-ERDAT.
**** END UPD 2015/02/15 ISID18 ****

*   CreatedBy
LST_DNCN-ERNAM = LST_VBRP-ERNAM.
LST_FILE-ERNAM = LST_DNCN-ERNAM.

*   ReferenceDoc
LST_DNCN-VGBEL = LST_VBRP-VGBEL.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = LST_DNCN-VGBEL
IMPORTING
OUTPUT = LST_FILE-VGBEL.

*   ReferenceItem
LST_DNCN-VGPOS = LST_VBRP-VGPOS.
LST_FILE-VGPOS = LST_DNCN-VGPOS.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = LST_FILE-VGPOS
IMPORTING
OUTPUT = LST_FILE-VGPOS.

*   PrecDocCateg
LST_DNCN-VGTYP = LST_VBRP-VGTYP.
LST_FILE-VGTYP = LST_DNCN-VGTYP.

*   SalesDocType
LST_DNCN-AUART = LST_VBRP-AUART.
**** START UPD 2015/03/02 ISID18 ****
*    LST_FILE-AUART = LST_DNCN-AUART.
CALL FUNCTION 'CONVERSION_EXIT_AUART_OUTPUT'
EXPORTING
INPUT  = LST_DNCN-AUART
IMPORTING
OUTPUT = LST_FILE-AUART.
**** END UPD 2015/03/02 ISID18 ****

*   CustomerPONo
LST_DNCN-BSTKD = LST_VBKD-BSTKD.
LST_FILE-BSTKD = LST_DNCN-BSTKD.

*   CompanyCode
LST_DNCN-BUKRS = LST_VBRP-BUKRS.

**** START ADD 2015/06/29 ISID18 ****
CLEAR LW_LANGU.
SELECT SINGLE SPRAS
INTO LW_LANGU
FROM KNA1
WHERE KUNNR = LST_DNCN-KUNAG.
**** END ADD 2015/06/29 ISID18 ****

*   Remarks
REFRESH LTD_LINES.
CLEAR LW_NAME.
LW_NAME = LST_DNCN-AUBEL.
CALL FUNCTION 'READ_TEXT'
EXPORTING
CLIENT                  = SY-MANDT
ID                      = '0001'
**** START UPD 2015/06/29 ISID18 ****
*        LANGUAGE                = SY-LANGU
LANGUAGE                = LW_LANGU
**** END UPD 2015/06/29 ISID18 ****
NAME                    = LW_NAME
OBJECT                  = 'VBBK'
TABLES
LINES                   = LTD_LINES
EXCEPTIONS
ID                      = 1
LANGUAGE                = 2
NAME                    = 3
NOT_FOUND               = 4
OBJECT                  = 5
REFERENCE_CHECK         = 6
WRONG_ACCESS_TO_ARCHIVE = 7
OTHERS                  = 8.
IF SY-SUBRC <> 0.
*     汎用モジュールにて想定外のエラーが発生しました。
**** START UPD 2015/02/15 ISID18 ****
*      MESSAGE S032(ZMEGSD01) WITH 'READ_TEXT' 'ZMEGSD01 032'
*                             DISPLAY LIKE 'E'.
*      LEAVE LIST-PROCESSING.
CASE SY-SUBRC.
WHEN 8.
MESSAGE ID SY-MSGID
TYPE SY-MSGTY
NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2
SY-MSGV3 SY-MSGV4
INTO LW_MSG.
MESSAGE S032(ZMEGSD01)
WITH 'READ_TEXT' LW_MSG
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/02/15 ISID18 ****
ELSE.
LOOP AT LTD_LINES INTO LST_LINES.
**** START UPD 2015/09/07 ISID17 ****
*        CONCATENATE LST_DNCN-Z_SO_REMARKS
*                    LST_LINES-TDLINE
*               INTO LST_DNCN-Z_SO_REMARKS.
CONCATENATE LST_DNCN-Z_SO_HDREMARKS
LST_LINES-TDLINE
INTO LST_DNCN-Z_SO_HDREMARKS.
**** END   UPD 2015/09/07 ISID17 ****
ENDLOOP.
**** START UPD 2015/09/07 ISID17 ****
*      LST_FILE-Z_SO_REMARKS = LST_DNCN-Z_SO_REMARKS.
LST_FILE-Z_SO_HDREMARKS = LST_DNCN-Z_SO_HDREMARKS.
**** END   UPD 2015/09/07 ISID17 ****
ENDIF.

**** START ADD 2015/09/07 ISID17 ****
*   Item Remarks
REFRESH LTD_LINES.
CLEAR LW_NAME.
CONCATENATE LST_DNCN-AUBEL LST_DNCN-AUPOS INTO LW_NAME.
CALL FUNCTION 'READ_TEXT'
EXPORTING
CLIENT                  = SY-MANDT
ID                      = '0002'
*        LANGUAGE                = SY-LANGU
LANGUAGE                = LW_LANGU
NAME                    = LW_NAME
OBJECT                  = 'VBBP'
TABLES
LINES                   = LTD_LINES
EXCEPTIONS
ID                      = 1
LANGUAGE                = 2
NAME                    = 3
NOT_FOUND               = 4
OBJECT                  = 5
REFERENCE_CHECK         = 6
WRONG_ACCESS_TO_ARCHIVE = 7
OTHERS                  = 8.
IF SY-SUBRC <> 0.
CASE SY-SUBRC.
WHEN 8.
MESSAGE ID SY-MSGID
TYPE SY-MSGTY
NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2
SY-MSGV3 SY-MSGV4
INTO LW_MSG.
MESSAGE S032(ZMEGSD01)
WITH 'READ_TEXT' LW_MSG
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
WHEN OTHERS.
ENDCASE.
ELSE.
LOOP AT LTD_LINES INTO LST_LINES.
CONCATENATE LST_DNCN-Z_SO_REMARKS
LST_LINES-TDLINE
INTO LST_DNCN-Z_SO_REMARKS.
ENDLOOP.
LST_FILE-Z_SO_REMARKS = LST_DNCN-Z_SO_REMARKS.
ENDIF.
**** END   ADD 2015/09/07 ISID17 ****

*   Printer/Tray
LST_DNCN-LNAME = P_PTRAY.
LST_FILE-LNAME = LST_DNCN-LNAME.

*   CopmanyName
LST_DNCN-Z_COMP_NAME = P_CNAME.
LST_FILE-Z_COMP_NAME = LST_DNCN-Z_COMP_NAME.

*   CopmanyAddress1
LST_DNCN-Z_COMP_ADDRESS1 = P_CADDR1.
LST_FILE-Z_COMP_ADDRESS1 = LST_DNCN-Z_COMP_ADDRESS1.

*   CopmanyAddress2
LST_DNCN-Z_COMP_ADDRESS2 = P_CADDR2.
LST_FILE-Z_COMP_ADDRESS2 = LST_DNCN-Z_COMP_ADDRESS2.

*   CopmanyTel
LST_DNCN-Z_COMP_TEL = P_CTEL.
LST_FILE-Z_COMP_TEL = LST_DNCN-Z_COMP_TEL.

*   CopmanyFax
LST_DNCN-Z_COMP_FAX = P_CFAX.
LST_FILE-Z_COMP_FAX = LST_DNCN-Z_COMP_FAX.

*   CustCodePayer
LST_DNCN-Z_CUST_PYR = LST_VBRP-KUNRG.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = LST_DNCN-Z_CUST_PYR
IMPORTING
OUTPUT = LST_FILE-Z_CUST_PYR.

*   CustNamePayer
LST_DNCN-Z_CUST_NAME_PYR = LST_ADRC-NAME1.
LST_FILE-Z_CUST_NAME_PYR = LST_DNCN-Z_CUST_NAME_PYR.

*   CustAddress1Payer
LST_DNCN-Z_ADDRESS1_PYR = LST_ADRC-STREET.
LST_FILE-Z_ADDRESS1_PYR = LST_DNCN-Z_ADDRESS1_PYR.

*   CustAddress2Payer
LST_DNCN-Z_ADDRESS2_PYR = LST_ADRC-CITY1.
LST_FILE-Z_ADDRESS2_PYR = LST_DNCN-Z_ADDRESS2_PYR.

**** START ADD 2014/12/25 ISID11 ****
*   CustAddress3Payer
LST_DNCN-Z_ADDRESS3_PYR = LST_ADRC-STR_SUPPL1.
LST_FILE-Z_ADDRESS3_PYR = LST_DNCN-Z_ADDRESS3_PYR.

*   CustAddress4Payer
LST_DNCN-Z_ADDRESS4_PYR = LST_ADRC-STR_SUPPL2.
LST_FILE-Z_ADDRESS4_PYR = LST_DNCN-Z_ADDRESS4_PYR.
**** END ADD 2014/12/25 ISID11 ****

*   CustTelPayer
LST_DNCN-Z_TEL_PYR = LST_ADRC-TEL_NUMBER.
LST_FILE-Z_TEL_PYR = LST_DNCN-Z_TEL_PYR.

*   CustFaxPayer
LST_DNCN-Z_FAX_PYR = LST_ADRC-FAX_NUMBER.
LST_FILE-Z_FAX_PYR = LST_DNCN-Z_FAX_PYR.

*   PaymentTerms
**** START UPD 2015/02/15 ISID18 ****
*    LST_DNCN-Z_PAYMENT_TERMS = LST_T052U-TEXT1.
*    LST_FILE-Z_PAYMENT_TERMS = LST_DNCN-Z_PAYMENT_TERMS.
LST_DNCN-Z_PAYMENT_TEXT = LST_ZTEGSDM011-Z_PAYMENT_TEXT.
LST_FILE-Z_PAYMENT_TEXT = LST_DNCN-Z_PAYMENT_TEXT.
**** START UPD 2015/02/15 ISID18 ****

**** START ADD 2014/12/25 ISID11 ****
*   DataInpuｔUser
**** START UPD 2015/02/26 ISID18 ****
*    LST_DNCN-Z_INPUT_USERID = LST_VBRP-ERNAM.
CLEAR LST_USR21.
READ TABLE I_TD_USR21 INTO LST_USR21
WITH KEY BNAME = LST_VBRP-ERNAM
BINARY SEARCH.
LST_DNCN-Z_INPUT_USERID = LST_USR21-NAME_TEXT.
**** END UPD 2015/02/26 ISID18 ****
LST_FILE-Z_INPUT_USERID = LST_DNCN-Z_INPUT_USERID.
**** END ADD 2014/12/25 ISID11 ****

*   OutputUser
LST_DNCN-Z_OUTPUT_USERID = SY-UNAME.
LST_FILE-Z_OUTPUT_USERID = LST_DNCN-Z_OUTPUT_USERID.

*   Dec.pt.Format
IF P_XDEZP IS INITIAL.
LST_DNCN-XDEZP = LST_T005X-XDEZP.
ELSE.
LST_DNCN-XDEZP = P_XDEZP.
ENDIF.
LST_FILE-XDEZP = LST_DNCN-XDEZP.

*   DateFormat
IF P_DATFM IS INITIAL.
LST_DNCN-DATFM = LST_T005X-DATFM.
ELSE.
LST_DNCN-DATFM = P_DATFM.
ENDIF.
LST_FILE-DATFM = LST_DNCN-DATFM.

*   ReportFormat
IF LST_VBRP-VBTYP = 'O'.
LST_DNCN-Z_REPORT_FORMAT = CNS_RF_SMALL.
ELSEIF LST_VBRP-VBTYP = 'P'.
LST_DNCN-Z_REPORT_FORMAT = CNS_RF_LARGE.
ENDIF.
LST_FILE-Z_REPORT_FORMAT = LST_DNCN-Z_REPORT_FORMAT.

**** START ADD 2014/12/25 ISID11 ****
*   ReportLang
LST_DNCN-Z_REPORT_LANG = P_LANGU.
**** START UPD 2015/01/21 ISID11 ****
*    LST_FILE-Z_REPORT_LANG = LST_DNCN-Z_REPORT_LANG.
CALL FUNCTION 'CONVERSION_EXIT_ISOLA_OUTPUT'
EXPORTING
INPUT  = P_LANGU
IMPORTING
OUTPUT = LST_FILE-Z_REPORT_LANG.
**** END UPD 2015/01/21 ISID11 ****

*   ReportTitle
LST_DNCN-Z_REPORT_TITLE = P_TITLE.
LST_FILE-Z_REPORT_TITLE = LST_DNCN-Z_REPORT_TITLE.
**** END ADD 2014/12/25 ISID11 ****
**** START ADD 2015/02/25 ISID18 ****
CLEAR LST_VBPA.
READ TABLE I_TD_VBPA INTO LST_VBPA
WITH KEY VBELN = LST_VBRP-AUBEL
POSNR = LST_VBRP-AUPOS
BINARY SEARCH.
LST_DNCN-Z_ENAME = LST_VBPA-ENAME.
LST_FILE-Z_ENAME = LST_DNCN-Z_ENAME.
**** END ADD 2015/02/25 ISID18 ****

APPEND LST_DNCN TO O_TD_DNCN.
APPEND LST_FILE TO O_TD_FILE.
ENDLOOP.

SORT O_TD_DNCN BY VBELN ASCENDING
POSNR ASCENDING.

ENDFORM.                    " EDIT_DATA
*&---------------------------------------------------------------------*
*&      Form  UPDATE_TABLE
*&---------------------------------------------------------------------*
*       テーブル更新
*----------------------------------------------------------------------*
*      -->I_TD_DNCN
*      -->I_TD_ZTEGSDT017
*      <--O_FNAME
*      <--O_OUTPUT_CP
*      <--O_TD_MESSAGE
*      <--O_COUNT
*      <--O_NORMAL
*      <--O_ERROR
*----------------------------------------------------------------------*
FORM UPDATE_TABLE  USING I_TD_DNCN       TYPE TYP_TD_DNCN
I_TD_ZTEGSDT017 TYPE TYP_TD_ZTEGSDT017
CHANGING O_FNAME         TYPE ANY
O_OUTPUT_CP     TYPE ANY
O_TD_MESSAGE    TYPE TYP_TD_MESSAGE
O_COUNT         TYPE ANY
O_NORMAL        TYPE ANY
O_ERROR         TYPE ANY.

DATA: LST_DNCN       TYPE TYP_DNCN,
LW_END         TYPE CHAR1,
LW_DATUM       TYPE SY-DATUM,
LW_UZEIT       TYPE SY-UZEIT,
LW_UNAME       TYPE SY-UNAME,
LW_MODE        TYPE CHAR1,
LW_ERRFLG      TYPE CHAR1,
LW_INSERT_17   TYPE CHAR1,
LST_ZTEGZZT001 TYPE ZTEGZZT001,
LST_ZTEGSDT017 TYPE ZTEGSDT017,
LTD_ZTEGSDT018 TYPE STANDARD TABLE OF ZTEGSDT018,
LST_ZTEGSDT018 TYPE ZTEGSDT018,
LTD_ZSDT018    TYPE STANDARD TABLE OF TYP_ZTEGSDT018.

* ファイル名取得処理
PERFORM GET_FILE_NAME USING I_TD_DNCN
CHANGING O_FNAME
O_OUTPUT_CP.

LW_DATUM = SY-DATUM.
LW_UZEIT = SY-UZEIT.
LW_UNAME = SY-UNAME.
IF RB_DOWN IS INITIAL.
LW_MODE = 'P'.
ELSE.
LW_MODE = 'D'.
ENDIF.

* Output Work存在チェック
PERFORM GET_OUTPUT_WORK USING LW_MODE
I_TD_DNCN
CHANGING LTD_ZSDT018.

* テーブルの更新
LOOP AT I_TD_DNCN INTO LST_DNCN.
AT END OF VBELN.
LW_END = 'X'.
O_COUNT = O_COUNT + 1.  "処理件数
ENDAT.

IF LW_END = 'X'.
*     ZTEGZZT001データの編集
CLEAR LST_ZTEGZZT001.
PERFORM GET_SERNO CHANGING LST_ZTEGZZT001-Z_OUTPUT_LOG_NO.
LST_ZTEGZZT001-PROGNAME = SY-REPID.
LST_ZTEGZZT001-Z_REPORT_NAME = TEXT-C01.
LST_ZTEGZZT001-LNAME = P_PTRAY.
LST_ZTEGZZT001-Z_OUTPUT_PATH = O_FNAME.
LST_ZTEGZZT001-Z_OUTPUT_MODE = LW_MODE.
IF RB_DOWN IS INITIAL.
LST_ZTEGZZT001-Z_OUTPUT_CP = O_OUTPUT_CP.
ELSE.
PERFORM GET_LOCAL_CODEPAGE
CHANGING LST_ZTEGZZT001-Z_OUTPUT_CP.
ENDIF.
LST_ZTEGZZT001-Z_KEY1_TYPE = 'VKORG'.
LST_ZTEGZZT001-Z_KEY1_VALUE = LST_DNCN-VKORG.
LST_ZTEGZZT001-Z_KEY2_TYPE = 'KUNRG'.
LST_ZTEGZZT001-Z_KEY2_VALUE = LST_DNCN-Z_CUST_PYR.
LST_ZTEGZZT001-Z_KEY3_TYPE = 'KUNAG'.
LST_ZTEGZZT001-Z_KEY3_VALUE = LST_DNCN-KUNAG.
LST_ZTEGZZT001-Z_KEY4_TYPE = 'BELNR'.
LST_ZTEGZZT001-Z_KEY4_VALUE = LST_DNCN-VBELN.
LST_ZTEGZZT001-Z_CRE_YMD = LW_DATUM.
LST_ZTEGZZT001-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGZZT001-Z_CRE_USERID = LW_UNAME.

*     ZTEGSDT017データの編集
CLEAR LST_ZTEGSDT017.
CLEAR LW_INSERT_17.
IF RB_REPNT IS INITIAL.
READ TABLE I_TD_ZTEGSDT017 TRANSPORTING NO FIELDS
WITH KEY Z_OUTPUT_MODE = LW_MODE
VBELN = LST_DNCN-VBELN
ERDAT = LST_DNCN-ERDAT.
IF SY-SUBRC <> 0.
LST_ZTEGSDT017-Z_OUTPUT_MODE = LW_MODE.
LST_ZTEGSDT017-VBELN = LST_DNCN-VBELN.
LST_ZTEGSDT017-ERDAT = LST_DNCN-ERDAT.
LST_ZTEGSDT017-Z_CRE_YMD = LW_DATUM.
LST_ZTEGSDT017-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGSDT017-Z_CRE_USERID = LW_UNAME.
LW_INSERT_17 = 'X'.
ENDIF.
ENDIF.
ENDIF.

*   ZTEGSDT018データの編集
CLEAR LST_ZTEGSDT018.
LST_ZTEGSDT018-Z_OUTPUT_MODE = LW_MODE.
LST_ZTEGSDT018-VBELN = LST_DNCN-VBELN.
LST_ZTEGSDT018-POSNR = LST_DNCN-POSNR.
LST_ZTEGSDT018-LNAME = LST_DNCN-LNAME.
LST_ZTEGSDT018-Z_COMP_NAME = LST_DNCN-Z_COMP_NAME.
LST_ZTEGSDT018-Z_COMP_ADDRESS1 = LST_DNCN-Z_COMP_ADDRESS1.
LST_ZTEGSDT018-Z_COMP_ADDRESS2 = LST_DNCN-Z_COMP_ADDRESS2.
LST_ZTEGSDT018-Z_COMP_TEL = LST_DNCN-Z_COMP_TEL.
LST_ZTEGSDT018-Z_COMP_FAX = LST_DNCN-Z_COMP_FAX.
LST_ZTEGSDT018-FKDAT = LST_DNCN-FKDAT.
LST_ZTEGSDT018-Z_CUST_PYR = LST_DNCN-Z_CUST_PYR.
LST_ZTEGSDT018-Z_CUST_NAME_PYR = LST_DNCN-Z_CUST_NAME_PYR.
LST_ZTEGSDT018-Z_ADDRESS1_PYR = LST_DNCN-Z_ADDRESS1_PYR.
LST_ZTEGSDT018-Z_ADDRESS2_PYR = LST_DNCN-Z_ADDRESS2_PYR.
**** START ADD 2014/12/25 ISID11 ****
LST_ZTEGSDT018-Z_ADDRESS3_PYR = LST_DNCN-Z_ADDRESS3_PYR.
LST_ZTEGSDT018-Z_ADDRESS4_PYR = LST_DNCN-Z_ADDRESS4_PYR.
**** END ADD 2014/12/25 ISID11 ****
LST_ZTEGSDT018-Z_ATTN_PYR = LST_DNCN-Z_ATTN_PYR.
LST_ZTEGSDT018-Z_TEL_PYR = LST_DNCN-Z_TEL_PYR.
LST_ZTEGSDT018-Z_FAX_PYR = LST_DNCN-Z_FAX_PYR.
**** START UPD 2015/02/15 ISID18 ****
*    LST_ZTEGSDT018-Z_PAYMENT_TERMS = LST_DNCN-Z_PAYMENT_TERMS.
LST_ZTEGSDT018-Z_PAYMENT_TEXT = LST_DNCN-Z_PAYMENT_TEXT.
**** END UPD 2015/02/15 ISID18 ****
LST_ZTEGSDT018-MATNR = LST_DNCN-MATNR.
**** START UPD 2015/02/15 ISID18 ****
*    LST_ZTEGSDT018-ARKTX = LST_DNCN-ARKTX.
LST_ZTEGSDT018-Z_MAKTX = LST_DNCN-Z_MAKTX.
**** END UPD 2015/02/15 ISID18 ****
LST_ZTEGSDT018-FKIMG = LST_DNCN-FKIMG.
LST_ZTEGSDT018-VRKME = LST_DNCN-VRKME.
LST_ZTEGSDT018-Z_NETPR = LST_DNCN-NETPR.
LST_ZTEGSDT018-Z_WAERS_NETPR = LST_DNCN-WAERK.
LST_ZTEGSDT018-Z_NETWR = LST_DNCN-NETWR.
LST_ZTEGSDT018-Z_WAERS_NETWR = LST_DNCN-WAERS.
LST_ZTEGSDT018-AUBEL = LST_DNCN-AUBEL.
LST_ZTEGSDT018-AUPOS = LST_DNCN-AUPOS.
LST_ZTEGSDT018-BSTKD = LST_DNCN-BSTKD.
**** START ADD 2015/09/07 ISID17 ****
LST_ZTEGSDT018-Z_SO_HDREMARKS = LST_DNCN-Z_SO_HDREMARKS.
**** END   ADD 2015/09/07 ISID17 ****
LST_ZTEGSDT018-Z_SO_REMARKS = LST_DNCN-Z_SO_REMARKS.
LST_ZTEGSDT018-KDMAT = LST_DNCN-KDMAT.
LST_ZTEGSDT018-WERKS = LST_DNCN-WERKS.
LST_ZTEGSDT018-VKBUR = LST_DNCN-VKBUR.
LST_ZTEGSDT018-KUNAG = LST_DNCN-KUNAG.
LST_ZTEGSDT018-FKART = LST_DNCN-FKART.
LST_ZTEGSDT018-FKTYP = LST_DNCN-FKTYP.
LST_ZTEGSDT018-VBTYP = LST_DNCN-VBTYP.
LST_ZTEGSDT018-RFBSK = LST_DNCN-RFBSK.
LST_ZTEGSDT018-VKGRP = LST_DNCN-VKGRP.
LST_ZTEGSDT018-VKORG_AUFT = LST_DNCN-VKORG.
LST_ZTEGSDT018-VTWEG_AUFT = LST_DNCN-VTWEG.
LST_ZTEGSDT018-ERDAT = LST_DNCN-ERDAT.
LST_ZTEGSDT018-ERNAM = LST_DNCN-ERNAM.
LST_ZTEGSDT018-VGBEL = LST_DNCN-VGBEL.
LST_ZTEGSDT018-VGPOS = LST_DNCN-VGPOS.
LST_ZTEGSDT018-VGTYP = LST_DNCN-VGTYP.
LST_ZTEGSDT018-AUART = LST_DNCN-AUART.
**** START ADD 2014/12/25 ISID11 ****
LST_ZTEGSDT018-Z_INPUT_USERID = LST_DNCN-Z_INPUT_USERID.
**** END ADD 2014/12/25 ISID11 ****
LST_ZTEGSDT018-Z_OUTPUT_USERID = LST_DNCN-Z_OUTPUT_USERID.
**** START ADD 2015/02/26 ISID18 ****
LST_ZTEGSDT018-Z_ENAME = LST_DNCN-Z_ENAME.
**** END ADD 2015/02/26 ISID18 ****
LST_ZTEGSDT018-XDEZP = LST_DNCN-XDEZP.
LST_ZTEGSDT018-DATFM = LST_DNCN-DATFM.
LST_ZTEGSDT018-Z_REPORT_FORMAT = LST_DNCN-Z_REPORT_FORMAT.
**** START ADD 2014/12/25 ISID11 ****
LST_ZTEGSDT018-Z_REPORT_LANG  = LST_DNCN-Z_REPORT_LANG.
LST_ZTEGSDT018-Z_REPORT_TITLE = LST_DNCN-Z_REPORT_TITLE.
**** END ADD 2014/12/25 ISID11 ****
LST_ZTEGSDT018-Z_CRE_YMD = LW_DATUM.
LST_ZTEGSDT018-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGSDT018-Z_CRE_USERID = LW_UNAME.
APPEND LST_ZTEGSDT018 TO LTD_ZTEGSDT018.

*   DNCNテーブル更新
IF LW_END = 'X'.
CLEAR LW_ERRFLG.
PERFORM UPDATE_DATA USING LST_ZTEGZZT001
LST_ZTEGSDT017
LTD_ZTEGSDT018
LTD_ZSDT018
LST_DNCN
LW_INSERT_17
LW_MODE
CHANGING O_TD_MESSAGE
LW_ERRFLG.
IF LW_ERRFLG = 'X'.
O_ERROR = O_ERROR + 1.  "エラー件数
ELSE.
O_NORMAL = O_NORMAL + 1.  "正常件数
ENDIF.
CLEAR LW_END.
REFRESH LTD_ZTEGSDT018.
ENDIF.
ENDLOOP.

ENDFORM.                    " UPDATE_TABLE
*&---------------------------------------------------------------------*
*&      Form  GET_FILE_NAME
*&---------------------------------------------------------------------*
*       ファイル名取得処理
*----------------------------------------------------------------------*
*      -->I_TD_DNCN
*      <--O_FNAME
*      <--O_OUTPUT_CP
*----------------------------------------------------------------------*
FORM GET_FILE_NAME  USING I_TD_DNCN   TYPE TYP_TD_DNCN
CHANGING O_FNAME     TYPE ANY
O_OUTPUT_CP TYPE ANY.

DATA: LST_DNCN     TYPE TYP_DNCN,
LW_PATH(128) TYPE C,
LW_OUTPUT_FN TYPE ZTEGZZM001-Z_OUTPUT_FN.

GET PARAMETER ID 'ZSVF' FIELD LW_PATH.

* 選択画面のラジオボタン「Print」「Reprint」が選択されている場合
IF RB_DOWN IS INITIAL.
LOOP AT I_TD_DNCN INTO LST_DNCN.
IF LST_DNCN-BUKRS IS NOT INITIAL.
EXIT.
ENDIF.
ENDLOOP.
*   ファイル名・文字コード取得
**** START ADD 2015/03/02 ISID18 ****
IF LST_DNCN-BUKRS IS NOT INITIAL.
**** END ADD 2015/03/02 ISID18 ****
SELECT Z_OUTPUT_FN
Z_OUTPUT_CP
UP TO 1 ROWS
INTO (LW_OUTPUT_FN,O_OUTPUT_CP)
FROM ZTEGZZM001
WHERE PROGNAME = SY-REPID
AND BUKRS    = LST_DNCN-BUKRS.
ENDSELECT.
**** START ADD 2015/03/02 ISID18 ****
ENDIF.
**** END ADD 2015/03/02 ISID18 ****
**** START ADD 2015/02/15 ISID18 ****
IF SY-SUBRC <> 0.
*     データが存在しない場合、メッセージを出力し処理を終了する
*     アドオン変数テーブルが取得できませんでした
*     (NAME = &1 / PGM = &2)
MESSAGE S051(ZMEGSD01) WITH 'ZTEGZZM001' SY-REPID
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
**** END ADD 2015/02/15 ISID18 ****
CONCATENATE LW_PATH
LW_OUTPUT_FN
SY-REPID
SY-UNAME
SY-UZEIT
CNS_EXTNAME
INTO O_FNAME.
* 選択画面のラジオボタン「Download」が選択されている場合
ELSE.
O_FNAME = P_FNAME.
**** START ADD 2015/01/21 ISID11 ****
PERFORM GET_LOCAL_CODEPAGE
CHANGING O_OUTPUT_CP.
**** END ADD 2015/01/21 ISID11 ****
ENDIF.

ENDFORM.                    " GET_FILE_NAME
*&---------------------------------------------------------------------*
*&      Form  GET_OUTPUT_WORK
*&---------------------------------------------------------------------*
*       Output Work存在チェック
*----------------------------------------------------------------------*
*      -->I_MODE
*      -->I_TD_DNCN
*      <--O_TD_ZSDT018
*----------------------------------------------------------------------*
FORM GET_OUTPUT_WORK  USING I_MODE       TYPE ANY
I_TD_DNCN    TYPE TYP_TD_DNCN
CHANGING O_TD_ZSDT018 TYPE TYP_TD_ZSDT018.

DATA: LTD_DNCN TYPE TYP_TD_DNCN.

LTD_DNCN[] = I_TD_DNCN[].
SORT LTD_DNCN BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_DNCN
COMPARING VBELN
ERDAT.
IF LTD_DNCN[] IS NOT INITIAL.
SELECT Z_OUTPUT_MODE
VBELN
ERDAT
INTO TABLE O_TD_ZSDT018
FROM ZTEGSDT018
FOR ALL ENTRIES IN LTD_DNCN
WHERE Z_OUTPUT_MODE = I_MODE
AND VBELN         = LTD_DNCN-VBELN
AND ERDAT         = LTD_DNCN-ERDAT.
SORT O_TD_ZSDT018 BY Z_OUTPUT_MODE ASCENDING
VBELN         ASCENDING
ERDAT         ASCENDING.
ENDIF.

ENDFORM.                    " GET_OUTPUT_WORK
*&---------------------------------------------------------------------*
*&      Form  GET_SERNO
*&---------------------------------------------------------------------*
*       番号範囲オブジェクト（ZEGZZ0001）により発番
*----------------------------------------------------------------------*
*      <--O_NO
*----------------------------------------------------------------------*
FORM GET_SERNO  CHANGING O_NO TYPE ANY.

CALL FUNCTION 'NUMBER_GET_NEXT'
EXPORTING
NR_RANGE_NR = '01'
OBJECT      = 'ZEGZZ0001'
IMPORTING
NUMBER      = O_NO.

ENDFORM.                    " GET_SERNO
*&---------------------------------------------------------------------*
*&      Form  GET_LOCAL_CODEPAGE
*&---------------------------------------------------------------------*
*       ローカルコードページ取得
*----------------------------------------------------------------------*
*      <--O_OUTPUT_CP
*----------------------------------------------------------------------*
FORM GET_LOCAL_CODEPAGE  CHANGING O_OUTPUT_CP TYPE ANY.

DATA:
**** START ADD 2015/01/21 ISID11 ****
LW_ENCODING  TYPE ABAP_ENCODING,
LW_RC        TYPE I,
**** END ADD 2015/01/21 ISID11 ****
LW_CODE TYPE CPCODEPAGE.

**** START UPD 2015/01/21 ISID11 ****
*  CALL FUNCTION 'NLS_GET_FRONTEND_CP'
*    EXPORTING
*      LANGU                 = SY-LANGU
*    IMPORTING
*      FRONTEND_CODEPAGE     = LW_CODE
*    EXCEPTIONS
*      ILLEGAL_SYST_CODEPAGE = 1
*      NO_FRONTEND_CP_FOUND  = 2
*      INTERNAL_OR_DB_ERROR  = 3
*      OTHERS                = 4.
CALL METHOD CL_GUI_FRONTEND_SERVICES=>GET_SAPLOGON_ENCODING
CHANGING
FILE_ENCODING                 = LW_ENCODING
RC                            = LW_RC
EXCEPTIONS
CNTL_ERROR                    = 1
ERROR_NO_GUI                  = 2
NOT_SUPPORTED_BY_GUI          = 3
CANNOT_INITIALIZE_GLOBALSTATE = 4
OTHERS                        = 5.
**** END UPD 2015/01/21 ISID11 ****
IF SY-SUBRC = 0.
**** START ADD 2015/01/21 ISID11 ****
LW_CODE = LW_ENCODING.
**** END ADD 2015/01/21 ISID11 ****
CALL FUNCTION 'SCP_CODEPAGE_INFO'
EXPORTING
CODEPAGE  = LW_CODE
IMPORTING
HTTP_NAME = O_OUTPUT_CP.
ENDIF.

ENDFORM.                    " GET_LOCAL_CODEPAGE
*&---------------------------------------------------------------------*
*&      Form  UPDATE_DATA
*&---------------------------------------------------------------------*
*       DNCNテーブル更新
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_ST_ZTEGSDT017
*      -->I_TD_ZTEGSDT018
*      -->I_TD_ZSDT018
*      -->I_ST_DNCN
*      -->I_FLG
*      -->I_MODE
*      <--O_TD_MESSAGE
*      <--O_ERRFLG
*----------------------------------------------------------------------*
FORM UPDATE_DATA  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_ST_ZTEGSDT017 TYPE ZTEGSDT017
I_TD_ZTEGSDT018 TYPE TYP_TD_ZTEGSDT018
I_TD_ZSDT018    TYPE TYP_TD_ZSDT018
I_ST_DNCN       TYPE TYP_DNCN
I_FLG           TYPE ANY
I_MODE          TYPE ANY
CHANGING O_TD_MESSAGE    TYPE TYP_TD_MESSAGE
O_ERRFLG        TYPE ANY.

DATA: LST_MESSAGE TYPE TYP_MESSAGE,
LW_VBELN    TYPE VBRP-VBELN,
LW_INFO     TYPE STRING.

* メッセージインフォ
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT  = I_ST_DNCN-VBELN
IMPORTING
OUTPUT = LW_VBELN.
CONCATENATE TEXT-M06
LW_VBELN
INTO LW_INFO
SEPARATED BY SPACE.

* テーブルロック
PERFORM LOCK_TABLE USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT018
I_ST_DNCN
I_FLG
I_MODE
CHANGING O_TD_MESSAGE
O_ERRFLG.
IF O_ERRFLG = 'X'.
RETURN.
ENDIF.

* Output Logの登録
INSERT ZTEGZZT001 FROM I_ST_ZTEGZZT001.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*   データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGZZT001' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M03.
LST_MESSAGE-MSGTYP = TEXT-M05.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*   テーブルリリース
PERFORM RELEASE_TABLE USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT018
I_ST_DNCN
I_MODE.
RETURN.
ENDIF.

* Output Management(Debit Note/Credit Note)の登録
IF I_FLG = 'X'.
INSERT ZTEGSDT017 FROM I_ST_ZTEGSDT017.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*     データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGSDT017' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M03.
LST_MESSAGE-MSGTYP = TEXT-M05.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*     テーブルリリース
PERFORM RELEASE_TABLE USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT018
I_ST_DNCN
I_MODE.
RETURN.
ENDIF.
ENDIF.

* Output Work(Debit Note/Credit Note)の削除
READ TABLE I_TD_ZSDT018 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = I_MODE
VBELN         = I_ST_DNCN-VBELN
ERDAT         = I_ST_DNCN-ERDAT.
IF SY-SUBRC = 0.
DELETE FROM ZTEGSDT018
WHERE Z_OUTPUT_MODE = I_MODE
AND VBELN         = I_ST_DNCN-VBELN
AND ERDAT         = I_ST_DNCN-ERDAT.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*     データ削除に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S033(ZMEGSD01) WITH 'ZTEGSDT018' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M03.
LST_MESSAGE-MSGTYP = TEXT-M05.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*     テーブルリリース
PERFORM RELEASE_TABLE USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT018
I_ST_DNCN
I_MODE.
RETURN.
ENDIF.
ENDIF.

* Output Work(Debit Note/Credit Note)の登録
INSERT ZTEGSDT018 FROM TABLE I_TD_ZTEGSDT018 ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*   データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGSDT018' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M03.
LST_MESSAGE-MSGTYP = TEXT-M05.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*   テーブルリリース
PERFORM RELEASE_TABLE USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT018
I_ST_DNCN
I_MODE.
RETURN.
ENDIF.

COMMIT WORK AND WAIT.

* データ登録が正常終了しました。
**** START UPD 2015/02/15 ISDI18 ****
*  MESSAGE S013(ZMEGSD01) INTO LST_MESSAGE-MSG.
MESSAGE S081(ZMEGSD01)
WITH TEXT-M07 LW_VBELN
INTO LST_MESSAGE-MSG.
**** END UPD 2015/02/15 ISID18 ****
LST_MESSAGE-TYP = TEXT-M03.
LST_MESSAGE-MSGTYP = TEXT-M04.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

* テーブルリリース
PERFORM RELEASE_TABLE USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT018
I_ST_DNCN
I_MODE.

ENDFORM.                    " UPDATE_DATA
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE
*&---------------------------------------------------------------------*
*       テーブルロック
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_TD_ZTEGSDT018
*      -->I_ST_DNCN
*      -->I_ST_FLG
*      -->I_ST_MODE
*      <--O_TD_MESSAGE
*      <--O_TD_ERRFLG
*----------------------------------------------------------------------*
FORM LOCK_TABLE  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_TD_ZTEGSDT018 TYPE TYP_TD_ZTEGSDT018
I_ST_DNCN       TYPE TYP_DNCN
I_FLG           TYPE ANY
I_MODE          TYPE ANY
CHANGING O_TD_MESSAGE    TYPE TYP_TD_MESSAGE
O_ERRFLG        TYPE ANY.

DATA: LST_MESSAGE    TYPE TYP_MESSAGE,
LST_ZTEGSDT018 TYPE ZTEGSDT018,
LTD_LOCK       TYPE TYP_TD_ZTEGSDT018,
LST_LOCK       TYPE ZTEGSDT018,
LW_END         TYPE CHAR1.

* ZTEGZZT001のロック
CALL FUNCTION 'ENQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001 = 'E'
MANDT           = SY-MANDT
Z_OUTPUT_LOG_NO = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO
EXCEPTIONS
FOREIGN_LOCK    = 1
SYSTEM_FAILURE  = 2
OTHERS          = 3.
IF SY-SUBRC <> 0.
**** START UPD 2015/02/15 ISID18 ****
*    MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
*        WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
MESSAGE E082(ZMEGSD01)
WITH SY-MSGV1 TEXT-M06 I_ST_DNCN-VBELN
**** END UPD 2015/02/15 ISID18 ****
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M03.
LST_MESSAGE-MSGTYP = TEXT-M05.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
O_ERRFLG = 'X'.
RETURN.
ENDIF.

* ZTEGSDT017のロック
IF I_FLG = 'X'.
CALL FUNCTION 'ENQUEUE_EZZTEGSDT017'
EXPORTING
MODE_ZTEGSDT017 = 'E'
MANDT           = SY-MANDT
Z_OUTPUT_MODE   = I_MODE
VBELN           = I_ST_DNCN-VBELN
ERDAT           = I_ST_DNCN-ERDAT
EXCEPTIONS
FOREIGN_LOCK    = 1
SYSTEM_FAILURE  = 2
OTHERS          = 3.
IF SY-SUBRC <> 0.
**** START UPD 2015/02/15 ISID18 ****
*      MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
*          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
MESSAGE E082(ZMEGSD01)
WITH SY-MSGV1 TEXT-M06 I_ST_DNCN-VBELN
**** END UPD 2015/02/15 ISID18 ****
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M03.
LST_MESSAGE-MSGTYP = TEXT-M05.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

*     ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001 = 'E'
MANDT           = SY-MANDT
Z_OUTPUT_LOG_NO = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

O_ERRFLG = 'X'.
RETURN.
ENDIF.
ENDIF.

* ZTEGSDT018のロック
LOOP AT I_TD_ZTEGSDT018 INTO LST_ZTEGSDT018.
AT END OF VBELN.
LW_END = 'X'.
ENDAT.
IF LW_END = 'X'.
CLEAR LW_END.
CALL FUNCTION 'ENQUEUE_EZZTEGSDT018'
EXPORTING
MODE_ZTEGSDT018 = 'E'
MANDT           = SY-MANDT
Z_OUTPUT_MODE   = LST_ZTEGSDT018-Z_OUTPUT_MODE
VBELN           = LST_ZTEGSDT018-VBELN
EXCEPTIONS
FOREIGN_LOCK    = 1
SYSTEM_FAILURE  = 2
OTHERS          = 3.
IF SY-SUBRC <> 0.
**** START UPD 2015/02/15 ISID18 ****
*        MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
MESSAGE E082(ZMEGSD01)
WITH SY-MSGV1 TEXT-M06 LST_ZTEGSDT018-VBELN
**** END UPD 2015/02/15 ISID18 ****
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M03.
LST_MESSAGE-MSGTYP = TEXT-M05.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

*       ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001 = 'E'
MANDT           = SY-MANDT
Z_OUTPUT_LOG_NO = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

*       ZTEGSDT017のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGSDT017'
EXPORTING
MODE_ZTEGSDT017 = 'E'
MANDT           = SY-MANDT
Z_OUTPUT_MODE   = I_MODE
VBELN           = I_ST_DNCN-VBELN
ERDAT           = I_ST_DNCN-ERDAT.

*       ZTEGSDT018のリリース
LOOP AT LTD_LOCK INTO LST_LOCK.
CALL FUNCTION 'DEQUEUE_EZZTEGSDT018'
EXPORTING
MODE_ZTEGSDT018 = 'E'
MANDT           = SY-MANDT
Z_OUTPUT_MODE   = LST_LOCK-Z_OUTPUT_MODE
VBELN           = LST_LOCK-VBELN.
ENDLOOP.

O_ERRFLG = 'X'.
RETURN.
ELSE.
APPEND LST_ZTEGSDT018 TO LTD_LOCK.
ENDIF.
ENDIF.
ENDLOOP.

ENDFORM.                    " LOCK_TABLE
*&---------------------------------------------------------------------*
*&      Form  RELEASE_TABLE
*&---------------------------------------------------------------------*
*       テーブルリリース
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_TD_ZTEGSDT018
*      -->I_ST_SI
*      -->I_MODE
*----------------------------------------------------------------------*
FORM RELEASE_TABLE  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_TD_ZTEGSDT018 TYPE TYP_TD_ZTEGSDT018
I_ST_DNCN       TYPE TYP_DNCN
I_MODE          TYPE ANY.

DATA LST_LOCK TYPE ZTEGSDT018.

* ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001 = 'E'
MANDT           = SY-MANDT
Z_OUTPUT_LOG_NO = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

* ZTEGSDT017のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGSDT017'
EXPORTING
MODE_ZTEGSDT017 = 'E'
MANDT           = SY-MANDT
Z_OUTPUT_MODE   = I_MODE
VBELN           = I_ST_DNCN-VBELN
ERDAT           = I_ST_DNCN-ERDAT.

* ZTEGSDT018のリリース
LOOP AT I_TD_ZTEGSDT018 INTO LST_LOCK.
CALL FUNCTION 'DEQUEUE_EZZTEGSDT018'
EXPORTING
MODE_ZTEGSDT018 = 'E'
MANDT           = SY-MANDT
Z_OUTPUT_MODE   = LST_LOCK-Z_OUTPUT_MODE
VBELN           = LST_LOCK-VBELN.
ENDLOOP.

ENDFORM.                    " RELEASE_TABLE
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_FILE
*&---------------------------------------------------------------------*
*       ファイル出力
*----------------------------------------------------------------------*
*      -->I_TD_FILE
*      -->I_FNAME
*      -->I_OUTPUT_CP
*----------------------------------------------------------------------*
FORM OUTPUT_FILE  USING    I_TD_FILE   TYPE TYP_TD_FILE
I_FNAME     TYPE ANY
I_OUTPUT_CP TYPE ANY.

DATA: LW_SFILE    TYPE STRING,
LST_FILE    TYPE ZSEGSD0017,
LW_CODEPAGE TYPE ABAP_ENCODING,
**** START ADD 2015/01/21 ISID11 ****
LW_CDUTF8    TYPE ABAP_ENCODING,
**** END ADD 2015/01/21 ISID11 ****
LW_FNAME    TYPE STRING,
LW_ERRFLG   TYPE CHAR1,
LW_STR      TYPE STRING,
LW_CODE_STR TYPE STRING,
LTD_FILE    TYPE TYP_TD_FILE.

* コードページ取得
LW_CODE_STR = I_OUTPUT_CP.
IF LW_CODE_STR IS NOT INITIAL.
LW_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( LW_CODE_STR ).
ENDIF.
* サーバファイル
IF RB_DOWN IS INITIAL.
**** START ADD 2015/01/21 ISID11 ****
LW_CDUTF8 = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( 'UTF-8' ).
IF LW_CODEPAGE = LW_CDUTF8.
**** END ADD 2015/01/21 ISID11 ****
OPEN DATASET I_FNAME FOR OUTPUT IN TEXT MODE
**** START UPD 2015/01/21 ISID11 ****
*                         ENCODING DEFAULT
ENCODING UTF-8
**** END UPD 2015/01/21 ISID11 ****
IGNORING CONVERSION ERRORS.
**** START ADD 2015/01/21 ISID11 ****
ELSE.
OPEN DATASET I_FNAME FOR OUTPUT IN LEGACY TEXT MODE
CODE PAGE LW_CODEPAGE
IGNORING CONVERSION ERRORS.
ENDIF.
**** END ADD 2015/01/21 ISID11 ****
IF SY-SUBRC <> 0.
LW_ERRFLG = 'X'.
*     ファイルオープンエラー &1
MESSAGE S035(ZMEGSD01) WITH I_FNAME
DISPLAY LIKE 'E'.
ELSE.
*     データ出力
LOOP AT I_TD_FILE INTO LST_FILE.
CONCATENATE LST_FILE-LNAME
LST_FILE-Z_COMP_NAME
LST_FILE-Z_COMP_ADDRESS1
LST_FILE-Z_COMP_ADDRESS2
LST_FILE-Z_COMP_TEL
LST_FILE-Z_COMP_FAX
LST_FILE-VBELN
LST_FILE-FKDAT
LST_FILE-Z_CUST_PYR
LST_FILE-Z_CUST_NAME_PYR
LST_FILE-Z_ADDRESS1_PYR
LST_FILE-Z_ADDRESS2_PYR
**** START ADD 2014/12/25 ISID11 ****
LST_FILE-Z_ADDRESS3_PYR
LST_FILE-Z_ADDRESS4_PYR
**** END ADD 2014/12/25 ISID11 ****
LST_FILE-Z_ATTN_PYR
LST_FILE-Z_TEL_PYR
LST_FILE-Z_FAX_PYR
**** START UPD 2015/02/15 ISID18 ****
*                    LST_FILE-Z_PAYMENT_TERMS
LST_FILE-Z_PAYMENT_TEXT
**** END UPD 2015/02/15 ISID18 ****
**** START ADD 2015/09/07 ISID17 ****
LST_FILE-Z_SO_HDREMARKS
**** END   ADD 2015/09/07 ISID17 ****
LST_FILE-MATNR
**** START UPD 2015/02/15 ISID18 ****
*                    LST_FILE-ARKTX
LST_FILE-Z_MAKTX
**** END UPD 2015/02/15 ISID18 ****
LST_FILE-FKIMG
LST_FILE-VRKME
LST_FILE-NETPR
LST_FILE-WAERK_O
LST_FILE-NETWR
LST_FILE-WAERS_O
LST_FILE-AUBEL
LST_FILE-AUPOS
LST_FILE-BSTKD
LST_FILE-Z_SO_REMARKS
LST_FILE-KDMAT
LST_FILE-POSNR
LST_FILE-WERKS
LST_FILE-VKBUR
LST_FILE-KUNAG
LST_FILE-FKART
LST_FILE-FKTYP
LST_FILE-VBTYP
LST_FILE-RFBSK
LST_FILE-VKGRP
LST_FILE-VKORG
LST_FILE-VTWEG
LST_FILE-ERDAT
LST_FILE-ERNAM
LST_FILE-VGBEL
LST_FILE-VGPOS
LST_FILE-VGTYP
LST_FILE-AUART
**** START ADD 2014/12/25 ISID11 ****
LST_FILE-Z_INPUT_USERID
**** END ADD 2014/12/25 ISID11 ****
**** START ADD 2015/02/26 ISID18 ****
LST_FILE-Z_ENAME
**** END ADD 2015/02/26 ISID18 ****
LST_FILE-Z_OUTPUT_USERID
LST_FILE-XDEZP
LST_FILE-DATFM
LST_FILE-Z_REPORT_FORMAT
**** START ADD 2014/12/25 ISID11 ****
LST_FILE-Z_REPORT_LANG
LST_FILE-Z_REPORT_TITLE
**** END ADD 2014/12/25 ISID11 ****
INTO LW_SFILE
SEPARATED BY CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.
TRANSFER LW_SFILE TO I_FNAME.
ENDLOOP.
CLOSE DATASET I_FNAME.
ENDIF.

* ローカルファイル
ELSE.
*   ヘッダ取得
CLEAR LST_FILE.
CALL FUNCTION 'ZEG_ZZ_DD04T_GET'
EXPORTING
IMPTSNAME    = 'ZSEGSD0017'
IMPLANGU     = SY-LANGU
IMPORTING
EXPSCRTEXT_L = LW_STR.
SPLIT LW_STR AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
INTO LST_FILE-LNAME
LST_FILE-Z_COMP_NAME
LST_FILE-Z_COMP_ADDRESS1
LST_FILE-Z_COMP_ADDRESS2
LST_FILE-Z_COMP_TEL
LST_FILE-Z_COMP_FAX
LST_FILE-VBELN
LST_FILE-FKDAT
LST_FILE-Z_CUST_PYR
LST_FILE-Z_CUST_NAME_PYR
LST_FILE-Z_ADDRESS1_PYR
LST_FILE-Z_ADDRESS2_PYR
**** START ADD 2014/12/25 ISID11 ****
LST_FILE-Z_ADDRESS3_PYR
LST_FILE-Z_ADDRESS4_PYR
**** END ADD 2014/12/25 ISID11 ****
LST_FILE-Z_ATTN_PYR
LST_FILE-Z_TEL_PYR
LST_FILE-Z_FAX_PYR
**** START UPD 2015/02/15 ISID18 ****
*          LST_FILE-Z_PAYMENT_TERMS
LST_FILE-Z_PAYMENT_TEXT
**** END UPD 2015/02/15 ISID18 ****
**** START ADD 2015/09/07 ISID17 ****
LST_FILE-Z_SO_HDREMARKS
**** END   ADD 2015/09/07 ISID17 ****
LST_FILE-MATNR
**** START UPD 2015/02/15 ISID18 ****
*          LST_FILE-ARKTX
LST_FILE-Z_MAKTX
**** END UPD 2015/02/15 ISID18 ****
LST_FILE-FKIMG
LST_FILE-VRKME
LST_FILE-NETPR
LST_FILE-WAERK_O
LST_FILE-NETWR
LST_FILE-WAERS_O
LST_FILE-AUBEL
LST_FILE-AUPOS
LST_FILE-BSTKD
LST_FILE-Z_SO_REMARKS
LST_FILE-KDMAT
LST_FILE-POSNR
LST_FILE-WERKS
LST_FILE-VKBUR
LST_FILE-KUNAG
LST_FILE-FKART
LST_FILE-FKTYP
LST_FILE-VBTYP
LST_FILE-RFBSK
LST_FILE-VKGRP
LST_FILE-VKORG
LST_FILE-VTWEG
LST_FILE-ERDAT
LST_FILE-ERNAM
LST_FILE-VGBEL
LST_FILE-VGPOS
LST_FILE-VGTYP
LST_FILE-AUART
**** START ADD 2014/12/25 ISID11 ****
LST_FILE-Z_INPUT_USERID
**** END ADD 2014/12/25 ISID11 ****
**** START ADD 2015/02/26 ISID18 ****
LST_FILE-Z_ENAME
**** END ADD 2015/02/26 ISID18 ****
LST_FILE-Z_OUTPUT_USERID
LST_FILE-XDEZP
LST_FILE-DATFM
LST_FILE-Z_REPORT_FORMAT
**** START ADD 2014/12/25 ISID11 ****
LST_FILE-Z_REPORT_LANG
LST_FILE-Z_REPORT_TITLE.
**** END ADD 2014/12/25 ISID11 ****
APPEND LST_FILE TO LTD_FILE.
APPEND LINES OF I_TD_FILE TO LTD_FILE.

LW_FNAME = I_FNAME.
CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
FILENAME                = LW_FNAME
FILETYPE                = 'ASC'
WRITE_FIELD_SEPARATOR   = ABAP_TRUE
CODEPAGE                = LW_CODEPAGE
TABLES
DATA_TAB                = LTD_FILE
EXCEPTIONS
FILE_WRITE_ERROR        = 1
NO_BATCH                = 2
GUI_REFUSE_FILETRANSFER = 3
INVALID_TYPE            = 4
NO_AUTHORITY            = 5
UNKNOWN_ERROR           = 6
HEADER_NOT_ALLOWED      = 7
SEPARATOR_NOT_ALLOWED   = 8
FILESIZE_NOT_ALLOWED    = 9
HEADER_TOO_LONG         = 10
DP_ERROR_CREATE         = 11
DP_ERROR_SEND           = 12
DP_ERROR_WRITE          = 13
UNKNOWN_DP_ERROR        = 14
ACCESS_DENIED           = 15
DP_OUT_OF_MEMORY        = 16
DISK_FULL               = 17
DP_TIMEOUT              = 18
FILE_NOT_FOUND          = 19
DATAPROVIDER_EXCEPTION  = 20
CONTROL_FLUSH_ERROR     = 21
OTHERS                  = 22.
IF SY-SUBRC <> 0.
LW_ERRFLG = 'X'.
*     ダウンロードできませんでした
MESSAGE S036(ZMEGSD01) DISPLAY LIKE 'E'.
ENDIF.
ENDIF.

IF LW_ERRFLG IS INITIAL.
*   ダウンロードに成功しました
MESSAGE S037(ZMEGSD01).
ENDIF.

ENDFORM.                    " OUTPUT_FILE
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_RESULT
*&---------------------------------------------------------------------*
*       結果画面出力
*----------------------------------------------------------------------*
*      -->I_TD_MESSAGE
*      -->I_FNAME
*      -->I_COUNT
*      -->I_NORMAL
*      -->I_ERROR
*----------------------------------------------------------------------*
FORM OUTPUT_RESULT  USING  I_TD_MESSAGE TYPE TYP_TD_MESSAGE
I_FNAME      TYPE ANY
I_COUNT      TYPE ANY
I_NORMAL     TYPE ANY
I_ERROR      TYPE ANY.

DATA: LST_MESSAGE TYPE TYP_MESSAGE,
LW_MODE     TYPE CHAR10,
LST_WERKS   LIKE LINE OF S_WERKS,
LST_VKBUR   LIKE LINE OF S_VKBUR,
LW_WINFO    TYPE STRING,
LW_VINFO    TYPE STRING,
LW_SIGN     TYPE STRING,
LW_OPTION   TYPE STRING,
LW_LOW      TYPE STRING,
LW_HIGH     TYPE STRING,
LW_NO       TYPE I.

IF RB_PRINT = 'X'.
LW_MODE = TEXT-O18.  "Print
ELSEIF RB_REPNT = 'X'.
LW_MODE = TEXT-O19.  "Reprint
ELSE.
LW_MODE = TEXT-O20.  "Download
ENDIF.

* Plant: SI:X OP:XX LO:XX HI:XX
LOOP AT S_WERKS INTO LST_WERKS.
CLEAR: LW_SIGN,
LW_OPTION,
LW_LOW,
LW_HIGH.
LW_NO = LW_NO + 1.
CONCATENATE 'SI:'
LST_WERKS-SIGN
INTO LW_SIGN.
CONCATENATE 'OP:'
LST_WERKS-OPTION
INTO LW_OPTION.
CONCATENATE 'LO:'
LST_WERKS-LOW
INTO LW_LOW.
CONCATENATE 'HI:'
LST_WERKS-HIGH
INTO LW_HIGH.
IF LW_NO = 1.
CONCATENATE LW_SIGN
LW_OPTION
LW_LOW
LW_HIGH
INTO LW_WINFO
SEPARATED BY SPACE.
ELSEIF LW_NO > 1
AND LW_NO <= 5.
CONCATENATE LW_WINFO
'/'
LW_SIGN
LW_OPTION
LW_LOW
LW_HIGH
INTO LW_WINFO
SEPARATED BY SPACE.
ELSE.
CONCATENATE LW_WINFO
'/...'
INTO LW_WINFO
SEPARATED BY SPACE.
ENDIF.
ENDLOOP.
CLEAR LW_NO.

* Sales Office SI:X OP:XX LO:XX HI:XX
LOOP AT S_VKBUR INTO LST_VKBUR.
CLEAR: LW_SIGN,
LW_OPTION,
LW_LOW,
LW_HIGH.
LW_NO = LW_NO + 1.
CONCATENATE 'SI:'
LST_VKBUR-SIGN
INTO LW_SIGN.
CONCATENATE 'OP:'
LST_VKBUR-OPTION
INTO LW_OPTION.
CONCATENATE 'LO:'
LST_VKBUR-LOW
INTO LW_LOW.
CONCATENATE 'HI:'
LST_VKBUR-HIGH
INTO LW_HIGH.
IF LW_NO = 1.
CONCATENATE LW_SIGN
LW_OPTION
LW_LOW
LW_HIGH
INTO LW_VINFO
SEPARATED BY SPACE.
ELSEIF LW_NO > 1
AND LW_NO <= 5.
CONCATENATE LW_VINFO
'/'
LW_SIGN
LW_OPTION
LW_LOW
LW_HIGH
INTO LW_WINFO
SEPARATED BY SPACE.
ELSE.
CONCATENATE LW_VINFO
'/...'
INTO LW_VINFO
SEPARATED BY SPACE.
ENDIF.
ENDLOOP.

* 結果出力
SKIP 1.
WRITE: /2 TEXT-O07,  "<Parameters>
/4 TEXT-O08, 28 ':', 30 LW_MODE, "Mode
/4 TEXT-O09, 28 ':', 30 TEXT-O21, "Report Type
/4 TEXT-O10, 28 ':', 30 LW_WINFO, "Plant
/4 TEXT-O11, 28 ':', 30 LW_VINFO, "Sales Office
/4 TEXT-O12, 28 ':', 30 I_FNAME.
"File Name
SKIP 1.
WRITE: /2  TEXT-O13,  "<Result>
/4  TEXT-O14,  28 ':', 30 I_COUNT,
"Number of Transcations
/4  TEXT-O15,  28 ':', 30 I_NORMAL,
"Number of Normal
/4  TEXT-O16,  28 ':', 30 I_ERROR.
"Number of Errors
SKIP 1.
WRITE: /2  TEXT-O17.  "<Message>
LOOP AT I_TD_MESSAGE INTO LST_MESSAGE.
WRITE: /4  LST_MESSAGE-TYP,
30 LST_MESSAGE-MSGTYP,
50 LST_MESSAGE-MSG.
ENDLOOP.

ENDFORM.                    " OUTPUT_RESULT
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_HEAD
*&---------------------------------------------------------------------*
*       ヘッダ出力
*----------------------------------------------------------------------*
FORM OUTPUT_HEAD.

SET TITLEBAR 'GUI_TITLE_2000'.

WRITE: /2 TEXT-O01, 11 ':', 14 SY-MANDT, "CLIENT
130 TEXT-O04, 135 ':', 137 SY-DATLO,  "Date
/2 TEXT-O02, 11 ':', 14 SY-REPID,  "PROGRAM
130 TEXT-O05, 135 ':', 137 SY-TIMLO,  "Time
/2 TEXT-O03, 11 ':', 14 SY-UNAME,  "USER
56 TEXT-O06.  "Title

ENDFORM.                    " OUTPUT_HEAD
**** START ADD 2015/02/15 ISID18 ****
*&---------------------------------------------------------------------*
*&      Form  GET_DEFAULT_PRINTER
*&---------------------------------------------------------------------*
*       Default User
*----------------------------------------------------------------------*
FORM GET_DEFAULT_PRINTER .

DATA:
LST_USER_DEFAULTS  TYPE USDEFAULTS.

CALL FUNCTION 'SUSR_USER_READ'
EXPORTING
USER_NAME            = SY-UNAME
IMPORTING
USER_DEFAULTS        = LST_USER_DEFAULTS
EXCEPTIONS
USER_NAME_NOT_EXISTS = 1
INTERNAL_ERROR       = 2
OTHERS               = 3.

IF SY-SUBRC = 0.
CALL FUNCTION 'CONVERSION_EXIT_SPDEV_OUTPUT'
EXPORTING
INPUT  = LST_USER_DEFAULTS-SPLD
IMPORTING
OUTPUT = P_PTRAY.
ENDIF.

ENDFORM.                    " GET_DEFAULT_PRINTER
*&---------------------------------------------------------------------*
*&      Form  GET_ITEM_TEXT
*&---------------------------------------------------------------------*
*       品目テキスト取得
*----------------------------------------------------------------------*
*      -->I_ST_VBRP  販売データ
*      <--O_MAKTX    品目テキスト
*----------------------------------------------------------------------*
FORM GET_ITEM_TEXT
USING    I_ST_VBRP TYPE TYP_VBRP
CHANGING O_MAKTX   TYPE ZTEGSDT018-Z_MAKTX.

DATA:
LW_LANGU    TYPE SY-LANGU,
LW_NAME     TYPE THEAD-TDNAME,
LW_MSG(128) TYPE C,
LTH_LINES   TYPE TLINE,
LTD_LINES   TYPE STANDARD TABLE OF TLINE.

CLEAR O_MAKTX.
IF P_LANGU IS NOT INITIAL.
LW_LANGU = P_LANGU.
ELSE.
LW_LANGU = SY-LANGU.
ENDIF.
LW_NAME+0(18) = I_ST_VBRP-MATNR.
LW_NAME+18(4) = I_ST_VBRP-VKORG.
LW_NAME+22(2) = I_ST_VBRP-VTWEG.
CALL FUNCTION 'READ_TEXT'
EXPORTING
ID                      = '0001'
LANGUAGE                = LW_LANGU
NAME                    = LW_NAME
OBJECT                  = 'MVKE'
TABLES
LINES                   = LTD_LINES
EXCEPTIONS
ID                      = 1
LANGUAGE                = 2
NAME                    = 3
NOT_FOUND               = 4
OBJECT                  = 5
REFERENCE_CHECK         = 6
WRONG_ACCESS_TO_ARCHIVE = 7
OTHERS                  = 8.
CASE SY-SUBRC.
WHEN 0.
LOOP AT LTD_LINES INTO LTH_LINES.
CONCATENATE O_MAKTX
LTH_LINES-TDLINE
INTO O_MAKTX.
ENDLOOP.
WHEN 4.
WHEN OTHERS.
MESSAGE ID SY-MSGID
TYPE SY-MSGTY
NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LW_MSG.
*     汎用モジュールにて想定外のエラーが発生しました。
MESSAGE S032(ZMEGSD01)
WITH 'READ_TEXT' LW_MSG
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDCASE.
IF O_MAKTX IS INITIAL.
O_MAKTX = I_ST_VBRP-ARKTX.
ENDIF.

ENDFORM.                    " GET_ITEM_TEXT
*&---------------------------------------------------------------------*
*&      Form  FRM_SET_DEC6
*&---------------------------------------------------------------------*
*       小数点6桁対応
*----------------------------------------------------------------------*
*      -->I_ST_VBRP 正味価格
*      <--O_NETPR   単価
*----------------------------------------------------------------------*
FORM FRM_SET_DEC6
USING    I_ST_VBRP TYPE TYP_VBRP
CHANGING O_NETPR   TYPE STRING.

DATA:
LW_PRICE   TYPE CHAR30,
LW_PRICE_S TYPE STRING,
LW_NETPR   TYPE ZTEGSDT018-Z_NETPR,
LW_AMT     TYPE ZEZAMOUNT.

CLEAR LW_PRICE.
LW_PRICE = I_ST_VBRP-NETPR.
CALL FUNCTION 'CURRENCY_AMOUNT_SAP_TO_IDOC'
EXPORTING
CURRENCY    = I_ST_VBRP-WAERK
SAP_AMOUNT  = LW_PRICE
IMPORTING
IDOC_AMOUNT = LW_PRICE.

CLEAR LW_NETPR.
LW_PRICE_S = LW_PRICE.
IF I_ST_VBRP-KPEIN IS NOT INITIAL.
LW_NETPR = LW_PRICE_S / I_ST_VBRP-KPEIN.
ELSE.
LW_NETPR = LW_PRICE_S.
ENDIF.
CLEAR LW_AMT.
LW_AMT = LW_NETPR.
CALL FUNCTION 'ZEG_ZZ_RIGHTZERO_DETELE'
EXPORTING
IMPORIGINAL  = LW_AMT
IMPORTING
EXPOUTNOZERO = O_NETPR.
CONDENSE O_NETPR NO-GAPS.

ENDFORM.                    " FRM_SET_DEC6
**** END ADD 2015/02/15 ISID18 ****
**** START ADD 2015/02/25 ISID18 ****
*&---------------------------------------------------------------------*
*&      Form  GET_VBPA
*&---------------------------------------------------------------------*
*       営業員取得
*----------------------------------------------------------------------*
*      -->I_TD_VBPA_S  営業員
*      <--O_TD_VBPA    営業員
*----------------------------------------------------------------------*
FORM GET_VBPA
USING    I_TD_VBPA_S TYPE TYP_TD_VBPA
CHANGING O_TD_VBPA   TYPE TYP_TD_VBPA.

TYPES:BEGIN OF LTYP_VBPA,
VBELN TYPE VBPA-VBELN,
POSNR TYPE VBPA-POSNR,
PERNR TYPE VBPA-PERNR,
END OF LTYP_VBPA.
TYPES:BEGIN OF LTYP_PA0001,
PERNR TYPE PA0001-PERNR,
BEGDA TYPE PA0001-BEGDA,
ENAME TYPE PA0001-ENAME,
END OF LTYP_PA0001.
DATA: LTD_VBPA     TYPE STANDARD TABLE OF LTYP_VBPA,
LTD_VBPA2    TYPE STANDARD TABLE OF LTYP_VBPA,
LTD_VBPA_TMP TYPE STANDARD TABLE OF TYP_VBPA,
LTD_PA0001   TYPE STANDARD TABLE OF LTYP_PA0001,
LTH_VBPA     TYPE LTYP_VBPA,
LTH_PA0001   TYPE LTYP_PA0001,
LW_PARVW     TYPE VBPA-PARVW.
FIELD-SYMBOLS: <LFS_PA0001> TYPE LTYP_PA0001,
<LFS_VBPA_S> TYPE TYP_VBPA.

IF I_TD_VBPA_S[] IS INITIAL.
RETURN.
ENDIF.

* 取引先機能変換
CLEAR LW_PARVW.
CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
EXPORTING
INPUT  = 'PE'
IMPORTING
OUTPUT = LW_PARVW.

* 営業員取得
SELECT VBELN
POSNR
PERNR
INTO TABLE LTD_VBPA
FROM VBPA
FOR ALL ENTRIES IN I_TD_VBPA_S
WHERE VBELN = I_TD_VBPA_S-VBELN
AND POSNR = I_TD_VBPA_S-POSNR
AND PARVW = LW_PARVW.

LTD_VBPA_TMP[] = I_TD_VBPA_S[].
SORT LTD_VBPA_TMP BY VBELN.
DELETE ADJACENT DUPLICATES FROM LTD_VBPA_TMP
COMPARING VBELN.

* 営業員取得
SELECT VBELN
POSNR
PERNR
APPENDING TABLE LTD_VBPA
FROM VBPA
FOR ALL ENTRIES IN LTD_VBPA_TMP
WHERE VBELN = LTD_VBPA_TMP-VBELN
AND PARVW = LW_PARVW.

LTD_VBPA2[] = LTD_VBPA[].
SORT LTD_VBPA2 BY PERNR.
DELETE ADJACENT DUPLICATES FROM LTD_VBPA2
COMPARING PERNR.

* 営業員名取得
IF LTD_VBPA2[] IS NOT INITIAL.
SELECT PERNR
BEGDA
ENAME
INTO TABLE LTD_PA0001
FROM PA0001
FOR ALL ENTRIES IN LTD_VBPA2
WHERE PERNR = LTD_VBPA2-PERNR.
ENDIF.
SORT LTD_PA0001 BY PERNR ASCENDING
BEGDA DESCENDING.
LOOP AT LTD_PA0001 ASSIGNING <LFS_PA0001>.
AT NEW PERNR.
DELETE LTD_PA0001
WHERE PERNR  = <LFS_PA0001>-PERNR
AND BEGDA <> <LFS_PA0001>-BEGDA.
ENDAT.
ENDLOOP.

SORT LTD_VBPA BY VBELN POSNR.
LOOP AT I_TD_VBPA_S ASSIGNING <LFS_VBPA_S>.
CLEAR LTH_VBPA.
READ TABLE LTD_VBPA INTO LTH_VBPA
WITH KEY VBELN = <LFS_VBPA_S>-VBELN
POSNR = <LFS_VBPA_S>-POSNR
BINARY SEARCH.
IF SY-SUBRC <> 0.
READ TABLE LTD_VBPA INTO LTH_VBPA
WITH KEY VBELN = <LFS_VBPA_S>-VBELN
BINARY SEARCH.
ENDIF.
CLEAR LTH_PA0001.
READ TABLE LTD_PA0001 INTO LTH_PA0001
WITH KEY PERNR = LTH_VBPA-PERNR
BINARY SEARCH.
<LFS_VBPA_S>-ENAME = LTH_PA0001-ENAME.
ENDLOOP.
O_TD_VBPA[] = I_TD_VBPA_S[].

ENDFORM.                    " GET_VBPA
**** END ADD 2015/02/25 ISID18 ****
**** START ADD 2015/02/26 ISID18 ****
*&---------------------------------------------------------------------*
*&      Form  GET_USR21
*&---------------------------------------------------------------------*
*       データ入力ユーザ
*----------------------------------------------------------------------*
*      -->I_TD_USR21_S  データ入力ユーザ
*      <--O_TD_USR21    データ入力ユーザ
*----------------------------------------------------------------------*
FORM GET_USR21
USING    I_TD_USR21_S TYPE TYP_TD_USR21
CHANGING O_TD_USR21   TYPE TYP_TD_USR21.

IF I_TD_USR21_S[] IS INITIAL.
RETURN.
ENDIF.

* UserName
SELECT
USR21~BNAME
ADRP~NAME_TEXT
INTO TABLE O_TD_USR21
FROM USR21 AS USR21
INNER JOIN ADRP AS ADRP
ON USR21~PERSNUMBER = ADRP~PERSNUMBER
FOR ALL ENTRIES IN I_TD_USR21_S
WHERE USR21~BNAME = I_TD_USR21_S-BNAME.

SORT O_TD_USR21 BY BNAME ASCENDING.

ENDFORM.                    " GET_USR21
**** END ADD 2015/02/26 ISID18 ****
