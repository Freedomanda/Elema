*&---------------------------------------------------------------------*
*& Report  ZYQHTEST
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  ZYQHTEST.

*TYPE-POOLS: SLIS.
*
*DATA: LW_OUTPUT_FN    TYPE ZEOUTPUTFN,
*      O_OUTPUT_CP_INV TYPE ZEOUTPUTCP,
*      LW_PATH(250)    TYPE c.
*
**data: BEGIN OF LIT_OUTTAB OCCURS 0.
**        INCLUDE STRUCTURE MSEG,
**      END OF LIT_OUTTAB.
*
*
*SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-P01.
*SELECTION-SCREEN BEGIN OF LINE.
**    SELECTION-SCREEN COMMENT 1(30) TEXT-P07.
*PARAMETERS RB_PRINT RADIOBUTTON GROUP RB1 DEFAULT 'X'.  "Print
*SELECTION-SCREEN COMMENT 33(18) TEXT-P08 FOR FIELD RB_PRINT.
*PARAMETERS RB_REPNT RADIOBUTTON GROUP RB1.  "Reprint
*SELECTION-SCREEN COMMENT 53(18) TEXT-P09 FOR FIELD RB_REPNT.
*PARAMETERS RB_DOWN  RADIOBUTTON GROUP RB1.  "Download
*SELECTION-SCREEN COMMENT 73(18) TEXT-P10 FOR FIELD RB_DOWN.
*SELECTION-SCREEN END OF LINE.
*
*SELECTION-SCREEN BEGIN OF LINE.
*SELECTION-SCREEN COMMENT 1(30) TEXT-P07.
*PARAMETERS CB_INV AS CHECKBOX DEFAULT 'X'.  "Invoice
*SELECTION-SCREEN COMMENT 33(18) TEXT-P11 FOR FIELD CB_INV.
*PARAMETERS CB_PKG AS CHECKBOX DEFAULT 'X'.  "Packing List
*SELECTION-SCREEN COMMENT 53(18) TEXT-P12 FOR FIELD CB_PKG.
*SELECTION-SCREEN END OF LINE.
*SELECTION-SCREEN END OF BLOCK B1.
*
*START-OF-SELECTION.
*
**  GET PARAMETER ID 'ZSVF' FIELD LW_PATH.
**
**  SELECT Z_OUTPUT_FN
**         Z_OUTPUT_CP
**   UP TO 1 ROWS
**    INTO (LW_OUTPUT_FN,O_OUTPUT_CP_INV)
**    FROM ZTEGZZM001
**   WHERE PROGNAME       = 'ZEGSDR1030'
**     AND BUKRS          = 'C001'
**     AND Z_CONV_SUBKEY1 = 'Invoice'.
**  ENDSELECT.
**
**  WRITE: LW_OUTPUT_FN.
**
**  WRITE: 'ok'.
*
**  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
**   EXPORTING
**     I_INTERFACE_CHECK                 = ' '
**     I_BYPASSING_BUFFER                =
**     I_BUFFER_ACTIVE                   =
**     I_CALLBACK_PROGRAM                = ' '
**     I_CALLBACK_PF_STATUS_SET          = ' '
**     I_CALLBACK_USER_COMMAND           = ' '
**     I_CALLBACK_TOP_OF_PAGE            = ' '
**     I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
**     I_CALLBACK_HTML_END_OF_LIST       = ' '
**     I_STRUCTURE_NAME                  =
**     I_BACKGROUND_ID                   = ' '
**     I_GRID_TITLE                      =
**     I_GRID_SETTINGS                   =
**     IS_LAYOUT_LVC                     =
**     IT_FIELDCAT_LVC                   =
**     IT_EXCLUDING                      =
**     IT_SPECIAL_GROUPS_LVC             =
**     IT_SORT_LVC                       =
**     IT_FILTER_LVC                     =
**     IT_HYPERLINK                      =
**     IS_SEL_HIDE                       =
**     I_DEFAULT                         = 'X'
**     I_SAVE                            = ' '
**     IS_VARIANT                        =
**     IT_EVENTS                         =
**     IT_EVENT_EXIT                     =
**     IS_PRINT_LVC                      =
**     IS_REPREP_ID_LVC                  =
**     I_SCREEN_START_COLUMN             = 0
**     I_SCREEN_START_LINE               = 0
**     I_SCREEN_END_COLUMN               = 0
**     I_SCREEN_END_LINE                 = 0
**     I_HTML_HEIGHT_TOP                 =
**     I_HTML_HEIGHT_END                 =
**     IT_ALV_GRAPHICS                   =
**     IT_EXCEPT_QINFO_LVC               =
**     IR_SALV_FULLSCREEN_ADAPTER        =
**   IMPORTING
**     E_EXIT_CAUSED_BY_CALLER           =
**     ES_EXIT_CAUSED_BY_USER            =
**    TABLES
**      T_OUTTAB                          =
**   EXCEPTIONS
**     PROGRAM_ERROR                     = 1
**     OTHERS                            = 2
*            .
*  IF SY-SUBRC <> 0.
** Implement suitable error handling here
*  ENDIF.
*
*TYPE-POOLS: SLIS. "ALV Declarations
**----------------------------------------------------------------------

**INTERNAL TABLE DECLARATION.
**----------------------------------------------------------------------

*DATA: BEGIN OF ITAB_ALV1 OCCURS 0,
*        EMP_ID(5) TYPE N,
*        EMP_NAME(20) TYPE C,
*        CERTIFIED(3) TYPE C,
*        CELCOL TYPE SLIS_T_SPECIALCOL_ALV,
*        SELECTED(1) TYPE C,
*      END OF ITAB_ALV1.
*DATA: WA LIKE LINE OF ITAB_ALV1.
*DATA: SYPRINDEX TYPE I.
**----------------------------------------------------------------------

**ALV-GRID DATA DECLARATION.
**----------------------------------------------------------------------

*DATA: FIELDCATALOG TYPE SLIS_T_FIELDCAT_ALV.
*DATA: FIELDCATALOG1 TYPE SLIS_FIELDCAT_ALV.
*DATA: LS_SORT TYPE SLIS_SORTINFO_ALV.
*DATA: LT_SORT TYPE SLIS_T_SORTINFO_ALV.
*DATA: CELCOL1 TYPE SLIS_SPECIALCOL_ALV.
*DATA: I_EXCLUDE TYPE SLIS_T_EXTAB.
*DATA: GD_LAYOUT TYPE SLIS_LAYOUT_ALV.
*DATA: NEWVAR TYPE DISVARIANT.
*DATA: VARTYPE LIKE DISVARIANT.
*DATA: VAR_SAVE(1) TYPE C.
*DATA: W_EXIT(1) TYPE C.
*DATA: WX_VARIANT LIKE DISVARIANT.
*DATA: VARIANT_PARA LIKE DISVARIANT-VARIANT.
*DATA WA_EXCLUDE TYPE SLIS_EXTAB.
*PARAMETER: LAYOUT LIKE DISVARIANT-VARIANT.
**----------------------------------------------------------------------

**AT SELECTION SCREEN
**----------------------------------------------------------------------
*AT SELECTION-SCREEN OUTPUT.
*  PERFORM INIT_VARIANT.
**  PERFORM VARIANT_DEFAULT USING LAYOUT.
*
*AT SELECTION-SCREEN ON VALUE-REQUEST FOR LAYOUT.
*  PERFORM VARIANT_SELECT USING LAYOUT.
*
*AT SELECTION-SCREEN.
**  PERFORM VARIANT_FILL.
*  NEWVAR = VARTYPE.
*
*START-OF-SELECTION.
*  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
*    EXPORTING
*      I_PROGRAM_NAME     = SY-REPID
*      I_INTERNAL_TABNAME = 'ITAB_ALV1'
*      I_INCLNAME         = SY-REPID
*    CHANGING
*      CT_FIELDCAT        = FIELDCATALOG.
*
*  LOOP AT FIELDCATALOG INTO FIELDCATALOG1.
*    CASE FIELDCATALOG1-FIELDNAME.
*      WHEN 'EMP_ID'.
*        "##的内表字段名
*        FIELDCATALOG1-COL_POS = 0.
*        "#出列文本 （_s：短文本 _l：#文本）
*        FIELDCATALOG1-FIELDNAME = 'EMP_ID'.
*        FIELDCATALOG1-SELTEXT_S = 'EMP-ID短文本'.
*        FIELDCATALOG1-SELTEXT_M = 'EMP-ID中文本'.
*        FIELDCATALOG1-SELTEXT_L = 'EMP-ID#文本'.
*        FIELDCATALOG1-OUTPUTLEN = 10.
*        "#有#色的高亮列 （其中X=（1-7） #色同format）
*        FIELDCATALOG1-EMPHASIZE = 'C2'.
*        "##字段
*        FIELDCATALOG1-KEY = 'X'.
*        "##列##和
**        FIELDCATALOG1-DO_SUM = 'X'.
*        "定#数据#型
*        FIELDCATALOG1-INTTYPE = 'I'.
*
*        MODIFY FIELDCATALOG FROM FIELDCATALOG1.
*      WHEN 'EMP_NAME'.
*        FIELDCATALOG1-COL_POS = 1.
*        FIELDCATALOG1-FIELDNAME = 'EMP_NAME'.
*        FIELDCATALOG1-SELTEXT_M = 'EMPLOYEE_NAME'.
*        "作##点#示 可触#鼠#触#事件
**        FIELDCATALOG1-HOTSPOT = 'X'.
*        "列的字符#度#n
*        FIELDCATALOG1-OUTPUTLEN = 20.
*        MODIFY FIELDCATALOG FROM FIELDCATALOG1.
*      WHEN 'CERTIFIED'.
*        FIELDCATALOG1-COL_POS = 2.
*        FIELDCATALOG1-FIELDNAME = 'CERTIFIED'.
*        FIELDCATALOG1-SELTEXT_M = 'CERTIFIED'.
*        MODIFY FIELDCATALOG FROM FIELDCATALOG1.
*      WHEN OTHERS.
*        DELETE FIELDCATALOG INDEX SY-TABIX.
*    ENDCASE.
*
*  ENDLOOP.
**----------------------------------------------------------------------

**POPULATING THE INTERNAL TABLE.
**----------------------------------------------------------------------
*  ITAB_ALV1-EMP_ID = 1.
*  ITAB_ALV1-EMP_NAME = 'THILAKJI'.
*  ITAB_ALV1-CERTIFIED = 'YES'.
*  APPEND ITAB_ALV1.
*
*  ITAB_ALV1-EMP_ID = 2.
*  ITAB_ALV1-EMP_NAME = 'MATHEWS'.
*  ITAB_ALV1-CERTIFIED = 'NO'.
*  APPEND ITAB_ALV1.
*
*  ITAB_ALV1-EMP_ID = 3.
*  ITAB_ALV1-EMP_NAME = 'JAISI'.
*  ITAB_ALV1-CERTIFIED = 'YES'.
*  APPEND ITAB_ALV1.
*
*  ITAB_ALV1-EMP_ID = 4.
*  ITAB_ALV1-EMP_NAME = 'ADAMS'.
*  ITAB_ALV1-CERTIFIED = 'YES'.
*  APPEND ITAB_ALV1.
*
*  ITAB_ALV1-EMP_ID = 5.
*  ITAB_ALV1-EMP_NAME = 'PAUL'.
*  ITAB_ALV1-CERTIFIED = 'NO'.
*  APPEND ITAB_ALV1.
*
**----------------------------------------------------------------------
**SORTING FIELD CATALOG FIELD.
**----------------------------------------------------------------------
**  LS_SORT-SPOS = 0.
**  LS_SORT-FIELDNAME = 'EMP_ID'.
**  LS_SORT-UP = 'X'.
**  LS_SORT-SUBTOT = 'X'.
**  APPEND LS_SORT TO LT_SORT.
*
*  LOOP AT ITAB_ALV1 INTO WA.
*    IF SY-TABIX = 1.
*      CLEAR ITAB_ALV1.
*      MOVE-CORRESPONDING WA TO ITAB_ALV1.
*
*      CELCOL1-FIELDNAME = 'EMP_NAME'.
*      CELCOL1-COLOR-COL = 1 + 2.
*      APPEND CELCOL1 TO ITAB_ALV1-CELCOL.
*
*      MODIFY ITAB_ALV1.
*    ENDIF.
*  ENDLOOP.
**----------------------------------------------------------------------
**EXCLUDE-DECLARATION.
**----------------------------------------------------------------------
**  CLEAR WA_EXCLUDE.
**  WA_EXCLUDE-FCODE = '&VEXCEL'.
**  APPEND WA_EXCLUDE TO I_EXCLUDE.
**----------------------------------------------------------------------
** LAYOUT DECLARATION.
**----------------------------------------------------------------------
*  GD_LAYOUT-ZEBRA = 'X'.
*  GD_LAYOUT-NO_INPUT = 'X'.
*  GD_LAYOUT-COLWIDTH_OPTIMIZE = 'X'.
**  GD_LAYOUT-BOX_FIELDNAME = 'SELECTED'.
**  GD_LAYOUT-BOX_TABNAME = 'ITAB_ALV1'.
*  GD_LAYOUT-TOTALS_TEXT = 'Totals'(201).
*  GD_LAYOUT-COLTAB_FIELDNAME = 'CELCOL'.
*  GD_LAYOUT-F2CODE = 'DISP'. "Sets fcode for when double
**----------------------------------------------------------------------
** FUNCTION MODULE CALL-REUSE-ALV-GRID-DISPLAY.
**----------------------------------------------------------------------
*  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
*    EXPORTING
*      I_CALLBACK_PROGRAM       = SY-REPID
*      I_CALLBACK_TOP_OF_PAGE   = 'TOP-OF-PAGE2' "see FORM
*      I_CALLBACK_USER_COMMAND  = 'USER_COMMAND'
**      I_GRID_TITLE             = 'ALV GRID-EMPLOYEE'
*      IS_LAYOUT                = GD_LAYOUT
*      IT_FIELDCAT              = FIELDCATALOG[]
*      IT_SORT                  = LT_SORT
*      IT_EXCLUDING             = I_EXCLUDE
*      I_CALLBACK_PF_STATUS_SET = 'SET_PF_STATUS' "see FORM
**      I_SAVE                   = 'A'
*      IS_VARIANT               = NEWVAR
*    TABLES
*      T_OUTTAB                 = ITAB_ALV1
*    EXCEPTIONS
*      PROGRAM_ERROR            = 1
*      OTHERS                   = 2.
**-------------------------------------------------------------------*
** Form TOP-OF-PAGE *
**-------------------------------------------------------------------*
** ALV Report Header *
**-------------------------------------------------------------------*
*FORM TOP-OF-PAGE2.
*  DATA: HEADER TYPE SLIS_T_LISTHEADER,
*        WA TYPE SLIS_LISTHEADER,
*        INFIELD LIKE WA-INFO,
*        NLINE TYPE I,
*        NLINECHAR(2) TYPE C.
*
**TITLE AREA
*  WA-TYP = 'H'.
*  WA-KEY = 'HEADER'.
*  WA-INFO = 'EMPLOYEE-DETAILS'.
*  APPEND WA TO HEADER.
*
**BELOW AREA.
*  WA-TYP = 'S'.
*  WA-KEY = 'DATE'.
*  CONCATENATE SY-DATUM+6(2) '.'
*              SY-DATUM+4(2) '.'
*              SY-DATUM(4) INTO WA-INFO.
*  APPEND WA TO HEADER.
*
**NEXT LINE.
*  WA-TYP = 'S'.
*  DESCRIBE TABLE ITAB_ALV1 LINES NLINE.
*  NLINECHAR = NLINE.
*  WA-KEY = 'TABLE DETAILS'.
*  CONCATENATE 'NO.of.Lines:' NLINECHAR INTO WA-INFO SEPARATED BY SPACE.
*  APPEND WA TO HEADER.
*
*  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
*    EXPORTING
*      IT_LIST_COMMENTARY = HEADER.
**      I_LOGO             = 'ENJOYSAP_LOGO'.
*ENDFORM.                    "top-of-page2
**------------------------------------------------------------------*
** FORM USER_COMMAND *
**------------------------------------------------------------------*
** --> R_UCOMM *
** --> RS_SELFIELD *
**------------------------------------------------------------------*
*FORM USER_COMMAND USING R_UCOMM LIKE SY-UCOMM
*                        RS_SELFIELD TYPE SLIS_SELFIELD.
** Check function code
*  CASE R_UCOMM.
*    WHEN 'TEST'.
*      MESSAGE E001(00) WITH 'HELLO'.
*    WHEN 'DISP'.
** Check field clicked on within ALVgrid report
*      IF RS_SELFIELD-FIELDNAME = 'EMP_ID'.
** Read data table, using index of row user clicked on
*        READ TABLE ITAB_ALV1 INTO WA INDEX RS_SELFIELD-TABINDEX.
*        MESSAGE E001(00) WITH WA-EMP_ID.
*      ELSEIF RS_SELFIELD-FIELDNAME = 'EMP_NAME'.
*        READ TABLE ITAB_ALV1 INTO WA INDEX RS_SELFIELD-TABINDEX.
*        MESSAGE E001(00) WITH WA-EMP_NAME.
*      ENDIF.
*  ENDCASE.
*  CLEAR R_UCOMM.
*ENDFORM.                    "user_command
**----------------------------------------------------------------------
**FORM FOR SELECTING LAYOUT.
**----------------------------------------------------------------------
*FORM VARIANT_SELECT USING FORM_VARPAR.
*  CALL FUNCTION 'LVC_VARIANT_F4'
*  EXPORTING
*    IS_VARIANT = VARTYPE
**   IT_DEFAULT_FIELDCAT =
*    I_SAVE = VAR_SAVE
*  IMPORTING
*    E_EXIT = W_EXIT
*    ES_VARIANT = WX_VARIANT
*  EXCEPTIONS
*     NOT_FOUND = 1
*     PROGRAM_ERROR = 2
*     OTHERS = 3.
*
*  IF W_EXIT IS INITIAL.
*    VARTYPE-VARIANT = WX_VARIANT-VARIANT.
*    FORM_VARPAR = WX_VARIANT-VARIANT.
*  ENDIF.
*ENDFORM.                    "variant_select
**&---------------------------------------------------------------------
*
**& Form init_variant
**&---------------------------------------------------------------------
*
*FORM INIT_VARIANT.
*  CLEAR: VARTYPE.
*  VARTYPE-REPORT = SY-REPID.
*  VARTYPE-USERNAME = SY-UNAME.
*  VAR_SAVE = 'A'. "All types
*ENDFORM.                    "init_variant
**&---------------------------------------------------------------------
*
**& Form variant_default
**&---------------------------------------------------------------------
*
*FORM VARIANT_DEFAULT USING P_VARIANT.
*  WX_VARIANT = VARTYPE.
*  IF NOT P_VARIANT IS INITIAL.
*    WX_VARIANT-VARIANT = P_VARIANT.
*  ENDIF.
*  CALL FUNCTION 'LVC_VARIANT_DEFAULT_GET'
*    EXPORTING
*      I_SAVE        = VAR_SAVE
*    CHANGING
*      CS_VARIANT    = WX_VARIANT
*    EXCEPTIONS
*      WRONG_INPUT   = 1
*      NOT_FOUND     = 2
*      PROGRAM_ERROR = 3
*      OTHERS        = 4.
*  CASE SY-SUBRC.
*    WHEN 0.
*      P_VARIANT = WX_VARIANT-VARIANT.
*    WHEN 2.
*      CLEAR: P_VARIANT.
*  ENDCASE.
*ENDFORM.                    "variant_default
**&---------------------------------------------------------------------
*
**& Form variant_fill
**&---------------------------------------------------------------------
*
*FORM VARIANT_FILL.
*  CLEAR: VARTYPE.
*  IF LAYOUT IS INITIAL.
*    VARTYPE-VARIANT = 'STANDARD'.
*    VARTYPE-REPORT = SY-REPID.
*  ELSE.
*    VARTYPE-VARIANT = LAYOUT.
*    VARTYPE-REPORT = SY-REPID.
*    CALL FUNCTION 'LVC_VARIANT_EXISTENCE_CHECK'
*      EXPORTING
*        I_SAVE     = VAR_SAVE
*      CHANGING
*        CS_VARIANT = VARTYPE
*      EXCEPTIONS
*        OTHERS     = 01.
*    IF SY-SUBRC NE 0.
*      MESSAGE I000(ZZ) WITH TEXT-G02.
*    ENDIF.
*  ENDIF.
*ENDFORM.                    "variant_fill
**------------------------------------------------------------------*
** FORM SET_PF_STATUS *
**------------------------------------------------------------------*
*FORM SET_PF_STATUS USING RT_EXTAB TYPE SLIS_T_EXTAB.
*  SET PF-STATUS 'ZZSTANDARD01' EXCLUDING '&VEXCEL'.
*ENDFORM.                    "set_pf_status


*TYPES:
*  BEGIN OF TYP_VALUE,
*    TITLE TYPE CHAR40,
*    WAERS TYPE BSID-WAERS,
*    DMBTR TYPE BSID-DMBTR,
*  END OF TYP_VALUE.
*
*CONSTANTS:
*  CNS_H      TYPE CHAR1         VALUE 'H',
*  CNS_S      TYPE CHAR1         VALUE 'S',
*  CNS_STATUS TYPE SLIS_FORMNAME VALUE 'SET_PF_STATUS_ALV',
*  CNS_TOPPG  TYPE SLIS_FORMNAME VALUE 'SET_TOP_OF_PAGE_ALV'.
*
*DATA:
*  GT_VALUE      TYPE TABLE OF TYP_VALUE,
*  GS_VALUE      TYPE TYP_VALUE,
*  GT_TOTAL      TYPE TABLE OF TYP_VALUE,
*  GS_TOTAL      TYPE TYP_VALUE,
*  GW_DMBTR(16)  TYPE P DECIMALS 3,
*  GT_EVENT      TYPE  SLIS_T_EVENT ,
*  GS_EVENT      LIKE LINE OF GT_EVENT,
*  GT_FIELDCAT   TYPE SLIS_T_FIELDCAT_ALV ,"ALV項目部テーブル
*  GS_FIELDCAT   LIKE LINE OF GT_FIELDCAT, "ALV項目部テーブルヘッダ
*  GT_TITLE      TYPE SLIS_T_LISTHEADER,   "ALVヘッダー内部テーブル
*  GS_TITLE      LIKE LINE OF GT_TITLE.    "ALVヘッダ内部テーブルヘッダ
*
*DATA:
*  LAYOUT       TYPE SLIS_LAYOUT_ALV ,
*  I_GRID_TITLE TYPE LVC_TITLE,
*  TEM_GRID     TYPE REF TO CL_GUI_ALV_GRID.
*
**----------------------------------------------------------------------
*
**       CLASS LCL_EVENT_RECEIVER DEFINITION
**----------------------------------------------------------------------
*
**
**----------------------------------------------------------------------
*
*CLASS LCL_EVENT_RECEIVER DEFINITION.
*  PUBLIC SECTION.
*    METHODS:
*      HANDLE_MODIFY
*        FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
*        IMPORTING E_MODIFIED ET_GOOD_CELLS.
*ENDCLASS.                    "LCL_EVENT_RECEIVER DEFINITION
*
**----------------------------------------------------------------------
*
**       CLASS LCL_EVENT_RECEIVER IMPLEMENTATION
**----------------------------------------------------------------------
*
**
**----------------------------------------------------------------------
*
*CLASS LCL_EVENT_RECEIVER IMPLEMENTATION.
*
*  METHOD  HANDLE_MODIFY.
*    DATA        STBL      TYPE LVC_S_STBL.
**   #定刷新
*    STBL-ROW = 'X'." 基于行的#定刷新
*    STBL-COL = 'X'." 基于列#定刷新
*    CALL METHOD TEM_GRID->REFRESH_TABLE_DISPLAY
*      EXPORTING
*        IS_STABLE = STBL.
*  ENDMETHOD.                    "HANDLE_MODIFY
*
*ENDCLASS.                    "LCL_EVENT_RECEIVER IMPLEMENTATION
*
*
*START-OF-SELECTION.
*
*  PERFORM FRM_SET_VALUE.
*
*  PERFORM SET_OUTPUT_FIELDCAT USING:
*    'TITLE'      TEXT-L14 SPACE 'L'  SPACE   SPACE SPACE SPACE,
*    'WAERS'      TEXT-L01 SPACE 'L'  SPACE   SPACE SPACE SPACE,
*    'DMBTR'      TEXT-L02 SPACE 'L'  'WAERS' SPACE 'X'  'X'.
*
*  PERFORM SET_LAYOUT.
*
*  PERFORM FRM_SET_EVENT.
*
*  PERFORM SET_TOP_OF_PAGE_ALV.
*
** ALV GridControl 全画面
*  PERFORM DISPLAY_ALV.
*
**&---------------------------------------------------------------------
*
**&      Form  SET_OUTPUT_FIELDCAT
**&---------------------------------------------------------------------
*
**       輸出固定列の定義
**----------------------------------------------------------------------
*
**      -->PU_FIELDNAME  フィールドネーム
**      -->PU_SELTEXT_L  フィールドテキスト
**      -->PU_NO_OUT     アウトプット
**      -->PU_JUST       左詰
**      -->PU_CUR        通貨コード
**      -->PU_DECIMALS   小数点以下のN桁
**      -->PU_EDIT       編集
**      -->PU_DOSUM      集計
**----------------------------------------------------------------------
*
*FORM SET_OUTPUT_FIELDCAT  USING    PU_FIELDNAME  TYPE CHAR30
*                                   PU_SELTEXT_L  TYPE CHAR100
*                                   PU_NO_OUT     TYPE CHAR1
*                                   PU_JUST       TYPE CHAR1
*                                   PU_CUR        TYPE CHAR30
*                                   PU_DECIMALS
*                                   PU_EDIT
*                                   PU_DOSUM.
*
*  IF PU_CUR <> SPACE.
*    GS_FIELDCAT-CFIELDNAME = PU_CUR.
*  ENDIF.
*  IF PU_DECIMALS <> 0.
*    GS_FIELDCAT-DECIMALS_OUT = PU_DECIMALS.
*  ENDIF.
*  GS_FIELDCAT-FIELDNAME = PU_FIELDNAME.
*  GS_FIELDCAT-SELTEXT_L = PU_SELTEXT_L.
*  GS_FIELDCAT-NO_OUT    = PU_NO_OUT.
*  GS_FIELDCAT-JUST      = PU_JUST.
*  GS_FIELDCAT-EDIT = PU_EDIT.
*  GS_FIELDCAT-DO_SUM = PU_DOSUM.
*  APPEND GS_FIELDCAT TO GT_FIELDCAT.
*  CLEAR GS_FIELDCAT.
*
*ENDFORM.                    " SET_OUTPUT_FIELDCAT
*
**&---------------------------------------------------------------------
*
**&      Form  DISPLAY_ALV
**&---------------------------------------------------------------------
*
**       text
**----------------------------------------------------------------------
*
*FORM DISPLAY_ALV .
*  DATA: LW_CPROG TYPE SY-CPROG.                     "呼出プログラム
*  LW_CPROG = SY-CPROG.
*
** ALV GridControl 全画面
*  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
*    EXPORTING
*      I_CALLBACK_PROGRAM       = LW_CPROG          "プログラム
*      IT_FIELDCAT              = GT_FIELDCAT       "項目属性
*      I_SAVE                   = 'A'               "自動保存
*      I_CALLBACK_PF_STATUS_SET = CNS_STATUS        "GUIステータス
*      I_CALLBACK_TOP_OF_PAGE   = CNS_TOPPG         "トップページ
*      IT_EVENTS                = GT_EVENT
*      IS_LAYOUT                = LAYOUT
*      I_GRID_TITLE             = I_GRID_TITLE     "タイトル
*    TABLES
*      T_OUTTAB                 = GT_VALUE         "出力テーブル
*    EXCEPTIONS
*      PROGRAM_ERROR            = 1
*      OTHERS                   = 2.
*  IF SY-SUBRC <> 0.
*    MESSAGE ID SY-MSGID
*          TYPE SY-MSGTY NUMBER SY-MSGNO
*          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*
*ENDFORM.                    " DISPLAY_ALV
*
**&---------------------------------------------------------------------
*
**&      Form SET_PF_STATUS_ALV
**&---------------------------------------------------------------------
*
**       ALV GUI ステータスの設定
**----------------------------------------------------------------------
*
*FORM SET_PF_STATUS_ALV USING PU_EXTAB TYPE SLIS_T_EXTAB.
*
** ALV GUI ステータス
*  SET PF-STATUS 'STANDARD'.
*
*ENDFORM.                    " SET_PF_STATUS_ALV
*
**&---------------------------------------------------------------------
*
**&      Form  SET_TOP_OF_PAGE_ALV
**&---------------------------------------------------------------------
*
**       TOP OF PAGE
**----------------------------------------------------------------------
*
*FORM SET_TOP_OF_PAGE_ALV .
*
** 初期化
*  CLEAR GS_TITLE.
*  REFRESH GT_TITLE.
*
** ローカル変数の定義
*  DATA:
*    LW_LOW   TYPE CHAR6,
*    LW_YEAR  TYPE CHAR6,     "年
*    LW_OPTRG TYPE CHAR20.    "輸出範囲
*
*  LW_YEAR  = SY-DATUM+0(4) + 3.
*  CONDENSE LW_YEAR.
*  LW_YEAR+4(2) = SY-DATUM+4(2).
*  LW_LOW = SY-DATUM+0(6).
*  CONCATENATE LW_LOW '~' LW_YEAR INTO LW_OPTRG.
*
*  PERFORM CREATE_TITLE USING :
*          CNS_H SPACE  TEXT-H01 ,     "タイトル
*          CNS_S TEXT-H02 '1000'.       "会社コード
*
*  PERFORM CREATE_TITLE USING :
*          CNS_S TEXT-H04 LW_OPTRG.      "年月
*
** 汎用モジュールを呼び出して画面タイトルテキストを出力する
*  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
*    EXPORTING
*      IT_LIST_COMMENTARY = GT_TITLE.
*
*ENDFORM.                    " SET_TOP_OF_PAGE_ALV
*
**&---------------------------------------------------------------------
*
**&      Form  CREATE_TITLE
**&---------------------------------------------------------------------
*
**       タイトル
**----------------------------------------------------------------------
*
**      -->PU_TYPE タイプ
**      -->PU_KEY  キー
**      -->PU_INFO 情報
**----------------------------------------------------------------------
*
*FORM CREATE_TITLE  USING    PU_TYPE TYPE CHAR1
*                            PU_KEY  TYPE CHAR20
*                            PU_INFO .
*
*  GS_TITLE-TYP  = PU_TYPE.                  "ヘッダー
*  GS_TITLE-KEY  = PU_KEY.                   "キー
*  GS_TITLE-INFO = PU_INFO.
*  APPEND GS_TITLE TO GT_TITLE.
*
*ENDFORM.                    " CREATE_TITLE
*
**&---------------------------------------------------------------------
*
**&      Form  SET_LAYOUT
**&---------------------------------------------------------------------
*
**       text
**----------------------------------------------------------------------
*
*FORM SET_LAYOUT .
*
*  DATA: TITLE(50) TYPE C.
*  LAYOUT-COLWIDTH_OPTIMIZE = 'X'. "OPTIMIZE
*
*  TITLE = '配件周生### 明#表'.
*  WRITE TITLE TO TITLE CENTERED.
*  I_GRID_TITLE = TITLE.    "ALV TITLE
*  I_GRID_TITLE = I_GRID_TITLE  .
*ENDFORM.                    " SET_LAYOUT
*
**&---------------------------------------------------------------------
*
**&      Form  FRM_SET_VALUE
**&---------------------------------------------------------------------
*
**       text
**----------------------------------------------------------------------
*
*FORM FRM_SET_VALUE .
*
*  GS_VALUE-TITLE = 'Japanese (Export.) class'.
*  GS_VALUE-WAERS = 'CNY'.
*  GS_VALUE-DMBTR = '1088880'.
*  APPEND GS_VALUE TO GT_VALUE.
*
*  CLEAR GS_VALUE.
*  GS_VALUE-TITLE = 'Japanese (Export.) class'.
*  GS_VALUE-WAERS = 'JPY'.
*  GS_VALUE-DMBTR = '10999909'.
*  APPEND GS_VALUE TO GT_VALUE.
*
*  CLEAR GS_VALUE.
*  GS_VALUE-TITLE = 'Japanese (Export.) class'.
*  GS_VALUE-WAERS = 'USD'.
*  GS_VALUE-DMBTR = '10666609'.
*  APPEND GS_VALUE TO GT_VALUE.
*
*  CLEAR GS_VALUE.
*  GS_VALUE-TITLE = 'Japanese (Export.) class'.
*  GS_VALUE-WAERS = 'JPY'.
*  GS_VALUE-DMBTR = '1009'.
*  APPEND GS_VALUE TO GT_VALUE.
*  CLEAR GS_VALUE.
*
*  GS_VALUE-TITLE = 'Japanese (Export.) class'.
*  GS_VALUE-WAERS = 'HKD'.
*  GS_VALUE-DMBTR = '1009'.
*  APPEND GS_VALUE TO GT_VALUE.
*  CLEAR GS_VALUE.
*
*  GS_VALUE-TITLE = 'Japanese (Export.) class'.
*  GS_VALUE-WAERS = 'JPY'.
*  GS_VALUE-DMBTR = '1009'.
*  APPEND GS_VALUE TO GT_VALUE.
*
*  CLEAR GS_VALUE.
*
*  GS_VALUE-TITLE = 'KOREA  (Export.) class'.
*  GS_VALUE-WAERS = 'CNY'.
*  GS_VALUE-DMBTR = '2800'.
*  APPEND GS_VALUE TO GT_VALUE.
*
*  CLEAR GS_VALUE.
*  GS_VALUE-TITLE = 'KOREA  (Export.) class'.
*  GS_VALUE-WAERS = 'JPY'.
*  GS_VALUE-DMBTR = '2090'.
*  APPEND GS_VALUE TO GT_VALUE.
*
*
*  CLEAR GS_VALUE.
*  GS_VALUE-TITLE = 'KOREA  (Export.) class'.
*  GS_VALUE-WAERS = 'USD'.
*  GS_VALUE-DMBTR = '2090'.
*  APPEND GS_VALUE TO GT_VALUE.
*
*  CLEAR GS_VALUE.
*  GS_VALUE-TITLE = 'KOREA  (Export.) class'.
*  GS_VALUE-WAERS = 'JPY'.
*  GS_VALUE-DMBTR = '2090'.
*  APPEND GS_VALUE TO GT_VALUE.
*  CLEAR GS_VALUE.
*
*  GS_VALUE-TITLE = 'KOREA  (Export.) class'.
*  GS_VALUE-WAERS = 'HKD'.
*  GS_VALUE-DMBTR = '2090'.
*  APPEND GS_VALUE TO GT_VALUE.
*  CLEAR GS_VALUE.
*
*  GS_VALUE-TITLE = 'KOREA  (Export.) class'.
*  GS_VALUE-WAERS = 'JPY'.
*  GS_VALUE-DMBTR = '2090'.
*  APPEND GS_VALUE TO GT_VALUE.
*
*ENDFORM.                    " FRM_SET_VALUE
**&---------------------------------------------------------------------
*
**&      Form  FRM_SET_EVENT
**&---------------------------------------------------------------------
*
**       text
**----------------------------------------------------------------------
*
*FORM FRM_SET_EVENT .
*
*  CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
*    EXPORTING
*      I_LIST_TYPE     = 0
*    IMPORTING
*      ET_EVENTS       = GT_EVENT
*    EXCEPTIONS
*      LIST_TYPE_WRONG = 1
*      OTHERS          = 2.
*  IF SY-SUBRC <> 0.
*    MESSAGE ID SY-MSGID
*       TYPE SY-MSGTY
*       NUMBER SY-MSGNO
*       WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*
*  READ TABLE GT_EVENT INTO GS_EVENT  WITH KEY NAME =
*SLIS_EV_TOP_OF_PAGE.
*
*  IF SY-SUBRC = 0 .
*    GS_EVENT-FORM = 'SET_TOP_OF_PAGE_ALV'.
*    APPEND  GS_EVENT TO GT_EVENT.
*  ENDIF.
*
*  READ TABLE GT_EVENT INTO GS_EVENT  WITH KEY NAME =
*SLIS_EV_END_OF_LIST.
*
*  IF SY-SUBRC = 0.
*    GS_EVENT-FORM = 'ALV_END_OF_LIST'.
*    APPEND  GS_EVENT TO GT_EVENT.
*  ENDIF.
*
*  GS_EVENT-NAME = 'CALLER_EXIT'.
*  GS_EVENT-FORM = 'FM_BUTTON'.
*  APPEND GS_EVENT TO GT_EVENT.
*
*ENDFORM.                    " FRM_SET_EVENT
*
**&---------------------------------------------------------------------
*
**&      Form  FM_BUTTON
**&---------------------------------------------------------------------
*
**       ENTER 事件
**----------------------------------------------------------------------
*
**      -->E_GRID     text
**----------------------------------------------------------------------
*
*FORM FM_BUTTON USING E_GRID TYPE SLIS_DATA_CALLER_EXIT.
*
*  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
*    IMPORTING
*      E_GRID = TEM_GRID.
*
** 設定 ENTER 事件
*  CALL METHOD TEM_GRID->REGISTER_EDIT_EVENT
*    EXPORTING
*      I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER
*    EXCEPTIONS
*      ERROR      = 1
*      OTHERS     = 2.
*
*  DATA: GT_EVENT_RECEIVER TYPE REF TO LCL_EVENT_RECEIVER .
*  CREATE OBJECT GT_EVENT_RECEIVER.
*  SET HANDLER GT_EVENT_RECEIVER->HANDLE_MODIFY FOR TEM_GRID.
*
*ENDFORM.                    "FM_BUTTON

*DATA: carrier     TYPE spfli-carrid,
*      connection  TYPE spfli-connid.
*
*START-OF-SELECTION.
*  SELECT carrid connid
*         FROM spfli
*         INTO (carrier, connection).
*    WRITE: / carrier HOTSPOT, connection HOTSPOT.
*    HIDE:  carrier, connection.
*  ENDSELECT.
*
*AT LINE-SELECTION.
*  SET PARAMETER ID: 'CAR' FIELD carrier,
*                    'CON' FIELD connection.
*  CALL TRANSACTION 'DEMO_TRANSACTION'.


*TYPES:BEGIN OF line,
*        chk TYPE c,
*        message(10) TYPE c,
*      END OF line.
*
**DATA itab TYPE line OCCURS 0.
*
*DATA wa_itab TYPE line.
*
*DATA:con_diabox TYPE REF TO cl_gui_dialogbox_container.
*
*DATA: l_alv TYPE REF TO cl_gui_alv_grid ,
*      lt_sflight TYPE TABLE OF sflight .
*
*DATA: ok_code LIKE sy-ucomm,
*      alv_grid TYPE REF TO cl_gui_alv_grid,
*      wa_container TYPE scrfname VALUE 'ALV',
*      wa_custom_container TYPE REF TO cl_gui_custom_container,
*      gt_fieldcat_te TYPE lvc_t_fcat,
*      lst_layout   TYPE lvc_s_layo.
*
**DATA:
**  id    TYPE c LENGTH 10 VALUE 'TEXTS',
**  text1 TYPE string VALUE `IKE`,
**  text2 TYPE string VALUE `TINA`.
*
**wa_itab-message = 'AAAAAAAAAA'.
**APPEND wa_itab TO itab.
**
**wa_itab-message = 'BBBBBBBBB'.
**APPEND wa_itab TO itab.
**
**wa_itab-message = 'CCCCCCCCC'.
**APPEND wa_itab TO itab.
*
*DATA: BEGIN OF itab1 OCCURS 0 ,
*      ff(10) ,
*      END OF itab1.
*DATA: itab2 LIKE itab1 OCCURS 0 WITH HEADER LINE .
*DATA: str1 TYPE string ,
*      str2 TYPE string .
*
*APPEND '111111111' TO itab1.
*APPEND '222222222' TO itab1.
*str1 = 'sssssssssss'.
*
****如果是同名的#象，可以##写：
*EXPORT itab1 TO MEMORY ID 'M1'.
*
*FREE itab1.
*
*IMPORT itab1 FROM MEMORY ID 'M1'.
*
*LOOP AT itab1.
*  WRITE / itab1-ff.
*ENDLOOP.
*
*
***---------------------------------------------------------------------

**
***       CLASS lcl_event_handler DEFINITION
***---------------------------------------------------------------------
**
**CLASS lcl_event_handler DEFINITION.
**  PUBLIC SECTION.
**    CLASS-METHODS:
**   on_close FOR EVENT close OF cl_gui_dialogbox_container IMPORTING
**sender.
**ENDCLASS.                    "lcl_event_handler DEFINITION
**
***--------------------------------------------------------------------
**
***       CLASS lcl_event_handler IMPLEMENTATION
***---------------------------------------------------------------------
**
**CLASS lcl_event_handler IMPLEMENTATION.
**  METHOD on_close.
**    CALL METHOD sender->free.
**    FREE: con_diabox, l_alv.
**  ENDMETHOD.                    "on_close
**ENDCLASS.                    "lcl_event_handler IMPLEMENTATION
**
**START-OF-SELECTION.
**  CALL SCREEN 100.
**
***&--------------------------------------------------------------------
**
***&      Module  STATUS_0100  OUTPUT
***&--------------------------------------------------------------------
**
**MODULE status_0100 OUTPUT.
**  SET PF-STATUS 'M100'.
**
***  SELECT * FROM sflight INTO TABLE lt_sflight.
***  IF con_diabox IS INITIAL.
***    CREATE OBJECT con_diabox
***      EXPORTING
***        width   = 600
***        height  = 200
***        top     = 70
***        left    = 140
***        caption = 'Title'
***      EXCEPTIONS
***        others  = 1.
***    SET HANDLER lcl_event_handler=>on_close FOR con_diabox .
***
***    CREATE OBJECT l_alv
***      EXPORTING
***        i_parent = con_diabox.
***  ENDIF.
***  CALL METHOD l_alv->set_table_for_first_display
***    EXPORTING
***      i_structure_name = 'SFLIGHT'
***    CHANGING
***      it_outtab        = lt_sflight.
**
**  IF wa_custom_container IS INITIAL.
**
**    CREATE OBJECT wa_custom_container
**      EXPORTING
**        container_name = wa_container.
**
**    CREATE OBJECT alv_grid
**      EXPORTING
**        i_parent = wa_custom_container.
**
**    PERFORM prepare_field_catalog1 CHANGING gt_fieldcat_te.
**
**    lst_layout-box_fname = 'CHK'.
**
**    CALL METHOD alv_grid->set_table_for_first_display
**      EXPORTING
***       i_structure_name = cns_alv_str
**        is_layout        = lst_layout
**      CHANGING
**        it_outtab        = itab
**        it_fieldcatalog  = gt_fieldcat_te.
**
**  ENDIF.
**
**ENDMODULE.                 " STATUS_0100  OUTPUT
**
***&--------------------------------------------------------------------
**
***&      Module  USER_COMMAND_0100  INPUT
***&--------------------------------------------------------------------
**
**MODULE user_command_0100 INPUT.
**
**  CASE ok_code.
**    WHEN 'BACK'.
**      LEAVE PROGRAM.
**
**    WHEN 'WRITE'.
**
**      DATA str(40) TYPE c.
**
**      str = '所#条目：'.
**
**      DATA l_ret VALUE 'X'.
**
***      CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
***        IMPORTING
***          e_grid = alv_grid.
**
**      CALL METHOD alv_grid->check_changed_data
**        IMPORTING
**          e_valid = l_ret.
**
***      EXPORT (itab)     TO MEMORY ID id.
**
**      LOOP AT itab INTO wa_itab WHERE chk = 'X'.
**        CONCATENATE str wa_itab-message INTO str.
**      ENDLOOP.
**
**      MESSAGE str TYPE 'I'.
**  ENDCASE.
**
**ENDMODULE.                 " USER_COMMAND_0100  INPUT
**
***&--------------------------------------------------------------------
**
***&      Form  PREPARE_FIELD_CATALOG1
***&--------------------------------------------------------------------
**
***       text
***---------------------------------------------------------------------
**
***      <--P_GT_FIELDCAT_TE  text
***---------------------------------------------------------------------
**
**FORM prepare_field_catalog1  CHANGING p_gt_fieldcat_te TYPE
*lvc_t_fcat.
**
**  DATA is_fcat TYPE lvc_s_fcat.
**
**  is_fcat-fieldname = 'CHK'.
**  is_fcat-col_pos = 1.
**  is_fcat-coltext = '##'.
**  is_fcat-seltext = '##'.
**  is_fcat-checkbox = 'X'.
**  is_fcat-edit = 'X'.
***  is_fcat-tech = 'X'.
**  APPEND is_fcat TO gt_fieldcat_te.
**  CLEAR is_fcat.
**
**  is_fcat-fieldname = 'MESSAGE'.
**  is_fcat-col_pos = 2.
**  is_fcat-coltext = '消息'.
**  is_fcat-seltext = '消息'.
**  APPEND is_fcat TO gt_fieldcat_te.
**  CLEAR is_fcat.
**
**ENDFORM.                    " PREPARE_FIELD_CATALOG1

*TYPE-POOLS: slis, icon.
*
*
*
*DATA: ld_fieldcat  TYPE  slis_fieldcat_alv.
*
*DATA: t_alv_fieldcat      TYPE slis_t_fieldcat_alv WITH HEADER LINE,
*
*Alv_Layout TYPE SLIS_LAYOUT_ALV .
*
*DATA : it_fld TYPE slis_t_fieldcat_alv ,
*
*       it_evt TYPE slis_t_event     ,
*
*       wa_fld TYPE slis_fieldcat_alv   ,
*
*       wa_evt TYPE slis_alv_event      ,
*
*       wa_lay TYPE slis_layout_alv     .
*
*
*
*data:
*
*      BEGIN OF itab OCCURS 0,
*
*        carrid like sflight-carrid,
*
*        connid like sflight-connid,
*
*        planetype like sflight-planetype,
*
*        seatsmax like sflight-seatsmax,
*
*      END OF itab.
*
*
*
*START-OF-SELECTION.
*
*
*
*"We are using table sflight to populate the internal
*
*"table
*
*
*
*SELECT carrid connid planetype seatsmax
*
*       FROM sflight
*
*       INTO TABLE itab.
*
*
*
*CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
*
*    IMPORTING
*
*      et_events = it_evt.
*
*
*
*  READ TABLE it_evt INTO wa_evt
*
*       WITH KEY name = slis_ev_after_line_output .
*
*  wa_evt-form = slis_ev_after_line_output .
*
*  MODIFY it_evt FROM wa_evt INDEX sy-tabix .
*
*
*
*  READ TABLE it_evt INTO wa_evt
*
*       WITH KEY name = slis_ev_top_of_page .
*
*  wa_evt-form = slis_ev_top_of_page .
*
*  MODIFY it_evt FROM wa_evt INDEX sy-tabix .
*
*
*
*  CLEAR: ld_fieldcat.
*
*  ld_fieldcat-tabname       = 'ITAB'.
*
*  ld_fieldcat-fieldname     = 'CARRID'.
*
*  ld_fieldcat-ref_tabname   = 'SFLIGHT'.
*
*  ld_fieldcat-outputlen     = '10'.
*
*  APPEND ld_fieldcat TO t_alv_fieldcat.
*
*  CLEAR ld_fieldcat.
*
*
*
*  CLEAR: ld_fieldcat.
*
*  ld_fieldcat-tabname       = 'ITAB'.
*
*  ld_fieldcat-fieldname     = 'CONNID'.
*
*  ld_fieldcat-ref_tabname   = 'SFLIGHT'.
*
*  ld_fieldcat-outputlen     = '10'.
*
*  APPEND ld_fieldcat TO t_alv_fieldcat.
*
*  CLEAR ld_fieldcat.
*
*
*
*    CLEAR: ld_fieldcat.
*
*  ld_fieldcat-tabname       = 'ITAB'.
*
*  ld_fieldcat-fieldname     = 'PLANETYPE'.
*
*  ld_fieldcat-ref_tabname   = 'SFLIGHT'.
*
*  ld_fieldcat-outputlen     = '10'.
*
*  APPEND ld_fieldcat TO t_alv_fieldcat.
*
*  CLEAR ld_fieldcat.
*
*
*
*  CLEAR: ld_fieldcat.
*
*  ld_fieldcat-tabname       = 'ITAB'.
*
*  ld_fieldcat-fieldname     = 'SEATSMAX'.
*
*  ld_fieldcat-ref_tabname   = 'SFLIGHT'.
*
*  ld_fieldcat-outputlen     = '10'.
*
*  APPEND ld_fieldcat TO t_alv_fieldcat.
*
*  CLEAR ld_fieldcat.
*
*
*
*"This is where we exclude the standard ALV columns
*
*
*
*ALV_LAYOUT-no_colhead = 'X' .
*
*
*
*  CALL FUNCTION 'REUSE_ALV_LIST_DISPLAY'
*
*    EXPORTING
*
*      IS_LAYOUT = ALV_LAYOUT
*
*      i_bypassing_buffer = 'X'
*
*      i_callback_program = sy-repid
*
*      it_fieldcat        = t_alv_fieldcat[]
*
*      it_events          =  it_evt
*
*      i_save             = 'A'
*
*    TABLES
*
*      t_outtab           = ITAB. "internal table
*
*
*
*  IF SY-SUBRC <> 0.
*
** MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*
**         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*
*  ENDIF.
*
*
*
* FORM top_of_page .
*
*
*
*"Uline for creating a horizontal line
*
*
*
*ULINE AT 1(45) .
*
*
*
*"Format color for header background
*
*
*
*FORMAT COLOR 7 .
*
*"This is where we manually create the header text,
*
*"in this example I'm using 2 lines header, if you
*
*"want to have 3 lines header or more, you can just
*
*"add new write command.
*
*
*
*WRITE: / sy-vline , 02 'CARRID AND CONNID',
*
*23 SY-VLINE, 25 'PLANE & SEATS MAX', 45 SY-VLINE.
*
*
*
*WRITE: / sy-vline , 02 'CARRID' ,12 sy-vline, 14 'CONNID',
*
*23 SY-VLINE, 25 'PLANE ', 34 SY-VLINE, 36 'SEATS MAX', 45 SY-VLINE.
*
*
*
*ENDFORM.
