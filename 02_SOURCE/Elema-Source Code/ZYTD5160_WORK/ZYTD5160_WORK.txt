REPORT ZYTD5160 MESSAGE-ID Z1 .


* 変更履歴：2006/11/30　RoHS指令対応のため証明書区分追加
* 変更履歴：2008/03/18　証明書区分・出荷指示項目に'/'が入力されていた
*                       場合は更新しない
* 変更履歴：2010/03/16　証明書区分・出荷指示項目に'X'が入力されていた
*                       場合は空欄で更新
*                       ⇒入力データが無い場合には更新しない
* 変更履歴：2010/06/09　発注単位変更修正

TABLES : EINA ,
EINE .

DATA : BDC_TAB TYPE TABLE OF BDCDATA WITH HEADER LINE ,
IN_DATA(1000) TYPE C ,
BDC_MSG TYPE TABLE OF BDCMSGCOLL WITH HEADER LINE .
*----------------------------------------------------------------------*
* 型定義
*----------------------------------------------------------------------*
TYPES : BEGIN OF TYP_FILE ,
LIFNR(10) TYPE C ,          "仕入先コード
MATNR(18) TYPE C ,          "品目コード
WERKS(04) TYPE C ,          "プラント
IDNLF(35) TYPE C ,          "仕入先品目
MEINS(03) TYPE C ,          "発注単位
UMREZ(05) TYPE C ,          "分子
UMREN(05) TYPE C ,          "分母
APLFZ(03) TYPE C ,          "納入予定日数
EKGRP(03) TYPE C ,          "購買グループ
NORBM(17) TYPE C ,          "標準発注数量
MINBM(17) TYPE C ,          "最小発注数量
MWSKZ(02) TYPE C ,          "税コード
* Add 2006.11.30 -->
URZTP(01) TYPE C ,          "証明書区分
* Add 2006.11.30 <--
* Add 2007.04.05 -->
EVERS(02) TYPE C ,          "出荷指示
* Add 2007.04.05 <--

END OF TYP_FILE ,
BEGIN OF TYP_DATA  ,
LIFNR LIKE EINA-LIFNR ,     "仕入先コード
MATNR LIKE EINA-MATNR ,     "品目コード
WERKS LIKE EINE-WERKS ,     "プラント
ESOKZ LIKE EINE-ESOKZ ,     "プラント
IDNLF LIKE EINA-IDNLF ,     "仕入先品目
MEINS LIKE EINA-MEINS ,     "発注単位
UMREZ LIKE EINA-UMREZ ,     "分子
UMREN LIKE EINA-UMREN ,     "分母
APLFZ LIKE EINE-APLFZ ,     "納入予定日数
EKGRP LIKE EINE-EKGRP ,     "購買グループ
NORBM LIKE EINE-NORBM ,     "標準発注数量
MINBM LIKE EINE-MINBM ,     "最小発注数量
MWSKZ LIKE EINE-MWSKZ ,     "税コード
* Add 2006.11.30 -->
URZTP LIKE EINA-URZTP ,     "証明書区分
* Add 2006.11.30 <--
* Add 2007.04.05 -->
EVERS LIKE EINE-EVERS ,     "出荷指示
* Add 2007.04.05 <--
* Add 2010.06.09 -->
LMEIN LIKE EINA-LMEIN ,     "基本数量単位
* Add 2010.06.09 -->

END OF TYP_DATA  ,
*        BEGIN OF TYP_BDC  ,
*          LIFNR LIKE EINA-LIFNR ,     "仕入先コード
*          MATNR LIKE EINA-MATNR ,     "品目コード
*          WERKS LIKE EINE-WERKS ,     "プラント
*          IDNLF LIKE EINA-IDNLF ,     "仕入先品目
*          MEINS LIKE EINA-MEINS ,     "発注単位
*          UMREZ LIKE EINA-UMREZ ,     "分子
*          UMREN LIKE EINA-UMREN ,     "分母
*          APLFZ LIKE EINE-APLFZ ,     "納入予定日数
*          EKGRP LIKE EINE-EKGRP ,     "購買グループ
*          NORBM LIKE EINE-NORBM ,     "標準発注数量
*          MINBM LIKE EINE-MINBM ,     "最小発注数量
*          MWSKZ LIKE EINE-MWSKZ ,     "税コード
*        END OF TYP_BDC  ,
BEGIN OF TYP_MARA ,
MATNR LIKE MARA-MATNR ,     "品目コード
MEINS LIKE MARA-MEINS ,     "基本数量単位
END OF TYP_MARA .
*----------------------------------------------------------------------*
* 変数宣言
*----------------------------------------------------------------------*
DATA :
*       B_TAB TYPE TABLE OF TYP_BDC  ,
*       B_WRK TYPE TYP_BDC  ,
D_TAB TYPE TABLE OF TYP_DATA ,
D_WRK TYPE TYP_DATA ,
F_TAB TYPE TABLE OF TYP_FILE ,
F_WRK TYPE TYP_FILE ,
M_TAB TYPE TABLE OF TYP_MARA ,
M_WRK TYPE TYP_MARA .

DATA : W_MEINS(3)   TYPE C,          "発注単位
W_CNT        TYPE I,          "テーブル行数カウンタ
FLG_MEINS(1) TYPE C,          "単位変換フラグ
FLG_WRITE(1) TYPE C.          "WRITEフラグ

DATA : BDC_TRAN LIKE SYST-TCODE VALUE 'ME12' ,
BDC_MODE(1) TYPE C VALUE 'N' .
*      BDC_MODE(1) TYPE C VALUE 'A' .

*----------------------------------------------------------------------*
* 選択画面
*----------------------------------------------------------------------*
PARAMETERS : P_FILE LIKE RLGRAP-FILENAME.
* Add 2006.03.16 --->
PARAMETERS : P_LOCAL RADIOBUTTON GROUP R_1 , "ローカル
P_SERVE RADIOBUTTON GROUP R_1 . "サーバー
* Add 2006.03.16 <---
AT SELECTION-SCREEN .

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
PERFORM WS_FILENAME_GET USING P_FILE.

START-OF-SELECTION .

PERFORM READ_FILE .
PERFORM DATA_GET .
PERFORM CHK_ITEM .
LOOP AT F_TAB INTO F_WRK .
READ TABLE D_TAB INTO D_WRK WITH KEY LIFNR = F_WRK-LIFNR
MATNR = F_WRK-MATNR
WERKS = F_WRK-WERKS
BINARY SEARCH.
PERFORM BDC_SET .
PERFORM CALL_TRAN .
ENDLOOP .

*----------------------------------------------------------------------*
* ファイルパス取得
*----------------------------------------------------------------------*
FORM WS_FILENAME_GET USING P_FILE.

CALL FUNCTION 'WS_FILENAME_GET'
EXPORTING
DEF_PATH         = 'C:\SAPDATA'
MASK             = '*.*,ALL FILES,*.*.'
MODE             = 'O'
IMPORTING
FILENAME         = P_FILE
EXCEPTIONS
INV_WINSYS       = 1
NO_BATCH         = 2
SELECTION_CANCEL = 3
SELECTION_ERROR  = 4
OTHERS           = 5.


ENDFORM.
*----------------------------------------------------------------------*
* ファイル読み込み
*----------------------------------------------------------------------*
FORM READ_FILE .
* Add 2006.03.16 --->
DATA : L_LINE(1000) TYPE C .
DATA : W_TAB TYPE X VALUE '09' .
IF P_LOCAL EQ 'X' .
* Add 2006.03.16 <---
CALL FUNCTION 'WS_UPLOAD'
EXPORTING
FILENAME                = P_FILE
FILETYPE                = 'DAT'
TABLES
DATA_TAB                = F_TAB
EXCEPTIONS
CONVERSION_ERROR        = 1
FILE_OPEN_ERROR         = 2
FILE_READ_ERROR         = 3
INVALID_TYPE            = 4
NO_BATCH                = 5
UNKNOWN_ERROR           = 6
INVALID_TABLE_WIDTH     = 7
GUI_REFUSE_FILETRANSFER = 8
CUSTOMER_ERROR          = 9
OTHERS                  = 10.

*   汎用モジュール失敗時エラーメッセージ出力
IF SY-SUBRC NE 0.
MESSAGE I616 .
STOP .
ELSE.
ENDIF.
* Add 2006.03.16 --->
ELSE .
OPEN DATASET P_FILE FOR INPUT IN TEXT MODE .
IF SY-SUBRC NE 0 .
MESSAGE I616 .
STOP .
ELSE .
DO .
READ DATASET P_FILE INTO L_LINE .
IF SY-SUBRC NE 0 .
EXIT .
ENDIF .
SPLIT L_LINE AT W_TAB
INTO F_WRK-LIFNR
F_WRK-MATNR
F_WRK-WERKS
F_WRK-IDNLF
F_WRK-MEINS
F_WRK-UMREZ
F_WRK-UMREN
F_WRK-APLFZ
F_WRK-EKGRP
F_WRK-NORBM
F_WRK-MINBM
F_WRK-MWSKZ
* Add 2006.11.30 -->
F_WRK-URZTP
* Add 2006.11.30 <--
* Add 2007.04.05 -->
F_WRK-EVERS
* Add 2007.04.05 <--
.
APPEND F_WRK TO F_TAB .
CLEAR : F_WRK .
ENDDO .
CLOSE DATASET P_FILE .
ENDIF .
ENDIF .
* Add 2006.03.16 <---


* 取得データ０件時エラーメッセージ出力
CLEAR : W_CNT.
DESCRIBE TABLE F_TAB LINES W_CNT .
IF W_CNT = 0 .
MESSAGE I616 .
STOP .
ELSE.
ENDIF.

* 取得データ変換
LOOP AT F_TAB INTO F_WRK.
PERFORM CONV_ALPHA_IN_SYORI USING F_WRK-LIFNR
CHANGING F_WRK-LIFNR.
PERFORM CONV_MATN1_IN_SYORI USING F_WRK-MATNR
CHANGING F_WRK-MATNR.
MODIFY F_TAB FROM F_WRK.
ENDLOOP.

ENDFORM .
*----------------------------------------------------------------------*
* 対象データ取得
*----------------------------------------------------------------------*
FORM DATA_GET .

* 変更前データ取得
SELECT EINA~LIFNR
EINA~MATNR
EINE~WERKS
EINE~ESOKZ
EINA~IDNLF
EINA~MEINS
EINA~UMREZ
EINA~UMREN
EINE~APLFZ
EINE~EKGRP
EINE~NORBM
EINE~MINBM
EINE~MWSKZ
* Add 2006.11.30 -->
EINA~URZTP
* Add 2006.11.30 <--
* Add 2007.04.05 -->
EINE~EVERS
* Add 2007.04.05 <--
* Add 2010.06.09 -->
EINA~LMEIN
* Add 2010.06.09 -->

INTO CORRESPONDING FIELDS OF TABLE D_TAB
FROM EINA AS EINA INNER JOIN EINE AS EINE
ON EINA~INFNR = EINE~INFNR
FOR ALL ENTRIES IN F_TAB
WHERE EINA~MATNR = F_TAB-MATNR
AND EINA~LIFNR = F_TAB-LIFNR
AND EINE~WERKS = F_TAB-WERKS.

* 取得データ０件時エラーメッセージ出力
CLEAR : W_CNT.
DESCRIBE TABLE D_TAB LINES W_CNT .
IF W_CNT = 0 .
MESSAGE I616 .
STOP .
ELSE.
SORT D_TAB BY LIFNR MATNR WERKS.
ENDIF.

* 品目マスタ取得
SELECT MATNR
MEINS
INTO CORRESPONDING FIELDS OF TABLE M_TAB
FROM MARA
FOR ALL ENTRIES IN F_TAB
WHERE MATNR = F_TAB-MATNR.

ENDFORM .
*----------------------------------------------------------------------*
* BDCテーブルセット
*----------------------------------------------------------------------*
FORM BDC_SET .

CLEAR : W_MEINS.


PERFORM SET_BDC USING :
* 第一画面
'SAPMM06I' '0100' 'X' ,
'BDC_OKCODE' '/00' '' ,
'EINA-LIFNR' F_WRK-LIFNR '' , "仕入先
'EINA-MATNR' F_WRK-MATNR '' , "品目
'EINE-EKORG' '1000' '' ,      "購買組織
'EINE-WERKS' F_WRK-WERKS '' , "プラント
'EINA-INFNR' '' '',
'RM06I-NORMB' 'X' '' ,        "標準

* 一般データ
'SAPMM06I' '0101' 'X' ,
'BDC_CURSOR' 'EINA-UMREZ' '' ,
'BDC_OKCODE' '=EINE' '' , "
'EINA-IDNLF' F_WRK-IDNLF '' , "仕入先品目
* Add 2006.11.30 -->
'EINA-URZTP' F_WRK-URZTP '' , "証明書区分
* Add 2006.11.30 <--
'EINA-MEINS' F_WRK-MEINS '' , "購買単位
'EINA-UMREZ' F_WRK-UMREZ '' , "分子
'EINA-UMREN' F_WRK-UMREN '' . "分母
* Add 2010.06.09 -->
READ TABLE M_TAB INTO M_WRK WITH KEY MATNR = F_WRK-MATNR
BINARY SEARCH.

IF D_WRK-LMEIN NE M_WRK-MEINS .
PERFORM SET_BDC USING :
'EINA-LMEIN' F_WRK-MEINS '' . "購買単位
ENDIF .
* Add 2010.06.09 <--


* ポップアップ（購買単位を変換した場合のみ表示）
PERFORM CONV_UNIT_OUT_SYORI USING D_WRK-MEINS
CHANGING W_MEINS.
IF F_WRK-MEINS NE W_MEINS.
PERFORM SET_BDC USING :
'SAPLSPO1' '0100' 'X' ,
'BDC_OKCODE' '=YES' '' .
ELSE.
ENDIF.

PERFORM SET_BDC USING :
* 購買組織データ
'SAPMM06I' '0102' 'X' ,
'BDC_CURSOR' 'EINE-MINBM' '' , "
'BDC_OKCODE' '=BU' '' , "保存
'EINE-APLFZ' F_WRK-APLFZ '' , "納入予定日数
'EINE-EKGRP' F_WRK-EKGRP '' , "購買グループ
'EINE-NORBM' F_WRK-NORBM '' , "標準発注数量
'EINE-MINBM' F_WRK-MINBM '' , "最小発注数量
* Add 2007.04.05 -->
'EINE-EVERS' F_WRK-EVERS '' , "出荷指示
* Add 2007.04.05 <--
'EINE-MWSKZ' F_WRK-MWSKZ '' . "税コード

ENDFORM .
*----------------------------------------------------------------------*
* トランザクションコール
*----------------------------------------------------------------------*
FORM CALL_TRAN .

DATA : W_MSG LIKE MESSAGE ,
W_RETURN  TYPE BAPIRET2,
W_UPDATE(1) TYPE C VALUE 'A',
W_MSGNO LIKE SY-MSGNO .

DATA: CTU_PARAMS LIKE CTU_PARAMS.   "トランザクションパラメータ

CTU_PARAMS-DISMODE = BDC_MODE.
CTU_PARAMS-UPDMODE = W_UPDATE.
CALL TRANSACTION BDC_TRAN
USING   BDC_TAB
OPTIONS FROM CTU_PARAMS
MESSAGES INTO BDC_MSG
.

LOOP AT BDC_MSG WHERE MSGTYP = 'E' OR MSGTYP = 'A'.
MOVE : BDC_MSG-MSGNR TO W_MSGNO ,
'X'           TO FLG_WRITE.
CALL FUNCTION 'WRITE_MESSAGE'
EXPORTING
MSGID         = BDC_MSG-MSGID
MSGNO         = W_MSGNO
MSGTY         = BDC_MSG-MSGTYP
MSGV1         = BDC_MSG-MSGV1
MSGV2         = BDC_MSG-MSGV2
MSGV3         = BDC_MSG-MSGV3
MSGV4         = BDC_MSG-MSGV4
*         MSGV5         = BDC_MSG-MSGV5
IMPORTING
*         ERROR         =
MESSG         = W_MSG
*         MSGLN         =
.
MESSAGE ID BDC_MSG-MSGID
*            Type BDC_MSG-MSGTYP
TYPE 'S'
NUMBER W_MSGNO
WITH BDC_MSG-MSGV1
BDC_MSG-MSGV2
BDC_MSG-MSGV3
BDC_MSG-MSGV4
.
WRITE : /1 BDC_MSG-MSGTYP,
3 W_MSG-MSGTX .

ENDLOOP .

IF FLG_WRITE IS INITIAL.
CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
EXPORTING
WAIT          = 'X'
IMPORTING
RETURN        = W_RETURN
.

PERFORM WRITE_CHANGE_OK.
ENDIF.

ULINE.

CLEAR   : FLG_WRITE.
REFRESH : BDC_TAB , BDC_MSG .
CLEAR   : D_WRK , F_WRK .

ENDFORM .
*----------------------------------------------------------------------*
* BDCセット
*----------------------------------------------------------------------*
FORM SET_BDC USING P_DAT P_VAL P_FLG .
MOVE : P_FLG TO BDC_TAB-DYNBEGIN .
IF P_FLG EQ 'X' .
MOVE : P_DAT TO BDC_TAB-PROGRAM ,
P_VAL TO BDC_TAB-DYNPRO .
ELSE .
MOVE : P_DAT TO BDC_TAB-FNAM ,
P_VAL TO BDC_TAB-FVAL .
ENDIF .
APPEND : BDC_TAB .
CLEAR : BDC_TAB .
ENDFORM .
*----------------------------------------------------------------------*
* 項目チェック
*----------------------------------------------------------------------*
FORM CHK_ITEM.
LOOP AT F_TAB INTO F_WRK.
READ TABLE D_TAB INTO D_WRK WITH KEY LIFNR = F_WRK-LIFNR
MATNR = F_WRK-MATNR
WERKS = F_WRK-WERKS
BINARY SEARCH.

IF SY-SUBRC = 0.

IF F_WRK-IDNLF IS INITIAL. "仕入先品目が空白
MOVE D_WRK-IDNLF TO F_WRK-IDNLF.
ENDIF.

IF F_WRK-MEINS IS INITIAL. "発注単位が空白
CLEAR : W_MEINS.
PERFORM CONV_UNIT_OUT_SYORI USING D_WRK-MEINS
CHANGING W_MEINS.
MOVE W_MEINS TO F_WRK-MEINS.
ENDIF.

IF F_WRK-UMREZ IS INITIAL. "分子が空白
MOVE D_WRK-UMREZ TO F_WRK-UMREZ.
ENDIF.

IF F_WRK-UMREN IS INITIAL. "分母が空白
MOVE D_WRK-UMREN TO F_WRK-UMREN.
ENDIF.

IF F_WRK-APLFZ IS INITIAL. "納入予定日数が空白
MOVE D_WRK-APLFZ TO F_WRK-APLFZ.
ENDIF.

IF F_WRK-EKGRP IS INITIAL. "購買グループが空白
MOVE D_WRK-EKGRP TO F_WRK-EKGRP.
ENDIF.

IF F_WRK-NORBM IS INITIAL. "標準発注数量が空白
MOVE D_WRK-NORBM TO F_WRK-NORBM.
ENDIF.

IF F_WRK-MINBM IS INITIAL. "最小発注数量が空白
MOVE D_WRK-MINBM TO F_WRK-MINBM.
ENDIF.

IF F_WRK-MWSKZ IS INITIAL. "税コードが空白
MOVE D_WRK-MWSKZ TO F_WRK-MWSKZ.
ENDIF.

* 2010/03/16 MODiFY START
* 2008/03/18 APPEND START
**     証明書区分
*      IF F_WRK-URZTP = '/'.
*        MOVE D_WRK-URZTP TO F_WRK-URZTP.
*      ENDIF.
**   出荷指示
*      IF F_WRK-EVERS = '/'.
*        MOVE D_WRK-EVERS TO F_WRK-EVERS.
*      ENDIF.
* 2008/03/18 APPEND END
*     証明書区分
IF F_WRK-URZTP IS INITIAL .
MOVE D_WRK-URZTP TO F_WRK-URZTP.
ENDIF.
*   出荷指示
IF F_WRK-EVERS IS INITIAL .
MOVE D_WRK-EVERS TO F_WRK-EVERS.
ENDIF.
*     証明書区分
IF F_WRK-URZTP = 'X'      .
MOVE SPACE  TO F_WRK-URZTP.
ENDIF.
*   出荷指示
IF F_WRK-EVERS = 'X'    .
MOVE SPACE  TO F_WRK-EVERS.
ENDIF.

* 2010/03/16 MODIFY END

MODIFY F_TAB FROM F_WRK .

ELSE.

WRITE : / '品目'     , F_WRK-MATNR ,
'仕入先'   , F_WRK-LIFNR ,
'プラント' , F_WRK-WERKS ,
'の購買情報は存在しませんでした。'.
ULINE .
DELETE TABLE F_TAB FROM F_WRK .

ENDIF.

ENDLOOP.

ENDFORM.
*----------------------------------------------------------------------*
* 前ゼロ埋め変換
*----------------------------------------------------------------------*
FORM CONV_ALPHA_IN_SYORI USING P_IN
CHANGING P_OUT.

CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = P_IN
IMPORTING
OUTPUT = P_OUT.

ENDFORM.
*----------------------------------------------------------------------*
* 前ゼロ埋め変換
*----------------------------------------------------------------------*
FORM CONV_MATN1_IN_SYORI USING P_IN
CHANGING P_OUT.

CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
EXPORTING
INPUT  = P_IN
IMPORTING
OUTPUT = P_OUT.

ENDFORM.
*----------------------------------------------------------------------*
* 単位変換(外部⇒内部)
*----------------------------------------------------------------------*
FORM CONV_UNIT_IN_SYORI USING P_IN
CHANGING P_OUT.

CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
EXPORTING
INPUT                = P_IN
LANGUAGE             = SY-LANGU
IMPORTING
*     LONG_TEXT            =
OUTPUT               = P_OUT
*     SHORT_TEXT           =
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.

IF SY-SUBRC NE 0.
MOVE : P_IN TO P_OUT.
ELSE.
ENDIF.

ENDFORM.
*----------------------------------------------------------------------*
* 単位変換(内部⇒外部)
*----------------------------------------------------------------------*
FORM CONV_UNIT_OUT_SYORI USING P_IN
CHANGING P_OUT.

CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = P_IN
LANGUAGE             = SY-LANGU
IMPORTING
*     LONG_TEXT            =
OUTPUT               = P_OUT
*     SHORT_TEXT           =
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.

IF SY-SUBRC NE 0.
MOVE : P_IN TO P_OUT.
ELSE.
ENDIF.

ENDFORM.
*----------------------------------------------------------------------*
* 変更成功メッセージ出力
*----------------------------------------------------------------------*
FORM WRITE_CHANGE_OK.
CLEAR : W_MEINS.

READ TABLE BDC_MSG WITH KEY MSGID = '06' MSGNR = '336'.

IF SY-SUBRC = 0 .
WRITE : / '品目'     , F_WRK-MATNR ,
'仕入先'   , F_WRK-LIFNR ,
'プラント' , F_WRK-WERKS ,
'の購買情報は変更されませんでした。'.
EXIT.
ENDIF.
PERFORM CONV_UNIT_OUT_SYORI USING D_WRK-MEINS
CHANGING W_MEINS.
IF F_WRK-IDNLF EQ D_WRK-IDNLF
AND F_WRK-MEINS EQ W_MEINS
AND F_WRK-UMREZ EQ D_WRK-UMREZ
AND F_WRK-UMREN EQ D_WRK-UMREN
AND F_WRK-APLFZ EQ D_WRK-APLFZ
AND F_WRK-EKGRP EQ D_WRK-EKGRP
AND F_WRK-NORBM EQ D_WRK-NORBM
AND F_WRK-MINBM EQ D_WRK-MINBM
AND F_WRK-MWSKZ EQ D_WRK-MWSKZ
* 2007.02.14 Add  -->
AND F_WRK-URZTP EQ D_WRK-URZTP
* 2007.02.14 Add <---
* 2007.04.05 Add  -->
AND F_WRK-EVERS EQ D_WRK-EVERS
* 2007.04.05 Add <---
.
WRITE : / '品目'     , F_WRK-MATNR ,
'仕入先'   , F_WRK-LIFNR ,
'プラント' , F_WRK-WERKS ,
'の購買情報は変更されませんでした。'.
EXIT.

ENDIF.


WRITE : / '品目'     , F_WRK-MATNR ,
'仕入先'   , F_WRK-LIFNR ,
'プラント' , F_WRK-WERKS ,
'の購買情報について、下記項目が変更されました。'.

IF F_WRK-IDNLF NE D_WRK-IDNLF.
WRITE: / '仕入先品目：' , D_WRK-IDNLF , '⇒' , F_WRK-IDNLF.
ENDIF.

IF F_WRK-MEINS = W_MEINS.
IF F_WRK-UMREZ NE D_WRK-UMREZ
OR F_WRK-UMREN NE D_WRK-UMREN.
PERFORM WRITE_MEINS.
ENDIF.
ELSE.
PERFORM WRITE_MEINS.
ENDIF.

IF F_WRK-APLFZ NE D_WRK-APLFZ.
WRITE: / '納入予定日数：' , D_WRK-APLFZ , '⇒' , F_WRK-APLFZ.
ENDIF.

IF F_WRK-EKGRP NE D_WRK-EKGRP.
WRITE: / '購買グループ：' , D_WRK-EKGRP , '⇒' , F_WRK-EKGRP.
ENDIF.

IF F_WRK-NORBM NE D_WRK-NORBM.
WRITE: / '標準発注数量：' , D_WRK-NORBM , '⇒' , F_WRK-NORBM.
ENDIF.

IF F_WRK-MINBM NE D_WRK-MINBM.
WRITE: / '最小発注数量：' , D_WRK-MINBM , '⇒' , F_WRK-MINBM.
ENDIF.

IF F_WRK-MWSKZ NE D_WRK-MWSKZ.
WRITE: / '税コード：' , D_WRK-MWSKZ , '⇒' , F_WRK-MWSKZ.
ENDIF.

* Add 2006.11.30 -->
IF F_WRK-URZTP NE D_WRK-URZTP.
WRITE: / '証明書区分：' , D_WRK-URZTP , '⇒' , F_WRK-URZTP.
ENDIF.
* Add 2006.11.30 <--
* Add 2007.04.05 -->
IF F_WRK-EVERS NE D_WRK-EVERS.
WRITE: / '出荷指示：' , D_WRK-EVERS , '⇒' , F_WRK-EVERS.
ENDIF.
* Add 2007.04.05 <--
ENDFORM.
*----------------------------------------------------------------------*
* 単位/分子/分母 出力
*----------------------------------------------------------------------*
FORM WRITE_MEINS.
DATA : W_WRITE_UMREN LIKE EINA-UMREN ,
W_WRITE_UMREZ LIKE EINA-UMREZ .

* 変更後の発注単位＝品目基本数量単位の場合
PERFORM CHK_MARA.
IF FLG_MEINS IS INITIAL .
MOVE : 1 TO F_WRK-UMREN,
1 TO F_WRK-UMREZ.
ENDIF.

CLEAR : M_WRK.
READ TABLE M_TAB INTO M_WRK WITH KEY MATNR = F_WRK-MATNR
BINARY SEARCH.

MOVE : F_WRK-UMREN TO W_WRITE_UMREN ,
F_WRK-UMREZ TO W_WRITE_UMREZ .

WRITE: / '発注単位：' ,
D_WRK-UMREN , W_MEINS ,
'<->'  ,
D_WRK-UMREZ , M_WRK-MEINS ,
'⇒' ,
W_WRITE_UMREN , F_WRK-MEINS ,
'<->'  ,
W_WRITE_UMREZ , M_WRK-MEINS .

ENDFORM.
*----------------------------------------------------------------------*
*単位変換チェック
*----------------------------------------------------------------------*
FORM CHK_MARA.
DATA :  W_CHK_MEINS LIKE MARA-MEINS.
CLEAR : FLG_MEINS.
CLEAR : M_WRK.
READ TABLE M_TAB INTO M_WRK WITH KEY MATNR = F_WRK-MATNR
BINARY SEARCH.
PERFORM CONV_UNIT_OUT_SYORI USING M_WRK-MEINS
CHANGING W_CHK_MEINS.
IF W_CHK_MEINS NE F_WRK-MEINS.
MOVE : 'X' TO FLG_MEINS .
ENDIF.

ENDFORM.
