*&---------------------------------------------------------------------*
*& Report  Y_TOOL_ISID_001
*& プログラムID : Y_TOOL_ISID_001
*& プログラム名 : ユニコードチェック化バッチインプット
*& 作成日       : 2012/07/24 ISID 小川
*& 作成者       : ISID
*& 変更履歴     : 2012/07/24 新規作成 ISID 小川
*&
*&---------------------------------------------------------------------*
*& 処理内容
*&
*&---------------------------------------------------------------------*
REPORT  Y_TOOL_ISID_001
NO STANDARD PAGE HEADING
LINE-SIZE 170
LINE-COUNT 58.
*----------------------------------------------------------------------*
*   宣言部
*----------------------------------------------------------------------*
data:
begin of w_filedata,
PROGNAME type string,
end   of w_filedata,

begin of w_data,
PROGNAME type TRDIRT-name,
end   of w_data,

begin of w_outfile,
PROGNAME type string,
progtext type string,
errormsg type string,
end   of w_outfile,

begin of w_TRDIRT,
NAME     type trdirt-NAME,
TEXT     type trdirt-TEXT,
end   of w_TRDIRT,

begin of w_progdir,
name     type progdir-name,
STATE    type PROGDIR-STATE,
SUBC     type progdir-SUBC,
UCCHECK  type PROGDIR-UCCHECK,
end   of w_progdir.

data:
i_filedata like standard table of w_filedata,
i_data     like standard table of w_data,
i_outfile  like standard table of w_outfile,
i_trdirt   like standard table of w_trdirt,
i_progdir  like standard table of w_progdir.

constants:
begin of cw_bdcoptions,
dismode  type ctu_params-dismode value 'N',
updmode  type ctu_params-updmode value 'S',
defsize  type ctu_params-defsize value 'X',
end   of cw_bdcoptions,

begin of cw_SUBC,
prog     type PROGDIR-SUBC value '1',   "実行可能プログラム
pool     type PROGDIR-SUBC value 'M',   "モジュールプール
end   of cw_SUBC,

begin of cw_state,
OK       type progdir-state value 'A',  "プログラム無効
ng       type progdir-state value 'I',  "プログラム無効
end   of cw_state,

c_tcode    type sy-tcode value 'SE38'.

*----------------------------------------------------------------------*
*   BDCdata
*----------------------------------------------------------------------*
data:
i_bdcdata type table of bdcdata,
w_bdcdata like line of i_bdcdata,
w_option  type ctu_params,
i_message type table of bdcmsgcoll,
w_message like line of i_message.

*----------------------------------------------------------------------*
*   入力画面定義
*----------------------------------------------------------------------*
parameters:
p_file   type rlgrap-filename obligatory,   "入力ファイル
p_ofile  type rlgrap-filename obligatory,   "出力ファイル
p_TRKORR type KO008-TRKORR    obligatory.   "移送番号

*----------------------------------------------------------------------*
*  AT SELECTION-SCREEN.
*----------------------------------------------------------------------*
at selection-screen on value-request for p_file.
*== ファイルオープンダイアログ出力
perform f_call_fold_open_dialog changing p_file.

at selection-screen on value-request for p_ofile.
*== ファイルセーブダイアログ出力
perform f_call_fold_save_dialog changing p_ofile.

*----------------------------------------------------------------------*
INITIALIZATION.
*----------------------------------------------------------------------*

*----------------------------------------------------------------------*
START-OF-SELECTION.
*----------------------------------------------------------------------*
*== 変数初期化
perform f_init_data.

*== ファイル取込
perform f_call_gui_upload using p_file.

*== データ格納、取込データチェック
perform f_move_data.

*== プログラム情報抽出
perform f_select_progdata.

*== バッチインプット実行
perform f_exe_bdc.

*== 処理結果出力
perform f_output_file using p_ofile.

*----------------------------------------------------------------------*
END-OF-SELECTION.
*----------------------------------------------------------------------*

*----------------------------------------------------------------------*
TOP-OF-PAGE.
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  f_call_fold_open_dialog
*&---------------------------------------------------------------------*
*       ファイル選択ダイアログ
*----------------------------------------------------------------------*
*      <--ao_path  ファイルパス
*----------------------------------------------------------------------*
form f_call_fold_open_dialog changing value(ao_path) type any.

data:
l_subrc type sy-subrc,
lt_file type filetable,
lw_file like line of lt_file.

clear:   l_subrc, lw_file.
refresh: lt_file.

check sy-batch is initial.

CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
CHANGING
FILE_TABLE              = lt_file
RC                      = L_SUBRC
EXCEPTIONS
FILE_OPEN_DIALOG_FAILED = 1
CNTL_ERROR              = 2
ERROR_NO_GUI            = 3
OTHERS                  = 4.


if sy-subrc = 0.
clear: lw_file.
read table lt_file into lw_file index 1.
ao_path = lw_file-filename.

else.

endif.

endform.                " f_call_fold_open_dialog

*&---------------------------------------------------------------------*
*&      Form  f_call_fold_save_dialog
*&---------------------------------------------------------------------*
*       ファイルオープンダイアログ出力
*----------------------------------------------------------------------*
*      -->ai_aaaa  text
*      <--ao_aaaa  text
*----------------------------------------------------------------------*
form f_call_fold_save_dialog changing value(ao_path) type any.

data:
l_filename type string,   "ファイル名
l_path     type string,   "パス名
l_filepath type string.   "フルパス名

clear: l_filename, l_path, l_filepath, ao_path.

CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_SAVE_DIALOG
*    EXPORTING
*      WINDOW_TITLE         =
*      DEFAULT_EXTENSION    =
*      DEFAULT_FILE_NAME    =
*      WITH_ENCODING        =
*      FILE_FILTER          =
*      INITIAL_DIRECTORY    =
*      PROMPT_ON_OVERWRITE  = 'X'
CHANGING
FILENAME             = l_filename
PATH                 = l_path
FULLPATH             = l_filepath
*      USER_ACTION          =
*      FILE_ENCODING        =
*    EXCEPTIONS
*      CNTL_ERROR           = 1
*      ERROR_NO_GUI         = 2
*      NOT_SUPPORTED_BY_GUI = 3
*      others               = 4
.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
display like 'E'.
stop.

else.
ao_path = l_filepath.

ENDIF.




endform.                " f_call_fold_save_dialog

*&---------------------------------------------------------------------*
*&      Form  f_init_data
*&---------------------------------------------------------------------*
*       変数初期化
*----------------------------------------------------------------------*
form f_init_data.

clear:
w_data, w_bdcdata, w_option, w_message.

refresh:
i_data, i_bdcdata, i_message.

endform.                " f_init_data


*&---------------------------------------------------------------------*
*&      Form  f_call_gui_upload
*&---------------------------------------------------------------------*
*       ファイル取込
*----------------------------------------------------------------------*
*      -->ai_file  ファイルパス
*----------------------------------------------------------------------*
form f_call_gui_upload using ai_file type any.

DATA : L_FILENAME TYPE STRING.

REFRESH i_filedata.

L_FILENAME = P_FILE.

CALL FUNCTION 'GUI_UPLOAD'
EXPORTING
FILENAME                = L_FILENAME
TABLES
DATA_TAB                = I_filedata
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
OTHERS                  = 17.

IF SY-SUBRC <> 0.
*   入力ファイルのアップロードでエラーが発生しました
MESSAGE S400(z1) with text-m01 display like 'E'.
STOP.

ENDIF.

* 入力ファイルゼロ件
IF i_filedata IS INITIAL.
*   処理対象データがありません
MESSAGE S204(z1).
STOP.

ELSE.

ENDIF.

endform.                " f_call_gui_upload

*&---------------------------------------------------------------------*
*&      Form  f_move_data
*&---------------------------------------------------------------------*
*       データ格納、取込データチェック
*----------------------------------------------------------------------*
form f_move_data.

refresh: i_data.
loop at i_filedata into w_filedata.

w_data-progname = w_filedata-progname.

append w_data to i_data.

endloop.


endform.                " f_move_data

*&---------------------------------------------------------------------*
*&      Form  f_select_progdata
*&---------------------------------------------------------------------*
*       プログラム情報抽出
*----------------------------------------------------------------------*
*      -->ai_aaaa  text
*      <--ao_aaaa  text
*----------------------------------------------------------------------*
form f_select_progdata.

check i_data is not initial.

refresh: i_TRDIRT.
select NAME      "プログラムID
TEXT      "プログラムテキスト
from TRDIRT
into table i_trdirt
for all entries in i_data
where NAME  = i_data-progname
and SPRSL = sy-LANGU.

refresh: i_progdir.
select name      "プログラムID
STATE     "ステータス
SUBC      "プログラムタイプ
UCCHECK   "ユニコードチェック
from progdir
into table i_progdir
for all entries in i_data
where name = i_data-progname
and SUBC = cw_subc-prog
or SUBC = cw_subc-pool.

endform.                " f_select_progdata

*&---------------------------------------------------------------------*
*&      Form  f_exe_bdc
*&---------------------------------------------------------------------*
*       バッチインプット実行
*----------------------------------------------------------------------*
*      -->ai_aaaa  text
*      <--ao_aaaa  text
*----------------------------------------------------------------------*
form f_exe_bdc.

data:
l_errflg  type c length 1,         "構文エラーフラグ
l_message type bapiret2-message.   "エラーメッセージ

clear: l_errflg.

*== BDCオプションをセット
perform f_set_bdcoptions.

loop at i_data into w_data.

"プログラム情報抽出
clear: l_message, l_errflg.
perform f_read_status  using w_data-progname
changing l_message.


clear: w_trdirt.
read table i_trdirt into w_trdirt with key name = w_data-progname.

if l_message is initial.



"bdc内部テーブルにセット
perform f_set_bdcdata using w_data-progname
w_trdirt-TEXT
space.

"bdc処理結果抽出
clear: l_message.
perform f_read_mdcmessage changing l_errflg
l_message.

endif.

"構文エラープログラム有効化
if l_errflg is not initial.
"bdc内部テーブルにセット
perform f_set_bdcdata using w_data-progname
w_trdirt-TEXT
l_errflg.
"bdc処理結果抽出
clear: l_message.
perform f_read_mdcmessage changing l_errflg
l_message.

endif.

"出力ファイルにレコード追加
perform f_set_outoutdata using w_data-progname
l_message.

endloop.

endform.                " f_exe_bdc

*&---------------------------------------------------------------------*
*&      Form  f_set_bdcoptions
*&---------------------------------------------------------------------*
*       BDCオプションをセット
*----------------------------------------------------------------------*
form f_set_bdcoptions.

clear: w_option.
w_option-dismode = cw_bdcoptions-dismode.
w_option-updmode = cw_bdcoptions-updmode.
w_option-defsize = cw_bdcoptions-defsize.

endform.                " f_set_bdcoptions

*&---------------------------------------------------------------------*
*&      Form  f_read_status
*&---------------------------------------------------------------------*
*       プログラム情報抽出
*----------------------------------------------------------------------*
*      -->ai_aaaa  text
*      <--ao_aaaa  text
*----------------------------------------------------------------------*
form f_read_status using value(ai_name)    type any
changing value(ao_message) type any.

clear: ao_message.

clear: w_progdir.
"ステータスが有効なプログラムかどうかcheck
read table i_progdir into w_progdir with key name = ai_name
state = cw_state-ng.

if sy-subrc <> 0.
"有効なプログラム
read table i_progdir into w_progdir with key name = ai_name
state = cw_state-ok.
if sy-subrc <> 0.
ao_message = text-m03.

else.

*      if w_progdir-uccheck is not initial.
*        "ユニコードチェック有効化済み
*        ao_message = text-m04.
*
*      else.
*        "バッチインプット処理対象プログラム
*
*      endif.

endif.

else.
clear: w_progdir.
"無効なプログラム
ao_message = text-m05.

endif.

endform.                " f_read_status

*&---------------------------------------------------------------------*
*&      Form  f_set_bdcdata
*&---------------------------------------------------------------------*
*       bdc内部テーブルにセット
*----------------------------------------------------------------------*
*      -->ai_progname
*----------------------------------------------------------------------*
form f_set_bdcdata using value(ai_progname) type any
value(ai_text) type any
value(ai_errflg)   type any.

clear: w_bdcdata.
w_bdcdata-program  = 'SAPLWBABAP'.
w_bdcdata-dynpro   = '0100'.
w_bdcdata-dynbegin = 'X'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'BDC_OKCODE'.
w_BDCDATA-FVAL    = '=CHAP'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'RS38M-PROGRAMM'.
w_BDCDATA-FVAL    = ai_progname.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'RS38M-FUNC_HEAD'.
w_BDCDATA-FVAL    = 'X'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_bdcdata-program  = 'SAPLSEDTATTR'.
w_bdcdata-dynpro   = '0200'.
w_bdcdata-dynbegin = 'X'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'RS38M-REPTI'.
w_BDCDATA-FVAL    = ai_text.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'BDC_OKCODE'.
w_BDCDATA-FVAL    = '=CONT'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'TRDIR-UCCHECK'.
w_BDCDATA-FVAL    = 'X'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_bdcdata-program  = 'SAPLSTRD'.
w_bdcdata-dynpro   = '0300'.
w_bdcdata-dynbegin = 'X'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'BDC_OKCODE'.
w_BDCDATA-FVAL    = '=LOCK'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'KO008-TRKORR'.
w_BDCDATA-FVAL    = p_trkorr.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_bdcdata-program  = 'SAPLWBABAP'.
w_bdcdata-dynpro   = '0100'.
w_bdcdata-dynbegin = 'X'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'BDC_OKCODE'.
w_BDCDATA-FVAL    = '=AKTI'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_bdcdata-program  = 'SAPLSEWORKINGAREA'.
w_bdcdata-dynpro   = '0200'.
w_bdcdata-dynbegin = 'X'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'BDC_OKCODE'.
w_BDCDATA-FVAL    = '=WEIT'.
append w_bdcdata to i_bdcdata.

if ai_errflg is not initial.
clear: w_bdcdata.
w_bdcdata-program  = 'SAPLSPO2'.
w_bdcdata-dynpro   = '0101'.
w_bdcdata-dynbegin = 'X'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'BDC_OKCODE'.
w_BDCDATA-FVAL    = '=OPT1'.
append w_bdcdata to i_bdcdata.

endif.

clear: w_bdcdata.
w_bdcdata-program  = 'SAPLWBABAP'.
w_bdcdata-dynpro   = '0100'.
w_bdcdata-dynbegin = 'X'.
append w_bdcdata to i_bdcdata.

clear: w_bdcdata.
w_BDCDATA-FNAM   = 'BDC_OKCODE'.
w_BDCDATA-FVAL    = '=BACK'.
append w_bdcdata to i_bdcdata.

refresh: i_message.
call transaction c_tcode using i_bdcdata
options from w_option
messages into i_message.

refresh: i_bdcdata.

endform.                " f_set_bdcdata

*&---------------------------------------------------------------------*
*&      Form  f_read_mdcmessage
*&---------------------------------------------------------------------*
*       bdc処理結果抽出
*----------------------------------------------------------------------*
*      -->ai_aaaa  text
*      <--ao_aaaa  text
*----------------------------------------------------------------------*
form f_read_mdcmessage changing value(ao_errflg)  type any
value(ao_message) type any.

clear: w_message, ao_message.

read table i_message into w_message with key MSGTYP = 'E'.
if sy-subrc = 0.
message id     w_message-MSGID
type   w_message-MSGTYP
number w_message-MSGNR
with   w_message-MSGV1
w_message-MSGV2
w_message-MSGV3
w_message-MSGV4
into ao_message.

else.
read table i_message into w_message with key msgtyp = 'S'
MSGID  = '00'
MSGNR  = '344'.
if sy-subrc = '0'.
"dynproエラーが存在（構文エラー）
ao_errflg = 'X'.

else.
read table i_message into w_message with key msgtyp = 'S'.
message id     w_message-MSGID
type   w_message-MSGTYP
number w_message-MSGNR
with   w_message-MSGV1
w_message-MSGV2
w_message-MSGV3
w_message-MSGV4
into ao_message.

if ao_errflg is not initial.
"構文エラーあり
concatenate text-m06 ao_message into ao_message
separated by space.

endif.

endif.

endif.

endform.                " f_read_mdcmessage

*&---------------------------------------------------------------------*
*&      Form  f_set_outoutdata
*&---------------------------------------------------------------------*
*       出力ファイルにレコード追加
*----------------------------------------------------------------------*
*      <--ai_name     プログラム名称
*      <--ai_message  出力メッセージ
*----------------------------------------------------------------------*
form f_set_outoutdata using value(ai_name)    type any
value(ai_message) type any.

clear: w_trdirt, w_outfile.
read table i_TRDIRT into w_TRDIRT with key NAME = ai_name.
w_outfile-PROGNAME = w_TRDIRT-NAME.
w_outfile-progtext = w_TRDIRT-text.
w_outfile-errormsg = ai_message.
append w_outfile to i_outfile.

endform.                " f_set_outoutdata

*&---------------------------------------------------------------------*
*&      Form  f_output_file
*&---------------------------------------------------------------------*
*       処理結果出力
*----------------------------------------------------------------------*
*      -->ai_aaaa  text
*      <--ao_aaaa  text
*----------------------------------------------------------------------*
form f_output_file changing value(ai_filename) type any.

data: l_filename type string.

clear: l_filename.
l_filename = ai_filename.

CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
FILENAME                = l_filename
WRITE_FIELD_SEPARATOR   = 'X'
TABLES
DATA_TAB                = i_outfile
EXCEPTIONS
FILE_WRITE_ERROR        = 1
NO_BATCH                = 2
GUI_REFUSE_FILETRANSFER = 3
INVALID_TYPE            = 4
NO_AUTHORITY            = 5
UNKNOWN_ERROR           = 6
HEADER_NOT_ALLOWED      = 7
SEPARATOR_NOT_ALLOWED   = 8
FILESIZE_NOT_ALLOWED    = 9
HEADER_TOO_LONG         = 10
DP_ERROR_CREATE         = 11
DP_ERROR_SEND           = 12
DP_ERROR_WRITE          = 13
UNKNOWN_DP_ERROR        = 14
ACCESS_DENIED           = 15
DP_OUT_OF_MEMORY        = 16
DISK_FULL               = 17
DP_TIMEOUT              = 18
FILE_NOT_FOUND          = 19
DATAPROVIDER_EXCEPTION  = 20
CONTROL_FLUSH_ERROR     = 21
OTHERS                  = 22.
*   出力失敗の場合
IF SY-SUBRC <> 0.
MESSAGE S400(z1) WITH text-m02.
STOP.

ENDIF.

endform.                " f_output_file
