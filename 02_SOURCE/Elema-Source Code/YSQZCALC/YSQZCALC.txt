***---------------------------------------------------------------------
** (c) Copyright 1998 OptiSystems Solutions LTD. All Rights Reserved  **
***---------------------------------------------------------------------
*-------------------------------------------------------------------
***INCLUDE YSQZCALC.
*-------------------------------------------------------------------
*&---------------------------------------------------------------------*
*&      Form  AA_MAIN
*&---------------------------------------------------------------------*
FORM AA_MAIN.
****
PERFORM PRE_AA_MAIN.
****
PERFORM AB1_PROC_EXP_SQL.
*perform ab2_proc_prog.
READ TABLE TB_TESQL INDEX 1.
EXPORT P_DAT TB_TESQL TO MEMORY ID 'ZC'.
*******
ENDFORM.                    " AA_MAIN
*&---------------------------------------------------------------------*
*&      Form  AB1_PROC_SQL
*&---------------------------------------------------------------------*
FORM AB1_PROC_EXP_SQL.
****
PERFORM AC1_SQL_EXP_LOAD_TESQL.
****
LOOP AT TB_TESQL.
PERFORM AC20_PROC_ESQL.
COMMIT WORK.
ENDLOOP.
*******
ENDFORM.                    " AB1_PROC_SQL
*&---------------------------------------------------------------------*
*&      Form  AB1_PROC_SQL
*&---------------------------------------------------------------------*
FORM INF_PROC_EXP_SQL USING PST_TESQL TYPE YSQZC_ST_TBL_EXP_SQL.
****
REFRESH TB_TESQL.
APPEND PST_TESQL TO TB_TESQL.
****
LOOP AT TB_TESQL.
PERFORM AC20_PROC_ESQL.
COMMIT WORK.
ENDLOOP.
****
READ TABLE TB_TESQL INDEX 1.
PST_TESQL = TB_TESQL.
*******
ENDFORM.                    " AB1_PROC_SQL
*&---------------------------------------------------------------------*
*&      Form  AB2_PROC_PROG
*&---------------------------------------------------------------------*
*form ab2_proc_prog.
*
*endform.                    " AB2_PROC_PROG
*&---------------------------------------------------------------------*
*&      Form  AC10_PROC_ESQL
*&---------------------------------------------------------------------*
FORM AC20_PROC_ESQL.
**** nsql
PERFORM AC21_FORM_NSQL.             "<-tb_tesql ->st_nsql + st_nsql-tbt
**** nlin
PERFORM AC22_SEARCH_LINE_IN_PROG.   " ->tb_nlin
**** status N
IF STS-SG_L = 'n'.
TB_TESQL-Y_STATUS = 'AN'.
MODIFY TB_TESQL.
PERFORM BS_MODI_ESQL USING TB_TESQL.
EXIT.
ENDIF.
**** prog
PERFORM AC23_SEARCH_PROG.           "  ->st_prg  sts-sg_p=yn
**** prog new ****
IF STS-SG_P = 'n'.
PERFORM AN1_CREATE_NEW_PROGRAM.
TB_TESQL-Y_STATUS = 'AY'.
MODIFY TB_TESQL.
PERFORM BS_MODI_ESQL USING TB_TESQL.     " <-tb_tesql
EXIT.
ENDIF.
**** prog old ****
**** ver
PERFORM AC24_CHECK_VER.  "-> tb_tlin  'n' 'y' 'v'
IF STS-SG_I = 'v'.
PERFORM AC25_DELETE_PROG.
APPEND TB_TESQL.
EXIT.
ENDIF.
**** status Y
TB_TESQL-Y_STATUS = 'AY'.
MODIFY TB_TESQL.
PERFORM BS_MODI_ESQL USING TB_TESQL.     " <-tb_tesql
**** add to prog ****
**** sql old
PERFORM AC26_SEARCH_OLD_SQL.  " -> tb_tsql + sts-sg_q
IF STS-SG_Q = 'y'.
ST_NSQL-IDS = TB_TSQL-IDS.
PERFORM BS_SAVE_TB2 USING ST_NSQL.
EXIT.
ENDIF.
****** sql new ******
**** prg
ADD 1 TO ST_PRG-FLD-KSQL.
PERFORM BS_SAVE_PRG.
**** add new sql
ST_NSQL-IDS = ST_PRG-FLD-KSQL.
PERFORM BS_SAVE_SQL USING ST_NSQL.
**** add new link
LOOP AT TB_NLIN.
**** line ****
PERFORM DB_LOAD_LINE USING TB_NLIN-IDL.
IF STS-SG_L = 'n'.
PERFORM BS_SAVE_LIN USING TB_NLIN.
ENDIF.
**** link ****
PERFORM BS_SAVE_LNK.
*******
ENDLOOP.
****
COMMIT WORK.
*******
ENDFORM.                    " AC10_PROC_ESQL
*&---------------------------------------------------------------------*
*&      Form  AC12_SEARCH_LINE_IN_PROG
*&-------------------------------------------------------------
* -> tb_nlin + sts-sg_l [yn]
*&---------------------------------------------------------------------*
FORM AC22_SEARCH_LINE_IN_PROG.
DATA: KS TYPE I.
DATA: "ltb_sqlt  type  ysqzs_tb_txts,
LTB_SELL  TYPE  YSQZS_TB_SEL_LIST    WITH HEADER LINE,
LTB_SELT  TYPE  YSQZS_TB_SEL_TXT   WITH HEADER LINE,
LTB_INDX  TYPE  YSQZS_TB_INDEX   WITH HEADER LINE.
DATA: LNAM TYPE  YSQZS_TYPES-NAM.
DATA: TB_TESQT TYPE YSQZS_TB_TXTS.
****
LNAM = ST_NSQL-IDP-NAMP.
TB_TESQT[] = ST_NSQL-TBT[].
****
CALL FUNCTION 'Y_SQ_ZS_GET_LINE_NUMBER'
EXPORTING  PNAMP  = LNAM
IMPORTING  PRC    = KS
*            PNAMI    =
*            PNUMS    =
TABLES  PTB_SQLT = TB_TESQT
PTB_SELL = LTB_SELL
PTB_SELT = LTB_SELT
PTB_INX  = LTB_INDX
EXCEPTIONS  OTHERS   = 1.
****
IF KS < 1.  STS-SG_L = 'n'.  EXIT.  ENDIF.
****
STS-SG_L = 'y'.
REFRESH TB_NLIN.
LOOP AT LTB_SELL.
**** line
CLEAR TB_NLIN.
TB_NLIN-IDP-NAMP = ST_NSQL-IDP-NAMP.
TB_NLIN-IDL-NAMI = LTB_SELL-NAMI.
TB_NLIN-IDL-NLIN = LTB_SELL-NUMS.
**** txt
LOOP AT LTB_SELT  WHERE SELN = LTB_SELL-SELN.
APPEND LTB_SELT-TXT TO TB_NLIN-TBT.
ENDLOOP.
**** idx
LOOP AT LTB_INDX  WHERE SELN = LTB_SELL-SELN.
APPEND LTB_INDX-FLD TO TB_NLIN-TBI.
ENDLOOP.
****
PERFORM MM_DEF_VERS USING TB_NLIN-IDL-NAMI TB_NLIN-VER.
APPEND TB_NLIN.
*******
ENDLOOP.
*******
ENDFORM.                    " AC12_SEARCH_LINE_IN_PROG
*&---------------------------------------------------------------------*
*&      Form  AC10_SQL_EXP_LOAD_ALL
*&---------------------------------------------------------------------*
FORM AC1_SQL_EXP_LOAD_TESQL.
* -> tb_tesql
*****
DESCRIBE TABLE TB_TESQL LINES WI.
IF WI = 0.
PERFORM DB_LOAD_ESQL_TB.
PERFORM MM_CHECK_BY_TREE.
ENDIF.
*******
ENDFORM.                    " AC10_SQL_EXP_LOAD_ALL
*&---------------------------------------------------------------------*
*&      Form  AC21_SEARCH_PROG
*&---------------------------------------------------------------------*
FORM AC23_SEARCH_PROG.
* ->  ST_PRG
**** prg
PERFORM DB_LOAD_PRG  USING ST_NSQL.   "->  st_tprg
IF STS-SG_P = 'y'.
ST_PRG = ST_TPRG.
EXIT.
ENDIF.
**** prg new
CLEAR ST_PRG.
ST_PRG-IDP = ST_NSQL-IDP.
**** s/u
IF     ST_PRG-IDP-NAMP(1) CO 'YZ'.   ST_PRG-FLD-TYPA = 'U'.
ELSEIF ST_PRG-IDP-NAMP(3) = 'SAP'
AND ST_PRG-IDP-NAMP+4(1) CO 'YZ'. ST_PRG-FLD-TYPA = 'U'.
ELSE.                                ST_PRG-FLD-TYPA = 'S'.
ENDIF.
*******
ENDFORM.                    " AC21_SEARCH_PROG
*&---------------------------------------------------------------------*
*&      Form  MM_DEF_VERS
*&---------------------------------------------------------------------*
FORM MM_DEF_VERS USING PNAMI PVER TYPE YSQZC_ST_VERS.
DATA:  LVER LIKE VRSN OCCURS 0 WITH HEADER LINE.
DATA:  TVER LIKE VRSD OCCURS 0 WITH HEADER LINE.
DATA: NUM(5) TYPE N, KS TYPE I.
****
CLEAR PVER.
****
SELECT SINGLE * FROM TRDIR WHERE NAME = PNAMI.
IF SY-SUBRC > 0.  EXIT.  ENDIF.
****
PVER-UDAT = TRDIR-UDAT.
*st_tlin-ver-vers = trdir-vern.
****
DATA: LNAM  LIKE  VRSD-OBJNAME.
*data: lnam(34).
LNAM = PNAMI.
DATA: NF(40).
IF     SY-SAPRL(1) = '3'.  NF = 'SVRS_GET_VERSION_DIRECTORY'.
ELSEIF SY-SAPRL(2) = '46'. NF = 'SVRS_GET_VERSION_DIRECTORY_46'.
ELSE.                      NF = 'SVRS_GET_VERSION_DIRECTORY_40'.
ENDIF.
*call function 'SVRS_GET_VERSION_DIRECTORY'
CALL FUNCTION NF
EXPORTING  OBJNAME      = LNAM
OBJTYPE      = 'REPS'
TABLES  LVERSNO_LIST = LVER
VERSION_LIST = TVER
EXCEPTIONS  NO_ENTRY     = 1
OTHERS       = 2.
****
*sort tser by versno.
DESCRIBE TABLE TVER LINES KS.
IF KS = 0.  EXIT.  ENDIF.
****
*sort tver by versno.
READ TABLE TVER INDEX 1.
IF TVER-KORRNUM <> ' '.
PVER-KORR = TVER-KORRNUM.
PVER-VERS = TVER-VERSNO.
EXIT.
ENDIF.
****
DATA: DD LIKE TVER-DATUM.
DD = TVER-DATUM.
LOOP AT TVER FROM 2.   " where datum > dd.
IF TVER-DATUM > DD. CONTINUE. ENDIF.
PVER-KORR = TVER-KORRNUM.
PVER-VERS = TVER-VERSNO.
EXIT.
ENDLOOP.
*****
*SELECT SINGLE * FROM E071 WHERE OBJ_NAME = TB_LIN-IDL-NAMI.
*IF SY-SUBRC = 0.  TB_LIN-VER-KORR = E071-TRKORR.  ENDIF.
*******
ENDFORM.                    " MM_DEF_VERS
*&---------------------------------------------------------------------*
*&      Form  mm_EDIT_SQL_TEXT
*&------------------------------------------------------
* Used for external calls.
*
* Performs editing of ONE select text for future use by function
* Y_SQ_ZS_GET_LINE_NUMBER. Last # is removed. Splitted words are
* concatenated.
*
* input:  i_sql_text table with text in string of length 80
*         and real length 64
* output: o_sql_text table with text in string of length 72
*&---------------------------------------------------------------------*
FORM MM_EDIT_SQL_TEXT TABLES I_SQL_TEXT STRUCTURE YSQ_SQL_TX
O_SQL_TEXT TYPE YSQZC_TB_INT_SEL_TXT.
*                              o_sql_text type ysqzs_tb_txts.
****
CONSTANTS: C_LEN TYPE I VALUE 62.
DATA: STR(161), CC.
DATA: IP(2) TYPE N, K TYPE I.
****
CLEAR:  STR,  O_SQL_TEXT.
****
LOOP AT I_SQL_TEXT.
CONCATENATE STR I_SQL_TEXT-Y_TEXT INTO STR.
**** < 64
IF STR+C_LEN = SPACE.
*     i_sql_text-y_text = str.
APPEND STR TO O_SQL_TEXT.
STR = SPACE.
CONTINUE.
ENDIF.
**** 64 = ' '
IF STR+C_LEN(1) = ' '.
I_SQL_TEXT-Y_TEXT = STR(C_LEN).
APPEND I_SQL_TEXT-Y_TEXT TO O_SQL_TEXT.
STR = STR+C_LEN.
CONTINUE.
ENDIF.
**** 64 <> ' '
IP = C_LEN. CC = STR+IP(1).
WHILE CC <> ' ' AND IP >= 0.
IP = IP - 1.  CC = STR+IP(1).
ENDWHILE.
I_SQL_TEXT-Y_TEXT = STR(IP).
APPEND I_SQL_TEXT-Y_TEXT TO O_SQL_TEXT.
STR = STR+IP.
CONTINUE.
*******
ENDLOOP.
*****
IF STR <> SPACE.
APPEND STR TO O_SQL_TEXT.
ENDIF.
**** #
DESCRIBE TABLE O_SQL_TEXT LINES K.
READ TABLE O_SQL_TEXT INDEX K.
IP = STRLEN( O_SQL_TEXT-TT ) - 1.
O_SQL_TEXT-TT+IP(1) = ' '.
MODIFY O_SQL_TEXT INDEX K.
*******
ENDFORM.                    " YSQ_EDIT_SQL_TEXT
*&---------------------------------------------------------------------*
FORM MM_EDIT_SQL_TEXT_OLD TABLES I_SQL_TEXT STRUCTURE YSQ_SQL_TX
O_SQL_TEXT TYPE YSQZC_TB_INT_SEL_TXT.
*                              o_sql_text type ysqzs_tb_txts.
****
CONSTANTS: C_LEN TYPE I VALUE 64.
DATA: TB_INPUT LIKE YSQ_SQL_TX OCCURS 0 WITH HEADER LINE,
L_INDEX TYPE I,
L_WRK TYPE I,
L_WRK1 TYPE I,
L_WRK2 TYPE I,
L_FLAG,
L_TEXT TYPE YSQZS_TYPES-TXTS,
L_TEXT_PART TYPE YSQZS_TYPES-TXTS,
L1 LIKE YSQ_SQL_TX-Y_TEXT,
L2 LIKE YSQ_SQL_TX-Y_TEXT,
L3,
L_LINES TYPE I.
****
REFRESH TB_INPUT.
TB_INPUT[] = I_SQL_TEXT[].
CLEAR L_LINES.
DESCRIBE TABLE I_SQL_TEXT LINES L_LINES.
REFRESH O_SQL_TEXT.
L_INDEX = 1.
CLEAR L_FLAG.
****
LOOP AT I_SQL_TEXT.
**** zs
CONDENSE I_SQL_TEXT-Y_TEXT.
****
IF L_FLAG IS INITIAL.
L_TEXT = I_SQL_TEXT-Y_TEXT.
ELSE.
CLEAR L_FLAG.
ENDIF.
L_INDEX = L_INDEX + 1.
IF L_INDEX > L_LINES.
L_WRK = STRLEN( L_TEXT ).
L_WRK = L_WRK - 1.
L_TEXT+L_WRK(1) = SPACE.
APPEND L_TEXT TO O_SQL_TEXT.
EXIT.
ENDIF.
L_WRK = C_LEN - 1.
READ TABLE TB_INPUT INDEX L_INDEX.
L3 = L_TEXT+L_WRK(1).
IF L3 = SPACE OR L3 = ',' OR TB_INPUT-Y_TEXT(1) = SPACE.
APPEND L_TEXT TO O_SQL_TEXT.
CONTINUE.
ENDIF.
CLEAR L_TEXT_PART.
DO C_LEN TIMES.
L3 = L_TEXT+L_WRK(1).
IF L3 = SPACE OR L3 = ','.
L_WRK1 = C_LEN - L_WRK.
L_TEXT_PART = L_TEXT+L_WRK(L_WRK1).
L_TEXT+L_WRK(L_WRK1) = SPACE.
APPEND L_TEXT TO O_SQL_TEXT.
EXIT.
ELSE.
L_WRK = L_WRK - 1.
ENDIF.
ENDDO.
**** zs
CONDENSE TB_INPUT-Y_TEXT.
****
SPLIT TB_INPUT-Y_TEXT AT SPACE INTO L1 L2.
IF L1 CS ','.
SPLIT TB_INPUT-Y_TEXT AT ',' INTO L1 L2.
ENDIF.
L_WRK2 = STRLEN( L1 ).
L_TEXT_PART+L_WRK1(L_WRK2) = L1.
APPEND L_TEXT_PART TO O_SQL_TEXT.
TB_INPUT-Y_TEXT(L_WRK2) = SPACE.
L_TEXT = TB_INPUT-Y_TEXT.
L_FLAG = 'x'.
ENDLOOP.
*******
ENDFORM.                    " YSQ_EDIT_SQL_TEXT
