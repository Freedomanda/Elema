************************************************************************
* DOCUMENTATION
* PROGRAM ID   : ZZKURA34
* PROGRAM NAME : 高千穂請求書出力対象登録
* DESCRIPTION  :
* TYPE         : REPORT
* CREATED BY   : K.KAJISA(NDSC)
* DATE         : 2001/02/13
*----------------------------------------------------------------------*
* Change Log
* Date        Author    Contents
* 2002/07/01  s.kurano  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
* 2002/07/06  k.kajisa  編集エラー受け取り機能の破棄
*                       入力ファイルのタブ区切りでの受け取り
* 2009/06/08  d.kodama  得意先マスタ会計テキストについて
*                       任意のテキストIDに対し、入力ファイルからの
*                   　　任意のテキストを登録可能なように変更
************************************************************************
REPORT zzkura34  NO STANDARD PAGE HEADING MESSAGE-ID y1
LINE-SIZE  170
LINE-COUNT  58.

* 選択画面
PARAMETERS p_file LIKE rlgrap-filename.  "入力ﾌｧｲﾙﾊﾟｽ名
PARAMETERS p_upload RADIOBUTTON GROUP radi. "ローカルよりアップロード
PARAMETERS p_server RADIOBUTTON GROUP radi. "サーバファイルを読み込み
PARAMETERS p_check AS CHECKBOX DEFAULT 'X'. "チェックのみ
PARAMETERS p_bukrs LIKE t001-bukrs OBLIGATORY. "会社コード
PARAMETERS p_obj LIKE thead-tdobject OBLIGATORY. "テキストオブジェクト
PARAMETERS p_id LIKE thead-tdid OBLIGATORY. "テキストID
* グローバル変数
DATA: BEGIN OF st_rec OCCURS 100,            "入力ファイル形式
object(10)   TYPE c,                   "オブジェクト
id(4)        TYPE c,                   "テキストID
language(1)  TYPE c,                   "言語
kunnr(10)    TYPE c,                   "得意先コード
bukrs(4)     TYPE c,                   "会社コード
vkorg(4)     TYPE c,                   "販売組織
vtweg(2)     TYPE c,                   "流通チャネル
spart(2)     TYPE c,                   "製品部門
no(4)        TYPE n,                   "連番
tdformat(2)  TYPE c,                   "タグ列
tdline(132)  TYPE c,                   "テキスト行(一列は72文字)
END OF st_rec.
DATA: tb_rec LIKE STANDARD TABLE OF st_rec  WITH HEADER LINE.
DATA  tb_tline LIKE STANDARD TABLE OF tline WITH HEADER LINE.
TYPES: BEGIN OF st_in1,
*        edit_err(1) TYPE c, "編集エラー     "2002/07/06 DEL
kschl(4) TYPE c,    "メッセージタイプ
vkorg(4) TYPE c,    "販売組織
kunnr(10) TYPE c,   "得意先コード
parvw(2) TYPE c,    "取引先機能
nacha(1) TYPE c,    "メッセージ送信媒体
vsztp(1) TYPE c,    "ディスパッチ時刻
spras(1) TYPE c,    "メッセージ言語
*2009/06/08 append start
tdline(132) TYPE c,  "テキスト行
*2009/06/08 append end
END OF st_in1.
DATA w_in1 TYPE st_in1.
DATA: wk_thead LIKE thead,
wk_name  LIKE thead-tdname,
wk_zero(10) TYPE n.                    "ゼロ埋め項目
DATA: cnt_total TYPE p,                      "入力件数
cnt_ok    TYPE p,                      "OK件数
cnt_err   TYPE p.                      "ERR件数

*----------------------------------------------------------------------*
INITIALIZATION.
GET PARAMETER ID 'BUK' FIELD p_bukrs.
p_id = 'ZK01'.
p_obj = 'KNB1'.

AT SELECTION-SCREEN.
IF p_server = 'X' AND p_file IS INITIAL.
MESSAGE e400 WITH '入力ファイル名を入力してください'.
ENDIF.

*20120510
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
* エラーファイル名の検索ヘルプ
IF p_server <> 'X'.
PERFORM F4HELP_P_OTFILE USING p_file.
ENDIF.
*20120510

START-OF-SELECTION.
PERFORM init_proc.                         "初期処理
IF p_check = 'X'.
*    PERFORM master_check.                    "チェック
PERFORM master_check USING 'X'.          "チェック MOD 2002/07/06
ELSE.
PERFORM master_check USING ''.           "チェック ADD 2002/07/06
PERFORM main_proc.                       "メイン処理
ENDIF.

*&---------------------------------------------------------------------*
*&      Form  INIT_PROC
*&---------------------------------------------------------------------*
*       初期処理
*----------------------------------------------------------------------*
FORM init_proc.
* ローカル変数
DATA i_tab TYPE STANDARD TABLE OF st_in1 WITH HEADER LINE.
*
IF p_server = 'X'.
PERFORM open_file.                 "FILEを開く
PERFORM read_file.                 "FILE読みこみ
ELSE.

*20120510
DATA :
L_FILENAME TYPE STRING.
*
IF ( P_FILE IS INITIAL ).
LEAVE LIST-PROCESSING.
ENDIF.

L_FILENAME = P_file. "出力ファイル
*
CALL FUNCTION 'GUI_UPLOAD'
EXPORTING
FILENAME                      = L_FILENAME
*     FILETYPE                      = 'DAT'
HAS_FIELD_SEPARATOR           = 'X'
*     HEADER_LENGTH                 = 0
*     READ_BY_LINE                  = 'X'
*   IMPORTING
*     FILELENGTH                    =
*     HEADER                        =
TABLES
DATA_TAB                      = i_tab
EXCEPTIONS
FILE_OPEN_ERROR               = 1
FILE_READ_ERROR               = 2
NO_BATCH                      = 3
GUI_REFUSE_FILETRANSFER       = 4
INVALID_TYPE                  = 5
NO_AUTHORITY                  = 6
UNKNOWN_ERROR                 = 7
BAD_DATA_FORMAT               = 8
HEADER_NOT_ALLOWED            = 9
SEPARATOR_NOT_ALLOWED         = 10
HEADER_TOO_LONG               = 11
UNKNOWN_DP_ERROR              = 12
ACCESS_DENIED                 = 13
DP_OUT_OF_MEMORY              = 14
DISK_FULL                     = 15
DP_TIMEOUT                    = 16
OTHERS                        = 17
.

*    CALL FUNCTION 'UPLOAD'
*         EXPORTING
*              filename                = p_file
*              filetype                = 'DAT'
*              FILETYPE_NO_CHANGE      = 'X'
*         TABLES
*              data_tab                = i_tab
*         EXCEPTIONS
*              conversion_error        = 1
*              invalid_table_width     = 2
*              invalid_type            = 3
*              no_batch                = 4
*              unknown_error           = 5
*              gui_refuse_filetransfer = 6
*              OTHERS                  = 7.
*20120510
IF sy-subrc <> 0.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.
REFRESH tb_rec.
LOOP AT i_tab.
CLEAR tb_rec.
tb_rec-object = p_obj.
tb_rec-id = p_id.
tb_rec-language = sy-langu.
tb_rec-kunnr = i_tab-kunnr.
tb_rec-bukrs = p_bukrs.
tb_rec-no = '0001'.
tb_rec-tdformat = '*'.
*2009/06/08 modify start
*      tb_rec-tdline = 'X'.
tb_rec-tdline = i_tab-tdline.
*2009/06/08 append end
PERFORM EDIT_KUNNR. "ADD 2002/07/06
APPEND tb_rec.
cnt_total = cnt_total + 1.
ENDLOOP.
ENDIF.
ENDFORM.                    " INIT_PROC
*
*&---------------------------------------------------------------------*
*&      Form  OPEN_FILE
*&---------------------------------------------------------------------*
*       FILEを開く
*----------------------------------------------------------------------*
FORM open_file.
*入力ファイル
OPEN DATASET p_file FOR INPUT IN TEXT MODE.
IF sy-subrc <> 0.
MESSAGE i401 WITH '得意先テキスト長ファイルオープンエラー'
p_file.
STOP.
ENDIF.

ENDFORM.                    " OPEN_FILE
*&---------------------------------------------------------------------*
*&      Form  READ_FILE
*&---------------------------------------------------------------------*
*        入力ファイルの読み込み
*----------------------------------------------------------------------*
FORM read_file.
DATA: W_DUMMY(1500),
W_S_DUMMY(10),
W_TAB TYPE X VALUE '09'.
CLEAR cnt_total.
REFRESH tb_rec.
DO.
CLEAR: tb_rec, w_in1.
*   READ DATASET p_file INTO tb_rec.
*2002/07/06 MOD START
*    READ DATASET p_file INTO w_in1.
*    IF sy-subrc <> 0.
*      EXIT.
*    ENDIF.
*    tb_rec-object = p_obj.
*    tb_rec-id = p_id.
*    tb_rec-language = sy-langu.
*    tb_rec-kunnr = w_in1-kunnr.
*    tb_rec-bukrs = p_bukrs.
*    tb_rec-no = '0001'.
*    tb_rec-tdformat = '*'.
*    tb_rec-tdline = 'X'.
READ DATASET p_file INTO W_DUMMY.
IF sy-subrc <> 0.      EXIT.    ENDIF.
SPLIT W_DUMMY AT W_TAB INTO
*       tb_rec-kschl
W_S_DUMMY
tb_rec-vkorg
tb_rec-kunnr
*       tb_rec-parvw
W_S_DUMMY
*       tb_rec-nacha
W_S_DUMMY
*       tb_rec-vsztp
W_S_DUMMY
*       tb_rec-spras.
W_S_DUMMY
*2009/06/08 append start
tb_rec-tdline.
*2009/06/08 append end
tb_rec-object = p_obj.
tb_rec-id = p_id.
tb_rec-language = sy-langu.
tb_rec-bukrs = p_bukrs.
tb_rec-no = '0001'.
tb_rec-tdformat = '*'.
*2009/06/08 delete start
*       tb_rec-tdline = 'X'.
*2009/06/08 delete end
PERFORM EDIT_KUNNR.
*2002/07/06 MOD END
APPEND tb_rec.
cnt_total = cnt_total + 1.
ENDDO.
CLOSE DATASET p_file.

ENDFORM.                    " READ_FILE
*&---------------------------------------------------------------------*
*&      Form  MAIN_PROC
*&---------------------------------------------------------------------*
*       メイン処理
*----------------------------------------------------------------------*
FORM main_proc.
DATA CNT_ERR2 LIKE CNT_ERR." 2002/07/06 ADD
CNT_ERR2 = CNT_ERR."マスタ検索エラー件数の確保
SORT tb_rec BY object id  language kunnr bukrs vkorg vtweg spart no.
CLEAR: cnt_err,cnt_ok.
LOOP AT tb_rec.
st_rec = tb_rec.
AT NEW spart.                "キーブレイクしたら
PERFORM call_init.      "汎用ルーチンINIT_TEXTのコール
ENDAT.
MOVE-CORRESPONDING tb_rec TO tb_tline.
APPEND tb_tline.
AT END OF spart.             "キーブレイクしたら
PERFORM call_save.      "汎用ルーチンSAVE_TEXTのコール
ENDAT.
ENDLOOP.
CALL FUNCTION 'COMMIT_TEXT'.
*実行結果の出力
*2002/07/06 マスタ検索エラー分反映
cnt_ok  = cnt_ok  - CNT_ERR2.
cnt_err = cnt_err + CNT_ERR2.
ULINE.
*
WRITE: 01  text-001 ,18 cnt_total ,text-002.
WRITE: /01 text-003 ,18 cnt_ok    ,text-002.
WRITE: /01 text-004 ,18 cnt_err   ,text-002.

ENDFORM.                    " MAIN_PROC
*&---------------------------------------------------------------------*
*&      Form  CALL_INIT
*&---------------------------------------------------------------------*
*       テキスト初期化
*----------------------------------------------------------------------*
FORM call_init.
*テキストテーブル初期化
REFRESH tb_tline.
CLEAR tb_tline.
*得意先のゼロ埋め
IF st_rec-kunnr CO '1234567890 '.
wk_zero = st_rec-kunnr.
st_rec-kunnr = wk_zero.
ENDIF.
*汎用モジュールコール用項目編集
CLEAR wk_name.
CASE st_rec-object.
WHEN 'KNA1'.
wk_name = st_rec-kunnr.
WHEN 'KNB1'.
wk_name(10)   = st_rec-kunnr.
wk_name+10(4) = st_rec-bukrs.
WHEN 'KNVV'.
wk_name(10)   = st_rec-kunnr.
wk_name+10(4) = st_rec-vkorg.
wk_name+14(2) = st_rec-vtweg.
wk_name+16(2) = st_rec-spart.
ENDCASE.
*汎用モジュールのコール
CALL FUNCTION 'INIT_TEXT'
EXPORTING
id       = st_rec-id
language = st_rec-language
name     = wk_name
object   = st_rec-object
IMPORTING
header   = wk_thead
TABLES
lines    = tb_tline.

ENDFORM.                    " CALL_INIT
*&---------------------------------------------------------------------*
*&      Form  CALL_SAVE
*&---------------------------------------------------------------------*
*       テキスト登録
*----------------------------------------------------------------------*
FORM call_save.

CALL FUNCTION 'SAVE_TEXT'
EXPORTING
header          = wk_thead
insert          = ''
savemode_direct = 'X'
TABLES
lines           = tb_tline.
IF sy-subrc <> 0.
cnt_err = cnt_err + 1.
ELSE.
cnt_ok  = cnt_ok + 1.
ENDIF.

ENDFORM.                    " CALL_SAVE
*---------------------------------------------------------------------*
*       FORM master_check                                             *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*FORM master_check.               MOD 2002/07/06
FORM master_check USING FLG_CHK." MOD 2002/07/06
* ローカル変数
DATA w_akont LIKE knb1-akont.
* チェック
CLEAR: cnt_err, cnt_ok.
LOOP AT tb_rec.
SELECT SINGLE akont
FROM   knb1
INTO   w_akont
WHERE  kunnr  = tb_rec-kunnr
AND    bukrs  = p_bukrs.
IF sy-subrc = 0.
ADD 1 TO cnt_ok.
ELSE.
ADD 1 TO cnt_err.
WRITE: / '得意先マスタなし', tb_rec-kunnr.
ENDIF.
ENDLOOP.
* 結果出力
IF FLG_CHK = 'X'.
ULINE.
WRITE: 01  text-001 ,18 cnt_total ,text-002.
WRITE: /01 text-003 ,18 cnt_ok    ,text-002.
WRITE: /01 text-004 ,18 cnt_err   ,text-002.
ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EDIT_KUNNR
*&---------------------------------------------------------------------*
*       得意先変換 2002/07/06
*----------------------------------------------------------------------*
FORM EDIT_KUNNR.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT         = TB_REC-KUNNR
IMPORTING
OUTPUT        = TB_REC-KUNNR.


ENDFORM.                    " EDIT_KUNNR
FORM F4HELP_P_OTFILE USING L_FILE.

DATA: L_IT_FNAME     TYPE FILETABLE,
L_SUBRC        TYPE I,
INIT_DIRECTORY TYPE STRING,
WINDOW_TITLE   TYPE STRING,
FILE_FILTER    TYPE STRING,
L_PATH         TYPE STRING.

FILE_FILTER = '*.*'.
L_PATH =  'C:\*.*'.
REFRESH : L_IT_FNAME.
MOVE 'C:\' TO INIT_DIRECTORY.
CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
EXPORTING  WINDOW_TITLE            =  WINDOW_TITLE
DEFAULT_FILENAME        =  L_PATH
FILE_FILTER             =  FILE_FILTER
INITIAL_DIRECTORY       =  INIT_DIRECTORY
MULTISELECTION          =  ABAP_FALSE
CHANGING   FILE_TABLE              =  L_IT_FNAME
RC                      =  L_SUBRC
EXCEPTIONS FILE_OPEN_DIALOG_FAILED =  1
CNTL_ERROR              =  2
ERROR_NO_GUI            =  3
OTHERS                  =  4
.
IF SY-SUBRC <> 0.
ELSE.
IF L_SUBRC = 1.
READ TABLE L_IT_FNAME INTO L_FILE INDEX 1.
ENDIF.
ENDIF.

ENDFORM.                    " F4HELP_P_OTFILE
