*&---------------------------------------------------------------------*
*& Report  YTESTWW_SCREEN
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  YTESTWW_SCREEN.
*&----------------------------------------------------------------------
* 型定義
*&----------------------------------------------------------------------
TYPES:
BEGIN OF TYP_TH_ALVDATA,
VKORG     TYPE ZTEGSDT203-VKORG,    "販売組織
VTWEG     TYPE ZTEGSDT203-VTWEG,    "流通チャネル
SPART     TYPE ZTEGSDT203-SPART,    "製品部門
VKBUR     TYPE ZTEGSDT203-VKBUR,    "営業所
VKGRP     TYPE ZTEGSDT203-VKGRP,    "営業グループ
KUNNR     TYPE ZTEGSDT203-KUNNR,    "受注先
NAME1     TYPE KNA1-NAME1,          "名称1
MATNR     TYPE ZTEGSDT203-MATNR,    "品目コード
TXZ01     TYPE ZTEGSDT203-TXZ01,    "テキスト (短)
MENGE     TYPE ZTEGSDT203-MENGE,    "購買発注量
MEINS     TYPE ZTEGSDT203-MEINS,    "発注単位
NETPR     TYPE ZTEGSDT203-NETPR,    "正味価格
WAERS     TYPE ZTEGSDT203-WAERS,    "通貨コード
PEINH     TYPE ZTEGSDT203-PEINH,    "価格単位
ZMEINS    TYPE ZTEGSDT203-MEINS,   "発注単位
NETWR     TYPE ZTEGSDT203-NETWR,    "正味発注額
DWERK     TYPE ZTEGSDT203-DWERK,    "出荷プラント
ZKUNNR_S  TYPE ZTEGSDT203-ZKUNNR_S, "出荷先
SNAME1    TYPE KNA1-NAME1,          "名称1
ENAME     TYPE PA0001-ENAME,        "応募者氏名
EINDT     TYPE ZTEGSDT203-EINDT,    "明細納入期日
ZTERM     TYPE ZTEGSDT203-ZTERM,    "支払条件キー
EBELN     TYPE ZTEGSDT203-EBELN,    "購買伝票番号
AEDAT     TYPE ZTEGSDT203-AEDAT,    "レコード登録日
PERNR     TYPE ZTEGSDT203-PERNR,    "営業員
ZKUNNR_ZJ TYPE ZTEGSDT203-ZKUNNR_ZJ,"最終需要者
ZKUNNR_DS TYPE ZTEGSDT203-ZKUNNR_DS,"最終需要者（商流）
EBELP     TYPE ZTEGSDT203-EBELP,    "購買伝票の明細番号
END OF TYP_TH_ALVDATA.

TYPES:
BEGIN OF TYP_TH_ALVDATA1.
INCLUDE TYPE ZTEGSDT203.
TYPES:CHK(1) TYPE C,
END OF TYP_TH_ALVDATA1.
*----------------------------------------------------------------------*
* #量定#                                                             *
*----------------------------------------------------------------------*
DATA:
ST_ZSEGSD0009 TYPE ZSEGSD0009,
TD_ALVDATA    TYPE STANDARD TABLE OF TYP_TH_ALVDATA1,
TD_ALVDATA1   TYPE STANDARD TABLE OF TYP_TH_ALVDATA1,
TH_ALVDATA    TYPE TYP_TH_ALVDATA1,
TH_ALVDATA1   TYPE TYP_TH_ALVDATA1,
GCL_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER,
GCL_ALV       TYPE REF TO CL_GUI_ALV_GRID,
OK_CODE       TYPE SY-UCOMM,
GT_FIELDCAT   TYPE LVC_T_FCAT,
GH_FIELDCAT   TYPE LVC_S_FCAT,
GS_LAYOUT     TYPE LVC_S_LAYO,
G_ERROR_FLG   TYPE CHAR1,            "画面#元格修改####
TH_MARA       TYPE MARA,
g_date        type datum.
*----------------------------------------------------------------------*
* CLASS定#
*----------------------------------------------------------------------*
CLASS: GCL_EVENT_RECEIVER DEFINITION DEFERRED.
*       GCL_EVENT_HANDLER  DEFINITION DEFERRED.

*&----------------------------------------------------------------------
* 選択画面定義(1000)
*&----------------------------------------------------------------------
PARAMETERS P_MATNR TYPE MARA-MATNR.

PARAMETERS : P_OO  RADIOBUTTON GROUP R_1 DEFAULT 'X', "OO#示
P_SEL RADIOBUTTON GROUP R_1, "##画面
P_DIS RADIOBUTTON GROUP R_1. "ALV#示

*----------------------------------------------------------------------*
* START-OF-SELECTION
*----------------------------------------------------------------------*
START-OF-SELECTION.
IF P_OO = 'X'.
CALL SCREEN 9000.
ENDIF.
IF P_SEL = 'X'.
PERFORM display_alv1 .
ENDIF.
IF P_DIS = 'X'.

ENDIF.


*&---------------------------------------------------------------------*
*&      Module  STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_9000 OUTPUT.
SET PF-STATUS 'PF_001'.
*  SET TITLEBAR 'xxx'.

ENDMODULE.                 " STATUS_9000  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  DISPLAY_ALV  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE DISPLAY_ALV OUTPUT.
PERFORM display_alv .
ENDMODULE.                 " DISPLAY_ALV  OUTPUT
*&---------------------------------------------------------------------*
*&       Class (Implementation)  GCL_EVENT_RECEIVER
*&---------------------------------------------------------------------*
*        CLASS
*----------------------------------------------------------------------*
CLASS GCL_EVENT_RECEIVER DEFINITION.
PUBLIC SECTION.
CLASS-METHODS:
**     在ALV可修改的情况下，控制数据修改
*      HANDLE_DATA_CHANGED
*          FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
*              IMPORTING ER_DATA_CHANGED E_ONF4,
*     在数据修改完成之后
HANDLE_DATA_CHANGED_FINISHED
FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID
IMPORTING E_MODIFIED.
**     在用#命令触#之后
*      HANDLE_AFTER_USER_COMMAND
*          FOR EVENT AFTER_USER_COMMAND OF CL_GUI_ALV_GRID
*              IMPORTING E_UCOMM.
ENDCLASS.               "GCL_EVENT_RECEIVER
*&---------------------------------------------------------------------*
*&       Class (Implementation)  GCL_EVENT_RECEIVER
*&---------------------------------------------------------------------*
*        CLASS
*----------------------------------------------------------------------*
CLASS GCL_EVENT_RECEIVER IMPLEMENTATION.
**&---------------------------------------------------------------------*
**&      Method HANDLE_DATA_CHANGED
**&---------------------------------------------------------------------*
**&      在ALV可修改的情况下，控制数据修改
**&---------------------------------------------------------------------*
*  METHOD HANDLE_DATA_CHANGED.
*    DATA: LWA_MOD TYPE LVC_S_MODI.
*    IF E_ONF4 <> 'X'.
*      CLEAR G_ERROR_FLG.
*    ENDIF.
*
*    LOOP AT ER_DATA_CHANGED->MT_MOD_CELLS INTO LWA_MOD.
**      IF LWA_MOD-FIELDNAME = 'PLANETYPE'.
**        READ TABLE IT_PLANE INTO WA_PLANE
**                            WITH KEY PLANETYPE = LWA_MOD-VALUE.
*        IF SY-SUBRC <> 0.
***         添加出#信息！
**          CALL METHOD ER_DATA_CHANGED->ADD_PROTOCOL_ENTRY
**            EXPORTING
**              I_MSGID     = '0K'
**              I_MSGNO     = '000'
**              I_MSGTY     = 'E'
**              I_MSGV1     = '##入正#的#机#型!'
**              I_FIELDNAME = LWA_MOD-FIELDNAME
**              I_ROW_ID    = LWA_MOD-ROW_ID.
*          G_ERROR_FLG = 'X'.
*        ENDIF.
**      ENDIF.
*    ENDLOOP.
*
*    IF E_ONF4 <> 'X'.
*      IF G_ERROR_FLG = 'X'.
*        CALL METHOD ER_DATA_CHANGED->DISPLAY_PROTOCOL.
*      ENDIF.
*    ENDIF.
*
*  ENDMETHOD.
*&---------------------------------------------------------------------*
*&      Method  HANDLE_DATA_CHANGED_FINISHED
*&---------------------------------------------------------------------*
*&      在数据修改完成之后
*&---------------------------------------------------------------------*
METHOD HANDLE_DATA_CHANGED_FINISHED.
DATA: LWA_COL TYPE LVC_S_COL,
LWA_ROW TYPE LVC_S_ROW,
LST_MODI TYPE LVC_S_MODI.
FIELD-SYMBOLS:
<LFS_ALV> TYPE TYP_TH_ALVDATA1.


E_MODIFIED = 'X'.
IF E_MODIFIED = 'X'.
**     #取当前光#所在位置
CALL METHOD GCL_ALV->GET_CURRENT_CELL
IMPORTING
ES_ROW_ID    = LWA_ROW
ES_COL_ID    = LWA_COL.
CALL METHOD GCL_ALV->REFRESH_TABLE_DISPLAY.
*     光#定位
CALL METHOD GCL_ALV->SET_CURRENT_CELL_VIA_ID
EXPORTING
IS_ROW_ID    = LWA_ROW
IS_COLUMN_ID = LWA_COL.
*      LOOP AT TD_ALVDATA ASSIGNING <LFS_ALV>.
*        IF <LFS_ALV>-MATNR = 'BY05-09S16L'.
*          LST_MODI-FIELDNAME = 'MATNR'.
*          LST_MODI-ERROR = ABAP_ON.
*          APPEND LST_MODI TO ET_GOOD_CELLS.
*          CLEAR LST_MODI.
*        ENDIF.
*      ENDLOOP.
ENDIF.
CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
EXPORTING
NEW_CODE = 'ENTR'.
CALL METHOD CL_GUI_CFW=>FLUSH.
ENDMETHOD.
**&---------------------------------------------------------------------*
**&      Method  HANDLE_AFTER_USER_COMMAND
**&---------------------------------------------------------------------*
**&      在用#命令触#之后
**&---------------------------------------------------------------------*
*  METHOD HANDLE_AFTER_USER_COMMAND.
*    CALL METHOD CL_GUI_CFW=>SET_NEW_OK_CODE
*      EXPORTING
*        NEW_CODE = 'ENTR'.
*    CALL METHOD CL_GUI_CFW=>FLUSH.
*  ENDMETHOD.
*
ENDCLASS.               "GCL_EVENT_RECEIVER

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM DISPLAY_ALV .
DATA:
LGT_EXCLUDE TYPE UI_FUNCTIONS,
LWA_VARIANT TYPE DISVARIANT,
L_VALID(1)  TYPE C,
L_EVENT_RECEIVER TYPE REF TO GCL_EVENT_RECEIVER.

IF GCL_ALV IS INITIAL .
CREATE OBJECT: GCL_CONTAINER
EXPORTING
CONTAINER_NAME = 'ALVCONT'.

CREATE OBJECT GCL_ALV
EXPORTING
I_PARENT = GCL_CONTAINER.
* ALV数据的抽取
IF TD_ALVDATA IS INITIAL.
SELECT
*
FROM ZTEGSDT203
INTO CORRESPONDING FIELDS OF TABLE TD_ALVDATA.
ENDIF.
* LAYOUT的#置
PERFORM FRM_LAYOUT_SET.
* FIELDCATA的#置
CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
EXPORTING
I_STRUCTURE_NAME = 'ZTEGSDT203'
CHANGING
CT_FIELDCAT = GT_FIELDCAT[]
EXCEPTIONS
INCONSISTENT_INTERFACE = 1
PROGRAM_ERROR = 2
OTHERS = 3.

LOOP AT GT_FIELDCAT INTO GH_FIELDCAT.
IF GH_FIELDCAT-FIELDNAME = 'EBELN'
OR GH_FIELDCAT-FIELDNAME = 'EBELP'.
GH_FIELDCAT-KEY = SPACE.
MODIFY GT_FIELDCAT FROM GH_FIELDCAT.
ENDIF.
IF GH_FIELDCAT-FIELDNAME = 'MATNR'
OR GH_FIELDCAT-FIELDNAME = 'EKORG'.
GH_FIELDCAT-EDIT = 'X'.
MODIFY GT_FIELDCAT FROM GH_FIELDCAT.
ENDIF.
ENDLOOP.
*    CLEAR GH_FIELDCAT.
*    GH_FIELDCAT-FIELDNAME = 'CHK'.
*    GH_FIELDCAT-COL_POS = 1.
*    GH_FIELDCAT-CHECKBOX = 'X'.
*    GH_FIELDCAT-NO_OUT = 'X'.
*    GH_FIELDCAT-TECH = 'X'.
*    APPEND GH_FIELDCAT to gt_fieldcat.
PERFORM EXCLUDE_TB_FUNCTIONS CHANGING LGT_EXCLUDE.
LWA_VARIANT-REPORT = SY-REPID.
CALL METHOD GCL_ALV->SET_TABLE_FOR_FIRST_DISPLAY
EXPORTING
*     I_BUFFER_ACTIVE = 'X'
*     I_BYPASSING_BUFFER = 'X'
*     I_CONSISTENCY_CHECK = 'X'
*     I_STRUCTURE_NAME =
IS_VARIANT            = LWA_VARIANT
*     I_SAVE =
*     I_DEFAULT = 'X'
IS_LAYOUT = GS_LAYOUT
*     IS_PRINT =
*     IT_SPECIAL_GROUPS =
IT_TOOLBAR_EXCLUDING = LGT_EXCLUDE
*     IT_HYPERLINK =
CHANGING
IT_OUTTAB = TD_ALVDATA[]
IT_FIELDCATALOG = GT_FIELDCAT
*     IT_SORT =
*     IT_FILTER =
EXCEPTIONS
INVALID_PARAMETER_COMBINATION = 1
PROGRAM_ERROR = 2
TOO_MANY_LINES = 3
OTHERS = 4 .
*SET HANDLER g_alv_application->handle_data_changed FOR WCL_ALV.
*CALL METHOD g_grid->register_edit_event
*EXPORTING
*i_event_id = cl_gui_alv_grid=>mc_evt_enter.
ELSE.
CALL METHOD GCL_ALV->CHECK_CHANGED_DATA  "????????????
IMPORTING
E_VALID = L_VALID.
*    CALL METHOD WCL_ALV->refresh_table_display.
ENDIF.

CREATE OBJECT L_EVENT_RECEIVER.
** 触#回#事件 在ALV可修改的情况下,控制数据修改注册
*  SET HANDLER L_EVENT_RECEIVER->HANDLE_DATA_CHANGED
*                                FOR ALL INSTANCES.
* 触#回#后事件 在数据修改完成之后注册
SET HANDLER L_EVENT_RECEIVER->HANDLE_DATA_CHANGED_FINISHED
FOR ALL INSTANCES.
* 注册更新事件（失去光#交点即触#）
CALL METHOD GCL_ALV->REGISTER_EDIT_EVENT
EXPORTING
I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_MODIFIED.
* 注册更新事件（回#即触#）
CALL METHOD GCL_ALV->REGISTER_EDIT_EVENT
EXPORTING
I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.
** 在用#命令触#之后注册
*  SET HANDLER L_EVENT_RECEIVER->HANDLE_AFTER_USER_COMMAND FOR GCL_ALV.

ENDFORM.                    " DISPLAY_ALV
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_9000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_9000 INPUT.
DATA:L_VALID TYPE CHAR1.
DATA:LWK_TOCDE TYPE SY-UCOMM.
LWK_TOCDE = OK_CODE.
IF LWK_TOCDE = 'BACK'
OR LWK_TOCDE = 'EXIT'.
LEAVE TO SCREEN 0.
ELSEIF LWK_TOCDE = 'HOLD'
OR LWK_TOCDE = SPACE.
*     CALL METHOD WCL_ALV->check_changed_data
*        IMPORTING
*          e_valid = l_valid.
*     IF l_valid = 'X'.
*
*     ENDIF.

* IF WCL_ALV->is_ready_for_input( ) = 0.
*    CALL METHOD WCL_ALV->set_ready_for_input
*      EXPORTING
*        i_ready_for_input = 1.
*  ELSE.
*    CALL METHOD WCL_ALV->refresh_table_display.

CALL METHOD GCL_ALV->CHECK_CHANGED_DATA  "????????????
IMPORTING
E_VALID = L_VALID.
IF L_VALID IS NOT INITIAL.
LOOP AT TD_ALVDATA INTO TH_ALVDATA.
MOVE-CORRESPONDING TH_ALVDATA TO TH_ALVDATA1.
MODIFY  TD_ALVDATA1 FROM TH_ALVDATA1 TRANSPORTING MATNR
WHERE EBELN = TH_ALVDATA-EBELN
AND  EBELP = TH_ALVDATA-EBELP.

ENDLOOP.
ENDIF.
*    CALL METHOD WCL_ALV->set_ready_for_input
*      EXPORTING
*        i_ready_for_input = 0.
*    CALL METHOD WCL_ALV->refresh_table_display.
*  ENDIF.
*
ELSEIF LWK_TOCDE = 'ENTR'.
SELECT COUNT(*)
FROM MARA
WHERE MATNR = TH_MARA-MATNR.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'TH_MARA-MATNR'.
MESSAGE TH_MARA-MATNR TYPE 'S' DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDIF.
ENDMODULE.                 " USER_COMMAND_9000  INPUT

FORM EXCLUDE_TB_FUNCTIONS CHANGING PT_EXCLUDE TYPE UI_FUNCTIONS .
DATA LS_EXCLUDE TYPE UI_FUNC.
LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW .
APPEND LS_EXCLUDE TO PT_EXCLUDE.
LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW .
APPEND LS_EXCLUDE TO PT_EXCLUDE.
LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW .
APPEND LS_EXCLUDE TO PT_EXCLUDE.
LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW .
APPEND LS_EXCLUDE TO PT_EXCLUDE.
LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO .
APPEND LS_EXCLUDE TO PT_EXCLUDE.
LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_REFRESH .
APPEND LS_EXCLUDE TO PT_EXCLUDE.
LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_CHECK .
APPEND LS_EXCLUDE TO PT_EXCLUDE.

LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT .
APPEND LS_EXCLUDE TO PT_EXCLUDE.

LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY .
APPEND LS_EXCLUDE TO PT_EXCLUDE.

LS_EXCLUDE = CL_GUI_ALV_GRID=>MC_MB_PASTE.
APPEND LS_EXCLUDE TO PT_EXCLUDE.
ENDFORM .
FORM DISPLAY_ALV1 .
DATA:L_LAYOUT TYPE LVC_S_LAYO.
DATA:GD_REPID TYPE SY-REPID.
GD_REPID = SY-REPID.

CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
EXPORTING
I_STRUCTURE_NAME = 'ZTEGSDT203'
CHANGING
CT_FIELDCAT = GT_FIELDCAT[]
EXCEPTIONS
INCONSISTENT_INTERFACE = 1
PROGRAM_ERROR = 2
OTHERS = 3.

SELECT
*
FROM ZTEGSDT203
INTO CORRESPONDING FIELDS OF TABLE TD_ALVDATA1.
GH_FIELDCAT-FIELDNAME = 'CHK'.
*   GH_FIELDCAT-COL_POS = 1.
GH_FIELDCAT-CHECKBOX = 'X'.
GH_FIELDCAT-NO_OUT = 'X'.
GH_FIELDCAT-TECH = 'X'.
*
APPEND GH_FIELDCAT TO GT_FIELDCAT.
L_LAYOUT-BOX_FNAME = 'CHK'.

CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
EXPORTING
*      I_INTERFACE_CHECK                 = ' '
*      I_BYPASSING_BUFFER                =
*      I_BUFFER_ACTIVE                   =
I_CALLBACK_PROGRAM                = gd_repid
I_CALLBACK_PF_STATUS_SET          = 'PRM_STATUS'
I_CALLBACK_USER_COMMAND           = 'PRM_COMM'
*      I_CALLBACK_TOP_OF_PAGE            = ' '
*      I_CALLBACK_HTML_TOP_OF_PAGE       = ' '
*      I_CALLBACK_HTML_END_OF_LIST       = ' '
*      I_STRUCTURE_NAME                  =
*      I_BACKGROUND_ID                   = ' '
*      I_GRID_TITLE                      =
*      I_GRID_SETTINGS                   =
IS_LAYOUT_LVC                     = L_LAYOUT
IT_FIELDCAT_LVC                   = gt_fieldcat
*      IT_EXCLUDING                      =
*      IT_SPECIAL_GROUPS_LVC             =
*      IT_SORT_LVC                       =
*      IT_FILTER_LVC                     =
*      IT_HYPERLINK                      =
*      IS_SEL_HIDE                       = 'X'
*      I_DEFAULT                         = 'X'
*      I_SAVE                            = ' '
*      IS_VARIANT                        =
*      IT_EVENTS                         =
*      IT_EVENT_EXIT                     =
*      IS_PRINT_LVC                      =
*      IS_REPREP_ID_LVC                  =
*      I_SCREEN_START_COLUMN             = 0
*      I_SCREEN_START_LINE               = 0
*      I_SCREEN_END_COLUMN               = 0
*      I_SCREEN_END_LINE                 = 0
*      I_HTML_HEIGHT_TOP                 =
*      I_HTML_HEIGHT_END                 =
*      IT_ALV_GRAPHICS                   =
*      IT_EXCEPT_QINFO_LVC               =
*      IR_SALV_FULLSCREEN_ADAPTER        =
*    IMPORTING
*      E_EXIT_CAUSED_BY_CALLER           =
*      ES_EXIT_CAUSED_BY_USER            =
TABLES
T_OUTTAB                          = TD_ALVDATA1
*    EXCEPTIONS
*      PROGRAM_ERROR                     = 1
*      OTHERS                            = 2
.
IF SY-SUBRC <> 0.
* Implement suitable error handling here
ENDIF.

ENDFORM.
FORM PRM_COMM USING ucomm LIKE sy-ucomm
selfield TYPE slis_selfield.
selfield-REFRESH = 'X'.
IF ucomm = 'PRO'.
CLEAR TD_ALVDATA.
LOOP AT  TD_ALVDATA1 INTO TH_ALVDATA1 WHERE chk is NOT INITIAL.
TH_ALVDATA = TH_ALVDATA1.
CLEAR TH_ALVDATA-CHK.
APPEND TH_ALVDATA TO TD_ALVDATA.
ENDLOOP.
CALL SCREEN 9000.
ENDIF.

ENDFORM.                    "USER_COMMAND
FORM PRM_STATUS USING extab TYPE slis_t_extab.

SET PF-STATUS 'ZSTANDARD'. " EXCLUDING EXTAB.

ENDFORM.                    "SET_PF_STATUS

*&---------------------------------------------------------------------*
*&      Form  FRM_LAYOUT_SET
*&---------------------------------------------------------------------*
*       布局#置
*----------------------------------------------------------------------*
FORM FRM_LAYOUT_SET .
GS_LAYOUT-CWIDTH_OPT = 'X'.
*  GS_LAYOUT-STYLEFNAME = 'CELLTAB'.              "使用CELL表#置
ENDFORM.                    " FRM_LAYOUT_SET
