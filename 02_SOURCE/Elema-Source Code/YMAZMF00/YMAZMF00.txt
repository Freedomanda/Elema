***---------------------------------------------------------------------
***          (c)Copyright 1998 OptiSystem Solution                   ***
***---------------------------------------------------------------------
*   INCLUDE ZSGRMAL
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&  form al_execution.
*&---------------------------------------------------------------------*
form al_execution.
****
PERFORM AL_BACK_SCR.
PERFORM AL_PREP_INF.
****
CHECK STS-PRS = 'x'.
*   perform fm_out_zakaz.
*   perform fm_out_obj.
CASE STS-REG.
WHEN 'tg'.  PERFORM FM_OUT_GR_1.
WHEN 'cp'.  PERFORM FM_OUT_GR_1.
*when 'cr'.  perform fm_out_corr.
*when 'ca'.  perform fm_out_corr.
*when 'ci'.  perform fm_out_corr.
ENDCASE.
*******
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  al_anl_screen
*&---------------------------------------------------------------------*
form al_anl_screen.
*** analisys of screen
data: l_rkpar type i, l_mkpar type i, l_rp(3) type p, rs(3),
l_rd1 type i, l_rd2 type i,
RCODE TYPE I.
*** reg
sts-prs = 'x'.
case sts-reg.
when 'tg'.  tb_z-title = text-002.   l_mkpar = c_mp_tgr.
when 'cp'.  tb_z-title = text-001.   l_mkpar = c_mp_com.
*   when 'cr'.  tb_z-title = text-004.   l_mkpar = c_mp_cor.
*   when 'ca'.  tb_z-title = text-010.   l_mkpar = c_mp_cor.
WHEN OTHERS.TB_Z-TITLE = ' '.        L_MKPAR = 99999.
ENDCASE.
*** check tb_ip & tb_un
l_rkpar = 0.  refresh tb_un.  refresh tb_srv.
LOOP AT TB_SCR WHERE SG_AC <> ' '.
add 1 to l_rkpar.
TB_UN-U     = TB_SCR-UNIT. COLLECT TB_UN.
TB_SRV-SRV  = TB_SCR-SRV.  COLLECT TB_SRV.
ENDLOOP.
*** limits
if l_rkpar > l_mkpar and sts-prm = ' '.
l_rp = l_mkpar. rs = l_rp.
CALL FUNCTION 'Z_ZSGR_POPUP_MESS'
EXPORTING CODM    = 'mp'
HEADLINE = 'Manager'
text3   = tb_z-title
TEXT5   = RS
SCRNMB  = 'zs-anls'
TICON   = 'Q'
IMPORTING   BUTTON_PRESSED = RCODE
EXCEPTIONS  OTHERS = 1.
sts-prs = 'e'.
ENDIF.
*** unit ***
if ( sts-reg = 'cp' or sts-reg = 'tg' ) and sts-prs = 'x'.
describe table tb_un lines sts-ku.
if sts-kg > 2 and sts-ku > 1 and sts-prm = ' '.
CALL FUNCTION 'Z_ZSGR_POPUP_MESS'
EXPORTING CODM    = 'un'   TICON   = 'Q'
HEADLINE = 'Manager'
IMPORTING   BUTTON_PRESSED = RCODE
EXCEPTIONS  OTHERS = 1.
if rcode <> 1. sts-prs = 'e'.  endif.
ENDIF.
ENDIF.
****
PERFORM AL_ANL_11.
*******
ENDFORM.                    " PP_ANL_SCREEN
*&---------------------------------------------------------------------*
*&      Form  al_prep_inf
*&---------------------------------------------------------------------*
form al_prep_inf.
*** prepare information for graphs
DATA L_KSRV TYPE I.
***** fm-zakaz *****
PERFORM FM_OUT_ZAKAZ.
sts-ntp = 0.
***** regim *********
sts-prs = ' '.   sts-pre = ' '.   sts-prmesnv = ' '.
DESCRIBE TABLE TB_SRV LINES L_KSRV.
*******
loop at tb_ip.
check tb_ip-dop-sg_ac <> ' '.
sts-tnpar = sy-tabix.
****
PERFORM AL_PREP_PAR USING L_KSRV.
****
if sts-pre <> ' '. sts-prs = 'e'. exit.  endif.
ENDLOOP.
*******
if sts-prs = 'e' and sts-reg = 'ci'.
MESSAGE ID 'Y>' TYPE 'I' NUMBER 6.
ENDIF.
*******
ENDFORM.                    " PP_PREP_TBLS
*&---------------------------------------------------------------------*
*&      Form  REG_PREP_ZKZ
*&---------------------------------------------------------------------*
FORM AL_PREP_ZKZ.
*** prepare new request
clear tb_z.  def_cr tb_j.
def_cr tb_g. def_cr tb_f.
***
tb_z-rgr  = sts-reg.
tb_z-dat1 = sts-dfrom.     tb_z-tim1 = sts-tfrom.
tb_z-dat2 = sts-dto.       tb_z-tim2 = sts-tto.
tb_z-dat12 = sts-d12.      tb_z-tim12 = sts-t12.
tb_z-dat22 = sts-d22.      tb_z-tim22 = sts-t22.
ENDFORM.                    " REG_PREP_ZKZ
*&---------------------------------------------------------------------*
*&      Form  REG_PREP_PAR
*&---------------------------------------------------------------------*
FORM AL_PREP_PAR USING KSRV.
*** prepare information for parameter
DATA: RN TYPE N, TCLL(20), NSRV(20), TNG(5),
KFF LIKE SY-TABIX.
***
g_rdat1 = sts-dfrom.  g_rdat2 = sts-dto.  g_rdel = 0.
g_rtim1 = sts-tfrom.  g_rtim2 = sts-tto.
***
if sts-reg = 'cp'. sts-kkcom = 2.
else.                sts-kkcom = 1.
ENDIF.
******
KFF = 0.
do sts-kkcom times.
***** tb_j *****
def_cr tb_j.     tb_j-nobj = 1.
TB_J-NAMOBJ = TB_IP-PRM-NAMP.
tb_j-n1par = 1.  tb_j-kpar = tb_j-kgr = 1.
append tb_j.
***** tb_g *****
def_cr tb_g.
tb_g-nobj = 1.  tb_g-npar = tb_g-ngr = 1.
TB_G-SCALE  = TB_IP-CR-PSCALE.
*** comp - rn
if sts-reg <> 'cp'. tng = ' '.
ELSE.   RN = SY-INDEX.
CONCATENATE '=' RN  INTO TNG.
ENDIF.
CONCATENATE '.[' TB_IP-DOP-SRV '].' INTO NSRV.
*** npar
CONCATENATE TB_IP-PRM-TXT TCLL NSRV
TNG '..<' TB_IP-PRM-UNIT '>..' INTO TB_G-NAMPAR.
translate tb_g-nampar to upper case.
tb_g-npar = sts-tnpar.
append tb_g.
***** tb_f *****
def_cr tb_f.  tb_f-nobj = 1.
****
PERFORM OBJS_IN_FF.
****
DESCRIBE TABLE TB_F LINES KFF.
if sts-ntp < kff. sts-ntp = kff.  endif.
****
PERFORM FM_OUT_OBJ.
****
g_rdat1 = sts-d12.   g_rdat2 = sts-d22.    g_rdel = sts-deld.
g_rtim1 = sts-t12.   g_rtim2 = sts-t22.
ENDDO.
*** not value
DATA: BUT.
***
if kff <> 0. sts-prs = 'x'.
elseif sts-prm = ' ' and sts-prmesnv = ' ' and sts-prs <> '1' and
sts-reg <> 'cr' and sts-reg <> 'ca' and sts-reg <> 'ci'.
CALL FUNCTION 'Z_ZSGR_POPUP_MESS'
exporting  codm = 'nv'  text4 = tb_g-nampar
HEADLINE = 'Manager'
IMPORTING  BUTTON_PRESSED = BUT
EXCEPTIONS  OTHERS         = 1.
CASE BUT.
when '2'.  sts-prmesnv = 'd'.
when '3'.  sts-pre = 'e'.
ENDCASE.
ENDIF.
*******
ENDFORM.                    " REG_PREP_PAR
*&---------------------------------------------------------------------*
*&      Form  AL_ANL_11
*&---------------------------------------------------------------------*
FORM AL_ANL_11.
*** analisys of screen 1111
data: l_rkpar type i, l_mkpar type i, l_rp(3) type p, rs(3).
data: l_rd1 type i, l_rd2 type i.
DATA: RCODE TYPE I.
*** date-time
if sts-dfrom > sts-dto.  sts-dto = sts-dfrom. endif.
if sts-d12   > sts-d22.
sts-d22 = sts-d12 + ( sts-dto - sts-dfrom ).
ENDIF.
***
clear st_dii.  st_dii-rdate = sts-dfrom.
st_dii-rtime = sts-tfrom.
CALL FUNCTION 'Y_MA_ZS_INTERVAL'
exporting mode = 'ti'   si = st_dii
importing               so = st_dii
EXCEPTIONS
EMPTY_IN_YTR_INTERV    = 1
IT_IS_LAST_INTERVAL  = 2
IT_IS_FIRST_INTERVAL = 3
OTHERS               = 4.
sts-ifr = st_dii-no_cycle.
***
clear st_dii.  st_dii-rdate = sts-dto.
st_dii-rtime = sts-tto.
CALL FUNCTION 'Y_MA_ZS_INTERVAL'
exporting mode = 'ti'   si = st_dii
importing               so = st_dii
EXCEPTIONS
EMPTY_IN_YTR_INTERV    = 1
IT_IS_LAST_INTERVAL  = 2
IT_IS_FIRST_INTERVAL = 3
OTHERS               = 4.
sts-ito = st_dii-no_cycle.
*** comparing
if sts-reg   = 'cp'.
clear st_dii.  st_dii-rdate = sts-d12.  st_dii-rtime = sts-t12.
CALL FUNCTION 'Y_MA_ZS_INTERVAL'
exporting mode = 'ti'   si = st_dii
importing               so = st_dii
EXCEPTIONS
EMPTY_IN_YTR_INTERV    = 1
IT_IS_LAST_INTERVAL  = 2
IT_IS_FIRST_INTERVAL = 3
OTHERS               = 4.
sts-i12 = st_dii-no_cycle.
***
clear st_dii.  st_dii-rdate = sts-d22.  st_dii-rtime = sts-t22.
CALL FUNCTION 'Y_MA_ZS_INTERVAL'
exporting mode = 'ti'   si = st_dii
importing               so = st_dii
EXCEPTIONS
EMPTY_IN_YTR_INTERV    = 1
IT_IS_LAST_INTERVAL  = 2
IT_IS_FIRST_INTERVAL = 3
OTHERS               = 4.
sts-i22 = st_dii-no_cycle.
***
sts-deld  = sts-dfrom - sts-d12.
l_rd1 = sts-dto - sts-dfrom.
l_rd2 = sts-d22 - sts-d12.
if l_rd1 < l_rd2. sts-d22 = sts-d12   + l_rd1.
else.         sts-dto = sts-dfrom + l_rd2.
ENDIF.
else.   sts-deld  = 0.
ENDIF.
***
ENDFORM.                    " AL_ANL_11
*&---------------------------------------------------------------------*
*&      Form  FM_DOCUMENT
*&---------------------------------------------------------------------*
FORM FM_DOCUMENT.
*** prepare document for help
DATA: PARAMETER LIKE RSFIN-TXTKEY VALUE 'TXYTRG_',
L_NTIP TYPE I.
***
IF SY-CUROW <> TOP_TIP_SC.  EXIT.  ENDIF.
***
get cursor line sts-curlin.
sts-inxtip = sts-ltop + sts-curlin - 1.
DESCRIBE TABLE TB_IP LINES L_NTIP.
if sts-inxtip > l_ntip.  exit.  endif.
***
read table tb_ip index sts-inxtip.
***
CALL FUNCTION 'SF_SHOW_DOKU'
EXPORTING
KEY    = PARAMETER
EXCEPTIONS
OTHERS = 1.
*******
ENDFORM.                    " FM_DOCUMENT
*&---------------------------------------------------------------------*
*&      Form  DB_LOAD_SRV
*&---------------------------------------------------------------------*
FORM DB_LOAD_SRV.
****
SELECT DISTINCT YMA_MSNAME FROM YMA_OP_MOD INTO TABLE TB_SRV
WHERE YMA_MSNAME <> SPACE.
*                                                            .
*select distinct yop_msname from yma_tree_u into table tb_srv.
*******
ENDFORM.                    " DB_LOAD_SRV
