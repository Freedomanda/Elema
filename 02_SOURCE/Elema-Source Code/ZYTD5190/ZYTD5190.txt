************************************************************************
*  REPORT    ZYTD5190
*  PROGRAM   購買情報マスタテキスト行指定一括更新
*  MAKE DATE 2006.10.10
*  CODED BY  k.kajisa(NDSC)
*  変更履歴
*& YYYY/MM/DD  Programar         Description
*& 2012/11/27  ISID              ES-UP
************************************************************************
REPORT ZYTD5190 LINE-SIZE 170 MESSAGE-ID Z1.

*----------------------------------------------------------------------*
* 型定義
*----------------------------------------------------------------------*
TYPES : BEGIN OF TYP_FILE,
LIFNR(010) TYPE C,          "仕入先コード
MATNR(018) TYPE C,          "品目コード
WERKS(004) TYPE C,          "プラント
HANFL(001) TYPE C,          "判定フラグ
GYOSU(002) TYPE C,          "行数
UPKBN(001) TYPE C,          "更新区分
TEXT(132)  TYPE C,          "テキスト内容
END OF TYP_FILE,
BEGIN OF TYP_DATA,
INFNR LIKE EINA-INFNR,     "購買情報番号
LIFNR LIKE EINA-LIFNR,     "仕入先コード
MATNR LIKE EINA-MATNR,     "品目コード
EKORG LIKE EINE-EKORG,     "購買組織
ESOKZ LIKE EINE-ESOKZ,     "購買情報区分
WERKS LIKE EINE-WERKS,     "プラント
HANFL TYPE C,              "判定フラグ
GYOSU TYPE I,              "行数
UPKBN TYPE C,              "更新区分
TEXT  LIKE TLINE-TDLINE,   "テキスト内容
END OF TYP_DATA.

*----------------------------------------------------------------------*
* 変数宣言
*----------------------------------------------------------------------*
DATA : F_TAB TYPE TABLE OF TYP_FILE,    "入力ファイルデータ格納用
F_WRK TYPE TYP_FILE,             "入力ファイルデータ格納用
D_TAB TYPE TABLE OF TYP_DATA,    "更新データ格納用
D_WRK TYPE TYP_DATA.             "更新データ格納用

*----------------------------------------------------------------------*
* 定数宣言
*----------------------------------------------------------------------*
CONSTANTS: CO_TAB TYPE X VALUE '09',    "タブ
CO_CHU TYPE C VALUE 'C',     "判別フラグ（購買情報注記）
CO_TXT TYPE C VALUE 'T',     "判別フラグ（購買情報テキスト）
CO_UPK TYPE C VALUE 'Y',                   "更新区分
CO_EKORG TYPE EINE-EKORG VALUE '1000',     "購買組織
CO_ID_C  TYPE THEAD-TDID VALUE 'AT',       "購買情報注記
CO_ID_T  TYPE THEAD-TDID VALUE 'BT',       "購買情報テキスト
CO_OBJ_C TYPE THEAD-TDOBJECT VALUE 'EINA', "購買情報注記
CO_OBJ_T TYPE THEAD-TDOBJECT VALUE 'EINE'. "購買情報テキスト
* Add ES-UP 2012/11/27 -->
CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
* Add ES-UP 2012/11/27 <--
*----------------------------------------------------------------------*
* 選択画面
*----------------------------------------------------------------------*
PARAMETERS : P_FILE LIKE RLGRAP-FILENAME OBLIGATORY,    "ファイル名
P_LOCAL RADIOBUTTON GROUP R_1,  "ローカルアップロード
P_SERVE RADIOBUTTON GROUP R_1,  "サーバーアップロード
P_TEXE AS CHECKBOX DEFAULT 'X'. "テスト実行

*----------------------------------------------------------------------*
* AT SELECTION-SCREEN
*----------------------------------------------------------------------*
AT SELECTION-SCREEN.

*----------------------------------------------------------------------*
* AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE
*----------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
PERFORM WS_FILENAME_GET USING P_FILE.

*----------------------------------------------------------------------*
* START-OF-SELECTION
*----------------------------------------------------------------------*
START-OF-SELECTION.

* ファイル読込
PERFORM READ_FILE TABLES F_TAB.
* 購買情報読込
PERFORM DATA_GET TABLES  F_TAB
D_TAB.
* 購買情報注記、購買情報テキストの取得と更新
LOOP AT D_TAB INTO D_WRK .
PERFORM SET_TEXT USING D_WRK.
ENDLOOP .

*----------------------------------------------------------------------*
* ファイルパス取得
*----------------------------------------------------------------------*
FORM WS_FILENAME_GET USING P_FILE.
* Mod ES-UP 2012/11/27 -->
*  CALL FUNCTION 'WS_FILENAME_GET'
*       EXPORTING
*            DEF_PATH         = 'C:\SAPDATA'
*            MASK             = '*.*,ALL FILES,*.*.'
*            MODE             = 'O'
*       IMPORTING
*            FILENAME         = P_FILE
*       EXCEPTIONS
*            INV_WINSYS       = 1
*            NO_BATCH         = 2
*            SELECTION_CANCEL = 3
*            SELECTION_ERROR  = 4
*            OTHERS           = 5.
*  IF NOT SY-SUBRC IS INITIAL.
*    MESSAGE E400 WITH 'ファイル名称が取得できません'.
*  ENDIF.
DATA: L_FILE_TABLE TYPE FILETABLE,
L_FILE       TYPE REF TO FILE_TABLE,
L_TITLE      TYPE STRING,
L_RC         TYPE I.
L_TITLE = ``.
CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG(
EXPORTING
WINDOW_TITLE            = L_TITLE
*      DEFAULT_EXTENSION       = DEFAULT_EXTENSION
*      DEFAULT_FILENAME        = DEFAULT_FILENAME
*      FILE_FILTER             = FILE_FILTER
*      WITH_ENCODING           = WITH_ENCODING
*      INITIAL_DIRECTORY       = INITIAL_DIRECTORY
*      MULTISELECTION          = MULTISELECTION
CHANGING
FILE_TABLE              = L_FILE_TABLE
RC                      = L_RC
*      USER_ACTION             = USER_ACTION
*      FILE_ENCODING           = FILE_ENCODING
EXCEPTIONS "POVの時は、すべて0にすること
FILE_OPEN_DIALOG_FAILED = 0
CNTL_ERROR              = 0
ERROR_NO_GUI            = 0
NOT_SUPPORTED_BY_GUI    = 0
OTHERS                  = 0 ).
IF L_RC > 0.
READ TABLE L_FILE_TABLE REFERENCE INTO L_FILE INDEX 1.
IF SY-SUBRC = 0.
P_FILE = L_FILE->FILENAME.
ENDIF.
ENDIF.
* Mod ES-UP 2012/11/27 <--
ENDFORM.
*----------------------------------------------------------------------*
* ファイル読み込み
*----------------------------------------------------------------------*
FORM READ_FILE TABLES OUT_TAB.

DATA: L_LINE(1000) TYPE C,
L_CNT        TYPE I,
LIT_TAB TYPE TABLE OF TYP_FILE.    "入力ファイルデータ格納用
* Add ES-UP 2012/11/27 -->
DATA: L_FILENAME TYPE STRING,
L_CODEPAGE TYPE ABAP_ENCODING.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
* Add ES-UP 2012/11/27 <--
IF P_SERVE EQ 'X' .
* サーバアップロードを指定
*   サーバファイルオープン
* Mod ES-UP 2012/11/27 -->
*    OPEN DATASET P_FILE FOR INPUT IN TEXT MODE.
OPEN DATASET P_FILE FOR INPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
* Mod ES-UP 2012/11/27 <--
*   ファイルオープン失敗時、エラーメッセージ出力
IF NOT SY-SUBRC IS INITIAL.
MESSAGE I209.
STOP.
ELSE .
*     ファイルオープン成功時、読込処理開始
DO .
*       ファイルを1件ずつ読込
READ DATASET P_FILE INTO L_LINE.

IF NOT SY-SUBRC IS INITIAL.
*         読込不可の場合、ループを終了
EXIT.
ENDIF.
*       読込可能の場合、Tabで分割し内部テーブルに追加
* Mod ES-UP 2012/11/27 -->
*        SPLIT L_LINE AT CO_TAB
SPLIT L_LINE AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
* Mod ES-UP 2012/11/27 <--
INTO F_WRK-LIFNR  "仕入先コード
F_WRK-MATNR  "品目コード
F_WRK-WERKS  "プラント
F_WRK-HANFL  "判定フラグ
F_WRK-GYOSU  "行数
F_WRK-UPKBN  "更新区分
F_WRK-TEXT.  "テキスト内容
APPEND F_WRK TO LIT_TAB.
*       初期化
CLEAR F_WRK.
ENDDO.
*     サーバファイルクローズ
CLOSE DATASET P_FILE.
ENDIF.
ELSE.
* ローカルアップロードを指定
*   ローカルファイルアップロード汎用モジュール呼出
* Mod ES-UP 2012/11/27 -->
*    CALL FUNCTION 'WS_UPLOAD'
*         EXPORTING
*              FILENAME                = P_FILE
*              FILETYPE                = 'DAT'
*         TABLES
*              DATA_TAB                = LIT_TAB
*         EXCEPTIONS
*              CONVERSION_ERROR        = 1
*              FILE_OPEN_ERROR         = 2
*              FILE_READ_ERROR         = 3
*              INVALID_TYPE            = 4
*              NO_BATCH                = 5
*              UNKNOWN_ERROR           = 6
*              INVALID_TABLE_WIDTH     = 7
*              GUI_REFUSE_FILETRANSFER = 8
*              CUSTOMER_ERROR          = 9
*              OTHERS                  = 10.
L_FILENAME = P_FILE.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
CL_GUI_FRONTEND_SERVICES=>GUI_UPLOAD(
EXPORTING
FILENAME                = L_FILENAME
FILETYPE                = 'DAT'
HAS_FIELD_SEPARATOR     = ABAP_TRUE
*      HEADER_LENGTH           = 0
*      READ_BY_LINE            = 'X'
*      DAT_MODE                = SPACE
CODEPAGE                = L_CODEPAGE
*      IGNORE_CERR             = ABAP_TRUE
*      REPLACEMENT             = '#'
*      VIRUS_SCAN_PROFILE      = VIRUS_SCAN_PROFILE
*    IMPORTING
*      FILELENGTH              = FILELENGTH
*      HEADER                  = HEADER
CHANGING
DATA_TAB                = LIT_TAB
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
NOT_SUPPORTED_BY_GUI    = 17
ERROR_NO_GUI            = 18
OTHERS                  = 19 ).
* Mod ES-UP 2012/11/27 <--
*   汎用モジュール失敗時エラーメッセージ出力
IF NOT SY-SUBRC IS INITIAL.
MESSAGE I209.
STOP.
ENDIF.
ENDIF.

* 取得データ０件時エラーメッセージ出力
DESCRIBE TABLE LIT_TAB LINES L_CNT.
IF L_CNT IS INITIAL.
MESSAGE I616.
STOP.
ENDIF.

* 取得データ変換
LOOP AT LIT_TAB INTO F_WRK.
*   判定フラグの確認
IF F_WRK-HANFL NE CO_CHU AND F_WRK-HANFL NE CO_TXT.
WRITE : / '品目'     , F_WRK-MATNR,
'仕入先'   , F_WRK-LIFNR,
'プラント' , F_WRK-WERKS,
/ 'の判定フラグは''C''もしくは''T''を指定してください。'.
*       次レコード読込
CONTINUE.
ENDIF.
*   仕入先コードの頭ゼロ埋め
PERFORM CONV_ALPHA_IN_SYORI USING F_WRK-LIFNR
CHANGING F_WRK-LIFNR.
*   品目コードの変換
PERFORM CONV_MATN1_IN_SYORI USING F_WRK-MATNR
CHANGING F_WRK-MATNR.
*   内部テーブル追加
APPEND F_WRK TO OUT_TAB.
ENDLOOP.

ENDFORM.
*----------------------------------------------------------------------*
* 対象データ取得
*----------------------------------------------------------------------*
FORM DATA_GET TABLES IN_TAB
OUT_TAB.
* ローカルオブジェクト
DATA L_NUM(2) TYPE N.

LOOP AT IN_TAB INTO F_WRK.

*   初期化
CLEAR: D_WRK, L_NUM.

*   購買情報: 一般データ(EINA)読込
SELECT SINGLE INFNR FROM EINA INTO D_WRK-INFNR
WHERE MATNR = F_WRK-MATNR   "入力ファイルの品目コード（変換後）
AND   LIFNR = F_WRK-LIFNR.  "入力ファイルの仕入先コード（変換後）

IF NOT SY-SUBRC IS INITIAL.
*     購買情報: 一般データ(EINA)が読込めない場合、エラーメッセージを出力
WRITE : / '品目'     , F_WRK-MATNR,
'仕入先'   , F_WRK-LIFNR,
/ 'の購買情報は存在しませんでした。'.
*     次レコード読込
CONTINUE.
ENDIF.

*     ファイル内容を代入
D_WRK-LIFNR = F_WRK-LIFNR.  "仕入先コード
D_WRK-MATNR = F_WRK-MATNR.  "品目コード
D_WRK-WERKS = F_WRK-WERKS.  "プラント
D_WRK-HANFL = F_WRK-HANFL.  "判別フラグ
D_WRK-UPKBN = F_WRK-UPKBN.  "更新区分
D_WRK-TEXT  = F_WRK-TEXT.   "テキスト内容

*     行数判定
L_NUM = F_WRK-GYOSU.

IF L_NUM IS INITIAL OR
L_NUM > 5.
*       エラーメッセージを出力
WRITE : / '品目'     , F_WRK-MATNR,
'仕入先'   , F_WRK-LIFNR,
'プラント' , F_WRK-WERKS,
/ 'の行数が不正です。'.
*       次レコード読込
CONTINUE.
ELSE.
D_WRK-GYOSU = L_NUM.  "行数
ENDIF.

IF F_WRK-HANFL = CO_TXT.
* 判別フラグが'T'の場合、購買情報: 購買組織データ(EINE)を読込
SELECT SINGLE EKORG ESOKZ FROM EINE
INTO (D_WRK-EKORG, D_WRK-ESOKZ)
WHERE INFNR = D_WRK-INFNR   "EINAから取得した購買情報番号
AND   EKORG = CO_EKORG                              "1000固定
AND   WERKS = F_WRK-WERKS.  "入力ファイルのプラント

IF NOT SY-SUBRC IS INITIAL.
*     購買情報: 購買組織データ(EINE)が読込めない場合、
*     エラーメッセージを出力
WRITE : / '品目'     , F_WRK-MATNR,
'仕入先'   , F_WRK-LIFNR,
'プラント' , F_WRK-WERKS,
/ 'の購買情報は存在しませんでした。'.
*     次レコード読込
CONTINUE.
ENDIF.
ENDIF.

* 購買情報注記、購買情報テキスト取得用データ作成
APPEND D_WRK TO OUT_TAB.

ENDLOOP.

ENDFORM.
*----------------------------------------------------------------------*
* 購買情報テキスト更新
*----------------------------------------------------------------------*
FORM SET_TEXT USING IN_WRK TYPE TYP_DATA.

* ローカルオブジェクト宣言
DATA: L_ID      TYPE THEAD-TDID,      "ID格納用
L_NAME    TYPE THEAD-TDNAME,    "NAME格納用
L_OBJECT  TYPE THEAD-TDOBJECT,  "OBJECT格納用
L_WRK     TYPE TLINE,           "購買情報更新用
LIT_TAB   TYPE TABLE OF TLINE,  "購買情報更新用
L_CNT     TYPE I,               "空白行設定用カウンタ
L_DBCNT   TYPE I,               "内部テーブル件数
L_NCNT(2) TYPE N,               "メッセージ用行数
L_TEXT_B  TYPE TLINE-TDLINE.    "変更前テキスト内容

IF IN_WRK-HANFL = CO_CHU.
*   判別フラグが購買情報注記の場合
L_ID     = CO_ID_C.       "ID
L_NAME   = IN_WRK-INFNR.  "NAME
L_OBJECT = CO_OBJ_C.      "OBJECT
ELSE.
* 判別フラグが購買情報テキストの場合
*   ID
L_ID     = CO_ID_T.
*   NAME
CONCATENATE IN_WRK-INFNR
IN_WRK-EKORG
IN_WRK-ESOKZ
IN_WRK-WERKS
INTO L_NAME.
*   OBJECT
L_OBJECT = CO_OBJ_T.
ENDIF.

* 購買情報注記、購買情報テキストの取得
PERFORM READ_TEXT TABLES LIT_TAB
USING  L_ID L_NAME L_OBJECT.

L_NCNT = IN_WRK-GYOSU.

*
IF LIT_TAB IS INITIAL.
*   空白行追加処理
L_CNT = IN_WRK-GYOSU - 1.

DO L_CNT TIMES.
APPEND INITIAL LINE TO LIT_TAB.
ENDDO.

*   テキスト行
L_WRK-TDLINE = IN_WRK-TEXT.

APPEND L_WRK TO LIT_TAB.

ELSE.

*   購買情報件数取得
DESCRIBE TABLE LIT_TAB LINES L_DBCNT.

IF L_DBCNT < IN_WRK-GYOSU.
*     購買情報の件数が指定された行数より小さい場合
L_CNT = IN_WRK-GYOSU - L_DBCNT - 1.
DO L_CNT TIMES.
APPEND INITIAL LINE TO LIT_TAB.
ENDDO.

*     テキスト行
L_WRK-TDLINE = IN_WRK-TEXT.

APPEND L_WRK TO LIT_TAB.

ELSE.
*     購買情報の件数が指定された行数以上の場合
READ TABLE LIT_TAB INTO L_WRK INDEX IN_WRK-GYOSU.
*     変更前テキスト内容退避
L_TEXT_B = L_WRK-TDLINE.
IF L_WRK-TDLINE = IN_WRK-TEXT.
*       エラーメッセージを出力
WRITE : / '品目'     , IN_WRK-MATNR,
'仕入先'   , IN_WRK-LIFNR.
IF IN_WRK-HANFL = CO_TXT.
WRITE : 'プラント' , IN_WRK-WERKS.
ENDIF.
WRITE /'の購買情報は同じ内容のため、更新されませんでした。'.
EXIT.
ENDIF.

IF L_WRK-TDLINE IS INITIAL OR
IN_WRK-UPKBN = CO_UPK.
*        テキスト行
L_WRK-TDLINE = IN_WRK-TEXT.
*        内部テーブル更新
MODIFY LIT_TAB FROM L_WRK INDEX IN_WRK-GYOSU
TRANSPORTING TDLINE.
ELSE.
*       エラーメッセージを出力
WRITE : / '品目'     , IN_WRK-MATNR,
'仕入先'   , IN_WRK-LIFNR,
'プラント' , IN_WRK-WERKS,
/ 'の購買情報は既に登録がある為、更新されませんでした。'.
IF IN_WRK-HANFL = CO_CHU.
WRITE: / '購買情報注記 ', L_NCNT, '行目：', IN_WRK-TEXT.
ELSE.
WRITE: / '購買情報テキスト ', L_NCNT,
'行目：', IN_WRK-TEXT.
ENDIF.
EXIT.
ENDIF.
ENDIF.
ENDIF.

* 購買情報注記、購買情報テキストの更新
IF P_TEXE IS INITIAL.
PERFORM CREATE_TEXT TABLES LIT_TAB
USING  L_ID L_NAME L_OBJECT IN_WRK L_TEXT_B.
ELSE.
*   成功メッセージを出力
WRITE : / '品目'     , IN_WRK-MATNR,
'仕入先'   , IN_WRK-LIFNR.
IF IN_WRK-HANFL = CO_TXT.
WRITE : 'プラント' , IN_WRK-WERKS.
ENDIF.

WRITE / 'の購買情報について下記項目が変更されました。'.

IF IN_WRK-HANFL = CO_CHU.
WRITE / '購買情報注記 '.

ELSE.
WRITE / '購買情報テキスト '.
ENDIF.
WRITE : L_NCNT, '行目：', L_TEXT_B,
/'                             ⇒ ', IN_WRK-TEXT.
ENDIF.
ENDFORM.
*----------------------------------------------------------------------*
* 前ゼロ埋め変換
*----------------------------------------------------------------------*
FORM CONV_ALPHA_IN_SYORI USING P_IN
CHANGING P_OUT.

CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = P_IN
IMPORTING
OUTPUT = P_OUT.

ENDFORM.
*----------------------------------------------------------------------*
* 品目コード変換
*----------------------------------------------------------------------*
FORM CONV_MATN1_IN_SYORI USING P_IN
CHANGING P_OUT.

CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
EXPORTING
INPUT  = P_IN
IMPORTING
OUTPUT = P_OUT.

ENDFORM.
*----------------------------------------------------------------------*
* テキスト読込
*----------------------------------------------------------------------*
FORM READ_TEXT TABLES OUT_TAB
USING P_ID P_NAME P_OBJECT.

CALL FUNCTION 'READ_TEXT'
EXPORTING
ID                      = P_ID
LANGUAGE                = 'J'
NAME                    = P_NAME
OBJECT                  = P_OBJECT
TABLES
LINES                   = OUT_TAB
EXCEPTIONS
ID                      = 1
LANGUAGE                = 2
NAME                    = 3
NOT_FOUND               = 4
OBJECT                  = 5
REFERENCE_CHECK         = 6
WRONG_ACCESS_TO_ARCHIVE = 7
OTHERS                  = 8.

IF NOT SY-SUBRC IS INITIAL.
CLEAR OUT_TAB.
ENDIF.
ENDFORM.
*----------------------------------------------------------------------*
* テキスト更新汎用モジュール
*----------------------------------------------------------------------*
FORM CREATE_TEXT TABLES IN_TAB
USING  IN_ID IN_NAME IN_OBJECT
IN_WRK TYPE TYP_DATA
IN_TEXT_B.

* ローカルオブジェクト宣言
DATA L_NCNT(2) TYPE N.

L_NCNT = IN_WRK-GYOSU.

CALL FUNCTION 'CREATE_TEXT'
EXPORTING
FID         = IN_ID
FLANGUAGE   = 'J'
FNAME       = IN_NAME
FOBJECT     = IN_OBJECT
SAVE_DIRECT = 'X'
FFORMAT     = '*'
TABLES
FLINES      = IN_TAB
EXCEPTIONS
NO_INIT     = 1
NO_SAVE     = 2
OTHERS      = 3.

IF SY-SUBRC IS INITIAL.
*   成功メッセージを出力
WRITE : / '品目'     , IN_WRK-MATNR,
'仕入先'   , IN_WRK-LIFNR.
IF IN_WRK-HANFL = CO_TXT.
WRITE : 'プラント' , IN_WRK-WERKS.
ENDIF.

WRITE / 'の購買情報について下記項目が変更されました。'.

IF IN_WRK-HANFL = CO_CHU.
WRITE / '購買情報注記 '.

ELSE.
WRITE / '購買情報テキスト '.
ENDIF.
WRITE : L_NCNT, '行目：', IN_TEXT_B,
/'                             ⇒ ', IN_WRK-TEXT.
ELSE.
*   エラーメッセージを出力
WRITE : / '品目'     , IN_WRK-MATNR,
'仕入先'   , IN_WRK-LIFNR.
IF IN_WRK-HANFL = CO_TXT.
WRITE : 'プラント' , IN_WRK-WERKS.
ENDIF.

WRITE / 'の購買情報は更新されませんでした。'.

ENDIF.
ENDFORM.
