REPORT ZBIFIM_ACG1 .
*
*---------------------------------------------------------------------*
*   declarations
*   (insert your declarations in this section)
*---------------------------------------------------------------------*
data:
ZSBI0008                       type ZSBI0008                      ,
it_data type standard table of ZSBI0008                      .

CONSTANTS:
*  C_LANGU    LIKE SY-LANGU           VALUE 'JA',
C_SETCLASS LIKE SETHEADER-SETCLASS VALUE '0109'.
*  C_SUBCLASS LIKE SETHEADER-SUBCLASS VALUE 'CATA',
*  C_SETNAME  LIKE SETHEADER-SETNAME  VALUE 'ZAG%'.

DATA:
IT_SETHD     LIKE TABLE OF SETHEADER,
IS_SETHD     LIKE SETHEADER,
IT_SETLEAF   LIKE TABLE OF SETLEAF,
IS_SETLEAF   LIKE SETLEAF,
IT_SETNODE   LIKE TABLE OF SETNODE,
IS_SETNODE   LIKE SETNODE,
IT_SETHDT    LIKE TABLE OF SETHEADERT,
IS_SETHDT    LIKE SETHEADERT,
IT_SKAT      LIKE TABLE OF SKAT,
IS_SKAT      LIKE SKAT.

DATA:
IT_HIER   LIKE TABLE OF SETHIER,
IS_HIER   LIKE SETHIER,
IS_HIER_NXT LIKE SETHIER,
IT_VALUES LIKE TABLE OF SETVALUES,
IS_VALUES LIKE SETVALUES.

DATA:
IS_ZSBI0008 LIKE ZSBI0008.

DATA:
L_SETID    LIKE SETHIER-SETID,
L_SETCLASS LIKE SETNODE-SETCLASS,
L_SUBCLASS LIKE SETNODE-SUBCLASS,
L_SETNAME  LIKE SETNODE-SETNAME,
L_LEVEL_NXT LIKE SETHIER-LEVEL,
L_INDEX_NXT LIKE SY-TABIX.

TYPES:
BEGIN OF ST_PARENT,
LEVEL   LIKE SETHIER-LEVEL,
SETNAME LIKE SETNODE-SETNAME,
END OF ST_PARENT.
DATA:
IT_PARENT TYPE TABLE OF ST_PARENT,
IS_PARENT TYPE ST_PARENT.

DATA:
L_NAME(20)     TYPE C,
L_NAME_TXT(23) TYPE C,
L_SEQNR(20)   TYPE C,
L_NUM(2)   TYPE N,
L_COUNT    TYPE I,
L_PARENT   LIKE SETNODE-SETNAME,
L_PARENT_LEV LIKE SETHIER-LEVEL,
L_SAKNR    LIKE SKAT-SAKNR,
L_TABIX    LIKE SY-TABIX.

CONSTANTS:
C_ITEM(18)     TYPE C VALUE 'IS_ZSBI0008-AC_LEV',
C_ITEM_TXT(21) TYPE C VALUE 'IS_ZSBI0008-AC_LEVTXT',
C_SEQNR(18)    TYPE C VALUE 'IS_ZSBI0008-AC_SEQ',
C_MAXCOUNT     TYPE I VALUE 2.

field-symbols:
<ITEM>     type ANY,
<ITEM_TXT> TYPE ANY,
<SEQNR>   TYPE ANY.

field-symbols: <struc> type ZSBI0008                      .

*-------------------------------------------------------------------*
*   selection screen statements
*-------------------------------------------------------------------*
*   (define your selection-screen here)
PARAMETERS P_LANGU LIKE SY-LANGU DEFAULT 'JA'.
PARAMETERS P_SUBCLS LIKE SETHEADER-SUBCLASS DEFAULT 'CATA'.
PARAMETERS P_SETNAM  LIKE SETHEADER-SETNAME  DEFAULT 'ZAG%'.

* !! the following comment MUST NOT BE CHANGED !!
*<QUERY_HEAD>


*-------------------------------------------------------------------*
*   read data into IT_DATA
*-------------------------------------------------------------------*
*  (select your data here into internal table IT_DATA)

CLEAR: IT_SETHD[].
SELECT * INTO TABLE IT_SETHD
FROM SETHEADER
WHERE SETCLASS = C_SETCLASS
AND SUBCLASS = P_SUBCLS
AND SETNAME  LIKE P_SETNAM.
SORT IT_SETHD BY SETNAME.

CLEAR: IT_SETLEAF[].
SELECT * INTO TABLE IT_SETLEAF
FROM SETLEAF
WHERE SETCLASS = C_SETCLASS
AND SUBCLASS = P_SUBCLS
AND SETNAME  LIKE P_SETNAM.
SORT IT_SETLEAF BY SETNAME.

CLEAR: IT_SETNODE[].
SELECT * INTO TABLE IT_SETNODE
FROM SETNODE
WHERE SETCLASS = C_SETCLASS
AND SUBCLASS = P_SUBCLS
AND SETNAME  LIKE P_SETNAM.
SORT IT_SETNODE BY SETNAME SUBSETNAME.

CLEAR: IT_SETHDT[].
SELECT * INTO TABLE IT_SETHDT
FROM SETHEADERT
WHERE SETCLASS = C_SETCLASS
AND SUBCLASS = P_SUBCLS
AND SETNAME  LIKE P_SETNAM
AND LANGU    = P_LANGU.
SORT IT_SETHDT BY SETNAME.

CLEAR: IT_DATA[], IS_SETHD.
LOOP AT IT_SETHD INTO IS_SETHD.

CLEAR: L_SETID.
CONCATENATE IS_SETHD-SETCLASS IS_SETHD-SUBCLASS
IS_SETHD-SETNAME INTO L_SETID.

CLEAR: IT_HIER[], IT_VALUES[].
CALL FUNCTION 'G_SET_TREE_IMPORT'
EXPORTING
setid             = L_SETID
tables
set_hierarchy     = IT_HIER[]
set_values        = IT_VALUES[]
EXCEPTIONS
others            = 1.

CLEAR: IS_ZSBI0008.
IS_ZSBI0008-KTOPL   = IS_SETHD-SUBCLASS.
IS_ZSBI0008-TOPNODE = IS_SETHD-SETNAME.

CLEAR: IS_HIER.
CLEAR: IT_PARENT[].
LOOP AT IT_HIER INTO IS_HIER.

L_TABIX = SY-TABIX.

CLEAR: IS_PARENT, L_PARENT.
IS_PARENT-LEVEL   = IS_HIER-LEVEL.
IS_PARENT-SETNAME = IS_HIER-SHORTNAME.
MODIFY IT_PARENT FROM IS_PARENT
TRANSPORTING SETNAME
WHERE LEVEL = IS_PARENT-LEVEL.
IF SY-SUBRC <> 0.
APPEND IS_PARENT TO IT_PARENT.
ENDIF.
IF IS_HIER-LEVEL > 0.
L_PARENT_LEV = IS_HIER-LEVEL - 1.
CLEAR: IS_PARENT.
READ TABLE IT_PARENT INTO IS_PARENT
WITH KEY LEVEL = L_PARENT_LEV.
L_PARENT = IS_PARENT-SETNAME.
ENDIF.

L_NUM = IS_HIER-LEVEL + 1.
CONCATENATE C_ITEM L_NUM INTO L_NAME.
ASSIGN (L_NAME) TO <ITEM>.
CONCATENATE C_ITEM_TXT L_NUM INTO L_NAME_TXT.
ASSIGN (L_NAME_TXT) TO <ITEM_TXT>.
CONCATENATE C_SEQNR L_NUM INTO L_SEQNR.
ASSIGN (L_SEQNR) TO <SEQNR>.
*      <ITEM> = IS_HIER-SHORTNAME.
CONCATENATE IS_HIER-SHORTNAME '_G' INTO <ITEM>.
CLEAR: IS_SETHDT.
READ TABLE IT_SETHDT INTO IS_SETHDT
WITH KEY SETNAME = IS_HIER-SHORTNAME
BINARY SEARCH.
<ITEM_TXT> = IS_SETHDT-DESCRIPT.
CLEAR: IS_SETNODE.
IF NOT L_PARENT IS INITIAL.
READ TABLE IT_SETNODE INTO IS_SETNODE
WITH KEY SETNAME    = L_PARENT
SUBSETNAME = IS_HIER-SHORTNAME
BINARY SEARCH.
<SEQNR>   = IS_SETNODE-SEQNR.
ELSE.
<SEQNR>   = 0.
ENDIF.
IF IS_HIER-VCOUNT > 0.
CLEAR: IS_SETLEAF.
L_NUM = L_NUM + 1.
LOOP AT IT_SETLEAF INTO IS_SETLEAF
WHERE SETNAME = IS_HIER-SHORTNAME.
CONCATENATE C_ITEM L_NUM INTO L_NAME.
ASSIGN (L_NAME) TO <ITEM>.
CONCATENATE C_ITEM_TXT L_NUM INTO L_NAME_TXT.
ASSIGN (L_NAME_TXT) TO <ITEM_TXT>.
CONCATENATE C_SEQNR L_NUM INTO L_SEQNR.
ASSIGN (L_SEQNR) TO <SEQNR>.
CLEAR: IT_SKAT[].
SELECT * INTO TABLE IT_SKAT FROM SKAT
WHERE SPRAS = P_LANGU
AND KTOPL = IS_SETLEAF-SUBCLASS
AND ( SAKNR BETWEEN
IS_SETLEAF-VALFROM AND IS_SETLEAF-VALTO ).
IF NOT IT_SKAT[] IS INITIAL.
SORT IT_SKAT BY SAKNR.
CLEAR: IS_SKAT.
LOOP AT IT_SKAT INTO IS_SKAT.
CLEAR: L_SAKNR.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT = IS_SKAT-SAKNR
IMPORTING
OUTPUT = L_SAKNR
EXCEPTIONS
OTHERS = 1.
<ITEM>     = L_SAKNR.
<ITEM_TXT> = IS_SKAT-TXT50.
<SEQNR>   = 0.
IS_ZSBI0008-SAKNR = L_SAKNR.
IS_ZSBI0008-TEXT  = IS_SKAT-TXT50.
APPEND IS_ZSBI0008 TO IT_DATA.
ENDLOOP.
ENDIF.
ENDLOOP.
ENDIF.

L_INDEX_NXT = L_TABIX + 1.
READ TABLE IT_HIER INTO IS_HIER_NXT INDEX L_INDEX_NXT.
IF SY-SUBRC = 0.
IF IS_HIER_NXT-LEVEL <= IS_HIER-LEVEL.
L_COUNT = IS_HIER_NXT-LEVEL + 1.
WHILE L_COUNT <= C_MAXCOUNT.
L_NUM = L_COUNT.
CONCATENATE C_ITEM L_NUM INTO L_NAME.
ASSIGN (L_NAME) TO <ITEM>.
CONCATENATE C_ITEM_TXT L_NUM INTO L_NAME_TXT.
ASSIGN (L_NAME_TXT) TO <ITEM_TXT>.
CONCATENATE C_SEQNR L_NUM INTO L_SEQNR.
ASSIGN (L_SEQNR) TO <SEQNR>.
CLEAR: <ITEM>, <ITEM_TXT>, <SEQNR>.
L_COUNT = L_COUNT + 1.
ENDWHILE.
ENDIF.
ENDIF.

ENDLOOP.

ENDLOOP.

*------------------------------------------------------------*
*   output of the data
*   (this section can be left unchanged)
*------------------------------------------------------------*
loop at it_data assigning <struc>.
move-corresponding <struc> to ZSBI0008                      .
* !! the following comment MUST NOT BE CHANGED !!
*<QUERY_BODY>
endloop.
