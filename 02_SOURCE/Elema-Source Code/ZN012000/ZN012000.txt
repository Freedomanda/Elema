*&---------------------------------------------------------------------*
*&  REPORT ZN012000                                                    *
*&         相殺候補一覧                                                *
*&---------------------------------------------------------------------*
*&  機能：得意先マスタに設定されている相殺仕入先に対して、
*&　　　  得意先の入金予定と仕入先の支払予定を組合わせて出力する。
*&  作成日   : 2012/03/21
*&  作成者   : SOLFIS
*&  変更履歴 : 2012/03/27 K.KAJISA(SOLFIS)
*&  変更内容 : インデックス対応
*&  変更履歴 : 2012/05/01 K.KAJISA(SOLFIS)
*&  変更内容 : 名称のカンマを小数点に変更
*&  変更履歴 : 2012/05/08 K.FURUYA(SOLFIS)
*&  変更内容 : ダミーレコード作成ロジック修正
*&  変更履歴 : 2012/05/09 K.FURUYA(SOLFIS)
*&  変更内容 : 相殺コメント追加
*& YYYY/MM/DD  Programar         Description
*& 2012/10/16  ISID              ES-UP
*&---------------------------------------------------------------------*
REPORT ZN012000
NO STANDARD PAGE HEADING
LINE-SIZE  170
LINE-COUNT 58
MESSAGE-ID YN01.
*
TABLES:
ZN002, "支払予定（仕入）
ZN005. "入金予定（売上）
*----------------------------------------------------------------------*
*   定数定義
*----------------------------------------------------------------------*
CONSTANTS:
C_1(1)          TYPE C VALUE '1',
C_2(1)          TYPE C VALUE '2',
C_ON(1)         TYPE C VALUE 'X',
C_I(1)          TYPE C VALUE 'I',
C_H(1)          TYPE C VALUE 'H',
C_EQ(2)         TYPE C VALUE 'EQ',
C_KANMA(1)      TYPE C VALUE ',',
C_MINDK_SP      TYPE LFB1-MINDK VALUE SPACE,
C_MINDK_01      TYPE LFB1-MINDK VALUE '01',
C_MINDK_02      TYPE LFB1-MINDK VALUE '02',
C_MINDK_03      TYPE LFB1-MINDK VALUE '03'.
* Add ES-UP 2012/10/16 -->
CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
* Add ES-UP 2012/10/16 <--
DATA :
GW_BK_ILIFNR     TYPE ZN005-ILIFNR,  "相殺先
GW_ACZFBD        TYPE ZN002-CZFBDT,  "締日相殺：照合締日
GW_BCZFBD        TYPE ZN002-CZFBDT,  "全額相殺：照合締日
GW_IZFBDT        TYPE ZN005-IZFBDT,  "支払日相殺：入金予定日
GW_ZN002_CNT     TYPE I,             "支払予定（仕入）件数
GW_ZN005_CNT     TYPE I,             "入金予定（売上）件数
GW_ERR_CNT       TYPE I,             "エラー件数
GW_SP_CNT        TYPE I,             "締日件数
GW_01_CNT        TYPE I,             "払日件数
GW_02_CNT        TYPE I,             "売全件数
GW_03_CNT        TYPE I,             "仕全件数
GW_OUT_CNT       TYPE I,             "出力件数
GW_PAGE          TYPE P.             "ページ
*----------------------------------------------------------------------*
*   構造/テーブル定義
*----------------------------------------------------------------------*
TYPES:
BEGIN OF TY_OUT_FILE,
DATA(500) TYPE C,
END   OF TY_OUT_FILE.
DATA :
GT_OUT_FILE TYPE STANDARD TABLE OF TY_OUT_FILE,
GW_OUT_FILE TYPE TY_OUT_FILE.
*
TYPES:
BEGIN OF TY_OUT_REC,
MINDK_NM(4)     TYPE C,  "マスタ
WAERS           TYPE ZN002-WAERS,  "通貨
KJDATE(8)       TYPE C,    "計上日
PWRBTR_ALL(17)  TYPE C,  "相殺候補額
PLIFNR(10)      TYPE C,  "相殺先
LIFNR(10)       TYPE C,  "仕入先
PWRBTR(17)      TYPE C,  "支払予定額
PZFBDT(8)       TYPE C,  "支払日
CZFBDT_02(8)    TYPE C,  "照合締日
ZTERM_02        TYPE LFM1-ZTERM,  "支払条件
KUNNR(10)       TYPE C,           "得意先
VKBUR           TYPE TVKBT-VKBUR,  "部門
IWRBTR(17)      TYPE C,  "入金予定額
IZFBDT(8)       TYPE C,  "入金予定日
CZFBDT_05(8)    TYPE C,  "照合締日
NAME1           TYPE KNA1-NAME1, "得意先名称
ZFAEL(2)        TYPE C, "締日
ZSTG1(2)        TYPE C, "入金日
ZTERM_05        TYPE KNVV-ZTERM,  "入金条件
CMNT(50)        TYPE C,  "コメント
IWRBTR_MATU(17)  TYPE C,  "入金予定額(未）
WRBTR(17)        TYPE C,  "売掛残
KNETXAMT(17)     TYPE C,  "当月未検収
ZNYO(1)         TYPE C,  "残余優先
END   OF TY_OUT_REC.
DATA :
GT_OUT_REC TYPE STANDARD TABLE OF TY_OUT_REC,
GW_OUT_REC TYPE TY_OUT_REC.
*
TYPES:
BEGIN OF TY_IN_REC,
ILIFNR          TYPE ZN005-ILIFNR,  "相殺先
KBN(1)          TYPE C,             "1=仕入、2=売上
LIFNR           TYPE ZN002-LIFNR,   "仕入先
KUNNR           TYPE ZN005-KUNNR,   "得意先
*
PWRBTR          TYPE ZN002-PWRBTR,  "支払予定額
WAERS_02        TYPE ZN002-WAERS,   "通貨コード
PZFBDT          TYPE ZN002-PZFBDT,  "支払予定日
CZFBDT_02       TYPE ZN002-CZFBDT,  "照合締日
*
IWRBTR          TYPE ZN005-IWRBTR,  "入金予定額
WAERS_05        TYPE ZN005-WAERS,   "通貨コード
IZFBDT          TYPE ZN005-IZFBDT,  "入金予定日
CZFBDT_05       TYPE ZN005-CZFBDT,  "照合締日
*
END   OF TY_IN_REC.
DATA :
GT_IN_REC TYPE STANDARD TABLE OF TY_IN_REC,
GW_IN_REC TYPE TY_IN_REC.

DATA :
GR_MINDK LIKE RANGE OF LFB1-MINDK,
GW_MINDK LIKE LINE OF GR_MINDK.
TYPES:
BEGIN OF TY_KUNNR,
KUNNR    TYPE KNVP-KUNNR,  "得意先
WAERS    TYPE KNVV-WAERS,  "通貨コード
END   OF TY_KUNNR.
TYPES:
BEGIN OF TY_LIFNR,
LIFNR    TYPE KNVP-LIFNR,  "仕入先
WAERS    TYPE LFM1-WAERS,  "通貨コード
END   OF TY_LIFNR.
DATA :
GT_SP_KUNNR   TYPE STANDARD TABLE OF TY_KUNNR,
GT_SP_LIFNR   TYPE STANDARD TABLE OF TY_LIFNR,
GT_0203_KUNNR TYPE STANDARD TABLE OF TY_KUNNR,
GT_0203_LIFNR TYPE STANDARD TABLE OF TY_LIFNR,
GT_01_KUNNR   TYPE STANDARD TABLE OF TY_KUNNR,
GT_01_LIFNR   TYPE STANDARD TABLE OF TY_LIFNR,
*
GW_KUNNR      TYPE TY_KUNNR,
GW_LIFNR      TYPE TY_LIFNR.
*
TYPES:
BEGIN OF TY_KNVP,
KUNNR    TYPE KNVP-KUNNR,  "得意先
LIFNR    TYPE KNVP-LIFNR,  "仕入先
NAME1_D  TYPE KNA1-NAME1,  "名称１
ZTERM_D  TYPE KNVV-ZTERM,  "支払条件キー
WAERS_D  TYPE KNVV-WAERS,  "通貨コード
VKBUR    TYPE KNVV-VKBUR,  "営業所
NAME1_K  TYPE LFA1-NAME1,  "名称１
MINDK    TYPE LFB1-MINDK,  "少数コード
ZTERM_K  TYPE LFM1-ZTERM,  "支払条件キー
WAERS_K  TYPE LFM1-WAERS,  "通貨コード
END   OF TY_KNVP.
DATA: GT_KNVP TYPE STANDARD TABLE OF TY_KNVP,
GW_KNVP TYPE TY_KNVP.
*
TYPES:
BEGIN OF TY_LIFNR_TBL,
LIFNR    TYPE KNVP-LIFNR,  "仕入先
NAME1    TYPE LFA1-NAME1,  "名称１
MINDK    TYPE LFB1-MINDK,  "少数コード
ZTERM    TYPE LFM1-ZTERM,  "支払条件キー
WAERS    TYPE LFM1-WAERS,  "通貨コード
KUNNR    TYPE KNVP-KUNNR,  "得意先
END   OF TY_LIFNR_TBL.
DATA: GT_LIFNR_TBL TYPE STANDARD TABLE OF TY_LIFNR_TBL,
GW_LIFNR_TBL TYPE TY_LIFNR_TBL.
TYPES:
BEGIN OF TY_KUNNR_TBL,
KUNNR    TYPE KNVP-KUNNR,  "得意先
NAME1    TYPE KNA1-NAME1,  "名称１
ZTERM    TYPE KNVV-ZTERM,  "支払条件キー
WAERS    TYPE KNVV-WAERS,  "通貨コード
VKBUR    TYPE KNVV-VKBUR,  "営業所
LIFNR    TYPE KNVP-LIFNR,  "仕入先
MINDK    TYPE LFB1-MINDK,  "少数コード
END   OF TY_KUNNR_TBL.
DATA: GT_KUNNR_TBL TYPE STANDARD TABLE OF TY_KUNNR_TBL,
GW_KUNNR_TBL TYPE TY_KUNNR_TBL.
*
TYPES:
BEGIN OF TY_VKBUR,
VKBUR    TYPE TVKBT-VKBUR,  "営業所
END   OF TY_VKBUR.
DATA: GT_VKBUR TYPE STANDARD TABLE OF TY_VKBUR,
GW_VKBUR TYPE TY_VKBUR.
*
TYPES:
BEGIN OF TY_TVKBT,
VKBUR    TYPE TVKBT-VKBUR,  "営業所
BEZEI    TYPE TVKBT-BEZEI,  "内容説明
END   OF TY_TVKBT.
DATA: GT_TVKBT TYPE HASHED TABLE OF TY_TVKBT
WITH UNIQUE KEY VKBUR,
GW_TVKBT TYPE TY_TVKBT.
*
TYPES:
BEGIN OF TY_ZN002,
BUKRS  TYPE ZN002-BUKRS,  "会社コード
LIFNR  TYPE ZN002-LIFNR,  "仕入先コード(請求先)
CZFBDT TYPE ZN002-CZFBDT, "照合締日
SEQ    TYPE ZN002-SEQ,    "SEQ
*
PZFBDT TYPE ZN002-PZFBDT, "支払予定日
PLIFNR TYPE ZN002-PLIFNR, "振替仕入先
WAERS  TYPE ZN002-WAERS,  "通貨コード
PWRBTR TYPE ZN002-PWRBTR, "支払予定額
END   OF TY_ZN002.
TYPES:
BEGIN OF TY_ZN005,
BUKRS  TYPE ZN005-BUKRS,  "会社コード
KUNNR  TYPE ZN005-KUNNR,  "得意先コード(支払人)
CZFBDT TYPE ZN005-CZFBDT, "照合締日
SEQ    TYPE ZN005-SEQ,    "SEQ
*
IZFBDT TYPE ZN005-IZFBDT, "入金予定日
ILIFNR TYPE ZN005-ILIFNR, "相殺先
WAERS  TYPE ZN005-WAERS,  "通貨コード
IWRBTR TYPE ZN005-IWRBTR, "入金予定額
END   OF TY_ZN005.
*
DATA:
GT_SP_ZN005      TYPE STANDARD TABLE OF TY_ZN005,
GT_SP_ZN002      TYPE STANDARD TABLE OF TY_ZN002,
GT_SP_ZN002_SS   TYPE STANDARD TABLE OF TY_ZN002,
GT_0203_ZN005    TYPE STANDARD TABLE OF TY_ZN005,
GT_0203_ZN002    TYPE STANDARD TABLE OF TY_ZN002,
GT_0203_ZN002_SS TYPE STANDARD TABLE OF TY_ZN002,
GT_01_ZN005      TYPE STANDARD TABLE OF TY_ZN005,
GT_01_ZN002      TYPE STANDARD TABLE OF TY_ZN002,
GT_01_ZN002_SS   TYPE STANDARD TABLE OF TY_ZN002,
GW_ZN005         TYPE TY_ZN005,
GW_ZN002         TYPE TY_ZN002.
*
TYPES:
BEGIN OF TY_ILIFNR_IWRBTR_SUM,
ILIFNR TYPE ZN005-ILIFNR, "相殺先
IWRBTR TYPE ZN005-IWRBTR, "入金予定額
END   OF TY_ILIFNR_IWRBTR_SUM.
DATA:
GT_ILIFNR_IWRBTR_SUM  TYPE STANDARD TABLE OF TY_ILIFNR_IWRBTR_SUM,
GW_ILIFNR_IWRBTR_SUM  TYPE TY_ILIFNR_IWRBTR_SUM.
*
TYPES:
BEGIN OF TY_ILIFNR_PWRBTR_SUM,
ILIFNR TYPE ZN005-ILIFNR, "相殺先
PWRBTR TYPE ZN002-PWRBTR, "支払予定額
END   OF TY_ILIFNR_PWRBTR_SUM.
DATA:
GT_ILIFNR_PWRBTR_SUM  TYPE STANDARD TABLE OF TY_ILIFNR_PWRBTR_SUM,
GW_ILIFNR_PWRBTR_SUM  TYPE TY_ILIFNR_PWRBTR_SUM.
*
TYPES:
BEGIN OF TY_OUT_ILIFNR,
ILIFNR TYPE ZN005-ILIFNR, "相殺先
END   OF TY_OUT_ILIFNR.
DATA:
GT_OUT_ILIFNR_ZN002 TYPE STANDARD TABLE OF TY_OUT_ILIFNR,
GT_OUT_ILIFNR_ZN005 TYPE STANDARD TABLE OF TY_OUT_ILIFNR,
GW_OUT_ILIFNR_ZN002 TYPE TY_OUT_ILIFNR,
GW_OUT_ILIFNR_ZN005 TYPE TY_OUT_ILIFNR.
*
TYPES:
BEGIN OF TY_T052,
ZTERM TYPE T052-ZTERM, "支払条件キー
ZTAGG TYPE T052-ZTAGG, "期限
ZFAEL TYPE T052-ZFAEL, "支払基準日のカレンダ日
ZSTG1 TYPE T052-ZSTG1, "特別条件の期日
END   OF TY_T052.
DATA:
GT_T052  TYPE STANDARD TABLE OF TY_T052,
GW_T052  TYPE TY_T052.
*
TYPES:
BEGIN OF TY_ZTERM,
ZTERM TYPE T052-ZTERM, "支払条件キー
END   OF TY_ZTERM.
DATA:
GT_ZTERM  TYPE STANDARD TABLE OF TY_ZTERM,
GW_ZTERM  TYPE TY_ZTERM.
*
TYPES:
BEGIN OF TY_KUNNR_SUM,
KUNNR    TYPE KNVP-KUNNR,      "得意先
WAERS    TYPE KNVV-WAERS,      "通貨コード
MINDK    TYPE LFB1-MINDK,      "少数コード
IWRBTR   TYPE ZN005-IWRBTR,    "入金予定額(未）
KNETXAMT TYPE YN120-KNETXAMT,  "当月未検収
WRBTR    TYPE BSID-WRBTR,      "売掛残
END   OF TY_KUNNR_SUM.
DATA: GT_KUNNR_SUM TYPE STANDARD TABLE OF TY_KUNNR_SUM,
GW_KUNNR_SUM TYPE TY_KUNNR_SUM.
*
TYPES:
BEGIN OF TY_ERR_LIST,
KUNNR    TYPE KNVP-KUNNR,      "得意先
WAERS_D  TYPE KNVV-WAERS,      "通貨コード
LIFNR    TYPE KNVP-LIFNR,      "仕入先
WAERS_K  TYPE LFM1-WAERS,      "通貨コード
NAME1_D  TYPE KNA1-NAME1,      "名称
END   OF TY_ERR_LIST.
DATA: GT_ERR_LIST TYPE STANDARD TABLE OF TY_ERR_LIST,
GW_ERR_LIST TYPE TY_ERR_LIST.
*
*---------------------------------------------------------------------*
*　選択画面
*---------------------------------------------------------------------+
*データ選択
SELECTION-SCREEN BEGIN OF BLOCK BK1 WITH FRAME TITLE TEXT-S01.
PARAMETERS:
P_BUKRS TYPE ZN002-BUKRS OBLIGATORY MEMORY ID BUK. "会社コード
SELECT-OPTIONS:
S_LIFNR FOR ZN002-LIFNR,    "仕入先コード(請求先)
S_KUNNR FOR ZN005-KUNNR,    "得意先コード(支払人)
S_WAERS FOR ZN002-WAERS     "通貨コード
NO INTERVALS.
SELECTION-SCREEN SKIP 1.
PARAMETERS:
P_SP AS CHECKBOX.             "締日相殺
SELECT-OPTIONS:
S_ACZFBD FOR ZN002-CZFBDT.    "照合締日
SELECTION-SCREEN SKIP 1.
PARAMETERS:
P_0203 AS CHECKBOX.           "全額相殺
SELECT-OPTIONS:
S_BCZFBD FOR ZN002-CZFBDT.    "照合締日
SELECTION-SCREEN SKIP 1.
PARAMETERS:
P_01 AS CHECKBOX.             "支払日相殺
SELECT-OPTIONS:
S_PZFBDT FOR ZN002-PZFBDT,    "支払予定日
S_IZFBDT FOR ZN005-IZFBDT.    "入金予定日
SELECTION-SCREEN END OF BLOCK BK1.
*処理オプション
SELECTION-SCREEN BEGIN OF BLOCK BK2 WITH FRAME TITLE TEXT-S02.
PARAMETERS:P_OTFILE(128) TYPE C LOWER CASE OBLIGATORY.   "出力ファイル
SELECTION-SCREEN END OF BLOCK BK2.
*仕入先システム項目
SELECTION-SCREEN BEGIN OF BLOCK BK3 WITH FRAME TITLE TEXT-S03.
PARAMETERS:
P_EKORG TYPE LFM1-EKORG OBLIGATORY. "購買組織
SELECTION-SCREEN END OF BLOCK BK3.
*得意先システム項目
SELECTION-SCREEN BEGIN OF BLOCK BK4 WITH FRAME TITLE TEXT-S04.
PARAMETERS:
P_PARVW  TYPE KNVP-PARVW OBLIGATORY, "相殺取引先機能
P_VKORG  TYPE KNVV-VKORG OBLIGATORY, "販売組織
P_VTWEG  TYPE KNVV-VTWEG OBLIGATORY, "流通チャネル
P_SPART  TYPE KNVV-SPART OBLIGATORY. "製品部門
SELECTION-SCREEN END OF BLOCK BK4.
*&--------------------------------------------------------------------
*&   Event AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_OTFILE
*&--------------------------------------------------------------------
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_OTFILE.
* エラーファイル名の検索ヘルプ
PERFORM F4HELP_P_OTFILE USING P_OTFILE.
*&---------------------------------------------------------------------*
*&   Event AT SELECTION-SCREEN
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN.
*会社コード
PERFORM P_BUKRS_CHECK.
*仕入先(請求先)
PERFORM S_LIFNR_CHECK.
*得意先コード(支払人)
PERFORM S_KUNNR_CHECK.
*通貨コード
PERFORM S_WAERS_CHECK.
*処理選択
PERFORM F_CHECKBOX_CHECK.
*日付チェック
PERFORM F_DATE_CHECK.
*仕入先システム項目
PERFORM P_EKORG_CHECK.
*得意先システム項目
PERFORM P_PARVW_CHECK.
PERFORM P_VKORG_CHECK.
PERFORM P_VTWEG_CHECK.
PERFORM P_SPART_CHECK.
*
*&---------------------------------------------------------------------*
*&   Event AT SELECTION-SCREEN
*&---------------------------------------------------------------------*
START-OF-SELECTION.
*初期処理
PERFORM PGM_INIT.
*データ取得
PERFORM GET_DATA.
*データ制御
PERFORM MAIN_PROC.
*ダウンロード
PERFORM F_GUI_DOWNLOAD.
*
PERFORM END_MSG.
*
END-OF-SELECTION.
*&---------------------------------------------------------------------*
*&      TOP-OF-PAGE
*&---------------------------------------------------------------------*
TOP-OF-PAGE.
*
GW_PAGE = GW_PAGE + 1.
*
WRITE:/50     TEXT-H99,    "相殺候補一覧
*2012/04/20 MOD START.
104    TEXT-H94,    "ページ：
112(3) GW_PAGE.
WRITE:/104    TEXT-H97,    "処理日付：
115    SY-DATUM,
127    SY-UZEIT.

*         80 TEXT-H97,    "処理日付：
*            SY-DATUM,
*        105 TEXT-H96,    "処理時刻：
*            SY-UZEIT,
*        128 TEXT-H95,    "ユーザID：
*            SY-UNAME,
*        155 TEXT-H94,    "ページ：
*          (3)GW_PAGE.
*2012/04/20 MOD END.
*
GW_OUT_CNT = GW_SP_CNT + GW_02_CNT + GW_03_CNT + GW_01_CNT.
*
*2012/04/20 DEL START
*  SKIP 1.
*  WRITE:/5 TEXT-H54, "支払予定(仕入) 件数
*         20  GW_ZN002_CNT,TEXT-H98.
*  WRITE:/5 TEXT-H55, "入金予定(売上) 件数
*         20  GW_ZN005_CNT,TEXT-H98.
*2012/04/20 DEL END

SKIP 1.
WRITE:/5 TEXT-H56, "出力件数
20 GW_OUT_CNT,TEXT-H98.
WRITE:/7 TEXT-H57. "締日相殺
WRITE:/9 TEXT-H58, "締日件数
20 GW_SP_CNT,TEXT-H98.
WRITE:/7 TEXT-H59. "全額相殺
WRITE:/9 TEXT-H60, "売全件数
20 GW_02_CNT,TEXT-H98.
WRITE:/9 TEXT-H61, "仕全件数
20 GW_03_CNT,TEXT-H98.
WRITE:/7 TEXT-H62. "支払日相殺
WRITE:/9 TEXT-H63, "払日件数
20 GW_01_CNT,TEXT-H98.
SKIP 1.
*
*2012/04/20 MOD START
WRITE:/5  TEXT-H52, "仕入先(請求先)
20 TEXT-H51, "通貨
30 TEXT-H50, "得意先(支払人)
*  WRITE:/5  TEXT-H50, "得意先コード(支払人)
*         20 TEXT-H51, "通貨
*         30 TEXT-H52, "仕入先コード(請求先)
45 TEXT-H51, "通貨コード
55 TEXT-H53, "得意先名称
90 TEXT-H64. "エラー内容
*2012/04/20 MOD END

ULINE.
*
*&---------------------------------------------------------------------*
*&      Form  P_BUKRS_CHECK
*&---------------------------------------------------------------------*
FORM P_BUKRS_CHECK.
*
SELECT SINGLE COUNT(*) FROM T001 WHERE BUKRS = P_BUKRS.
IF SY-SUBRC <> 0.
*  会社コード & はありません
SET CURSOR FIELD 'P_BUKRS'.
MESSAGE E750 WITH P_BUKRS.
ENDIF.
*
ENDFORM.                    " P_BUKRS_CHECK
*&---------------------------------------------------------------------*
*&      Form  S_LIFNR_CHECK
*&---------------------------------------------------------------------*
FORM S_LIFNR_CHECK.
*
IF NOT S_LIFNR[] IS INITIAL.
SELECT COUNT(*)
FROM LFB1
JOIN LFM1 ON LFM1~LIFNR = LFB1~LIFNR
WHERE LFB1~LIFNR IN S_LIFNR
AND   LFB1~BUKRS = P_BUKRS
AND   LFM1~EKORG = P_EKORG.
IF SY-SUBRC <> 0.
*    & が、存在しません
SET CURSOR FIELD 'S_LIFNR-LOW'.
MESSAGE E814 WITH TEXT-E01. "請求先
ENDIF.
ENDIF.
*
ENDFORM.                    " S_LIFNR_CHECK
*&---------------------------------------------------------------------*
*&      Form  S_WAERS_CHECK
*&---------------------------------------------------------------------*
FORM S_WAERS_CHECK.
*
SELECT SINGLE COUNT(*) FROM TCURC WHERE WAERS IN  S_WAERS.
IF SY-SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'S_WAERS-LOW'.
MESSAGE E814 WITH TEXT-E07. "通貨コード
ENDIF.
*
ENDFORM.                    " S_WAERS_CHECK
*&---------------------------------------------------------------------*
*&      Form  S_KUNNR_CHECK
*&---------------------------------------------------------------------*
FORM S_KUNNR_CHECK.
*
IF NOT S_KUNNR[] IS INITIAL.
SELECT COUNT(*)
FROM KNB1
JOIN KNVV ON KNVV~KUNNR = KNB1~KUNNR
JOIN KNVP ON KNVP~KUNNR = KNVV~KUNNR
AND KNVP~VKORG = KNVV~VKORG
AND KNVP~VTWEG = KNVV~VTWEG
AND KNVP~SPART = KNVV~SPART
WHERE KNB1~KUNNR IN S_KUNNR
AND   KNB1~BUKRS = P_BUKRS
AND   KNVV~VKORG = P_EKORG
AND   KNVV~VTWEG = P_VTWEG
AND   KNVV~SPART = P_SPART
AND   KNVP~PARVW = P_PARVW.
IF SY-SUBRC <> 0.
*    & が、存在しません
SET CURSOR FIELD 'S_KUNNR-LOW'.
MESSAGE E814 WITH TEXT-E02. "支払人
ENDIF.
ENDIF.
*
ENDFORM.                    " S_KUNNR_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_EKORG_CHECK
*&---------------------------------------------------------------------*
FORM P_EKORG_CHECK.
*
SELECT SINGLE COUNT(*) FROM T024E WHERE EKORG = P_EKORG.
IF SY-SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_EKORG'.
MESSAGE E814 WITH TEXT-E08. "購買組織
ENDIF.
*
ENDFORM.                    " P_EKORG_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_PARVW_CHECK
*&---------------------------------------------------------------------*
FORM P_PARVW_CHECK.
*
SELECT SINGLE COUNT(*) FROM TPAR WHERE PARVW = P_PARVW.
IF SY-SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_PARVW'.
MESSAGE E814 WITH TEXT-E09. "相殺取引先機能
ENDIF.
*
ENDFORM.                    " P_PARVW_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_VTWEG_CHECK
*&---------------------------------------------------------------------*
FORM P_VTWEG_CHECK.
*
SELECT SINGLE COUNT(*) FROM TVTW WHERE VTWEG = P_VTWEG.
IF SY-SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_VTWEG'.
MESSAGE E814 WITH TEXT-E11. "流通チャネル
ENDIF.
*
ENDFORM.                    " P_VTWEG_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_SPART_CHECK
*&---------------------------------------------------------------------*
FORM P_SPART_CHECK.
*
SELECT SINGLE COUNT(*) FROM TSPA WHERE SPART = P_SPART.
IF SY-SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_PARVW'.
MESSAGE E814 WITH TEXT-E12. "製品部門
ENDIF.
*
ENDFORM.                    " P_SPART_CHECK
*&---------------------------------------------------------------------*
*&      Form  P_VKORG_CHECK
*&---------------------------------------------------------------------*
FORM P_VKORG_CHECK.
*
SELECT SINGLE COUNT(*) FROM TVKO WHERE VKORG = P_VKORG.
IF SY-SUBRC <> 0.
*   & が、存在しません
SET CURSOR FIELD 'P_VKORG'.
MESSAGE E814 WITH TEXT-E10. "販売組織
ENDIF.
*
ENDFORM.                    " P_VKORG_CHECK
*&---------------------------------------------------------------------*
*&      Form  PGM_INIT
*&---------------------------------------------------------------------*
FORM PGM_INIT.
*
CLEAR:GW_BK_ILIFNR,
GW_ZN002_CNT,     "支払予定（仕入）件数
GW_ZN005_CNT,     "入金予定（売上）件数
GW_ERR_CNT,       "エラー件数
GW_SP_CNT,        "
GW_01_CNT,        "
GW_02_CNT,        "
GW_03_CNT.        "
*
REFRESH:GT_OUT_FILE,
GT_IN_REC.
*少数コード退避
REFRESH GR_MINDK.
IF NOT P_SP IS INITIAL.
GW_MINDK-SIGN = C_I.
GW_MINDK-OPTION = C_EQ.
GW_MINDK-LOW = C_MINDK_SP.
APPEND GW_MINDK TO GR_MINDK.
ENDIF.
IF NOT P_0203 IS INITIAL.
GW_MINDK-SIGN = C_I.
GW_MINDK-OPTION = C_EQ.
GW_MINDK-LOW = C_MINDK_02.
APPEND GW_MINDK TO GR_MINDK.
*
GW_MINDK-SIGN = C_I.
GW_MINDK-OPTION = C_EQ.
GW_MINDK-LOW = C_MINDK_03.
APPEND GW_MINDK TO GR_MINDK.
ENDIF.
IF NOT P_01 IS INITIAL.
GW_MINDK-SIGN = C_I.
GW_MINDK-OPTION = C_EQ.
GW_MINDK-LOW = C_MINDK_01.
APPEND GW_MINDK TO GR_MINDK.
ENDIF.
*
IF NOT P_SP IS INITIAL.
IF S_ACZFBD-HIGH IS INITIAL.
GW_ACZFBD = S_ACZFBD-LOW.
ELSE.
GW_ACZFBD = S_ACZFBD-HIGH.
ENDIF.
ENDIF.
IF NOT P_0203 IS INITIAL.
IF S_BCZFBD-HIGH IS INITIAL.
GW_BCZFBD = S_BCZFBD-LOW.
ELSE.
GW_BCZFBD = S_BCZFBD-HIGH.

ENDIF.
ENDIF.
IF NOT P_01 IS INITIAL.
IF S_IZFBDT-HIGH IS INITIAL.
GW_IZFBDT = S_IZFBDT-LOW.
ELSE.
GW_IZFBDT = S_IZFBDT-HIGH.
ENDIF.
ENDIF.

*
ENDFORM.                    " PGM_INIT
*&---------------------------------------------------------------------*
*&      Form  GET_DATA
*&---------------------------------------------------------------------*
FORM GET_DATA.
*相殺取引先抽出
PERFORM GET_KNVP.
*締日相殺抽出
PERFORM GET_SP_ZN002_ZN005.
*全額相殺抽出
PERFORM GET_0203_ZN002_ZN005.
*支払日相殺抽出
PERFORM GET_01_ZN002_ZN005.
*営業所: テキスト
*  PERFORM GET_TVKBT.
*支払条件
PERFORM GET_T052.
*
ENDFORM.                    " GET_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_KNVP
*&---------------------------------------------------------------------*
FORM     GET_KNVP.
*
REFRESH:GT_KNVP.
*
SELECT KNVP~KUNNR KNVP~LIFNR KNA1~NAME1
KNVV~ZTERM KNVV~WAERS KNVV~VKBUR
LFA1~NAME1
LFB1~MINDK LFM1~ZTERM LFM1~WAERS
INTO TABLE GT_KNVP
FROM KNVP
JOIN KNB1 ON KNB1~KUNNR = KNVP~KUNNR
JOIN KNA1 ON KNA1~KUNNR = KNVP~KUNNR
JOIN KNVV ON KNVV~KUNNR = KNVP~KUNNR
AND KNVV~VKORG = KNVP~VKORG
AND KNVV~VTWEG = KNVP~VTWEG
AND KNVV~SPART = KNVP~SPART
JOIN LFA1 ON LFA1~LIFNR = KNVP~LIFNR
JOIN LFB1 ON LFB1~LIFNR = KNVP~LIFNR
JOIN LFM1 ON LFM1~LIFNR = KNVP~LIFNR
WHERE KNVP~KUNNR IN S_KUNNR   "得意先
AND   KNVP~VKORG = P_VKORG    "販売組織
AND   KNVP~VTWEG = P_VTWEG    "流通チャネル
AND   KNVP~SPART = P_SPART    "製品部門
AND   KNVP~PARVW = P_PARVW    "相殺取引先機能
AND   KNVP~LIFNR IN S_LIFNR   "仕入先
AND   KNB1~BUKRS = P_BUKRS    "会社コード
AND   KNVV~WAERS IN S_WAERS   "通貨コード
AND   LFB1~BUKRS = P_BUKRS    "会社コード
AND   LFB1~MINDK IN GR_MINDK  "少数コード
AND   LFM1~EKORG = P_EKORG    "購買組織
AND   LFM1~WAERS IN S_WAERS.  "通貨コード
*
IF SY-SUBRC <> 0.
*対象データがありません
MESSAGE S762.
LEAVE LIST-PROCESSING.
ELSE.
SORT GT_KNVP BY KUNNR LIFNR.
REFRESH:GT_SP_KUNNR,GT_0203_KUNNR,GT_01_KUNNR,
GT_SP_LIFNR,GT_0203_LIFNR,GT_01_LIFNR.
*
LOOP AT GT_KNVP INTO GW_KNVP.
IF GW_KNVP-WAERS_D <> GW_KNVP-WAERS_K.
GW_ERR_CNT = GW_ERR_CNT + 1.
PERFORM ERR_REC_LIST.
CONTINUE.
ENDIF.
*
GW_KUNNR-KUNNR = GW_KNVP-KUNNR.
GW_KUNNR-WAERS = GW_KNVP-WAERS_D.
GW_LIFNR-LIFNR = GW_KNVP-LIFNR.
GW_LIFNR-WAERS = GW_KNVP-WAERS_K.
*
CASE GW_KNVP-MINDK.
WHEN C_MINDK_SP.
COLLECT GW_KUNNR INTO GT_SP_KUNNR.
COLLECT GW_LIFNR INTO GT_SP_LIFNR.
WHEN C_MINDK_02 OR
C_MINDK_03.
COLLECT GW_KUNNR INTO GT_0203_KUNNR.
COLLECT GW_LIFNR INTO GT_0203_LIFNR.
WHEN C_MINDK_01.
COLLECT GW_KUNNR INTO GT_01_KUNNR.
COLLECT GW_LIFNR INTO GT_01_LIFNR.
ENDCASE.
*
GW_KUNNR_TBL-KUNNR   = GW_KNVP-KUNNR.      "得意先
GW_KUNNR_TBL-NAME1   = GW_KNVP-NAME1_D.    "名称１
GW_KUNNR_TBL-ZTERM   = GW_KNVP-ZTERM_D.    "支払条件キー
GW_KUNNR_TBL-WAERS   = GW_KNVP-WAERS_D.    "通貨コード
GW_KUNNR_TBL-VKBUR   = GW_KNVP-VKBUR.      "営業所
GW_KUNNR_TBL-LIFNR   = GW_KNVP-LIFNR.      "仕入先
GW_KUNNR_TBL-MINDK = GW_KNVP-MINDK.        "少数コード

COLLECT GW_KUNNR_TBL INTO GT_KUNNR_TBL.  "得意先
*
GW_LIFNR_TBL-LIFNR = GW_KNVP-LIFNR.      "仕入先
GW_LIFNR_TBL-MINDK = GW_KNVP-MINDK.      "少数コード
GW_LIFNR_TBL-ZTERM = GW_KNVP-ZTERM_K.    "支払条件キー
GW_LIFNR_TBL-WAERS = GW_KNVP-WAERS_K.    "通貨コード
GW_LIFNR_TBL-KUNNR = GW_KNVP-KUNNR.      "得意先
GW_LIFNR_TBL-NAME1 = GW_KNVP-NAME1_K.    "名称１

COLLECT GW_LIFNR_TBL INTO GT_LIFNR_TBL.  "仕入先
*
*      GW_VKBUR-VKBUR = GW_KNVP-VKBUR.
*      COLLECT GW_VKBUR INTO GT_VKBUR.  "営業所
*
GW_ZTERM-ZTERM = GW_KNVP-ZTERM_D.
COLLECT GW_ZTERM INTO GT_ZTERM.    "支払条件キー

ENDLOOP.
ENDIF.
*
ENDFORM.                    " GET_KNVP
*&---------------------------------------------------------------------*
*&      Form  GET_BK_ZN002_ZN005
*&---------------------------------------------------------------------*
FORM GET_SP_ZN002_ZN005.
*
REFRESH:GT_SP_ZN005,
GT_SP_ZN002,
GT_SP_ZN002_SS.
*
CHECK NOT P_SP IS INITIAL.
*
*入金予定（売上）
IF NOT GT_SP_KUNNR[] IS INITIAL.
SELECT BUKRS  "会社コード
KUNNR  "得意先コード(支払人)
CZFBDT "照合締日
SEQ    "SEQ
*
IZFBDT "入金予定日
ILIFNR "相殺先
WAERS  "通貨コード
IWRBTR "入金予定額
*
INTO TABLE GT_SP_ZN005
FROM ZN005
FOR ALL ENTRIES IN GT_SP_KUNNR
WHERE BUKRS  = P_BUKRS
AND   KUNNR  = GT_SP_KUNNR-KUNNR
AND   CZFBDT IN S_ACZFBD
AND   WAERS  = GT_SP_KUNNR-WAERS
AND   ILIFNR = SPACE               "相殺先
AND   AUFLG  = SPACE.              "入金消込
ENDIF.
*
IF NOT GT_SP_LIFNR[] IS INITIAL.
*支払予定（仕入）
SELECT BUKRS  "会社コード
LIFNR  "仕入先コード(請求先)
CZFBDT "照合締日
SEQ    "SEQ
*
PZFBDT "支払予定日
PLIFNR "振替仕入先
WAERS  "通貨コード
PWRBTR "支払予定額
INTO TABLE GT_SP_ZN002
FROM ZN002
FOR ALL ENTRIES IN GT_SP_LIFNR
WHERE BUKRS  = P_BUKRS
AND   LIFNR  = GT_SP_LIFNR-LIFNR
AND   CZFBDT IN S_ACZFBD
AND   WAERS  = GT_SP_LIFNR-WAERS
AND   PLIFNR = SPACE        "振替仕入先
AND   PSTFLG = SPACE.
*
SELECT BUKRS  "会社コード
LIFNR  "仕入先コード(請求先)
CZFBDT "照合締日
SEQ    "SEQ
*
PZFBDT "支払予定日
PLIFNR "振替仕入先
WAERS  "通貨コード
PWRBTR "支払予定額
INTO TABLE GT_SP_ZN002_SS
FROM ZN002
FOR ALL ENTRIES IN GT_SP_LIFNR
WHERE BUKRS  = P_BUKRS
AND   CZFBDT IN S_ACZFBD
AND   WAERS  = GT_SP_LIFNR-WAERS
AND   PLIFNR = GT_SP_LIFNR-LIFNR   "振替仕入先
AND   PSTFLG = SPACE.
ENDIF.
*
ENDFORM.                    " GET_BK_ZN002_ZN005
*&---------------------------------------------------------------------*
*&      Form  GET_0203_ZN002_ZN005
*&---------------------------------------------------------------------*
FORM GET_0203_ZN002_ZN005.
*
REFRESH:GT_0203_ZN002,
GT_0203_ZN002_SS,
GT_0203_ZN005.
*
CHECK NOT P_0203 IS INITIAL.
*
*入金予定（売上）
IF NOT GT_0203_KUNNR[] IS INITIAL.
SELECT BUKRS  "会社コード
KUNNR  "得意先コード(支払人)
CZFBDT "照合締日
SEQ    "SEQ
*
IZFBDT "入金予定日
ILIFNR "相殺先
WAERS  "通貨コード
IWRBTR "入金予定額
*
INTO TABLE GT_0203_ZN005
FROM ZN005
FOR ALL ENTRIES IN GT_0203_KUNNR
WHERE BUKRS  = P_BUKRS
AND   KUNNR  = GT_0203_KUNNR-KUNNR
AND   CZFBDT IN S_BCZFBD
AND   WAERS  = GT_0203_KUNNR-WAERS
AND   ILIFNR = SPACE                "相殺先
AND   AUFLG  = SPACE.               "入金消込
ENDIF.
*
*支払予定（仕入）
IF NOT GT_0203_LIFNR[] IS INITIAL.
SELECT BUKRS  "会社コード
LIFNR  "仕入先コード(請求先)
CZFBDT "照合締日
SEQ    "SEQ
*
PZFBDT "支払予定日
PLIFNR "振替仕入先
WAERS  "通貨コード
PWRBTR "支払予定額
INTO TABLE GT_0203_ZN002
FROM ZN002
FOR ALL ENTRIES IN GT_0203_LIFNR
WHERE BUKRS  = P_BUKRS
AND   LIFNR  = GT_0203_LIFNR-LIFNR
AND   CZFBDT IN S_BCZFBD
AND   WAERS  = GT_0203_LIFNR-WAERS
AND   PLIFNR = SPACE        "振替仕入先
AND   PSTFLG = SPACE.
*
SELECT BUKRS  "会社コード
LIFNR  "仕入先コード(請求先)
CZFBDT "照合締日
SEQ    "SEQ
*
PZFBDT "支払予定日
PLIFNR "振替仕入先
WAERS  "通貨コード
PWRBTR "支払予定額
INTO TABLE GT_0203_ZN002_SS
FROM ZN002
FOR ALL ENTRIES IN GT_0203_LIFNR
WHERE BUKRS  = P_BUKRS
AND   CZFBDT IN S_BCZFBD
AND   WAERS  = GT_0203_LIFNR-WAERS
AND   PLIFNR = GT_0203_LIFNR-LIFNR       "振替仕入先
AND   PSTFLG = SPACE.
ENDIF.
*
ENDFORM.                    " GET_0203_ZN002_ZN005
*&---------------------------------------------------------------------*
*&      Form  GET_01_ZN002_ZN005
*&---------------------------------------------------------------------*
FORM GET_01_ZN002_ZN005.
*
REFRESH:GT_01_ZN002,
GT_01_ZN002_SS,
GT_01_ZN005.
*
CHECK NOT P_01 IS INITIAL.
*
*入金予定（売上）
IF NOT GT_01_KUNNR[] IS INITIAL.
SELECT BUKRS  "会社コード
KUNNR  "得意先コード(支払人)
CZFBDT "照合締日
SEQ    "SEQ
*
IZFBDT "入金予定日
ILIFNR "相殺先
WAERS  "通貨コード
IWRBTR "入金予定額
*
INTO TABLE GT_01_ZN005
FROM ZN005
FOR ALL ENTRIES IN GT_01_KUNNR
WHERE BUKRS  = P_BUKRS
AND   KUNNR  = GT_01_KUNNR-KUNNR
AND   IZFBDT IN S_IZFBDT          "入金予定日
AND   WAERS  = GT_01_KUNNR-WAERS
AND   ILIFNR = SPACE              "相殺先
AND   AUFLG  = SPACE.             "入金消込
ENDIF.
*
*支払予定（仕入）
IF NOT GT_01_LIFNR[] IS INITIAL.
SELECT BUKRS  "会社コード
LIFNR  "仕入先コード(請求先)
CZFBDT "照合締日
SEQ    "SEQ
*
PZFBDT "支払予定日
PLIFNR "振替仕入先
WAERS  "通貨コード
PWRBTR "支払予定額
INTO TABLE GT_01_ZN002
FROM ZN002
FOR ALL ENTRIES IN GT_01_LIFNR
WHERE BUKRS  = P_BUKRS
AND   LIFNR  = GT_01_LIFNR-LIFNR
AND   PZFBDT IN S_PZFBDT      "支払予定日
AND   WAERS  = GT_01_LIFNR-WAERS
AND   PLIFNR = SPACE          "振替仕入先
AND   PSTFLG = SPACE.
*
SELECT BUKRS  "会社コード
LIFNR  "仕入先コード(請求先)
CZFBDT "照合締日
SEQ    "SEQ
*
PZFBDT "支払予定日
PLIFNR "振替仕入先
WAERS  "通貨コード
PWRBTR "支払予定額
INTO TABLE GT_01_ZN002_SS
FROM ZN002
FOR ALL ENTRIES IN GT_01_LIFNR
WHERE BUKRS  = P_BUKRS
AND   PZFBDT IN S_PZFBDT           "支払予定日
AND   WAERS  = GT_01_LIFNR-WAERS
AND   PLIFNR = GT_01_LIFNR-LIFNR   "振替仕入先
AND   PSTFLG = SPACE.
ENDIF.
*
ENDFORM.                    " GET_01_ZN002_ZN005
*&---------------------------------------------------------------------*
*&      Form  GET_TVKBT
*&---------------------------------------------------------------------*
FORM GET_TVKBT.
*
CHECK NOT GT_VKBUR[] IS INITIAL.
*
SORT GT_VKBUR BY VKBUR.
DELETE ADJACENT DUPLICATES FROM GT_VKBUR
COMPARING VKBUR.
*
SELECT VKBUR BEZEI
INTO TABLE GT_TVKBT
FROM TVKBT
FOR ALL ENTRIES IN GT_VKBUR
WHERE SPRAS = SY-LANGU
AND   VKBUR = GT_VKBUR-VKBUR.
*
ENDFORM.                    " GET_TVKBT
*&---------------------------------------------------------------------*
*&      Form  MAIN_PROC
*&---------------------------------------------------------------------*
FORM MAIN_PROC.

REFRESH:GT_OUT_ILIFNR_ZN002,
GT_OUT_ILIFNR_ZN005,
GT_ILIFNR_IWRBTR_SUM,
GT_ILIFNR_PWRBTR_SUM,
GT_IN_REC.

*支払予定（仕入）の統合
PERFORM F_SUM_LIFNR.
SORT GT_KUNNR_TBL BY KUNNR.
SORT GT_LIFNR_TBL BY LIFNR.
SORT GT_OUT_ILIFNR_ZN002 BY ILIFNR.
*入金予定（売上）の統合
PERFORM F_SUM_KUNNR.
SORT GT_OUT_ILIFNR_ZN005 BY ILIFNR.
*ダミー売上の作成
PERFORM F_DUMMY_KUNNR.
*入金予定額(未）
*売掛残
*当月未検収
PERFORM F_KUNNR_SUM.
*
PERFORM F_IN_OUT_REC.
*
ENDFORM.                    " MAIN_PROC
*&---------------------------------------------------------------------*
*&      Form  F_IN_OUT_REC
*&---------------------------------------------------------------------*
FORM F_IN_OUT_REC.
*
SORT GT_KUNNR_TBL BY KUNNR.
SORT GT_LIFNR_TBL BY LIFNR.
SORT GT_ILIFNR_IWRBTR_SUM BY ILIFNR.
SORT GT_ILIFNR_PWRBTR_SUM BY ILIFNR.
*
*ファイルの出力順序	
*　仕入先コード＞支払予定日＞締日＞支払予定額
*  得意先コード＞入金予定日＞締日＞入金予定額	
SORT GT_IN_REC BY ILIFNR     "相殺先
KBN        "区分
LIFNR      "仕入先
PZFBDT     "支払予定日
CZFBDT_02  "締日
PWRBTR     "支払予定額
KUNNR      "得意先コード
IZFBDT     "入金予定日
CZFBDT_05  "締日
IWRBTR.    "入金予定額
*
LOOP AT GT_IN_REC INTO GW_IN_REC.
*
CLEAR:GW_OUT_FILE,GW_OUT_REC.
AT FIRST.
PERFORM FILE_HEADER.
ENDAT.
*
IF GW_IN_REC-KBN = C_1.
PERFORM F_IN_OUT_REC_MOD_K. "仕入先
ELSE.
PERFORM F_IN_OUT_REC_MOD_D. "得意先
ENDIF.
*
APPEND GW_OUT_FILE TO GT_OUT_FILE.
*
ENDLOOP.
*
ENDFORM.                    " F_IN_OUT_REC
*&---------------------------------------------------------------------*
*&      Form  F_GUI_DOWNLOAD
*&---------------------------------------------------------------------*
FORM F_GUI_DOWNLOAD.
DATA :
L_FILENAME TYPE STRING.
* Add ES-UP 2012/10/16 -->
DATA L_CODEPAGE TYPE ABAP_ENCODING.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
* Add ES-UP 2012/10/16 <--
CHECK NOT GT_OUT_FILE[] IS INITIAL.
*
L_FILENAME = P_OTFILE. "出力ファイル
*
CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
*     BIN_FILESIZE                  =
FILENAME                      = L_FILENAME
*     FILETYPE                      = 'ASC'
*     APPEND                        = ' '
*     WRITE_FIELD_SEPARATOR         = ' '
*     HEADER                        = '00'
*     TRUNC_TRAILING_BLANKS         = ' '
*     WRITE_LF                      = 'X'
*     COL_SELECT                    = ' '
*     COL_SELECT_MASK               = ' '
* Add ES-UP 2012/10/16 -->
CODEPAGE                  = L_CODEPAGE
* Add ES-UP 2012/10/16 <--
*   IMPORTING
*     FILELENGTH                    =
TABLES
DATA_TAB                      = GT_OUT_FILE
EXCEPTIONS
FILE_WRITE_ERROR              = 1
NO_BATCH                      = 2
GUI_REFUSE_FILETRANSFER       = 3
INVALID_TYPE                  = 4
NO_AUTHORITY                  = 5
UNKNOWN_ERROR                 = 6
HEADER_NOT_ALLOWED            = 7
SEPARATOR_NOT_ALLOWED         = 8
FILESIZE_NOT_ALLOWED          = 9
HEADER_TOO_LONG               = 10
DP_ERROR_CREATE               = 11
DP_ERROR_SEND                 = 12
DP_ERROR_WRITE                = 13
UNKNOWN_DP_ERROR              = 14
ACCESS_DENIED                 = 15
DP_OUT_OF_MEMORY              = 16
DISK_FULL                     = 17
DP_TIMEOUT                    = 18
FILE_NOT_FOUND                = 19
DATAPROVIDER_EXCEPTION        = 20
CONTROL_FLUSH_ERROR           = 21
OTHERS                        = 22
.
IF SY-SUBRC <> 0.
*ファイルの出力に失敗しました
MESSAGE I943.
LEAVE LIST-PROCESSING.
ENDIF.

*
ENDFORM.                    " F_GUI_DOWNLOAD
*&---------------------------------------------------------------------*
*&      Form  F4HELP_P_OTFILE
*&---------------------------------------------------------------------*
FORM F4HELP_P_OTFILE USING L_FILE.

DATA: L_IT_FNAME     TYPE FILETABLE,
L_SUBRC        TYPE I,
INIT_DIRECTORY TYPE STRING,
WINDOW_TITLE   TYPE STRING,
FILE_FILTER    TYPE STRING,
L_PATH         TYPE STRING.

FILE_FILTER = '*.*'.
L_PATH =  'C:\*.*'.
REFRESH : L_IT_FNAME.
MOVE 'C:\' TO INIT_DIRECTORY.
CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
EXPORTING  WINDOW_TITLE            =  WINDOW_TITLE
DEFAULT_FILENAME        =  L_PATH
FILE_FILTER             =  FILE_FILTER
INITIAL_DIRECTORY       =  INIT_DIRECTORY
MULTISELECTION          =  ABAP_FALSE
CHANGING   FILE_TABLE              =  L_IT_FNAME
RC                      =  L_SUBRC
EXCEPTIONS FILE_OPEN_DIALOG_FAILED =  1
CNTL_ERROR              =  2
ERROR_NO_GUI            =  3
OTHERS                  =  4
.
IF SY-SUBRC <> 0.
ELSE.
IF L_SUBRC = 1.
READ TABLE L_IT_FNAME INTO L_FILE INDEX 1.
ENDIF.
ENDIF.

ENDFORM.                    " F4HELP_P_OTFILE
*&---------------------------------------------------------------------*
*&      Form  GET_T052
*&---------------------------------------------------------------------*
FORM GET_T052.
*
CHECK NOT GT_ZTERM[] IS INITIAL.
*
SORT GT_ZTERM BY ZTERM.
DELETE ADJACENT DUPLICATES FROM GT_ZTERM
COMPARING ZTERM.
*
SELECT ZTERM ZTAGG ZFAEL ZSTG1
INTO TABLE GT_T052
FROM T052
FOR ALL ENTRIES IN GT_ZTERM
WHERE ZTERM = GT_ZTERM-ZTERM.
*
SORT GT_T052 BY ZTERM ZTAGG.
DELETE ADJACENT DUPLICATES FROM GT_T052
COMPARING ZTERM.
*
ENDFORM.                    " GET_T052
*&---------------------------------------------------------------------*
*&      Form  FILE_HEADER
*&---------------------------------------------------------------------*
FORM FILE_HEADER.
*
CONCATENATE
TEXT-H01 "ﾏｽﾀ
TEXT-H02 "通貨
TEXT-H03 "計上日
TEXT-H04 "相殺候補額
TEXT-H05 "相殺先
TEXT-H06 "仕入先
TEXT-H07 "支払予定額
TEXT-H08 "支払日
TEXT-H09 "照合締日
TEXT-H10 "支払条件
TEXT-H11 "得意先コード
TEXT-H12 "部門
TEXT-H13 "入金予定額
TEXT-H14 "入金予定日
TEXT-H15 "照合締日
TEXT-H16 "仕入先・得意先名称
TEXT-H17 "締日
TEXT-H18 "入金日
TEXT-H19 "入金条件
TEXT-H20 "コメント
TEXT-H21 "入金予定額(未）
TEXT-H22 "売掛残
TEXT-H23 "当月未検収
TEXT-H24 "残余優先
INTO GW_OUT_FILE
SEPARATED BY C_KANMA.
APPEND GW_OUT_FILE TO GT_OUT_FILE.
*
ENDFORM.                    " FILE_HEADER
*&---------------------------------------------------------------------*
*&      Form  F_IN_OUT_REC_MOD
*&---------------------------------------------------------------------*
FORM F_IN_OUT_REC_MOD.
*

READ TABLE GT_LIFNR_TBL WITH KEY LIFNR = GW_IN_REC-ILIFNR
INTO GW_LIFNR_TBL BINARY SEARCH.
IF SY-SUBRC = 0.
*マスタ
CASE GW_LIFNR_TBL-MINDK.
WHEN C_MINDK_SP. GW_OUT_REC-MINDK_NM = TEXT-D01. "締日
WHEN C_MINDK_01. GW_OUT_REC-MINDK_NM = TEXT-D02. "払日
WHEN C_MINDK_02. GW_OUT_REC-MINDK_NM = TEXT-D03. "売全
WHEN C_MINDK_03. GW_OUT_REC-MINDK_NM = TEXT-D04. "仕全
ENDCASE.
GW_OUT_REC-WAERS     = GW_LIFNR_TBL-WAERS.  "通貨
GW_OUT_REC-ZTERM_02  = GW_LIFNR_TBL-ZTERM.  "支払条件
ENDIF.
*   GW_OUT_REC-PWRBTR_ALL(17)  TYPE C,  "相殺候補額
GW_OUT_REC-PLIFNR = GW_IN_REC-ILIFNR.  "相殺先
GW_OUT_REC-LIFNR  = GW_IN_REC-LIFNR.   "仕入先

*支払予定額
WRITE GW_IN_REC-PWRBTR
TO GW_OUT_REC-PWRBTR CURRENCY GW_IN_REC-WAERS_02 NO-GROUPING.
*支払日
WRITE GW_IN_REC-PZFBDT TO GW_OUT_REC-PZFBDT USING NO EDIT MASK.
GW_OUT_REC-CZFBDT_02 = GW_IN_REC-CZFBDT_02.  "照合締日
GW_OUT_REC-KUNNR = GW_IN_REC-KUNNR.    "得意先
READ TABLE GT_KUNNR_TBL WITH KEY KUNNR = GW_IN_REC-KUNNR
INTO  GW_KUNNR_TBL BINARY SEARCH.
IF SY-SUBRC = 0.
GW_OUT_REC-NAME1 = GW_KUNNR_TBL-NAME1.  "得意先名称
GW_OUT_REC-VKBUR = GW_KUNNR_TBL-VKBUR.  "部門
ENDIF.
*   GW_OUT_REC-IWRBTR_02(17)   TYPE C,  "入金予定額
*   GW_OUT_REC-IZFBDT(10)      TYPE C,  "入金予定日
*   GW_OUT_REC-CZFBDT_05(8)    TYPE C,  "照合締日
*   GW_OUT_REC-NAME1           TYPE KNA1-NAME1, "得意先名称
*   GW_OUT_REC-ZFAEL           TYPE T052-ZFAEL, "締日
*   GW_OUT_REC-ZSTG1           TYPE T052-ZSTG1, "入金日
*   GW_OUT_REC-ZTERM_05        TYPE KNVV-ZTERM,  "入金条件
*   GW_OUT_REC-IWRBTR_05(17)   TYPE C,  "入金予定額(未）
*   GW_OUT_REC-WRBTR(17)       TYPE C,  "売掛残
*   GW_OUT_REC-KNETXAMT(17)    TYPE C,  "当月未検収
*   GW_OUT_REC-KJDATE(8)       TYPE C,  "計上日
*   GW_OUT_REC-CMNT            TYPE C,  "コメント
*   GW_OUT_REC-ZNYO(1)         TYPE C,  "残余優先
CONCATENATE
GW_OUT_REC-MINDK_NM        "マスタ
GW_OUT_REC-WAERS           "通貨
GW_OUT_REC-KJDATE          "計上日
GW_OUT_REC-PWRBTR_ALL      "相殺候補額
GW_OUT_REC-PLIFNR          "相殺先
GW_OUT_REC-LIFNR           "仕入先
GW_OUT_REC-PWRBTR          "支払予定額
GW_OUT_REC-PZFBDT          "支払日
GW_OUT_REC-CZFBDT_02       "照合締日
GW_OUT_REC-ZTERM_02        "支払条件
GW_OUT_REC-KUNNR           "得意先
GW_OUT_REC-VKBUR           "部門名称
GW_OUT_REC-IWRBTR          "入金予定額
GW_OUT_REC-IZFBDT          "入金予定日
GW_OUT_REC-CZFBDT_05       "照合締日
GW_OUT_REC-NAME1           "得意先名称
GW_OUT_REC-ZFAEL           "締日
GW_OUT_REC-ZSTG1           "入金日
GW_OUT_REC-ZTERM_05        "入金条件
GW_OUT_REC-CMNT            "コメント
GW_OUT_REC-IWRBTR_MATU     "入金予定額(未）
GW_OUT_REC-WRBTR           "売掛残
GW_OUT_REC-KNETXAMT        "当月未検収
GW_OUT_REC-ZNYO            "残余優先
*
INTO GW_OUT_FILE
SEPARATED BY C_KANMA.
*
ENDFORM.                    " F_IN_OUT_REC_MOD
*&---------------------------------------------------------------------*
*&      Form  F_DATE_CHECK
*&---------------------------------------------------------------------*
FORM F_DATE_CHECK.
*
*締日相殺
IF NOT P_SP IS INITIAL.
IF S_ACZFBD[] IS INITIAL.
SET CURSOR FIELD 'S_ACZFBD-LOW'.
*&1 を入力してください
MESSAGE E901 WITH TEXT-E03. "照合締日
ENDIF.
ENDIF.
*全額相殺
IF NOT P_0203 IS INITIAL.
IF S_BCZFBD[] IS INITIAL.
SET CURSOR FIELD 'S_BCZFBD-LOW'.
*&1 を入力してください
MESSAGE E901 WITH TEXT-E03. "照合締日
ENDIF.
ENDIF.
*支払日相殺
IF NOT P_01 IS INITIAL.
IF S_PZFBDT[] IS INITIAL.
SET CURSOR FIELD 'S_PZFBDT-LOW'.
*&1 を入力してください
MESSAGE E901 WITH TEXT-E04. "支払予定日
ENDIF.
IF S_IZFBDT[] IS INITIAL.
SET CURSOR FIELD 'S_IZFBDT-LOW'.
*&1 を入力してください
MESSAGE E901 WITH TEXT-E05. "入金予定日
ENDIF.
ENDIF.
*
ENDFORM.                    " F_DATE_CHECK
*&---------------------------------------------------------------------*
*&      Form  F_IN_OUT_REC_MOD_K
*&---------------------------------------------------------------------*
FORM F_IN_OUT_REC_MOD_K.
*
READ TABLE GT_LIFNR_TBL WITH KEY LIFNR = GW_IN_REC-ILIFNR
INTO GW_LIFNR_TBL BINARY SEARCH.
*
IF GW_BK_ILIFNR <> GW_IN_REC-ILIFNR.
READ TABLE GT_ILIFNR_PWRBTR_SUM WITH KEY ILIFNR = GW_IN_REC-ILIFNR
INTO GW_ILIFNR_PWRBTR_SUM BINARY SEARCH.
IF SY-SUBRC = 0.
READ TABLE GT_ILIFNR_IWRBTR_SUM WITH KEY ILIFNR = GW_IN_REC-ILIFNR
INTO GW_ILIFNR_IWRBTR_SUM BINARY SEARCH.
IF SY-SUBRC = 0.
IF GW_ILIFNR_PWRBTR_SUM-PWRBTR < GW_ILIFNR_IWRBTR_SUM-IWRBTR.
*相殺候補額:支払予定額
WRITE GW_ILIFNR_PWRBTR_SUM-PWRBTR
TO GW_OUT_REC-PWRBTR_ALL
CURRENCY GW_LIFNR_TBL-WAERS
NO-GROUPING.
ELSE.
*相殺候補額:入金予定額
WRITE GW_ILIFNR_IWRBTR_SUM-IWRBTR
TO GW_OUT_REC-PWRBTR_ALL
CURRENCY GW_LIFNR_TBL-WAERS
NO-GROUPING.
ENDIF.
ELSE.
GW_OUT_REC-PWRBTR_ALL = 0.
ENDIF.
ELSE.
GW_OUT_REC-PWRBTR_ALL = 0.
ENDIF.
*
CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE         = GW_OUT_REC-PWRBTR_ALL.
*
GW_BK_ILIFNR = GW_IN_REC-ILIFNR.
*
ENDIF.
*
*マスタ
CASE GW_LIFNR_TBL-MINDK.
WHEN C_MINDK_SP. GW_OUT_REC-MINDK_NM = TEXT-D01. "締日
GW_SP_CNT = GW_SP_CNT + 1.
WHEN C_MINDK_01. GW_OUT_REC-MINDK_NM = TEXT-D02. "払日
GW_01_CNT = GW_01_CNT + 1.
WHEN C_MINDK_02. GW_OUT_REC-MINDK_NM = TEXT-D03. "売全
GW_02_CNT = GW_02_CNT + 1.
WHEN C_MINDK_03. GW_OUT_REC-MINDK_NM = TEXT-D04. "仕全
GW_03_CNT = GW_03_CNT + 1.
ENDCASE.
GW_OUT_REC-WAERS     = GW_LIFNR_TBL-WAERS.  "通貨
GW_OUT_REC-ZTERM_02  = GW_LIFNR_TBL-ZTERM.  "支払条件
*     GW_OUT_REC-NAME1     = GW_LIFNR_TBL-NAME1.  "名称１
*相殺先
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = GW_IN_REC-ILIFNR
IMPORTING
OUTPUT        = GW_OUT_REC-PLIFNR.
*仕入先
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = GW_IN_REC-LIFNR
IMPORTING
OUTPUT        = GW_OUT_REC-LIFNR.

*仕入先名称
SELECT SINGLE NAME1 INTO GW_OUT_REC-NAME1
FROM LFA1
WHERE LIFNR = GW_IN_REC-LIFNR.

* 2012/05/01 QA260 ADD START
PERFORM CANMA_PIRIOD CHANGING GW_OUT_REC-NAME1.
* 2012/05/01 QA260 ADD END

*支払予定額
WRITE GW_IN_REC-PWRBTR
TO GW_OUT_REC-PWRBTR CURRENCY GW_IN_REC-WAERS_02 NO-GROUPING.
CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE         = GW_OUT_REC-PWRBTR.
*
GW_OUT_REC-PZFBDT    = GW_IN_REC-PZFBDT.     "支払日
GW_OUT_REC-CZFBDT_02 = GW_IN_REC-CZFBDT_02.  "照合締日
*
CONCATENATE
GW_OUT_REC-MINDK_NM        "マスタ
GW_OUT_REC-WAERS           "通貨
GW_OUT_REC-KJDATE          "計上日
GW_OUT_REC-PWRBTR_ALL      "相殺候補額
GW_OUT_REC-PLIFNR          "相殺先
GW_OUT_REC-LIFNR           "仕入先
GW_OUT_REC-PWRBTR          "支払予定額
GW_OUT_REC-PZFBDT          "支払日
GW_OUT_REC-CZFBDT_02       "照合締日
GW_OUT_REC-ZTERM_02        "支払条件
GW_OUT_REC-KUNNR           "得意先
GW_OUT_REC-VKBUR           "部門
GW_OUT_REC-IWRBTR          "入金予定額
GW_OUT_REC-IZFBDT          "入金予定日
GW_OUT_REC-CZFBDT_05       "照合締日
GW_OUT_REC-NAME1           "得意先名称
GW_OUT_REC-ZFAEL           "締日
GW_OUT_REC-ZSTG1           "入金日
GW_OUT_REC-ZTERM_05        "入金条件
GW_OUT_REC-CMNT            "コメント
GW_OUT_REC-IWRBTR_MATU     "入金予定額(未）
GW_OUT_REC-WRBTR           "売掛残
GW_OUT_REC-KNETXAMT        "当月未検収
GW_OUT_REC-ZNYO            "残余優先
*
INTO GW_OUT_FILE
SEPARATED BY C_KANMA.
*
ENDFORM.                    " F_IN_OUT_REC_MOD_K
*&---------------------------------------------------------------------*
*&      Form  F_IN_OUT_REC_MOD_D
*&---------------------------------------------------------------------*
FORM F_IN_OUT_REC_MOD_D.
*
READ TABLE GT_LIFNR_TBL WITH KEY LIFNR = GW_IN_REC-ILIFNR
INTO GW_LIFNR_TBL BINARY SEARCH.
*
IF SY-SUBRC = 0.
*マスタ
CASE GW_LIFNR_TBL-MINDK.
WHEN C_MINDK_SP. GW_OUT_REC-MINDK_NM = TEXT-D01. "締日
GW_SP_CNT = GW_SP_CNT + 1.
WHEN C_MINDK_01. GW_OUT_REC-MINDK_NM = TEXT-D02. "払日
GW_01_CNT = GW_01_CNT + 1.
WHEN C_MINDK_02. GW_OUT_REC-MINDK_NM = TEXT-D03. "売全
GW_02_CNT = GW_02_CNT + 1.
WHEN C_MINDK_03. GW_OUT_REC-MINDK_NM = TEXT-D04. "仕全
GW_03_CNT = GW_03_CNT + 1.
ENDCASE.
GW_OUT_REC-WAERS     = GW_LIFNR_TBL-WAERS.  "通貨
ENDIF.
*相殺先
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = GW_IN_REC-ILIFNR
IMPORTING
OUTPUT        = GW_OUT_REC-PLIFNR.
*得意先
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = GW_IN_REC-KUNNR
IMPORTING
OUTPUT        = GW_OUT_REC-KUNNR.
*
READ TABLE GT_KUNNR_TBL WITH KEY KUNNR = GW_IN_REC-KUNNR
INTO GW_KUNNR_TBL BINARY SEARCH.
IF SY-SUBRC = 0.
GW_OUT_REC-NAME1     = GW_KUNNR_TBL-NAME1.  "得意先名称
* 2012/05/01 QA260 ADD START
PERFORM CANMA_PIRIOD CHANGING GW_OUT_REC-NAME1.
* 2012/05/01 QA260 ADD END
GW_OUT_REC-ZTERM_05  = GW_KUNNR_TBL-ZTERM.  "入金条件
GW_OUT_REC-VKBUR     = GW_KUNNR_TBL-VKBUR.  "部門

*
READ TABLE GT_T052 WITH KEY ZTERM = GW_KUNNR_TBL-ZTERM
INTO GW_T052 BINARY SEARCH.
IF SY-SUBRC = 0.
GW_OUT_REC-ZFAEL = GW_T052-ZFAEL. "締日
GW_OUT_REC-ZSTG1 = GW_T052-ZSTG1. "入金日
ENDIF.
ENDIF.
*入金予定額
WRITE GW_IN_REC-IWRBTR
TO GW_OUT_REC-IWRBTR CURRENCY GW_LIFNR_TBL-WAERS NO-GROUPING.
CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE         = GW_OUT_REC-IWRBTR.
*
IF NOT GW_IN_REC-IZFBDT IS INITIAL.
GW_OUT_REC-IZFBDT    = GW_IN_REC-IZFBDT.     "入金予定日
ENDIF.
IF NOT GW_IN_REC-CZFBDT_05 IS INITIAL.
GW_OUT_REC-CZFBDT_05 = GW_IN_REC-CZFBDT_05.  "照合締日
ENDIF.

READ TABLE GT_KUNNR_SUM WITH KEY KUNNR = GW_IN_REC-KUNNR
INTO GW_KUNNR_SUM BINARY SEARCH.
IF SY-SUBRC = 0.
*入金予定額(未）
WRITE GW_KUNNR_SUM-IWRBTR
TO GW_OUT_REC-IWRBTR_MATU CURRENCY GW_IN_REC-WAERS_05 NO-GROUPING.
*売掛残
WRITE GW_KUNNR_SUM-WRBTR
TO GW_OUT_REC-WRBTR CURRENCY GW_IN_REC-WAERS_05 NO-GROUPING.
*当月未検収
WRITE GW_KUNNR_SUM-KNETXAMT
TO GW_OUT_REC-KNETXAMT CURRENCY GW_IN_REC-WAERS_05 NO-GROUPING.
CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE         = GW_OUT_REC-IWRBTR_MATU.
CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE         = GW_OUT_REC-WRBTR.
CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE         = GW_OUT_REC-KNETXAMT.
ELSE.
CLEAR:GW_KUNNR_SUM-IWRBTR,GW_KUNNR_SUM-WRBTR,GW_KUNNR_SUM-KNETXAMT.
*入金予定額(未）
WRITE GW_KUNNR_SUM-IWRBTR
TO GW_OUT_REC-IWRBTR_MATU CURRENCY GW_IN_REC-WAERS_05 NO-GROUPING.
*売掛残
WRITE GW_KUNNR_SUM-WRBTR
TO GW_OUT_REC-WRBTR CURRENCY GW_IN_REC-WAERS_05 NO-GROUPING.
*当月未検収
WRITE GW_KUNNR_SUM-KNETXAMT
TO GW_OUT_REC-KNETXAMT CURRENCY GW_IN_REC-WAERS_05 NO-GROUPING.
CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE         = GW_OUT_REC-IWRBTR_MATU.
CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE         = GW_OUT_REC-WRBTR.
CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
CHANGING
VALUE         = GW_OUT_REC-KNETXAMT.
ENDIF.
*   GW_OUT_REC-KJDATE(8)       TYPE C,  "計上日
*   GW_OUT_REC-CMNT            TYPE C,  "コメント
*   GW_OUT_REC-ZNYO(1)         TYPE C,  "残余優先

*2012/05/09 ADD START  "相殺コメント
PERFORM GET_CMNT USING    GW_IN_REC-KUNNR
CHANGING GW_OUT_REC-CMNT.
*2012/05/09 ADD END

CONCATENATE
GW_OUT_REC-MINDK_NM        "マスタ
GW_OUT_REC-WAERS           "通貨
GW_OUT_REC-KJDATE          "計上日
GW_OUT_REC-PWRBTR_ALL      "相殺候補額
GW_OUT_REC-PLIFNR          "相殺先
GW_OUT_REC-LIFNR           "仕入先
GW_OUT_REC-PWRBTR          "支払予定額
GW_OUT_REC-PZFBDT          "支払日
GW_OUT_REC-CZFBDT_02       "照合締日
GW_OUT_REC-ZTERM_02        "支払条件
GW_OUT_REC-KUNNR           "得意先
GW_OUT_REC-VKBUR           "部門
GW_OUT_REC-IWRBTR          "入金予定額
GW_OUT_REC-IZFBDT          "入金予定日
GW_OUT_REC-CZFBDT_05       "照合締日
GW_OUT_REC-NAME1           "得意先名称
GW_OUT_REC-ZFAEL           "締日
GW_OUT_REC-ZSTG1           "入金日
GW_OUT_REC-ZTERM_05        "入金条件
GW_OUT_REC-CMNT            "コメント
GW_OUT_REC-IWRBTR_MATU     "入金予定額(未）
GW_OUT_REC-WRBTR           "売掛残
GW_OUT_REC-KNETXAMT        "当月未検収
GW_OUT_REC-ZNYO            "残余優先
*
INTO GW_OUT_FILE
SEPARATED BY C_KANMA.
*
ENDFORM.                    " F_IN_OUT_REC_MOD_D
*&---------------------------------------------------------------------*
*&      Form  END_MSG
*&---------------------------------------------------------------------*
FORM END_MSG.
*
IF GT_ERR_LIST[] IS INITIAL.
*2012/04/20 MOD START
WRITE:/5 TEXT-E13.
*    WRITE:/ '  '.
*2012/04/20 MOD END
ENDIF.

SORT  GT_ERR_LIST BY LIFNR KUNNR. "2012/04/20 ADD

LOOP AT GT_ERR_LIST INTO GW_ERR_LIST.
*2012/04/20 MOD START
WRITE:/5 GW_ERR_LIST-LIFNR,
20 GW_ERR_LIST-WAERS_K,
30 GW_ERR_LIST-KUNNR,
45 GW_ERR_LIST-WAERS_D,
*    WRITE:/5 GW_ERR_LIST-KUNNR,
*          20 GW_ERR_LIST-WAERS_D,
*          30 GW_ERR_LIST-LIFNR,
*          45 GW_ERR_LIST-WAERS_K,
*2012/04/20 MOD END
55 GW_ERR_LIST-NAME1_D,
90 TEXT-E97.
ENDLOOP.

*
ENDFORM.                    " END_MSG
*&---------------------------------------------------------------------*
*&      Form  ERR_REC_LIST
*&---------------------------------------------------------------------*
FORM ERR_REC_LIST.
*
GW_ERR_LIST-KUNNR   = GW_KNVP-KUNNR.   "得意先
GW_ERR_LIST-WAERS_D = GW_KNVP-WAERS_D. "通貨コード
GW_ERR_LIST-LIFNR   = GW_KNVP-LIFNR.   "仕入先
GW_ERR_LIST-WAERS_K = GW_KNVP-WAERS_K. "通貨コード
GW_ERR_LIST-NAME1_D = GW_KNVP-NAME1_D. "名称１
APPEND GW_ERR_LIST TO GT_ERR_LIST.
*
ENDFORM.                    " ERR_REC_LIST
*&---------------------------------------------------------------------*
*&      Form  F_CHECKBOX_CHECK
*&---------------------------------------------------------------------*
FORM F_CHECKBOX_CHECK.
*
IF P_SP   IS INITIAL AND "締日相殺
P_0203 IS INITIAL AND "全額相殺
P_01   IS INITIAL.    "支払日相殺
*締日相殺、全額相殺または支払日相殺の
*処理を選択してください
MESSAGE E807.
ENDIF.
*
ENDFORM.                    " F_CHECKBOX_CHECK
*&---------------------------------------------------------------------*
*&      Form  F_SUM_LIFNR
*&---------------------------------------------------------------------*
FORM F_SUM_LIFNR.
*
*---ブランク
*
LOOP AT GT_SP_ZN002    INTO GW_ZN002.
GW_ZN002_CNT = GW_ZN002_CNT + 1.

GW_IN_REC-ILIFNR = GW_ZN002-LIFNR.  "相殺先
GW_IN_REC-KBN    = C_1.    "1=仕入、2=売上
GW_IN_REC-LIFNR  = GW_ZN002-LIFNR.   "仕入先
*
GW_IN_REC-PWRBTR    = GW_ZN002-PWRBTR.  "支払予定額
GW_IN_REC-WAERS_02  = GW_ZN002-WAERS.   "通貨コード
GW_IN_REC-PZFBDT    = GW_ZN002-PZFBDT.  "支払予定日
GW_IN_REC-CZFBDT_02 = GW_ZN002-CZFBDT.  "照合締日
*
APPEND GW_IN_REC TO GT_IN_REC.
*支払予定額集計
GW_ILIFNR_PWRBTR_SUM-ILIFNR = GW_ZN002-LIFNR.  "仕入先
GW_ILIFNR_PWRBTR_SUM-PWRBTR = GW_ZN002-PWRBTR.
COLLECT GW_ILIFNR_PWRBTR_SUM INTO GT_ILIFNR_PWRBTR_SUM.
*相殺先集合
GW_OUT_ILIFNR_ZN002 = GW_ZN002-LIFNR.  "仕入先
COLLECT GW_OUT_ILIFNR_ZN002 INTO GT_OUT_ILIFNR_ZN002.
*
ENDLOOP.
*
LOOP AT GT_SP_ZN002_SS INTO GW_ZN002.
GW_ZN002_CNT = GW_ZN002_CNT + 1.
*
GW_IN_REC-ILIFNR = GW_ZN002-PLIFNR.  "相殺先
GW_IN_REC-KBN    = C_1.    "1=仕入、2=売上
GW_IN_REC-LIFNR  = GW_ZN002-LIFNR.   "仕入先
*
GW_IN_REC-PWRBTR    = GW_ZN002-PWRBTR.  "支払予定額
GW_IN_REC-WAERS_02  = GW_ZN002-WAERS.   "通貨コード
GW_IN_REC-PZFBDT    = GW_ZN002-PZFBDT.  "支払予定日
GW_IN_REC-CZFBDT_02 = GW_ZN002-CZFBDT.  "照合締日
*
APPEND GW_IN_REC TO GT_IN_REC.
*支払予定額集計
GW_ILIFNR_PWRBTR_SUM-ILIFNR = GW_ZN002-PLIFNR. "振替仕入先
GW_ILIFNR_PWRBTR_SUM-PWRBTR = GW_ZN002-PWRBTR.
COLLECT GW_ILIFNR_PWRBTR_SUM INTO GT_ILIFNR_PWRBTR_SUM.
*相殺先集合
GW_OUT_ILIFNR_ZN002 = GW_ZN002-PLIFNR.  "相殺先
COLLECT GW_OUT_ILIFNR_ZN002 INTO GT_OUT_ILIFNR_ZN002.
*
ENDLOOP.
*
*---02,03
*
LOOP AT GT_0203_ZN002    INTO GW_ZN002.
GW_ZN002_CNT = GW_ZN002_CNT + 1.
*
GW_IN_REC-ILIFNR    = GW_ZN002-LIFNR.  "相殺先
GW_IN_REC-KBN       = C_1.    "1=仕入、2=売上
GW_IN_REC-LIFNR     = GW_ZN002-LIFNR.   "仕入先
*
GW_IN_REC-PWRBTR    = GW_ZN002-PWRBTR.  "支払予定額
GW_IN_REC-WAERS_02  = GW_ZN002-WAERS.   "通貨コード
GW_IN_REC-PZFBDT    = GW_ZN002-PZFBDT.  "支払予定日
GW_IN_REC-CZFBDT_02 = GW_ZN002-CZFBDT.  "照合締日
*
APPEND GW_IN_REC TO GT_IN_REC.
*支払予定額集計
GW_ILIFNR_PWRBTR_SUM-ILIFNR = GW_ZN002-LIFNR.  "仕入先
GW_ILIFNR_PWRBTR_SUM-PWRBTR = GW_ZN002-PWRBTR.
COLLECT GW_ILIFNR_PWRBTR_SUM INTO GT_ILIFNR_PWRBTR_SUM.
*相殺先集合
GW_OUT_ILIFNR_ZN002 = GW_ZN002-LIFNR.  "仕入先
COLLECT GW_OUT_ILIFNR_ZN002 INTO GT_OUT_ILIFNR_ZN002.
*
ENDLOOP.
*
LOOP AT GT_0203_ZN002_SS INTO GW_ZN002.
GW_ZN002_CNT = GW_ZN002_CNT + 1.
*
GW_IN_REC-ILIFNR    = GW_ZN002-PLIFNR.  "相殺先
GW_IN_REC-KBN       = C_1.    "1=仕入、2=売上
GW_IN_REC-LIFNR     = GW_ZN002-LIFNR.   "仕入先
*
GW_IN_REC-PWRBTR    = GW_ZN002-PWRBTR.  "支払予定額
GW_IN_REC-WAERS_02  = GW_ZN002-WAERS.   "通貨コード
GW_IN_REC-PZFBDT    = GW_ZN002-PZFBDT.  "支払予定日
GW_IN_REC-CZFBDT_02 = GW_ZN002-CZFBDT.  "照合締日
*
APPEND GW_IN_REC TO GT_IN_REC.
*支払予定額集計
GW_ILIFNR_PWRBTR_SUM-ILIFNR = GW_ZN002-PLIFNR. "振替仕入先
GW_ILIFNR_PWRBTR_SUM-PWRBTR = GW_ZN002-PWRBTR.
COLLECT GW_ILIFNR_PWRBTR_SUM INTO GT_ILIFNR_PWRBTR_SUM.
*相殺先集合
GW_OUT_ILIFNR_ZN002 = GW_ZN002-PLIFNR.  "相殺先
COLLECT GW_OUT_ILIFNR_ZN002 INTO GT_OUT_ILIFNR_ZN002.
*
ENDLOOP.
*
*---01
*
LOOP AT GT_01_ZN002    INTO GW_ZN002.
GW_ZN002_CNT = GW_ZN002_CNT + 1.
*
GW_IN_REC-ILIFNR = GW_ZN002-LIFNR.  "相殺先
GW_IN_REC-KBN    = C_1.    "1=仕入、2=売上
GW_IN_REC-LIFNR  = GW_ZN002-LIFNR.   "仕入先
*
GW_IN_REC-PWRBTR    = GW_ZN002-PWRBTR.  "支払予定額
GW_IN_REC-WAERS_02  = GW_ZN002-WAERS.   "通貨コード
GW_IN_REC-PZFBDT    = GW_ZN002-PZFBDT.  "支払予定日
GW_IN_REC-CZFBDT_02 = GW_ZN002-CZFBDT.  "照合締日
*
APPEND GW_IN_REC TO GT_IN_REC.
*支払予定額集計
GW_ILIFNR_PWRBTR_SUM-ILIFNR = GW_ZN002-LIFNR.  "仕入先
GW_ILIFNR_PWRBTR_SUM-PWRBTR = GW_ZN002-PWRBTR.
COLLECT GW_ILIFNR_PWRBTR_SUM INTO GT_ILIFNR_PWRBTR_SUM.
*相殺先集合
GW_OUT_ILIFNR_ZN002 = GW_ZN002-LIFNR.  "仕入先
COLLECT GW_OUT_ILIFNR_ZN002 INTO GT_OUT_ILIFNR_ZN002.
*
ENDLOOP.
*
LOOP AT GT_01_ZN002_SS INTO GW_ZN002.
GW_ZN002_CNT = GW_ZN002_CNT + 1.
*
GW_IN_REC-ILIFNR = GW_ZN002-PLIFNR.  "相殺先
GW_IN_REC-KBN    = C_1.    "1=仕入、2=売上
GW_IN_REC-LIFNR  = GW_ZN002-LIFNR.   "仕入先
*
GW_IN_REC-PWRBTR    = GW_ZN002-PWRBTR.  "支払予定額
GW_IN_REC-WAERS_02  = GW_ZN002-WAERS.   "通貨コード
GW_IN_REC-PZFBDT    = GW_ZN002-PZFBDT.  "支払予定日
GW_IN_REC-CZFBDT_02 = GW_ZN002-CZFBDT.  "照合締日
*
APPEND GW_IN_REC TO GT_IN_REC.
*支払予定額集計
GW_ILIFNR_PWRBTR_SUM-ILIFNR = GW_ZN002-PLIFNR. "振替仕入先
GW_ILIFNR_PWRBTR_SUM-PWRBTR = GW_ZN002-PWRBTR.
COLLECT GW_ILIFNR_PWRBTR_SUM INTO GT_ILIFNR_PWRBTR_SUM.
*相殺先集合
GW_OUT_ILIFNR_ZN002 = GW_ZN002-PLIFNR.  "相殺先
COLLECT GW_OUT_ILIFNR_ZN002 INTO GT_OUT_ILIFNR_ZN002.
*
ENDLOOP.
*
ENDFORM.                    " F_SUM_LIFNR
*&---------------------------------------------------------------------*
*&      Form  F_SUM_KUNNR
*&---------------------------------------------------------------------*
FORM F_SUM_KUNNR.
*
*
LOOP AT GT_SP_ZN005    INTO GW_ZN005.
GW_ZN005_CNT = GW_ZN005_CNT + 1.
*得意先の相殺先を取得する
READ TABLE GT_KUNNR_TBL WITH KEY KUNNR = GW_ZN005-KUNNR
BINARY SEARCH INTO GW_KUNNR_TBL.
IF SY-SUBRC = 0.
*支払予定(仕入)が無ければ出力しない
READ TABLE GT_OUT_ILIFNR_ZN002
WITH KEY ILIFNR = GW_KUNNR_TBL-LIFNR
BINARY SEARCH INTO GW_OUT_ILIFNR_ZN002.
IF SY-SUBRC = 0.
*
GW_IN_REC-ILIFNR    = GW_KUNNR_TBL-LIFNR.  "相殺先
GW_IN_REC-KBN       = C_2.    "1=仕入、2=売上
GW_IN_REC-KUNNR     = GW_ZN005-KUNNR.   "得意先
*
GW_IN_REC-IWRBTR    = GW_ZN005-IWRBTR.        "入金予定額
GW_IN_REC-WAERS_05  = GW_ZN005-WAERS.         "通貨コード
GW_IN_REC-IZFBDT    = GW_ZN005-IZFBDT.        "入金予定日
GW_IN_REC-CZFBDT_05 = GW_ZN005-CZFBDT.        "照合締日
APPEND GW_IN_REC TO GT_IN_REC.
*支払予定額集計
GW_ILIFNR_IWRBTR_SUM-ILIFNR = GW_KUNNR_TBL-LIFNR.  "仕入先
GW_ILIFNR_IWRBTR_SUM-IWRBTR = GW_ZN005-IWRBTR.
COLLECT GW_ILIFNR_IWRBTR_SUM INTO GT_ILIFNR_IWRBTR_SUM.
*相殺先集合
GW_OUT_ILIFNR_ZN005 = GW_KUNNR_TBL-LIFNR.  "仕入先
COLLECT GW_OUT_ILIFNR_ZN005 INTO GT_OUT_ILIFNR_ZN005.
*得意先集合
GW_KUNNR_SUM-KUNNR = GW_ZN005-KUNNR.
GW_KUNNR_SUM-WAERS = GW_ZN005-WAERS.
GW_KUNNR_SUM-MINDK = GW_KUNNR_TBL-MINDK.
COLLECT GW_KUNNR_SUM INTO GT_KUNNR_SUM.
ENDIF.
ENDIF.
*
ENDLOOP.
*
LOOP AT GT_0203_ZN005    INTO GW_ZN005.
GW_ZN005_CNT = GW_ZN005_CNT + 1.

*得意先の相殺先を取得する
READ TABLE GT_KUNNR_TBL WITH KEY KUNNR = GW_ZN005-KUNNR
BINARY SEARCH INTO GW_KUNNR_TBL.
IF SY-SUBRC = 0.
*支払予定(仕入)が無ければ出力しない
READ TABLE GT_OUT_ILIFNR_ZN002
WITH KEY ILIFNR = GW_KUNNR_TBL-LIFNR
BINARY SEARCH INTO GW_OUT_ILIFNR_ZN002.
IF SY-SUBRC = 0.
*
GW_IN_REC-ILIFNR    =  GW_KUNNR_TBL-LIFNR.  "相殺先
GW_IN_REC-KBN       =  C_2.    "1=仕入、2=売上
GW_IN_REC-KUNNR     =  GW_ZN005-KUNNR.   "得意先
*
GW_IN_REC-IWRBTR    = GW_ZN005-IWRBTR.        "入金予定額
GW_IN_REC-WAERS_05  = GW_ZN005-WAERS.         "通貨コード
GW_IN_REC-IZFBDT    = GW_ZN005-IZFBDT.        "入金予定日
GW_IN_REC-CZFBDT_05 = GW_ZN005-CZFBDT.        "照合締日
APPEND GW_IN_REC TO GT_IN_REC.
*支払予定額集計
GW_ILIFNR_IWRBTR_SUM-ILIFNR = GW_KUNNR_TBL-LIFNR.  "仕入先
GW_ILIFNR_IWRBTR_SUM-IWRBTR = GW_ZN005-IWRBTR.
COLLECT GW_ILIFNR_IWRBTR_SUM INTO GT_ILIFNR_IWRBTR_SUM.
*相殺先集合
GW_OUT_ILIFNR_ZN005 = GW_KUNNR_TBL-LIFNR.  "仕入先
COLLECT GW_OUT_ILIFNR_ZN005 INTO GT_OUT_ILIFNR_ZN005.
*得意先集合
GW_KUNNR_SUM-KUNNR = GW_ZN005-KUNNR.
GW_KUNNR_SUM-WAERS = GW_ZN005-WAERS.
GW_KUNNR_SUM-MINDK = GW_KUNNR_TBL-MINDK.
COLLECT GW_KUNNR_SUM INTO GT_KUNNR_SUM.
ENDIF.
ENDIF.
*
ENDLOOP.

LOOP AT GT_01_ZN005    INTO GW_ZN005.
GW_ZN005_CNT = GW_ZN005_CNT + 1.

*得意先の相殺先を取得する
READ TABLE GT_KUNNR_TBL WITH KEY KUNNR = GW_ZN005-KUNNR
BINARY SEARCH INTO GW_KUNNR_TBL.
IF SY-SUBRC = 0.
*支払予定(仕入)が無ければ出力しない
READ TABLE GT_OUT_ILIFNR_ZN002
WITH KEY ILIFNR = GW_KUNNR_TBL-LIFNR
BINARY SEARCH INTO GW_OUT_ILIFNR_ZN002.
IF SY-SUBRC = 0.
CLEAR:GW_IN_REC.
*
GW_IN_REC-ILIFNR  =  GW_KUNNR_TBL-LIFNR.  "相殺先
GW_IN_REC-KBN     = C_2.    "1=仕入、2=売上
GW_IN_REC-KUNNR   =  GW_ZN005-KUNNR.   "得意先
*
GW_IN_REC-IWRBTR    = GW_ZN005-IWRBTR.        "入金予定額
GW_IN_REC-WAERS_05  = GW_ZN005-WAERS.         "通貨コード
GW_IN_REC-IZFBDT    = GW_ZN005-IZFBDT.        "入金予定日
GW_IN_REC-CZFBDT_05 = GW_ZN005-CZFBDT.        "照合締日
APPEND GW_IN_REC TO GT_IN_REC.
*支払予定額集計
GW_ILIFNR_IWRBTR_SUM-ILIFNR = GW_KUNNR_TBL-LIFNR.  "仕入先
GW_ILIFNR_IWRBTR_SUM-IWRBTR = GW_ZN005-IWRBTR.
COLLECT GW_ILIFNR_IWRBTR_SUM INTO GT_ILIFNR_IWRBTR_SUM.
*相殺先集合
GW_OUT_ILIFNR_ZN005 = GW_KUNNR_TBL-LIFNR.  "仕入先
COLLECT GW_OUT_ILIFNR_ZN005 INTO GT_OUT_ILIFNR_ZN005.
*得意先集合
GW_KUNNR_SUM-KUNNR = GW_ZN005-KUNNR.
GW_KUNNR_SUM-WAERS = GW_ZN005-WAERS.
GW_KUNNR_SUM-MINDK = GW_KUNNR_TBL-MINDK.
COLLECT GW_KUNNR_SUM INTO GT_KUNNR_SUM.
ENDIF.
ENDIF.
*
ENDLOOP.

*
ENDFORM.                    " F_SUM_KUNNR
*&---------------------------------------------------------------------*
*&      Form  F_DUMMY_KUNNR
*&---------------------------------------------------------------------*
FORM F_DUMMY_KUNNR.

DATA:LW_KUNNR_SUM TYPE TY_KUNNR_SUM.
*
LOOP AT GT_OUT_ILIFNR_ZN002 INTO GW_OUT_ILIFNR_ZN002.

*2012/05/08 MOD START ダミーレコード作成ロジック修正
LOOP AT GT_LIFNR_TBL INTO    GW_LIFNR_TBL
WHERE  LIFNR = GW_OUT_ILIFNR_ZN002-ILIFNR.
CLEAR:LW_KUNNR_SUM.
READ TABLE GT_KUNNR_SUM
WITH KEY KUNNR = GW_LIFNR_TBL-KUNNR
INTO LW_KUNNR_SUM.

IF SY-SUBRC <> 0.
CLEAR:GW_IN_REC.
GW_IN_REC-ILIFNR   = GW_LIFNR_TBL-LIFNR.  "相殺先
GW_IN_REC-KBN      = C_2.    "1=仕入、2=売上
GW_IN_REC-KUNNR    = GW_LIFNR_TBL-KUNNR.   "得意先
GW_IN_REC-WAERS_05 = GW_LIFNR_TBL-WAERS.   "通貨
*
APPEND GW_IN_REC TO GT_IN_REC.

LW_KUNNR_SUM-KUNNR = GW_LIFNR_TBL-KUNNR.
LW_KUNNR_SUM-MINDK = GW_LIFNR_TBL-MINDK.
LW_KUNNR_SUM-WAERS = GW_LIFNR_TBL-WAERS.

APPEND LW_KUNNR_SUM TO GT_KUNNR_SUM. "残高取得の得意先に追加
ENDIF.
ENDLOOP.

*    READ TABLE GT_OUT_ILIFNR_ZN005
*         WITH KEY ILIFNR = GW_OUT_ILIFNR_ZN002-ILIFNR
*         BINARY SEARCH INTO GW_OUT_ILIFNR_ZN005.
*    IF SY-SUBRC <> 0.
*      READ TABLE GT_LIFNR_TBL
*           WITH KEY LIFNR = GW_OUT_ILIFNR_ZN002-ILIFNR
*           BINARY SEARCH INTO GW_LIFNR_TBL.
*      IF SY-SUBRC = 0.
*        READ TABLE GT_KUNNR_TBL
*             WITH KEY KUNNR = GW_LIFNR_TBL-KUNNR
*             BINARY SEARCH INTO GW_KUNNR_TBL.
*        IF SY-SUBRC = 0.
*          CLEAR:GW_IN_REC.
*          GW_IN_REC-ILIFNR  = GW_KUNNR_TBL-LIFNR.  "相殺先
*          GW_IN_REC-KBN     = C_2.    "1=仕入、2=売上
*          GW_IN_REC-KUNNR   = GW_KUNNR_TBL-KUNNR.   "得意先
**
*          APPEND GW_IN_REC TO GT_IN_REC.
*
*        ENDIF.
*      ENDIF.
*    ENDIF.
*2012/05/08 MOD END

ENDLOOP.
*
ENDFORM.                    " F_DUMMY_KUNNR
*&---------------------------------------------------------------------*
*&      Form  F_KUNNR_SUM
*&---------------------------------------------------------------------*
FORM F_KUNNR_SUM.
DATA :
L_DATE TYPE SY-DATUM.
*
SORT GT_KUNNR_SUM BY KUNNR.
*
LOOP AT GT_KUNNR_SUM INTO GW_KUNNR_SUM.
CASE GW_KUNNR_SUM-MINDK.
WHEN C_MINDK_SP.
L_DATE = GW_ACZFBD. "締日相殺：照合締日
WHEN C_MINDK_02 OR C_MINDK_03.
L_DATE = GW_BCZFBD. "全額相殺：照合締日
WHEN C_MINDK_01.
L_DATE = GW_IZFBDT. "支払日相殺：入金予定日
ENDCASE.
*最新の締日を取得
PERFORM F_YK_ZFBDT_GET_BY_KNVV USING GW_KUNNR_SUM-KUNNR
L_DATE.
*入金予定額(未）
PERFORM GET_IWRBTR USING GW_KUNNR_SUM-KUNNR GW_KUNNR_SUM-WAERS
L_DATE GW_KUNNR_SUM-IWRBTR.
*売掛残
PERFORM GET_WRBTR USING GW_KUNNR_SUM-KUNNR GW_KUNNR_SUM-WAERS
L_DATE GW_KUNNR_SUM-WRBTR.

*当月未検収
PERFORM GET_KNETXAMT USING GW_KUNNR_SUM-KUNNR GW_KUNNR_SUM-WAERS
L_DATE GW_KUNNR_SUM-KNETXAMT.
*
MODIFY GT_KUNNR_SUM FROM GW_KUNNR_SUM
TRANSPORTING IWRBTR  WRBTR KNETXAMT.
*
ENDLOOP.
*
ENDFORM.                    " F_KUNNR_SUM
*&---------------------------------------------------------------------*
*&      Form  GET_IWRBTR
*&---------------------------------------------------------------------*
FORM GET_IWRBTR USING L_KUNNR L_WAERS L_DATE L_IWRBTR.
*
SELECT SUM( IWRBTR ) INTO L_IWRBTR
FROM ZN005
WHERE BUKRS  = P_BUKRS
AND   KUNNR  = L_KUNNR
AND   CZFBDT <= L_DATE
AND   WAERS = L_WAERS
AND   AUFLG  = SPACE.   "入金消込
*
ENDFORM.                    " GET_IWRBTR
*&---------------------------------------------------------------------*
*&      Form  GET_KNETXAMT
*&---------------------------------------------------------------------*
FORM GET_KNETXAMT USING L_KUNNR L_WAERS L_DATE L_KNETXAMT.
*
SELECT SUM( KNETXAMT ) INTO L_KNETXAMT
FROM YN120
* 2012/03/27 MOD インデックス対応 START
*        WHERE VRFCTON = L_KUNNR
*        AND   BUKRS   = P_BUKRS
*        AND   ZFBDT   = L_DATE
*        AND   WAERS   = L_WAERS
*        AND   CZFBDT  = '00000000'.
WHERE  BUKRS   = P_BUKRS
AND  CZFBDT  = '00000000'
AND  VRFCTON = L_KUNNR
AND  ZFBDT   = L_DATE
AND  WAERS   = L_WAERS.
* 2012/03/27 MOD インデックス対応 END
*
ENDFORM.                    " GET_KNETXAMT
*&---------------------------------------------------------------------*
*&      Form  GET_WRBTR
*&---------------------------------------------------------------------*
FORM GET_WRBTR USING L_KUNNR L_WAERS L_DATE L_WRBTR.
DATA :
L_SHKZG TYPE BSID-SHKZG,
LL_WRBTR TYPE BSID-WRBTR.
*
SELECT SHKZG WRBTR INTO (L_SHKZG, LL_WRBTR )
FROM BSID
WHERE BUKRS = P_BUKRS
AND   KUNNR = L_KUNNR
AND   UMSKS = SPACE
AND   UMSKZ = SPACE
AND   AUGDT = '00000000'
AND   AUGBL = SPACE
AND   BUDAT <= L_DATE
AND   WAERS = L_WAERS.
*
IF L_SHKZG = C_H.
L_WRBTR = L_WRBTR + ( LL_WRBTR * -1 ).
ELSE.
L_WRBTR = L_WRBTR + LL_WRBTR.
ENDIF.
ENDSELECT.
*
SELECT SHKZG WRBTR INTO (L_SHKZG, LL_WRBTR )
FROM BSAD
WHERE BUKRS = P_BUKRS
AND   KUNNR = L_KUNNR
AND   UMSKS = SPACE
AND   UMSKZ = SPACE
AND   AUGDT > L_DATE
AND   BUDAT <= L_DATE
AND   WAERS = L_WAERS.
*
IF L_SHKZG = C_H.
L_WRBTR = L_WRBTR + ( LL_WRBTR * -1 ).
ELSE.
L_WRBTR = L_WRBTR + LL_WRBTR.
ENDIF.
ENDSELECT.

*
ENDFORM.                    " GET_WRBTR
*&---------------------------------------------------------------------*
*&      Form  F_YK_ZFBDT_GET_BY_KNVV
*&---------------------------------------------------------------------*
FORM F_YK_ZFBDT_GET_BY_KNVV USING L_KUNNR   L_DATE.
DATA :
L_ZFBDT_OLD TYPE ZFBDT,
L_ZFBDT     TYPE ZFBDT.
*
CALL FUNCTION 'YK_ZFBDT_GET_BY_KNVV'
EXPORTING
I_CORD               = L_KUNNR
I_VKORG              = P_VKORG
I_VTWEG              = P_VTWEG
I_SPART              = P_SPART
I_DAY                = L_DATE
*     I_ZTERM              = 'Y000'
IMPORTING
E_ZFBDT              = L_ZFBDT
E_ZFBDT_OLD          = L_ZFBDT_OLD
*     E_SIHARAIBI          =
*     E_ZTERM              =
EXCEPTIONS
NO_GET_T052          = 1
NO_GOOD_GETDAY       = 2
NO_GET_ZTERM         = 3
OTHERS               = 4.
IF SY-SUBRC <> 0.
*汎用モジュールエラー &1   (SY-SUBRC=&2)
MESSAGE E802 WITH 'YK_ZFBDT_GET_BY_KNVV' SY-SUBRC.
ENDIF.
*
IF L_ZFBDT = L_DATE.
L_DATE = L_ZFBDT.
ELSE.
L_DATE = L_ZFBDT_OLD.
ENDIF.
*
ENDFORM.                    " F_YK_ZFBDT_GET_BY_KNVV
* 2012/05/01 QA260 ADD START
*&---------------------------------------------------------------------*
*&      Form  CANMA_PIRIOD
*&---------------------------------------------------------------------*
*       カンマのピリオド変換
*----------------------------------------------------------------------*
*      <--V_NAME1  カンマありテキスト
*----------------------------------------------------------------------*
FORM CANMA_PIRIOD CHANGING V_NAME1 TYPE KNA1-NAME1.
DATA:L_LEN TYPE I.
L_LEN = STRLEN( V_NAME1 ).

CHECK L_LEN > 0.

DO.
REPLACE ',' WITH '.' INTO V_NAME1 LENGTH L_LEN.
IF SY-SUBRC <> 0.
EXIT.
ENDIF.
ENDDO.

ENDFORM.                    " CANMA_PIRIOD
* 2012/05/01 QA260 ADD END
*&---------------------------------------------------------------------*
*&      Form  GET_CMNT
*&---------------------------------------------------------------------*
*       相殺コメント取得
*----------------------------------------------------------------------*
*      -->P_KUNNR  得意先コード
*      <--P_CMNT   コメント
*----------------------------------------------------------------------*
FORM GET_CMNT USING    P_KUNNR
CHANGING P_CMNT.

DATA:L_ID           TYPE THEAD-TDID,
L_LANGU        TYPE THEAD-TDSPRAS,
L_NAME         TYPE THEAD-TDNAME,
L_OBJECT       TYPE THEAD-TDOBJECT,
LT_LINES       TYPE STANDARD TABLE OF TLINE,
LW_LINES       TYPE TLINE
.

L_LANGU   = 'J'.
L_ID      = 'ZF05'.   "相殺コメント
L_OBJECT  = 'KNB1'.   "会社コードビュー

CLEAR:LT_LINES, LW_LINES,L_NAME.

CONCATENATE P_KUNNR P_BUKRS
INTO L_NAME.

CALL FUNCTION 'READ_TEXT'
EXPORTING
ID                            = L_ID
LANGUAGE                      = L_LANGU
NAME                          = L_NAME
OBJECT                        = L_OBJECT
TABLES
LINES                         = LT_LINES
EXCEPTIONS
ID                            = 1
LANGUAGE                      = 2
NAME                          = 3
NOT_FOUND                     = 4
OBJECT                        = 5
REFERENCE_CHECK               = 6
WRONG_ACCESS_TO_ARCHIVE       = 7
OTHERS                        = 8
.

IF ( SY-SUBRC = 0 ).
CLEAR:LW_LINES-TDLINE.
READ TABLE LT_LINES INTO LW_LINES INDEX 1.
P_CMNT = LW_LINES-TDLINE.
ELSE.
ENDIF.

ENDFORM.                    " GET_CMNT
