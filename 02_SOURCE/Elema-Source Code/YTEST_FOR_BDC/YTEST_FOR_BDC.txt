*&---------------------------------------------------------------------*
*& Report  YTEST_FOR_BDC
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*

REPORT  YTEST_FOR_BDC  MESSAGE-ID 00 LINE-SIZE 200.
* ### 99 START ###
*                NO STANDARD PAGE HEADING.
* ### 99 END ###

* ### 01 00 YR990001
* ### 02 00 2003/08/06
* ### 03 00 YourSoft
* ### 04 01 汎用バッチインプット
* ### 04 02 入力データはローカルPCより転送。結果はPCに戻す
* ### 05 01 S T100
* ### 05 02 S TSTC

* ### 90 2007/03/30
* ### 90 Yoursoft-97358
* ### 90 外部コマンド起動不具合

* ### 91 2007/05/29
* ### 91 Yoursoft-27034,27031
* ### 91 機能追加
* ### 91 →実行結果のログメッセージの詳細を表示する機能を追加

* ### 92 2008/09/30
* ### 92 Yoursoft-37032
* ### 92 英語化メッセージ表示対応

* ### 93 2008/11/10
* ### 93 Yoursoft-A0135
* ### 93 ドライブ変換フラグの判断追加

* ### 94 2008/11/11
* ### 94 Yoursoft-97358
* ### 94 ログメッセージ表示不具合対応

* ### 95 2009/03/31
* ### 95 Yoursoft-92254
* ### 95 テキストエレメント修正（日本語・英語）

* ### 96 00 2009/10/06
* ### 96 01 Yoursoft-77031
* ### 96 02 ダウンロードファイル名を小文字に統一

* ### 97 00 2010/09/02
* ### 97 01 Yoursoft-2077033
* ### 97 02 メッセージ表示不具合修正

* ### 98 00 2011/07/29
* ### 98 01 Yoursoft-A0161
* ### 98 02 画面「C:Check Mode BDC OKCODE Change」の定義を変更

* ### 99 00 2011/10/26
* ### 99 01 Yoursoft-27034
* ### 99 02 ・項目「アップロードデフォルトファイル」の初期値変更
* ### 99 03 　(ユーザパラメータID Y_R3LOCAL_DRIVE を参照)
* ### 99 04 ・項目「PC内のログディレクトリ」の初期値変更
* ### 99 05 　(ユーザパラメータID Y_R3LOCAL_DRIVE を参照)
* ### 99 06 ・機能削除「メールオプション」「外部コマンド起動オプション」
* ### 99 07 ・処理実行後のヘッダ行を表示するように変更
* ### 99 08 ・コメント/変数の命名編集

* ### 9A 00 2012/11/14
* ### 9A 01 Yoursoft-A0161
* ### 9A 02 拡張プログラムチェック対応

***** REALMODEL Excel連携ツール利用の場合******************************
* 以下のコメントが入っているところを変更して下さい
*  "<-- Update1 : PC内のｱｯﾌﾟﾛｰﾄﾞ用ﾃｷｽﾄﾌｧｲﾙ(初期値)
*  "<-- Update2 : ｻｰﾊﾞ内のﾛｸﾞﾃﾞｨﾚｸﾄﾘ
*  "<-- Update3 : PC内のﾛｸﾞﾃﾞｨﾚｸﾄﾘ
*  "<-- Update4 : YR990002のﾌﾟﾛｸﾞﾗﾑ名を変更した場合
***********************************************************************

*-----------------------------------------------------------------------
*     外部テーブル・構造
*-----------------------------------------------------------------------
TABLES: T100,      "メッセージ
TSTC.      "SAP トランザクションコード

*-----------------------------------------------------------------------
*     画面パラメータ
*-----------------------------------------------------------------------
SELECTION-SCREEN BEGIN OF BLOCK SB1 WITH FRAME TITLE TEXT-001.
PARAMETERS: DMODE LIKE CTU_PARAMS-DISMODE DEFAULT 'A' OBLIGATORY.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 01(34) TEXT-010.
* ### 98 START ###
*PARAMETERS P_CH_OK(10)  TYPE C DEFAULT '=BU'.
*SELECTION-SCREEN COMMENT 47(03) TEXT-011.
*PARAMETERS P_CH_OK2(10) TYPE C DEFAULT '/00'.
PARAMETERS P_CH_OK(30)  TYPE C DEFAULT '=BU' VISIBLE LENGTH 14.
SELECTION-SCREEN COMMENT 51(03) TEXT-011.
PARAMETERS P_CH_OK2(30) TYPE C DEFAULT '/00' VISIBLE LENGTH 14.
* ### 98 END   ###
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END  OF BLOCK SB1.

SELECTION-SCREEN BEGIN OF BLOCK SB2 WITH FRAME TITLE TEXT-002.
PARAMETERS: INBUNRUI(1)   TYPE C DEFAULT 'L' OBLIGATORY,
PCFILE(128)   TYPE C LOWER CASE,
SVRFILE(128)  TYPE C LOWER CASE,
REC_FORM(1)   TYPE C DEFAULT 'F' OBLIGATORY,
SEP_CHAR(1)   TYPE C DEFAULT 'T',
UPLOAD_F(128) TYPE C DEFAULT '\r3local\testbdc.txt'
"<-- Update1 : PC内のｱｯﾌﾟﾛｰﾄﾞ用ﾃｷｽﾄﾌｧｲﾙ(初期値)
LOWER CASE.

SELECTION-SCREEN END  OF BLOCK SB2.

SELECTION-SCREEN BEGIN OF BLOCK SB3 WITH FRAME TITLE TEXT-003.
PARAMETERS: EMODE(1)      TYPE C DEFAULT 'A' OBLIGATORY,
ERRFILE(1)    TYPE C DEFAULT 'Y' OBLIGATORY,
EXCELFLG(1)   TYPE C DEFAULT 'Y' OBLIGATORY,
P_LSVDIR(128) TYPE C DEFAULT
'/usr/sap/realmodel/log/batchinput/'
"<-- Update2 : ｻｰﾊﾞ内のﾛｸﾞﾃﾞｨﾚｸﾄﾘ
LOWER CASE OBLIGATORY,
P_LOGSVR(128) TYPE C LOWER CASE,
P_LPCDIR(128) TYPE C DEFAULT '\r3local\log\'
"<-- Update3 : PC内のﾛｸﾞﾃﾞｨﾚｸﾄﾘ
LOWER CASE OBLIGATORY,
P_LOGPC(128)  TYPE C LOWER CASE,
P_LOGNOT AS CHECKBOX,
P_SYSLOG AS CHECKBOX.
SELECTION-SCREEN END  OF BLOCK SB3.

SELECTION-SCREEN BEGIN OF BLOCK SB4 WITH FRAME TITLE TEXT-004.
PARAMETERS: TOBASI(1) TYPE C DEFAULT '#'.
SELECT-OPTIONS: S_RECNO FOR SY-CCURS.
SELECTION-SCREEN END  OF BLOCK SB4.

SELECTION-SCREEN BEGIN OF BLOCK SB5 WITH FRAME TITLE TEXT-005.
PARAMETERS: P_UPDATE LIKE CTU_PARAMS-UPDMODE DEFAULT 'S' OBLIGATORY,
P_NOBINP LIKE CTU_PARAMS-NOBINPT, "DEFAULT 'X',
P_DEFSIZ LIKE CTU_PARAMS-DEFSIZE, "DEFAULT 'X',
P_RACOMM LIKE CTU_PARAMS-RACOMMIT,
P_NOBIEN LIKE CTU_PARAMS-NOBIEND,
P_CATT   LIKE CTU_PARAMS-CATTMODE.
SELECTION-SCREEN END  OF BLOCK SB5.
* ### 99 START ###
*SELECTION-SCREEN BEGIN OF BLOCK SB6 WITH FRAME TITLE TEXT-006.
*PARAMETERS :
*        P_MAIL   LIKE SY-UNAME,
*        P_MAIL_E RADIOBUTTON GROUP RAD1 DEFAULT 'X',
*        P_MAIL_A RADIOBUTTON GROUP RAD1.
*SELECTION-SCREEN END OF BLOCK SB6.
*SELECTION-SCREEN BEGIN OF BLOCK SB7 WITH FRAME TITLE TEXT-007.
*PARAMETERS :
*        P_EXECNM LIKE SXPGCOLIST-NAME,
*        P_EXECPM LIKE SXPGCOLIST-PARAMETERS,
*        P_EXEC_E RADIOBUTTON GROUP RAD2 DEFAULT 'X',
*        P_EXEC_A RADIOBUTTON GROUP RAD2,
*        P_STDOUT AS CHECKBOX.
*SELECTION-SCREEN END OF BLOCK SB7.
* ### 99 END ###

*-----------------------------------------------------------------------
*     グローバル変数
*-----------------------------------------------------------------------
DATA: BEGIN OF BDCDATA OCCURS 0.
INCLUDE STRUCTURE BDCDATA.
DATA: END OF BDCDATA.

DATA: BEGIN OF MESSTAB OCCURS 0.
INCLUDE STRUCTURE BDCMSGCOLL.
DATA: END OF MESSTAB.

DATA: BEGIN OF LOCAL_REC OCCURS 0,     "ファイル受取り用
W_SIKIBETU(1),
W_REC(149),
END OF LOCAL_REC.

DATA: BEGIN OF STATUS_REC OCCURS 0,    "結果渡し用
W_SREC(200),
END OF STATUS_REC.

DATA: BEGIN OF EXCEL_REC OCCURS 0,     "Excel結果渡し保存用
W_EREC(150),
END OF EXCEL_REC.

DATA: BEGIN OF EXCEL_TAB_REC OCCURS 0, "Excel結果渡しTAB編集
W_TABREC(2000),
END OF EXCEL_TAB_REC.

DATA: BEGIN OF INPUT_REC0,             "トランザクション情報
W_SIKIBETU(1),                                        "=0の場合
W_MSG_FLG(1),
W_TRANSACTION(35),
W_OPT(100),
END OF INPUT_REC0.

DATA: BEGIN OF INPUT_REC1,             "画面情報
W_SIKIBETU(1),                                        "= 1の場合
W_MSG_FLG(1),
W_PROGRAM(35),
W_DYNPRO(4),
END OF INPUT_REC1.

DATA: BEGIN OF INPUT_REC2,             "入力項目内容
W_SIKIBETU(1),                                        "=2の場合
W_MSG_FLG(1),
W_FNAM(35),
W_FVAL(100),
END OF INPUT_REC2.

DATA: BEGIN OF FVAL_REC OCCURS 0,      "FVALの内容保存用
W_FVAL(100),
END OF FVAL_REC.

DATA: BEGIN OF INSAVE_REC OCCURS 0,    "入力レコード退避用
W_INSAVE(150),
END OF INSAVE_REC.

DATA: W_I(6)     TYPE N,               "type i を type n にする
W_I2(6)    TYPE N,               "type i を type n にする
COUNT_REC  TYPE I,               "入力レコード数のカウント用
COUNT_ERR  TYPE I,               "エラー数のカウント
W_TRAN LIKE SY-TCODE,            "トランザクションコードの保存
W_MESSAGE(100) TYPE C,           "エラーメッセージ
OLENGTH    TYPE I,               "ダウンロードのバイト数
OFILE(128) TYPE C,               "ダウンロードのPC側ファイル名
* ### 9A START ###
*      LFILE(128) TYPE C,               "バッチインプットのログファイル名
*      LOG_REC(50) TYPE C,              "バッチインプットのログレコード
* ### 9A END   ###
START_TIME LIKE SY-UZEIT,        "開始時間の保存
END_TIME   LIKE SY-UZEIT,        "終了時間の保存
START_DL_TIME LIKE SY-UZEIT,     "ダウンロード開始時間の保存
END_DL_TIME   LIKE SY-UZEIT,     "ダウンロード終了時間の保存
START_DAY     LIKE SY-DATUM,     "開始日の保存
EDIT_DATE(10),                   "日付の編集
EDIT_TIME(8),                    "時刻の編集
DIFF_TIME(6)  TYPE N.            "終了時間−開始時間

CLASS CL_ABAP_CHAR_UTILITIES DEFINITION LOAD.

DATA :TAB TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB,
W_DUMMY(1),                      "splitでのごみを吸収
W_DUMMY2(1),                     "splitでのごみを吸収
W_EXCEL_HEADER(2000),            "Excelのヘッダー
W_EXCEL_HEADER_FLG(1),           "Excelのヘッダーを出力するか
W_DMODE(1),                      "dmodeの編集用
W_OPTION(100),                   "処理オプション
W_OPTION_SAVE(100),              "処理オプションの保存
F_LOG_DOWNLOAD(1),               "ログファイルをダウンロードするか
W_GAMENFLG(1),
LOCAL_REC_0SAVE(150).            "０のパターンのレコード退避

DATA: MSGV1 LIKE SY-MSGV1,
MSGV2 LIKE SY-MSGV1,
MSGV3 LIKE SY-MSGV1,
MSGV4 LIKE SY-MSGV1.

* SAPGUI_PROGRESS_INDICATOR の為の変数
DATA: W_ALL_TRAN_KENSUU(6)   TYPE P,   "トランザクションの総数
W_ALL_TRAN_KENSUU_C(7) TYPE C,   "文字列化
W_PROGRESS_MSG(100)    TYPE C,
W_PERCENTAGE           TYPE I.

* ### 93 START ###
DATA: FLG_DRIVE TYPE C.                "ドライブフラグ
* ### 93 END ###

* ### 94 START ###
DATA: W_MSGV1_SET TYPE C,              "メッセージ1置換有無フラグ
W_MSGV2_SET TYPE C,              "メッセージ2置換有無フラグ
W_MSGV3_SET TYPE C,              "メッセージ3置換有無フラグ
W_MSGV4_SET TYPE C.              "メッセージ4置換有無フラグ
* ### 94 END ###

* ### 99 START ###
* ローカルドライブ指定用
DATA LCNS_DRIVE_LCL   TYPE CHAR02  VALUE 'C:'.
DATA LW_R3LOCAL_DRIVE TYPE CHAR02.   "R3LCLドライブ取得用
* ### 99 END ###

*-----------------------------------------------------------------------
*     start-of-selection
*-----------------------------------------------------------------------
START-OF-SELECTION.
PERFORM GAMEN_CHECK.
CASE DMODE.
WHEN 'T'.
PERFORM FILE_TRANSFER.
F_LOG_DOWNLOAD = 'N'.
WHEN 'L'.
PERFORM LOG_DISPLAY.
F_LOG_DOWNLOAD = 'N'.
WHEN OTHERS.
PERFORM BATCH_INIT.
PERFORM MAIN_LOOP.
PERFORM BATCH_END.
ENDCASE.

*-----------------------------------------------------------------------
*      end-of-selection
*-----------------------------------------------------------------------
END-OF-SELECTION.
IF F_LOG_DOWNLOAD <> 'N'.
PERFORM LOG_DOWNLOAD.
PERFORM SYSLOG_WRITE.
* ### 99 START ###
*    PERFORM MAIL_DATA.
*    PERFORM EXEC_COMMAND.
* ### 99 END ###
ENDIF.

*-----------------------------------------------------------------------
*      initialization
*-----------------------------------------------------------------------
INITIALIZATION.
CALL FUNCTION 'Y_R0007'
CHANGING
FILENAME = P_LSVDIR.

* ### 99 START ###
* パラメータID:Y_R3LOCAL_DRIVE から ドライブを取得
GET PARAMETER ID 'Y_R3LOCAL_DRIVE' FIELD LW_R3LOCAL_DRIVE.

IF SY-SUBRC = 0.
CONCATENATE LW_R3LOCAL_DRIVE UPLOAD_F INTO UPLOAD_F.
CONCATENATE LW_R3LOCAL_DRIVE P_LPCDIR INTO P_LPCDIR.
ELSE.
CONCATENATE LCNS_DRIVE_LCL UPLOAD_F INTO UPLOAD_F.
CONCATENATE LCNS_DRIVE_LCL P_LPCDIR INTO P_LPCDIR.
ENDIF.
* ### 99 END ###

*-----------------------------------------------------------------------
*     AT LINE-SELECTION
*-----------------------------------------------------------------------
AT LINE-SELECTION.

"--------------------------------------------------------
" メッセージレコードをダブルクリックしたときに
" [F1]ヘルプを表示する
"--------------------------------------------------------
PERFORM SHOW_LOG_DETAIL
USING SY-LISEL.

*-----------------------------------------------------------------------
*     バッチインプットの準備
*-----------------------------------------------------------------------
FORM BATCH_INIT.

DATA: FNAME(128), FTYPE(3), FSIZE TYPE I,    "アップロード指示用
W_CANCEL(1),
FSIZE_N(10) TYPE N.
DATA: F_BDC_OKCODE(1),
F_TRAN_SP(1),     "トランザクションが空白
F_TRAN_NG(1),     "トランザクションが未定義
F_TRAN_CH(1).     "トランザクション権限チェック

*チェックモードの時は、 w_dmode = 'N'にする
IF DMODE = 'C'.
W_DMODE = 'N'.
ELSE.
W_DMODE = DMODE.
ENDIF.
*バッチインプットの結果を、サーバーに書く
GET TIME.
START_TIME = SY-UZEIT.           " 開始時間の保存
START_DAY  = SY-DATUM.           " 開始日の保存

IF P_LOGSVR IS INITIAL.
CONCATENATE P_LSVDIR SY-MANDT '_' SY-UNAME '_'
START_DAY '_' START_TIME '.TXT' INTO OFILE.
*   ### 96 START ###
TRANSLATE OFILE TO LOWER CASE.
*   ### 96 END ###
ELSE.
IF P_LOGSVR+0(3) = '{{$'.
CONCATENATE P_LSVDIR SY-MANDT '_' SY-UNAME '_'
START_DAY '_' START_TIME '_' P_LOGSVR+3(125)
'.TXT' INTO OFILE.
*     ### 96 START ###
TRANSLATE OFILE TO LOWER CASE.
*     ### 96 END ###
ELSE.
CONCATENATE P_LSVDIR P_LOGSVR INTO OFILE.
ENDIF.
ENDIF.

OPEN DATASET OFILE FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
IF SY-SUBRC <> 0.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*    MESSAGE S398 WITH OFILE TEXT-E01.
MESSAGE S398 WITH OFILE TEXT-E01 SPACE SPACE.
* ### 9A END   ###
"OFILE が開けません(ログファイル)
STOP.
ENDIF.

PERFORM LOG_MSG USING 'M-Client:' SY-MANDT
'User:' SY-UNAME
'Mode:' DMODE '' '' '' ''.
WRITE START_DAY  TO EDIT_DATE MM/DD/YYYY.
WRITE START_TIME TO EDIT_TIME USING EDIT MASK '__:__:__'.
PERFORM LOG_MSG USING 'M-Program Start Time ='
EDIT_DATE EDIT_TIME '' '' '' '' '' '' ''.

IF INBUNRUI = 'L'.         "入力ファイルがPC端末にある場合
GET TIME.
START_DL_TIME = SY-UZEIT.
WRITE START_DL_TIME TO EDIT_TIME USING EDIT MASK '__:__:__'.
PERFORM LOG_MSG USING 'M-Data Upload Start Time ='
EDIT_TIME '' '' '' '' '' '' '' ''.

IF SY-BATCH IS INITIAL.   "バックグラウンド処理でなかったら
IF PCFILE IS INITIAL.
CALL FUNCTION 'Y_UPLOAD'
EXPORTING
FILENAME                = UPLOAD_F
FILETYPE                = 'ASC'
ITEM                    = 'Batch Input Data'
IMPORTING
FILESIZE                = FSIZE
ACT_FILENAME            = FNAME
ACT_FILETYPE            = FTYPE
CANCEL                  = W_CANCEL
TABLES
DATA_TAB                = LOCAL_REC
EXCEPTIONS
CONVERSION_ERROR        = 1
INVALID_TABLE_WIDTH     = 2
INVALID_TYPE            = 3
NO_BATCH                = 4
UNKNOWN_ERROR           = 5
GUI_REFUSE_FILETRANSFER = 6
OTHERS                  = 7.
ELSE.
* ### 93 START ###
"ドライブフラグの取得
IF PCFILE+1(1) = ':'.
FLG_DRIVE = 'X'.
ELSE.
CLEAR FLG_DRIVE.
ENDIF.
* ### 93 END ###

CALL FUNCTION 'Y_WS_UPLOAD'
EXPORTING
FILENAME                = PCFILE
FILETYPE                = 'ASC'
ITEM                    = 'Batch Input Data'
* ### 93 START ###
NOT_DRIVE_CHANGE        = FLG_DRIVE
* ### 93 END ###
IMPORTING
FILESIZE                = FSIZE
ACT_FILENAME            = FNAME
ACT_FILETYPE            = FTYPE
CANCEL                  = W_CANCEL
TABLES
DATA_TAB                = LOCAL_REC
EXCEPTIONS
* ### 9A START ###
*            CONVERSION_ERROR        = 1
*            FILE_OPEN_ERROR         = 2
*            FILE_READ_ERROR         = 3
*            INVALID_TYPE            = 4
*            NO_BATCH                = 5
*            UNKNOWN_ERROR           = 6
*            INVALID_TABLE_WIDTH     = 7
*            GUI_REFUSE_FILETRANSFER = 8
*            CUSTOMER_ERROR          = 9
*            OTHERS                  = 10.
FILE_OPEN_ERROR          = 1
FILE_READ_ERROR          = 2
NO_BATCH                 = 3
GUI_REFUSE_FILETRANSFER  = 4
INVALID_TYPE             = 5
NO_AUTHORITY             = 6
UNKNOWN_ERROR            = 7
BAD_DATA_FORMAT          = 8
HEADER_NOT_ALLOWED       = 9
SEPARATOR_NOT_ALLOWED    = 10
HEADER_TOO_LONG          = 11
UNKNOWN_DP_ERROR         = 12
ACCESS_DENIED            = 13
DP_OUT_OF_MEMORY         = 14
DISK_FULL                = 15
DP_TIMEOUT               = 16
OTHERS                   = 17.
* ### 9A END   ###
ENDIF.
IF SY-SUBRC <> 0.
CLOSE DATASET OFILE.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*        MESSAGE S398 WITH TEXT-E02.
MESSAGE S398 WITH TEXT-E02 SPACE SPACE SPACE.
* ### 9A END   ###
"ファイルをアップロードできません
STOP.
ENDIF.
ELSE.
CLOSE DATASET OFILE.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*      MESSAGE S398 WITH TEXT-E03.
MESSAGE S398 WITH TEXT-E03 SPACE SPACE SPACE.
* ### 9A END   ###
"バックグラウンド処理では、アップロードできません
STOP.
ENDIF.

IF NOT W_CANCEL IS INITIAL.
PERFORM LOG_MSG USING 'Upload Cancel'
'' '' '' '' '' '' '' '' ''.
CLOSE DATASET OFILE.
F_LOG_DOWNLOAD = 'N'.
STOP.
ENDIF.

GET TIME.
END_DL_TIME = SY-UZEIT.
WRITE END_DL_TIME TO EDIT_TIME USING EDIT MASK '__:__:__'.
PERFORM LOG_MSG USING 'M-Data Upload End Time ='
EDIT_TIME '' '' '' '' '' '' '' ''.

FSIZE_N = FSIZE.
PERFORM LOG_MSG USING 'M-Data Upload Byte Size ='
FSIZE_N '' '' '' '' '' '' '' ''.

DIFF_TIME = END_DL_TIME - START_DL_TIME.
PERFORM LOG_MSG USING 'M-Data Upload Seconds ='
DIFF_TIME '' '' '' '' '' '' '' ''.
ENDIF.

GET TIME.
WRITE SY-UZEIT TO EDIT_TIME USING EDIT MASK '__:__:__'.
PERFORM LOG_MSG USING 'M-Call Transaction Start Time ='
EDIT_TIME '' '' '' '' '' '' '' ''.
COUNT_REC = 0.
COUNT_ERR = 0.
REFRESH BDCDATA.
REFRESH FVAL_REC.
REFRESH INSAVE_REC.
CLEAR   INSAVE_REC.
REFRESH EXCEL_REC.

* トランザクション総数を調査
IF INBUNRUI = 'L'.                  "L:パソコン
LOOP AT LOCAL_REC.
IF LOCAL_REC+0(1) = '0'.
IF REC_FORM = 'V'.             "可変長フォーマットの場合
IF SEP_CHAR = 'T'.           "区切り文字がTABの場合
SPLIT LOCAL_REC AT TAB
INTO INPUT_REC0-W_SIKIBETU
INPUT_REC0-W_MSG_FLG
INPUT_REC0-W_TRANSACTION
INPUT_REC0-W_OPT
W_DUMMY.
ELSE.
SPLIT LOCAL_REC AT SEP_CHAR
INTO INPUT_REC0-W_SIKIBETU
INPUT_REC0-W_MSG_FLG
INPUT_REC0-W_TRANSACTION
INPUT_REC0-W_OPT
W_DUMMY.
ENDIF.
ELSE.                          "固定長フォーマットの場合
MOVE LOCAL_REC TO INPUT_REC0.
ENDIF.
IF INPUT_REC0-W_TRANSACTION IS INITIAL.
F_TRAN_SP = 'Y'.
ELSE.
SELECT SINGLE * FROM TSTC
WHERE TCODE = INPUT_REC0-W_TRANSACTION.
IF SY-SUBRC <> 0.
F_TRAN_NG = 'Y'.
ENDIF.
ENDIF.
ENDIF.
IF LOCAL_REC+0(1) = '3'.
W_ALL_TRAN_KENSUU = W_ALL_TRAN_KENSUU + 1.
ENDIF.
IF LOCAL_REC CS 'BDC_OKCODE' AND
LOCAL_REC CS P_CH_OK.
F_BDC_OKCODE = 'Y'.
ENDIF.

AUTHORITY-CHECK  OBJECT 'S_TCODE'
ID 'TCD'  FIELD INPUT_REC0-W_TRANSACTION.

IF SY-SUBRC NE 0.
F_TRAN_CH = 'Y'.
ENDIF.

ENDLOOP.

*トランザクション件数が300を超える場合、ファイルに書き込みメモリ節約
IF W_ALL_TRAN_KENSUU > 300.
INBUNRUI = 'S'.
CONCATENATE P_LSVDIR SY-MANDT '_' SY-UNAME '_'
START_DAY '_' START_TIME '.DATA' INTO SVRFILE.
*     ### 96 START ###
TRANSLATE SVRFILE TO LOWER CASE.
*     ### 96 END ###
OPEN DATASET SVRFILE FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
IF SY-SUBRC <> 0.
CLOSE DATASET OFILE.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*        MESSAGE S398 WITH SVRFILE TEXT-E04.
MESSAGE S398 WITH SVRFILE TEXT-E04 SPACE SPACE.
* ### 9A END   ###
"SVRFILE のファイルが開けません
STOP.
ENDIF.
LOOP AT LOCAL_REC.
TRANSFER LOCAL_REC TO SVRFILE.
ENDLOOP.
CLOSE DATASET SVRFILE.
REFRESH LOCAL_REC.              "メモリの開放
ENDIF.
ELSE.
OPEN DATASET SVRFILE FOR INPUT IN TEXT MODE ENCODING DEFAULT.
IF SY-SUBRC <> 0.
CLOSE DATASET OFILE.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*      MESSAGE S398 WITH SVRFILE TEXT-E04.
MESSAGE S398 WITH SVRFILE TEXT-E04 SPACE SPACE.
* ### 9A END   ###
"SVRFILE のファイルが開けません
STOP.
ENDIF.

DO.
CLEAR LOCAL_REC.
READ DATASET SVRFILE INTO LOCAL_REC.
IF SY-SUBRC <> 0. EXIT. ENDIF.
IF LOCAL_REC+0(1) = '0'.
IF REC_FORM = 'V'.             "可変長フォーマットの場合
IF SEP_CHAR = 'T'.           "区切り文字がTABの場合
SPLIT LOCAL_REC AT TAB
INTO INPUT_REC0-W_SIKIBETU
INPUT_REC0-W_MSG_FLG
INPUT_REC0-W_TRANSACTION
INPUT_REC0-W_OPT
W_DUMMY.
ELSE.
SPLIT LOCAL_REC AT SEP_CHAR
INTO INPUT_REC0-W_SIKIBETU
INPUT_REC0-W_MSG_FLG
INPUT_REC0-W_TRANSACTION
INPUT_REC0-W_OPT
W_DUMMY.
ENDIF.
ELSE.                          "固定長フォーマットの場合
MOVE LOCAL_REC TO INPUT_REC0.
ENDIF.
IF INPUT_REC0-W_TRANSACTION IS INITIAL.
F_TRAN_SP = 'Y'.
ELSE.
SELECT SINGLE * FROM TSTC
WHERE TCODE = INPUT_REC0-W_TRANSACTION.
IF SY-SUBRC <> 0.
F_TRAN_NG = 'Y'.
ENDIF.
ENDIF.
ENDIF.

IF LOCAL_REC+0(1) = '3'.
W_ALL_TRAN_KENSUU = W_ALL_TRAN_KENSUU + 1.
ENDIF.

IF LOCAL_REC CS 'BDC_OKCODE' AND
LOCAL_REC CS P_CH_OK.
F_BDC_OKCODE = 'Y'.
ENDIF.

AUTHORITY-CHECK  OBJECT 'S_TCODE'
ID 'TCD'  FIELD INPUT_REC0-W_TRANSACTION.

IF SY-SUBRC NE 0.
F_TRAN_CH = 'Y'.
ENDIF.

ENDDO.

CLOSE DATASET SVRFILE.

ENDIF.

W_ALL_TRAN_KENSUU_C = W_ALL_TRAN_KENSUU.  "文字列化

IF DMODE = 'C' AND
F_BDC_OKCODE IS INITIAL.
CLOSE DATASET OFILE.
F_LOG_DOWNLOAD = 'N'.
* ### 92 START ###
* 注意！！TEXT-E16は、日本語のテキストは入力されていないが、
* 英語メッセージ出力の為に作成した。削除しないで下さい。
*    MESSAGE S398 WITH TEXT-E05.
* ### 9A START ###
*   E16：英語メッセージなしのため削除
*    MESSAGE S398 WITH TEXT-E05 TEXT-E16.
MESSAGE S398 WITH TEXT-E05 SPACE SPACE SPACE.
* ### 9A END   ###
* ### 92 END ###
"指定した変換前のBDC_OKCODEがありません
STOP.
ENDIF.

IF F_TRAN_SP = 'Y'.
CLOSE DATASET OFILE.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*    MESSAGE S398 WITH TEXT-E06.
MESSAGE S398 WITH TEXT-E06 SPACE SPACE SPACE.
* ### 9A END   ###
"トランザクションが空白。レコードフォーマット要確認
STOP.
ENDIF.

IF F_TRAN_NG = 'Y'.
CLOSE DATASET OFILE.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*    MESSAGE S398 WITH TEXT-E07.
MESSAGE S398 WITH TEXT-E07 SPACE SPACE SPACE.
* ### 9A END   ###
"未定義のトランザクションを指定しています
STOP.
ENDIF.

IF F_TRAN_CH = 'Y'.
CLOSE DATASET OFILE.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*    MESSAGE S398 WITH TEXT-E15.
MESSAGE S398 WITH TEXT-E15 SPACE SPACE SPACE.
* ### 9A END   ###
"トランザクション実行権限がありません
STOP.
ENDIF.

ENDFORM.                    "BATCH_INIT

*-----------------------------------------------------------------------
*     メインループ
*-----------------------------------------------------------------------
FORM MAIN_LOOP.

IF INBUNRUI = 'L'.                  "L:パソコン
LOOP AT LOCAL_REC.
IF LOCAL_REC-W_SIKIBETU >= '0' AND
LOCAL_REC-W_SIKIBETU =< '3'.
PERFORM LOCAL_REC_SYORI.
ENDIF.
ENDLOOP.
ELSE.
OPEN DATASET SVRFILE FOR INPUT IN TEXT MODE ENCODING DEFAULT.
IF SY-SUBRC <> 0.
CLOSE DATASET OFILE.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*      MESSAGE S398 WITH SVRFILE TEXT-E04.
MESSAGE S398 WITH SVRFILE TEXT-E04 SPACE SPACE.
* ### 9A END   ###
"SVRFILE のファイルが開けません
STOP.
ENDIF.

DO.
CLEAR LOCAL_REC.
READ DATASET SVRFILE INTO LOCAL_REC.
IF SY-SUBRC <> 0. EXIT. ENDIF.
PERFORM LOCAL_REC_SYORI.
ENDDO.
CLOSE DATASET SVRFILE.
ENDIF.

ENDFORM.                    "MAIN_LOOP

*-----------------------------------------------------------------------
*     内部テーブル LOCAL_REC の処理
*-----------------------------------------------------------------------
FORM LOCAL_REC_SYORI.

IF ERRFILE = 'Y' OR EXCELFLG = 'Y'."エラーレコードを返す場合
IF INSAVE_REC[] IS INITIAL AND LOCAL_REC+0(1) <> '0'.
"トランザクションの最初のレコードが０のパターンでない場合
MOVE LOCAL_REC_0SAVE TO INSAVE_REC-W_INSAVE.
APPEND INSAVE_REC.
ENDIF.
MOVE LOCAL_REC TO INSAVE_REC-W_INSAVE.
APPEND INSAVE_REC.
ENDIF.

CASE LOCAL_REC-W_SIKIBETU.
*-----------------------------------------------------------------------
WHEN '0'.                        " トランザクションコードを取得
CLEAR INPUT_REC0.
IF REC_FORM = 'V'.             "可変長フォーマットの場合
IF SEP_CHAR = 'T'.           "区切り文字がTABの場合
SPLIT LOCAL_REC AT TAB
INTO INPUT_REC0-W_SIKIBETU
INPUT_REC0-W_MSG_FLG
INPUT_REC0-W_TRANSACTION
INPUT_REC0-W_OPT
W_DUMMY.
ELSE.
SPLIT LOCAL_REC AT SEP_CHAR
INTO INPUT_REC0-W_SIKIBETU
INPUT_REC0-W_MSG_FLG
INPUT_REC0-W_TRANSACTION
INPUT_REC0-W_OPT
W_DUMMY.
ENDIF.
ELSE.                          "固定長フォーマットの場合
MOVE LOCAL_REC TO INPUT_REC0.
ENDIF.
IF NOT INPUT_REC0-W_TRANSACTION IS INITIAL.
MOVE INPUT_REC0-W_TRANSACTION TO W_TRAN.
ENDIF.
W_OPTION = INPUT_REC0-W_OPT.
MOVE LOCAL_REC TO LOCAL_REC_0SAVE.

* Call Transaction のオプション
* Call Transaction が'Z'の時すべてをクリアする
IF W_OPTION CS 'Z'.
CLEAR: P_NOBINP,
P_DEFSIZ,
P_RACOMM.
ENDIF.

IF W_OPTION CS 'H'. P_NOBINP = 'X'. ENDIF.
IF W_OPTION CS 'D'. P_DEFSIZ = 'X'. ENDIF.
IF W_OPTION CS 'C'. P_RACOMM = 'X'. ENDIF.
IF W_OPTION CS 'N'. P_CATT   = 'N'. ENDIF.
IF W_OPTION CS 'A'. P_CATT   = 'A'. ENDIF.
IF W_OPTION CS 'B'. P_NOBIEN = 'X'. ENDIF.
IF W_OPTION <> W_OPTION_SAVE.
PERFORM LOG_MSG USING 'M-B/I Option ='
W_OPTION '' '' '' '' '' '' '' ''.
W_OPTION_SAVE = W_OPTION.
ENDIF.

*-----------------------------------------------------------------------
WHEN '1'.                        "プログラム名とDynpro番号を取得
CLEAR INPUT_REC1.
W_GAMENFLG = '1'.
IF REC_FORM = 'V'.             "可変長フォーマットの場合
IF SEP_CHAR = 'T'.           "区切り文字がTABの場合
SPLIT LOCAL_REC AT TAB
INTO INPUT_REC1-W_SIKIBETU  W_DUMMY2
INPUT_REC1-W_PROGRAM INPUT_REC1-W_DYNPRO
W_DUMMY.
ELSE.                        "区切り文字がTAB以外の場合
SPLIT LOCAL_REC AT SEP_CHAR
INTO INPUT_REC1-W_SIKIBETU W_DUMMY2
INPUT_REC1-W_PROGRAM INPUT_REC1-W_DYNPRO
W_DUMMY.
ENDIF.
ELSE.                          "固定長フォーマットの場合
MOVE LOCAL_REC TO INPUT_REC1.
ENDIF.
PERFORM BDC_DYNPRO USING INPUT_REC1-W_PROGRAM
INPUT_REC1-W_DYNPRO.
*-----------------------------------------------------------------------
WHEN '2'.                        "入力項目の値を取得
CLEAR INPUT_REC2.
IF REC_FORM = 'V'.             "可変長フォーマットの場合
IF SEP_CHAR = 'T'.           "区切り文字がTABの場合
SPLIT LOCAL_REC AT TAB
INTO INPUT_REC2-W_SIKIBETU INPUT_REC2-W_MSG_FLG
INPUT_REC2-W_FNAM INPUT_REC2-W_FVAL W_DUMMY.
ELSE.                        "区切り文字がTAB以外の場合
SPLIT LOCAL_REC AT SEP_CHAR
INTO INPUT_REC2-W_SIKIBETU INPUT_REC2-W_MSG_FLG
INPUT_REC2-W_FNAM INPUT_REC2-W_FVAL W_DUMMY.
ENDIF.
ELSE.                          "固定長フォーマットの場合
MOVE LOCAL_REC TO INPUT_REC2.
ENDIF.

IF W_GAMENFLG = '1' AND INPUT_REC2-W_FNAM = 'BDC_OKCODE'.
"画面に入力項目がない場合
MOVE '2' TO INSAVE_REC-W_INSAVE. "先頭が2だけのレコード
APPEND INSAVE_REC.
CLEAR W_GAMENFLG.
ELSE.
W_GAMENFLG = '2'.
ENDIF.

CASE INPUT_REC2-W_FVAL.
WHEN 'sy-msgv1' OR 'SY-MSGV1'. INPUT_REC2-W_FVAL = MSGV1.
WHEN 'sy-msgv2' OR 'SY-MSGV2'. INPUT_REC2-W_FVAL = MSGV2.
WHEN 'sy-msgv3' OR 'SY-MSGV3'. INPUT_REC2-W_FVAL = MSGV3.
WHEN 'sy-msgv4' OR 'SY-MSGV4'. INPUT_REC2-W_FVAL = MSGV4.
ENDCASE.

IF INPUT_REC2-W_FVAL+0(1) <> TOBASI.
IF DMODE = 'C' AND INPUT_REC2-W_FNAM = 'BDC_OKCODE'
AND INPUT_REC2-W_FVAL = P_CH_OK.
PERFORM BDC_FIELD  USING 'BDC_OKCODE' P_CH_OK2.
ELSE.
PERFORM BDC_FIELD  USING INPUT_REC2-W_FNAM
INPUT_REC2-W_FVAL.
ENDIF.
IF INPUT_REC2-W_MSG_FLG <> SPACE.
"データの内容をメッセージに
MOVE  INPUT_REC2-W_FVAL TO  FVAL_REC.
APPEND FVAL_REC.
ENDIF.
ENDIF.
*-----------------------------------------------------------------------
WHEN '3'.           " トランザクションを処理するタイミング
PERFORM BATCH_INSERT.
REFRESH BDCDATA.
REFRESH FVAL_REC.
REFRESH INSAVE_REC.
CLEAR   INSAVE_REC.
ENDCASE.

ENDFORM.                    "LOCAL_REC_SYORI

*-----------------------------------------------------------------------
*     バッチインプットの終了
*-----------------------------------------------------------------------
FORM BATCH_END.

GET TIME.
END_TIME = SY-UZEIT.             " 終了時間の保存
WRITE END_TIME TO EDIT_TIME USING EDIT MASK '__:__:__'.
PERFORM LOG_MSG USING 'M-Program End Time = '
EDIT_TIME '' '' '' '' '' '' '' ''.

DIFF_TIME = END_TIME - START_TIME.
PERFORM LOG_MSG USING 'M-Program Seconds ='
DIFF_TIME '' '' '' '' '' '' '' ''.

MOVE COUNT_REC TO W_I.
PERFORM LOG_MSG USING 'M-Transaction-Count='
W_I '' '' '' '' '' '' '' ''.
MOVE COUNT_ERR TO W_I2.
PERFORM LOG_MSG USING 'M-Error-Count='
W_I2 '' '' '' '' '' '' '' ''.
CLOSE DATASET OFILE.

ENDFORM.                    "BATCH_END

*-----------------------------------------------------------------------
*     ログファイルをPCにダウンロード
*-----------------------------------------------------------------------
FORM LOG_DOWNLOAD.

* バッチインプットの結果を返す
OPEN DATASET OFILE FOR INPUT IN TEXT MODE ENCODING DEFAULT.
IF SY-SUBRC <> 0.
* ### 9A START ###
*    MESSAGE S398 WITH OFILE TEXT-E04.
MESSAGE S398 WITH OFILE TEXT-E04 SPACE SPACE.
* ### 9A END   ###
"OFILE のファイルが開けません
EXIT.
ENDIF.

DO.
CLEAR STATUS_REC.
READ DATASET OFILE INTO STATUS_REC.
IF SY-SUBRC <> 0. EXIT. ENDIF.
APPEND STATUS_REC.
IF P_LOGNOT IS INITIAL.
IF STATUS_REC+0(1) = 'M' OR
STATUS_REC+0(1) = 'O' OR STATUS_REC+0(1) = 'B' OR
STATUS_REC+0(1) = 'G'.
FORMAT COLOR OFF.
WRITE:/ STATUS_REC.
ENDIF.
IF STATUS_REC+0(1) = 'E'.
FORMAT COLOR COL_NEGATIVE.
WRITE:/ STATUS_REC.
ENDIF.
ENDIF.
ENDDO.
CLOSE DATASET OFILE.

IF P_LOGPC IS INITIAL.
CONCATENATE P_LPCDIR 'R' START_DAY '_' START_TIME '.TXT'
INTO OFILE.
*   ### 96 START ###
TRANSLATE OFILE TO LOWER CASE.
*   ### 96 END ###
ELSE.
CONCATENATE  P_LPCDIR P_LOGPC INTO OFILE.
ENDIF.

* ### 93 START ###
"ドライブフラグの取得
IF OFILE+1(1) = ':'.
FLG_DRIVE = 'X'.
ELSE.
CLEAR FLG_DRIVE.
ENDIF.
* ### 93 END ###

IF SY-BATCH IS INITIAL.
*バックグラウンド処理でなかったら
CALL FUNCTION 'Y_WS_DOWNLOAD'
EXPORTING
FILENAME            = OFILE
FILETYPE            = 'ASC'
* ### 93 START ###
NOT_DRIVE_CHANGE    = FLG_DRIVE
* ### 93 END ###
IMPORTING
FILELENGTH          = OLENGTH
TABLES
DATA_TAB            = STATUS_REC
EXCEPTIONS
* ### 9A START ###
*        FILE_OPEN_ERROR     = 1
*        FILE_WRITE_ERROR    = 2
*        INVALID_FILESIZE    = 3
*        INVALID_TABLE_WIDTH = 4
*        INVALID_TYPE        = 5
*        NO_BATCH            = 6
*        UNKNOWN_ERROR       = 7
*        OTHERS              = 8.
FILE_WRITE_ERROR         = 1
NO_BATCH                 = 2
GUI_REFUSE_FILETRANSFER  = 3
INVALID_TYPE             = 4
NO_AUTHORITY             = 5
UNKNOWN_ERROR            = 6
HEADER_NOT_ALLOWED       = 7
SEPARATOR_NOT_ALLOWED    = 8
FILESIZE_NOT_ALLOWED     = 9
HEADER_TOO_LONG          = 10
DP_ERROR_CREATE          = 11
DP_ERROR_SEND            = 12
DP_ERROR_WRITE           = 13
UNKNOWN_DP_ERROR         = 14
ACCESS_DENIED            = 15
DP_OUT_OF_MEMORY         = 16
DISK_FULL                = 17
DP_TIMEOUT               = 18
FILE_NOT_FOUND           = 19
DATAPROVIDER_EXCEPTION   = 20
CONTROL_FLUSH_ERROR      = 21
OTHERS                   = 22.
* ### 9A END   ###
IF SY-SUBRC <> 0.
* ### 9A START ###
*      MESSAGE S398 WITH TEXT-E08.
MESSAGE S398 WITH TEXT-E08 SPACE SPACE SPACE.
* ### 9A END   ###
"ログファイルをダウンロード出来ません
ENDIF.
ENDIF.

IF EXCELFLG = 'Y'.
PERFORM EXCEL_EDIT.
ENDIF.

ENDFORM.                    "LOG_DOWNLOAD

*-----------------------------------------------------------------------
*     シスログに出力
*-----------------------------------------------------------------------
FORM SYSLOG_WRITE.

DATA: LOG_FILE(50).

CHECK P_SYSLOG = 'X'.


CONCATENATE SY-MANDT  '_' SY-UNAME '_'
START_DAY '_' START_TIME '.TXT' INTO LOG_FILE.
* ### 96 START ###
TRANSLATE LOG_FILE TO LOWER CASE.
* ### 96 END ###
MOVE COUNT_REC TO W_I.
MOVE COUNT_ERR TO W_I2.

CALL FUNCTION 'RSLG_WRITE_SYSLOG_ENTRY'
EXPORTING
DATA_WORD1         = LOG_FILE
DATA_WORD2         = 'ALL-CNT'
DATA_WORD3         = W_I
DATA_WORD4         = 'ERR-CNT'
DATA_WORD5         = W_I2
SL_MESSAGE_AREA    = 'GZ'
SL_MESSAGE_SUBID   = 'Z'
EXCEPTIONS
DATA_MISSING       = 1
DATA_WORDS_PROBLEM = 2
OTHER_PROBLEM      = 3
PRE_PARAMS_PROBLEM = 4
OTHERS             = 5.

IF SY-SUBRC <> 0.
* ### 9A START ###
*    MESSAGE S398 WITH TEXT-E09.
MESSAGE S398 WITH TEXT-E09 SPACE SPACE SPACE.
* ### 9A END   ###
"シスログに出力出来ません
ENDIF.

ENDFORM.                    "SYSLOG_WRITE

*-----------------------------------------------------------------------
*     バッチデータの挿入
*-----------------------------------------------------------------------
FORM BATCH_INSERT.

DATA: W_CTU_PARAMS LIKE CTU_PARAMS,
W_MSGID_NO(23).
* ### 9A START ###
DATA: W_SREC_TMP(200) TYPE C.  "受け渡し用一時領域
* ### 9A END   ###

COUNT_REC = COUNT_REC + 1.
IF COUNT_REC IN S_RECNO.     "レコードの選択
ELSE.
MOVE COUNT_REC TO W_I.
PERFORM LOG_MSG USING 'O-No=' W_I 'Skip'
'' '' '' '' '' '' ''.
EXIT.
ENDIF.

W_CTU_PARAMS-DISMODE  = W_DMODE.
W_CTU_PARAMS-UPDMODE  = P_UPDATE.
W_CTU_PARAMS-NOBINPT  = P_NOBINP.
W_CTU_PARAMS-DEFSIZE  = P_DEFSIZ.
W_CTU_PARAMS-RACOMMIT = P_RACOMM.
W_CTU_PARAMS-CATTMODE = P_CATT.
W_CTU_PARAMS-NOBIEND  = P_NOBIEN.

REFRESH MESSTAB.

CALL TRANSACTION W_TRAN
USING BDCDATA
OPTIONS FROM W_CTU_PARAMS
MESSAGES INTO MESSTAB.

* ### 94 START ###
MOVE SY-SUBRC  TO W_I2.

CLEAR :  MSGV1, MSGV2, MSGV3, MSGV4.
CLEAR :  SY-MSGV1, SY-MSGV2, SY-MSGV3, SY-MSGV4.

LOOP AT MESSTAB.
SY-MSGV1 = MESSTAB-MSGV1.
SY-MSGV2 = MESSTAB-MSGV2.
SY-MSGV3 = MESSTAB-MSGV3.
SY-MSGV4 = MESSTAB-MSGV4.

MSGV1 = SY-MSGV1.
MSGV2 = SY-MSGV2.
MSGV3 = SY-MSGV3.
MSGV4 = SY-MSGV4.
ENDLOOP.

*  MOVE SY-SUBRC  TO W_I2.

* ### 94 END ###

IF W_I2 NE 0 OR EMODE = 'A'.
PERFORM R3_MESSAGE_TEXT USING
SY-MSGID SY-MSGNO
SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
W_MESSAGE.

MOVE COUNT_REC TO W_I.

CONCATENATE SY-MSGID SY-MSGNO INTO W_MSGID_NO.
IF W_I2 NE 0.                  "エラーならば
PERFORM LOG_MSG USING 'E-No='  W_I
'Tr='    W_TRAN
'Code='  W_I2
'MsgCD=' W_MSGID_NO
'Msg='   W_MESSAGE.
COUNT_ERR = COUNT_ERR + 1.
ELSE.
PERFORM LOG_MSG USING 'O-No='  W_I
'Tr='    W_TRAN
'Code='  W_I2
'MsgCD=' W_MSGID_NO
'Msg='   W_MESSAGE.
ENDIF.

ENDIF.

IF  NOT ( FVAL_REC[] IS INITIAL ). "データの内容を表示
CLEAR  STATUS_REC-W_SREC.
LOOP AT FVAL_REC.
CONCATENATE  STATUS_REC-W_SREC FVAL_REC ','
INTO  STATUS_REC-W_SREC.
ENDLOOP.

* ### 9A START ###
W_SREC_TMP = STATUS_REC-W_SREC.
IF W_I2 NE 0.                  "エラーならば
PERFORM LOG_MSG USING 'B-Key=' W_SREC_TMP
'' '' '' '' '' '' '' ''.
ELSE.
PERFORM LOG_MSG USING 'G-Key=' W_SREC_TMP
'' '' '' '' '' '' '' ''.
ENDIF.
ENDIF.
*    IF W_I2 NE 0.                  "エラーならば
*      PERFORM LOG_MSG USING 'B-Key=' STATUS_REC-W_SREC
*                            '' '' '' '' '' '' '' ''.
*    ELSE.
*      PERFORM LOG_MSG USING 'G-Key=' STATUS_REC-W_SREC
*                            '' '' '' '' '' '' '' ''.
*    ENDIF.
*  ENDIF.
* ### 9A END   ###

IF W_I2 NE 0 AND ERRFILE = 'Y'.
"エラーデータをメッセージに含める
LOOP AT INSAVE_REC.
IF INSAVE_REC-W_INSAVE <> '2'.
*先頭が2だけのレコードは飛ばす
STATUS_REC-W_SREC = INSAVE_REC-W_INSAVE.
TRANSFER INSAVE_REC-W_INSAVE TO OFILE.
ENDIF.
ENDLOOP.
ENDIF.

IF W_I2 NE 0 AND EXCELFLG = 'Y'. "エラーデータをExcel化
CONCATENATE '$' W_MESSAGE INTO W_MESSAGE.
APPEND W_MESSAGE TO EXCEL_REC.
APPEND LINES OF INSAVE_REC TO EXCEL_REC.
ENDIF.

* 進捗表示 PROGRESS_INDICATOR
IF  ( DMODE = 'N' OR DMODE = 'C' ) AND SY-BATCH IS INITIAL.
CLEAR W_PROGRESS_MSG.
IF W_I2 NE 0.                  "エラーならば
REPLACE '$' WITH '' INTO W_MESSAGE.
CONCATENATE 'E-MsgCD=' SY-MSGID SY-MSGNO ',Msg='
W_MESSAGE INTO W_PROGRESS_MSG.
ELSE.
CONCATENATE 'O-MsgCD=' SY-MSGID SY-MSGNO ',Msg='
W_MESSAGE INTO W_PROGRESS_MSG.
ENDIF.

TRANSLATE W_ALL_TRAN_KENSUU_C USING ' 0'.
W_ALL_TRAN_KENSUU_C+6(1) = SPACE.
CONCATENATE W_I '/' W_ALL_TRAN_KENSUU_C W_PROGRESS_MSG
INTO W_PROGRESS_MSG
SEPARATED BY SPACE.
W_PERCENTAGE = W_I / W_ALL_TRAN_KENSUU_C * 100.
CALL FUNCTION 'SAPGUI_PROGRESS_INDICATOR'
EXPORTING
PERCENTAGE = W_PERCENTAGE
TEXT       = W_PROGRESS_MSG.
ENDIF.

ENDFORM.                    "BATCH_INSERT

*-----------------------------------------------------------------------
*     バッチインプットデータ内で、新規dynproを開始
*-----------------------------------------------------------------------
* ### 9A START ###
*FORM BDC_DYNPRO USING PROGRAM DYNPRO.
FORM BDC_DYNPRO USING PROGRAM TYPE ANY
DYNPRO  TYPE ANY.
* ### 9A END   ###
CLEAR BDCDATA.
BDCDATA-PROGRAM  = PROGRAM.
BDCDATA-DYNPRO   = DYNPRO.
BDCDATA-DYNBEGIN = 'X'.
APPEND BDCDATA.
ENDFORM.                    "BDC_DYNPRO

*-----------------------------------------------------------------------
*     バッチインプットデータ内で、項目を挿入
*-----------------------------------------------------------------------
* ### 9A START ###
*FORM BDC_FIELD USING FNAM FVAL.
FORM BDC_FIELD USING FNAM TYPE ANY
FVAL TYPE ANY.
* ### 9A END   ###
CLEAR BDCDATA.
BDCDATA-FNAM = FNAM.
BDCDATA-FVAL = FVAL.
APPEND BDCDATA.
ENDFORM.                    "BDC_FIELD

*-----------------------------------------------------------------------
*     エラーデータを Excel で読める形でPC端末に転送
*-----------------------------------------------------------------------
FORM EXCEL_EDIT.
REFRESH EXCEL_TAB_REC.
CLEAR EXCEL_TAB_REC-W_TABREC.

LOOP AT EXCEL_REC.
IF EXCEL_REC-W_EREC+0(1) = '$'.
W_MESSAGE = EXCEL_REC-W_EREC+1(100).
ENDIF.

IF EXCEL_REC-W_EREC+0(1) = '2'.
IF REC_FORM = 'V'.               "可変長フォーマットの場合
IF SEP_CHAR = 'T'.             "区切り文字がTABの場合
SPLIT EXCEL_REC-W_EREC AT TAB
INTO INPUT_REC2-W_SIKIBETU INPUT_REC2-W_MSG_FLG
INPUT_REC2-W_FNAM INPUT_REC2-W_FVAL W_DUMMY.
ELSE.                          "区切り文字がTAB以外の場合
SPLIT EXCEL_REC-W_EREC AT SEP_CHAR
INTO INPUT_REC2-W_SIKIBETU INPUT_REC2-W_MSG_FLG
INPUT_REC2-W_FNAM INPUT_REC2-W_FVAL W_DUMMY.
ENDIF.
ELSE.                            "固定長フォーマットの場合
MOVE EXCEL_REC-W_EREC TO INPUT_REC2.
ENDIF.

IF INPUT_REC2-W_FNAM <> 'BDC_OKCODE'.
IF W_EXCEL_HEADER_FLG IS INITIAL.
CONCATENATE  W_EXCEL_HEADER INPUT_REC2-W_FNAM TAB
INTO  W_EXCEL_HEADER.
ENDIF.
CONCATENATE  EXCEL_TAB_REC-W_TABREC INPUT_REC2-W_FVAL TAB
INTO  EXCEL_TAB_REC-W_TABREC.
ENDIF.
ENDIF.

IF EXCEL_REC-W_EREC+0(1) = '3'.
IF W_EXCEL_HEADER_FLG IS INITIAL.
CONCATENATE  W_EXCEL_HEADER 'エラーメッセージ'
INTO W_EXCEL_HEADER.
APPEND  W_EXCEL_HEADER TO EXCEL_TAB_REC.
W_EXCEL_HEADER_FLG = '1'.
ENDIF.
CONCATENATE EXCEL_TAB_REC-W_TABREC W_MESSAGE
INTO  EXCEL_TAB_REC-W_TABREC.
APPEND EXCEL_TAB_REC.
CLEAR EXCEL_TAB_REC-W_TABREC.
ENDIF.
ENDLOOP.

CONCATENATE P_LPCDIR 'X' START_DAY '_' START_TIME '.TXT'
INTO OFILE.
* ### 96 START ###
TRANSLATE OFILE TO LOWER CASE.
* ### 96 END ###

* ### 93 START ###
"ドライブフラグの取得
IF OFILE+1(1) = ':'.
FLG_DRIVE = 'X'.
ELSE.
CLEAR FLG_DRIVE.
ENDIF.
* ### 93 END ###

IF SY-BATCH IS INITIAL AND   "バックグラウンド処理でなかったら
NOT EXCEL_TAB_REC[] IS INITIAL.  "中身があったら
CALL FUNCTION 'Y_WS_DOWNLOAD'
EXPORTING
FILENAME            = OFILE
FILETYPE            = 'ASC'
* ### 93 START ###
NOT_DRIVE_CHANGE    = FLG_DRIVE
* ### 93 END ###
IMPORTING
FILELENGTH          = OLENGTH
TABLES
DATA_TAB            = EXCEL_TAB_REC
EXCEPTIONS
* ### 9A START ###
*        FILE_OPEN_ERROR     = 1
*        FILE_WRITE_ERROR    = 2
*        INVALID_FILESIZE    = 3
*        INVALID_TABLE_WIDTH = 4
*        INVALID_TYPE        = 5
*        NO_BATCH            = 6
*        UNKNOWN_ERROR       = 7
*        OTHERS              = 8.
FILE_WRITE_ERROR         = 1
NO_BATCH                 = 2
GUI_REFUSE_FILETRANSFER  = 3
INVALID_TYPE             = 4
NO_AUTHORITY             = 5
UNKNOWN_ERROR            = 6
HEADER_NOT_ALLOWED       = 7
SEPARATOR_NOT_ALLOWED    = 8
FILESIZE_NOT_ALLOWED     = 9
HEADER_TOO_LONG          = 10
DP_ERROR_CREATE          = 11
DP_ERROR_SEND            = 12
DP_ERROR_WRITE           = 13
UNKNOWN_DP_ERROR         = 14
ACCESS_DENIED            = 15
DP_OUT_OF_MEMORY         = 16
DISK_FULL                = 17
DP_TIMEOUT               = 18
FILE_NOT_FOUND           = 19
DATAPROVIDER_EXCEPTION   = 20
CONTROL_FLUSH_ERROR      = 21
OTHERS                   = 22.
* ### 9A END   ###
IF SY-SUBRC <> 0.
* ### 9A START ###
*      MESSAGE S398 WITH TEXT-E10.
MESSAGE S398 WITH TEXT-E10 SPACE SPACE SPACE.
* ### 9A END   ###
"エラーファイルをダウンロード出来ません
ENDIF.
ENDIF.

ENDFORM.                    "EXCEL_EDIT

*-----------------------------------------------------------------------
*     ファイルの転送
*-----------------------------------------------------------------------
FORM FILE_TRANSFER.

DATA: FNAME(128), FTYPE(3), FSIZE TYPE I,    "アップロード指示用
W_CANCEL(1).
* ### 9A START ###
*        FSIZE_N(10) TYPE N.
* ### 9A END   ###

IF PCFILE IS INITIAL.
CALL FUNCTION 'Y_UPLOAD'
EXPORTING
FILENAME                = UPLOAD_F
FILETYPE                = 'ASC'
ITEM                    = 'Batch Input Data'
IMPORTING
FILESIZE                = FSIZE
ACT_FILENAME            = FNAME
ACT_FILETYPE            = FTYPE
CANCEL                  = W_CANCEL
TABLES
DATA_TAB                = INSAVE_REC
EXCEPTIONS
CONVERSION_ERROR        = 1
INVALID_TABLE_WIDTH     = 2
INVALID_TYPE            = 3
NO_BATCH                = 4
UNKNOWN_ERROR           = 5
GUI_REFUSE_FILETRANSFER = 6
OTHERS                  = 7.
ELSE.
* ### 93 START ###
"ドライブフラグの取得
IF PCFILE+1(1) = ':'.
FLG_DRIVE = 'X'.
ELSE.
CLEAR FLG_DRIVE.
ENDIF.
* ### 93 END ###
CALL FUNCTION 'Y_WS_UPLOAD'
EXPORTING
FILENAME                = PCFILE
FILETYPE                = 'ASC'
ITEM                    = 'Batch Input Data'
* ### 93 START ###
NOT_DRIVE_CHANGE        = FLG_DRIVE
* ### 93 END ###
IMPORTING
FILESIZE                = FSIZE
ACT_FILENAME            = FNAME
ACT_FILETYPE            = FTYPE
CANCEL                  = W_CANCEL
TABLES
DATA_TAB                = INSAVE_REC
EXCEPTIONS
* ### 9A START ###
*        CONVERSION_ERROR        = 1
*        FILE_OPEN_ERROR         = 2
*        FILE_READ_ERROR         = 3
*        INVALID_TYPE            = 4
*        NO_BATCH                = 5
*        UNKNOWN_ERROR           = 6
*        INVALID_TABLE_WIDTH     = 7
*        GUI_REFUSE_FILETRANSFER = 8
*        CUSTOMER_ERROR          = 9
*        OTHERS                  = 10.
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
OTHERS                  = 17.
ENDIF.
* ### 9A END   ###

IF SY-SUBRC <> 0.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*    MESSAGE S398 WITH TEXT-E02.
MESSAGE S398 WITH TEXT-E02 SPACE SPACE SPACE.
* ### 9A END   ###
"ファイルをアップロードできません
STOP.
ENDIF.

IF NOT W_CANCEL IS INITIAL.
F_LOG_DOWNLOAD = 'N'.
STOP.
ENDIF.

OPEN DATASET SVRFILE FOR OUTPUT IN TEXT MODE ENCODING DEFAULT.
IF SY-SUBRC <> 0.
F_LOG_DOWNLOAD = 'N'.
* ### 9A START ###
*    MESSAGE S398 WITH SVRFILE TEXT-E04.
MESSAGE S398 WITH SVRFILE TEXT-E04 SPACE SPACE.
* ### 9A END   ###
"SVRFILE のファイルが開けません
STOP.
ENDIF.

LOOP AT INSAVE_REC.
TRANSFER INSAVE_REC-W_INSAVE TO SVRFILE.
ENDLOOP.

CLOSE DATASET SVRFILE.

CONCATENATE SVRFILE TEXT-E12 INTO STATUS_REC-W_SREC.
"SVRFILE の名前でファイルを保存しました
WRITE: / STATUS_REC.

ENDFORM.                    "FILE_TRANSFER

*-----------------------------------------------------------------------
*     ログメッセージをファイルに書き込む
*-----------------------------------------------------------------------
* ### 9A START ###
*FORM LOG_MSG USING H_MSG1 H_MSG2 H_MSG3 H_MSG4 H_MSG5
*                   H_MSG6 H_MSG7 H_MSG8 H_MSG9 H_MSG10.
FORM LOG_MSG USING H_MSG1  TYPE ANY H_MSG2 TYPE ANY H_MSG3 TYPE ANY
H_MSG4  TYPE ANY H_MSG5 TYPE ANY H_MSG6 TYPE ANY
H_MSG7  TYPE ANY H_MSG8 TYPE ANY H_MSG9 TYPE ANY
H_MSG10 TYPE ANY.
* ### 9A END   ###

CONCATENATE H_MSG1 H_MSG2 H_MSG3 H_MSG4 H_MSG5
H_MSG6 H_MSG7 H_MSG8 H_MSG9 H_MSG10
INTO STATUS_REC-W_SREC SEPARATED BY SPACE.

TRANSFER STATUS_REC TO OFILE.

ENDFORM.                    "LOG_MSG

* ### 99 START ###
**-----------------------------------------------------------------------
**     R/3のメッセージを生成
**-----------------------------------------------------------------------
*FORM R3_MESSAGE_TEXT USING H-MSGID H-MSGNO
*                           H-MSGV1 H-MSGV2 H-MSGV3 H-MSGV4
*                           H_MESSAGE.
*
*  DATA: W_MSG_AREA(300).
*
*  SELECT SINGLE * FROM T100 WHERE SPRSL = SY-LANGU
*                            AND   ARBGB = H-MSGID
*                            AND   MSGNR = H-MSGNO.
*  IF SY-SUBRC = 0.
*    W_MSG_AREA = T100-TEXT.
** ### 94 START ###
**    IF W_MSG_AREA CS '&1'.
**      REPLACE '&1' WITH H-MSGV1 INTO W_MSG_AREA.
**      REPLACE '&2' WITH H-MSGV2 INTO W_MSG_AREA.
**      REPLACE '&3' WITH H-MSGV3 INTO W_MSG_AREA.
**      REPLACE '&4' WITH H-MSGV4 INTO W_MSG_AREA.
**    ELSE.
*
** ### 97 START ###
**
**    IF W_MSG_AREA CS '&1'.
**      REPLACE '&1' WITH H-MSGV1 INTO W_MSG_AREA.
**      W_MSGV1_SET = 'Y'.
**    ENDIF.
**
**    IF W_MSG_AREA CS '&2'.
**      REPLACE '&2' WITH H-MSGV2 INTO W_MSG_AREA.
**      W_MSGV2_SET = 'Y'.
**    ENDIF.
**
**    IF W_MSG_AREA CS '&3'.
**      REPLACE '&3' WITH H-MSGV3 INTO W_MSG_AREA.
**      W_MSGV3_SET = 'Y'.
**    ENDIF.
**
**    IF W_MSG_AREA CS '&4'.
**      REPLACE '&4' WITH H-MSGV4 INTO W_MSG_AREA.
**      W_MSGV4_SET = 'Y'.
**    ENDIF.
*
*    CLEAR : W_MSGV1_SET, W_MSGV2_SET, W_MSGV3_SET, W_MSGV4_SET.
*
*    IF W_MSG_AREA CS '&1'.
*       REPLACE ALL OCCURRENCES OF '&1' in W_MSG_AREA WITH H-MSGV1.
*       W_MSGV1_SET = 'Y'.
*    ENDIF.
*
*    IF W_MSG_AREA CS '&2'.
*       REPLACE ALL OCCURRENCES OF '&2' in W_MSG_AREA WITH H-MSGV2.
*       W_MSGV2_SET = 'Y'.
*    ENDIF.
*
*    IF W_MSG_AREA CS '&3'.
*       REPLACE ALL OCCURRENCES OF '&3' in W_MSG_AREA WITH H-MSGV3.
*       W_MSGV3_SET = 'Y'.
*    ENDIF.
*
*    IF W_MSG_AREA CS '&4'.
*       REPLACE ALL OCCURRENCES OF '&4' in W_MSG_AREA WITH H-MSGV4.
*       W_MSGV4_SET = 'Y'.
*    ENDIF.
** ### 97  END  ##
*
*    IF W_MSGV1_SET IS INITIAL.
*      REPLACE '&' WITH H-MSGV1 INTO W_MSG_AREA.
*    ENDIF.
*
*    IF W_MSGV2_SET IS INITIAL.
*      REPLACE '&' WITH H-MSGV2 INTO W_MSG_AREA.
*    ENDIF.
*
*    IF W_MSGV3_SET IS INITIAL.
*      REPLACE '&' WITH H-MSGV3 INTO W_MSG_AREA.
*    ENDIF.
*
*    IF W_MSGV4_SET IS INITIAL.
*      REPLACE '&' WITH H-MSGV4 INTO W_MSG_AREA.
*    ENDIF.
*
**   ENDIF.
** ### 94 END ###
*
*    CONDENSE W_MSG_AREA.
*    H_MESSAGE = W_MSG_AREA.
*  ELSE.
*    CLEAR H_MESSAGE.
*  ENDIF.
*
*ENDFORM.                    "R3_MESSAGE_TEXT
*-----------------------------------------------------------------------
*     R/3のメッセージを生成
*-----------------------------------------------------------------------
* ### 9A START ###
*FORM R3_MESSAGE_TEXT USING H_MSGID H_MSGNO
*                           H_MSGV1 H_MSGV2 H_MSGV3 H_MSGV4
*                           H_MESSAGE.
FORM R3_MESSAGE_TEXT USING H_MSGID   TYPE SYST-MSGID
H_MSGNO   TYPE SYST-MSGNO
H_MSGV1   TYPE SYST-MSGV1
H_MSGV2   TYPE SYST-MSGV2
H_MSGV3   TYPE SYST-MSGV3
H_MSGV4   TYPE SYST-MSGV4
H_MESSAGE TYPE ANY.
* ### 9A END   ###

DATA: W_MSG_AREA(300).

SELECT SINGLE * FROM T100 WHERE SPRSL = SY-LANGU
AND   ARBGB = H_MSGID
AND   MSGNR = H_MSGNO.
IF SY-SUBRC = 0.
W_MSG_AREA = T100-TEXT.
* ### 94 START ###
*    IF W_MSG_AREA CS '&1'.
*      REPLACE '&1' WITH H-MSGV1 INTO W_MSG_AREA.
*      REPLACE '&2' WITH H-MSGV2 INTO W_MSG_AREA.
*      REPLACE '&3' WITH H-MSGV3 INTO W_MSG_AREA.
*      REPLACE '&4' WITH H-MSGV4 INTO W_MSG_AREA.
*    ELSE.

* ### 97 START ###
*
*    IF W_MSG_AREA CS '&1'.
*      REPLACE '&1' WITH H-MSGV1 INTO W_MSG_AREA.
*      W_MSGV1_SET = 'Y'.
*    ENDIF.
*
*    IF W_MSG_AREA CS '&2'.
*      REPLACE '&2' WITH H-MSGV2 INTO W_MSG_AREA.
*      W_MSGV2_SET = 'Y'.
*    ENDIF.
*
*    IF W_MSG_AREA CS '&3'.
*      REPLACE '&3' WITH H-MSGV3 INTO W_MSG_AREA.
*      W_MSGV3_SET = 'Y'.
*    ENDIF.
*
*    IF W_MSG_AREA CS '&4'.
*      REPLACE '&4' WITH H-MSGV4 INTO W_MSG_AREA.
*      W_MSGV4_SET = 'Y'.
*    ENDIF.

CLEAR : W_MSGV1_SET, W_MSGV2_SET, W_MSGV3_SET, W_MSGV4_SET.

IF W_MSG_AREA CS '&1'.
REPLACE ALL OCCURRENCES OF '&1' in W_MSG_AREA WITH H_MSGV1.
W_MSGV1_SET = 'Y'.
ENDIF.

IF W_MSG_AREA CS '&2'.
REPLACE ALL OCCURRENCES OF '&2' in W_MSG_AREA WITH H_MSGV2.
W_MSGV2_SET = 'Y'.
ENDIF.

IF W_MSG_AREA CS '&3'.
REPLACE ALL OCCURRENCES OF '&3' in W_MSG_AREA WITH H_MSGV3.
W_MSGV3_SET = 'Y'.
ENDIF.

IF W_MSG_AREA CS '&4'.
REPLACE ALL OCCURRENCES OF '&4' in W_MSG_AREA WITH H_MSGV4.
W_MSGV4_SET = 'Y'.
ENDIF.
* ### 97  END  ##

IF W_MSGV1_SET IS INITIAL.
REPLACE '&' WITH H_MSGV1 INTO W_MSG_AREA.
ENDIF.

IF W_MSGV2_SET IS INITIAL.
REPLACE '&' WITH H_MSGV2 INTO W_MSG_AREA.
ENDIF.

IF W_MSGV3_SET IS INITIAL.
REPLACE '&' WITH H_MSGV3 INTO W_MSG_AREA.
ENDIF.

IF W_MSGV4_SET IS INITIAL.
REPLACE '&' WITH H_MSGV4 INTO W_MSG_AREA.
ENDIF.

*   ENDIF.
* ### 94 END ###

CONDENSE W_MSG_AREA.
H_MESSAGE = W_MSG_AREA.
ELSE.
CLEAR H_MESSAGE.
ENDIF.

ENDFORM.                    "R3_MESSAGE_TEXT
* ### 99 END ###

*-----------------------------------------------------------------------
*     サーバのログファイルを見る
*-----------------------------------------------------------------------
FORM LOG_DISPLAY.

SUBMIT YR990002 WITH P_MANDT = SY-MANDT "<-- Update4 : YR990002のﾌﾟﾛｸﾞﾗﾑ名を変更した場合
WITH P_UNAME = SY-UNAME
WITH P_M     = 'X'
WITH P_E     = 'X'
WITH P_B     = 'X'
WITH P_O     = 'X'
WITH P_G     = 'X'
WITH P_DATA  = 'X'
WITH P_LOGDIR = P_LSVDIR
*                 VIA SELECTION-SCREEN    "画面非表示にする
AND RETURN.

ENDFORM.                    "LOG_DISPLAY

*-----------------------------------------------------------------------
*     画面の入力値チェック
*-----------------------------------------------------------------------
FORM GAMEN_CHECK.

F_LOG_DOWNLOAD = 'N'.

IF DMODE = 'T' AND SVRFILE IS INITIAL.
* ### 9A START ###
*    MESSAGE S398 WITH TEXT-E13.
MESSAGE S398 WITH TEXT-E13 SPACE SPACE SPACE.
* ### 9A END   ###
"サーバのファイルを指定して下さい
STOP.
ENDIF.

IF INBUNRUI = 'S' AND SVRFILE IS INITIAL.
* ### 9A START ###
*    MESSAGE S398 WITH TEXT-E13.
MESSAGE S398 WITH TEXT-E13 SPACE SPACE SPACE.
* ### 9A END   ###
"サーバのファイルを指定して下さい
STOP.
ENDIF.

CLEAR F_LOG_DOWNLOAD.

ENDFORM.                    "GAMEN_CHECK

* ### 99 START ###
**-----------------------------------------------------------------------
**     mail_data
**-----------------------------------------------------------------------
*FORM MAIL_DATA.
*  IF P_MAIL IS INITIAL.                EXIT. ENDIF.
*  IF P_MAIL_E = 'X' AND COUNT_ERR = 0. EXIT. ENDIF.
*
*  DATA: W_SHIKIBETU LIKE RS38M-PROGRAMM.
*  DATA: BEGIN OF W_MSGTEXT OCCURS 0.
*          INCLUDE STRUCTURE RCUKN2.
*  DATA: END OF W_MSGTEXT.
*
*  W_SHIKIBETU = P_MAIL.
*  LOOP AT STATUS_REC.
*    W_MSGTEXT-LINE = STATUS_REC-W_SREC.
*    APPEND W_MSGTEXT.
*  ENDLOOP.
*
*  CALL FUNCTION 'Y_R0012'
*    EXPORTING
*      PROGRAM           = 'YR990001'
*      SHIKIBETU         = W_SHIKIBETU
*      ADDRESS           = P_MAIL
*      SUBJECT           = TEXT-012
*      MSG1              = ''
*    TABLES
*      MSGTEXT           = W_MSGTEXT
*    EXCEPTIONS
*      PARAMETER_ERROR   = 1
*      FILE_OUTPUT_ERROR = 2
*      OTHERS            = 3.
*
*ENDFORM.                    "MAIL_DATA
*
**-----------------------------------------------------------------------
**     exec_command
**-----------------------------------------------------------------------
*FORM EXEC_COMMAND.
*
*  DATA: W_STATUS LIKE BTCXP3-EXITSTAT.
*
*  DATA: BEGIN OF STDOUT_LIST OCCURS 0.
*          INCLUDE STRUCTURE BTCXPM.
*  DATA: END OF STDOUT_LIST.
*
*  IF P_EXECNM IS INITIAL.              EXIT. ENDIF.
*  IF P_EXEC_E = 'X' AND COUNT_ERR = 0. EXIT. ENDIF.
*
*  CALL FUNCTION 'Y_R0001'
*    EXPORTING
*      COMMANDNAME                = P_EXECNM
*      PARAMETERS                 = P_EXECPM
*    IMPORTING
*      STATUS                     = W_STATUS
*    TABLES
*      EXEC_PROTOCOL              = STDOUT_LIST
*    EXCEPTIONS
*      NO_PERMISSION              = 1
*      COMMAND_NOT_FOUND          = 2
*      PARAMETERS_TOO_LONG        = 3
*      SECURITY_RISK              = 4
*      WRONG_CHECK_CALL_INTERFACE = 5
*      PROGRAM_START_ERROR        = 6
*      PROGRAM_TERMINATION_ERROR  = 7
*      X_ERROR                    = 8
*      PARAMETER_EXPECTED         = 9
*      TOO_MANY_PARAMETERS        = 10
*      ILLEGAL_COMMAND            = 11
*      OTHERS                     = 12.
*
*  IF SY-SUBRC <> 0 OR W_STATUS <> 'O'.
*    WRITE: /.
*    WRITE: / TEXT-E14.
*    EXIT.
*  ENDIF.
*
*  IF P_STDOUT = 'X'.
*    WRITE: /.
*    LOOP AT STDOUT_LIST.
*      WRITE: / STDOUT_LIST-MESSAGE.
*    ENDLOOP.
*  ENDIF.
*
*ENDFORM.                    "EXEC_COMMAND.
* ### 99 END ###

*-----------------------------------------------------------------------
*     show_log_detail
*-----------------------------------------------------------------------
FORM SHOW_LOG_DETAIL
USING
VALUE(H_MSG_LISEL)  TYPE C
.
*---------------------------------------------------------------------
* 画面に表示されたログメッセージの詳細を表示する
*---------------------------------------------------------------------
CONSTANTS C_MSG_STRING    TYPE STRING VALUE 'Msg='.    "メッセージ内容
CONSTANTS C_MSGCD_STRING  TYPE STRING VALUE 'MsgCD='.  "メッセージ番号

DATA  W_MSGNO_OFF  TYPE I.      "メッセージ内での'Msg='のバイト位置
DATA  W_MSGID_OFF  TYPE I.      "メッセージ内での'MsgCD='のバイト位置
DATA  W_MSGID_LEN  TYPE I.      "'MsgCD='の後のコード長
DATA  W_MSGID      TYPE ARBGB.  "メッセージのAPエリア
DATA  W_MSGNO      TYPE MSGNR.  "APエリアのメッセージ番号

" -------------------------------------------------------------
" ログメッセージからメッセージ位置を取得する
" -------------------------------------------------------------
CLEAR W_MSGNO_OFF.
FIND C_MSG_STRING IN H_MSG_LISEL MATCH OFFSET W_MSGNO_OFF IGNORING CASE.

IF SY-SUBRC = 0.
" -------------------------------------------------------------
" ログメッセージからメッセージ番号を取得する
" -------------------------------------------------------------
CLEAR  W_MSGID_OFF.
FIND C_MSGCD_STRING IN H_MSG_LISEL MATCH OFFSET W_MSGID_OFF IGNORING CASE.

IF SY-SUBRC = 0.

W_MSGNO_OFF = W_MSGNO_OFF - 4.
W_MSGNO = H_MSG_LISEL+W_MSGNO_OFF(3).

W_MSGID_OFF = W_MSGID_OFF + 7.
W_MSGID_LEN = W_MSGNO_OFF - W_MSGID_OFF.

IF 0 < W_MSGID_LEN.
W_MSGID = H_MSG_LISEL+W_MSGID_OFF(W_MSGID_LEN).

CALL FUNCTION 'MASS_MESSAGE_SHOW_LONGTEXT'
EXPORTING
SPRSL           = SY-LANGU
ARBGB           = W_MSGID
MSGNR           = W_MSGNO
*           MSGV1           = ' '
*           MSGV2           = ' '
*           MSGV3           = ' '
*           MSGV4           = ' '
EXCEPTIONS
* ### 9A START ###
*           NOT_FOUND       = 1
*           OTHERS          = 2.
OTHERS          = 0.
* ### 9A END   ###
ENDIF.  "IF 0 < W_MSGID_LEN.
ENDIF.
ENDIF.
ENDFORM.                    "SHOW_LOG_DETAIL
