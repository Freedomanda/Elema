*&---------------------------------------------------------------------*
*&  Include           ZEGSDI1030_COPY_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  GET_LOCAL_PATH
*&---------------------------------------------------------------------*
*       ローカルファイル名取得
*----------------------------------------------------------------------*
*      -->I_FLG
*----------------------------------------------------------------------*
FORM GET_LOCAL_PATH  USING I_FLG TYPE ANY.

DATA: LW_FILENAME    TYPE STRING,
LW_PATH        TYPE STRING,
LW_FULLPATH    TYPE STRING,
LW_USER_ACTION TYPE I.

CL_GUI_FRONTEND_SERVICES=>FILE_SAVE_DIALOG(
CHANGING
FILENAME             = LW_FILENAME
PATH                 = LW_PATH
FULLPATH             = LW_FULLPATH
USER_ACTION          = LW_USER_ACTION
*      FILE_ENCODING        = FILE_ENCODING
EXCEPTIONS
CNTL_ERROR           = 1
ERROR_NO_GUI         = 2
NOT_SUPPORTED_BY_GUI = 3
OTHERS               = 4 ).
IF SY-SUBRC = 0
AND LW_USER_ACTION = CL_GUI_FRONTEND_SERVICES=>ACTION_OK.
CASE I_FLG.
WHEN 'I'.
P_IFNAME = LW_FULLPATH.
WHEN 'P'.
P_PFNAME = LW_FULLPATH.
WHEN 'D'.
P_DFNAME = LW_FULLPATH.
WHEN OTHERS.
ENDCASE.
ENDIF.

ENDFORM.                    " GET_LOCAL_PATH
*&---------------------------------------------------------------------*
*&      Form  CHECK_INPUT
*&---------------------------------------------------------------------*
*       入力チェック
*----------------------------------------------------------------------*
FORM CHECK_INPUT .

* プラントコード存在チェック
PERFORM CHECK_WERKS.

* 出荷ポイント存在チェック
PERFORM CHECK_VSTEL.

* プラントの権限チェック
PERFORM CHECK_WERKS_AUTH.

ENDFORM.                    " CHECK_INPUT
*&---------------------------------------------------------------------*
*&      Form  CHECK_WERKS
*&---------------------------------------------------------------------*
*       プラントコード存在チェック
*----------------------------------------------------------------------*
FORM CHECK_WERKS .

TYPES: BEGIN OF LTYP_WERKS,
WERKS TYPE T001W-WERKS,
END OF LTYP_WERKS.

DATA: LTD_WERKS   TYPE STANDARD TABLE OF LTYP_WERKS,
LST_WERKS   TYPE LTYP_WERKS,
LST_WERKS_R LIKE LINE OF RD_WERKS.

SELECT WERKS
INTO TABLE LTD_WERKS
FROM T001W
WHERE WERKS IN S_WERKS.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_WERKS-LOW'.
*   プラント ( &1 ) は存在しません
MESSAGE E004(ZMEGSD01) WITH S_WERKS-LOW.
ENDIF.

REFRESH RD_WERKS.
LOOP AT LTD_WERKS INTO LST_WERKS.
LST_WERKS_R-SIGN = 'I'.
LST_WERKS_R-OPTION = 'EQ'.
LST_WERKS_R-LOW = LST_WERKS-WERKS.
APPEND LST_WERKS_R TO RD_WERKS.
ENDLOOP.

ENDFORM.                    " CHECK_WERKS
*&---------------------------------------------------------------------*
*&      Form  CHECK_VSTEL
*&---------------------------------------------------------------------*
*       出荷ポイント存在チェック
*----------------------------------------------------------------------*
FORM CHECK_VSTEL .

TYPES: BEGIN OF LTYP_VSTEL,
VSTEL TYPE TVST-VSTEL,
END OF LTYP_VSTEL.

DATA: LTD_VSTEL   TYPE STANDARD TABLE OF LTYP_VSTEL,
LST_VSTEL   TYPE LTYP_VSTEL,
LST_VSTEL_R LIKE LINE OF RD_VSTEL.

SELECT VSTEL
INTO TABLE LTD_VSTEL
FROM TVST
WHERE VSTEL IN S_VSTEL.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_VSTEL-LOW'.
*   出荷ポイント ( &1 ) は存在しません
MESSAGE E005(ZMEGSD01) WITH S_VSTEL-LOW.
ENDIF.

REFRESH RD_VSTEL.
LOOP AT LTD_VSTEL INTO LST_VSTEL.
LST_VSTEL_R-SIGN = 'I'.
LST_VSTEL_R-OPTION = 'EQ'.
LST_VSTEL_R-LOW = LST_VSTEL-VSTEL.
APPEND LST_VSTEL_R TO RD_VSTEL.
ENDLOOP.

ENDFORM.                    " CHECK_VSTEL
*&---------------------------------------------------------------------*
*&      Form  CHECK_WERKS_AUTH
*&---------------------------------------------------------------------*
*       プラントの権限チェック
*----------------------------------------------------------------------*
FORM CHECK_WERKS_AUTH .

DATA: LST_WERKS LIKE LINE OF RD_WERKS.

LOOP AT RD_WERKS INTO LST_WERKS.
AUTHORITY-CHECK OBJECT 'M_MSEG_WMB'
ID 'WERKS' FIELD LST_WERKS-LOW
ID 'ACTVT' FIELD '01'.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_WERKS-LOW'.
*     プラントに対する実行権限がありません
MESSAGE E003(ZMEGSD01).
ENDIF.
ENDLOOP.

ENDFORM.                    " CHECK_WERKS_AUTH
*&---------------------------------------------------------------------*
*&      Form  CHECK_OBLIGATORY
*&---------------------------------------------------------------------*
*       条件必須チェック
*----------------------------------------------------------------------*
FORM CHECK_OBLIGATORY .

* 選択画面のラジオボタン「Print」「Reprint」が選択されている場合
IF RB_PRINT = 'X'
OR RB_REPNT = 'X'.
IF P_PTRAY IS INITIAL.
SET CURSOR FIELD 'P_PTRAY'.
*     &1 が入力されていません。
MESSAGE E031(ZMEGSD01) WITH TEXT-M01.
ENDIF.
* 選択画面のラジオボタン「Download」が選択されている場合
ELSE.
*   選択画面のチェックボックス「Invoice」がONの場合
IF CB_INV = 'X'.
IF P_IFNAME IS INITIAL.
SET CURSOR FIELD 'P_IFNAME'.
*       &1 が入力されていません。
MESSAGE E031(ZMEGSD01) WITH TEXT-M02.
ENDIF.
ENDIF.
*   選択画面のチェックボックス「Packing List」がONの場合
IF CB_PKG = 'X'.
IF P_PFNAME IS INITIAL.
SET CURSOR FIELD 'P_PFNAME'.
*       &1 が入力されていません。
MESSAGE E031(ZMEGSD01) WITH TEXT-M03.
ENDIF.
ENDIF.
*   選択画面のチェックボックス「Delivery Note」がONの場合
IF CB_DN = 'X'.
IF P_DFNAME IS INITIAL.
SET CURSOR FIELD 'P_DFNAME'.
*       &1 が入力されていません。
MESSAGE E031(ZMEGSD01) WITH TEXT-M09.
ENDIF.
ENDIF.
ENDIF.

ENDFORM.                    " CHECK_OBLIGATORY
*&---------------------------------------------------------------------*
*&      Form  MAIN_PROCESS
*&---------------------------------------------------------------------*
*       主処理
*----------------------------------------------------------------------*
FORM MAIN_PROCESS .

* 選択画面のチェックボックス「Invoice」と「Packing List」がOFFの場合
IF  CB_INV IS INITIAL
AND CB_PKG IS INITIAL
AND CB_DN  IS INITIAL.
RETURN.
ENDIF.

* テーブル定義
DATA:
*   メインデータ
LTD_LIKP_INV       TYPE STANDARD TABLE OF TYP_LIKP_INV,
LTD_ZTEGSDT001_INV TYPE STANDARD TABLE OF TYP_ZTEGSDT001_INV,
LTD_ZTEGSDT010_INV TYPE STANDARD TABLE OF TYP_ZTEGSDT010_INV,
LTD_ZTEGSDT011     TYPE STANDARD TABLE OF TYP_ZTEGSDT011,
LTD_ZTEGSDT019     TYPE STANDARD TABLE OF TYP_ZTEGSDT019,
LTD_LIKP_PKG       TYPE STANDARD TABLE OF TYP_LIKP_PKG,
LTD_ZTEGSDT001_PKG TYPE STANDARD TABLE OF TYP_ZTEGSDT001_PKG,
LTD_ZTEGSDT010_PKG TYPE STANDARD TABLE OF TYP_ZTEGSDT010_PKG,
LTD_ZTEGSDT002     TYPE STANDARD TABLE OF TYP_ZTEGSDT002,
LTD_ZTEGSDT013     TYPE STANDARD TABLE OF TYP_ZTEGSDT013,
*   他のデータ
LTD_MAKT           TYPE STANDARD TABLE OF TYP_MAKT,
LTD_MARA           TYPE STANDARD TABLE OF TYP_MARA,
LTD_MGEF           TYPE STANDARD TABLE OF TYP_MGEF,
LTD_MARC           TYPE STANDARD TABLE OF TYP_MARC,
LTD_ZTEGZZM002     TYPE STANDARD TABLE OF TYP_ZTEGZZM002,
LTD_ZTEGSDM009     TYPE STANDARD TABLE OF TYP_ZTEGSDM009,
LTD_KNA1           TYPE STANDARD TABLE OF TYP_KNA1,
LTD_T005X          TYPE STANDARD TABLE OF TYP_T005X,
LTD_VBPA           TYPE STANDARD TABLE OF TYP_VBPA,
LTD_A902           TYPE STANDARD TABLE OF TYP_A902,
LTD_KONP           TYPE STANDARD TABLE OF TYP_KONP,
*   他のデータ検索用
LTD_MAKT_S         TYPE STANDARD TABLE OF TYP_MAKT,
LTD_MARA_S         TYPE STANDARD TABLE OF TYP_MARA,
LTD_MARC_S         TYPE STANDARD TABLE OF TYP_MARC,
LTD_ZTEGZZM002_S   TYPE STANDARD TABLE OF TYP_ZTEGZZM002,
LTD_ZTEGSDM009_S   TYPE STANDARD TABLE OF TYP_ZTEGSDM009,
LTD_KNA1_S         TYPE STANDARD TABLE OF TYP_KNA1,
LTD_KEY3           TYPE STANDARD TABLE OF TYP_KEY3,
LTD_KEY4           TYPE STANDARD TABLE OF TYP_KEY4,
*   編集出力用
LTD_INV            TYPE STANDARD TABLE OF TYP_INV,
LTD_FILE_INV       TYPE STANDARD TABLE OF ZSEGSD0012,
LTD_PKG            TYPE STANDARD TABLE OF TYP_PKG,
LTD_FILE_PKG       TYPE STANDARD TABLE OF ZSEGSD0013,
LTD_DN             TYPE STANDARD TABLE OF TYP_INV,
LTD_FILE_DN        TYPE STANDARD TABLE OF ZSEGSD0021,
*   ファイル用
LW_FNAME_INV(128)  TYPE C,
LW_FNAME_PKG(128)  TYPE C,
LW_FNAME_DN(128)   TYPE C,
LW_OUTPUT_CP_INV   TYPE ZTEGZZT001-Z_OUTPUT_CP,
LW_OUTPUT_CP_PKG   TYPE ZTEGZZT001-Z_OUTPUT_CP,
LW_OUTPUT_CP_DN    TYPE ZTEGZZT001-Z_OUTPUT_CP,
*   出力結果用
LTD_MESSAGE        TYPE STANDARD TABLE OF TYP_MESSAGE,
LW_COUNT_INV       TYPE I,
LW_NORMAL_INV      TYPE I,
LW_ERROR_INV       TYPE I,
LW_COUNT_PKG       TYPE I,
LW_NORMAL_PKG      TYPE I,
LW_ERROR_PKG       TYPE I,
LW_COUNT_DN        TYPE I,
LW_NORMAL_DN       TYPE I,
LW_ERROR_DN        TYPE I.

* Invoice、Delivery Noteデータ取得
PERFORM GET_INV_DATA CHANGING LTD_LIKP_INV
LTD_ZTEGSDT001_INV
LTD_ZTEGSDT010_INV
LTD_ZTEGSDT011
LTD_ZTEGSDT019
LTD_MAKT_S
LTD_MARA_S
LTD_MARC_S
LTD_ZTEGZZM002_S
LTD_KNA1_S
LTD_KEY3
LTD_KEY4.

* Packing Listデータ取得
PERFORM GET_PKG_DATA CHANGING LTD_LIKP_PKG
LTD_ZTEGSDT001_PKG
LTD_ZTEGSDT010_PKG
LTD_ZTEGSDT002
LTD_ZTEGSDT013
LTD_MAKT_S
LTD_MARA_S
LTD_MARC_S
LTD_ZTEGSDM009_S
LTD_KNA1_S.

* 他のデータ取得
PERFORM GET_OTHER_DATA USING LTD_MAKT_S
LTD_MARA_S
LTD_MARC_S
LTD_ZTEGZZM002_S
LTD_ZTEGSDM009_S
LTD_KNA1_S
LTD_KEY3
LTD_KEY4
CHANGING LTD_MAKT
LTD_MARA
LTD_MGEF
LTD_MARC
LTD_ZTEGZZM002
LTD_ZTEGSDM009
LTD_KNA1
LTD_T005X
LTD_VBPA
LTD_A902
LTD_KONP.

* Invoice、Delivery Noteデータの編集
PERFORM EDIT_INV_DATA USING LTD_LIKP_INV
LTD_ZTEGSDT001_INV
LTD_ZTEGSDT010_INV
LTD_ZTEGSDT011
LTD_ZTEGSDT019
LTD_MAKT
LTD_MARA
LTD_MGEF
LTD_MARC
LTD_ZTEGZZM002
LTD_KNA1
LTD_T005X
LTD_VBPA
LTD_A902
LTD_KONP
CHANGING LTD_INV
LTD_FILE_INV
LTD_DN
LTD_FILE_DN.

* Packing Listデータの編集
PERFORM EDIT_PKG_DATA USING LTD_LIKP_PKG
LTD_ZTEGSDT001_PKG
LTD_ZTEGSDT010_PKG
LTD_ZTEGSDT002
LTD_ZTEGSDT013
LTD_MAKT
LTD_MARA
LTD_MGEF
LTD_MARC
LTD_ZTEGSDM009
LTD_KNA1
LTD_T005X
CHANGING LTD_PKG
LTD_FILE_PKG.

* テーブル更新
PERFORM UPDATE_TABLE USING LTD_INV
LTD_PKG
LTD_DN
LTD_ZTEGSDT011
LTD_ZTEGSDT013
LTD_ZTEGSDT019
CHANGING LW_FNAME_INV
LW_FNAME_PKG
LW_FNAME_DN
LW_OUTPUT_CP_INV
LW_OUTPUT_CP_PKG
LW_OUTPUT_CP_DN
LTD_MESSAGE
LW_COUNT_INV
LW_NORMAL_INV
LW_ERROR_INV
LW_COUNT_PKG
LW_NORMAL_PKG
LW_ERROR_PKG
LW_COUNT_DN
LW_NORMAL_DN
LW_ERROR_DN.

* ファイル出力
PERFORM OUTPUT_FILE USING LTD_FILE_INV
LTD_FILE_PKG
LTD_FILE_DN
LW_FNAME_INV
LW_FNAME_PKG
LW_FNAME_DN
LW_OUTPUT_CP_INV
LW_OUTPUT_CP_PKG
LW_OUTPUT_CP_DN.

* 結果画面出力
PERFORM OUTPUT_RESULT USING LTD_MESSAGE
LW_FNAME_INV
LW_FNAME_PKG
LW_FNAME_DN
LW_COUNT_INV
LW_NORMAL_INV
LW_ERROR_INV
LW_COUNT_PKG
LW_NORMAL_PKG
LW_ERROR_PKG
LW_COUNT_DN
LW_NORMAL_DN
LW_ERROR_DN.


ENDFORM.                    " MAIN_PROCESS
*&---------------------------------------------------------------------*
*&      Form  GET_INV_DATA
*&---------------------------------------------------------------------*
*       Invoice、Delivery Noteデータ取得
*----------------------------------------------------------------------*
*      <--O_TD_LIKP_INV
*      <--O_TD_ZTEGSDT001_INV
*      <--O_TD_ZTEGSDT010_INV
*      <--O_TD_ZTEGSDT011
*      <--O_TD_ZTEGSDT019
*      <--O_TD_MAKT_S
*      <--O_TD_MARA_S
*      <--O_TD_MARC_S
*      <--O_TD_ZTEGZZM002_S
*      <--O_TD_KNA1_S
*      <--O_TD_KEY3
*      <--O_TD_KEY4
*----------------------------------------------------------------------*
FORM GET_INV_DATA CHANGING
O_TD_LIKP_INV       TYPE TYP_TD_LIKP_INV
O_TD_ZTEGSDT001_INV TYPE TYP_TD_ZTEGSDT001_INV
O_TD_ZTEGSDT010_INV TYPE TYP_TD_ZTEGSDT010_INV
O_TD_ZTEGSDT011     TYPE TYP_TD_ZTEGSDT011
O_TD_ZTEGSDT019     TYPE TYP_TD_ZTEGSDT019
O_TD_MAKT_S         TYPE TYP_TD_MAKT
O_TD_MARA_S         TYPE TYP_TD_MARA
O_TD_MARC_S         TYPE TYP_TD_MARC
O_TD_ZTEGZZM002_S   TYPE TYP_TD_ZTEGZZM002
O_TD_KNA1_S         TYPE TYP_TD_KNA1
O_TD_KEY3           TYPE TYP_TD_KEY3
O_TD_KEY4           TYPE TYP_TD_KEY4.

* 選択画面のチェックボックス「Invoice」「Delivery Note」ONの場合のみ実行
IF  CB_INV IS INITIAL
AND CB_DN  IS INITIAL.
RETURN.
ENDIF.

DATA: LTD_KEY1 TYPE STANDARD TABLE OF TYP_KEY1.

* 選択画面のラジオボタン「Outbound Delivery」が選択されている場合
IF RB_OUT = 'X'.
*   出荷伝票取得
PERFORM GET_LIKP_INV CHANGING O_TD_LIKP_INV
LTD_KEY1
O_TD_MAKT_S
O_TD_MARA_S
O_TD_MARC_S
O_TD_ZTEGZZM002_S
O_TD_KNA1_S
O_TD_KEY3
O_TD_KEY4.
*   TradeCommon取得
PERFORM GET_ZTEGSDT001_INV CHANGING O_TD_ZTEGSDT001_INV
LTD_KEY1.
* 選択画面のラジオボタン「External Data」が選択されている場合
ELSE.
*   出荷伝票、TradeCommon取得
PERFORM GET_ZTEGSDT010_INV CHANGING O_TD_ZTEGSDT010_INV
LTD_KEY1
O_TD_MAKT_S
O_TD_MARA_S
O_TD_MARC_S
O_TD_ZTEGZZM002_S
O_TD_KNA1_S.
ENDIF.

* Output Management(Invoice)取得
PERFORM GET_ZTEGSDT011 USING LTD_KEY1
CHANGING O_TD_ZTEGSDT011.

* Output Management(Delivery Note)取得
PERFORM GET_ZTEGSDT019 USING LTD_KEY1
CHANGING O_TD_ZTEGSDT019.

ENDFORM.                    " GET_INV_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_PKG_DATA
*&---------------------------------------------------------------------*
*       Packing Listデータ取得
*----------------------------------------------------------------------*
*      <--O_TD_LIKP_PKG
*      <--O_TD_ZTEGSDT001_PKG
*      <--O_TD_ZTEGSDT010_PKG
*      <--O_TD_ZTEGSDT002
*      <--O_TD_ZTEGSDT013
*      <--O_TD_MAKT_S
*      <--O_TD_MARA_S
*      <--O_TD_MARC_S
*      <--O_TD_ZTEGSDM009_S
*      <--O_TD_KNA1_S
*----------------------------------------------------------------------*
FORM GET_PKG_DATA CHANGING
O_TD_LIKP_PKG       TYPE TYP_TD_LIKP_PKG
O_TD_ZTEGSDT001_PKG TYPE TYP_TD_ZTEGSDT001_PKG
O_TD_ZTEGSDT010_PKG TYPE TYP_TD_ZTEGSDT010_PKG
O_TD_ZTEGSDT002     TYPE TYP_TD_ZTEGSDT002
O_TD_ZTEGSDT013     TYPE TYP_TD_ZTEGSDT013
O_TD_MAKT_S         TYPE TYP_TD_MAKT
O_TD_MARA_S         TYPE TYP_TD_MARA
O_TD_MARC_S         TYPE TYP_TD_MARC
O_TD_ZTEGSDM009_S   TYPE TYP_TD_ZTEGSDM009
O_TD_KNA1_S         TYPE TYP_TD_KNA1.

* 選択画面のチェックボックス「Packing List」がONの場合のみ実行
IF CB_PKG IS INITIAL.
RETURN.
ENDIF.

DATA: LTD_KEY1 TYPE STANDARD TABLE OF TYP_KEY1,
LTD_KEY2 TYPE STANDARD TABLE OF TYP_KEY2.

* 選択画面のラジオボタン「Outbound Delivery」が選択されている場合
IF RB_OUT = 'X'.
*   出荷伝票取得
PERFORM GET_LIKP_PKG CHANGING O_TD_LIKP_PKG
LTD_KEY1
LTD_KEY2
O_TD_MAKT_S
O_TD_MARA_S
O_TD_MARC_S
O_TD_KNA1_S.
*   TradeCommon取得
PERFORM GET_ZTEGSDT001_PKG CHANGING O_TD_ZTEGSDT001_PKG
LTD_KEY1
LTD_KEY2.
* 選択画面のラジオボタン「External Data」が選択されている場合
ELSE.
*   出荷伝票、TradeCommon取得
PERFORM GET_ZTEGSDT010_PKG CHANGING O_TD_ZTEGSDT010_PKG
LTD_KEY1
LTD_KEY2
O_TD_MAKT_S
O_TD_MARA_S
O_TD_MARC_S
O_TD_KNA1_S.
ENDIF.

* PackingList取得
PERFORM GET_ZTEGSDT002 USING LTD_KEY2
CHANGING O_TD_ZTEGSDT002
LTD_KEY1
O_TD_ZTEGSDM009_S.

* Output Management(Packing List)取得
PERFORM GET_ZTEGSDT013 USING LTD_KEY1
CHANGING O_TD_ZTEGSDT013.

ENDFORM.                    " GET_ZTEGSDT010_PKG
*&---------------------------------------------------------------------*
*&      Form  GET_LIKP_INV
*&---------------------------------------------------------------------*
*       出荷伝票取得
*----------------------------------------------------------------------*
*      <--O_TD_LIKP_INV
*      <--O_LTD_KEY1
*      <--O_TD_MAKT_S
*      <--O_TD_MARA_S
*      <--O_TD_MARC_S
*      <--O_TD_ZTEGZZM002_S
*      <--O_TD_KNA1_S
*      <--O_TD_KEY3
*      <--O_TD_KEY4
*----------------------------------------------------------------------*
FORM GET_LIKP_INV CHANGING O_TD_LIKP_INV     TYPE TYP_TD_LIKP_INV
O_TD_KEY1         TYPE TYP_TD_KEY1
O_TD_MAKT_S       TYPE TYP_TD_MAKT
O_TD_MARA_S       TYPE TYP_TD_MARA
O_TD_MARC_S       TYPE TYP_TD_MARC
O_TD_ZTEGZZM002_S TYPE TYP_TD_ZTEGZZM002
O_TD_KNA1_S       TYPE TYP_TD_KNA1
O_TD_KEY3         TYPE TYP_TD_KEY3
O_TD_KEY4         TYPE TYP_TD_KEY4.

DATA: LST_LIKP_INV   TYPE TYP_LIKP_INV,
LST_KEY1       TYPE TYP_KEY1,
LST_MAKT       TYPE TYP_MAKT,
LST_MARA       TYPE TYP_MARA,
LST_MARC       TYPE TYP_MARC,
LST_ZTEGZZM002 TYPE TYP_ZTEGZZM002,
LST_KNA1       TYPE TYP_KNA1,
LST_KEY3       TYPE TYP_KEY3,
LST_KEY4       TYPE TYP_KEY4.

SELECT LIPS~VBELN  "出荷伝票
LIKP~ERDAT  "レコード登録日
LIPS~POSNR  "出荷伝票明細
LIPS~MATNR  "品目コード
VBKD~BSTKD  "得意先発注番号
LIPS~VGBEL  "参照伝票番号
LIPS~VGPOS  "参照明細番号
LIPS~KDMAT  "得意先品目
LIPS~LFIMG  "出荷数量実績 (販売単位)
LIPS~VRKME  "販売単位
VBAP~NETPR  "正味価格
VBAK~WAERK  "販売伝票通貨
LIPS~WERKS  "プラント
VBAK~VKORG  "販売組織
VBAK~VTWEG  "流通チャネル
VBAK~SPART  "製品部門
LIKP~VSTEL  "出荷ポイント
LIKP~KUNAG  "受注先
LIKP~KUNNR  "出荷先
VBAK~AUART  "販売伝票タイプ
VBKD~PRSDT  "価格設定日
VBAP~KPEIN  "価格単位
INTO TABLE O_TD_LIKP_INV
FROM LIKP
INNER JOIN LIPS
ON LIKP~VBELN = LIPS~VBELN
INNER JOIN VBKD
ON LIPS~VGBEL = VBKD~VBELN
AND VBKD~POSNR = SPACE
INNER JOIN VBAP
ON LIPS~VGBEL = VBAP~VBELN
AND LIPS~VGPOS = VBAP~POSNR
INNER JOIN VBAK
ON VBAP~VBELN = VBAK~VBELN
WHERE LIKP~VBELN IN S_VBELN   "出荷伝票
AND LIKP~VSTEL IN RD_VSTEL  "出荷ポイント
AND LIKP~WADAT IN S_WADAT   "出庫予定日付
AND LIKP~KUNNR IN S_KUNNR   "出荷先
AND LIKP~KUNAG IN S_KUNAG.  "受注先
IF SY-SUBRC <> 0.
*   対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'LIKP'.
LEAVE LIST-PROCESSING.
ENDIF.
SORT O_TD_LIKP_INV BY VBELN ASCENDING
ERDAT ASCENDING
POSNR ASCENDING.

* 検索キー作成
REFRESH O_TD_KEY1.
LOOP AT O_TD_LIKP_INV INTO LST_LIKP_INV.
CLEAR LST_KEY1.
LST_KEY1-VBELN = LST_LIKP_INV-VBELN.
LST_KEY1-ERDAT = LST_LIKP_INV-ERDAT.
APPEND LST_KEY1 TO O_TD_KEY1.

CLEAR LST_MAKT.
LST_MAKT-MATNR = LST_LIKP_INV-MATNR.
APPEND LST_MAKT TO O_TD_MAKT_S.

CLEAR LST_MARA.
LST_MARA-MATNR = LST_LIKP_INV-MATNR.
APPEND LST_MARA TO O_TD_MARA_S.

CLEAR LST_MARC.
LST_MARC-MATNR = LST_LIKP_INV-MATNR.
LST_MARC-WERKS = LST_LIKP_INV-WERKS.
APPEND LST_MARC TO O_TD_MARC_S.

CLEAR LST_ZTEGZZM002.
LST_ZTEGZZM002-WAERS = LST_LIKP_INV-WAERK.
APPEND LST_ZTEGZZM002 TO O_TD_ZTEGZZM002_S.

CLEAR LST_KNA1.
LST_KNA1-KUNNR = LST_LIKP_INV-KUNAG.
APPEND LST_KNA1 TO O_TD_KNA1_S.

CLEAR LST_KEY3.
LST_KEY3-VBELN = LST_LIKP_INV-VGBEL.
APPEND LST_KEY3 TO O_TD_KEY3.

CLEAR LST_KEY4.
LST_KEY4-VKORGAU = LST_LIKP_INV-VKORG.
LST_KEY4-VTWEG = LST_LIKP_INV-VTWEG.
LST_KEY4-SPART = LST_LIKP_INV-SPART.
LST_KEY4-ZZZKDMAT = LST_LIKP_INV-KDMAT.
APPEND LST_KEY4 TO O_TD_KEY4.
ENDLOOP.
SORT O_TD_KEY1 BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY1
COMPARING ALL FIELDS.
SORT O_TD_MAKT_S BY MATNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MAKT_S
COMPARING ALL FIELDS.
SORT O_TD_MARA_S BY MATNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MARA_S
COMPARING ALL FIELDS.
SORT O_TD_MARC_S BY MATNR ASCENDING
WERKS ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MARC_S
COMPARING ALL FIELDS.
SORT O_TD_ZTEGZZM002_S BY WAERS ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_ZTEGZZM002_S
COMPARING ALL FIELDS.
SORT O_TD_KNA1_S BY KUNNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KNA1_S
COMPARING ALL FIELDS.
SORT O_TD_KEY3 BY VBELN ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY3
COMPARING ALL FIELDS.
SORT O_TD_KEY4 BY VKORGAU  ASCENDING
VTWEG    ASCENDING
SPART    ASCENDING
ZZZKDMAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY4
COMPARING ALL FIELDS.

ENDFORM.                    " GET_LIKP_INV
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGSDT001_INV
*&---------------------------------------------------------------------*
*       TradeCommon取得
*----------------------------------------------------------------------*
*      <--O_TD_ZTEGSDT001_INV
*      <--O_LTD_KEY1
*----------------------------------------------------------------------*
FORM GET_ZTEGSDT001_INV  CHANGING
O_TD_ZTEGSDT001_INV TYPE TYP_TD_ZTEGSDT001_INV
O_TD_KEY1           TYPE TYP_TD_KEY1.

DATA: LST_ZTEGSDT001_INV TYPE TYP_ZTEGSDT001_INV,
LST_KEY1           TYPE TYP_KEY1.

SELECT VBELN  "出荷伝票
ERDAT  "レコード登録日
Z_INVOICE_NO  "INVOICE No
Z_INVOICE_DATE  "INVOICE Date
Z_CUST_BT  "得意先（Bill To）
Z_CUST_NAME_BT "得意先名（Bill To）
Z_ADDRESS1_BT "得意先住所1（Bill To）
Z_ADDRESS2_BT "得意先住所2（Bill To）
Z_ATTN_BT   "得意先担当者（Bill To）
Z_TEL_BT   "得意先電話番号（Bill To）
Z_FAX_BT   "得意先FAX（Bill To）
Z_CUST_ST   "得意先（Ship To）
Z_CUST_NAME_ST  "得意先名（Ship To）
Z_ADDRESS1_ST  "得意先住所1（Ship To）
Z_ADDRESS2_ST  "得意先住所2（Ship To）
Z_ATTN_ST  "得意先担当者（Ship To）
Z_TEL_ST  "得意先電話番号（Ship To）
Z_FAX_ST  "得意先FAX（Ship To）
Z_SHIPPED_PER  "Shipped Per
Z_ON_OR_ABOUT  "On or About
Z_TRADE_FROM  "From
Z_TRADE_TO  "To
Z_TRADE_VIA  "Via
Z_TRADE_PAYMENT  "Payment
Z_TRADE_TERM  "Trade Term
Z_CASEMARK1  "Case Mark (1)
Z_CASEMARK2  "Case Mark (2)
Z_CASEMARK3  "Case Mark (3)
Z_CASEMARK4  "Case Mark (4)
Z_CASEMARK5  "Case Mark (5)
Z_INV_REMARKS1  "Remarks (1)
Z_INV_REMARKS2  "Remarks (2)
Z_INV_REMARKS3  "Remarks (3)
Z_INV_REMARKS4  "Remarks (4)
Z_INV_REMARKS5  "Remarks (5)
INTO TABLE O_TD_ZTEGSDT001_INV
FROM ZTEGSDT001
FOR ALL ENTRIES IN O_TD_KEY1
WHERE VBELN            = O_TD_KEY1-VBELN  "出荷伝票
AND ERDAT            = O_TD_KEY1-ERDAT  "レコード登録日
AND Z_INVOICE_NO     IN S_INVNO "INVOICE No
AND Z_INVOICE_DATE   IN S_INVDT "INVOICE Date
AND Z_SOURCE_TYPE    = '1'  "ソースタイプ
AND Z_STATUS_INVOICE IN S_STATUS "ステータス（Invoice）
AND Z_CUST_NAME_BT   IN S_CNBT  "得意先名（Bill To）
AND Z_CUST_NAME_ST   IN S_CNST  "得意先名（Ship To）
AND Z_SHIPPED_PER    IN S_SHIP  "Shipped Per
AND Z_CRE_YMD_INV    IN S_CYMD  "登録年月日
AND Z_CRE_HMS_INV    IN S_CHMS  "登録時分秒
AND Z_CRE_USERID_INV IN S_CUSER  "ユーザ名
AND Z_MOD_YMD_INV    IN S_MYMD  "更新年月日
AND Z_MOD_HMS_INV    IN S_MHMS  "更新時分秒
AND Z_MOD_USERID_INV IN S_MUSER.  "ユーザ名
IF SY-SUBRC <> 0.
*   対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'ZTEGSDT001'.
LEAVE LIST-PROCESSING.
ENDIF.
SORT O_TD_ZTEGSDT001_INV BY VBELN ASCENDING
ERDAT ASCENDING.

* 検索キー作成
REFRESH O_TD_KEY1.
LOOP AT O_TD_ZTEGSDT001_INV INTO LST_ZTEGSDT001_INV.
CLEAR LST_KEY1.
LST_KEY1-VBELN = LST_ZTEGSDT001_INV-VBELN.
LST_KEY1-ERDAT = LST_ZTEGSDT001_INV-ERDAT.
APPEND LST_KEY1 TO O_TD_KEY1.
ENDLOOP.
SORT O_TD_KEY1 BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY1
COMPARING ALL FIELDS.

ENDFORM.                    " GET_ZTEGSDT001_INV
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGSDT010_INV
*&---------------------------------------------------------------------*
*       出荷伝票、TradeCommon取得
*----------------------------------------------------------------------*
*      <--O_TD_ZTEGSDT010_INV
*      <--O_LTD_KEY1
*      <--O_TD_MAKT_S
*      <--O_TD_MARA_S
*      <--O_TD_MARC_S
*      <--O_TD_ZTEGZZM002_S
*      <--O_TD_KNA1_S
*----------------------------------------------------------------------*
FORM GET_ZTEGSDT010_INV  CHANGING
O_TD_ZTEGSDT010_INV TYPE TYP_TD_ZTEGSDT010_INV
O_TD_KEY1           TYPE TYP_TD_KEY1
O_TD_MAKT_S         TYPE TYP_TD_MAKT
O_TD_MARA_S         TYPE TYP_TD_MARA
O_TD_MARC_S         TYPE TYP_TD_MARC
O_TD_ZTEGZZM002_S   TYPE TYP_TD_ZTEGZZM002
O_TD_KNA1_S       TYPE TYP_TD_KNA1.

DATA: LST_ZTEGSDT010_INV TYPE TYP_ZTEGSDT010_INV,
LST_KEY1           TYPE TYP_KEY1,
LST_MAKT           TYPE TYP_MAKT,
LST_MARA           TYPE TYP_MARA,
LST_MARC           TYPE TYP_MARC,
LST_ZTEGZZM002     TYPE TYP_ZTEGZZM002,
LST_KNA1           TYPE TYP_KNA1.

SELECT ZTEGSDT010~VBELN  "出荷伝票
ZTEGSDT010~ERDAT  "レコード登録日
ZTEGSDT010~POSNR  "出荷伝票明細
ZTEGSDT010~MATNR  "品目コード
ZTEGSDT010~BSTKD  "得意先発注番号
ZTEGSDT010~KDMAT  "得意先品目
ZTEGSDT010~LFIMG  "出荷数量実績 (販売単位)
ZTEGSDT010~VRKME  "販売単位
ZTEGSDT010~NETPR  "正味価格
ZTEGSDT010~NETWR  "伝票通貨での受注明細正味額
ZTEGSDT010~WAERK  "販売伝票通貨
ZTEGSDT010~WERKS  "プラント
ZTEGSDT010~VKORG  "販売組織
ZTEGSDT010~VTWEG  "流通チャネル
ZTEGSDT010~VSTEL  "出荷ポイント
ZTEGSDT010~KUNAG  "受注先
ZTEGSDT010~KUNNR  "出荷先
ZTEGSDT001~Z_INVOICE_NO  "INVOICE No
ZTEGSDT001~Z_INVOICE_DATE  "INVOICE Date
ZTEGSDT001~Z_CUST_BT  "得意先（Bill To）
ZTEGSDT001~Z_CUST_NAME_BT "得意先名（Bill To）
ZTEGSDT001~Z_ADDRESS1_BT "得意先住所1（Bill To）
ZTEGSDT001~Z_ADDRESS2_BT "得意先住所2（Bill To）
ZTEGSDT001~Z_ATTN_BT   "得意先担当者（Bill To）
ZTEGSDT001~Z_TEL_BT   "得意先電話番号（Bill To）
ZTEGSDT001~Z_FAX_BT   "得意先FAX（Bill To）
ZTEGSDT001~Z_CUST_ST   "得意先（Ship To）
ZTEGSDT001~Z_CUST_NAME_ST  "得意先名（Ship To）
ZTEGSDT001~Z_ADDRESS1_ST  "得意先住所1（Ship To）
ZTEGSDT001~Z_ADDRESS2_ST  "得意先住所2（Ship To）
ZTEGSDT001~Z_ATTN_ST  "得意先担当者（Ship To）
ZTEGSDT001~Z_TEL_ST  "得意先電話番号（Ship To）
ZTEGSDT001~Z_FAX_ST  "得意先FAX（Ship To）
ZTEGSDT001~Z_SHIPPED_PER  "Shipped Per
ZTEGSDT001~Z_ON_OR_ABOUT  "On or About
ZTEGSDT001~Z_TRADE_FROM  "From
ZTEGSDT001~Z_TRADE_TO  "To
ZTEGSDT001~Z_TRADE_VIA  "Via
ZTEGSDT001~Z_TRADE_PAYMENT  "Payment
ZTEGSDT001~Z_TRADE_TERM  "Trade Term
ZTEGSDT001~Z_CASEMARK1  "Case Mark (1)
ZTEGSDT001~Z_CASEMARK2  "Case Mark (2)
ZTEGSDT001~Z_CASEMARK3  "Case Mark (3)
ZTEGSDT001~Z_CASEMARK4  "Case Mark (4)
ZTEGSDT001~Z_CASEMARK5  "Case Mark (5)
ZTEGSDT001~Z_INV_REMARKS1  "Remarks (1)
ZTEGSDT001~Z_INV_REMARKS2  "Remarks (2)
ZTEGSDT001~Z_INV_REMARKS3  "Remarks (3)
ZTEGSDT001~Z_INV_REMARKS4  "Remarks (4)
ZTEGSDT001~Z_INV_REMARKS5  "Remarks (5)
KPEIN  "価格単位
INTO TABLE O_TD_ZTEGSDT010_INV
FROM ZTEGSDT010
INNER JOIN ZTEGSDT001
ON ZTEGSDT010~VBELN = ZTEGSDT001~VBELN
AND ZTEGSDT010~ERDAT = ZTEGSDT001~ERDAT
WHERE ZTEGSDT010~VBELN IN S_VBELN  "出荷伝票
AND ZTEGSDT010~VSTEL IN RD_VSTEL "出荷ポイント
AND ZTEGSDT010~WADAT IN S_WADAT  "出庫予定日付
AND ZTEGSDT010~KUNNR IN S_KUNNR  "出荷先
AND ZTEGSDT010~KUNAG IN S_KUNAG  "受注先
AND Z_INVOICE_NO     IN S_INVNO "INVOICE No
AND Z_INVOICE_DATE   IN S_INVDT "INVOICE Date
AND Z_SOURCE_TYPE    = '2'  "ソースタイプ
AND Z_STATUS_INVOICE IN S_STATUS "ステータス（Invoice）
AND Z_CUST_NAME_BT   IN S_CNBT  "得意先名（Bill To）
AND Z_CUST_NAME_ST   IN S_CNST  "得意先名（Ship To）
AND Z_SHIPPED_PER    IN S_SHIP  "Shipped Per
AND Z_CRE_YMD_INV    IN S_CYMD  "登録年月日
AND Z_CRE_HMS_INV    IN S_CHMS  "登録時分秒
AND Z_CRE_USERID_INV IN S_CUSER  "ユーザ名
AND Z_MOD_YMD_INV    IN S_MYMD  "更新年月日
AND Z_MOD_HMS_INV    IN S_MHMS  "更新時分秒
AND Z_MOD_USERID_INV IN S_MUSER.  "ユーザ名
IF SY-SUBRC <> 0.
*   対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'ZTEGSDT001'.
LEAVE LIST-PROCESSING.
ENDIF.
SORT O_TD_ZTEGSDT010_INV BY VBELN ASCENDING
ERDAT ASCENDING
POSNR ASCENDING.

* 検索キー作成
REFRESH O_TD_KEY1.
LOOP AT O_TD_ZTEGSDT010_INV INTO LST_ZTEGSDT010_INV.
CLEAR LST_KEY1.
LST_KEY1-VBELN = LST_ZTEGSDT010_INV-VBELN.
LST_KEY1-ERDAT = LST_ZTEGSDT010_INV-ERDAT.
APPEND LST_KEY1 TO O_TD_KEY1.

CLEAR LST_MAKT.
LST_MAKT-MATNR = LST_ZTEGSDT010_INV-MATNR.
APPEND LST_MAKT TO O_TD_MAKT_S.

CLEAR LST_MARA.
LST_MARA-MATNR = LST_ZTEGSDT010_INV-MATNR.
APPEND LST_MARA TO O_TD_MARA_S.

CLEAR LST_MARC.
LST_MARC-MATNR = LST_ZTEGSDT010_INV-MATNR.
LST_MARC-WERKS = LST_ZTEGSDT010_INV-WERKS.
APPEND LST_MARC TO O_TD_MARC_S.

CLEAR LST_ZTEGZZM002.
LST_ZTEGZZM002-WAERS = LST_ZTEGSDT010_INV-WAERK.
APPEND LST_ZTEGZZM002 TO O_TD_ZTEGZZM002_S.

CLEAR LST_KNA1.
LST_KNA1-KUNNR = LST_ZTEGSDT010_INV-KUNAG.
APPEND LST_KNA1 TO O_TD_KNA1_S.
ENDLOOP.
SORT O_TD_KEY1 BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY1
COMPARING ALL FIELDS.
SORT O_TD_MAKT_S BY MATNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MAKT_S
COMPARING ALL FIELDS.
SORT O_TD_MARA_S BY MATNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MARA_S
COMPARING ALL FIELDS.
SORT O_TD_MARC_S BY MATNR ASCENDING
WERKS ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MARC_S
COMPARING ALL FIELDS.
SORT O_TD_ZTEGZZM002_S BY WAERS ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_ZTEGZZM002_S
COMPARING ALL FIELDS.
SORT O_TD_KNA1_S BY KUNNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KNA1_S
COMPARING ALL FIELDS.

ENDFORM.                    " GET_ZTEGSDT010_INV
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGSDT011
*&---------------------------------------------------------------------*
*       Output Management(Invoice)取得
*----------------------------------------------------------------------*
*      -->I_LTD_KEY1
*      <--O_TD_ZTEGSDT011
*----------------------------------------------------------------------*
FORM GET_ZTEGSDT011  USING I_LTD_KEY1      TYPE TYP_TD_KEY1
CHANGING O_TD_ZTEGSDT011 TYPE TYP_TD_ZTEGSDT011.

SELECT Z_OUTPUT_MODE  "出力モード
VBELN  "出荷伝票
ERDAT  "レコード登録日
INTO TABLE O_TD_ZTEGSDT011
FROM ZTEGSDT011
FOR ALL ENTRIES IN I_LTD_KEY1
WHERE ( Z_OUTPUT_MODE = 'P'  "出力モード
OR Z_OUTPUT_MODE = 'D' ) "出力モード
AND VBELN           = I_LTD_KEY1-VBELN  "出荷伝票
AND ERDAT           = I_LTD_KEY1-ERDAT. "レコード登録日
IF SY-SUBRC <> 0.
*   選択画面のラジオボタン「Reprint」が選択されている場合
IF RB_REPNT = 'X'.
*     対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'ZTEGSDT011'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDIF.
SORT O_TD_ZTEGSDT011 BY Z_OUTPUT_MODE ASCENDING
VBELN         ASCENDING
ERDAT         ASCENDING.

ENDFORM.                    " GET_ZTEGSDT011
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGSDT019
*&---------------------------------------------------------------------*
*       Output Management(Invoice)取得
*----------------------------------------------------------------------*
*      -->I_LTD_KEY1
*      <--O_TD_ZTEGSDT019
*----------------------------------------------------------------------*
FORM GET_ZTEGSDT019  USING I_LTD_KEY1      TYPE TYP_TD_KEY1
CHANGING O_TD_ZTEGSDT019 TYPE TYP_TD_ZTEGSDT019.

SELECT Z_OUTPUT_MODE  "出力モード
VBELN  "出荷伝票
ERDAT  "レコード登録日
INTO TABLE O_TD_ZTEGSDT019
FROM ZTEGSDT019
FOR ALL ENTRIES IN I_LTD_KEY1
WHERE ( Z_OUTPUT_MODE = 'P'  "出力モード
OR Z_OUTPUT_MODE = 'D' ) "出力モード
AND VBELN           = I_LTD_KEY1-VBELN  "出荷伝票
AND ERDAT           = I_LTD_KEY1-ERDAT. "レコード登録日
IF SY-SUBRC <> 0.
*   選択画面のラジオボタン「Reprint」が選択されている場合
IF RB_REPNT = 'X'.
*     対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'ZTEGSDT019'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDIF.
SORT O_TD_ZTEGSDT019 BY Z_OUTPUT_MODE ASCENDING
VBELN         ASCENDING
ERDAT         ASCENDING.

ENDFORM.                    " GET_ZTEGSDT019
*&---------------------------------------------------------------------*
*&      Form  GET_LIKP_PKG
*&---------------------------------------------------------------------*
*       出荷伝票取得
*----------------------------------------------------------------------*
*      <--O_TD_LIKP_PKG
*      <--O_LTD_KEY1
*      <--O_LTD_KEY2
*      <--O_TD_MAKT_S
*      <--O_TD_MARA_S
*      <--O_TD_MARC_S
*      <--O_TD_KNA1_S
*----------------------------------------------------------------------*
FORM GET_LIKP_PKG  CHANGING O_TD_LIKP_PKG     TYPE TYP_TD_LIKP_PKG
O_TD_KEY1         TYPE TYP_TD_KEY1
O_TD_KEY2         TYPE TYP_TD_KEY2
O_TD_MAKT_S       TYPE TYP_TD_MAKT
O_TD_MARA_S       TYPE TYP_TD_MARA
O_TD_MARC_S       TYPE TYP_TD_MARC
O_TD_KNA1_S       TYPE TYP_TD_KNA1.

DATA: LST_LIKP_PKG TYPE TYP_LIKP_PKG,
LST_KEY1     TYPE TYP_KEY1,
LST_KEY2     TYPE TYP_KEY2,
LST_MAKT     TYPE TYP_MAKT,
LST_MARA     TYPE TYP_MARA,
LST_MARC     TYPE TYP_MARC,
LST_KNA1     TYPE TYP_KNA1.

SELECT LIPS~VBELN  "出荷伝票
LIKP~ERDAT  "レコード登録日
LIPS~POSNR  "出荷伝票明細
LIPS~MATNR  "品目コード
VBKD~BSTKD  "得意先発注番号
LIPS~VGBEL  "参照伝票番号
LIPS~VGPOS  "参照明細番号
LIPS~KDMAT  "得意先品目
LIPS~WERKS  "プラント
LIKP~VKORG  "販売組織
LIPS~VTWEG  "流通チャネル
LIKP~VSTEL  "出荷ポイント
LIKP~KUNAG  "受注先
LIKP~KUNNR  "出荷先
INTO TABLE O_TD_LIKP_PKG
FROM LIKP
INNER JOIN LIPS
ON LIKP~VBELN = LIPS~VBELN
INNER JOIN VBKD
ON LIPS~VGBEL = VBKD~VBELN
AND VBKD~POSNR = SPACE
WHERE LIKP~VBELN IN S_VBELN   "出荷伝票
AND LIKP~VSTEL IN RD_VSTEL  "出荷ポイント
AND LIKP~WADAT IN S_WADAT   "出庫予定日付
AND LIKP~KUNNR IN S_KUNNR   "出荷先
AND LIKP~KUNAG IN S_KUNAG.  "受注先
IF SY-SUBRC <> 0.
*   対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'LIKP'.
LEAVE LIST-PROCESSING.
ENDIF.
SORT O_TD_LIKP_PKG BY VBELN ASCENDING
ERDAT ASCENDING
POSNR ASCENDING.

* 検索キー作成
REFRESH O_TD_KEY1.
LOOP AT O_TD_LIKP_PKG INTO LST_LIKP_PKG.
CLEAR LST_KEY1.
LST_KEY1-VBELN = LST_LIKP_PKG-VBELN.
LST_KEY1-ERDAT = LST_LIKP_PKG-ERDAT.
APPEND LST_KEY1 TO O_TD_KEY1.

CLEAR LST_KEY2.
LST_KEY2-VBELN = LST_LIKP_PKG-VBELN.
LST_KEY2-POSNR = LST_LIKP_PKG-POSNR.
APPEND LST_KEY2 TO O_TD_KEY2.

CLEAR LST_MAKT.
LST_MAKT-MATNR = LST_LIKP_PKG-MATNR.
APPEND LST_MAKT TO O_TD_MAKT_S.

CLEAR LST_MARA.
LST_MARA-MATNR = LST_LIKP_PKG-MATNR.
APPEND LST_MARA TO O_TD_MARA_S.

CLEAR LST_MARC.
LST_MARC-MATNR = LST_LIKP_PKG-MATNR.
LST_MARC-WERKS = LST_LIKP_PKG-WERKS.
APPEND LST_MARC TO O_TD_MARC_S.

CLEAR LST_KNA1.
LST_KNA1-KUNNR = LST_LIKP_PKG-KUNAG.
APPEND LST_KNA1 TO O_TD_KNA1_S.
ENDLOOP.
SORT O_TD_KEY1 BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY1
COMPARING ALL FIELDS.
SORT O_TD_KEY2 BY VBELN ASCENDING
POSNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY2
COMPARING ALL FIELDS.
SORT O_TD_MAKT_S BY MATNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MAKT_S
COMPARING ALL FIELDS.
SORT O_TD_MARA_S BY MATNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MARA_S
COMPARING ALL FIELDS.
SORT O_TD_MARC_S BY MATNR ASCENDING
WERKS ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MARC_S
COMPARING ALL FIELDS.
SORT O_TD_KNA1_S BY KUNNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KNA1_S
COMPARING ALL FIELDS.

ENDFORM.                    " GET_LIKP_PKG
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGSDT001_PKG
*&---------------------------------------------------------------------*
*       TradeCommon取得
*----------------------------------------------------------------------*
*      <--O_TD_ZTEGSDT001_PKG
*      <--O_LTD_KEY1
*      <--O_LTD_KEY2
*----------------------------------------------------------------------*
FORM GET_ZTEGSDT001_PKG  CHANGING
O_TD_ZTEGSDT001_PKG TYPE TYP_TD_ZTEGSDT001_PKG
O_TD_KEY1           TYPE TYP_TD_KEY1
O_TD_KEY2           TYPE TYP_TD_KEY2.

DATA: LST_ZTEGSDT001_PKG TYPE TYP_ZTEGSDT001_PKG,
LST_KEY1           TYPE TYP_KEY1,
LTD_KEY2           TYPE STANDARD TABLE OF TYP_KEY2,
LST_KEY2           TYPE TYP_KEY2.

SELECT VBELN  "出荷伝票
ERDAT  "レコード登録日
Z_INVOICE_NO  "INVOICE No
Z_INVOICE_DATE  "INVOICE Date
Z_CUST_BT  "得意先（Bill To）
Z_CUST_NAME_BT "得意先名（Bill To）
Z_ADDRESS1_BT "得意先住所1（Bill To）
Z_ADDRESS2_BT "得意先住所2（Bill To）
Z_ATTN_BT   "得意先担当者（Bill To）
Z_TEL_BT   "得意先電話番号（Bill To）
Z_FAX_BT   "得意先FAX（Bill To）
Z_CUST_ST   "得意先（Ship To）
Z_CUST_NAME_ST  "得意先名（Ship To）
Z_ADDRESS1_ST  "得意先住所1（Ship To）
Z_ADDRESS2_ST  "得意先住所2（Ship To）
Z_ATTN_ST  "得意先担当者（Ship To）
Z_TEL_ST  "得意先電話番号（Ship To）
Z_FAX_ST  "得意先FAX（Ship To）
Z_SHIPPED_PER  "Shipped Per
Z_ON_OR_ABOUT  "On or About
Z_TRADE_FROM  "From
Z_TRADE_TO  "To
Z_TRADE_VIA  "Via
Z_TRADE_PAYMENT  "Payment
Z_TRADE_TERM  "Trade Term
Z_CASEMARK1  "Case Mark (1)
Z_CASEMARK2  "Case Mark (2)
Z_CASEMARK3  "Case Mark (3)
Z_CASEMARK4  "Case Mark (4)
Z_CASEMARK5  "Case Mark (5)
Z_INV_REMARKS1  "Remarks (1)
Z_INV_REMARKS2  "Remarks (2)
Z_INV_REMARKS3  "Remarks (3)
Z_INV_REMARKS4  "Remarks (4)
Z_INV_REMARKS5  "Remarks (5)
INTO TABLE O_TD_ZTEGSDT001_PKG
FROM ZTEGSDT001
FOR ALL ENTRIES IN O_TD_KEY1
WHERE VBELN            = O_TD_KEY1-VBELN  "出荷伝票
AND ERDAT            = O_TD_KEY1-ERDAT  "レコード登録日
AND Z_INVOICE_NO     IN S_INVNO "INVOICE No
AND Z_INVOICE_DATE   IN S_INVDT "INVOICE Date
AND Z_SOURCE_TYPE    = '1'  "ソースタイプ
AND Z_STATUS_INVOICE IN S_STATUS "ステータス（Invoice）
AND Z_CUST_NAME_BT   IN S_CNBT  "得意先名（Bill To）
AND Z_CUST_NAME_ST   IN S_CNST  "得意先名（Ship To）
AND Z_SHIPPED_PER    IN S_SHIP  "Shipped Per
AND Z_CRE_YMD_INV    IN S_CYMD  "登録年月日
AND Z_CRE_HMS_INV    IN S_CHMS  "登録時分秒
AND Z_CRE_USERID_INV IN S_CUSER  "ユーザ名
AND Z_MOD_YMD_INV    IN S_MYMD  "更新年月日
AND Z_MOD_HMS_INV    IN S_MHMS  "更新時分秒
AND Z_MOD_USERID_INV IN S_MUSER.  "ユーザ名
IF SY-SUBRC <> 0.
*   対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'ZTEGSDT001'.
LEAVE LIST-PROCESSING.
ENDIF.
SORT O_TD_ZTEGSDT001_PKG BY VBELN ASCENDING
ERDAT ASCENDING.

* 検索キー作成
REFRESH O_TD_KEY1.
LOOP AT O_TD_ZTEGSDT001_PKG INTO LST_ZTEGSDT001_PKG.
CLEAR LST_KEY1.
LST_KEY1-VBELN = LST_ZTEGSDT001_PKG-VBELN.
LST_KEY1-ERDAT = LST_ZTEGSDT001_PKG-ERDAT.
APPEND LST_KEY1 TO O_TD_KEY1.
ENDLOOP.
SORT O_TD_KEY1 BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY1
COMPARING ALL FIELDS.

LTD_KEY2[] = O_TD_KEY2[].
REFRESH O_TD_KEY2.
LOOP AT LTD_KEY2 INTO LST_KEY2.
READ TABLE O_TD_KEY1 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY VBELN = LST_KEY2-VBELN.
IF SY-SUBRC <> 0.
CONTINUE.
ENDIF.
APPEND LST_KEY2 TO O_TD_KEY2.
ENDLOOP.
SORT O_TD_KEY2 BY VBELN ASCENDING
POSNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY2
COMPARING ALL FIELDS.

ENDFORM.                    " GET_ZTEGSDT001_PKG
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGSDT010_PKG
*&---------------------------------------------------------------------*
*       出荷伝票、TradeCommon取得
*----------------------------------------------------------------------*
*      <--O_TD_ZTEGSDT010_PKG
*      <--O_LTD_KEY1
*      <--O_LTD_KEY2
*      <--O_TD_MAKT_S
*      <--O_TD_MARA_S
*      <--O_TD_MARC_S
*      <--O_TD_KNA1_S
*----------------------------------------------------------------------*
FORM GET_ZTEGSDT010_PKG  CHANGING
O_TD_ZTEGSDT010_PKG TYPE TYP_TD_ZTEGSDT010_PKG
O_TD_KEY1           TYPE TYP_TD_KEY1
O_TD_KEY2           TYPE TYP_TD_KEY2
O_TD_MAKT_S         TYPE TYP_TD_MAKT
O_TD_MARA_S         TYPE TYP_TD_MARA
O_TD_MARC_S         TYPE TYP_TD_MARC
O_TD_KNA1_S         TYPE TYP_TD_KNA1.

DATA: LST_ZTEGSDT010_PKG TYPE TYP_ZTEGSDT010_PKG,
LST_KEY1           TYPE TYP_KEY1,
LST_KEY2           TYPE TYP_KEY2,
LST_MAKT           TYPE TYP_MAKT,
LST_MARA           TYPE TYP_MARA,
LST_MARC           TYPE TYP_MARC,
LST_KNA1           TYPE TYP_KNA1.

SELECT ZTEGSDT010~VBELN  "出荷伝票
ZTEGSDT010~ERDAT  "レコード登録日
ZTEGSDT010~POSNR  "出荷伝票明細
ZTEGSDT010~MATNR  "品目コード
ZTEGSDT010~BSTKD  "得意先発注番号
ZTEGSDT010~KDMAT  "得意先品目
ZTEGSDT010~WERKS  "プラント
ZTEGSDT010~VKORG  "販売組織
ZTEGSDT010~VTWEG  "流通チャネル
ZTEGSDT010~VSTEL  "出荷ポイント
ZTEGSDT010~KUNAG  "受注先
ZTEGSDT010~KUNNR  "出荷先
ZTEGSDT001~Z_INVOICE_NO  "INVOICE No
ZTEGSDT001~Z_INVOICE_DATE  "INVOICE Date
ZTEGSDT001~Z_CUST_BT  "得意先（Bill To）
ZTEGSDT001~Z_CUST_NAME_BT "得意先名（Bill To）
ZTEGSDT001~Z_ADDRESS1_BT "得意先住所1（Bill To）
ZTEGSDT001~Z_ADDRESS2_BT "得意先住所2（Bill To）
ZTEGSDT001~Z_ATTN_BT   "得意先担当者（Bill To）
ZTEGSDT001~Z_TEL_BT   "得意先電話番号（Bill To）
ZTEGSDT001~Z_FAX_BT   "得意先FAX（Bill To）
ZTEGSDT001~Z_CUST_ST   "得意先（Ship To）
ZTEGSDT001~Z_CUST_NAME_ST  "得意先名（Ship To）
ZTEGSDT001~Z_ADDRESS1_ST  "得意先住所1（Ship To）
ZTEGSDT001~Z_ADDRESS2_ST  "得意先住所2（Ship To）
ZTEGSDT001~Z_ATTN_ST  "得意先担当者（Ship To）
ZTEGSDT001~Z_TEL_ST  "得意先電話番号（Ship To）
ZTEGSDT001~Z_FAX_ST  "得意先FAX（Ship To）
ZTEGSDT001~Z_SHIPPED_PER  "Shipped Per
ZTEGSDT001~Z_ON_OR_ABOUT  "On or About
ZTEGSDT001~Z_TRADE_FROM  "From
ZTEGSDT001~Z_TRADE_TO  "To
ZTEGSDT001~Z_TRADE_VIA  "Via
ZTEGSDT001~Z_TRADE_PAYMENT  "Payment
ZTEGSDT001~Z_TRADE_TERM  "Trade Term
ZTEGSDT001~Z_CASEMARK1  "Case Mark (1)
ZTEGSDT001~Z_CASEMARK2  "Case Mark (2)
ZTEGSDT001~Z_CASEMARK3  "Case Mark (3)
ZTEGSDT001~Z_CASEMARK4  "Case Mark (4)
ZTEGSDT001~Z_CASEMARK5  "Case Mark (5)
ZTEGSDT001~Z_INV_REMARKS1  "Remarks (1)
ZTEGSDT001~Z_INV_REMARKS2  "Remarks (2)
ZTEGSDT001~Z_INV_REMARKS3  "Remarks (3)
ZTEGSDT001~Z_INV_REMARKS4  "Remarks (4)
ZTEGSDT001~Z_INV_REMARKS5  "Remarks (5)
INTO TABLE O_TD_ZTEGSDT010_PKG
FROM ZTEGSDT010
INNER JOIN ZTEGSDT001
ON ZTEGSDT010~VBELN = ZTEGSDT001~VBELN
AND ZTEGSDT010~ERDAT = ZTEGSDT001~ERDAT
WHERE ZTEGSDT010~VBELN IN S_VBELN  "出荷伝票
AND ZTEGSDT010~VSTEL IN RD_VSTEL "出荷ポイント
AND ZTEGSDT010~WADAT IN S_WADAT  "出庫予定日付
AND ZTEGSDT010~KUNNR IN S_KUNNR  "出荷先
AND ZTEGSDT010~KUNAG IN S_KUNAG  "受注先
AND Z_INVOICE_NO     IN S_INVNO "INVOICE No
AND Z_INVOICE_DATE   IN S_INVDT "INVOICE Date
AND Z_SOURCE_TYPE    = '2'  "ソースタイプ
AND Z_STATUS_INVOICE IN S_STATUS "ステータス（Invoice）
AND Z_CUST_NAME_BT   IN S_CNBT  "得意先名（Bill To）
AND Z_CUST_NAME_ST   IN S_CNST  "得意先名（Ship To）
AND Z_SHIPPED_PER    IN S_SHIP  "Shipped Per
AND Z_CRE_YMD_INV    IN S_CYMD  "登録年月日
AND Z_CRE_HMS_INV    IN S_CHMS  "登録時分秒
AND Z_CRE_USERID_INV IN S_CUSER  "ユーザ名
AND Z_MOD_YMD_INV    IN S_MYMD  "更新年月日
AND Z_MOD_HMS_INV    IN S_MHMS  "更新時分秒
AND Z_MOD_USERID_INV IN S_MUSER.  "ユーザ名
IF SY-SUBRC <> 0.
*   対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'ZTEGSDT001'.
LEAVE LIST-PROCESSING.
ENDIF.
SORT O_TD_ZTEGSDT010_PKG BY VBELN ASCENDING
ERDAT ASCENDING
POSNR ASCENDING.

* 検索キー作成
REFRESH O_TD_KEY1.
LOOP AT O_TD_ZTEGSDT010_PKG INTO LST_ZTEGSDT010_PKG.
CLEAR LST_KEY1.
LST_KEY1-VBELN = LST_ZTEGSDT010_PKG-VBELN.
LST_KEY1-ERDAT = LST_ZTEGSDT010_PKG-ERDAT.
APPEND LST_KEY1 TO O_TD_KEY1.

CLEAR LST_KEY2.
LST_KEY2-VBELN = LST_ZTEGSDT010_PKG-VBELN.
LST_KEY2-POSNR = LST_ZTEGSDT010_PKG-POSNR.
APPEND LST_KEY2 TO O_TD_KEY2.

CLEAR LST_MAKT.
LST_MAKT-MATNR = LST_ZTEGSDT010_PKG-MATNR.
APPEND LST_MAKT TO O_TD_MAKT_S.

CLEAR LST_MARA.
LST_MARA-MATNR = LST_ZTEGSDT010_PKG-MATNR.
APPEND LST_MARA TO O_TD_MARA_S.

CLEAR LST_MARC.
LST_MARC-MATNR = LST_ZTEGSDT010_PKG-MATNR.
LST_MARC-WERKS = LST_ZTEGSDT010_PKG-WERKS.
APPEND LST_MARC TO O_TD_MARC_S.

CLEAR LST_KNA1.
LST_KNA1-KUNNR = LST_ZTEGSDT010_PKG-KUNAG.
APPEND LST_KNA1 TO O_TD_KNA1_S.
ENDLOOP.
SORT O_TD_KEY1 BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY1
COMPARING ALL FIELDS.
SORT O_TD_KEY2 BY VBELN ASCENDING
POSNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY2
COMPARING ALL FIELDS.
SORT O_TD_MAKT_S BY MATNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MAKT_S
COMPARING ALL FIELDS.
SORT O_TD_MARA_S BY MATNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MARA_S
COMPARING ALL FIELDS.
SORT O_TD_MARC_S BY MATNR ASCENDING
WERKS ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_MARC_S
COMPARING ALL FIELDS.
SORT O_TD_KNA1_S BY KUNNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KNA1_S
COMPARING ALL FIELDS.

ENDFORM.                    " GET_ZTEGSDT010_PKG
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGSDT002
*&---------------------------------------------------------------------*
*       PackingList取得
*----------------------------------------------------------------------*
*      -->I_TD_KEY2
*      <--O_TD_ZTEGSDT002
*      <--O_TD_KEY1
*      <--O_TD_ZTEGSDM009_S
*----------------------------------------------------------------------*
FORM GET_ZTEGSDT002  USING I_TD_KEY2         TYPE TYP_TD_KEY2
CHANGING O_TD_ZTEGSDT002   TYPE TYP_TD_ZTEGSDT002
O_TD_KEY1         TYPE TYP_TD_KEY1
O_TD_ZTEGSDM009_S TYPE TYP_TD_ZTEGSDM009.

DATA: LST_ZTEGSDT002 TYPE TYP_ZTEGSDT002,
LST_KEY1       TYPE TYP_KEY1,
LST_ZTEGSDM009 TYPE TYP_ZTEGSDM009.

SELECT VBELN  "出荷伝票
ERDAT  "レコード登録日
POSNR  "出荷伝票明細
Z_PKG_POSNR_SUB "Packing明細
Z_CASENO_FROM  "CASE No(From)
Z_CASENO_TO  "CASE No(To)
Z_CASE_COUNT  "CASE Count
Z_MEINS_PACK  "梱包単位
Z_CASE_MIX  "Mix
Z_LFIMG_UNIT  "1梱包の梱包数量
Z_LFIMG  "梱包数量
Z_VRKME  "梱包数量単位
Z_NETWEIGHT_UNIT  "1梱包正味重量
Z_NETWEIGHT  "正味重量
Z_GEWEI_NW  "重量単位(正味重量）
Z_GRSWEIGHT_UNIT  "1梱包の総重量
Z_GRSWEIGHT  "総重量
Z_GEWEI_GW  "重量単位（総重量）
Z_VOLUM_UNIT  "1梱包の容積
Z_VOLUM  "容積()
Z_VOLEH  "容積単位()
Z_PKG_REMARKS  "Packing Remarks
Z_DIMENSION  "Dimension
INTO TABLE O_TD_ZTEGSDT002
FROM ZTEGSDT002
FOR ALL ENTRIES IN I_TD_KEY2
WHERE VBELN = I_TD_KEY2-VBELN  "出荷伝票
AND POSNR = I_TD_KEY2-POSNR. "出荷伝票明細
IF SY-SUBRC <> 0.
*   対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'ZTEGSDT002'.
LEAVE LIST-PROCESSING.
ENDIF.
SORT O_TD_ZTEGSDT002 BY VBELN           ASCENDING
ERDAT           ASCENDING
POSNR           ASCENDING
Z_PKG_POSNR_SUB ASCENDING.

* 検索キー作成
REFRESH O_TD_KEY1.
LOOP AT O_TD_ZTEGSDT002 INTO LST_ZTEGSDT002.
CLEAR LST_KEY1.
LST_KEY1-VBELN = LST_ZTEGSDT002-VBELN.
LST_KEY1-ERDAT = LST_ZTEGSDT002-ERDAT.
APPEND LST_KEY1 TO O_TD_KEY1.

IF LST_ZTEGSDT002-Z_DIMENSION IS NOT INITIAL.
CLEAR LST_ZTEGSDM009.
LST_ZTEGSDM009-Z_TEMPLATE_ID = LST_ZTEGSDT002-Z_DIMENSION.
APPEND LST_ZTEGSDM009 TO O_TD_ZTEGSDM009_S.
ENDIF.
ENDLOOP.
SORT O_TD_KEY1 BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_KEY1
COMPARING ALL FIELDS.
SORT O_TD_ZTEGSDM009_S BY Z_TEMPLATE_ID ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_ZTEGSDM009_S
COMPARING ALL FIELDS.

ENDFORM.                    " GET_ZTEGSDT002
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGSDT013
*&---------------------------------------------------------------------*
*       Output Management(Packing List)取得
*----------------------------------------------------------------------*
*      -->I_LTD_KEY1
*      <--O_TD_ZTEGSDT013
*----------------------------------------------------------------------*
FORM GET_ZTEGSDT013  USING I_LTD_KEY1      TYPE TYP_TD_KEY1
CHANGING O_TD_ZTEGSDT013 TYPE TYP_TD_ZTEGSDT013.

SELECT Z_OUTPUT_MODE  "出力モード
VBELN  "出荷伝票
ERDAT  "レコード登録日
INTO TABLE O_TD_ZTEGSDT013
FROM ZTEGSDT013
FOR ALL ENTRIES IN I_LTD_KEY1
WHERE ( Z_OUTPUT_MODE = 'P'  "出力モード
OR Z_OUTPUT_MODE = 'D' ) "出力モード
AND VBELN         = I_LTD_KEY1-VBELN  "出荷伝票
AND ERDAT         = I_LTD_KEY1-ERDAT. "レコード登録日
IF SY-SUBRC <> 0.
*   選択画面のラジオボタン「Reprint」が選択されている場合
IF RB_REPNT = 'X'.
*     対象データが存在しません。(TBL = &1)
MESSAGE S006(ZMEGSD01) WITH 'ZTEGSDT013'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDIF.
SORT O_TD_ZTEGSDT013 BY Z_OUTPUT_MODE ASCENDING
VBELN         ASCENDING
ERDAT         ASCENDING.

ENDFORM.                    " GET_ZTEGSDT013
*&---------------------------------------------------------------------*
*&      Form  GET_OTHER_DATA
*&---------------------------------------------------------------------*
*       他のデータ取得
*----------------------------------------------------------------------*
*      -->I_TD_MAKT_S
*      -->I_TD_MARA_S
*      -->I_TD_MARC_S
*      -->I_TD_ZTEGZZM002_S
*      -->I_TD_ZTEGSDM009_S
*      -->I_TD_KNA1_S
*      -->I_TD_KEY3
*      -->I_TD_KEY4
*      <--O_TD_MAKT
*      <--O_TD_MARA
*      <--O_TD_MGEF
*      <--O_TD_MARC
*      <--O_TD_ZTEGZZM002
*      <--O_TD_ZTEGSDM009
*      <--O_TD_KNA1
*      <--O_TD_T005X
*      <--O_TD_VBPA
*      <--O_TD_A902
*      <--O_TD_KONP
*----------------------------------------------------------------------*
FORM GET_OTHER_DATA  USING I_TD_MAKT_S       TYPE TYP_TD_MAKT
I_TD_MARA_S       TYPE TYP_TD_MARA
I_TD_MARC_S       TYPE TYP_TD_MARC
I_TD_ZTEGZZM002_S TYPE TYP_TD_ZTEGZZM002
I_TD_ZTEGSDM009_S TYPE TYP_TD_ZTEGSDM009
I_TD_KNA1_S       TYPE TYP_TD_KNA1
I_TD_KEY3         TYPE TYP_TD_KEY3
I_TD_KEY4         TYPE TYP_TD_KEY4
CHANGING O_TD_MAKT         TYPE TYP_TD_MAKT
O_TD_MARA         TYPE TYP_TD_MARA
O_TD_MGEF         TYPE TYP_TD_MGEF
O_TD_MARC         TYPE TYP_TD_MARC
O_TD_ZTEGZZM002   TYPE TYP_TD_ZTEGZZM002
O_TD_ZTEGSDM009   TYPE TYP_TD_ZTEGSDM009
O_TD_KNA1         TYPE TYP_TD_KNA1
O_TD_T005X        TYPE TYP_TD_T005X
O_TD_VBPA         TYPE TYP_TD_VBPA
O_TD_A902         TYPE TYP_TD_A902
O_TD_KONP         TYPE TYP_TD_KONP.

* 品目テキスト取得
PERFORM GET_MAKT USING I_TD_MAKT_S
CHANGING O_TD_MAKT.
* 危険物テキスト取得
PERFORM GET_MGEF USING I_TD_MARA_S
CHANGING O_TD_MARA
O_TD_MGEF.
* 統計品目コード
PERFORM GET_MARC USING I_TD_MARC_S
CHANGING O_TD_MARC.
* 通貨コード変換取得
PERFORM GET_ZTEGZZM002 USING I_TD_ZTEGZZM002_S
CHANGING O_TD_ZTEGZZM002.
* Dimesnsion出力値変換取得
PERFORM GET_ZTEGSDM009 USING I_TD_ZTEGSDM009_S
CHANGING O_TD_ZTEGSDM009.

* 小数点書式、日付書式の変換用項目取得
PERFORM GET_FORMAT USING I_TD_KNA1_S
CHANGING O_TD_KNA1
O_TD_T005X.

* 選択画面のラジオボタン「Outbound Delivery」が選択されている場合
IF RB_OUT = 'X'.
*   預託品引渡時の単価取得
PERFORM GET_PRICE USING I_TD_KEY3
I_TD_KEY4
CHANGING O_TD_VBPA
O_TD_A902
O_TD_KONP.
ENDIF.

ENDFORM.                    " GET_OTHER_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_MAKT
*&---------------------------------------------------------------------*
*       品目テキスト取得
*----------------------------------------------------------------------*
*      -->I_TD_MAKT_S
*      <--O_TD_MAKT
*----------------------------------------------------------------------*
FORM GET_MAKT  USING I_TD_MAKT_S TYPE TYP_TD_MAKT
CHANGING O_TD_MAKT   TYPE TYP_TD_MAKT.

IF I_TD_MAKT_S[] IS INITIAL.
RETURN.
ENDIF.

SELECT MATNR  "品目コード
MAKTX  "品目テキスト
INTO TABLE O_TD_MAKT
FROM MAKT
FOR ALL ENTRIES IN I_TD_MAKT_S
WHERE MATNR = I_TD_MAKT_S-MATNR.  "品目コード
SORT O_TD_MAKT BY MATNR ASCENDING.

ENDFORM.                    " GET_MAKT
*&---------------------------------------------------------------------*
*&      Form  GET_MGEF
*&---------------------------------------------------------------------*
*       危険物テキスト取得
*----------------------------------------------------------------------*
*      -->I_TD_MARA_S
*      <--O_TD_MARA
*      <--O_TD_MGEF
*----------------------------------------------------------------------*
FORM GET_MGEF  USING I_TD_MARA_S TYPE TYP_TD_MARA
CHANGING O_TD_MARA   TYPE TYP_TD_MARA
O_TD_MGEF   TYPE TYP_TD_MGEF.

TYPES: BEGIN OF LTYP_KEY,
STOFF TYPE MARA-STOFF,
END OF LTYP_KEY.

DATA: LTD_KEY  TYPE STANDARD TABLE OF LTYP_KEY,
LST_KEY  TYPE LTYP_KEY,
LST_MARA TYPE TYP_MARA.

IF I_TD_MARA_S[] IS INITIAL.
RETURN.
ENDIF.

* 危険物コード取得
SELECT MATNR  "品目コード
STOFF  "危険物コード
INTO TABLE O_TD_MARA
FROM MARA
FOR ALL ENTRIES IN I_TD_MARA_S
WHERE MATNR = I_TD_MARA_S-MATNR.  "品目コード
IF SY-SUBRC <> 0.
RETURN.
ENDIF.
SORT O_TD_MARA BY MATNR ASCENDING.
LOOP AT O_TD_MARA INTO LST_MARA.
IF LST_MARA-STOFF IS NOT INITIAL.
CLEAR LST_KEY.
LST_KEY-STOFF = LST_MARA-STOFF.
APPEND LST_KEY TO LTD_KEY.
ENDIF.
ENDLOOP.

IF LTD_KEY is INITIAL.
RETURN.
ENDIF.

SORT LTD_KEY BY STOFF ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_KEY
COMPARING ALL FIELDS.

* 危険物テキスト取得
SELECT STOFF  "危険物コード
STOFT  "危険物テキスト
INTO TABLE O_TD_MGEF
FROM MGEF
FOR ALL ENTRIES IN LTD_KEY
WHERE STOFF = LTD_KEY-STOFF.  "危険物コード
SORT O_TD_MGEF BY STOFF ASCENDING.

ENDFORM.                    " GET_MGEF
*&---------------------------------------------------------------------*
*&      Form  GET_MARC
*&---------------------------------------------------------------------*
*       統計品目コード
*----------------------------------------------------------------------*
*      -->I_TD_MARC_S
*      <--O_TD_MARC
*----------------------------------------------------------------------*
FORM GET_MARC  USING I_TD_MARC_S TYPE TYP_TD_MARC
CHANGING O_TD_MARC   TYPE TYP_TD_MARC.

IF I_TD_MARC_S[] IS INITIAL.
RETURN.
ENDIF.

SELECT MATNR  "品目コード
WERKS  "プラント
STAWN  "貿易の統計品目コード/輸入コード番号
HERKL  "品目の原産国
INTO TABLE O_TD_MARC
FROM MARC
FOR ALL ENTRIES IN I_TD_MARC_S
WHERE MATNR = I_TD_MARC_S-MATNR   "品目コード
AND WERKS = I_TD_MARC_S-WERKS.  "プラント
SORT O_TD_MARC BY MATNR ASCENDING
WERKS ASCENDING.

ENDFORM.                    " GET_MARC
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGZZM002
*&---------------------------------------------------------------------*
*       通貨コード変換
*----------------------------------------------------------------------*
*      -->I_TD_ZTEGZZM002_S
*      <--O_TD_ZTEGZZM002
*----------------------------------------------------------------------*
FORM GET_ZTEGZZM002  USING I_TD_ZTEGZZM002_S TYPE TYP_TD_ZTEGZZM002
CHANGING O_TD_ZTEGZZM002   TYPE TYP_TD_ZTEGZZM002.

IF I_TD_ZTEGZZM002_S IS INITIAL.
RETURN.
ENDIF.

SELECT WAERS  "通貨コード
Z_WAERS  "変換後通貨コード
INTO TABLE O_TD_ZTEGZZM002
FROM ZTEGZZM002
FOR ALL ENTRIES IN I_TD_ZTEGZZM002_S
WHERE WAERS = I_TD_ZTEGZZM002_S-WAERS.  "通貨コード
SORT O_TD_ZTEGZZM002 BY WAERS ASCENDING.

ENDFORM.                    " GET_ZTEGZZM002
*&---------------------------------------------------------------------*
*&      Form  GET_ZTEGSDM009
*&---------------------------------------------------------------------*
*       Dimesnsion出力値変換取得
*----------------------------------------------------------------------*
*      -->I_TD_ZTEGSDM009_S
*      <--O_TD_ZTEGSDM009
*----------------------------------------------------------------------*
FORM GET_ZTEGSDM009  USING I_TD_ZTEGSDM009_S TYPE TYP_TD_ZTEGSDM009
CHANGING O_TD_ZTEGSDM009   TYPE TYP_TD_ZTEGSDM009.

IF I_TD_ZTEGSDM009_S IS INITIAL.
RETURN.
ENDIF.

SELECT Z_TEMPLATE_ID  "テンプレートID
Z_LENGTH  "Length(cm)
Z_WIDTH  "Width(cm)
Z_HEIGHT  "Height(cm)
INTO TABLE O_TD_ZTEGSDM009
FROM ZTEGSDM009
FOR ALL ENTRIES IN I_TD_ZTEGSDM009_S
WHERE Z_TEMPLATE_ID = I_TD_ZTEGSDM009_S-Z_TEMPLATE_ID."テンプレートID
SORT O_TD_ZTEGSDM009 BY Z_TEMPLATE_ID ASCENDING.

ENDFORM.                    " GET_ZTEGSDM009
*&---------------------------------------------------------------------*
*&      Form  GET_FORMAT
*&---------------------------------------------------------------------*
*       小数点書式、日付書式の変換用項目取得
*----------------------------------------------------------------------*
*      -->I_TD_KNA1_S
*      <--O_TD_KNA1
*      <--O_TD_T005X
*----------------------------------------------------------------------*
FORM GET_FORMAT  USING I_TD_KNA1_S TYPE TYP_TD_KNA1
CHANGING O_TD_KNA1   TYPE TYP_TD_KNA1
O_TD_T005X  TYPE TYP_TD_T005X.

DATA LTD_KEY TYPE STANDARD TABLE OF TYP_KNA1.

* 選択画面にて画面入力があった場合は、入力値を優先する
IF  P_XDEZP IS NOT INITIAL
AND P_DATFM IS NOT INITIAL.
RETURN.
ENDIF.

IF I_TD_KNA1_S[] IS INITIAL.
RETURN.
ENDIF.

* 国コード取得
SELECT KUNNR  "得意先コード
LAND1  "国コード
INTO TABLE O_TD_KNA1
FROM KNA1
FOR ALL ENTRIES IN I_TD_KNA1_S
WHERE KUNNR = I_TD_KNA1_S-KUNNR.  "得意先コード
IF SY-SUBRC <> 0.
RETURN.
ENDIF.
SORT O_TD_KNA1 BY KUNNR ASCENDING.
LTD_KEY[] = O_TD_KNA1[].
SORT LTD_KEY BY LAND1 ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_KEY
COMPARING LAND1.

* 小数点書式、日付書式取得
SELECT LAND  "国コード
XDEZP  "小数点書式
DATFM  "日付書式
INTO TABLE O_TD_T005X
FROM T005X
FOR ALL ENTRIES IN LTD_KEY
WHERE LAND = LTD_KEY-LAND1.  "国コード
SORT O_TD_T005X BY LAND ASCENDING.

ENDFORM.                    " GET_FORMAT
*&---------------------------------------------------------------------*
*&      Form  GET_PRICE
*&---------------------------------------------------------------------*
*       預託品引渡時の単価取得
*----------------------------------------------------------------------*
*      -->I_TD_KEY3
*      -->I_TD_KEY4
*      <--O_TD_VBPA
*      <--O_TD_A902
*      <--O_TD_KONP
*----------------------------------------------------------------------*
FORM GET_PRICE  USING I_TD_KEY3 TYPE TYP_TD_KEY3
I_TD_KEY4 TYPE TYP_TD_KEY4
CHANGING O_TD_VBPA TYPE TYP_TD_VBPA
O_TD_A902 TYPE TYP_TD_A902
O_TD_KONP TYPE TYP_TD_KONP.

DATA: LTD_ZTEGZZM999_1 TYPE TYP_TD_ZTEGZZM999,
LTD_ZTEGZZM999_2 TYPE TYP_TD_ZTEGZZM999,
LTD_ZTEGZZM999_3 TYPE TYP_TD_ZTEGZZM999,
LST_ZTEGZZM999   TYPE TYP_ZTEGZZM999,
LST_AUART        LIKE LINE OF RD_AUART,
LRD_PARVW        TYPE RANGE OF VBPA-PARVW,
LST_PARVW        LIKE LINE OF LRD_PARVW,
LRD_KSCHL        TYPE RANGE OF KONP-KSCHL,
LST_KSCHL        LIKE LINE OF LRD_KSCHL,
LTD_KEY          TYPE STANDARD TABLE OF TYP_A902.

* アドオン変数テーブル（ZTEGZZM999）から、販売伝票タイプを取得
SELECT LOW  "ABAP: 選択値
INTO TABLE LTD_ZTEGZZM999_1
FROM ZTEGZZM999
WHERE NAME     = CNS_V_AUART  "アドオン変数名
AND PROGNAME = SY-REPID.  "ABAP プログラム名
IF SY-SUBRC <> 0.
*   アドオン変数テーブルが取得できませんでした(NAME = &1 / PGM = &2)
MESSAGE S051(ZMEGSD01) WITH CNS_V_AUART SY-REPID
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
* アドオン変数テーブル（ZTEGZZM999）から、取引先機能を取得
SELECT LOW  "ABAP: 選択値
INTO TABLE LTD_ZTEGZZM999_2
FROM ZTEGZZM999
WHERE NAME     = CNS_V_PARVW  "アドオン変数名
AND PROGNAME = SY-REPID.  "ABAP プログラム名
IF SY-SUBRC <> 0.
*   アドオン変数テーブルが取得できませんでした(NAME = &1 / PGM = &2)
MESSAGE S051(ZMEGSD01) WITH CNS_V_PARVW SY-REPID
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
* アドオン変数テーブル（ZTEGZZM999）から、条件タイプを取得
SELECT LOW  "ABAP: 選択値
INTO TABLE LTD_ZTEGZZM999_3
FROM ZTEGZZM999
WHERE NAME     = CNS_V_KSCHL  "アドオン変数名
AND PROGNAME = SY-REPID.  "ABAP プログラム名
IF SY-SUBRC <> 0.
*   アドオン変数テーブルが取得できませんでした(NAME = &1 / PGM = &2)
MESSAGE S051(ZMEGSD01) WITH CNS_V_KSCHL SY-REPID
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
REFRESH RD_AUART.
LOOP AT LTD_ZTEGZZM999_1 INTO LST_ZTEGZZM999.
CLEAR LST_AUART.
LST_AUART-SIGN = 'I'.
LST_AUART-OPTION = 'EQ'.
LST_AUART-LOW = LST_ZTEGZZM999-LOW.
APPEND LST_AUART TO RD_AUART.
ENDLOOP.
LOOP AT LTD_ZTEGZZM999_2 INTO LST_ZTEGZZM999.
CLEAR LST_PARVW.
LST_PARVW-SIGN = 'I'.
LST_PARVW-OPTION = 'EQ'.
LST_PARVW-LOW = LST_ZTEGZZM999-LOW.
APPEND LST_PARVW TO LRD_PARVW.
ENDLOOP.
LOOP AT LTD_ZTEGZZM999_3 INTO LST_ZTEGZZM999.
CLEAR LST_KSCHL.
LST_KSCHL-SIGN = 'I'.
LST_KSCHL-OPTION = 'EQ'.
LST_KSCHL-LOW = LST_ZTEGZZM999-LOW.
APPEND LST_KSCHL TO LRD_KSCHL.
ENDLOOP.
SORT RD_AUART BY LOW ASCENDING.
DELETE ADJACENT DUPLICATES FROM RD_AUART
COMPARING ALL FIELDS.
SORT LRD_PARVW BY LOW ASCENDING.
DELETE ADJACENT DUPLICATES FROM LRD_PARVW
COMPARING ALL FIELDS.
SORT LRD_KSCHL BY LOW ASCENDING.
DELETE ADJACENT DUPLICATES FROM LRD_KSCHL
COMPARING ALL FIELDS.

* 取引先コード取得
SELECT VBELN  "販売伝票
KUNNR  "得意先コード
INTO TABLE O_TD_VBPA
FROM VBPA
FOR ALL ENTRIES IN I_TD_KEY3
WHERE VBELN = I_TD_KEY3-VBELN  "販売伝票
AND PARVW IN LRD_PARVW.  "取引先機能
IF SY-SUBRC <> 0.
RETURN.
ENDIF.
SORT O_TD_VBPA BY VBELN ASCENDING.
DELETE ADJACENT DUPLICATES FROM O_TD_VBPA
COMPARING VBELN.

* 販売単価取得
SELECT VKORGAU  "販売組織
VTWEG  "流通チャネル
SPART  "製品部門
ZZZKDMAT  "得意先品目
ZZZKUNZE  "エンドユーザ
DATBI  "有効開始日
DATAB  "有効終了日
KNUMH  "条件レコードNo.
INTO TABLE O_TD_A902
FROM A902
FOR ALL ENTRIES IN I_TD_KEY4
WHERE KAPPL = 'V'  "AP
AND KSCHL    IN LRD_KSCHL "条件タイプ
AND VKORGAU  = I_TD_KEY4-VKORGAU  "販売組織
AND VTWEG    = I_TD_KEY4-VTWEG  "流通チャネル
AND SPART    = I_TD_KEY4-SPART  "製品部門
AND ZZZKDMAT = I_TD_KEY4-ZZZKDMAT.  "得意先品目
IF SY-SUBRC <> 0.
RETURN.
ENDIF.
SORT O_TD_A902 BY VKORGAU  ASCENDING
VTWEG    ASCENDING
SPART    ASCENDING
ZZZKDMAT ASCENDING.
LTD_KEY[] = O_TD_A902[].
SORT LTD_KEY BY KNUMH ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_KEY
COMPARING KNUMH.

* 販売単価取得
SELECT KNUMH  "条件レコードNo.
KBETR  "金額/率
KONWA  "通貨
KPEIN  "価格条件単位
INTO TABLE O_TD_KONP
FROM KONP
FOR ALL ENTRIES IN LTD_KEY
WHERE KNUMH = LTD_KEY-KNUMH.  "条件レコードNo.
SORT O_TD_KONP BY KNUMH ASCENDING.

ENDFORM.                    " GET_PRICE
*&---------------------------------------------------------------------*
*&      Form  EDIT_INV_DATA
*&---------------------------------------------------------------------*
*       Invoice、Delivery Noteデータの編集
*----------------------------------------------------------------------*
*      -->I_TD_LIKP_INV
*      -->I_TD_ZTEGSDT001_INV
*      -->I_TD_ZTEGSDT010_INV
*      -->I_TD_ZTEGSDT011
*      -->I_TD_ZTEGSDT019
*      -->I_TD_MAKT
*      -->I_TD_MARA
*      -->I_TD_MGEF
*      -->I_TD_MARC
*      -->I_TD_ZTEGZZM002
*      -->I_TD_KNA1
*      -->I_TD_T005X
*      -->I_TD_VBPA
*      -->I_TD_A902
*      -->I_TD_KONP
*      <--O_TD_INV
*      <--O_TD_FILE_INV
*      <--O_TD_DN
*      <--O_TD_FILE_DN
*----------------------------------------------------------------------*
FORM EDIT_INV_DATA  USING I_TD_LIKP_INV       TYPE TYP_TD_LIKP_INV
I_TD_ZTEGSDT001_INV TYPE TYP_TD_ZTEGSDT001_INV
I_TD_ZTEGSDT010_INV TYPE TYP_TD_ZTEGSDT010_INV
I_TD_ZTEGSDT011     TYPE TYP_TD_ZTEGSDT011
I_TD_ZTEGSDT019     TYPE TYP_TD_ZTEGSDT019
I_TD_MAKT           TYPE TYP_TD_MAKT
I_TD_MARA           TYPE TYP_TD_MARA
I_TD_MGEF           TYPE TYP_TD_MGEF
I_TD_MARC           TYPE TYP_TD_MARC
I_TD_ZTEGZZM002     TYPE TYP_TD_ZTEGZZM002
I_TD_KNA1           TYPE TYP_TD_KNA1
I_TD_T005X          TYPE TYP_TD_T005X
I_TD_VBPA           TYPE TYP_TD_VBPA
I_TD_A902           TYPE TYP_TD_A902
I_TD_KONP           TYPE TYP_TD_KONP
CHANGING O_TD_INV            TYPE TYP_TD_INV
O_TD_FILE_INV       TYPE TYP_TD_FILE_INV
O_TD_DN             TYPE TYP_TD_DN
O_TD_FILE_DN        TYPE TYP_TD_FILE_DN.

* 選択画面のチェックボックス「Invoice」「Delivery Note」ONの場合のみ実行
IF  CB_INV IS INITIAL
AND CB_DN  IS INITIAL.
RETURN.
ENDIF.

DATA: LST_LIKP_INV       TYPE TYP_LIKP_INV,
LST_ZTEGSDT001_INV TYPE TYP_ZTEGSDT001_INV,
LST_ZTEGSDT010_INV TYPE TYP_ZTEGSDT010_INV,
LST_MAKT           TYPE TYP_MAKT,
LST_MARA           TYPE TYP_MARA,
LST_MGEF           TYPE TYP_MGEF,
LST_MARC           TYPE TYP_MARC,
LST_ZTEGZZM002     TYPE TYP_ZTEGZZM002,
LST_KNA1           TYPE TYP_KNA1,
LST_T005X          TYPE TYP_T005X,
LST_VBPA           TYPE TYP_VBPA,
LST_A902           TYPE TYP_A902,
LST_KONP           TYPE TYP_KONP,
LST_INV            TYPE TYP_INV,
LST_FILE_INV       TYPE ZSEGSD0012,
LST_DN             TYPE TYP_INV,
LST_FILE_DN        TYPE ZSEGSD0021,
LW_NEW             TYPE CHAR1,
LW_NO_DATA         TYPE CHAR1,
LW_NO_DATA_INV     TYPE CHAR1,
LW_NO_DATA_DN      TYPE CHAR1,
LW_KONP_PRICE_SET  TYPE CHAR1,
LW_NAME            TYPE THEAD-TDNAME,
LW_QUAN            TYPE CHAR30,
LW_PRICE           TYPE CHAR30,
LW_AMOUNT          TYPE CHAR30,
LW_DATE            TYPE CHAR30,
LTD_LINES          TYPE STANDARD TABLE OF TLINE,
LST_LINES          TYPE TLINE.

* 選択画面のラジオボタン「Outbound Delivery」が選択されている場合
IF RB_OUT = 'X'.
LOOP AT I_TD_LIKP_INV INTO LST_LIKP_INV.
AT NEW VBELN.
LW_NEW = 'X'.
CLEAR LW_NO_DATA.
CLEAR: LW_NO_DATA_INV,
LW_NO_DATA_DN.
ENDAT.
*     Reprint判断
IF  LW_NEW = 'X'
AND RB_REPNT = 'X'.
READ TABLE I_TD_ZTEGSDT011 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = 'P'
VBELN         = LST_LIKP_INV-VBELN
ERDAT         = LST_LIKP_INV-ERDAT.
IF SY-SUBRC <> 0.
LW_NO_DATA_INV = 'X'.
ENDIF.
READ TABLE I_TD_ZTEGSDT019 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = 'P'
VBELN         = LST_LIKP_INV-VBELN
ERDAT         = LST_LIKP_INV-ERDAT.
IF SY-SUBRC <> 0.
LW_NO_DATA_DN = 'X'.
ENDIF.

IF LW_NO_DATA_INV = 'X'
AND LW_NO_DATA_DN = 'X'.
LW_NO_DATA = 'X'.
ENDIF.
ENDIF.
*     データ存在判断
IF LW_NEW = 'X'.
CLEAR LW_NEW.
CLEAR LST_ZTEGSDT001_INV.
READ TABLE I_TD_ZTEGSDT001_INV INTO LST_ZTEGSDT001_INV
BINARY SEARCH
WITH KEY VBELN = LST_LIKP_INV-VBELN
ERDAT = LST_LIKP_INV-ERDAT.
IF SY-SUBRC <> 0.
LW_NO_DATA = 'X'.
ENDIF.
ENDIF.
IF LW_NO_DATA = 'X'.
CONTINUE.
ENDIF.

*     他のデータの読み込み
CLEAR LST_MAKT.
READ TABLE I_TD_MAKT INTO LST_MAKT BINARY SEARCH
WITH KEY MATNR = LST_LIKP_INV-MATNR.
CLEAR LST_MARA.
CLEAR LST_MGEF.
READ TABLE I_TD_MARA INTO LST_MARA BINARY SEARCH
WITH KEY MATNR = LST_LIKP_INV-MATNR.
IF SY-SUBRC = 0.
READ TABLE I_TD_MGEF INTO LST_MGEF BINARY SEARCH
WITH KEY STOFF = LST_MARA-STOFF.
ENDIF.
CLEAR LST_MARC.
READ TABLE I_TD_MARC INTO LST_MARC BINARY SEARCH
WITH KEY MATNR = LST_LIKP_INV-MATNR
WERKS = LST_LIKP_INV-WERKS.
CLEAR LST_ZTEGZZM002.
READ TABLE I_TD_ZTEGZZM002 INTO LST_ZTEGZZM002 BINARY SEARCH
WITH KEY WAERS = LST_LIKP_INV-WAERK.
CLEAR LST_KNA1.
CLEAR LST_T005X.
READ TABLE I_TD_KNA1 INTO LST_KNA1 BINARY SEARCH
WITH KEY KUNNR = LST_LIKP_INV-KUNAG.
IF SY-SUBRC = 0.
READ TABLE I_TD_T005X INTO LST_T005X BINARY SEARCH
WITH KEY LAND = LST_KNA1-LAND1.
ENDIF.

*     預託品引渡時の単価取得の判断
CLEAR LW_KONP_PRICE_SET.
CLEAR LST_VBPA.
CLEAR LST_KONP.
IF LST_LIKP_INV-AUART IN RD_AUART.
READ TABLE I_TD_VBPA INTO LST_VBPA BINARY SEARCH
WITH KEY VBELN = LST_LIKP_INV-VGBEL.
IF SY-SUBRC = 0.
LOOP AT I_TD_A902 INTO LST_A902
WHERE VKORGAU = LST_LIKP_INV-VKORG
AND VTWEG = LST_LIKP_INV-VTWEG
AND SPART = LST_LIKP_INV-SPART
AND ZZZKDMAT = LST_LIKP_INV-KDMAT
AND ZZZKUNZE = LST_VBPA-KUNNR
AND DATBI >= LST_LIKP_INV-PRSDT
AND DATAB <= LST_LIKP_INV-PRSDT.
READ TABLE I_TD_KONP INTO LST_KONP BINARY SEARCH
WITH KEY KNUMH = LST_A902-KNUMH.
IF SY-SUBRC = 0.
LW_KONP_PRICE_SET = 'X'.
EXIT.
ENDIF.
ENDLOOP.
ENDIF.
ENDIF.

CLEAR: LST_INV,
LST_FILE_INV,
LST_DN,
LST_FILE_DN.

*     OutboundDelivery
LST_INV-VBELN = LST_LIKP_INV-VBELN.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_INV-VBELN
IMPORTING
OUTPUT        = LST_FILE_INV-VBELN.

*     Created on
LST_INV-ERDAT = LST_LIKP_INV-ERDAT.

*     OutboundDeliveryItem
LST_INV-POSNR = LST_LIKP_INV-POSNR.
LST_FILE_INV-POSNR =  LST_INV-POSNR.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_FILE_INV-POSNR
IMPORTING
OUTPUT        = LST_FILE_INV-POSNR.

*     ItemCode
LST_INV-MATNR = LST_LIKP_INV-MATNR.
CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
EXPORTING
INPUT         = LST_INV-MATNR
IMPORTING
OUTPUT        = LST_FILE_INV-MATNR.

*     CustomerPONo
LST_INV-BSTKD = LST_LIKP_INV-BSTKD.
LST_FILE_INV-BSTKD = LST_INV-BSTKD.

*     SONo
LST_INV-VGBEL = LST_LIKP_INV-VGBEL.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_INV-VGBEL
IMPORTING
OUTPUT        = LST_FILE_INV-VGBEL.

*     SOItem
LST_INV-VGPOS = LST_LIKP_INV-VGPOS.
LST_FILE_INV-VGPOS = LST_INV-VGPOS.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_FILE_INV-VGPOS
IMPORTING
OUTPUT        = LST_FILE_INV-VGPOS.

*     CustomerItemCode
LST_INV-KDMAT = LST_LIKP_INV-KDMAT.
LST_FILE_INV-KDMAT = LST_INV-KDMAT.

*     Unit
LST_INV-VRKME = LST_LIKP_INV-VRKME.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_INV-VRKME
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_INV-VRKME
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     Quantity
LST_INV-LFIMG = LST_LIKP_INV-LFIMG.
WRITE LST_INV-LFIMG TO LW_QUAN UNIT LST_INV-VRKME.
LST_FILE_INV-LFIMG = LW_QUAN.

*     CurrencyPrice
LST_INV-WAERK = LST_LIKP_INV-WAERK.

*     Price
IF LW_KONP_PRICE_SET IS INITIAL.
IF LST_LIKP_INV-KPEIN IS NOT INITIAL.
LST_INV-NETPR = LST_LIKP_INV-NETPR
/ LST_LIKP_INV-KPEIN.
ENDIF.
ELSE.
IF LST_KONP-KPEIN IS NOT INITIAL.
LST_INV-NETPR = LST_KONP-KBETR
/ LST_KONP-KPEIN.
ENDIF.
ENDIF.
WRITE LST_INV-NETPR TO LW_PRICE CURRENCY LST_INV-WAERK.
LST_FILE_INV-NETPR = LW_PRICE.

*     OutputCurrencyPrice
LST_INV-WAERK_O = LST_ZTEGZZM002-Z_WAERS.
LST_FILE_INV-WAERK_O = LST_INV-WAERK_O.

*     CurrencyAmount
LST_INV-WAERS = LST_LIKP_INV-WAERK.

*     Amount
IF LW_KONP_PRICE_SET IS INITIAL.
IF LST_LIKP_INV-KPEIN IS NOT INITIAL.
CATCH SYSTEM-EXCEPTIONS arithmetic_errors = 4.
LST_INV-NETWR = LST_LIKP_INV-NETPR
/ LST_LIKP_INV-KPEIN
* LST_LIKP_INV-LFIMG.
ENDCATCH.
IF SY-SUBRC <> 0.
LST_INV-NETWR = CNS_NETWR_MAX.
ENDIF.
ENDIF.
ELSE.
IF LST_KONP-KPEIN IS NOT INITIAL.
CATCH SYSTEM-EXCEPTIONS arithmetic_errors = 4.
LST_INV-NETWR = LST_KONP-KBETR
/ LST_KONP-KPEIN
* LST_LIKP_INV-LFIMG.
ENDCATCH.
IF SY-SUBRC <> 0.
LST_INV-NETWR = CNS_NETWR_MAX.
ENDIF.
ENDIF.
ENDIF.
WRITE LST_INV-NETWR TO LW_AMOUNT CURRENCY LST_INV-WAERS.
LST_FILE_INV-NETWR = LW_AMOUNT.

*     OutputCurrencyAmount
LST_INV-WAERS_O = LST_ZTEGZZM002-Z_WAERS.
LST_FILE_INV-WAERS_O = LST_INV-WAERS_O.

*     Plant
LST_INV-WERKS = LST_LIKP_INV-WERKS.

*     SalesOrg
LST_INV-VKORG = LST_LIKP_INV-VKORG.

*     SalesChannel
LST_INV-VTWEG = LST_LIKP_INV-VTWEG.

*     ShippingPt
LST_INV-VSTEL = LST_LIKP_INV-VSTEL.
LST_FILE_INV-VSTEL = LST_INV-VSTEL.

*     Sold-to party
LST_INV-KUNAG = LST_LIKP_INV-KUNAG.

*     Ship-to party
LST_INV-KUNNR = LST_LIKP_INV-KUNNR.

*     InvoiceNo
LST_INV-Z_INVOICE_NO = LST_ZTEGSDT001_INV-Z_INVOICE_NO.
LST_FILE_INV-Z_INVOICE_NO = LST_INV-Z_INVOICE_NO.

*     InvoiceDate
LST_INV-Z_INVOICE_DATE = LST_ZTEGSDT001_INV-Z_INVOICE_DATE.
WRITE LST_INV-Z_INVOICE_DATE TO LW_DATE.
LST_FILE_INV-Z_INVOICE_DATE = LW_DATE.

*     CustCodeBillTo
LST_INV-Z_CUST_BT = LST_ZTEGSDT001_INV-Z_CUST_BT.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_INV-Z_CUST_BT
IMPORTING
OUTPUT        = LST_FILE_INV-Z_CUST_BT.

*     CustNameBillTo
LST_INV-Z_CUST_NAME_BT = LST_ZTEGSDT001_INV-Z_CUST_NAME_BT.
LST_FILE_INV-Z_CUST_NAME_BT = LST_INV-Z_CUST_NAME_BT.

*     CustAddress1BillTo
LST_INV-Z_ADDRESS1_BT = LST_ZTEGSDT001_INV-Z_ADDRESS1_BT.
LST_FILE_INV-Z_ADDRESS1_BT = LST_INV-Z_ADDRESS1_BT.

*     CustAddress2BillTo
LST_INV-Z_ADDRESS2_BT = LST_ZTEGSDT001_INV-Z_ADDRESS2_BT.
LST_FILE_INV-Z_ADDRESS2_BT = LST_INV-Z_ADDRESS2_BT.

*     CusｔAttnBillTo
LST_INV-Z_ATTN_BT = LST_ZTEGSDT001_INV-Z_ATTN_BT.
LST_FILE_INV-Z_ATTN_BT = LST_INV-Z_ATTN_BT.

*     CustTelBillTo
LST_INV-Z_TEL_BT = LST_ZTEGSDT001_INV-Z_TEL_BT.
LST_FILE_INV-Z_TEL_BT = LST_INV-Z_TEL_BT.

*     CustFaxBillTo
LST_INV-Z_FAX_BT = LST_ZTEGSDT001_INV-Z_FAX_BT.
LST_FILE_INV-Z_FAX_BT = LST_INV-Z_FAX_BT.

*     CustCodeShipTo
LST_INV-Z_CUST_ST = LST_ZTEGSDT001_INV-Z_CUST_ST.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_INV-Z_CUST_ST
IMPORTING
OUTPUT        = LST_FILE_INV-Z_CUST_ST.

*     CustNameShipTo
LST_INV-Z_CUST_NAME_ST = LST_ZTEGSDT001_INV-Z_CUST_NAME_ST.
LST_FILE_INV-Z_CUST_NAME_ST = LST_INV-Z_CUST_NAME_ST.

*     CustAddress1ShipTo
LST_INV-Z_ADDRESS1_ST = LST_ZTEGSDT001_INV-Z_ADDRESS1_ST.
LST_FILE_INV-Z_ADDRESS1_ST = LST_INV-Z_ADDRESS1_ST.

*     CustAddress2ShipTo
LST_INV-Z_ADDRESS2_ST = LST_ZTEGSDT001_INV-Z_ADDRESS2_ST.
LST_FILE_INV-Z_ADDRESS2_ST = LST_INV-Z_ADDRESS2_ST.

*     CusｔAttnShipTo
LST_INV-Z_ATTN_ST = LST_ZTEGSDT001_INV-Z_ATTN_ST.
LST_FILE_INV-Z_ATTN_ST = LST_INV-Z_ATTN_ST.

*     CustTelShipTo
LST_INV-Z_TEL_ST = LST_ZTEGSDT001_INV-Z_TEL_ST.
LST_FILE_INV-Z_TEL_ST = LST_INV-Z_TEL_ST.

*     CustFaxShipTo
LST_INV-Z_FAX_ST = LST_ZTEGSDT001_INV-Z_FAX_ST.
LST_FILE_INV-Z_FAX_ST = LST_INV-Z_FAX_ST.

*     Shipped Per
LST_INV-Z_SHIPPED_PER = LST_ZTEGSDT001_INV-Z_SHIPPED_PER.
LST_FILE_INV-Z_SHIPPED_PER = LST_INV-Z_SHIPPED_PER.

*     On or About
LST_INV-Z_ON_OR_ABOUT = LST_ZTEGSDT001_INV-Z_ON_OR_ABOUT.
WRITE LST_INV-Z_ON_OR_ABOUT TO LW_DATE.
LST_FILE_INV-Z_ON_OR_ABOUT = LW_DATE.

*     From
LST_INV-Z_TRADE_FROM = LST_ZTEGSDT001_INV-Z_TRADE_FROM.
LST_FILE_INV-Z_TRADE_FROM = LST_INV-Z_TRADE_FROM.

*     To
LST_INV-Z_TRADE_TO = LST_ZTEGSDT001_INV-Z_TRADE_TO.
LST_FILE_INV-Z_TRADE_TO = LST_INV-Z_TRADE_TO.

*     Via
LST_INV-Z_TRADE_VIA = LST_ZTEGSDT001_INV-Z_TRADE_VIA.
LST_FILE_INV-Z_TRADE_VIA = LST_INV-Z_TRADE_VIA.

*     Payment
LST_INV-Z_TRADE_PAYMENT = LST_ZTEGSDT001_INV-Z_TRADE_PAYMENT.
LST_FILE_INV-Z_TRADE_PAYMENT = LST_INV-Z_TRADE_PAYMENT.

*     TradeTerm
LST_INV-Z_TRADE_TERM = LST_ZTEGSDT001_INV-Z_TRADE_TERM.
LST_FILE_INV-Z_TRADE_TERM = LST_INV-Z_TRADE_TERM.

*     CaseMark1
LST_INV-Z_CASEMARK1 = LST_ZTEGSDT001_INV-Z_CASEMARK1.
LST_FILE_INV-Z_CASEMARK1 = LST_INV-Z_CASEMARK1.

*     CaseMark2
LST_INV-Z_CASEMARK2 = LST_ZTEGSDT001_INV-Z_CASEMARK2.
LST_FILE_INV-Z_CASEMARK2 = LST_INV-Z_CASEMARK2.

*     CaseMark3
LST_INV-Z_CASEMARK3 = LST_ZTEGSDT001_INV-Z_CASEMARK3.
LST_FILE_INV-Z_CASEMARK3 = LST_INV-Z_CASEMARK3.

*     CaseMark4
LST_INV-Z_CASEMARK4 = LST_ZTEGSDT001_INV-Z_CASEMARK4.
LST_FILE_INV-Z_CASEMARK4 = LST_INV-Z_CASEMARK4.

*     CaseMark5
LST_INV-Z_CASEMARK5 = LST_ZTEGSDT001_INV-Z_CASEMARK5.
LST_FILE_INV-Z_CASEMARK5 = LST_INV-Z_CASEMARK5.

*     Remarks1
LST_INV-Z_INV_REMARKS1 = LST_ZTEGSDT001_INV-Z_INV_REMARKS1.
LST_FILE_INV-Z_INV_REMARKS1 = LST_INV-Z_INV_REMARKS1.

*     Remarks2
LST_INV-Z_INV_REMARKS2 = LST_ZTEGSDT001_INV-Z_INV_REMARKS2.
LST_FILE_INV-Z_INV_REMARKS2 = LST_INV-Z_INV_REMARKS2.

*     Remarks3
LST_INV-Z_INV_REMARKS3 = LST_ZTEGSDT001_INV-Z_INV_REMARKS3.
LST_FILE_INV-Z_INV_REMARKS3 = LST_INV-Z_INV_REMARKS3.

*     Remarks4
LST_INV-Z_INV_REMARKS4 = LST_ZTEGSDT001_INV-Z_INV_REMARKS4.
LST_FILE_INV-Z_INV_REMARKS4 = LST_INV-Z_INV_REMARKS4.

*     Remarks5
LST_INV-Z_INV_REMARKS5 = LST_ZTEGSDT001_INV-Z_INV_REMARKS5.
LST_FILE_INV-Z_INV_REMARKS5 = LST_INV-Z_INV_REMARKS5.

*     Printer/Tray
LST_INV-LNAME = P_PTRAY.
LST_FILE_INV-LNAME = LST_INV-LNAME.

*     CopmanyName
LST_INV-Z_COMP_NAME = P_CNAME.
LST_FILE_INV-Z_COMP_NAME = LST_INV-Z_COMP_NAME.

*     CopmanyAddress1
LST_INV-Z_COMP_ADDRESS1 = P_CADDR1.
LST_FILE_INV-Z_COMP_ADDRESS1 = LST_INV-Z_COMP_ADDRESS1.

*     CopmanyAddress2
LST_INV-Z_COMP_ADDRESS2 = P_CADDR2.
LST_FILE_INV-Z_COMP_ADDRESS2 = LST_INV-Z_COMP_ADDRESS2.

*     CopmanyTel
LST_INV-Z_COMP_TEL = P_CTEL.
LST_FILE_INV-Z_COMP_TEL = LST_INV-Z_COMP_TEL.

*     CopmanyFax
LST_INV-Z_COMP_FAX = P_CFAX.
LST_FILE_INV-Z_COMP_FAX = LST_INV-Z_COMP_FAX.

*     ItemText
LST_INV-MAKTX = LST_MAKT-MAKTX.
LST_FILE_INV-MAKTX = LST_INV-MAKTX.

*     Purpose
REFRESH LTD_LINES.
CLEAR LW_NAME.
LW_NAME+0(4) = LST_LIKP_INV-VKORG.
LW_NAME+4(2) = LST_LIKP_INV-VTWEG.
LW_NAME+6(10) = LST_LIKP_INV-KUNAG.
LW_NAME+16 = LST_LIKP_INV-MATNR.
CALL FUNCTION 'READ_TEXT'
EXPORTING
CLIENT                        = SY-MANDT
ID                            = '0004'
LANGUAGE                      = SY-LANGU
NAME                          = LW_NAME
OBJECT                        = 'KNMT'
TABLES
LINES                         = LTD_LINES
EXCEPTIONS
ID                            = 1
LANGUAGE                      = 2
NAME                          = 3
NOT_FOUND                     = 4
OBJECT                        = 5
REFERENCE_CHECK               = 6
WRONG_ACCESS_TO_ARCHIVE       = 7
OTHERS                        = 8.
IF SY-SUBRC <> 0.
*       汎用モジュールにて想定外のエラーが発生しました。
MESSAGE S032(ZMEGSD01) WITH 'READ_TEXT' 'ZMEGSD01 032'
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ELSE.
LOOP AT LTD_LINES INTO LST_LINES.
CONCATENATE LST_INV-Z_PURPOSE
LST_LINES-TDLINE
INTO LST_INV-Z_PURPOSE.
ENDLOOP.
LST_FILE_INV-Z_PURPOSE = LST_INV-Z_PURPOSE.
ENDIF.

*     HSCode
LST_INV-STAWN = LST_MARC-STAWN.
LST_FILE_INV-STAWN = LST_INV-STAWN.

*     Origin
LST_INV-LANDX = LST_MARC-HERKL.
LST_FILE_INV-LANDX = LST_INV-LANDX.

*     DGType
LST_INV-STOFT = LST_MGEF-STOFT.
LST_FILE_INV-STOFT = LST_INV-STOFT.

*     OutputUser
LST_INV-Z_OUTPUT_USERID = SY-UNAME.
LST_FILE_INV-Z_OUTPUT_USERID = LST_INV-Z_OUTPUT_USERID.

*     Dec.pt.Format
IF P_XDEZP IS INITIAL.
LST_INV-XDEZP = LST_T005X-XDEZP.
ELSE.
LST_INV-XDEZP = P_XDEZP.
ENDIF.
LST_FILE_INV-XDEZP = LST_INV-XDEZP.

*     DateFormat
IF P_DATFM IS INITIAL.
LST_INV-DATFM = LST_T005X-DATFM.
ELSE.
LST_INV-DATFM = P_DATFM.
ENDIF.
LST_FILE_INV-DATFM = LST_INV-DATFM.

*     ReportFormat
IF  LST_INV-STAWN IS INITIAL
AND LST_INV-Z_PURPOSE IS INITIAL
AND LST_INV-STOFT IS INITIAL.
LST_INV-Z_REPORT_FORMAT = CNS_RF_SMALL.
ELSE.
LST_INV-Z_REPORT_FORMAT = CNS_RF_LARGE.
ENDIF.
LST_FILE_INV-Z_REPORT_FORMAT = LST_INV-Z_REPORT_FORMAT.

*     ReportLang
LST_INV-Z_REPORT_LANG = P_LANGU.
LST_FILE_INV-Z_REPORT_LANG = LST_INV-Z_REPORT_LANG.

*     ReportTitle
LST_INV-Z_REPORT_TITLE = P_RTINV.
LST_FILE_INV-Z_REPORT_TITLE = LST_INV-Z_REPORT_TITLE.

*     Delivery Note編集
LST_DN = LST_INV.
MOVE-CORRESPONDING LST_FILE_INV TO LST_FILE_DN.

IF  CB_INV = 'X'
AND LW_NO_DATA_INV IS INITIAL.
APPEND LST_INV TO O_TD_INV.
APPEND LST_FILE_INV TO O_TD_FILE_INV.
ENDIF.
IF  CB_DN = 'X'
AND LW_NO_DATA_DN IS INITIAL.
APPEND LST_DN TO O_TD_DN.
APPEND LST_FILE_DN TO O_TD_FILE_DN.
ENDIF.
ENDLOOP.
ENDIF.

CLEAR: LW_NEW,
LW_NO_DATA,
LW_NO_DATA_INV,
LW_NO_DATA_DN.

* 選択画面のラジオボタン「External Data」が選択されている場合
IF RB_EXT = 'X'.
LOOP AT I_TD_ZTEGSDT010_INV INTO LST_ZTEGSDT010_INV.
AT NEW VBELN.
LW_NEW = 'X'.
CLEAR LW_NO_DATA.
ENDAT.
*     Reprint判断
IF  LW_NEW = 'X'
AND RB_REPNT = 'X'.
READ TABLE I_TD_ZTEGSDT011 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = 'P'
VBELN         = LST_ZTEGSDT010_INV-VBELN
ERDAT         = LST_ZTEGSDT010_INV-ERDAT.
IF SY-SUBRC <> 0.
LW_NO_DATA_INV = 'X'.
ENDIF.
READ TABLE I_TD_ZTEGSDT019 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = 'P'
VBELN         = LST_ZTEGSDT010_INV-VBELN
ERDAT         = LST_ZTEGSDT010_INV-ERDAT.
IF SY-SUBRC <> 0.
LW_NO_DATA_DN = 'X'.
ENDIF.

IF LW_NO_DATA_INV = 'X'
AND LW_NO_DATA_DN = 'X'.
LW_NO_DATA = 'X'.
ENDIF.
ENDIF.
IF LW_NO_DATA = 'X'.
CLEAR LW_NEW.
CONTINUE.
ENDIF.

*     他のデータの読み込み
CLEAR LST_MAKT.
READ TABLE I_TD_MAKT INTO LST_MAKT BINARY SEARCH
WITH KEY MATNR = LST_ZTEGSDT010_INV-MATNR.
CLEAR LST_MARA.
CLEAR LST_MGEF.
READ TABLE I_TD_MARA INTO LST_MARA BINARY SEARCH
WITH KEY MATNR = LST_ZTEGSDT010_INV-MATNR.
IF SY-SUBRC = 0.
READ TABLE I_TD_MGEF INTO LST_MGEF BINARY SEARCH
WITH KEY STOFF = LST_MARA-STOFF.
ENDIF.
CLEAR LST_MARC.
READ TABLE I_TD_MARC INTO LST_MARC BINARY SEARCH
WITH KEY MATNR = LST_ZTEGSDT010_INV-MATNR
WERKS = LST_ZTEGSDT010_INV-WERKS.
CLEAR LST_ZTEGZZM002.
READ TABLE I_TD_ZTEGZZM002 INTO LST_ZTEGZZM002 BINARY SEARCH
WITH KEY WAERS = LST_ZTEGSDT010_INV-WAERK.
CLEAR LST_KNA1.
CLEAR LST_T005X.
READ TABLE I_TD_KNA1 INTO LST_KNA1 BINARY SEARCH
WITH KEY KUNNR = LST_ZTEGSDT010_INV-KUNAG.
IF SY-SUBRC = 0.
READ TABLE I_TD_T005X INTO LST_T005X BINARY SEARCH
WITH KEY LAND = LST_KNA1-LAND1.
ENDIF.

CLEAR: LST_INV,
LST_FILE_INV.

*     OutboundDelivery
LST_INV-VBELN = LST_ZTEGSDT010_INV-VBELN.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_INV-VBELN
IMPORTING
OUTPUT        = LST_FILE_INV-VBELN.

*     Created on
LST_INV-ERDAT = LST_ZTEGSDT010_INV-ERDAT.

*     OutboundDeliveryItem
LST_INV-POSNR = LST_ZTEGSDT010_INV-POSNR.
LST_FILE_INV-POSNR =  LST_INV-POSNR.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_FILE_INV-POSNR
IMPORTING
OUTPUT        = LST_FILE_INV-POSNR.

*     ItemCode
LST_INV-MATNR = LST_ZTEGSDT010_INV-MATNR.
CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
EXPORTING
INPUT         = LST_INV-MATNR
IMPORTING
OUTPUT        = LST_FILE_INV-MATNR.

*     CustomerPONo
LST_INV-BSTKD = LST_ZTEGSDT010_INV-BSTKD.
LST_FILE_INV-BSTKD = LST_INV-BSTKD.

*     SONo
LST_INV-VGBEL = LST_ZTEGSDT010_INV-VBELN.
LST_FILE_INV-VGBEL = LST_FILE_INV-VBELN.

*     SOItem
LST_INV-VGPOS = LST_ZTEGSDT010_INV-POSNR.
LST_FILE_INV-VGPOS = LST_FILE_INV-POSNR.

*     CustomerItemCode
LST_INV-KDMAT = LST_ZTEGSDT010_INV-KDMAT.
LST_FILE_INV-KDMAT = LST_INV-KDMAT.

*     Unit
LST_INV-VRKME = LST_ZTEGSDT010_INV-VRKME.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_INV-VRKME
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_INV-VRKME
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     Quantity
LST_INV-LFIMG = LST_ZTEGSDT010_INV-LFIMG.
WRITE LST_INV-LFIMG TO LW_QUAN UNIT LST_INV-VRKME.
LST_FILE_INV-LFIMG = LW_QUAN.

*     CurrencyPrice
LST_INV-WAERK = LST_ZTEGSDT010_INV-WAERK.

*     Price
IF LST_ZTEGSDT010_INV-KPEIN IS NOT INITIAL.
LST_INV-NETPR = LST_ZTEGSDT010_INV-NETPR
/ LST_ZTEGSDT010_INV-KPEIN.
ENDIF.
WRITE LST_INV-NETPR TO LW_PRICE CURRENCY LST_INV-WAERK.
LST_FILE_INV-NETPR = LW_PRICE.

*     OutputCurrencyPrice
LST_INV-WAERK_O = LST_ZTEGZZM002-Z_WAERS.
LST_FILE_INV-WAERK_O = LST_INV-WAERK_O.

*     CurrencyAmount
LST_INV-WAERS = LST_ZTEGSDT010_INV-WAERK.

*     Amount
IF LST_ZTEGSDT010_INV-KPEIN IS NOT INITIAL.
CATCH SYSTEM-EXCEPTIONS arithmetic_errors = 4.
LST_INV-NETWR = LST_ZTEGSDT010_INV-NETPR
/ LST_ZTEGSDT010_INV-KPEIN
* LST_ZTEGSDT010_INV-LFIMG.
ENDCATCH.
IF SY-SUBRC <> 0.
LST_INV-NETWR = CNS_NETWR_MAX.
ENDIF.
ENDIF.
WRITE LST_INV-NETWR TO LW_AMOUNT CURRENCY LST_INV-WAERS.
LST_FILE_INV-NETWR = LW_AMOUNT.

*     OutputCurrencyAmount
LST_INV-WAERS_O = LST_ZTEGZZM002-Z_WAERS.
LST_FILE_INV-WAERS_O = LST_INV-WAERS_O.

*     Plant
LST_INV-WERKS = LST_ZTEGSDT010_INV-WERKS.

*     SalesOrg
LST_INV-VKORG = LST_ZTEGSDT010_INV-VKORG.

*     SalesChannel
LST_INV-VTWEG = LST_ZTEGSDT010_INV-VTWEG.

*     ShippingPt
LST_INV-VSTEL = LST_ZTEGSDT010_INV-VSTEL.
LST_FILE_INV-VSTEL = LST_INV-VSTEL.

*     Sold-to party
LST_INV-KUNAG = LST_ZTEGSDT010_INV-KUNAG.

*     Ship-to party
LST_INV-KUNNR = LST_ZTEGSDT010_INV-KUNNR.

*     InvoiceNo
LST_INV-Z_INVOICE_NO = LST_ZTEGSDT010_INV-Z_INVOICE_NO.
LST_FILE_INV-Z_INVOICE_NO = LST_INV-Z_INVOICE_NO.

*     InvoiceDate
LST_INV-Z_INVOICE_DATE = LST_ZTEGSDT010_INV-Z_INVOICE_DATE.
WRITE LST_INV-Z_INVOICE_DATE TO LW_DATE.
LST_FILE_INV-Z_INVOICE_DATE = LW_DATE.

*     CustCodeBillTo
LST_INV-Z_CUST_BT = LST_ZTEGSDT010_INV-Z_CUST_BT.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_INV-Z_CUST_BT
IMPORTING
OUTPUT        = LST_FILE_INV-Z_CUST_BT.

*     CustNameBillTo
LST_INV-Z_CUST_NAME_BT = LST_ZTEGSDT010_INV-Z_CUST_NAME_BT.
LST_FILE_INV-Z_CUST_NAME_BT = LST_INV-Z_CUST_NAME_BT.

*     CustAddress1BillTo
LST_INV-Z_ADDRESS1_BT = LST_ZTEGSDT010_INV-Z_ADDRESS1_BT.
LST_FILE_INV-Z_ADDRESS1_BT = LST_INV-Z_ADDRESS1_BT.

*     CustAddress2BillTo
LST_INV-Z_ADDRESS2_BT = LST_ZTEGSDT010_INV-Z_ADDRESS2_BT.
LST_FILE_INV-Z_ADDRESS2_BT = LST_INV-Z_ADDRESS2_BT.

*     CusｔAttnBillTo
LST_INV-Z_ATTN_BT = LST_ZTEGSDT010_INV-Z_ATTN_BT.
LST_FILE_INV-Z_ATTN_BT = LST_INV-Z_ATTN_BT.

*     CustTelBillTo
LST_INV-Z_TEL_BT = LST_ZTEGSDT010_INV-Z_TEL_BT.
LST_FILE_INV-Z_TEL_BT = LST_INV-Z_TEL_BT.

*     CustFaxBillTo
LST_INV-Z_FAX_BT = LST_ZTEGSDT010_INV-Z_FAX_BT.
LST_FILE_INV-Z_FAX_BT = LST_INV-Z_FAX_BT.

*     CustCodeShipTo
LST_INV-Z_CUST_ST = LST_ZTEGSDT010_INV-Z_CUST_ST.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_INV-Z_CUST_ST
IMPORTING
OUTPUT        = LST_FILE_INV-Z_CUST_ST.

*     CustNameShipTo
LST_INV-Z_CUST_NAME_ST = LST_ZTEGSDT010_INV-Z_CUST_NAME_ST.
LST_FILE_INV-Z_CUST_NAME_ST = LST_INV-Z_CUST_NAME_ST.

*     CustAddress1ShipTo
LST_INV-Z_ADDRESS1_ST = LST_ZTEGSDT010_INV-Z_ADDRESS1_ST.
LST_FILE_INV-Z_ADDRESS1_ST = LST_INV-Z_ADDRESS1_ST.

*     CustAddress2ShipTo
LST_INV-Z_ADDRESS2_ST = LST_ZTEGSDT010_INV-Z_ADDRESS2_ST.
LST_FILE_INV-Z_ADDRESS2_ST = LST_INV-Z_ADDRESS2_ST.

*     CusｔAttnShipTo
LST_INV-Z_ATTN_ST = LST_ZTEGSDT010_INV-Z_ATTN_ST.
LST_FILE_INV-Z_ATTN_ST = LST_INV-Z_ATTN_ST.

*     CustTelShipTo
LST_INV-Z_TEL_ST = LST_ZTEGSDT010_INV-Z_TEL_ST.
LST_FILE_INV-Z_TEL_ST = LST_INV-Z_TEL_ST.

*     CustFaxShipTo
LST_INV-Z_FAX_ST = LST_ZTEGSDT010_INV-Z_FAX_ST.
LST_FILE_INV-Z_FAX_ST = LST_INV-Z_FAX_ST.

*     Shipped Per
LST_INV-Z_SHIPPED_PER = LST_ZTEGSDT010_INV-Z_SHIPPED_PER.
LST_FILE_INV-Z_SHIPPED_PER = LST_INV-Z_SHIPPED_PER.

*     On or About
LST_INV-Z_ON_OR_ABOUT = LST_ZTEGSDT010_INV-Z_ON_OR_ABOUT.
WRITE LST_INV-Z_ON_OR_ABOUT TO LW_DATE.
LST_FILE_INV-Z_ON_OR_ABOUT = LW_DATE.

*     From
LST_INV-Z_TRADE_FROM = LST_ZTEGSDT010_INV-Z_TRADE_FROM.
LST_FILE_INV-Z_TRADE_FROM = LST_INV-Z_TRADE_FROM.

*     To
LST_INV-Z_TRADE_TO = LST_ZTEGSDT010_INV-Z_TRADE_TO.
LST_FILE_INV-Z_TRADE_TO = LST_INV-Z_TRADE_TO.

*     Via
LST_INV-Z_TRADE_VIA = LST_ZTEGSDT010_INV-Z_TRADE_VIA.
LST_FILE_INV-Z_TRADE_VIA = LST_INV-Z_TRADE_VIA.

*     Payment
LST_INV-Z_TRADE_PAYMENT = LST_ZTEGSDT010_INV-Z_TRADE_PAYMENT.
LST_FILE_INV-Z_TRADE_PAYMENT = LST_INV-Z_TRADE_PAYMENT.

*     TradeTerm
LST_INV-Z_TRADE_TERM = LST_ZTEGSDT010_INV-Z_TRADE_TERM.
LST_FILE_INV-Z_TRADE_TERM = LST_INV-Z_TRADE_TERM.

*     CaseMark1
LST_INV-Z_CASEMARK1 = LST_ZTEGSDT010_INV-Z_CASEMARK1.
LST_FILE_INV-Z_CASEMARK1 = LST_INV-Z_CASEMARK1.

*     CaseMark2
LST_INV-Z_CASEMARK2 = LST_ZTEGSDT010_INV-Z_CASEMARK2.
LST_FILE_INV-Z_CASEMARK2 = LST_INV-Z_CASEMARK2.

*     CaseMark3
LST_INV-Z_CASEMARK3 = LST_ZTEGSDT010_INV-Z_CASEMARK3.
LST_FILE_INV-Z_CASEMARK3 = LST_INV-Z_CASEMARK3.

*     CaseMark4
LST_INV-Z_CASEMARK4 = LST_ZTEGSDT010_INV-Z_CASEMARK4.
LST_FILE_INV-Z_CASEMARK4 = LST_INV-Z_CASEMARK4.

*     CaseMark5
LST_INV-Z_CASEMARK5 = LST_ZTEGSDT010_INV-Z_CASEMARK5.
LST_FILE_INV-Z_CASEMARK5 = LST_INV-Z_CASEMARK5.

*     Remarks1
LST_INV-Z_INV_REMARKS1 = LST_ZTEGSDT010_INV-Z_INV_REMARKS1.
LST_FILE_INV-Z_INV_REMARKS1 = LST_INV-Z_INV_REMARKS1.

*     Remarks2
LST_INV-Z_INV_REMARKS2 = LST_ZTEGSDT010_INV-Z_INV_REMARKS2.
LST_FILE_INV-Z_INV_REMARKS2 = LST_INV-Z_INV_REMARKS2.

*     Remarks3
LST_INV-Z_INV_REMARKS3 = LST_ZTEGSDT010_INV-Z_INV_REMARKS3.
LST_FILE_INV-Z_INV_REMARKS3 = LST_INV-Z_INV_REMARKS3.

*     Remarks4
LST_INV-Z_INV_REMARKS4 = LST_ZTEGSDT010_INV-Z_INV_REMARKS4.
LST_FILE_INV-Z_INV_REMARKS4 = LST_INV-Z_INV_REMARKS4.

*     Remarks5
LST_INV-Z_INV_REMARKS5 = LST_ZTEGSDT010_INV-Z_INV_REMARKS5.
LST_FILE_INV-Z_INV_REMARKS5 = LST_INV-Z_INV_REMARKS5.

*     Printer/Tray
LST_INV-LNAME = P_PTRAY.
LST_FILE_INV-LNAME = LST_INV-LNAME.

*     CopmanyName
LST_INV-Z_COMP_NAME = P_CNAME.
LST_FILE_INV-Z_COMP_NAME = LST_INV-Z_COMP_NAME.

*     CopmanyAddress1
LST_INV-Z_COMP_ADDRESS1 = P_CADDR1.
LST_FILE_INV-Z_COMP_ADDRESS1 = LST_INV-Z_COMP_ADDRESS1.

*     CopmanyAddress2
LST_INV-Z_COMP_ADDRESS2 = P_CADDR2.
LST_FILE_INV-Z_COMP_ADDRESS2 = LST_INV-Z_COMP_ADDRESS2.

*     CopmanyTel
LST_INV-Z_COMP_TEL = P_CTEL.
LST_FILE_INV-Z_COMP_TEL = LST_INV-Z_COMP_TEL.

*     CopmanyFax
LST_INV-Z_COMP_FAX = P_CFAX.
LST_FILE_INV-Z_COMP_FAX = LST_INV-Z_COMP_FAX.

*     ItemText
LST_INV-MAKTX = LST_MAKT-MAKTX.
LST_FILE_INV-MAKTX = LST_INV-MAKTX.

*     Purpose
REFRESH LTD_LINES.
CLEAR LW_NAME.
LW_NAME+0(4) = LST_ZTEGSDT010_INV-VKORG.
LW_NAME+4(2) = LST_ZTEGSDT010_INV-VTWEG.
LW_NAME+6(10) = LST_ZTEGSDT010_INV-KUNAG.
LW_NAME+16 = LST_ZTEGSDT010_INV-MATNR.
CALL FUNCTION 'READ_TEXT'
EXPORTING
CLIENT                        = SY-MANDT
ID                            = '0004'
LANGUAGE                      = SY-LANGU
NAME                          = LW_NAME
OBJECT                        = 'KNMT'
TABLES
LINES                         = LTD_LINES
EXCEPTIONS
ID                            = 1
LANGUAGE                      = 2
NAME                          = 3
NOT_FOUND                     = 4
OBJECT                        = 5
REFERENCE_CHECK               = 6
WRONG_ACCESS_TO_ARCHIVE       = 7
OTHERS                        = 8.
IF SY-SUBRC <> 0.
*       汎用モジュールにて想定外のエラーが発生しました。
MESSAGE S032(ZMEGSD01) WITH 'READ_TEXT' 'ZMEGSD01 032'
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ELSE.
LOOP AT LTD_LINES INTO LST_LINES.
CONCATENATE LST_INV-Z_PURPOSE
LST_LINES-TDLINE
INTO LST_INV-Z_PURPOSE.
ENDLOOP.
LST_FILE_INV-Z_PURPOSE = LST_INV-Z_PURPOSE.
ENDIF.

*     HSCode
LST_INV-STAWN = LST_MARC-STAWN.
LST_FILE_INV-STAWN = LST_INV-STAWN.

*     Origin
LST_INV-LANDX = LST_MARC-HERKL.
LST_FILE_INV-LANDX = LST_INV-LANDX.

*     DGType
LST_INV-STOFT = LST_MGEF-STOFT.
LST_FILE_INV-STOFT = LST_INV-STOFT.

*     OutputUser
LST_INV-Z_OUTPUT_USERID = SY-UNAME.
LST_FILE_INV-Z_OUTPUT_USERID = LST_INV-Z_OUTPUT_USERID.

*     Dec.pt.Format
IF P_XDEZP IS INITIAL.
LST_INV-XDEZP = LST_T005X-XDEZP.
ELSE.
LST_INV-XDEZP = P_XDEZP.
ENDIF.
LST_FILE_INV-XDEZP = LST_INV-XDEZP.

*     DateFormat
IF P_DATFM IS INITIAL.
LST_INV-DATFM = LST_T005X-DATFM.
ELSE.
LST_INV-DATFM = P_DATFM.
ENDIF.
LST_FILE_INV-DATFM = LST_INV-DATFM.

*     ReportFormat
IF  LST_INV-STAWN IS INITIAL
AND LST_INV-Z_PURPOSE IS INITIAL
AND LST_INV-STOFT IS INITIAL.
LST_INV-Z_REPORT_FORMAT = CNS_RF_SMALL.
ELSE.
LST_INV-Z_REPORT_FORMAT = CNS_RF_LARGE.
ENDIF.
LST_FILE_INV-Z_REPORT_FORMAT = LST_INV-Z_REPORT_FORMAT.

*     ReportLang
LST_INV-Z_REPORT_LANG = P_LANGU.
LST_FILE_INV-Z_REPORT_LANG = LST_INV-Z_REPORT_LANG.

*     Delivery Note編集
LST_DN = LST_INV.
MOVE-CORRESPONDING LST_FILE_INV TO LST_FILE_DN.
CLEAR: LST_DN-NETPR,
LST_FILE_DN-NETPR,
LST_DN-NETWR,
LST_FILE_DN-NETWR.
LST_DN-WAERK = '***'.
LST_DN-WAERK_O = '***'.
LST_FILE_DN-WAERK_O = '***'.
LST_DN-WAERS = '***'.
LST_DN-WAERS_O = '***'.
LST_FILE_DN-WAERS_O = '***'.

IF  CB_INV = 'X'
AND LW_NO_DATA_INV IS INITIAL.

*       ReportTitle
LST_INV-Z_REPORT_TITLE = P_RTINV.
LST_FILE_INV-Z_REPORT_TITLE = LST_INV-Z_REPORT_TITLE.

APPEND LST_INV TO O_TD_INV.
APPEND LST_FILE_INV TO O_TD_FILE_INV.
ENDIF.
IF  CB_DN = 'X'
AND LW_NO_DATA_DN IS INITIAL.

*       ReportTitle
LST_INV-Z_REPORT_TITLE = P_RTDN.
LST_FILE_INV-Z_REPORT_TITLE = LST_INV-Z_REPORT_TITLE.

APPEND LST_DN TO O_TD_DN.
APPEND LST_FILE_DN TO O_TD_FILE_DN.
ENDIF.
ENDLOOP.
ENDIF.

SORT O_TD_INV BY VBELN ASCENDING
ERDAT ASCENDING
POSNR ASCENDING.
SORT O_TD_DN  BY VBELN ASCENDING
ERDAT ASCENDING
POSNR ASCENDING.

ENDFORM.                    " EDIT_INV_DATA
*&---------------------------------------------------------------------*
*&      Form  EDIT_PKG_DATA
*&---------------------------------------------------------------------*
*       Packing Listデータの編集
*----------------------------------------------------------------------*
*      -->I_TD_LIKP_PKG
*      -->I_TD_ZTEGSDT001_PKG
*      -->I_TD_ZTEGSDT010_PKG
*      -->I_TD_ZTEGSDT002
*      -->I_TD_ZTEGSDT013
*      -->I_TD_MAKT
*      -->I_TD_MARA
*      -->I_TD_MGEF
*      -->I_TD_MARC
*      -->I_TD_ZTEGZZM002
*      -->I_TD_KNA1
*      -->I_TD_T005X
*      <--O_TD_PKG
*      <--O_TD_FILE_PKG
*----------------------------------------------------------------------*
FORM EDIT_PKG_DATA  USING I_TD_LIKP_PKG       TYPE TYP_TD_LIKP_PKG
I_TD_ZTEGSDT001_PKG TYPE TYP_TD_ZTEGSDT001_PKG
I_TD_ZTEGSDT010_PKG TYPE TYP_TD_ZTEGSDT010_PKG
I_TD_ZTEGSDT002     TYPE TYP_TD_ZTEGSDT002
I_TD_ZTEGSDT013     TYPE TYP_TD_ZTEGSDT013
I_TD_MAKT           TYPE TYP_TD_MAKT
I_TD_MARA           TYPE TYP_TD_MARA
I_TD_MGEF           TYPE TYP_TD_MGEF
I_TD_MARC           TYPE TYP_TD_MARC
I_TD_ZTEGSDM009     TYPE TYP_TD_ZTEGSDM009
I_TD_KNA1           TYPE TYP_TD_KNA1
I_TD_T005X          TYPE TYP_TD_T005X
CHANGING O_TD_PKG            TYPE TYP_TD_PKG
O_TD_FILE_PKG       TYPE TYP_TD_FILE_PKG.

* 選択画面のチェックボックス「Packing List」がONの場合のみ実行
IF CB_PKG IS INITIAL.
RETURN.
ENDIF.

DATA: LST_LIKP_PKG       TYPE TYP_LIKP_PKG,
LST_ZTEGSDT001_PKG TYPE TYP_ZTEGSDT001_PKG,
LST_ZTEGSDT010_PKG TYPE TYP_ZTEGSDT010_PKG,
LST_ZTEGSDT002     TYPE TYP_ZTEGSDT002,
LST_MAKT           TYPE TYP_MAKT,
LST_MARA           TYPE TYP_MARA,
LST_MGEF           TYPE TYP_MGEF,
LST_MARC           TYPE TYP_MARC,
LST_ZTEGSDM009     TYPE TYP_ZTEGSDM009,
LST_KNA1           TYPE TYP_KNA1,
LST_T005X          TYPE TYP_T005X,
LST_PKG            TYPE TYP_PKG,
LST_FILE_PKG       TYPE ZSEGSD0013,
LW_NEW             TYPE CHAR1,
LW_NEW_POSNR       TYPE CHAR1,
LW_NO_DATA         TYPE CHAR1,
LW_NAME            TYPE THEAD-TDNAME,
LW_QUAN            TYPE CHAR30,
LW_DATE            TYPE CHAR30,
LTD_LINES          TYPE STANDARD TABLE OF TLINE,
LST_LINES          TYPE TLINE.

* 選択画面のラジオボタン「Outbound Delivery」が選択されている場合
IF RB_OUT = 'X'.
LOOP AT I_TD_ZTEGSDT002 INTO LST_ZTEGSDT002.
AT NEW VBELN.
LW_NEW = 'X'.
CLEAR LW_NO_DATA.
ENDAT.
AT NEW POSNR.
LW_NEW_POSNR = 'X'.
ENDAT.

*     メインデータの読み込み
IF LW_NEW = 'X'.
CLEAR LST_ZTEGSDT001_PKG.
READ TABLE I_TD_ZTEGSDT001_PKG INTO LST_ZTEGSDT001_PKG
BINARY SEARCH
WITH KEY VBELN = LST_ZTEGSDT002-VBELN
ERDAT = LST_ZTEGSDT002-ERDAT.
ENDIF.
IF LW_NEW_POSNR = 'X'.
CLEAR LW_NEW_POSNR.
CLEAR LST_LIKP_PKG.
READ TABLE I_TD_LIKP_PKG INTO LST_LIKP_PKG BINARY SEARCH
WITH KEY VBELN = LST_ZTEGSDT002-VBELN
ERDAT = LST_ZTEGSDT002-ERDAT
POSNR = LST_ZTEGSDT002-POSNR.
ENDIF.

*     Reprint判断
IF  LW_NEW = 'X'
AND RB_REPNT = 'X'.
CLEAR LW_NEW.
READ TABLE I_TD_ZTEGSDT013 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = 'P'
VBELN         = LST_LIKP_PKG-VBELN
ERDAT         = LST_LIKP_PKG-ERDAT.
IF SY-SUBRC <> 0.
LW_NO_DATA = 'X'.
ENDIF.
ENDIF.
IF LW_NO_DATA = 'X'.
CLEAR LW_NEW.
CONTINUE.
ENDIF.

*     他のデータの読み込み
CLEAR LST_MAKT.
READ TABLE I_TD_MAKT INTO LST_MAKT BINARY SEARCH
WITH KEY MATNR = LST_LIKP_PKG-MATNR.
CLEAR LST_MARA.
CLEAR LST_MGEF.
READ TABLE I_TD_MARA INTO LST_MARA BINARY SEARCH
WITH KEY MATNR = LST_LIKP_PKG-MATNR.
IF SY-SUBRC = 0.
READ TABLE I_TD_MGEF INTO LST_MGEF BINARY SEARCH
WITH KEY STOFF = LST_MARA-STOFF.
ENDIF.
CLEAR LST_MARC.
READ TABLE I_TD_MARC INTO LST_MARC BINARY SEARCH
WITH KEY MATNR = LST_LIKP_PKG-MATNR
WERKS = LST_LIKP_PKG-WERKS.
CLEAR LST_ZTEGSDM009.
READ TABLE I_TD_ZTEGSDM009 INTO LST_ZTEGSDM009 BINARY SEARCH
WITH KEY Z_TEMPLATE_ID = LST_ZTEGSDT002-Z_DIMENSION.
CLEAR LST_KNA1.
CLEAR LST_T005X.
READ TABLE I_TD_KNA1 INTO LST_KNA1 BINARY SEARCH
WITH KEY KUNNR = LST_LIKP_PKG-KUNAG.
IF SY-SUBRC = 0.
READ TABLE I_TD_T005X INTO LST_T005X BINARY SEARCH
WITH KEY LAND = LST_KNA1-LAND1.
ENDIF.

CLEAR: LST_PKG,
LST_FILE_PKG.

*     OutboundDelivery
LST_PKG-VBELN = LST_LIKP_PKG-VBELN.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_PKG-VBELN
IMPORTING
OUTPUT        = LST_FILE_PKG-VBELN.

*     Created on
LST_PKG-ERDAT = LST_LIKP_PKG-ERDAT.

*     OutboundDeliveryItem
LST_PKG-POSNR = LST_LIKP_PKG-POSNR.
LST_FILE_PKG-POSNR =  LST_PKG-POSNR.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_FILE_PKG-POSNR
IMPORTING
OUTPUT        = LST_FILE_PKG-POSNR.

*     OutboundDeliveryPacking
LST_PKG-Z_PKG_POSNR_SUB = LST_ZTEGSDT002-Z_PKG_POSNR_SUB.
LST_FILE_PKG-Z_PKG_POSNR_SUB =  LST_PKG-Z_PKG_POSNR_SUB.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_FILE_PKG-Z_PKG_POSNR_SUB
IMPORTING
OUTPUT        = LST_FILE_PKG-Z_PKG_POSNR_SUB.

*     ItemCode
LST_PKG-MATNR = LST_LIKP_PKG-MATNR.
CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
EXPORTING
INPUT         = LST_PKG-MATNR
IMPORTING
OUTPUT        = LST_FILE_PKG-MATNR.

*     CustomerPONo
LST_PKG-BSTKD = LST_LIKP_PKG-BSTKD.
LST_FILE_PKG-BSTKD = LST_PKG-BSTKD.

*     SONo
LST_PKG-VGBEL = LST_LIKP_PKG-VGBEL.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_PKG-VGBEL
IMPORTING
OUTPUT        = LST_FILE_PKG-VGBEL.

*     SOItem
LST_PKG-VGPOS = LST_LIKP_PKG-VGPOS.
LST_FILE_PKG-VGPOS = LST_PKG-VGPOS.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_FILE_PKG-VGPOS
IMPORTING
OUTPUT        = LST_FILE_PKG-VGPOS.

*     CustomerItemCode
LST_PKG-KDMAT = LST_LIKP_PKG-KDMAT.
LST_FILE_PKG-KDMAT = LST_PKG-KDMAT.

*     Plant
LST_PKG-WERKS = LST_LIKP_PKG-WERKS.

*     SalesOrg
LST_PKG-VKORG = LST_LIKP_PKG-VKORG.

*     SalesChannel
LST_PKG-VTWEG = LST_LIKP_PKG-VTWEG.

*     ShippingPt
LST_PKG-VSTEL = LST_LIKP_PKG-VSTEL.
LST_FILE_PKG-VSTEL = LST_PKG-VSTEL.

*     Sold-to party
LST_PKG-KUNAG = LST_LIKP_PKG-KUNAG.

*     Ship-to party
LST_PKG-KUNNR = LST_LIKP_PKG-KUNNR.

*     InvoiceNo
LST_PKG-Z_INVOICE_NO = LST_ZTEGSDT001_PKG-Z_INVOICE_NO.
LST_FILE_PKG-Z_INVOICE_NO = LST_PKG-Z_INVOICE_NO.

*     InvoiceDate
LST_PKG-Z_INVOICE_DATE = LST_ZTEGSDT001_PKG-Z_INVOICE_DATE.
WRITE LST_PKG-Z_INVOICE_DATE TO LW_DATE.
LST_FILE_PKG-Z_INVOICE_DATE = LW_DATE.

*     CustCodeBillTo
LST_PKG-Z_CUST_BT = LST_ZTEGSDT001_PKG-Z_CUST_BT.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_PKG-Z_CUST_BT
IMPORTING
OUTPUT        = LST_FILE_PKG-Z_CUST_BT.

*     CustNameBillTo
LST_PKG-Z_CUST_NAME_BT = LST_ZTEGSDT001_PKG-Z_CUST_NAME_BT.
LST_FILE_PKG-Z_CUST_NAME_BT = LST_PKG-Z_CUST_NAME_BT.

*     CustAddress1BillTo
LST_PKG-Z_ADDRESS1_BT = LST_ZTEGSDT001_PKG-Z_ADDRESS1_BT.
LST_FILE_PKG-Z_ADDRESS1_BT = LST_PKG-Z_ADDRESS1_BT.

*     CustAddress2BillTo
LST_PKG-Z_ADDRESS2_BT = LST_ZTEGSDT001_PKG-Z_ADDRESS2_BT.
LST_FILE_PKG-Z_ADDRESS2_BT = LST_PKG-Z_ADDRESS2_BT.

*     CusｔAttnBillTo
LST_PKG-Z_ATTN_BT = LST_ZTEGSDT001_PKG-Z_ATTN_BT.
LST_FILE_PKG-Z_ATTN_BT = LST_PKG-Z_ATTN_BT.

*     CustTelBillTo
LST_PKG-Z_TEL_BT = LST_ZTEGSDT001_PKG-Z_TEL_BT.
LST_FILE_PKG-Z_TEL_BT = LST_PKG-Z_TEL_BT.

*     CustFaxBillTo
LST_PKG-Z_FAX_BT = LST_ZTEGSDT001_PKG-Z_FAX_BT.
LST_FILE_PKG-Z_FAX_BT = LST_PKG-Z_FAX_BT.

*     CustCodeShipTo
LST_PKG-Z_CUST_ST = LST_ZTEGSDT001_PKG-Z_CUST_ST.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_PKG-Z_CUST_ST
IMPORTING
OUTPUT        = LST_FILE_PKG-Z_CUST_ST.

*     CustNameShipTo
LST_PKG-Z_CUST_NAME_ST = LST_ZTEGSDT001_PKG-Z_CUST_NAME_ST.
LST_FILE_PKG-Z_CUST_NAME_ST = LST_PKG-Z_CUST_NAME_ST.

*     CustAddress1ShipTo
LST_PKG-Z_ADDRESS1_ST = LST_ZTEGSDT001_PKG-Z_ADDRESS1_ST.
LST_FILE_PKG-Z_ADDRESS1_ST = LST_PKG-Z_ADDRESS1_ST.

*     CustAddress2ShipTo
LST_PKG-Z_ADDRESS2_ST = LST_ZTEGSDT001_PKG-Z_ADDRESS2_ST.
LST_FILE_PKG-Z_ADDRESS2_ST = LST_PKG-Z_ADDRESS2_ST.

*     CusｔAttnShipTo
LST_PKG-Z_ATTN_ST = LST_ZTEGSDT001_PKG-Z_ATTN_ST.
LST_FILE_PKG-Z_ATTN_ST = LST_PKG-Z_ATTN_ST.

*     CustTelShipTo
LST_PKG-Z_TEL_ST = LST_ZTEGSDT001_PKG-Z_TEL_ST.
LST_FILE_PKG-Z_TEL_ST = LST_PKG-Z_TEL_ST.

*     CustFaxShipTo
LST_PKG-Z_FAX_ST = LST_ZTEGSDT001_PKG-Z_FAX_ST.
LST_FILE_PKG-Z_FAX_ST = LST_PKG-Z_FAX_ST.

*     Shipped Per
LST_PKG-Z_SHIPPED_PER = LST_ZTEGSDT001_PKG-Z_SHIPPED_PER.
LST_FILE_PKG-Z_SHIPPED_PER = LST_PKG-Z_SHIPPED_PER.

*     On or About
LST_PKG-Z_ON_OR_ABOUT = LST_ZTEGSDT001_PKG-Z_ON_OR_ABOUT.
WRITE LST_PKG-Z_ON_OR_ABOUT TO LW_DATE.
LST_FILE_PKG-Z_ON_OR_ABOUT = LW_DATE.

*     From
LST_PKG-Z_TRADE_FROM = LST_ZTEGSDT001_PKG-Z_TRADE_FROM.
LST_FILE_PKG-Z_TRADE_FROM = LST_PKG-Z_TRADE_FROM.

*     To
LST_PKG-Z_TRADE_TO = LST_ZTEGSDT001_PKG-Z_TRADE_TO.
LST_FILE_PKG-Z_TRADE_TO = LST_PKG-Z_TRADE_TO.

*     Via
LST_PKG-Z_TRADE_VIA = LST_ZTEGSDT001_PKG-Z_TRADE_VIA.
LST_FILE_PKG-Z_TRADE_VIA = LST_PKG-Z_TRADE_VIA.

*     Payment
LST_PKG-Z_TRADE_PAYMENT = LST_ZTEGSDT001_PKG-Z_TRADE_PAYMENT.
LST_FILE_PKG-Z_TRADE_PAYMENT = LST_PKG-Z_TRADE_PAYMENT.

*     TradeTerm
LST_PKG-Z_TRADE_TERM = LST_ZTEGSDT001_PKG-Z_TRADE_TERM.
LST_FILE_PKG-Z_TRADE_TERM = LST_PKG-Z_TRADE_TERM.

*     CaseMark1
LST_PKG-Z_CASEMARK1 = LST_ZTEGSDT001_PKG-Z_CASEMARK1.
LST_FILE_PKG-Z_CASEMARK1 = LST_PKG-Z_CASEMARK1.

*     CaseMark2
LST_PKG-Z_CASEMARK2 = LST_ZTEGSDT001_PKG-Z_CASEMARK2.
LST_FILE_PKG-Z_CASEMARK2 = LST_PKG-Z_CASEMARK2.

*     CaseMark3
LST_PKG-Z_CASEMARK3 = LST_ZTEGSDT001_PKG-Z_CASEMARK3.
LST_FILE_PKG-Z_CASEMARK3 = LST_PKG-Z_CASEMARK3.

*     CaseMark4
LST_PKG-Z_CASEMARK4 = LST_ZTEGSDT001_PKG-Z_CASEMARK4.
LST_FILE_PKG-Z_CASEMARK4 = LST_PKG-Z_CASEMARK4.

*     CaseMark5
LST_PKG-Z_CASEMARK5 = LST_ZTEGSDT001_PKG-Z_CASEMARK5.
LST_FILE_PKG-Z_CASEMARK5 = LST_PKG-Z_CASEMARK5.

*     Remarks1
LST_PKG-Z_INV_REMARKS1 = LST_ZTEGSDT001_PKG-Z_INV_REMARKS1.
LST_FILE_PKG-Z_INV_REMARKS1 = LST_PKG-Z_INV_REMARKS1.

*     Remarks2
LST_PKG-Z_INV_REMARKS2 = LST_ZTEGSDT001_PKG-Z_INV_REMARKS2.
LST_FILE_PKG-Z_INV_REMARKS2 = LST_PKG-Z_INV_REMARKS2.

*     Remarks3
LST_PKG-Z_INV_REMARKS3 = LST_ZTEGSDT001_PKG-Z_INV_REMARKS3.
LST_FILE_PKG-Z_INV_REMARKS3 = LST_PKG-Z_INV_REMARKS3.

*     Remarks4
LST_PKG-Z_INV_REMARKS4 = LST_ZTEGSDT001_PKG-Z_INV_REMARKS4.
LST_FILE_PKG-Z_INV_REMARKS4 = LST_PKG-Z_INV_REMARKS4.

*     Remarks5
LST_PKG-Z_INV_REMARKS5 = LST_ZTEGSDT001_PKG-Z_INV_REMARKS5.
LST_FILE_PKG-Z_INV_REMARKS5 = LST_PKG-Z_INV_REMARKS5.

*     CaseMarkNoFrom
LST_PKG-Z_CASENO_FROM = LST_ZTEGSDT002-Z_CASENO_FROM.
LST_FILE_PKG-Z_CASENO_FROM = LST_PKG-Z_CASENO_FROM.

*     CaseMarkNoTo
LST_PKG-Z_CASENO_TO = LST_ZTEGSDT002-Z_CASENO_TO.
LST_FILE_PKG-Z_CASENO_TO = LST_PKG-Z_CASENO_TO.

*     CaseMarkCount
LST_PKG-Z_CASE_COUNT = LST_ZTEGSDT002-Z_CASE_COUNT.
LST_FILE_PKG-Z_CASE_COUNT = LST_PKG-Z_CASE_COUNT.

*     CaseUnit
LST_PKG-Z_MEINS_PACK = LST_ZTEGSDT002-Z_MEINS_PACK.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_PKG-Z_MEINS_PACK
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_PKG-Z_MEINS_PACK
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     CaseMarkMix
LST_PKG-Z_CASE_MIX = LST_ZTEGSDT002-Z_CASE_MIX.
LST_FILE_PKG-Z_CASE_MIX = LST_PKG-Z_CASE_MIX.

*     Unit
LST_PKG-Z_VRKME = LST_ZTEGSDT002-Z_VRKME.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_PKG-Z_VRKME
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_PKG-Z_VRKME
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     QtyPerCase
LST_PKG-Z_LFIMG_UNIT = LST_ZTEGSDT002-Z_LFIMG_UNIT.
WRITE LST_PKG-Z_LFIMG_UNIT TO LW_QUAN
UNIT LST_PKG-Z_VRKME.
LST_FILE_PKG-Z_LFIMG_UNIT = LW_QUAN.

*     Quantity
LST_PKG-Z_LFIMG = LST_ZTEGSDT002-Z_LFIMG.
WRITE LST_PKG-Z_LFIMG TO LW_QUAN
UNIT LST_PKG-Z_VRKME.
LST_FILE_PKG-Z_LFIMG = LW_QUAN.

*     NetWeightUnit
LST_PKG-Z_GEWEI_NW = LST_ZTEGSDT002-Z_GEWEI_NW.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_PKG-Z_GEWEI_NW
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_PKG-Z_GEWEI_NW
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     NetWeightPerCase
LST_PKG-Z_NETWEIGHT_UNIT = LST_ZTEGSDT002-Z_NETWEIGHT_UNIT.
WRITE LST_PKG-Z_NETWEIGHT_UNIT TO LW_QUAN
UNIT LST_PKG-Z_GEWEI_NW.
LST_FILE_PKG-Z_NETWEIGHT_UNIT = LW_QUAN.

*     NetWeight
LST_PKG-Z_NETWEIGHT = LST_ZTEGSDT002-Z_NETWEIGHT.
WRITE LST_PKG-Z_NETWEIGHT TO LW_QUAN
UNIT LST_PKG-Z_GEWEI_NW.
LST_FILE_PKG-Z_NETWEIGHT = LW_QUAN.

*     GrossWeightUnit
LST_PKG-Z_GEWEI_GW = LST_ZTEGSDT002-Z_GEWEI_GW.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_PKG-Z_GEWEI_GW
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_PKG-Z_GEWEI_GW
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     GrossWeightPerCase
LST_PKG-Z_GRSWEIGHT_UNIT = LST_ZTEGSDT002-Z_GRSWEIGHT_UNIT.
WRITE LST_PKG-Z_GRSWEIGHT_UNIT TO LW_QUAN
UNIT LST_PKG-Z_GEWEI_GW.
LST_FILE_PKG-Z_GRSWEIGHT_UNIT = LW_QUAN.

*     GrossWeight
LST_PKG-Z_GRSWEIGHT = LST_ZTEGSDT002-Z_GRSWEIGHT.
WRITE LST_PKG-Z_GRSWEIGHT TO LW_QUAN
UNIT LST_PKG-Z_GEWEI_GW.
LST_FILE_PKG-Z_GRSWEIGHT = LW_QUAN.

*     MeasuretUnit
LST_PKG-Z_VOLEH = LST_ZTEGSDT002-Z_VOLEH.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_PKG-Z_VOLEH
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_PKG-Z_VOLEH
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     MeasurePerCase
LST_PKG-Z_VOLUM_UNIT = LST_ZTEGSDT002-Z_VOLUM_UNIT.
WRITE LST_PKG-Z_VOLUM_UNIT TO LW_QUAN
UNIT LST_PKG-Z_VOLEH.
LST_FILE_PKG-Z_VOLUM_UNIT = LW_QUAN.

*     Measure
LST_PKG-Z_VOLUM = LST_ZTEGSDT002-Z_VOLUM.
WRITE LST_PKG-Z_VOLUM TO LW_QUAN
UNIT LST_PKG-Z_VOLEH.
LST_FILE_PKG-Z_VOLUM = LW_QUAN.

*     PackingRemarks
LST_PKG-Z_PKG_REMARKS = LST_ZTEGSDT002-Z_PKG_REMARKS.
LST_FILE_PKG-Z_PKG_REMARKS = LST_PKG-Z_PKG_REMARKS.

*     Length(cm)
LST_PKG-Z_LENGTH = LST_ZTEGSDM009-Z_LENGTH.
LST_FILE_PKG-Z_LENGTH = LST_PKG-Z_LENGTH.

*     Width(cm)
LST_PKG-Z_WIDTH = LST_ZTEGSDM009-Z_WIDTH.
LST_FILE_PKG-Z_WIDTH = LST_PKG-Z_WIDTH.

*     Height(cm)
LST_PKG-Z_HEIGHT = LST_ZTEGSDM009-Z_HEIGHT.
LST_FILE_PKG-Z_HEIGHT = LST_PKG-Z_HEIGHT.

*     Printer/Tray
LST_PKG-LNAME = P_PTRAY.
LST_FILE_PKG-LNAME = LST_PKG-LNAME.

*     CopmanyName
LST_PKG-Z_COMP_NAME = P_CNAME.
LST_FILE_PKG-Z_COMP_NAME = LST_PKG-Z_COMP_NAME.

*     CopmanyAddress1
LST_PKG-Z_COMP_ADDRESS1 = P_CADDR1.
LST_FILE_PKG-Z_COMP_ADDRESS1 = LST_PKG-Z_COMP_ADDRESS1.

*     CopmanyAddress2
LST_PKG-Z_COMP_ADDRESS2 = P_CADDR2.
LST_FILE_PKG-Z_COMP_ADDRESS2 = LST_PKG-Z_COMP_ADDRESS2.

*     CopmanyTel
LST_PKG-Z_COMP_TEL = P_CTEL.
LST_FILE_PKG-Z_COMP_TEL = LST_PKG-Z_COMP_TEL.

*     CopmanyFax
LST_PKG-Z_COMP_FAX = P_CFAX.
LST_FILE_PKG-Z_COMP_FAX = LST_PKG-Z_COMP_FAX.

*     ItemText
LST_PKG-MAKTX = LST_MAKT-MAKTX.
LST_FILE_PKG-MAKTX = LST_PKG-MAKTX.

*     Purpose
REFRESH LTD_LINES.
CLEAR LW_NAME.
LW_NAME+0(4) = LST_LIKP_PKG-VKORG.
LW_NAME+4(2) = LST_LIKP_PKG-VTWEG.
LW_NAME+6(10) = LST_LIKP_PKG-KUNAG.
LW_NAME+16 = LST_LIKP_PKG-MATNR.
CALL FUNCTION 'READ_TEXT'
EXPORTING
CLIENT                        = SY-MANDT
ID                            = '0004'
LANGUAGE                      = SY-LANGU
NAME                          = LW_NAME
OBJECT                        = 'KNMT'
TABLES
LINES                         = LTD_LINES
EXCEPTIONS
ID                            = 1
LANGUAGE                      = 2
NAME                          = 3
NOT_FOUND                     = 4
OBJECT                        = 5
REFERENCE_CHECK               = 6
WRONG_ACCESS_TO_ARCHIVE       = 7
OTHERS                        = 8.
IF SY-SUBRC <> 0.
*       汎用モジュールにて想定外のエラーが発生しました。
MESSAGE S032(ZMEGSD01) WITH 'READ_TEXT' 'ZMEGSD01 032'
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ELSE.
LOOP AT LTD_LINES INTO LST_LINES.
CONCATENATE LST_PKG-Z_PURPOSE
LST_LINES-TDLINE
INTO LST_PKG-Z_PURPOSE.
ENDLOOP.
LST_FILE_PKG-Z_PURPOSE = LST_PKG-Z_PURPOSE.
ENDIF.

*     HSCode
LST_PKG-STAWN = LST_MARC-STAWN.
LST_FILE_PKG-STAWN = LST_PKG-STAWN.

*     Origin
LST_PKG-LANDX = LST_MARC-HERKL.
LST_FILE_PKG-LANDX = LST_PKG-LANDX.

*     DGType
LST_PKG-STOFT = LST_MGEF-STOFT.
LST_FILE_PKG-STOFT = LST_PKG-STOFT.

*     OutputUser
LST_PKG-Z_OUTPUT_USERID = SY-UNAME.
LST_FILE_PKG-Z_OUTPUT_USERID = LST_PKG-Z_OUTPUT_USERID.

*     Dec.pt.Format
IF P_XDEZP IS INITIAL.
LST_PKG-XDEZP = LST_T005X-XDEZP.
ELSE.
LST_PKG-XDEZP = P_XDEZP.
ENDIF.
LST_FILE_PKG-XDEZP = LST_PKG-XDEZP.

*     DateFormat
IF P_DATFM IS INITIAL.
LST_PKG-DATFM = LST_T005X-DATFM.
ELSE.
LST_PKG-DATFM = P_DATFM.
ENDIF.
LST_FILE_PKG-DATFM = LST_PKG-DATFM.

*     ReportFormat
IF  LST_PKG-STAWN IS INITIAL
AND LST_PKG-Z_PURPOSE IS INITIAL
AND LST_PKG-STOFT IS INITIAL
AND LST_PKG-Z_PKG_REMARKS IS INITIAL.
LST_PKG-Z_REPORT_FORMAT = CNS_RF_SMALL.
ELSE.
LST_PKG-Z_REPORT_FORMAT = CNS_RF_LARGE.
ENDIF.
LST_FILE_PKG-Z_REPORT_FORMAT = LST_PKG-Z_REPORT_FORMAT.

*     ReportLang
LST_PKG-Z_REPORT_LANG = P_LANGU.
LST_FILE_PKG-Z_REPORT_LANG = LST_PKG-Z_REPORT_LANG.

*     ReportTitle
LST_PKG-Z_REPORT_TITLE = P_RTPKG.
LST_FILE_PKG-Z_REPORT_TITLE = LST_PKG-Z_REPORT_TITLE.

APPEND LST_PKG TO O_TD_PKG.
APPEND LST_FILE_PKG TO O_TD_FILE_PKG.
ENDLOOP.
ENDIF.
CLEAR: LW_NEW,
LW_NEW_POSNR,
LW_NO_DATA.

* 選択画面のラジオボタン「External Data」が選択されている場合
IF RB_EXT = 'X'.
LOOP AT I_TD_ZTEGSDT002 INTO LST_ZTEGSDT002.
AT NEW VBELN.
LW_NEW = 'X'.
CLEAR LW_NO_DATA.
ENDAT.
AT NEW POSNR.
LW_NEW_POSNR = 'X'.
ENDAT.

*     メインデータの読み込み
IF LW_NEW_POSNR = 'X'.
CLEAR LW_NEW_POSNR.
CLEAR LST_ZTEGSDT010_PKG.
READ TABLE I_TD_ZTEGSDT010_PKG INTO LST_ZTEGSDT010_PKG
BINARY SEARCH WITH KEY VBELN = LST_ZTEGSDT002-VBELN
ERDAT = LST_ZTEGSDT002-ERDAT
POSNR = LST_ZTEGSDT002-POSNR.
ENDIF.

*     Reprint判断
IF  LW_NEW = 'X'
AND RB_REPNT = 'X'.
CLEAR LW_NEW.
READ TABLE I_TD_ZTEGSDT013 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = 'P'
VBELN         = LST_ZTEGSDT010_PKG-VBELN
ERDAT         = LST_ZTEGSDT010_PKG-ERDAT.
IF SY-SUBRC <> 0.
LW_NO_DATA = 'X'.
ENDIF.
ENDIF.
IF LW_NO_DATA = 'X'.
CLEAR LW_NEW.
CONTINUE.
ENDIF.

*     他のデータの読み込み
CLEAR LST_MAKT.
READ TABLE I_TD_MAKT INTO LST_MAKT BINARY SEARCH
WITH KEY MATNR = LST_ZTEGSDT010_PKG-MATNR.
CLEAR LST_MARA.
CLEAR LST_MGEF.
READ TABLE I_TD_MARA INTO LST_MARA BINARY SEARCH
WITH KEY MATNR = LST_ZTEGSDT010_PKG-MATNR.
IF SY-SUBRC = 0.
READ TABLE I_TD_MGEF INTO LST_MGEF BINARY SEARCH
WITH KEY STOFF = LST_MARA-STOFF.
ENDIF.
CLEAR LST_MARC.
READ TABLE I_TD_MARC INTO LST_MARC BINARY SEARCH
WITH KEY MATNR = LST_ZTEGSDT010_PKG-MATNR
WERKS = LST_ZTEGSDT010_PKG-WERKS.
CLEAR LST_ZTEGSDM009.
READ TABLE I_TD_ZTEGSDM009 INTO LST_ZTEGSDM009 BINARY SEARCH
WITH KEY Z_TEMPLATE_ID = LST_ZTEGSDT002-Z_DIMENSION.
CLEAR LST_KNA1.
CLEAR LST_T005X.
READ TABLE I_TD_KNA1 INTO LST_KNA1 BINARY SEARCH
WITH KEY KUNNR = LST_ZTEGSDT010_PKG-KUNAG.
IF SY-SUBRC = 0.
READ TABLE I_TD_T005X INTO LST_T005X BINARY SEARCH
WITH KEY LAND = LST_KNA1-LAND1.
ENDIF.

CLEAR: LST_PKG,
LST_FILE_PKG.

*     OutboundDelivery
LST_PKG-VBELN = LST_ZTEGSDT010_PKG-VBELN.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_PKG-VBELN
IMPORTING
OUTPUT        = LST_FILE_PKG-VBELN.

*     Created on
LST_PKG-ERDAT = LST_ZTEGSDT010_PKG-ERDAT.

*     OutboundDeliveryItem
LST_PKG-POSNR = LST_ZTEGSDT010_PKG-POSNR.
LST_FILE_PKG-POSNR =  LST_PKG-POSNR.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_FILE_PKG-POSNR
IMPORTING
OUTPUT        = LST_FILE_PKG-POSNR.

*     OutboundDeliveryPacking
LST_PKG-Z_PKG_POSNR_SUB = LST_ZTEGSDT002-Z_PKG_POSNR_SUB.
LST_FILE_PKG-Z_PKG_POSNR_SUB =  LST_PKG-Z_PKG_POSNR_SUB.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_FILE_PKG-Z_PKG_POSNR_SUB
IMPORTING
OUTPUT        = LST_FILE_PKG-Z_PKG_POSNR_SUB.

*     ItemCode
LST_PKG-MATNR = LST_ZTEGSDT010_PKG-MATNR.
CALL FUNCTION 'CONVERSION_EXIT_MATN1_OUTPUT'
EXPORTING
INPUT         = LST_PKG-MATNR
IMPORTING
OUTPUT        = LST_FILE_PKG-MATNR.

*     CustomerPONo
LST_PKG-BSTKD = LST_ZTEGSDT010_PKG-BSTKD.
LST_FILE_PKG-BSTKD = LST_PKG-BSTKD.

*     SONo
LST_PKG-VGBEL = LST_ZTEGSDT010_PKG-VBELN.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_PKG-VGBEL
IMPORTING
OUTPUT        = LST_FILE_PKG-VGBEL.

*     SOItem
LST_PKG-VGPOS = LST_ZTEGSDT010_PKG-POSNR.
LST_FILE_PKG-VGPOS = LST_PKG-VGPOS.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_FILE_PKG-VGPOS
IMPORTING
OUTPUT        = LST_FILE_PKG-VGPOS.

*     CustomerItemCode
LST_PKG-KDMAT = LST_ZTEGSDT010_PKG-KDMAT.
LST_FILE_PKG-KDMAT = LST_PKG-KDMAT.

*     Plant
LST_PKG-WERKS = LST_ZTEGSDT010_PKG-WERKS.

*     SalesOrg
LST_PKG-VKORG = LST_ZTEGSDT010_PKG-VKORG.

*     SalesChannel
LST_PKG-VTWEG = LST_ZTEGSDT010_PKG-VTWEG.

*     ShippingPt
LST_PKG-VSTEL = LST_ZTEGSDT010_PKG-VSTEL.
LST_FILE_PKG-VSTEL = LST_PKG-VSTEL.

*     Sold-to party
LST_PKG-KUNAG = LST_ZTEGSDT010_PKG-KUNAG.

*     Ship-to party
LST_PKG-KUNNR = LST_ZTEGSDT010_PKG-KUNNR.

*     InvoiceNo
LST_PKG-Z_INVOICE_NO = LST_ZTEGSDT010_PKG-Z_INVOICE_NO.
LST_FILE_PKG-Z_INVOICE_NO = LST_PKG-Z_INVOICE_NO.

*     InvoiceDate
LST_PKG-Z_INVOICE_DATE = LST_ZTEGSDT010_PKG-Z_INVOICE_DATE.
WRITE LST_PKG-Z_INVOICE_DATE TO LW_DATE.
LST_FILE_PKG-Z_INVOICE_DATE = LW_DATE.

*     CustCodeBillTo
LST_PKG-Z_CUST_BT = LST_ZTEGSDT010_PKG-Z_CUST_BT.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_PKG-Z_CUST_BT
IMPORTING
OUTPUT        = LST_FILE_PKG-Z_CUST_BT.

*     CustNameBillTo
LST_PKG-Z_CUST_NAME_BT = LST_ZTEGSDT010_PKG-Z_CUST_NAME_BT.
LST_FILE_PKG-Z_CUST_NAME_BT = LST_PKG-Z_CUST_NAME_BT.

*     CustAddress1BillTo
LST_PKG-Z_ADDRESS1_BT = LST_ZTEGSDT010_PKG-Z_ADDRESS1_BT.
LST_FILE_PKG-Z_ADDRESS1_BT = LST_PKG-Z_ADDRESS1_BT.

*     CustAddress2BillTo
LST_PKG-Z_ADDRESS2_BT = LST_ZTEGSDT010_PKG-Z_ADDRESS2_BT.
LST_FILE_PKG-Z_ADDRESS2_BT = LST_PKG-Z_ADDRESS2_BT.

*     CusｔAttnBillTo
LST_PKG-Z_ATTN_BT = LST_ZTEGSDT010_PKG-Z_ATTN_BT.
LST_FILE_PKG-Z_ATTN_BT = LST_PKG-Z_ATTN_BT.

*     CustTelBillTo
LST_PKG-Z_TEL_BT = LST_ZTEGSDT010_PKG-Z_TEL_BT.
LST_FILE_PKG-Z_TEL_BT = LST_PKG-Z_TEL_BT.

*     CustFaxBillTo
LST_PKG-Z_FAX_BT = LST_ZTEGSDT010_PKG-Z_FAX_BT.
LST_FILE_PKG-Z_FAX_BT = LST_PKG-Z_FAX_BT.

*     CustCodeShipTo
LST_PKG-Z_CUST_ST = LST_ZTEGSDT010_PKG-Z_CUST_ST.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = LST_PKG-Z_CUST_ST
IMPORTING
OUTPUT        = LST_FILE_PKG-Z_CUST_ST.

*     CustNameShipTo
LST_PKG-Z_CUST_NAME_ST = LST_ZTEGSDT010_PKG-Z_CUST_NAME_ST.
LST_FILE_PKG-Z_CUST_NAME_ST = LST_PKG-Z_CUST_NAME_ST.

*     CustAddress1ShipTo
LST_PKG-Z_ADDRESS1_ST = LST_ZTEGSDT010_PKG-Z_ADDRESS1_ST.
LST_FILE_PKG-Z_ADDRESS1_ST = LST_PKG-Z_ADDRESS1_ST.

*     CustAddress2ShipTo
LST_PKG-Z_ADDRESS2_ST = LST_ZTEGSDT010_PKG-Z_ADDRESS2_ST.
LST_FILE_PKG-Z_ADDRESS2_ST = LST_PKG-Z_ADDRESS2_ST.

*     CusｔAttnShipTo
LST_PKG-Z_ATTN_ST = LST_ZTEGSDT010_PKG-Z_ATTN_ST.
LST_FILE_PKG-Z_ATTN_ST = LST_PKG-Z_ATTN_ST.

*     CustTelShipTo
LST_PKG-Z_TEL_ST = LST_ZTEGSDT010_PKG-Z_TEL_ST.
LST_FILE_PKG-Z_TEL_ST = LST_PKG-Z_TEL_ST.

*     CustFaxShipTo
LST_PKG-Z_FAX_ST = LST_ZTEGSDT010_PKG-Z_FAX_ST.
LST_FILE_PKG-Z_FAX_ST = LST_PKG-Z_FAX_ST.

*     Shipped Per
LST_PKG-Z_SHIPPED_PER = LST_ZTEGSDT010_PKG-Z_SHIPPED_PER.
LST_FILE_PKG-Z_SHIPPED_PER = LST_PKG-Z_SHIPPED_PER.

*     On or About
LST_PKG-Z_ON_OR_ABOUT = LST_ZTEGSDT010_PKG-Z_ON_OR_ABOUT.
WRITE LST_PKG-Z_ON_OR_ABOUT TO LW_DATE.
LST_FILE_PKG-Z_ON_OR_ABOUT = LW_DATE.

*     From
LST_PKG-Z_TRADE_FROM = LST_ZTEGSDT010_PKG-Z_TRADE_FROM.
LST_FILE_PKG-Z_TRADE_FROM = LST_PKG-Z_TRADE_FROM.

*     To
LST_PKG-Z_TRADE_TO = LST_ZTEGSDT010_PKG-Z_TRADE_TO.
LST_FILE_PKG-Z_TRADE_TO = LST_PKG-Z_TRADE_TO.

*     Via
LST_PKG-Z_TRADE_VIA = LST_ZTEGSDT010_PKG-Z_TRADE_VIA.
LST_FILE_PKG-Z_TRADE_VIA = LST_PKG-Z_TRADE_VIA.

*     Payment
LST_PKG-Z_TRADE_PAYMENT = LST_ZTEGSDT010_PKG-Z_TRADE_PAYMENT.
LST_FILE_PKG-Z_TRADE_PAYMENT = LST_PKG-Z_TRADE_PAYMENT.

*     TradeTerm
LST_PKG-Z_TRADE_TERM = LST_ZTEGSDT010_PKG-Z_TRADE_TERM.
LST_FILE_PKG-Z_TRADE_TERM = LST_PKG-Z_TRADE_TERM.

*     CaseMark1
LST_PKG-Z_CASEMARK1 = LST_ZTEGSDT010_PKG-Z_CASEMARK1.
LST_FILE_PKG-Z_CASEMARK1 = LST_PKG-Z_CASEMARK1.

*     CaseMark2
LST_PKG-Z_CASEMARK2 = LST_ZTEGSDT010_PKG-Z_CASEMARK2.
LST_FILE_PKG-Z_CASEMARK2 = LST_PKG-Z_CASEMARK2.

*     CaseMark3
LST_PKG-Z_CASEMARK3 = LST_ZTEGSDT010_PKG-Z_CASEMARK3.
LST_FILE_PKG-Z_CASEMARK3 = LST_PKG-Z_CASEMARK3.

*     CaseMark4
LST_PKG-Z_CASEMARK4 = LST_ZTEGSDT010_PKG-Z_CASEMARK4.
LST_FILE_PKG-Z_CASEMARK4 = LST_PKG-Z_CASEMARK4.

*     CaseMark5
LST_PKG-Z_CASEMARK5 = LST_ZTEGSDT010_PKG-Z_CASEMARK5.
LST_FILE_PKG-Z_CASEMARK5 = LST_PKG-Z_CASEMARK5.

*     Remarks1
LST_PKG-Z_INV_REMARKS1 = LST_ZTEGSDT010_PKG-Z_INV_REMARKS1.
LST_FILE_PKG-Z_INV_REMARKS1 = LST_PKG-Z_INV_REMARKS1.

*     Remarks2
LST_PKG-Z_INV_REMARKS2 = LST_ZTEGSDT010_PKG-Z_INV_REMARKS2.
LST_FILE_PKG-Z_INV_REMARKS2 = LST_PKG-Z_INV_REMARKS2.

*     Remarks3
LST_PKG-Z_INV_REMARKS3 = LST_ZTEGSDT010_PKG-Z_INV_REMARKS3.
LST_FILE_PKG-Z_INV_REMARKS3 = LST_PKG-Z_INV_REMARKS3.

*     Remarks4
LST_PKG-Z_INV_REMARKS4 = LST_ZTEGSDT010_PKG-Z_INV_REMARKS4.
LST_FILE_PKG-Z_INV_REMARKS4 = LST_PKG-Z_INV_REMARKS4.

*     Remarks5
LST_PKG-Z_INV_REMARKS5 = LST_ZTEGSDT010_PKG-Z_INV_REMARKS5.
LST_FILE_PKG-Z_INV_REMARKS5 = LST_PKG-Z_INV_REMARKS5.

*     CaseMarkNoFrom
LST_PKG-Z_CASENO_FROM = LST_ZTEGSDT002-Z_CASENO_FROM.
LST_FILE_PKG-Z_CASENO_FROM = LST_PKG-Z_CASENO_FROM.

*     CaseMarkNoTo
LST_PKG-Z_CASENO_TO = LST_ZTEGSDT002-Z_CASENO_TO.
LST_FILE_PKG-Z_CASENO_TO = LST_PKG-Z_CASENO_TO.

*     CaseMarkCount
LST_PKG-Z_CASE_COUNT = LST_ZTEGSDT002-Z_CASE_COUNT.
LST_FILE_PKG-Z_CASE_COUNT = LST_PKG-Z_CASE_COUNT.

*     CaseUnit
LST_PKG-Z_MEINS_PACK = LST_ZTEGSDT002-Z_MEINS_PACK.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_PKG-Z_MEINS_PACK
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_PKG-Z_MEINS_PACK
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     CaseMarkMix
LST_PKG-Z_CASE_MIX = LST_ZTEGSDT002-Z_CASE_MIX.
LST_FILE_PKG-Z_CASE_MIX = LST_PKG-Z_CASE_MIX.

*     Unit
LST_PKG-Z_VRKME = LST_ZTEGSDT002-Z_VRKME.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_PKG-Z_VRKME
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_PKG-Z_VRKME
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     QtyPerCase
LST_PKG-Z_LFIMG_UNIT = LST_ZTEGSDT002-Z_LFIMG_UNIT.
WRITE LST_PKG-Z_LFIMG_UNIT TO LW_QUAN
UNIT LST_PKG-Z_VRKME.
LST_FILE_PKG-Z_LFIMG_UNIT = LW_QUAN.

*     Quantity
LST_PKG-Z_LFIMG = LST_ZTEGSDT002-Z_LFIMG.
WRITE LST_PKG-Z_LFIMG TO LW_QUAN
UNIT LST_PKG-Z_VRKME.
LST_FILE_PKG-Z_LFIMG = LW_QUAN.

*     NetWeightUnit
LST_PKG-Z_GEWEI_NW = LST_ZTEGSDT002-Z_GEWEI_NW.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_PKG-Z_GEWEI_NW
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_PKG-Z_GEWEI_NW
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     NetWeightPerCase
LST_PKG-Z_NETWEIGHT_UNIT = LST_ZTEGSDT002-Z_NETWEIGHT_UNIT.
WRITE LST_PKG-Z_NETWEIGHT_UNIT TO LW_QUAN
UNIT LST_PKG-Z_GEWEI_NW.
LST_FILE_PKG-Z_NETWEIGHT_UNIT = LW_QUAN.

*     NetWeight
LST_PKG-Z_NETWEIGHT = LST_ZTEGSDT002-Z_NETWEIGHT.
WRITE LST_PKG-Z_NETWEIGHT TO LW_QUAN
UNIT LST_PKG-Z_GEWEI_NW.
LST_FILE_PKG-Z_NETWEIGHT = LW_QUAN.

*     GrossWeightUnit
LST_PKG-Z_GEWEI_GW = LST_ZTEGSDT002-Z_GEWEI_GW.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_PKG-Z_GEWEI_GW
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_PKG-Z_GEWEI_GW
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     GrossWeightPerCase
LST_PKG-Z_GRSWEIGHT_UNIT = LST_ZTEGSDT002-Z_GRSWEIGHT_UNIT.
WRITE LST_PKG-Z_GRSWEIGHT_UNIT TO LW_QUAN
UNIT LST_PKG-Z_GEWEI_GW.
LST_FILE_PKG-Z_GRSWEIGHT_UNIT = LW_QUAN.

*     GrossWeight
LST_PKG-Z_GRSWEIGHT = LST_ZTEGSDT002-Z_GRSWEIGHT.
WRITE LST_PKG-Z_GRSWEIGHT TO LW_QUAN
UNIT LST_PKG-Z_GEWEI_GW.
LST_FILE_PKG-Z_GRSWEIGHT = LW_QUAN.

*     MeasuretUnit
LST_PKG-Z_VOLEH = LST_ZTEGSDT002-Z_VOLEH.
CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
EXPORTING
INPUT                = LST_PKG-Z_VOLEH
LANGUAGE             = SY-LANGU
IMPORTING
OUTPUT               = LST_FILE_PKG-Z_VOLEH
EXCEPTIONS
UNIT_NOT_FOUND       = 1
OTHERS               = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     MeasurePerCase
LST_PKG-Z_VOLUM_UNIT = LST_ZTEGSDT002-Z_VOLUM_UNIT.
WRITE LST_PKG-Z_VOLUM_UNIT TO LW_QUAN
UNIT LST_PKG-Z_VOLEH.
LST_FILE_PKG-Z_VOLUM_UNIT = LW_QUAN.

*     Measure
LST_PKG-Z_VOLUM = LST_ZTEGSDT002-Z_VOLUM.
WRITE LST_PKG-Z_VOLUM TO LW_QUAN
UNIT LST_PKG-Z_VOLEH.
LST_FILE_PKG-Z_VOLUM = LW_QUAN.

*     PackingRemarks
LST_PKG-Z_PKG_REMARKS = LST_ZTEGSDT002-Z_PKG_REMARKS.
LST_FILE_PKG-Z_PKG_REMARKS = LST_PKG-Z_PKG_REMARKS.

*     Length(cm)
LST_PKG-Z_LENGTH = LST_ZTEGSDM009-Z_LENGTH.
LST_FILE_PKG-Z_LENGTH = LST_PKG-Z_LENGTH.

*     Width(cm)
LST_PKG-Z_WIDTH = LST_ZTEGSDM009-Z_WIDTH.
LST_FILE_PKG-Z_WIDTH = LST_PKG-Z_WIDTH.

*     Height(cm)
LST_PKG-Z_HEIGHT = LST_ZTEGSDM009-Z_HEIGHT.
LST_FILE_PKG-Z_HEIGHT = LST_PKG-Z_HEIGHT.

*     Printer/Tray
LST_PKG-LNAME = P_PTRAY.
LST_FILE_PKG-LNAME = LST_PKG-LNAME.

*     CopmanyName
LST_PKG-Z_COMP_NAME = P_CNAME.
LST_FILE_PKG-Z_COMP_NAME = LST_PKG-Z_COMP_NAME.

*     CopmanyAddress1
LST_PKG-Z_COMP_ADDRESS1 = P_CADDR1.
LST_FILE_PKG-Z_COMP_ADDRESS1 = LST_PKG-Z_COMP_ADDRESS1.

*     CopmanyAddress2
LST_PKG-Z_COMP_ADDRESS2 = P_CADDR2.
LST_FILE_PKG-Z_COMP_ADDRESS2 = LST_PKG-Z_COMP_ADDRESS2.

*     CopmanyTel
LST_PKG-Z_COMP_TEL = P_CTEL.
LST_FILE_PKG-Z_COMP_TEL = LST_PKG-Z_COMP_TEL.

*     CopmanyFax
LST_PKG-Z_COMP_FAX = P_CFAX.
LST_FILE_PKG-Z_COMP_FAX = LST_PKG-Z_COMP_FAX.

*     ItemText
LST_PKG-MAKTX = LST_MAKT-MAKTX.
LST_FILE_PKG-MAKTX = LST_PKG-MAKTX.

*     Purpose
REFRESH LTD_LINES.
CLEAR LW_NAME.
LW_NAME+0(4) = LST_ZTEGSDT010_PKG-VKORG.
LW_NAME+4(2) = LST_ZTEGSDT010_PKG-VTWEG.
LW_NAME+6(10) = LST_ZTEGSDT010_PKG-KUNAG.
LW_NAME+16 = LST_ZTEGSDT010_PKG-MATNR.
CALL FUNCTION 'READ_TEXT'
EXPORTING
CLIENT                        = SY-MANDT
ID                            = '0004'
LANGUAGE                      = SY-LANGU
NAME                          = LW_NAME
OBJECT                        = 'KNMT'
TABLES
LINES                         = LTD_LINES
EXCEPTIONS
ID                            = 1
LANGUAGE                      = 2
NAME                          = 3
NOT_FOUND                     = 4
OBJECT                        = 5
REFERENCE_CHECK               = 6
WRONG_ACCESS_TO_ARCHIVE       = 7
OTHERS                        = 8.
IF SY-SUBRC <> 0.
*       汎用モジュールにて想定外のエラーが発生しました。
MESSAGE S032(ZMEGSD01) WITH 'READ_TEXT' 'ZMEGSD01 032'
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ELSE.
LOOP AT LTD_LINES INTO LST_LINES.
CONCATENATE LST_PKG-Z_PURPOSE
LST_LINES-TDLINE
INTO LST_PKG-Z_PURPOSE.
ENDLOOP.
LST_FILE_PKG-Z_PURPOSE = LST_PKG-Z_PURPOSE.
ENDIF.

*     HSCode
LST_PKG-STAWN = LST_MARC-STAWN.
LST_FILE_PKG-STAWN = LST_PKG-STAWN.

*     Origin
LST_PKG-LANDX = LST_MARC-HERKL.
LST_FILE_PKG-LANDX = LST_PKG-LANDX.

*     DGType
LST_PKG-STOFT = LST_MGEF-STOFT.
LST_FILE_PKG-STOFT = LST_PKG-STOFT.

*     OutputUser
LST_PKG-Z_OUTPUT_USERID = SY-UNAME.
LST_FILE_PKG-Z_OUTPUT_USERID = LST_PKG-Z_OUTPUT_USERID.

*     Dec.pt.Format
IF P_XDEZP IS INITIAL.
LST_PKG-XDEZP = LST_T005X-XDEZP.
ELSE.
LST_PKG-XDEZP = P_XDEZP.
ENDIF.
LST_FILE_PKG-XDEZP = LST_PKG-XDEZP.

*     DateFormat
IF P_DATFM IS INITIAL.
LST_PKG-DATFM = LST_T005X-DATFM.
ELSE.
LST_PKG-DATFM = P_DATFM.
ENDIF.
LST_FILE_PKG-DATFM = LST_PKG-DATFM.

*     ReportFormat
IF  LST_PKG-STAWN IS INITIAL
AND LST_PKG-Z_PURPOSE IS INITIAL
AND LST_PKG-STOFT IS INITIAL
AND LST_PKG-Z_PKG_REMARKS IS INITIAL.
LST_PKG-Z_REPORT_FORMAT = CNS_RF_SMALL.
ELSE.
LST_PKG-Z_REPORT_FORMAT = CNS_RF_LARGE.
ENDIF.
LST_FILE_PKG-Z_REPORT_FORMAT = LST_PKG-Z_REPORT_FORMAT.

*     ReportLang
LST_PKG-Z_REPORT_LANG = P_LANGU.
LST_FILE_PKG-Z_REPORT_LANG = LST_PKG-Z_REPORT_LANG.

*     ReportTitle
LST_PKG-Z_REPORT_TITLE = P_RTPKG.
LST_FILE_PKG-Z_REPORT_TITLE = LST_PKG-Z_REPORT_TITLE.

APPEND LST_PKG TO O_TD_PKG.
APPEND LST_FILE_PKG TO O_TD_FILE_PKG.
ENDLOOP.
ENDIF.

SORT O_TD_PKG BY VBELN           ASCENDING
ERDAT           ASCENDING
POSNR           ASCENDING
Z_PKG_POSNR_SUB ASCENDING.

ENDFORM.                    " EDIT_PKG_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_FILE_NAME
*&---------------------------------------------------------------------*
*       ファイル名取得処理
*----------------------------------------------------------------------*
*      -->I_TD_INV
*      -->I_TD_PKG
*      -->I_TD_DN
*      <--O_FNAME_INV
*      <--O_FNAME_PKG
*      <--O_FNAME_DN
*      <--O_OUTPUT_CP_INV
*      <--O_OUTPUT_CP_PKG
*      <--O_OUTPUT_CP_DN
*----------------------------------------------------------------------*
FORM GET_FILE_NAME  USING I_TD_INV        TYPE TYP_TD_INV
I_TD_PKG        TYPE TYP_TD_PKG
I_TD_DN         TYPE TYP_TD_DN
CHANGING O_FNAME_INV     TYPE ANY
O_FNAME_PKG     TYPE ANY
O_FNAME_DN      TYPE ANY
O_OUTPUT_CP_INV TYPE ANY
O_OUTPUT_CP_PKG TYPE ANY
O_OUTPUT_CP_DN  TYPE ANY.

DATA: LST_INV      TYPE TYP_INV,
LST_PKG      TYPE TYP_PKG,
LST_DN       TYPE TYP_INV,
LW_BUKRS     TYPE TVKO-BUKRS,
LW_PATH(128) TYPE C,
LW_OUTPUT_FN TYPE ZTEGZZM001-Z_OUTPUT_FN.

GET PARAMETER ID 'ZSVF' FIELD LW_PATH.

* 選択画面のラジオボタン「Print」「Reprint」が選択されている場合
IF RB_DOWN IS INITIAL.
*   選択画面のチェックボックス「Invoice」「Delivery Note」がONの場合
IF CB_INV = 'X'
OR CB_DN = 'X'.
*     ファイル名・文字コード取得
IF CB_INV = 'X'.

LOOP AT I_TD_INV INTO LST_INV.
IF LST_INV-VKORG IS NOT INITIAL.
EXIT.
ENDIF.
ENDLOOP.
*       販売組織をキーに会社コード取得
SELECT SINGLE BUKRS
INTO LW_BUKRS
FROM TVKO
WHERE VKORG = LST_INV-VKORG.

SELECT Z_OUTPUT_FN
Z_OUTPUT_CP
UP TO 1 ROWS
INTO (LW_OUTPUT_FN,O_OUTPUT_CP_INV)
FROM ZTEGZZM001
WHERE PROGNAME       = SY-REPID
AND BUKRS          = LW_BUKRS
AND Z_CONV_SUBKEY1 = TEXT-C01.
ENDSELECT.
CONCATENATE LW_PATH
LW_OUTPUT_FN
SY-REPID
SY-UNAME
SY-UZEIT
CNS_EXTNAME
INTO O_FNAME_INV.
ENDIF.
IF CB_DN = 'X'.

CLEAR:
LST_DN,
LW_BUKRS.

LOOP AT I_TD_DN INTO LST_DN.
IF LST_DN-VKORG IS NOT INITIAL.
EXIT.
ENDIF.
ENDLOOP.
*       販売組織をキーに会社コード取得
SELECT SINGLE BUKRS
INTO LW_BUKRS
FROM TVKO
WHERE VKORG = LST_DN-VKORG.

SELECT Z_OUTPUT_FN
Z_OUTPUT_CP
UP TO 1 ROWS
INTO (LW_OUTPUT_FN,O_OUTPUT_CP_DN)
FROM ZTEGZZM001
WHERE PROGNAME       = SY-REPID
AND BUKRS          = LW_BUKRS
AND Z_CONV_SUBKEY1 = TEXT-C04.
ENDSELECT.
CONCATENATE LW_PATH
LW_OUTPUT_FN
SY-REPID
SY-UNAME
SY-UZEIT
CNS_EXTNAME
INTO O_FNAME_DN.
ENDIF.
ENDIF.

CLEAR: LW_BUKRS,
LW_OUTPUT_FN.

*   選択画面のチェックボックス「Packing List」がONの場合
IF CB_PKG = 'X'.
LOOP AT I_TD_PKG INTO LST_PKG.
IF LST_PKG-VKORG IS NOT INITIAL.
EXIT.
ENDIF.
ENDLOOP.
*     販売組織をキーに会社コード取得
SELECT SINGLE BUKRS
INTO LW_BUKRS
FROM TVKO
WHERE VKORG = LST_PKG-VKORG.
*     ファイル名・文字コード取得
SELECT Z_OUTPUT_FN
Z_OUTPUT_CP
UP TO 1 ROWS
INTO (LW_OUTPUT_FN,O_OUTPUT_CP_PKG)
FROM ZTEGZZM001
WHERE PROGNAME       = SY-REPID
AND BUKRS          = LW_BUKRS
AND Z_CONV_SUBKEY1 = TEXT-C03.
ENDSELECT.
CONCATENATE LW_PATH
LW_OUTPUT_FN
SY-REPID
SY-UNAME
SY-UZEIT
CNS_EXTNAME
INTO O_FNAME_PKG.
ENDIF.

* 選択画面のラジオボタン「Download」が選択されている場合
ELSE.
O_FNAME_INV = P_IFNAME.
O_FNAME_PKG = P_PFNAME.
O_FNAME_DN  = P_DFNAME.
ENDIF.

ENDFORM.                    " GET_FILE_NAME
*&---------------------------------------------------------------------*
*&      Form  GET_OUTPUT_WORK
*&---------------------------------------------------------------------*
*       Output Work存在チェック
*----------------------------------------------------------------------*
*      -->I_MODE
*      -->I_TD_INV
*      -->I_TD_PKG
*      -->I_TD_DN
*      <--O_TD_ZSDT012
*      <--O_TD_ZSDT014
*      <--O_TD_ZSDT020
*----------------------------------------------------------------------*
FORM GET_OUTPUT_WORK  USING I_MODE       TYPE ANY
I_TD_INV     TYPE TYP_TD_INV
I_TD_PKG     TYPE TYP_TD_PKG
I_TD_DN      TYPE TYP_TD_DN
CHANGING O_TD_ZSDT012 TYPE TYP_TD_ZSDT012
O_TD_ZSDT014 TYPE TYP_TD_ZSDT014
O_TD_ZSDT020 TYPE TYP_TD_ZSDT020.

DATA: LTD_INV TYPE TYP_TD_INV,
LTD_PKG TYPE TYP_TD_PKG,
LTD_DN  TYPE TYP_TD_DN.

LTD_INV[] = I_TD_INV[].
LTD_PKG[] = I_TD_PKG[].
LTD_DN[] = I_TD_DN[].
SORT LTD_INV BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_INV
COMPARING VBELN
ERDAT.
SORT LTD_PKG BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_PKG
COMPARING VBELN
ERDAT.
SORT LTD_DN  BY VBELN ASCENDING
ERDAT ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_DN
COMPARING VBELN
ERDAT.

IF LTD_INV[] IS NOT INITIAL.
SELECT Z_OUTPUT_MODE
VBELN
ERDAT
INTO TABLE O_TD_ZSDT012
FROM ZTEGSDT012
FOR ALL ENTRIES IN LTD_INV
WHERE Z_OUTPUT_MODE = I_MODE
AND VBELN = LTD_INV-VBELN
AND ERDAT = LTD_INV-ERDAT.
SORT O_TD_ZSDT012 BY Z_OUTPUT_MODE ASCENDING
VBELN         ASCENDING
ERDAT         ASCENDING.
ENDIF.

IF LTD_PKG[] IS NOT INITIAL.
SELECT Z_OUTPUT_MODE
VBELN
ERDAT
INTO TABLE O_TD_ZSDT014
FROM ZTEGSDT014
FOR ALL ENTRIES IN LTD_PKG
WHERE Z_OUTPUT_MODE = I_MODE
AND VBELN = LTD_PKG-VBELN
AND ERDAT = LTD_PKG-ERDAT.
SORT O_TD_ZSDT014 BY Z_OUTPUT_MODE ASCENDING
VBELN         ASCENDING
ERDAT         ASCENDING.
ENDIF.

IF LTD_DN[] IS NOT INITIAL.
SELECT Z_OUTPUT_MODE
VBELN
ERDAT
INTO TABLE O_TD_ZSDT020
FROM ZTEGSDT020
FOR ALL ENTRIES IN LTD_DN
WHERE Z_OUTPUT_MODE = I_MODE
AND VBELN = LTD_DN-VBELN
AND ERDAT = LTD_DN-ERDAT.
SORT O_TD_ZSDT020 BY Z_OUTPUT_MODE ASCENDING
VBELN         ASCENDING
ERDAT         ASCENDING.
ENDIF.

ENDFORM.                    " GET_OUTPUT_WORK
*&---------------------------------------------------------------------*
*&      Form  UPDATE_TABLE
*&---------------------------------------------------------------------*
*       テーブル更新
*----------------------------------------------------------------------*
*      -->I_TD_INV
*      -->I_TD_PKG
*      -->I_TD_DN
*      -->I_TD_ZTEGSDT011
*      -->I_TD_ZTEGSDT013
*      -->I_TD_ZTEGSDT019
*      <--O_FNAME_INV
*      <--O_FNAME_PKG
*      <--O_FNAME_DN
*      <--O_OUTPUT_CP_INV
*      <--O_OUTPUT_CP_PKG
*      <--O_OUTPUT_CP_DN
*      <--O_TD_MESSAGE
*      <--O_COUNT_INV
*      <--O_NORMAL_INV
*      <--O_ERROR_INV
*      <--O_COUNT_PKG
*      <--O_NORMAL_PKG
*      <--O_ERROR_PKG
*      <--O_COUNT_DN
*      <--O_NORMAL_DN
*      <--O_ERROR_DN
*----------------------------------------------------------------------*
FORM UPDATE_TABLE  USING I_TD_INV        TYPE TYP_TD_INV
I_TD_PKG        TYPE TYP_TD_PKG
I_TD_DN         TYPE TYP_TD_DN
I_TD_ZTEGSDT011 TYPE TYP_TD_ZTEGSDT011
I_TD_ZTEGSDT013 TYPE TYP_TD_ZTEGSDT013
I_TD_ZTEGSDT019 TYPE TYP_TD_ZTEGSDT019
CHANGING O_FNAME_INV     TYPE ANY
O_FNAME_PKG     TYPE ANY
O_FNAME_DN      TYPE ANY
O_OUTPUT_CP_INV TYPE ANY
O_OUTPUT_CP_PKG TYPE ANY
O_OUTPUT_CP_DN  TYPE ANY
O_TD_MESSAGE    TYPE TYP_TD_MESSAGE
O_COUNT_INV     TYPE ANY
O_NORMAL_INV    TYPE ANY
O_ERROR_INV     TYPE ANY
O_COUNT_PKG     TYPE ANY
O_NORMAL_PKG    TYPE ANY
O_ERROR_PKG     TYPE ANY
O_COUNT_DN      TYPE ANY
O_NORMAL_DN     TYPE ANY
O_ERROR_DN      TYPE ANY.

DATA: LST_INV        TYPE TYP_INV,
LST_PKG        TYPE TYP_PKG,
LST_DN         TYPE TYP_INV,
LW_END         TYPE CHAR1,
LW_DATUM       TYPE SY-DATUM,
LW_UZEIT       TYPE SY-UZEIT,
LW_UNAME       TYPE SY-UNAME,
LW_MODE        TYPE CHAR1,
LW_ERRFLG      TYPE CHAR1,
LW_INSERT_11   TYPE CHAR1,
LW_INSERT_13   TYPE CHAR1,
LW_INSERT_19   TYPE CHAR1,
LST_ZTEGZZT001 TYPE ZTEGZZT001,
LST_ZTEGSDT011 TYPE ZTEGSDT011,
LTD_ZTEGSDT012 TYPE STANDARD TABLE OF ZTEGSDT012,
LST_ZTEGSDT012 TYPE ZTEGSDT012,
LST_ZTEGSDT013 TYPE ZTEGSDT013,
LTD_ZTEGSDT014 TYPE STANDARD TABLE OF ZTEGSDT014,
LST_ZTEGSDT014 TYPE ZTEGSDT014,
LST_ZTEGSDT019 TYPE ZTEGSDT019,
LTD_ZTEGSDT020 TYPE STANDARD TABLE OF ZTEGSDT020,
LST_ZTEGSDT020 TYPE ZTEGSDT020,
LTD_ZSDT012    TYPE STANDARD TABLE OF TYP_ZTEGSDT012,
LTD_ZSDT014    TYPE STANDARD TABLE OF TYP_ZTEGSDT014,
LTD_ZSDT020    TYPE STANDARD TABLE OF TYP_ZTEGSDT020.

* ファイル名取得処理
PERFORM GET_FILE_NAME USING I_TD_INV
I_TD_PKG
I_TD_DN
CHANGING O_FNAME_INV
O_FNAME_PKG
O_FNAME_DN
O_OUTPUT_CP_INV
O_OUTPUT_CP_PKG
O_OUTPUT_CP_DN.

LW_DATUM = SY-DATUM.
LW_UZEIT = SY-UZEIT.
LW_UNAME = SY-UNAME.
IF RB_DOWN IS INITIAL.
LW_MODE = 'P'.
ELSE.
LW_MODE = 'D'.
ENDIF.

* Output Work存在チェック
PERFORM GET_OUTPUT_WORK USING LW_MODE
I_TD_INV
I_TD_PKG
I_TD_DN
CHANGING LTD_ZSDT012
LTD_ZSDT014
LTD_ZSDT020.

* 選択画面のチェックボックス「Invoice」がONの場合
IF CB_INV = 'X'.
*   Invoiceの更新
LOOP AT I_TD_INV INTO LST_INV.
AT END OF ERDAT.
LW_END = 'X'.
O_COUNT_INV = O_COUNT_INV + 1.  "処理件数
ENDAT.

IF LW_END = 'X'.
*       ZTEGZZT001データの編集
CLEAR LST_ZTEGZZT001.
PERFORM GET_SERNO CHANGING LST_ZTEGZZT001-Z_OUTPUT_LOG_NO.
LST_ZTEGZZT001-PROGNAME = SY-REPID.
LST_ZTEGZZT001-Z_REPORT_NAME = TEXT-C01.
LST_ZTEGZZT001-LNAME = P_PTRAY.
LST_ZTEGZZT001-Z_OUTPUT_PATH = O_FNAME_INV.
LST_ZTEGZZT001-Z_OUTPUT_MODE = LW_MODE.
IF RB_DOWN IS INITIAL.
LST_ZTEGZZT001-Z_OUTPUT_CP = O_OUTPUT_CP_INV.
ELSE.
PERFORM GET_LOCAL_CODEPAGE
CHANGING LST_ZTEGZZT001-Z_OUTPUT_CP.
ENDIF.
LST_ZTEGZZT001-Z_KEY1_TYPE = 'VSTEL'.
LST_ZTEGZZT001-Z_KEY1_VALUE = LST_INV-VSTEL.
LST_ZTEGZZT001-Z_KEY2_TYPE = 'KUNAG'.
LST_ZTEGZZT001-Z_KEY2_VALUE = LST_INV-KUNAG.
LST_ZTEGZZT001-Z_KEY3_TYPE = 'KUNNR'.
LST_ZTEGZZT001-Z_KEY3_VALUE = LST_INV-KUNNR.
LST_ZTEGZZT001-Z_KEY4_TYPE = 'VBELN'.
LST_ZTEGZZT001-Z_KEY4_VALUE = LST_INV-VBELN.
LST_ZTEGZZT001-Z_KEY5_TYPE = 'ERDAT'.
LST_ZTEGZZT001-Z_KEY5_VALUE = LST_INV-ERDAT.
LST_ZTEGZZT001-Z_KEY6_TYPE = 'Z_INVOICE_NO'.
LST_ZTEGZZT001-Z_KEY6_VALUE = LST_INV-Z_INVOICE_NO.
LST_ZTEGZZT001-Z_CRE_YMD = LW_DATUM.
LST_ZTEGZZT001-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGZZT001-Z_CRE_USERID = LW_UNAME.

*       ZTEGSDT011データの編集
CLEAR LST_ZTEGSDT011.
CLEAR LW_INSERT_11.
IF RB_REPNT IS INITIAL.
READ TABLE I_TD_ZTEGSDT011 TRANSPORTING NO FIELDS
WITH KEY Z_OUTPUT_MODE = LW_MODE
VBELN = LST_INV-VBELN
ERDAT = LST_INV-ERDAT.
IF SY-SUBRC <> 0.
LST_ZTEGSDT011-Z_OUTPUT_MODE = LW_MODE.
LST_ZTEGSDT011-VBELN = LST_INV-VBELN.
LST_ZTEGSDT011-ERDAT = LST_INV-ERDAT.
LST_ZTEGSDT011-Z_CRE_YMD = LW_DATUM.
LST_ZTEGSDT011-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGSDT011-Z_CRE_USERID = LW_UNAME.
LW_INSERT_11 = 'X'.
ENDIF.
ENDIF.
ENDIF.

*     ZTEGSDT012データの編集
CLEAR LST_ZTEGSDT012.
LST_ZTEGSDT012-Z_OUTPUT_MODE = LW_MODE.
LST_ZTEGSDT012-VBELN = LST_INV-VBELN.
LST_ZTEGSDT012-ERDAT = LST_INV-ERDAT.
LST_ZTEGSDT012-POSNR = LST_INV-POSNR.
LST_ZTEGSDT012-LNAME = P_PTRAY.
LST_ZTEGSDT012-Z_COMP_NAME = LST_INV-Z_COMP_NAME.
LST_ZTEGSDT012-Z_COMP_ADDRESS1 = LST_INV-Z_COMP_ADDRESS1.
LST_ZTEGSDT012-Z_COMP_ADDRESS2 = LST_INV-Z_COMP_ADDRESS2.
LST_ZTEGSDT012-Z_COMP_TEL = LST_INV-Z_COMP_TEL.
LST_ZTEGSDT012-Z_COMP_FAX = LST_INV-Z_COMP_FAX.
LST_ZTEGSDT012-Z_INVOICE_NO = LST_INV-Z_INVOICE_NO.
LST_ZTEGSDT012-Z_INVOICE_DATE = LST_INV-Z_INVOICE_DATE.
LST_ZTEGSDT012-Z_CUST_BT = LST_INV-Z_CUST_BT.
LST_ZTEGSDT012-Z_CUST_NAME_BT = LST_INV-Z_CUST_NAME_BT.
LST_ZTEGSDT012-Z_ADDRESS1_BT = LST_INV-Z_ADDRESS1_BT.
LST_ZTEGSDT012-Z_ADDRESS2_BT = LST_INV-Z_ADDRESS2_BT.
LST_ZTEGSDT012-Z_ATTN_BT = LST_INV-Z_ATTN_BT.
LST_ZTEGSDT012-Z_TEL_BT = LST_INV-Z_TEL_BT.
LST_ZTEGSDT012-Z_FAX_BT = LST_INV-Z_FAX_BT.
LST_ZTEGSDT012-Z_CUST_ST = LST_INV-Z_CUST_ST.
LST_ZTEGSDT012-Z_CUST_NAME_ST = LST_INV-Z_CUST_NAME_ST.
LST_ZTEGSDT012-Z_ADDRESS1_ST = LST_INV-Z_ADDRESS1_ST.
LST_ZTEGSDT012-Z_ADDRESS2_ST = LST_INV-Z_ADDRESS2_ST.
LST_ZTEGSDT012-Z_ATTN_ST = LST_INV-Z_ATTN_ST.
LST_ZTEGSDT012-Z_TEL_ST = LST_INV-Z_TEL_ST.
LST_ZTEGSDT012-Z_FAX_ST = LST_INV-Z_FAX_ST.
LST_ZTEGSDT012-Z_SHIPPED_PER = LST_INV-Z_SHIPPED_PER.
LST_ZTEGSDT012-Z_ON_OR_ABOUT = LST_INV-Z_ON_OR_ABOUT.
LST_ZTEGSDT012-Z_TRADE_FROM = LST_INV-Z_TRADE_FROM.
LST_ZTEGSDT012-Z_TRADE_TO = LST_INV-Z_TRADE_TO.
LST_ZTEGSDT012-Z_TRADE_VIA = LST_INV-Z_TRADE_VIA.
LST_ZTEGSDT012-Z_TRADE_PAYMENT = LST_INV-Z_TRADE_PAYMENT.
LST_ZTEGSDT012-Z_TRADE_TERM = LST_INV-Z_TRADE_TERM.
LST_ZTEGSDT012-Z_CASEMARK1 = LST_INV-Z_CASEMARK1.
LST_ZTEGSDT012-Z_CASEMARK2 = LST_INV-Z_CASEMARK2.
LST_ZTEGSDT012-Z_CASEMARK3 = LST_INV-Z_CASEMARK3.
LST_ZTEGSDT012-Z_CASEMARK4 = LST_INV-Z_CASEMARK4.
LST_ZTEGSDT012-Z_CASEMARK5 = LST_INV-Z_CASEMARK5.
LST_ZTEGSDT012-MATNR = LST_INV-MATNR.
LST_ZTEGSDT012-BSTKD = LST_INV-BSTKD.
LST_ZTEGSDT012-VGBEL = LST_INV-VGBEL.
LST_ZTEGSDT012-VGPOS = LST_INV-VGPOS.
LST_ZTEGSDT012-KDMAT = LST_INV-KDMAT.
LST_ZTEGSDT012-MAKTX = LST_INV-MAKTX.
LST_ZTEGSDT012-Z_PURPOSE = LST_INV-Z_PURPOSE.
LST_ZTEGSDT012-STAWN = LST_INV-STAWN.
LST_ZTEGSDT012-LANDX = LST_INV-LANDX.
LST_ZTEGSDT012-STOFT = LST_INV-STOFT.
LST_ZTEGSDT012-Z_LFIMG = LST_INV-LFIMG.
LST_ZTEGSDT012-Z_VRKME = LST_INV-VRKME.
LST_ZTEGSDT012-Z_NETPR = LST_INV-NETPR.
LST_ZTEGSDT012-Z_WAERK_NETPR = LST_INV-WAERK.
LST_ZTEGSDT012-Z_NETWR = LST_INV-NETWR.
LST_ZTEGSDT012-Z_WAERK_NETWR = LST_INV-WAERS.
LST_ZTEGSDT012-Z_INV_REMARKS1 = LST_INV-Z_INV_REMARKS1.
LST_ZTEGSDT012-Z_INV_REMARKS2 = LST_INV-Z_INV_REMARKS2.
LST_ZTEGSDT012-Z_INV_REMARKS3 = LST_INV-Z_INV_REMARKS3.
LST_ZTEGSDT012-Z_INV_REMARKS4 = LST_INV-Z_INV_REMARKS4.
LST_ZTEGSDT012-Z_INV_REMARKS5 = LST_INV-Z_INV_REMARKS5.
LST_ZTEGSDT012-VSTEL = LST_INV-VSTEL.
LST_ZTEGSDT012-Z_OUTPUT_USERID = LST_INV-Z_OUTPUT_USERID.
LST_ZTEGSDT012-XDEZP = LST_INV-XDEZP.
LST_ZTEGSDT012-DATFM = LST_INV-DATFM.
LST_ZTEGSDT012-Z_REPORT_FORMAT = LST_INV-Z_REPORT_FORMAT.
LST_ZTEGSDT012-Z_REPORT_LANG = LST_INV-Z_REPORT_LANG.
LST_ZTEGSDT012-Z_REPORT_TITLE = LST_INV-Z_REPORT_TITLE.
LST_ZTEGSDT012-Z_CRE_YMD = LW_DATUM.
LST_ZTEGSDT012-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGSDT012-Z_CRE_USERID = LW_UNAME.
APPEND LST_ZTEGSDT012 TO LTD_ZTEGSDT012.

*     テーブル更新
IF LW_END = 'X'.
CLEAR LW_ERRFLG.
PERFORM UPDATE_INVOICE_DATA USING LST_ZTEGZZT001
LST_ZTEGSDT011
LTD_ZTEGSDT012
LTD_ZSDT012
LST_INV
LW_INSERT_11
LW_MODE
CHANGING O_TD_MESSAGE
LW_ERRFLG.
IF LW_ERRFLG = 'X'.
O_ERROR_INV = O_ERROR_INV + 1.  "エラー件数
ELSE.
O_NORMAL_INV = O_NORMAL_INV + 1.  "正常件数
ENDIF.
CLEAR LW_END.
REFRESH LTD_ZTEGSDT012.
ENDIF.
ENDLOOP.
ENDIF.

CLEAR: LW_END,
LW_ERRFLG.

* 選択画面のチェックボックス「Packing List」がONの場合
IF CB_PKG = 'X'.
*   Packing Listの更新
LOOP AT I_TD_PKG INTO LST_PKG.
AT END OF ERDAT.
LW_END = 'X'.
O_COUNT_PKG = O_COUNT_PKG + 1.  "処理件数
ENDAT.

IF LW_END = 'X'.
*       ZTEGZZT001データの編集
CLEAR LST_ZTEGZZT001.
PERFORM GET_SERNO CHANGING LST_ZTEGZZT001-Z_OUTPUT_LOG_NO.
LST_ZTEGZZT001-PROGNAME = SY-REPID.
LST_ZTEGZZT001-Z_REPORT_NAME = TEXT-C02.
LST_ZTEGZZT001-LNAME = P_PTRAY.
LST_ZTEGZZT001-Z_OUTPUT_PATH = O_FNAME_PKG.
LST_ZTEGZZT001-Z_OUTPUT_MODE = LW_MODE.
IF RB_DOWN IS INITIAL.
LST_ZTEGZZT001-Z_OUTPUT_CP = O_OUTPUT_CP_PKG.
ELSE.
PERFORM GET_LOCAL_CODEPAGE
CHANGING LST_ZTEGZZT001-Z_OUTPUT_CP.
ENDIF.
LST_ZTEGZZT001-Z_KEY1_TYPE = 'VSTEL'.
LST_ZTEGZZT001-Z_KEY1_VALUE = LST_PKG-VSTEL.
LST_ZTEGZZT001-Z_KEY2_TYPE = 'KUNAG'.
LST_ZTEGZZT001-Z_KEY2_VALUE = LST_PKG-KUNAG.
LST_ZTEGZZT001-Z_KEY3_TYPE = 'KUNNR'.
LST_ZTEGZZT001-Z_KEY3_VALUE = LST_PKG-KUNNR.
LST_ZTEGZZT001-Z_KEY4_TYPE = 'VBELN'.
LST_ZTEGZZT001-Z_KEY4_VALUE = LST_PKG-VBELN.
LST_ZTEGZZT001-Z_KEY5_TYPE = 'ERDAT'.
LST_ZTEGZZT001-Z_KEY5_VALUE = LST_PKG-ERDAT.
LST_ZTEGZZT001-Z_KEY6_TYPE = 'Z_INVOICE_NO'.
LST_ZTEGZZT001-Z_KEY6_VALUE = LST_PKG-Z_INVOICE_NO.
LST_ZTEGZZT001-Z_CRE_YMD = LW_DATUM.
LST_ZTEGZZT001-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGZZT001-Z_CRE_USERID = LW_UNAME.

*       ZTEGSDT013データの編集
CLEAR LST_ZTEGSDT013.
CLEAR LW_INSERT_13.
IF RB_REPNT IS INITIAL.
READ TABLE I_TD_ZTEGSDT013 TRANSPORTING NO FIELDS
WITH KEY Z_OUTPUT_MODE = LW_MODE
VBELN = LST_PKG-VBELN
ERDAT = LST_PKG-ERDAT.
IF SY-SUBRC <> 0.
LST_ZTEGSDT013-Z_OUTPUT_MODE = LW_MODE.
LST_ZTEGSDT013-VBELN = LST_PKG-VBELN.
LST_ZTEGSDT013-ERDAT = LST_PKG-ERDAT.
LST_ZTEGSDT013-Z_CRE_YMD = LW_DATUM.
LST_ZTEGSDT013-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGSDT013-Z_CRE_USERID = LW_UNAME.
LW_INSERT_13 = 'X'.
ENDIF.
ENDIF.
ENDIF.

*     ZTEGSDT014データの編集
CLEAR LST_ZTEGSDT014.
LST_ZTEGSDT014-Z_OUTPUT_MODE = LW_MODE.
LST_ZTEGSDT014-VBELN = LST_PKG-VBELN.
LST_ZTEGSDT014-ERDAT = LST_PKG-ERDAT.
LST_ZTEGSDT014-POSNR = LST_PKG-POSNR.
LST_ZTEGSDT014-Z_PKG_POSNR_SUB = LST_PKG-Z_PKG_POSNR_SUB.
LST_ZTEGSDT014-LNAME = P_PTRAY.
LST_ZTEGSDT014-Z_COMP_NAME = LST_PKG-Z_COMP_NAME.
LST_ZTEGSDT014-Z_COMP_ADDRESS1 = LST_PKG-Z_COMP_ADDRESS1.
LST_ZTEGSDT014-Z_COMP_ADDRESS2 = LST_PKG-Z_COMP_ADDRESS2.
LST_ZTEGSDT014-Z_COMP_TEL = LST_PKG-Z_COMP_TEL.
LST_ZTEGSDT014-Z_COMP_FAX = LST_PKG-Z_COMP_FAX.
LST_ZTEGSDT014-Z_INVOICE_NO = LST_PKG-Z_INVOICE_NO.
LST_ZTEGSDT014-Z_INVOICE_DATE = LST_PKG-Z_INVOICE_DATE.
LST_ZTEGSDT014-Z_CUST_BT = LST_PKG-Z_CUST_BT.
LST_ZTEGSDT014-Z_CUST_NAME_BT = LST_PKG-Z_CUST_NAME_BT.
LST_ZTEGSDT014-Z_ADDRESS1_BT = LST_PKG-Z_ADDRESS1_BT.
LST_ZTEGSDT014-Z_ADDRESS2_BT = LST_PKG-Z_ADDRESS2_BT.
LST_ZTEGSDT014-Z_ATTN_BT = LST_PKG-Z_ATTN_BT.
LST_ZTEGSDT014-Z_TEL_BT = LST_PKG-Z_TEL_BT.
LST_ZTEGSDT014-Z_FAX_BT = LST_PKG-Z_FAX_BT.
LST_ZTEGSDT014-Z_CUST_ST = LST_PKG-Z_CUST_ST.
LST_ZTEGSDT014-Z_CUST_NAME_ST = LST_PKG-Z_CUST_NAME_ST.
LST_ZTEGSDT014-Z_ADDRESS1_ST = LST_PKG-Z_ADDRESS1_ST.
LST_ZTEGSDT014-Z_ADDRESS2_ST = LST_PKG-Z_ADDRESS2_ST.
LST_ZTEGSDT014-Z_ATTN_ST = LST_PKG-Z_ATTN_ST.
LST_ZTEGSDT014-Z_TEL_ST = LST_PKG-Z_TEL_ST.
LST_ZTEGSDT014-Z_FAX_ST = LST_PKG-Z_FAX_ST.
LST_ZTEGSDT014-Z_SHIPPED_PER = LST_PKG-Z_SHIPPED_PER.
LST_ZTEGSDT014-Z_ON_OR_ABOUT = LST_PKG-Z_ON_OR_ABOUT.
LST_ZTEGSDT014-Z_TRADE_FROM = LST_PKG-Z_TRADE_FROM.
LST_ZTEGSDT014-Z_TRADE_TO = LST_PKG-Z_TRADE_TO.
LST_ZTEGSDT014-Z_TRADE_VIA = LST_PKG-Z_TRADE_VIA.
LST_ZTEGSDT014-Z_TRADE_PAYMENT = LST_PKG-Z_TRADE_PAYMENT.
LST_ZTEGSDT014-Z_TRADE_TERM = LST_PKG-Z_TRADE_TERM.
LST_ZTEGSDT014-Z_CASEMARK1 = LST_PKG-Z_CASEMARK1.
LST_ZTEGSDT014-Z_CASEMARK2 = LST_PKG-Z_CASEMARK2.
LST_ZTEGSDT014-Z_CASEMARK3 = LST_PKG-Z_CASEMARK3.
LST_ZTEGSDT014-Z_CASEMARK4 = LST_PKG-Z_CASEMARK4.
LST_ZTEGSDT014-Z_CASEMARK5 = LST_PKG-Z_CASEMARK5.
LST_ZTEGSDT014-Z_CASENO_FROM = LST_PKG-Z_CASENO_FROM.
LST_ZTEGSDT014-Z_CASENO_TO = LST_PKG-Z_CASENO_TO.
LST_ZTEGSDT014-Z_CASE_COUNT = LST_PKG-Z_CASE_COUNT.
LST_ZTEGSDT014-Z_MEINS_PACK = LST_PKG-Z_MEINS_PACK.
LST_ZTEGSDT014-Z_CASE_MIX = LST_PKG-Z_CASE_MIX.
LST_ZTEGSDT014-MATNR = LST_PKG-MATNR.
LST_ZTEGSDT014-BSTKD = LST_PKG-BSTKD.
LST_ZTEGSDT014-VGBEL = LST_PKG-VGBEL.
LST_ZTEGSDT014-VGPOS = LST_PKG-VGPOS.
LST_ZTEGSDT014-KDMAT = LST_PKG-KDMAT.
LST_ZTEGSDT014-MAKTX = LST_PKG-MAKTX.
LST_ZTEGSDT014-Z_PURPOSE = LST_PKG-Z_PURPOSE.
LST_ZTEGSDT014-STAWN = LST_PKG-STAWN.
LST_ZTEGSDT014-LANDX = LST_PKG-LANDX.
LST_ZTEGSDT014-STOFT = LST_PKG-STOFT.
LST_ZTEGSDT014-Z_LFIMG_UNIT = LST_PKG-Z_LFIMG_UNIT.
LST_ZTEGSDT014-Z_LFIMG = LST_PKG-Z_LFIMG.
LST_ZTEGSDT014-Z_VRKME = LST_PKG-Z_VRKME.
LST_ZTEGSDT014-Z_NETWEIGHT_UNIT = LST_PKG-Z_NETWEIGHT_UNIT.
LST_ZTEGSDT014-Z_NETWEIGHT = LST_PKG-Z_NETWEIGHT.
LST_ZTEGSDT014-Z_GEWEI_NW = LST_PKG-Z_GEWEI_NW.
LST_ZTEGSDT014-Z_GRSWEIGHT_UNIT = LST_PKG-Z_GRSWEIGHT_UNIT.
LST_ZTEGSDT014-Z_GRSWEIGHT = LST_PKG-Z_GRSWEIGHT.
LST_ZTEGSDT014-Z_GEWEI_GW = LST_PKG-Z_GEWEI_GW.
LST_ZTEGSDT014-Z_LENGTH = LST_PKG-Z_LENGTH.
LST_ZTEGSDT014-Z_WIDTH = LST_PKG-Z_WIDTH.
LST_ZTEGSDT014-Z_HEIGHT = LST_PKG-Z_HEIGHT.
LST_ZTEGSDT014-Z_VOLUM_UNIT = LST_PKG-Z_VOLUM_UNIT.
LST_ZTEGSDT014-Z_VOLUM = LST_PKG-Z_VOLUM.
LST_ZTEGSDT014-Z_VOLEH = LST_PKG-Z_VOLEH.
LST_ZTEGSDT014-Z_PKG_REMARKS = LST_PKG-Z_PKG_REMARKS.
LST_ZTEGSDT014-Z_INV_REMARKS1 = LST_PKG-Z_INV_REMARKS1.
LST_ZTEGSDT014-Z_INV_REMARKS2 = LST_PKG-Z_INV_REMARKS2.
LST_ZTEGSDT014-Z_INV_REMARKS3 = LST_PKG-Z_INV_REMARKS3.
LST_ZTEGSDT014-Z_INV_REMARKS4 = LST_PKG-Z_INV_REMARKS4.
LST_ZTEGSDT014-Z_INV_REMARKS5 = LST_PKG-Z_INV_REMARKS5.
LST_ZTEGSDT014-VSTEL = LST_PKG-VSTEL.
LST_ZTEGSDT014-Z_OUTPUT_USERID = LST_PKG-Z_OUTPUT_USERID.
LST_ZTEGSDT014-XDEZP = LST_PKG-XDEZP.
LST_ZTEGSDT014-DATFM = LST_PKG-DATFM.
LST_ZTEGSDT014-Z_REPORT_FORMAT = LST_PKG-Z_REPORT_FORMAT.
LST_ZTEGSDT014-Z_REPORT_LANG = LST_PKG-Z_REPORT_LANG.
LST_ZTEGSDT014-Z_REPORT_TITLE = LST_PKG-Z_REPORT_TITLE.
LST_ZTEGSDT014-Z_CRE_YMD = LW_DATUM.
LST_ZTEGSDT014-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGSDT014-Z_CRE_USERID = LW_UNAME.
APPEND LST_ZTEGSDT014 TO LTD_ZTEGSDT014.

*     テーブル更新
IF LW_END = 'X'.
CLEAR LW_ERRFLG.
PERFORM UPDATE_PACKING_DATA USING LST_ZTEGZZT001
LST_ZTEGSDT013
LTD_ZTEGSDT014
LTD_ZSDT014
LST_PKG
LW_INSERT_13
LW_MODE
CHANGING O_TD_MESSAGE
LW_ERRFLG.
IF LW_ERRFLG = 'X'.
O_ERROR_PKG = O_ERROR_PKG + 1.  "エラー件数
ELSE.
O_NORMAL_PKG = O_NORMAL_PKG + 1.  "正常件数
ENDIF.
CLEAR LW_END.
REFRESH LTD_ZTEGSDT014.
ENDIF.
ENDLOOP.
ENDIF.

CLEAR: LW_END,
LW_ERRFLG.

* 選択画面のチェックボックス「Delivery Note」がONの場合
IF CB_DN = 'X'.
*   Delivery Noteの更新
LOOP AT I_TD_DN INTO LST_DN.
AT END OF ERDAT.
LW_END = 'X'.
O_COUNT_DN = O_COUNT_DN + 1.  "処理件数
ENDAT.

IF LW_END = 'X'.
*       ZTEGZZT001データの編集
CLEAR LST_ZTEGZZT001.
PERFORM GET_SERNO CHANGING LST_ZTEGZZT001-Z_OUTPUT_LOG_NO.
LST_ZTEGZZT001-PROGNAME = SY-REPID.
LST_ZTEGZZT001-Z_REPORT_NAME = TEXT-C05.
LST_ZTEGZZT001-LNAME = P_PTRAY.
LST_ZTEGZZT001-Z_OUTPUT_PATH = O_FNAME_DN.
LST_ZTEGZZT001-Z_OUTPUT_MODE = LW_MODE.
IF RB_DOWN IS INITIAL.
LST_ZTEGZZT001-Z_OUTPUT_CP = O_OUTPUT_CP_DN.
ELSE.
PERFORM GET_LOCAL_CODEPAGE
CHANGING LST_ZTEGZZT001-Z_OUTPUT_CP.
ENDIF.
LST_ZTEGZZT001-Z_KEY1_TYPE = 'VSTEL'.
LST_ZTEGZZT001-Z_KEY1_VALUE = LST_DN-VSTEL.
LST_ZTEGZZT001-Z_KEY2_TYPE = 'KUNAG'.
LST_ZTEGZZT001-Z_KEY2_VALUE = LST_DN-KUNAG.
LST_ZTEGZZT001-Z_KEY3_TYPE = 'KUNNR'.
LST_ZTEGZZT001-Z_KEY3_VALUE = LST_DN-KUNNR.
LST_ZTEGZZT001-Z_KEY4_TYPE = 'VBELN'.
LST_ZTEGZZT001-Z_KEY4_VALUE = LST_DN-VBELN.
LST_ZTEGZZT001-Z_KEY5_TYPE = 'ERDAT'.
LST_ZTEGZZT001-Z_KEY5_VALUE = LST_DN-ERDAT.
LST_ZTEGZZT001-Z_KEY6_TYPE = 'Z_INVOICE_NO'.
LST_ZTEGZZT001-Z_KEY6_VALUE = LST_DN-Z_INVOICE_NO.
LST_ZTEGZZT001-Z_CRE_YMD = LW_DATUM.
LST_ZTEGZZT001-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGZZT001-Z_CRE_USERID = LW_UNAME.

*       ZTEGSDT019データの編集
CLEAR LST_ZTEGSDT019.
CLEAR LW_INSERT_19.
IF RB_REPNT IS INITIAL.
READ TABLE I_TD_ZTEGSDT019 TRANSPORTING NO FIELDS
WITH KEY Z_OUTPUT_MODE = LW_MODE
VBELN = LST_DN-VBELN
ERDAT = LST_DN-ERDAT.
IF SY-SUBRC <> 0.
LST_ZTEGSDT019-Z_OUTPUT_MODE = LW_MODE.
LST_ZTEGSDT019-VBELN = LST_DN-VBELN.
LST_ZTEGSDT019-ERDAT = LST_DN-ERDAT.
LST_ZTEGSDT019-Z_CRE_YMD = LW_DATUM.
LST_ZTEGSDT019-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGSDT019-Z_CRE_USERID = LW_UNAME.
LW_INSERT_19 = 'X'.
ENDIF.
ENDIF.
ENDIF.

*     ZTEGSDT020データの編集
CLEAR LST_ZTEGSDT020.
LST_ZTEGSDT020-Z_OUTPUT_MODE = LW_MODE.
LST_ZTEGSDT020-VBELN = LST_DN-VBELN.
LST_ZTEGSDT020-ERDAT = LST_DN-ERDAT.
LST_ZTEGSDT020-POSNR = LST_DN-POSNR.
LST_ZTEGSDT020-LNAME = P_PTRAY.
LST_ZTEGSDT020-Z_COMP_NAME = LST_DN-Z_COMP_NAME.
LST_ZTEGSDT020-Z_COMP_ADDRESS1 = LST_DN-Z_COMP_ADDRESS1.
LST_ZTEGSDT020-Z_COMP_ADDRESS2 = LST_DN-Z_COMP_ADDRESS2.
LST_ZTEGSDT020-Z_COMP_TEL = LST_DN-Z_COMP_TEL.
LST_ZTEGSDT020-Z_COMP_FAX = LST_DN-Z_COMP_FAX.
LST_ZTEGSDT020-Z_INVOICE_NO = LST_DN-Z_INVOICE_NO.
LST_ZTEGSDT020-Z_INVOICE_DATE = LST_DN-Z_INVOICE_DATE.
LST_ZTEGSDT020-Z_CUST_BT = LST_DN-Z_CUST_BT.
LST_ZTEGSDT020-Z_CUST_NAME_BT = LST_DN-Z_CUST_NAME_BT.
LST_ZTEGSDT020-Z_ADDRESS1_BT = LST_DN-Z_ADDRESS1_BT.
LST_ZTEGSDT020-Z_ADDRESS2_BT = LST_DN-Z_ADDRESS2_BT.
LST_ZTEGSDT020-Z_ATTN_BT = LST_DN-Z_ATTN_BT.
LST_ZTEGSDT020-Z_TEL_BT = LST_DN-Z_TEL_BT.
LST_ZTEGSDT020-Z_FAX_BT = LST_DN-Z_FAX_BT.
LST_ZTEGSDT020-Z_CUST_ST = LST_DN-Z_CUST_ST.
LST_ZTEGSDT020-Z_CUST_NAME_ST = LST_DN-Z_CUST_NAME_ST.
LST_ZTEGSDT020-Z_ADDRESS1_ST = LST_DN-Z_ADDRESS1_ST.
LST_ZTEGSDT020-Z_ADDRESS2_ST = LST_DN-Z_ADDRESS2_ST.
LST_ZTEGSDT020-Z_ATTN_ST = LST_DN-Z_ATTN_ST.
LST_ZTEGSDT020-Z_TEL_ST = LST_DN-Z_TEL_ST.
LST_ZTEGSDT020-Z_FAX_ST = LST_DN-Z_FAX_ST.
LST_ZTEGSDT020-Z_SHIPPED_PER = LST_DN-Z_SHIPPED_PER.
LST_ZTEGSDT020-Z_ON_OR_ABOUT = LST_DN-Z_ON_OR_ABOUT.
LST_ZTEGSDT020-Z_TRADE_FROM = LST_DN-Z_TRADE_FROM.
LST_ZTEGSDT020-Z_TRADE_TO = LST_DN-Z_TRADE_TO.
LST_ZTEGSDT020-Z_TRADE_VIA = LST_DN-Z_TRADE_VIA.
LST_ZTEGSDT020-Z_TRADE_PAYMENT = LST_DN-Z_TRADE_PAYMENT.
LST_ZTEGSDT020-Z_TRADE_TERM = LST_DN-Z_TRADE_TERM.
LST_ZTEGSDT020-Z_CASEMARK1 = LST_DN-Z_CASEMARK1.
LST_ZTEGSDT020-Z_CASEMARK2 = LST_DN-Z_CASEMARK2.
LST_ZTEGSDT020-Z_CASEMARK3 = LST_DN-Z_CASEMARK3.
LST_ZTEGSDT020-Z_CASEMARK4 = LST_DN-Z_CASEMARK4.
LST_ZTEGSDT020-Z_CASEMARK5 = LST_DN-Z_CASEMARK5.
LST_ZTEGSDT020-MATNR = LST_DN-MATNR.
LST_ZTEGSDT020-BSTKD = LST_DN-BSTKD.
LST_ZTEGSDT020-VGBEL = LST_DN-VGBEL.
LST_ZTEGSDT020-VGPOS = LST_DN-VGPOS.
LST_ZTEGSDT020-KDMAT = LST_DN-KDMAT.
LST_ZTEGSDT020-MAKTX = LST_DN-MAKTX.
LST_ZTEGSDT020-Z_PURPOSE = LST_DN-Z_PURPOSE.
LST_ZTEGSDT020-STAWN = LST_DN-STAWN.
LST_ZTEGSDT020-LANDX = LST_DN-LANDX.
LST_ZTEGSDT020-STOFT = LST_DN-STOFT.
LST_ZTEGSDT020-Z_LFIMG = LST_DN-LFIMG.
LST_ZTEGSDT020-Z_VRKME = LST_DN-VRKME.
LST_ZTEGSDT020-Z_NETPR = LST_DN-NETPR.
LST_ZTEGSDT020-Z_WAERK_NETPR = LST_DN-WAERK.
LST_ZTEGSDT020-Z_NETWR = LST_DN-NETWR.
LST_ZTEGSDT020-Z_WAERK_NETWR = LST_DN-WAERS.
LST_ZTEGSDT020-Z_INV_REMARKS1 = LST_DN-Z_INV_REMARKS1.
LST_ZTEGSDT020-Z_INV_REMARKS2 = LST_DN-Z_INV_REMARKS2.
LST_ZTEGSDT020-Z_INV_REMARKS3 = LST_DN-Z_INV_REMARKS3.
LST_ZTEGSDT020-Z_INV_REMARKS4 = LST_DN-Z_INV_REMARKS4.
LST_ZTEGSDT020-Z_INV_REMARKS5 = LST_DN-Z_INV_REMARKS5.
LST_ZTEGSDT020-VSTEL = LST_DN-VSTEL.
LST_ZTEGSDT020-Z_OUTPUT_USERID = LST_DN-Z_OUTPUT_USERID.
LST_ZTEGSDT020-XDEZP = LST_DN-XDEZP.
LST_ZTEGSDT020-DATFM = LST_DN-DATFM.
LST_ZTEGSDT020-Z_REPORT_FORMAT = LST_DN-Z_REPORT_FORMAT.
LST_ZTEGSDT020-Z_REPORT_LANG = LST_DN-Z_REPORT_LANG.
LST_ZTEGSDT020-Z_REPORT_TITLE = LST_DN-Z_REPORT_TITLE.
LST_ZTEGSDT020-Z_CRE_YMD = LW_DATUM.
LST_ZTEGSDT020-Z_CRE_HMS = LW_UZEIT.
LST_ZTEGSDT020-Z_CRE_USERID = LW_UNAME.
APPEND LST_ZTEGSDT020 TO LTD_ZTEGSDT020.

*     テーブル更新
IF LW_END = 'X'.
CLEAR LW_ERRFLG.
PERFORM UPDATE_DELIVERY_DATA USING LST_ZTEGZZT001
LST_ZTEGSDT019
LTD_ZTEGSDT020
LTD_ZSDT020
LST_DN
LW_INSERT_19
LW_MODE
CHANGING O_TD_MESSAGE
LW_ERRFLG.
IF LW_ERRFLG = 'X'.
O_ERROR_DN = O_ERROR_DN + 1.  "エラー件数
ELSE.
O_NORMAL_DN = O_NORMAL_DN + 1.  "正常件数
ENDIF.
CLEAR LW_END.
REFRESH LTD_ZTEGSDT020.
ENDIF.
ENDLOOP.
ENDIF.

ENDFORM.                    " UPDATE_TABLE
*&---------------------------------------------------------------------*
*&      Form  GET_LOCAL_CODEPAGE
*&---------------------------------------------------------------------*
*       ローカルコードページ取得
*----------------------------------------------------------------------*
*      <--O_OUTPUT_CP
*----------------------------------------------------------------------*
FORM GET_LOCAL_CODEPAGE  CHANGING O_OUTPUT_CP TYPE ANY.

DATA LW_CODE TYPE CPCODEPAGE.

CALL FUNCTION 'NLS_GET_FRONTEND_CP'
EXPORTING
LANGU                       = SY-LANGU
IMPORTING
FRONTEND_CODEPAGE           = LW_CODE
EXCEPTIONS
ILLEGAL_SYST_CODEPAGE       = 1
NO_FRONTEND_CP_FOUND        = 2
INTERNAL_OR_DB_ERROR        = 3
OTHERS                      = 4.
IF SY-SUBRC = 0.
CALL FUNCTION 'SCP_CODEPAGE_INFO'
EXPORTING
CODEPAGE               = LW_CODE
IMPORTING
HTTP_NAME              = O_OUTPUT_CP.
ENDIF.

ENDFORM.                    " GET_LOCAL_CODEPAGE
*&---------------------------------------------------------------------*
*&      Form  GET_SERNO
*&---------------------------------------------------------------------*
*       番号範囲オブジェクト（ZEGZZ0001）により発番
*----------------------------------------------------------------------*
*      <--O_NO
*----------------------------------------------------------------------*
FORM GET_SERNO  CHANGING O_NO TYPE ANY.

CALL FUNCTION 'NUMBER_GET_NEXT'
EXPORTING
NR_RANGE_NR                   = '01'
OBJECT                        = 'ZEGZZ0001'
IMPORTING
NUMBER                        = O_NO.

ENDFORM.                    " GET_SERNO
*&---------------------------------------------------------------------*
*&      Form  UPDATE_INVOICE_DATA
*&---------------------------------------------------------------------*
*       Invoiceテーブル更新
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_ST_ZTEGSDT011
*      -->I_TD_ZTEGSDT012
*      -->I_TD_ZSDT012
*      -->I_ST_INV
*      -->I_FLG
*      -->I_MODE
*      <--O_TD_MESSAGE
*      <--O_ERRFLG
*----------------------------------------------------------------------*
FORM UPDATE_INVOICE_DATA  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_ST_ZTEGSDT011 TYPE ZTEGSDT011
I_TD_ZTEGSDT012 TYPE TYP_TD_ZTEGSDT012
I_TD_ZSDT012    TYPE TYP_TD_ZSDT012
I_ST_INV        TYPE TYP_INV
I_FLG           TYPE ANY
I_MODE          TYPE ANY
CHANGING O_TD_MESSAGE    TYPE TYP_TD_MESSAGE
O_ERRFLG        TYPE ANY.

DATA: LST_MESSAGE TYPE TYP_MESSAGE,
LW_VBELN    TYPE LIKP-VBELN,
LW_INFO     TYPE STRING.

* メッセージインフォ
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = I_ST_INV-VBELN
IMPORTING
OUTPUT        = LW_VBELN.
CONCATENATE TEXT-M08
LW_VBELN
INTO LW_INFO
SEPARATED BY SPACE.

* Invoiceテーブルロック
PERFORM LOCK_TABLE_INV USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT012
I_ST_INV
I_FLG
I_MODE
CHANGING O_TD_MESSAGE
O_ERRFLG.
IF O_ERRFLG = 'X'.
RETURN.
ENDIF.

* Output Logの登録
INSERT ZTEGZZT001 FROM I_ST_ZTEGZZT001.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*   データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGZZT001' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M04.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*   Invoiceテーブルリリース
PERFORM RELEASE_TABLE_INV USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT012
I_ST_INV
I_MODE.
RETURN.
ENDIF.

* Output Management(Invoice)の登録
IF I_FLG = 'X'.
INSERT ZTEGSDT011 FROM I_ST_ZTEGSDT011.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*     データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGSDT011' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M04.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*     Invoiceテーブルリリース
PERFORM RELEASE_TABLE_INV USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT012
I_ST_INV
I_MODE.
RETURN.
ENDIF.
ENDIF.

* Output Work(Invoice)の削除
READ TABLE I_TD_ZSDT012 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = I_MODE
VBELN         = I_ST_INV-VBELN
ERDAT         = I_ST_INV-ERDAT.
IF SY-SUBRC = 0.
DELETE FROM ZTEGSDT012
WHERE Z_OUTPUT_MODE = I_MODE
AND VBELN         = I_ST_INV-VBELN
AND ERDAT         = I_ST_INV-ERDAT.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*     データ削除に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S033(ZMEGSD01) WITH 'ZTEGSDT012' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M04.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*     Invoiceテーブルリリース
PERFORM RELEASE_TABLE_INV USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT012
I_ST_INV
I_MODE.
RETURN.
ENDIF.
ENDIF.

* Output Work(Invoice)の登録
INSERT ZTEGSDT012 FROM TABLE I_TD_ZTEGSDT012 ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*   データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGSDT012' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M04.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*   Invoiceテーブルリリース
PERFORM RELEASE_TABLE_INV USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT012
I_ST_INV
I_MODE.
RETURN.
ENDIF.

COMMIT WORK AND WAIT.

* データ登録が正常終了しました。
MESSAGE S013(ZMEGSD01) INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M04.
LST_MESSAGE-MSGTYP = TEXT-M06.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

* Invoiceテーブルリリース
PERFORM RELEASE_TABLE_INV USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT012
I_ST_INV
I_MODE.

ENDFORM.                    " UPDATE_INVOICE_DATA
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_INV
*&---------------------------------------------------------------------*
*       Invoiceテーブルロック
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_TD_ZTEGSDT012
*      -->I_ST_INV
*      -->I_ST_FLG
*      -->I_ST_MODE
*      <--O_TD_MESSAGE
*      <--O_TD_ERRFLG
*----------------------------------------------------------------------*
FORM LOCK_TABLE_INV  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_TD_ZTEGSDT012 TYPE TYP_TD_ZTEGSDT012
I_ST_INV        TYPE TYP_INV
I_FLG           TYPE ANY
I_MODE          TYPE ANY
CHANGING O_TD_MESSAGE    TYPE TYP_TD_MESSAGE
O_ERRFLG        TYPE ANY.

DATA: LST_MESSAGE    TYPE TYP_MESSAGE,
LST_ZTEGSDT012 TYPE ZTEGSDT012,
LTD_LOCK       TYPE TYP_TD_ZTEGSDT012,
LST_LOCK       TYPE ZTEGSDT012.

* ZTEGZZT001のロック
CALL FUNCTION 'ENQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO
EXCEPTIONS
FOREIGN_LOCK            = 1
SYSTEM_FAILURE          = 2
OTHERS                  = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M04.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
O_ERRFLG = 'X'.
RETURN.
ENDIF.

* ZTEGSDT011のロック
IF I_FLG = 'X'.
CALL FUNCTION 'ENQUEUE_EZZTEGSDT011'
EXPORTING
MODE_ZTEGSDT011       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = I_MODE
VBELN                 = I_ST_INV-VBELN
ERDAT                 = I_ST_INV-ERDAT
EXCEPTIONS
FOREIGN_LOCK          = 1
SYSTEM_FAILURE        = 2
OTHERS                = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M04.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

*     ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

O_ERRFLG = 'X'.
RETURN.
ENDIF.
ENDIF.

* ZTEGSDT012のロック
LOOP AT I_TD_ZTEGSDT012 INTO LST_ZTEGSDT012.
CALL FUNCTION 'ENQUEUE_EZZTEGSDT012'
EXPORTING
MODE_ZTEGSDT012       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = LST_ZTEGSDT012-Z_OUTPUT_MODE
VBELN                 = LST_ZTEGSDT012-VBELN
ERDAT                 = LST_ZTEGSDT012-ERDAT
POSNR                 = LST_ZTEGSDT012-POSNR
EXCEPTIONS
FOREIGN_LOCK          = 1
SYSTEM_FAILURE        = 2
OTHERS                = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M04.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

*     ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

*     ZTEGSDT011のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGSDT011'
EXPORTING
MODE_ZTEGSDT011       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = I_MODE
VBELN                 = I_ST_INV-VBELN
ERDAT                 = I_ST_INV-ERDAT.

*     ZTEGSDT012のリリース
LOOP AT LTD_LOCK INTO LST_LOCK.
CALL FUNCTION 'DEQUEUE_EZZTEGSDT012'
EXPORTING
MODE_ZTEGSDT012       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = LST_LOCK-Z_OUTPUT_MODE
VBELN                 = LST_LOCK-VBELN
ERDAT                 = LST_LOCK-ERDAT
POSNR                 = LST_LOCK-POSNR.
ENDLOOP.

O_ERRFLG = 'X'.
RETURN.
ELSE.
APPEND LST_ZTEGSDT012 TO LTD_LOCK.
ENDIF.
ENDLOOP.

ENDFORM.                    " LOCK_TABLE_INV
*&---------------------------------------------------------------------*
*&      Form  RELEASE_TABLE_INV
*&---------------------------------------------------------------------*
*       Invoiceテーブルリリース
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_TD_ZTEGSDT012
*      -->I_ST_INV
*      -->I_MODE
*----------------------------------------------------------------------*
FORM RELEASE_TABLE_INV  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_TD_ZTEGSDT012 TYPE TYP_TD_ZTEGSDT012
I_ST_INV        TYPE TYP_INV
I_MODE          TYPE ANY.

DATA LST_LOCK TYPE ZTEGSDT012.

* ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

* ZTEGSDT011のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGSDT011'
EXPORTING
MODE_ZTEGSDT011       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = I_MODE
VBELN                 = I_ST_INV-VBELN
ERDAT                 = I_ST_INV-ERDAT.

* ZTEGSDT012のリリース
LOOP AT I_TD_ZTEGSDT012 INTO LST_LOCK.
CALL FUNCTION 'DEQUEUE_EZZTEGSDT012'
EXPORTING
MODE_ZTEGSDT012       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = LST_LOCK-Z_OUTPUT_MODE
VBELN                 = LST_LOCK-VBELN
ERDAT                 = LST_LOCK-ERDAT
POSNR                 = LST_LOCK-POSNR.
ENDLOOP.

ENDFORM.                    " RELEASE_TABLE_INV
*&---------------------------------------------------------------------*
*&      Form  UPDATE_PACKING_DATA
*&---------------------------------------------------------------------*
*       Packing Listテーブル更新
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_ST_ZTEGSDT013
*      -->I_TD_ZTEGSDT014
*      -->I_TD_ZSDT014
*      -->I_ST_PKG
*      -->I_FLG
*      -->I_MODE
*      <--O_TD_MESSAGE
*      <--O_ERRFLG
*----------------------------------------------------------------------*
FORM UPDATE_PACKING_DATA  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_ST_ZTEGSDT013 TYPE ZTEGSDT013
I_TD_ZTEGSDT014 TYPE TYP_TD_ZTEGSDT014
I_TD_ZSDT014    TYPE TYP_TD_ZSDT014
I_ST_PKG        TYPE TYP_PKG
I_FLG           TYPE ANY
I_MODE          TYPE ANY
CHANGING O_TD_MESSAGE    TYPE TYP_TD_MESSAGE
O_ERRFLG        TYPE ANY.

DATA: LST_MESSAGE TYPE TYP_MESSAGE,
LW_VBELN    TYPE LIKP-VBELN,
LW_INFO     TYPE STRING.

* メッセージインフォ
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = I_ST_PKG-VBELN
IMPORTING
OUTPUT        = LW_VBELN.
CONCATENATE TEXT-M08
LW_VBELN
INTO LW_INFO
SEPARATED BY SPACE.

* Packing Listテーブルロック
PERFORM LOCK_TABLE_PKG USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT014
I_ST_PKG
I_FLG
I_MODE
CHANGING O_TD_MESSAGE
O_ERRFLG.
IF O_ERRFLG = 'X'.
RETURN.
ENDIF.

* Output Logの登録
INSERT ZTEGZZT001 FROM I_ST_ZTEGZZT001.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*   データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGZZT001' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M05.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*   Packing Listテーブルリリース
PERFORM RELEASE_TABLE_PKG USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT014
I_ST_PKG
I_MODE.
RETURN.
ENDIF.

* Output Management(Packing List)の登録
IF I_FLG = 'X'.
INSERT ZTEGSDT013 FROM I_ST_ZTEGSDT013.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*     データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGSDT013' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M05.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*     Packing Listテーブルリリース
PERFORM RELEASE_TABLE_PKG USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT014
I_ST_PKG
I_MODE.
RETURN.
ENDIF.
ENDIF.

* Output Work(Packing List)の削除
READ TABLE I_TD_ZSDT014 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = I_MODE
VBELN         = I_ST_PKG-VBELN
ERDAT         = I_ST_PKG-ERDAT.
IF SY-SUBRC = 0.
DELETE FROM ZTEGSDT014
WHERE Z_OUTPUT_MODE = I_MODE
AND VBELN         = I_ST_PKG-VBELN
AND ERDAT         = I_ST_PKG-ERDAT.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*     データ削除に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S033(ZMEGSD01) WITH 'ZTEGSDT014' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M05.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*     Packing Listテーブルリリース
PERFORM RELEASE_TABLE_PKG USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT014
I_ST_PKG
I_MODE.
RETURN.
ENDIF.
ENDIF.

* Output Work(Packing List)の登録
INSERT ZTEGSDT014 FROM TABLE I_TD_ZTEGSDT014 ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*   データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGSDT014' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M05.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*   Packing Listテーブルリリース
PERFORM RELEASE_TABLE_PKG USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT014
I_ST_PKG
I_MODE.
RETURN.
ENDIF.

COMMIT WORK AND WAIT.

* データ登録が正常終了しました。
MESSAGE S013(ZMEGSD01) INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M05.
LST_MESSAGE-MSGTYP = TEXT-M06.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

* Packing Listテーブルリリース
PERFORM RELEASE_TABLE_PKG USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT014
I_ST_PKG
I_MODE.

ENDFORM.                    " UPDATE_PACKING_DATA
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_PKG
*&---------------------------------------------------------------------*
*       Packing Listテーブルロック
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_TD_ZTEGSDT014
*      -->I_ST_PKG
*      -->I_FLG
*      -->I_MODE
*      <--O_TD_MESSAGE
*      <--O_TD_ERRFLG
*----------------------------------------------------------------------*
FORM LOCK_TABLE_PKG  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_TD_ZTEGSDT014 TYPE TYP_TD_ZTEGSDT014
I_ST_PKG        TYPE TYP_PKG
I_FLG           TYPE ANY
I_MODE          TYPE ANY
CHANGING O_TD_MESSAGE    TYPE TYP_TD_MESSAGE
O_ERRFLG        TYPE ANY.

DATA: LST_MESSAGE    TYPE TYP_MESSAGE,
LST_ZTEGSDT014 TYPE ZTEGSDT014,
LTD_LOCK       TYPE TYP_TD_ZTEGSDT014,
LST_LOCK       TYPE ZTEGSDT014.

* ZTEGZZT001のロック
CALL FUNCTION 'ENQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO
EXCEPTIONS
FOREIGN_LOCK            = 1
SYSTEM_FAILURE          = 2
OTHERS                  = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M05.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
O_ERRFLG = 'X'.
RETURN.
ENDIF.

* ZTEGSDT013のロック
IF I_FLG = 'X'.
CALL FUNCTION 'ENQUEUE_EZZTEGSDT013'
EXPORTING
MODE_ZTEGSDT013       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = I_MODE
VBELN                 = I_ST_PKG-VBELN
ERDAT                 = I_ST_PKG-ERDAT
EXCEPTIONS
FOREIGN_LOCK          = 1
SYSTEM_FAILURE        = 2
OTHERS                = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M05.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

*     ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

O_ERRFLG = 'X'.
RETURN.
ENDIF.
ENDIF.

* ZTEGSDT014のロック
LOOP AT I_TD_ZTEGSDT014 INTO LST_ZTEGSDT014.
CALL FUNCTION 'ENQUEUE_EZZTEGSDT014'
EXPORTING
MODE_ZTEGSDT014       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = LST_ZTEGSDT014-Z_OUTPUT_MODE
VBELN                 = LST_ZTEGSDT014-VBELN
ERDAT                 = LST_ZTEGSDT014-ERDAT
POSNR                 = LST_ZTEGSDT014-POSNR
Z_PKG_POSNR_SUB       = LST_ZTEGSDT014-Z_PKG_POSNR_SUB
EXCEPTIONS
FOREIGN_LOCK          = 1
SYSTEM_FAILURE        = 2
OTHERS                = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M05.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

*     ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

*     ZTEGSDT013のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGSDT013'
EXPORTING
MODE_ZTEGSDT013       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = I_MODE
VBELN                 = I_ST_PKG-VBELN
ERDAT                 = I_ST_PKG-ERDAT.

*     ZTEGSDT014のリリース
LOOP AT LTD_LOCK INTO LST_LOCK.
CALL FUNCTION 'DEQUEUE_EZZTEGSDT014'
EXPORTING
MODE_ZTEGSDT014       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = LST_LOCK-Z_OUTPUT_MODE
VBELN                 = LST_LOCK-VBELN
ERDAT                 = LST_LOCK-ERDAT
POSNR                 = LST_LOCK-POSNR
Z_PKG_POSNR_SUB       = LST_LOCK-Z_PKG_POSNR_SUB.
ENDLOOP.

O_ERRFLG = 'X'.
RETURN.
ELSE.
APPEND LST_ZTEGSDT014 TO LTD_LOCK.
ENDIF.
ENDLOOP.

ENDFORM.                    " LOCK_TABLE_PKG
*&---------------------------------------------------------------------*
*&      Form  RELEASE_TABLE_PKG
*&---------------------------------------------------------------------*
*       Packing Listテーブルリリース
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_TD_ZTEGSDT014
*      -->I_ST_PKG
*      -->I_MODE
*----------------------------------------------------------------------*
FORM RELEASE_TABLE_PKG  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_TD_ZTEGSDT014 TYPE TYP_TD_ZTEGSDT014
I_ST_PKG        TYPE TYP_PKG
I_MODE          TYPE ANY.

DATA LST_LOCK TYPE ZTEGSDT014.

* ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

* ZTEGSDT013のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGSDT013'
EXPORTING
MODE_ZTEGSDT013       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = I_MODE
VBELN                 = I_ST_PKG-VBELN
ERDAT                 = I_ST_PKG-ERDAT.

* ZTEGSDT014のリリース
LOOP AT I_TD_ZTEGSDT014 INTO LST_LOCK.
CALL FUNCTION 'DEQUEUE_EZZTEGSDT014'
EXPORTING
MODE_ZTEGSDT014       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = LST_LOCK-Z_OUTPUT_MODE
VBELN                 = LST_LOCK-VBELN
ERDAT                 = LST_LOCK-ERDAT
POSNR                 = LST_LOCK-POSNR
Z_PKG_POSNR_SUB       = LST_LOCK-Z_PKG_POSNR_SUB.
ENDLOOP.

ENDFORM.                    " RELEASE_TABLE_PKG
*&---------------------------------------------------------------------*
*&      Form  UPDATE_DELIVERY_DATA
*&---------------------------------------------------------------------*
*       Delivery Noteテーブル更新
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_ST_ZTEGSDT019
*      -->I_TD_ZTEGSDT020
*      -->I_TD_ZSDT020
*      -->I_ST_DN
*      -->I_FLG
*      -->I_MODE
*      <--O_TD_MESSAGE
*      <--O_ERRFLG
*----------------------------------------------------------------------*
FORM UPDATE_DELIVERY_DATA  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_ST_ZTEGSDT019 TYPE ZTEGSDT019
I_TD_ZTEGSDT020 TYPE TYP_TD_ZTEGSDT020
I_TD_ZSDT020    TYPE TYP_TD_ZSDT020
I_ST_DN         TYPE TYP_INV
I_FLG           TYPE ANY
I_MODE          TYPE ANY
CHANGING O_TD_MESSAGE    TYPE TYP_TD_MESSAGE
O_ERRFLG        TYPE ANY.

DATA: LST_MESSAGE TYPE TYP_MESSAGE,
LW_VBELN    TYPE LIKP-VBELN,
LW_INFO     TYPE STRING.

* メッセージインフォ
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
EXPORTING
INPUT         = I_ST_DN-VBELN
IMPORTING
OUTPUT        = LW_VBELN.
CONCATENATE TEXT-M08
LW_VBELN
INTO LW_INFO
SEPARATED BY SPACE.

* Delivery Noteテーブルロック
PERFORM LOCK_TABLE_DN USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT020
I_ST_DN
I_FLG
I_MODE
CHANGING O_TD_MESSAGE
O_ERRFLG.
IF O_ERRFLG = 'X'.
RETURN.
ENDIF.

* Output Logの登録
INSERT ZTEGZZT001 FROM I_ST_ZTEGZZT001.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*   データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGZZT001' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M10.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*   Delivery Noteテーブルリリース
PERFORM RELEASE_TABLE_DN USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT020
I_ST_DN
I_MODE.
RETURN.
ENDIF.

* Output Management(Delivery Note)の登録
IF I_FLG = 'X'.
INSERT ZTEGSDT019 FROM I_ST_ZTEGSDT019.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*     データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGSDT019' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M10.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*     Delivery Noteテーブルリリース
PERFORM RELEASE_TABLE_DN USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT020
I_ST_DN
I_MODE.
RETURN.
ENDIF.
ENDIF.

* Output Work(Delivery Note)の削除
READ TABLE I_TD_ZSDT020 TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_OUTPUT_MODE = I_MODE
VBELN         = I_ST_DN-VBELN
ERDAT         = I_ST_DN-ERDAT.
IF SY-SUBRC = 0.
DELETE FROM ZTEGSDT020
WHERE Z_OUTPUT_MODE = I_MODE
AND VBELN         = I_ST_DN-VBELN
AND ERDAT         = I_ST_DN-ERDAT.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*     データ削除に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S033(ZMEGSD01) WITH 'ZTEGSDT020' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M10.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*     Delivery Noteテーブルリリース
PERFORM RELEASE_TABLE_DN USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT020
I_ST_DN
I_MODE.
RETURN.
ENDIF.
ENDIF.

* Output Work(Delivery Note)の登録
INSERT ZTEGSDT020 FROM TABLE I_TD_ZTEGSDT020 ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
O_ERRFLG = 'X'.
*   データ更新に失敗しました。(TBL = &1 / MSG = &2 )
MESSAGE S012(ZMEGSD01) WITH 'ZTEGSDT020' LW_INFO
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M10.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
*   Delivery Noteテーブルリリース
PERFORM RELEASE_TABLE_DN USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT020
I_ST_DN
I_MODE.
RETURN.
ENDIF.

COMMIT WORK AND WAIT.

* データ登録が正常終了しました。
MESSAGE S013(ZMEGSD01) INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M10.
LST_MESSAGE-MSGTYP = TEXT-M06.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

* Delivery Noteテーブルリリース
PERFORM RELEASE_TABLE_DN USING I_ST_ZTEGZZT001
I_TD_ZTEGSDT020
I_ST_DN
I_MODE.

ENDFORM.                    " UPDATE_DELIVERY_DATA
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_DN
*&---------------------------------------------------------------------*
*       Delivery Noteテーブルロック
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_TD_ZTEGSDT020
*      -->I_ST_DN
*      -->I_ST_FLG
*      -->I_ST_MODE
*      <--O_TD_MESSAGE
*      <--O_TD_ERRFLG
*----------------------------------------------------------------------*
FORM LOCK_TABLE_DN  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_TD_ZTEGSDT020 TYPE TYP_TD_ZTEGSDT020
I_ST_DN         TYPE TYP_INV
I_FLG           TYPE ANY
I_MODE          TYPE ANY
CHANGING O_TD_MESSAGE    TYPE TYP_TD_MESSAGE
O_ERRFLG        TYPE ANY.

DATA: LST_MESSAGE    TYPE TYP_MESSAGE,
LST_ZTEGSDT020 TYPE ZTEGSDT020,
LTD_LOCK       TYPE TYP_TD_ZTEGSDT020,
LST_LOCK       TYPE ZTEGSDT020.

* ZTEGZZT001のロック
CALL FUNCTION 'ENQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO
EXCEPTIONS
FOREIGN_LOCK            = 1
SYSTEM_FAILURE          = 2
OTHERS                  = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M10.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.
O_ERRFLG = 'X'.
RETURN.
ENDIF.

* ZTEGSDT019のロック
IF I_FLG = 'X'.
CALL FUNCTION 'ENQUEUE_EZZTEGSDT019'
EXPORTING
MODE_ZTEGSDT019       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = I_MODE
VBELN                 = I_ST_DN-VBELN
ERDAT                 = I_ST_DN-ERDAT
EXCEPTIONS
FOREIGN_LOCK          = 1
SYSTEM_FAILURE        = 2
OTHERS                = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M10.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

*     ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

O_ERRFLG = 'X'.
RETURN.
ENDIF.
ENDIF.

* ZTEGSDT020のロック
LOOP AT I_TD_ZTEGSDT020 INTO LST_ZTEGSDT020.
CALL FUNCTION 'ENQUEUE_EZZTEGSDT020'
EXPORTING
MODE_ZTEGSDT020       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = LST_ZTEGSDT020-Z_OUTPUT_MODE
VBELN                 = LST_ZTEGSDT020-VBELN
ERDAT                 = LST_ZTEGSDT020-ERDAT
POSNR                 = LST_ZTEGSDT020-POSNR
EXCEPTIONS
FOREIGN_LOCK          = 1
SYSTEM_FAILURE        = 2
OTHERS                = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE 'S' NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LST_MESSAGE-MSG.
LST_MESSAGE-TYP = TEXT-M10.
LST_MESSAGE-MSGTYP = TEXT-M07.
APPEND LST_MESSAGE TO O_TD_MESSAGE.

*     ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

*     ZTEGSDT019のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGSDT019'
EXPORTING
MODE_ZTEGSDT019       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = I_MODE
VBELN                 = I_ST_DN-VBELN
ERDAT                 = I_ST_DN-ERDAT.

*     ZTEGSDT020のリリース
LOOP AT LTD_LOCK INTO LST_LOCK.
CALL FUNCTION 'DEQUEUE_EZZTEGSDT020'
EXPORTING
MODE_ZTEGSDT020       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = LST_LOCK-Z_OUTPUT_MODE
VBELN                 = LST_LOCK-VBELN
ERDAT                 = LST_LOCK-ERDAT
POSNR                 = LST_LOCK-POSNR.
ENDLOOP.

O_ERRFLG = 'X'.
RETURN.
ELSE.
APPEND LST_ZTEGSDT020 TO LTD_LOCK.
ENDIF.
ENDLOOP.

ENDFORM.                    " LOCK_TABLE_DN
*&---------------------------------------------------------------------*
*&      Form  RELEASE_TABLE_DN
*&---------------------------------------------------------------------*
*       Delivery Noteテーブルリリース
*----------------------------------------------------------------------*
*      -->I_ST_ZTEGZZT001
*      -->I_TD_ZTEGSDT020
*      -->I_ST_DN
*      -->I_MODE
*----------------------------------------------------------------------*
FORM RELEASE_TABLE_DN  USING I_ST_ZTEGZZT001 TYPE ZTEGZZT001
I_TD_ZTEGSDT020 TYPE TYP_TD_ZTEGSDT020
I_ST_DN         TYPE TYP_INV
I_MODE          TYPE ANY.

DATA LST_LOCK TYPE ZTEGSDT020.

* ZTEGZZT001のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGZZT001'
EXPORTING
MODE_ZTEGZZT001         = 'E'
MANDT                   = SY-MANDT
Z_OUTPUT_LOG_NO         = I_ST_ZTEGZZT001-Z_OUTPUT_LOG_NO.

* ZTEGSDT019のリリース
CALL FUNCTION 'DEQUEUE_EZZTEGSDT019'
EXPORTING
MODE_ZTEGSDT019       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = I_MODE
VBELN                 = I_ST_DN-VBELN
ERDAT                 = I_ST_DN-ERDAT.

* ZTEGSDT020のリリース
LOOP AT I_TD_ZTEGSDT020 INTO LST_LOCK.
CALL FUNCTION 'DEQUEUE_EZZTEGSDT020'
EXPORTING
MODE_ZTEGSDT020       = 'E'
MANDT                 = SY-MANDT
Z_OUTPUT_MODE         = LST_LOCK-Z_OUTPUT_MODE
VBELN                 = LST_LOCK-VBELN
ERDAT                 = LST_LOCK-ERDAT
POSNR                 = LST_LOCK-POSNR.
ENDLOOP.

ENDFORM.                    " RELEASE_TABLE_DN
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_FILE
*&---------------------------------------------------------------------*
*       ファイル出力
*----------------------------------------------------------------------*
*      -->I_TD_FILE_INV
*      -->I_TD_FILE_PKG
*      -->I_TD_FILE_DN
*      -->I_FNAME_INV
*      -->I_FNAME_PKG
*      -->I_FNAME_DN
*      -->I_OUTPUT_CP_INV
*      -->I_OUTPUT_CP_PKG
*      -->I_OUTPUT_CP_DN
*----------------------------------------------------------------------*
FORM OUTPUT_FILE  USING I_TD_FILE_INV   TYPE TYP_TD_FILE_INV
I_TD_FILE_PKG   TYPE TYP_TD_FILE_PKG
I_TD_FILE_DN    TYPE TYP_TD_FILE_DN
I_FNAME_INV     TYPE ANY
I_FNAME_PKG     TYPE ANY
I_FNAME_DN      TYPE ANY
I_OUTPUT_CP_INV TYPE ANY
I_OUTPUT_CP_PKG TYPE ANY
I_OUTPUT_CP_DN  TYPE ANY.

DATA: LW_SFILE     TYPE STRING,
LST_FILE_INV TYPE ZSEGSD0012,
LST_FILE_PKG TYPE ZSEGSD0013,
LST_FILE_DN  TYPE ZSEGSD0021,
LW_CODEPAGE  TYPE ABAP_ENCODING,
LW_FNAME     TYPE STRING,
LW_ERRFLG    TYPE CHAR1,
LW_STR       TYPE STRING,
LW_CODE_STR  TYPE STRING,
LTD_FILE_INV TYPE TYP_TD_FILE_INV,
LTD_FILE_PKG TYPE TYP_TD_FILE_PKG,
LTD_FILE_DN  TYPE TYP_TD_FILE_DN.

* 選択画面のチェックボックス「Invoice」がONの場合
IF CB_INV = 'X'.
*   コードページ取得
LW_CODE_STR = I_OUTPUT_CP_INV.
IF LW_CODE_STR IS NOT INITIAL.
LW_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( LW_CODE_STR ).
ENDIF.
*   サーバファイル
IF RB_DOWN IS INITIAL.
OPEN DATASET I_FNAME_INV FOR OUTPUT IN TEXT MODE
ENCODING DEFAULT
IGNORING CONVERSION ERRORS.
IF SY-SUBRC <> 0.
LW_ERRFLG = 'X'.
*       ファイルオープンエラー &1
MESSAGE S035(ZMEGSD01) WITH I_FNAME_INV
DISPLAY LIKE 'E'.
ELSE.
*       データ出力
LOOP AT I_TD_FILE_INV INTO LST_FILE_INV.
CONCATENATE LST_FILE_INV-LNAME
LST_FILE_INV-Z_COMP_NAME
LST_FILE_INV-Z_COMP_ADDRESS1
LST_FILE_INV-Z_COMP_ADDRESS2
LST_FILE_INV-Z_COMP_TEL
LST_FILE_INV-Z_COMP_FAX
LST_FILE_INV-Z_INVOICE_NO
LST_FILE_INV-Z_INVOICE_DATE
LST_FILE_INV-Z_CUST_BT
LST_FILE_INV-Z_CUST_NAME_BT
LST_FILE_INV-Z_ADDRESS1_BT
LST_FILE_INV-Z_ADDRESS2_BT
LST_FILE_INV-Z_ATTN_BT
LST_FILE_INV-Z_TEL_BT
LST_FILE_INV-Z_FAX_BT
LST_FILE_INV-Z_CUST_ST
LST_FILE_INV-Z_CUST_NAME_ST
LST_FILE_INV-Z_ADDRESS1_ST
LST_FILE_INV-Z_ADDRESS2_ST
LST_FILE_INV-Z_ATTN_ST
LST_FILE_INV-Z_TEL_ST
LST_FILE_INV-Z_FAX_ST
LST_FILE_INV-Z_SHIPPED_PER
LST_FILE_INV-Z_ON_OR_ABOUT
LST_FILE_INV-Z_TRADE_FROM
LST_FILE_INV-Z_TRADE_TO
LST_FILE_INV-Z_TRADE_VIA
LST_FILE_INV-Z_TRADE_PAYMENT
LST_FILE_INV-Z_TRADE_TERM
LST_FILE_INV-Z_CASEMARK1
LST_FILE_INV-Z_CASEMARK2
LST_FILE_INV-Z_CASEMARK3
LST_FILE_INV-Z_CASEMARK4
LST_FILE_INV-Z_CASEMARK5
LST_FILE_INV-VBELN
LST_FILE_INV-POSNR
LST_FILE_INV-MATNR
LST_FILE_INV-BSTKD
LST_FILE_INV-VGBEL
LST_FILE_INV-VGPOS
LST_FILE_INV-KDMAT
LST_FILE_INV-MAKTX
LST_FILE_INV-Z_PURPOSE
LST_FILE_INV-STAWN
LST_FILE_INV-LANDX
LST_FILE_INV-STOFT
LST_FILE_INV-LFIMG
LST_FILE_INV-VRKME
LST_FILE_INV-NETPR
LST_FILE_INV-WAERK_O
LST_FILE_INV-NETWR
LST_FILE_INV-WAERS_O
LST_FILE_INV-Z_INV_REMARKS1
LST_FILE_INV-Z_INV_REMARKS2
LST_FILE_INV-Z_INV_REMARKS3
LST_FILE_INV-Z_INV_REMARKS4
LST_FILE_INV-Z_INV_REMARKS5
LST_FILE_INV-VSTEL
LST_FILE_INV-Z_OUTPUT_USERID
LST_FILE_INV-XDEZP
LST_FILE_INV-DATFM
LST_FILE_INV-Z_REPORT_FORMAT
LST_FILE_INV-Z_REPORT_LANG
LST_FILE_INV-Z_REPORT_TITLE

INTO LW_SFILE
SEPARATED BY CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.
TRANSFER LW_SFILE TO I_FNAME_INV.
ENDLOOP.
CLOSE DATASET I_FNAME_INV.
ENDIF.

*   ローカルファイル
ELSE.
*     ヘッダ取得
CLEAR LST_FILE_INV.
CALL FUNCTION 'ZEG_ZZ_DD04T_GET'
EXPORTING
IMPTSNAME          = 'ZSEGSD0012'
IMPLANGU           = SY-LANGU
IMPORTING
EXPSCRTEXT_L       = LW_STR.
SPLIT LW_STR AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
INTO LST_FILE_INV-LNAME
LST_FILE_INV-Z_COMP_NAME
LST_FILE_INV-Z_COMP_ADDRESS1
LST_FILE_INV-Z_COMP_ADDRESS2
LST_FILE_INV-Z_COMP_TEL
LST_FILE_INV-Z_COMP_FAX
LST_FILE_INV-Z_INVOICE_NO
LST_FILE_INV-Z_INVOICE_DATE
LST_FILE_INV-Z_CUST_BT
LST_FILE_INV-Z_CUST_NAME_BT
LST_FILE_INV-Z_ADDRESS1_BT
LST_FILE_INV-Z_ADDRESS2_BT
LST_FILE_INV-Z_ATTN_BT
LST_FILE_INV-Z_TEL_BT
LST_FILE_INV-Z_FAX_BT
LST_FILE_INV-Z_CUST_ST
LST_FILE_INV-Z_CUST_NAME_ST
LST_FILE_INV-Z_ADDRESS1_ST
LST_FILE_INV-Z_ADDRESS2_ST
LST_FILE_INV-Z_ATTN_ST
LST_FILE_INV-Z_TEL_ST
LST_FILE_INV-Z_FAX_ST
LST_FILE_INV-Z_SHIPPED_PER
LST_FILE_INV-Z_ON_OR_ABOUT
LST_FILE_INV-Z_TRADE_FROM
LST_FILE_INV-Z_TRADE_TO
LST_FILE_INV-Z_TRADE_VIA
LST_FILE_INV-Z_TRADE_PAYMENT
LST_FILE_INV-Z_TRADE_TERM
LST_FILE_INV-Z_CASEMARK1
LST_FILE_INV-Z_CASEMARK2
LST_FILE_INV-Z_CASEMARK3
LST_FILE_INV-Z_CASEMARK4
LST_FILE_INV-Z_CASEMARK5
LST_FILE_INV-VBELN
LST_FILE_INV-POSNR
LST_FILE_INV-MATNR
LST_FILE_INV-BSTKD
LST_FILE_INV-VGBEL
LST_FILE_INV-VGPOS
LST_FILE_INV-KDMAT
LST_FILE_INV-MAKTX
LST_FILE_INV-Z_PURPOSE
LST_FILE_INV-STAWN
LST_FILE_INV-LANDX
LST_FILE_INV-STOFT
LST_FILE_INV-LFIMG
LST_FILE_INV-VRKME
LST_FILE_INV-NETPR
LST_FILE_INV-WAERK_O
LST_FILE_INV-NETWR
LST_FILE_INV-WAERS_O
LST_FILE_INV-Z_INV_REMARKS1
LST_FILE_INV-Z_INV_REMARKS2
LST_FILE_INV-Z_INV_REMARKS3
LST_FILE_INV-Z_INV_REMARKS4
LST_FILE_INV-Z_INV_REMARKS5
LST_FILE_INV-VSTEL
LST_FILE_INV-Z_OUTPUT_USERID
LST_FILE_INV-XDEZP
LST_FILE_INV-DATFM
LST_FILE_INV-Z_REPORT_FORMAT
LST_FILE_INV-Z_REPORT_LANG
LST_FILE_INV-Z_REPORT_TITLE.
APPEND LST_FILE_INV TO LTD_FILE_INV.
APPEND LINES OF I_TD_FILE_INV TO LTD_FILE_INV.

LW_FNAME = I_FNAME_INV.
CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
FILENAME                        = LW_FNAME
FILETYPE                        = 'ASC'
WRITE_FIELD_SEPARATOR           = ABAP_TRUE
CODEPAGE                        = LW_CODEPAGE
TABLES
DATA_TAB                        = LTD_FILE_INV
EXCEPTIONS
FILE_WRITE_ERROR                = 1
NO_BATCH                        = 2
GUI_REFUSE_FILETRANSFER         = 3
INVALID_TYPE                    = 4
NO_AUTHORITY                    = 5
UNKNOWN_ERROR                   = 6
HEADER_NOT_ALLOWED              = 7
SEPARATOR_NOT_ALLOWED           = 8
FILESIZE_NOT_ALLOWED            = 9
HEADER_TOO_LONG                 = 10
DP_ERROR_CREATE                 = 11
DP_ERROR_SEND                   = 12
DP_ERROR_WRITE                  = 13
UNKNOWN_DP_ERROR                = 14
ACCESS_DENIED                   = 15
DP_OUT_OF_MEMORY                = 16
DISK_FULL                       = 17
DP_TIMEOUT                      = 18
FILE_NOT_FOUND                  = 19
DATAPROVIDER_EXCEPTION          = 20
CONTROL_FLUSH_ERROR             = 21
OTHERS                          = 22.
IF SY-SUBRC <> 0.
LW_ERRFLG = 'X'.
*       ダウンロードできませんでした
MESSAGE S036(ZMEGSD01) DISPLAY LIKE 'E'.
ENDIF.
ENDIF.
ENDIF.

CLEAR: LW_SFILE,
LW_STR,
LW_CODE_STR.

* 選択画面のチェックボックス「Packing List」がONの場合
IF CB_PKG = 'X'.
*   コードページ取得
LW_CODE_STR = I_OUTPUT_CP_PKG.
IF LW_CODE_STR IS NOT INITIAL.
LW_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( LW_CODE_STR ).
ENDIF.
*   サーバファイル
IF RB_DOWN IS INITIAL.
OPEN DATASET I_FNAME_PKG FOR OUTPUT IN TEXT MODE
ENCODING DEFAULT
IGNORING CONVERSION ERRORS.
IF SY-SUBRC <> 0.
LW_ERRFLG = 'X'.
*       ファイルオープンエラー &1
MESSAGE S035(ZMEGSD01) WITH I_FNAME_PKG
DISPLAY LIKE 'E'.
ELSE.
*       データ出力
LOOP AT I_TD_FILE_PKG INTO LST_FILE_PKG.
CONCATENATE LST_FILE_PKG-LNAME
LST_FILE_PKG-Z_COMP_NAME
LST_FILE_PKG-Z_COMP_ADDRESS1
LST_FILE_PKG-Z_COMP_ADDRESS2
LST_FILE_PKG-Z_COMP_TEL
LST_FILE_PKG-Z_COMP_FAX
LST_FILE_PKG-Z_INVOICE_NO
LST_FILE_PKG-Z_INVOICE_DATE
LST_FILE_PKG-Z_CUST_BT
LST_FILE_PKG-Z_CUST_NAME_BT
LST_FILE_PKG-Z_ADDRESS1_BT
LST_FILE_PKG-Z_ADDRESS2_BT
LST_FILE_PKG-Z_ATTN_BT
LST_FILE_PKG-Z_TEL_BT
LST_FILE_PKG-Z_FAX_BT
LST_FILE_PKG-Z_CUST_ST
LST_FILE_PKG-Z_CUST_NAME_ST
LST_FILE_PKG-Z_ADDRESS1_ST
LST_FILE_PKG-Z_ADDRESS2_ST
LST_FILE_PKG-Z_ATTN_ST
LST_FILE_PKG-Z_TEL_ST
LST_FILE_PKG-Z_FAX_ST
LST_FILE_PKG-Z_SHIPPED_PER
LST_FILE_PKG-Z_ON_OR_ABOUT
LST_FILE_PKG-Z_TRADE_FROM
LST_FILE_PKG-Z_TRADE_TO
LST_FILE_PKG-Z_TRADE_VIA
LST_FILE_PKG-Z_TRADE_PAYMENT
LST_FILE_PKG-Z_TRADE_TERM
LST_FILE_PKG-Z_CASEMARK1
LST_FILE_PKG-Z_CASEMARK2
LST_FILE_PKG-Z_CASEMARK3
LST_FILE_PKG-Z_CASEMARK4
LST_FILE_PKG-Z_CASEMARK5
LST_FILE_PKG-VBELN
LST_FILE_PKG-POSNR
LST_FILE_PKG-Z_PKG_POSNR_SUB
LST_FILE_PKG-Z_CASENO_FROM
LST_FILE_PKG-Z_CASENO_TO
LST_FILE_PKG-Z_CASE_COUNT
LST_FILE_PKG-Z_MEINS_PACK
LST_FILE_PKG-Z_CASE_MIX
LST_FILE_PKG-MATNR
LST_FILE_PKG-BSTKD
LST_FILE_PKG-VGBEL
LST_FILE_PKG-VGPOS
LST_FILE_PKG-KDMAT
LST_FILE_PKG-MAKTX
LST_FILE_PKG-Z_PURPOSE
LST_FILE_PKG-STAWN
LST_FILE_PKG-LANDX
LST_FILE_PKG-STOFT
LST_FILE_PKG-Z_LFIMG_UNIT
LST_FILE_PKG-Z_LFIMG
LST_FILE_PKG-Z_VRKME
LST_FILE_PKG-Z_NETWEIGHT_UNIT
LST_FILE_PKG-Z_NETWEIGHT
LST_FILE_PKG-Z_GEWEI_NW
LST_FILE_PKG-Z_GRSWEIGHT_UNIT
LST_FILE_PKG-Z_GRSWEIGHT
LST_FILE_PKG-Z_GEWEI_GW
LST_FILE_PKG-Z_LENGTH
LST_FILE_PKG-Z_WIDTH
LST_FILE_PKG-Z_HEIGHT
LST_FILE_PKG-Z_VOLUM_UNIT
LST_FILE_PKG-Z_VOLUM
LST_FILE_PKG-Z_VOLEH
LST_FILE_PKG-Z_PKG_REMARKS
LST_FILE_PKG-Z_INV_REMARKS1
LST_FILE_PKG-Z_INV_REMARKS2
LST_FILE_PKG-Z_INV_REMARKS3
LST_FILE_PKG-Z_INV_REMARKS4
LST_FILE_PKG-Z_INV_REMARKS5
LST_FILE_PKG-VSTEL
LST_FILE_PKG-Z_OUTPUT_USERID
LST_FILE_PKG-XDEZP
LST_FILE_PKG-DATFM
LST_FILE_PKG-Z_REPORT_FORMAT
LST_FILE_PKG-Z_REPORT_LANG
LST_FILE_PKG-Z_REPORT_TITLE
INTO LW_SFILE
SEPARATED BY CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.
TRANSFER LW_SFILE TO I_FNAME_PKG.
ENDLOOP.
CLOSE DATASET I_FNAME_PKG.
ENDIF.

*   ローカルファイル
ELSE.
*     ヘッダ取得
CLEAR LST_FILE_PKG.
CALL FUNCTION 'ZEG_ZZ_DD04T_GET'
EXPORTING
IMPTSNAME          = 'ZSEGSD0013'
IMPLANGU           = SY-LANGU
IMPORTING
*          EXPDD04T           =
EXPSCRTEXT_L       = LW_STR.
SPLIT LW_STR AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
INTO LST_FILE_PKG-LNAME
LST_FILE_PKG-Z_COMP_NAME
LST_FILE_PKG-Z_COMP_ADDRESS1
LST_FILE_PKG-Z_COMP_ADDRESS2
LST_FILE_PKG-Z_COMP_TEL
LST_FILE_PKG-Z_COMP_FAX
LST_FILE_PKG-Z_INVOICE_NO
LST_FILE_PKG-Z_INVOICE_DATE
LST_FILE_PKG-Z_CUST_BT
LST_FILE_PKG-Z_CUST_NAME_BT
LST_FILE_PKG-Z_ADDRESS1_BT
LST_FILE_PKG-Z_ADDRESS2_BT
LST_FILE_PKG-Z_ATTN_BT
LST_FILE_PKG-Z_TEL_BT
LST_FILE_PKG-Z_FAX_BT
LST_FILE_PKG-Z_CUST_ST
LST_FILE_PKG-Z_CUST_NAME_ST
LST_FILE_PKG-Z_ADDRESS1_ST
LST_FILE_PKG-Z_ADDRESS2_ST
LST_FILE_PKG-Z_ATTN_ST
LST_FILE_PKG-Z_TEL_ST
LST_FILE_PKG-Z_FAX_ST
LST_FILE_PKG-Z_SHIPPED_PER
LST_FILE_PKG-Z_ON_OR_ABOUT
LST_FILE_PKG-Z_TRADE_FROM
LST_FILE_PKG-Z_TRADE_TO
LST_FILE_PKG-Z_TRADE_VIA
LST_FILE_PKG-Z_TRADE_PAYMENT
LST_FILE_PKG-Z_TRADE_TERM
LST_FILE_PKG-Z_CASEMARK1
LST_FILE_PKG-Z_CASEMARK2
LST_FILE_PKG-Z_CASEMARK3
LST_FILE_PKG-Z_CASEMARK4
LST_FILE_PKG-Z_CASEMARK5
LST_FILE_PKG-VBELN
LST_FILE_PKG-POSNR
LST_FILE_PKG-Z_PKG_POSNR_SUB
LST_FILE_PKG-Z_CASENO_FROM
LST_FILE_PKG-Z_CASENO_TO
LST_FILE_PKG-Z_CASE_COUNT
LST_FILE_PKG-Z_MEINS_PACK
LST_FILE_PKG-Z_CASE_MIX
LST_FILE_PKG-MATNR
LST_FILE_PKG-BSTKD
LST_FILE_PKG-VGBEL
LST_FILE_PKG-VGPOS
LST_FILE_PKG-KDMAT
LST_FILE_PKG-MAKTX
LST_FILE_PKG-Z_PURPOSE
LST_FILE_PKG-STAWN
LST_FILE_PKG-LANDX
LST_FILE_PKG-STOFT
LST_FILE_PKG-Z_LFIMG_UNIT
LST_FILE_PKG-Z_LFIMG
LST_FILE_PKG-Z_VRKME
LST_FILE_PKG-Z_NETWEIGHT_UNIT
LST_FILE_PKG-Z_NETWEIGHT
LST_FILE_PKG-Z_GEWEI_NW
LST_FILE_PKG-Z_GRSWEIGHT_UNIT
LST_FILE_PKG-Z_GRSWEIGHT
LST_FILE_PKG-Z_GEWEI_GW
LST_FILE_PKG-Z_LENGTH
LST_FILE_PKG-Z_WIDTH
LST_FILE_PKG-Z_HEIGHT
LST_FILE_PKG-Z_VOLUM_UNIT
LST_FILE_PKG-Z_VOLUM
LST_FILE_PKG-Z_VOLEH
LST_FILE_PKG-Z_PKG_REMARKS
LST_FILE_PKG-Z_INV_REMARKS1
LST_FILE_PKG-Z_INV_REMARKS2
LST_FILE_PKG-Z_INV_REMARKS3
LST_FILE_PKG-Z_INV_REMARKS4
LST_FILE_PKG-Z_INV_REMARKS5
LST_FILE_PKG-VSTEL
LST_FILE_PKG-Z_OUTPUT_USERID
LST_FILE_PKG-XDEZP
LST_FILE_PKG-DATFM
LST_FILE_PKG-Z_REPORT_FORMAT
LST_FILE_PKG-Z_REPORT_LANG
LST_FILE_PKG-Z_REPORT_TITLE.
APPEND LST_FILE_PKG TO LTD_FILE_PKG.
APPEND LINES OF I_TD_FILE_PKG TO LTD_FILE_PKG.

LW_FNAME = I_FNAME_PKG.
CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
FILENAME                        = LW_FNAME
FILETYPE                        = 'ASC'
WRITE_FIELD_SEPARATOR           = ABAP_TRUE
CODEPAGE                        = LW_CODEPAGE
TABLES
DATA_TAB                        = LTD_FILE_PKG
EXCEPTIONS
FILE_WRITE_ERROR                = 1
NO_BATCH                        = 2
GUI_REFUSE_FILETRANSFER         = 3
INVALID_TYPE                    = 4
NO_AUTHORITY                    = 5
UNKNOWN_ERROR                   = 6
HEADER_NOT_ALLOWED              = 7
SEPARATOR_NOT_ALLOWED           = 8
FILESIZE_NOT_ALLOWED            = 9
HEADER_TOO_LONG                 = 10
DP_ERROR_CREATE                 = 11
DP_ERROR_SEND                   = 12
DP_ERROR_WRITE                  = 13
UNKNOWN_DP_ERROR                = 14
ACCESS_DENIED                   = 15
DP_OUT_OF_MEMORY                = 16
DISK_FULL                       = 17
DP_TIMEOUT                      = 18
FILE_NOT_FOUND                  = 19
DATAPROVIDER_EXCEPTION          = 20
CONTROL_FLUSH_ERROR             = 21
OTHERS                          = 22.
IF SY-SUBRC <> 0.
LW_ERRFLG = 'X'.
*       ダウンロードできませんでした
MESSAGE S036(ZMEGSD01) DISPLAY LIKE 'E'.
ENDIF.
ENDIF.
ENDIF.

CLEAR: LW_SFILE,
LW_STR,
LW_CODE_STR.

* 選択画面のチェックボックス「Delivery Note」がONの場合
IF CB_DN = 'X'.
*   コードページ取得
LW_CODE_STR = I_OUTPUT_CP_DN.
IF LW_CODE_STR IS NOT INITIAL.
LW_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( LW_CODE_STR ).
ENDIF.
*   サーバファイル
IF RB_DOWN IS INITIAL.
OPEN DATASET I_FNAME_DN FOR OUTPUT IN TEXT MODE
ENCODING DEFAULT
IGNORING CONVERSION ERRORS.
IF SY-SUBRC <> 0.
LW_ERRFLG = 'X'.
*       ファイルオープンエラー &1
MESSAGE S035(ZMEGSD01) WITH I_FNAME_DN
DISPLAY LIKE 'E'.
ELSE.
*       データ出力
LOOP AT I_TD_FILE_DN INTO LST_FILE_DN.
CONCATENATE LST_FILE_DN-LNAME
LST_FILE_DN-Z_COMP_NAME
LST_FILE_DN-Z_COMP_ADDRESS1
LST_FILE_DN-Z_COMP_ADDRESS2
LST_FILE_DN-Z_COMP_TEL
LST_FILE_DN-Z_COMP_FAX
LST_FILE_DN-Z_INVOICE_NO
LST_FILE_DN-Z_INVOICE_DATE
LST_FILE_DN-Z_CUST_BT
LST_FILE_DN-Z_CUST_NAME_BT
LST_FILE_DN-Z_ADDRESS1_BT
LST_FILE_DN-Z_ADDRESS2_BT
LST_FILE_DN-Z_ATTN_BT
LST_FILE_DN-Z_TEL_BT
LST_FILE_DN-Z_FAX_BT
LST_FILE_DN-Z_CUST_ST
LST_FILE_DN-Z_CUST_NAME_ST
LST_FILE_DN-Z_ADDRESS1_ST
LST_FILE_DN-Z_ADDRESS2_ST
LST_FILE_DN-Z_ATTN_ST
LST_FILE_DN-Z_TEL_ST
LST_FILE_DN-Z_FAX_ST
LST_FILE_DN-Z_SHIPPED_PER
LST_FILE_DN-Z_ON_OR_ABOUT
LST_FILE_DN-Z_TRADE_FROM
LST_FILE_DN-Z_TRADE_TO
LST_FILE_DN-Z_TRADE_VIA
LST_FILE_DN-Z_TRADE_PAYMENT
LST_FILE_DN-Z_TRADE_TERM
LST_FILE_DN-Z_CASEMARK1
LST_FILE_DN-Z_CASEMARK2
LST_FILE_DN-Z_CASEMARK3
LST_FILE_DN-Z_CASEMARK4
LST_FILE_DN-Z_CASEMARK5
LST_FILE_DN-VBELN
LST_FILE_DN-POSNR
LST_FILE_DN-MATNR
LST_FILE_DN-BSTKD
LST_FILE_DN-VGBEL
LST_FILE_DN-VGPOS
LST_FILE_DN-KDMAT
LST_FILE_DN-MAKTX
LST_FILE_DN-Z_PURPOSE
LST_FILE_DN-STAWN
LST_FILE_DN-LANDX
LST_FILE_DN-STOFT
LST_FILE_DN-LFIMG
LST_FILE_DN-VRKME
LST_FILE_DN-NETPR
LST_FILE_DN-WAERK_O
LST_FILE_DN-NETWR
LST_FILE_DN-WAERS_O
LST_FILE_DN-Z_INV_REMARKS1
LST_FILE_DN-Z_INV_REMARKS2
LST_FILE_DN-Z_INV_REMARKS3
LST_FILE_DN-Z_INV_REMARKS4
LST_FILE_DN-Z_INV_REMARKS5
LST_FILE_DN-VSTEL
LST_FILE_DN-Z_OUTPUT_USERID
LST_FILE_DN-XDEZP
LST_FILE_DN-DATFM
LST_FILE_DN-Z_REPORT_FORMAT
LST_FILE_DN-Z_REPORT_LANG
LST_FILE_DN-Z_REPORT_TITLE
INTO LW_SFILE
SEPARATED BY CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.
TRANSFER LW_SFILE TO I_FNAME_DN.
ENDLOOP.
CLOSE DATASET I_FNAME_DN.
ENDIF.

*   ローカルファイル
ELSE.
*     ヘッダ取得
CLEAR LST_FILE_DN.
CALL FUNCTION 'ZEG_ZZ_DD04T_GET'
EXPORTING
IMPTSNAME          = 'ZSEGSD0021'
IMPLANGU           = SY-LANGU
IMPORTING
EXPSCRTEXT_L       = LW_STR.
SPLIT LW_STR AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB
INTO LST_FILE_DN-LNAME
LST_FILE_DN-Z_COMP_NAME
LST_FILE_DN-Z_COMP_ADDRESS1
LST_FILE_DN-Z_COMP_ADDRESS2
LST_FILE_DN-Z_COMP_TEL
LST_FILE_DN-Z_COMP_FAX
LST_FILE_DN-Z_INVOICE_NO
LST_FILE_DN-Z_INVOICE_DATE
LST_FILE_DN-Z_CUST_BT
LST_FILE_DN-Z_CUST_NAME_BT
LST_FILE_DN-Z_ADDRESS1_BT
LST_FILE_DN-Z_ADDRESS2_BT
LST_FILE_DN-Z_ATTN_BT
LST_FILE_DN-Z_TEL_BT
LST_FILE_DN-Z_FAX_BT
LST_FILE_DN-Z_CUST_ST
LST_FILE_DN-Z_CUST_NAME_ST
LST_FILE_DN-Z_ADDRESS1_ST
LST_FILE_DN-Z_ADDRESS2_ST
LST_FILE_DN-Z_ATTN_ST
LST_FILE_DN-Z_TEL_ST
LST_FILE_DN-Z_FAX_ST
LST_FILE_DN-Z_SHIPPED_PER
LST_FILE_DN-Z_ON_OR_ABOUT
LST_FILE_DN-Z_TRADE_FROM
LST_FILE_DN-Z_TRADE_TO
LST_FILE_DN-Z_TRADE_VIA
LST_FILE_DN-Z_TRADE_PAYMENT
LST_FILE_DN-Z_TRADE_TERM
LST_FILE_DN-Z_CASEMARK1
LST_FILE_DN-Z_CASEMARK2
LST_FILE_DN-Z_CASEMARK3
LST_FILE_DN-Z_CASEMARK4
LST_FILE_DN-Z_CASEMARK5
LST_FILE_DN-VBELN
LST_FILE_DN-POSNR
LST_FILE_DN-MATNR
LST_FILE_DN-BSTKD
LST_FILE_DN-VGBEL
LST_FILE_DN-VGPOS
LST_FILE_DN-KDMAT
LST_FILE_DN-MAKTX
LST_FILE_DN-Z_PURPOSE
LST_FILE_DN-STAWN
LST_FILE_DN-LANDX
LST_FILE_DN-STOFT
LST_FILE_DN-LFIMG
LST_FILE_DN-VRKME
LST_FILE_DN-NETPR
LST_FILE_DN-WAERK_O
LST_FILE_DN-NETWR
LST_FILE_DN-WAERS_O
LST_FILE_DN-Z_INV_REMARKS1
LST_FILE_DN-Z_INV_REMARKS2
LST_FILE_DN-Z_INV_REMARKS3
LST_FILE_DN-Z_INV_REMARKS4
LST_FILE_DN-Z_INV_REMARKS5
LST_FILE_DN-VSTEL
LST_FILE_DN-Z_OUTPUT_USERID
LST_FILE_DN-XDEZP
LST_FILE_DN-DATFM
LST_FILE_DN-Z_REPORT_FORMAT
LST_FILE_DN-Z_REPORT_LANG
LST_FILE_DN-Z_REPORT_TITLE.
APPEND LST_FILE_DN TO LTD_FILE_DN.
APPEND LINES OF I_TD_FILE_DN TO LTD_FILE_DN.

LW_FNAME = I_FNAME_DN.
CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
FILENAME                        = LW_FNAME
FILETYPE                        = 'ASC'
WRITE_FIELD_SEPARATOR           = ABAP_TRUE
CODEPAGE                        = LW_CODEPAGE
TABLES
DATA_TAB                        = LTD_FILE_DN
EXCEPTIONS
FILE_WRITE_ERROR                = 1
NO_BATCH                        = 2
GUI_REFUSE_FILETRANSFER         = 3
INVALID_TYPE                    = 4
NO_AUTHORITY                    = 5
UNKNOWN_ERROR                   = 6
HEADER_NOT_ALLOWED              = 7
SEPARATOR_NOT_ALLOWED           = 8
FILESIZE_NOT_ALLOWED            = 9
HEADER_TOO_LONG                 = 10
DP_ERROR_CREATE                 = 11
DP_ERROR_SEND                   = 12
DP_ERROR_WRITE                  = 13
UNKNOWN_DP_ERROR                = 14
ACCESS_DENIED                   = 15
DP_OUT_OF_MEMORY                = 16
DISK_FULL                       = 17
DP_TIMEOUT                      = 18
FILE_NOT_FOUND                  = 19
DATAPROVIDER_EXCEPTION          = 20
CONTROL_FLUSH_ERROR             = 21
OTHERS                          = 22.
IF SY-SUBRC <> 0.
LW_ERRFLG = 'X'.
*       ダウンロードできませんでした
MESSAGE S036(ZMEGSD01) DISPLAY LIKE 'E'.
ENDIF.
ENDIF.
ENDIF.

IF LW_ERRFLG IS INITIAL.
*   ダウンロードに成功しました
MESSAGE S037(ZMEGSD01).
ENDIF.

ENDFORM.                    " OUTPUT_FILE
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_RESULT
*&---------------------------------------------------------------------*
*       結果画面出力
*----------------------------------------------------------------------*
*      -->I_TD_MESSAGE
*      -->I_FNAME_INV
*      -->I_FNAME_PKG
*      -->I_FNAME_DN
*      -->I_COUNT_INV
*      -->I_NORMAL_INV
*      -->I_ERROR_INV
*      -->I_COUNT_PKG
*      -->I_NORMAL_PKG
*      -->I_ERROR_PKG
*      -->I_COUNT_DN
*      -->I_NORMAL_DN
*      -->I_ERROR_DN
*----------------------------------------------------------------------*
FORM OUTPUT_RESULT  USING  I_TD_MESSAGE TYPE TYP_TD_MESSAGE
I_FNAME_INV  TYPE ANY
I_FNAME_PKG  TYPE ANY
I_FNAME_DN   TYPE ANY
I_COUNT_INV  TYPE ANY
I_NORMAL_INV TYPE ANY
I_ERROR_INV  TYPE ANY
I_COUNT_PKG  TYPE ANY
I_NORMAL_PKG TYPE ANY
I_ERROR_PKG  TYPE ANY
I_COUNT_DN   TYPE ANY
I_NORMAL_DN  TYPE ANY
I_ERROR_DN   TYPE ANY.

DATA: LST_MESSAGE TYPE TYP_MESSAGE,
LW_MODE     TYPE CHAR10,
LW_RT       TYPE CHAR40,
LST_WERKS   LIKE LINE OF S_WERKS,
LST_VSTEL   LIKE LINE OF S_VSTEL,
LW_WINFO    TYPE STRING,
LW_VINFO    TYPE STRING,
LW_SIGN     TYPE STRING,
LW_OPTION   TYPE STRING,
LW_LOW      TYPE STRING,
LW_HIGH     TYPE STRING,
LW_NO       TYPE I.

IF RB_PRINT = 'X'.
LW_MODE = TEXT-O20.  "Print
ELSEIF RB_REPNT = 'X'.
LW_MODE = TEXT-O21.  "Reprint
ELSE.
LW_MODE = TEXT-O22.  "Download
ENDIF.

* Report Type
IF  CB_INV = 'X'
AND CB_PKG IS INITIAL
AND CB_DN IS INITIAL.
LW_RT = TEXT-O23.  "Invoice
ENDIF.
IF  CB_INV IS INITIAL
AND CB_PKG = 'X'
AND CB_DN IS INITIAL.
LW_RT = TEXT-O24.  "Packing List
ENDIF.
IF  CB_INV IS INITIAL
AND CB_PKG IS INITIAL
AND CB_DN = 'X'.
LW_RT = TEXT-O26.  "Delivery Note
ENDIF.
IF  CB_INV = 'X'
AND CB_PKG = 'X'
AND CB_DN IS INITIAL.
LW_RT = TEXT-O25.  "Invoice / Packing List
ENDIF.
IF  CB_INV = 'X'
AND CB_PKG IS INITIAL
AND CB_DN = 'X'.
LW_RT = TEXT-O27.  "Invoice / Delivery Note
ENDIF.
IF  CB_INV IS INITIAL
AND CB_PKG = 'X'
AND CB_DN = 'X'.
LW_RT = TEXT-O28.  "Packing List / Delivery Note
ENDIF.
IF  CB_INV = 'X'
AND CB_PKG = 'X'
AND CB_DN = 'X'.
LW_RT = TEXT-O29.  "Invoice / Packing List / Delivery Note
ENDIF.

* Plant: SI:X OP:XX LO:XX HI:XX
LOOP AT S_WERKS INTO LST_WERKS.
CLEAR: LW_SIGN,
LW_OPTION,
LW_LOW,
LW_HIGH.
LW_NO = LW_NO + 1.
CONCATENATE 'SI:'
LST_WERKS-SIGN
INTO LW_SIGN.
CONCATENATE 'OP:'
LST_WERKS-OPTION
INTO LW_OPTION.
CONCATENATE 'LO:'
LST_WERKS-LOW
INTO LW_LOW.
CONCATENATE 'HI:'
LST_WERKS-HIGH
INTO LW_HIGH.
IF LW_NO = 1.
CONCATENATE LW_SIGN
LW_OPTION
LW_LOW
LW_HIGH
INTO LW_WINFO
SEPARATED BY SPACE.
ELSEIF LW_NO > 1
AND LW_NO <= 5.
CONCATENATE LW_WINFO
'/'
LW_SIGN
LW_OPTION
LW_LOW
LW_HIGH
INTO LW_WINFO
SEPARATED BY SPACE.
ELSE.
CONCATENATE LW_WINFO
'/...'
INTO LW_WINFO
SEPARATED BY SPACE.
ENDIF.
ENDLOOP.
CLEAR LW_NO.
* ShippingPt: SI:X OP:XX LO:XX HI:XX
LOOP AT S_VSTEL INTO LST_VSTEL.
CLEAR: LW_SIGN,
LW_OPTION,
LW_LOW,
LW_HIGH.
LW_NO = LW_NO + 1.
CONCATENATE 'SI:'
LST_VSTEL-SIGN
INTO LW_SIGN.
CONCATENATE 'OP:'
LST_VSTEL-OPTION
INTO LW_OPTION.
CONCATENATE 'LO:'
LST_VSTEL-LOW
INTO LW_LOW.
CONCATENATE 'HI:'
LST_VSTEL-HIGH
INTO LW_HIGH.
IF LW_NO = 1.
CONCATENATE LW_SIGN
LW_OPTION
LW_LOW
LW_HIGH
INTO LW_VINFO
SEPARATED BY SPACE.
ELSEIF LW_NO > 1
AND LW_NO <= 5.
CONCATENATE LW_VINFO
'/'
LW_SIGN
LW_OPTION
LW_LOW
LW_HIGH
INTO LW_WINFO
SEPARATED BY SPACE.
ELSE.
CONCATENATE LW_VINFO
'/...'
INTO LW_VINFO
SEPARATED BY SPACE.
ENDIF.
ENDLOOP.

* 結果出力
SKIP 1.
WRITE: /2 TEXT-O07,  "<Parameters>
/4 TEXT-O08, 29 ':', 31 LW_MODE, "Mode
/4 TEXT-O09, 29 ':', 31 LW_RT, "Report Type
/4 TEXT-O10, 29 ':', 31 LW_WINFO, "Plant
/4 TEXT-O11, 29 ':', 31 LW_VINFO, "ShippingPt
/4 TEXT-O12, 29 ':', 31 I_FNAME_INV,
"File Name(Invoice)
/4 TEXT-O13, 29 ':', 31 I_FNAME_PKG,
"File Name(Packing List)
/4 TEXT-O30, 29 ':', 31 I_FNAME_DN.
"File Name(Delivey Note)
SKIP 1.
WRITE: /2   TEXT-O14,  "<Result> (Invoice)
52  TEXT-O15,  "<Result> (Packing List)
102 TEXT-O31,  "<Result> (Packing List)
/4   TEXT-O16,  28 ':', 30  I_COUNT_INV,
54  TEXT-O16,  78 ':', 80  I_COUNT_PKG,
104 TEXT-O16, 128 ':', 130 I_COUNT_DN,
"Number of Transcations
/4   TEXT-O17,  28 ':', 30  I_NORMAL_INV,
54  TEXT-O17,  78 ':', 80  I_NORMAL_PKG,
104 TEXT-O17, 128 ':', 130 I_NORMAL_DN,
"Number of Normal
/4   TEXT-O18,  28 ':', 30  I_ERROR_INV,
54  TEXT-O18,  78 ':', 80  I_ERROR_PKG,
104 TEXT-O18, 128 ':', 130 I_ERROR_DN.
"Number of Errors
SKIP 1.
WRITE: /2  TEXT-O19.  "<Message>
LOOP AT I_TD_MESSAGE INTO LST_MESSAGE.
WRITE: /4  LST_MESSAGE-TYP,
21 LST_MESSAGE-MSGTYP,
41 LST_MESSAGE-MSG.
ENDLOOP.

ENDFORM.                    " OUTPUT_RESULT
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_HEAD
*&---------------------------------------------------------------------*
*       ヘッダ出力
*----------------------------------------------------------------------*
FORM OUTPUT_HEAD.

SET TITLEBAR 'GUI_TITLE_2000'.

WRITE: /2 TEXT-O01, 11 ':', 14 SY-MANDT, "CLIENT
130 TEXT-O04, 135 ':', 137 SY-DATLO,  "Date
/2 TEXT-O02, 11 ':', 14 SY-REPID,  "PROGRAM
130 TEXT-O05, 135 ':', 137 SY-TIMLO,  "Time
/2 TEXT-O03, 11 ':', 14 SY-UNAME,  "USER
56 TEXT-O06.  "Title

ENDFORM.                    " OUTPUT_HEAD
