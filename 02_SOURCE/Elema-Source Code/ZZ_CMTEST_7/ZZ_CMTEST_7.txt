*&---------------------------------------------------------------------*
*&  REPORT ZM013200　                                                  *
*&         発注参照入庫一括登録                                        *
*&---------------------------------------------------------------------*
*&  機能     : 発注参照入庫一括登録のバッチインプット(MIGO)処理を行う
*&  作成日   : 2012/05/26
*&  作成者   : C.MARUTA(solfis)
*&---------------------------------------------------------------------*
*&  変更履歴 :
*&  変更内容 :
*&---------------------------------------------------------------------*
REPORT ZZ_CMTEST_7
LINE-SIZE 170
LINE-COUNT 58
NO STANDARD PAGE HEADING
MESSAGE-ID Y1.
*&---------------------------------------------------------------------*
*& 属性定義                                                            *
*&---------------------------------------------------------------------*
TYPES:
* ファイル読込用構造
BEGIN OF T_S_FILE,
EBELN         TYPE EBELN,       "購買伝票番号
EBELP         TYPE EBELP,       "購買伝票の明細番号
BLDAT(08)     TYPE C,       "伝票日付
BUDAT(08)     TYPE C,       "転記日付
ERFMG(14)     TYPE C,       "数量
INSMK(1)      TYPE C,       "在庫タイプ
LFSNR(16)     TYPE C,       "納品書
END   OF T_S_FILE,
T_I_FILE        TYPE TABLE OF T_S_FILE,  "内部テーブル定義

* 出力用構造
* 画面出力構造
BEGIN OF T_S_OUT,
EBELN         TYPE EBELN,       "購買伝票番号
EBELP         TYPE EBELP,       "購買伝票の明細番号
BLDAT         TYPE BLDAT,       "伝票日付
BUDAT         TYPE BUDAT,       "転記日付
ERFMG         TYPE MB_ERFMG,    "数量
INSMK         TYPE INSMK,       "在庫タイプ
LFSNR         TYPE LFSNR,       "納品書
MSG(100)      TYPE C,            "エラーメッセージ
END   OF T_S_OUT,
T_I_OUT        TYPE TABLE OF T_S_OUT,   "内部テーブル定義

* 購買伝票情報構造
BEGIN OF T_S_EKPO,
EBELN         TYPE EBELN,       "購買伝票番号
EBELP         TYPE EBELP,       "購買伝票の明細番号
WERKS         TYPE EWERK,       "プラント
END   OF T_S_EKPO,
T_I_EKPO        TYPE TABLE OF T_S_EKPO.  "内部テーブル定義

*&---------------------------------------------------------------------*
*& 内部テーブル定義                                                    *
*&---------------------------------------------------------------------*
DATA:
*-内部テーブル
G_I_BDC     TYPE TABLE OF BDCDATA.     "BDCテーブル

*&---------------------------------------------------------------------*
*& コンスタント定義
*&---------------------------------------------------------------------*
CONSTANTS:
* トランザクションコード
CNS_TR_MIGO     TYPE TCODE VALUE 'MIGO',  "入出庫
CNS_LGOBE_H000  TYPE LGOBE VALUE 'H000',  "保管場所
CNS_BWART_101   TYPE BWART VALUE '101',   "移動タイプ

* 処理フラグ
BEGIN OF CNS_FLG,
ON(1)         TYPE C     VALUE 'X',     "フラグON
OFF(1)        TYPE C     VALUE ' ',     "フラグOFF
END   OF CNS_FLG.

*&---------------------------------------------------------------------*
*& 選択画面定義                                                        *
*&---------------------------------------------------------------------*
PARAMETERS:
P_FILE(128)  LOWER CASE OBLIGATORY.          "ファイル

SELECTION-SCREEN SKIP.

PARAMETERS:
P_WERKS      TYPE T001W-WERKS OBLIGATORY.    "プラント

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN                                                 *
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.
PERFORM FILE_OPEN_DIALOG.

*&---------------------------------------------------------------------*
*& START-OF-SELECTION                                                  *
*&---------------------------------------------------------------------*
START-OF-SELECTION.
PERFORM MAIN.

*&---------------------------------------------------------------------*
*& TOP-OF-PAGE                                                         *
*&---------------------------------------------------------------------*
TOP-OF-PAGE.

WRITE:/047 TEXT-T01,
/092 TEXT-T10,
102(10) SY-DATUM USING EDIT MASK '____/__/__'.
SKIP.
WRITE:/003 TEXT-T02,
015 TEXT-T03,
023 TEXT-T04,
036 TEXT-T05,
053 TEXT-T06,
065 TEXT-T07,
083 TEXT-T08,
098 TEXT-T09,
SY-ULINE.

*&---------------------------------------------------------------------*
*&      Form  MAIN
*&---------------------------------------------------------------------*
*       メイン処理
*----------------------------------------------------------------------*
FORM MAIN .


DATA:
LIT_FILE    TYPE T_I_FILE,     "内部TBL:入力ファイル
LIT_EKPO    TYPE T_I_EKPO,     "内部TBL:購買伝票情報
LIT_OUT     TYPE T_I_OUT.      "内部TBL:画面出力用

*-入力ファイル処理
PERFORM FILE_PROC
CHANGING LIT_FILE.     "内部TBL:入力ファイル

*- データ一括取得
PERFORM GET_PROC
USING LIT_FILE        "内部TBL:入力ファイル
CHANGING LIT_EKPO.       "内部TBL:購買伝票情報

*- チェック処理
PERFORM CHECK_PROC
USING LIT_FILE      "内部TBL:入力ファイル
LIT_EKPO      "内部TBL:購買伝票情報
CHANGING LIT_OUT.      "内部TBL:画面出力用

*- 更新処理
PERFORM BDC_PROC
CHANGING LIT_OUT.      "内部TBL:画面出力用

*- 出力処理
PERFORM OUTPUT_PROC
USING LIT_OUT.      "内部TBL:画面出力用

ENDFORM.                    " MAIN
*&---------------------------------------------------------------------*
*&      Form  file_open_dialog_sv
*&---------------------------------------------------------------------*
*       ファイルダイアログ表示
*----------------------------------------------------------------------*
FORM FILE_OPEN_DIALOG.

DATA:
LV_FILENAME  TYPE STRING,
LV_FILETABLE TYPE FILETABLE,
LV_RC TYPE I.

CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
EXPORTING
FILE_FILTER             = '*.txt'
INITIAL_DIRECTORY       = 'C:\'
CHANGING
FILE_TABLE              = LV_FILETABLE
RC                      = LV_RC
EXCEPTIONS
FILE_OPEN_DIALOG_FAILED = 1
CNTL_ERROR              = 2
ERROR_NO_GUI            = 3
OTHERS                  = 4
.

READ TABLE LV_FILETABLE INTO LV_FILENAME INDEX 1.
P_FILE = LV_FILENAME.

ENDFORM.                    " file_open_dialog
*&---------------------------------------------------------------------*
*&      Form  FILE_PROC
*&---------------------------------------------------------------------*
*       ファイル読込
*----------------------------------------------------------------------*
FORM FILE_PROC CHANGING PIT_FILE TYPE T_I_FILE.

DATA LV_FILENAME TYPE STRING.
LV_FILENAME = P_FILE.

CALL FUNCTION 'GUI_UPLOAD'
EXPORTING
FILENAME                = LV_FILENAME
HAS_FIELD_SEPARATOR     = CNS_FLG-ON
TABLES
DATA_TAB                = PIT_FILE
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
OTHERS                  = 17.

IF SY-SUBRC <> 0.
MESSAGE S401 WITH '入力ファイルオープンエラー'
P_FILE.
LEAVE LIST-PROCESSING.
ENDIF.

* データなしの場合、終了処理へ
CHECK PIT_FILE IS INITIAL.
MESSAGE S400 WITH '入力ファイルが０件です'.
LEAVE LIST-PROCESSING.

ENDFORM.                    " FILE_PROC
*&---------------------------------------------------------------------*
*&      Form  GET_PROC
*&---------------------------------------------------------------------*
*       text　マスタ情報取得処理
*----------------------------------------------------------------------*
FORM GET_PROC    USING PIT_FILE    TYPE T_I_FILE
CHANGING PIT_EKPO    TYPE T_I_EKPO.

DATA:
LIT_WORK    TYPE T_I_FILE.     "内部TBL:入力ファイルWORK

LIT_WORK = PIT_FILE.

SORT LIT_WORK BY EBELN
EBELP.

DELETE ADJACENT DUPLICATES FROM LIT_WORK
COMPARING EBELN
EBELP.
* 購買伝票情報の取得
SELECT EBELN
EBELP
WERKS
INTO TABLE PIT_EKPO
FROM EKPO
FOR ALL ENTRIES IN LIT_WORK
WHERE EBELN = LIT_WORK-EBELN
AND EBELP = LIT_WORK-EBELP.

ENDFORM.                    " GET_PROC
*&---------------------------------------------------------------------*
*&      Form  CHECK_PROC
*&---------------------------------------------------------------------*
*       text  チェック処理
*----------------------------------------------------------------------*
FORM CHECK_PROC    USING PIT_FILE    TYPE T_I_FILE
PIT_EKPO    TYPE T_I_EKPO
CHANGING PIT_OUT     TYPE T_I_OUT.

* ローカル定義
FIELD-SYMBOLS:
<LFS_FILE>   TYPE T_S_FILE.
DATA:
LS_EKPO      TYPE T_S_EKPO,
LS_OUT       TYPE T_S_OUT.

LOOP AT PIT_FILE ASSIGNING <LFS_FILE>.

CLEAR:LS_EKPO.

*   前ゼロ処理
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = <LFS_FILE>-EBELP
IMPORTING
OUTPUT = <LFS_FILE>-EBELP.

*   購買情報の読込
READ TABLE PIT_EKPO
INTO LS_EKPO
WITH KEY EBELN = <LFS_FILE>-EBELN
EBELP = <LFS_FILE>-EBELP
BINARY SEARCH.

*   ループ初回のみプラントチェック
AT FIRST.
IF LS_EKPO-WERKS <> P_WERKS.
MESSAGE S402 WITH '選択画面のプラントと購買伝票のプラント:'
LS_EKPO-WERKS
'が等しくありません'.
LEAVE LIST-PROCESSING.

ENDIF.
ENDAT.

MOVE-CORRESPONDING <LFS_FILE> TO LS_OUT.

*   伝票の存在チェック
IF LS_EKPO IS INITIAL.
LS_OUT-MSG = 'エラー'.
ENDIF.

APPEND LS_OUT TO PIT_OUT.

ENDLOOP.

SORT PIT_OUT BY EBELN
EBELP.

ENDFORM.                    " CHECK_PROC
*&---------------------------------------------------------------------*
*&      Form  BDC_PROC
*&---------------------------------------------------------------------*
*       text  BDC処理
*----------------------------------------------------------------------*
FORM BDC_PROC  CHANGING  PIT_OUT TYPE T_I_OUT.

* ローカル定義
FIELD-SYMBOLS:
<LFS_OUT>     TYPE T_S_OUT.
DATA:
LW_ZEILE_CNT  TYPE MBLPO,     "入出庫明細カウントフラグ
LW_FLG        TYPE C.         "エラー判定フラグ

LOOP AT PIT_OUT ASSIGNING <LFS_OUT>.

AT NEW EBELN.
*     初期化
CLEAR:
LW_FLG,
LW_ZEILE_CNT.
REFRESH:
G_I_BDC.

*     共通部BDCデータセット
PERFORM SET_BDC_COMMON
USING <LFS_OUT>.

ENDAT.

IF NOT <LFS_OUT>-MSG IS INITIAL.
LW_FLG = CNS_FLG-ON.
ENDIF.

*   カウントアップ
LW_ZEILE_CNT = LW_ZEILE_CNT + 1.

*   明細部BDCデータセット
PERFORM SET_BDC_DETAIL
USING <LFS_OUT>
LW_ZEILE_CNT.

AT END OF EBELN.

*     エラーなし
CHECK LW_FLG IS INITIAL.

*     保存BDCデータセット
PERFORM SET_BDC_END
USING <LFS_OUT>
LW_ZEILE_CNT.

*     トランザクション起動
PERFORM CALL_TRAN
USING CNS_TR_MIGO
CHANGING <LFS_OUT>.
ENDAT.
ENDLOOP.

ENDFORM.                    " BDC_PROC
*&---------------------------------------------------------------------*
*&      Form  bdc_dataset
*&---------------------------------------------------------------------*
*       BDCデータ編集
*----------------------------------------------------------------------*
*  -->  pi_begin  Dynpro 開始
*       pi_name   BDC モジュールプール / 項目名
*       pi_value  BDC Dynpro 番号 / 項目値
*----------------------------------------------------------------------*
FORM BDC_DATASET USING PI_BEGIN TYPE CHAR1
PI_NAME  TYPE ANY
PI_VALUE TYPE ANY.
DATA:
L_S_BDC     TYPE BDCDATA.              "BDCテーブル

IF PI_BEGIN = 'X'.
L_S_BDC-PROGRAM   = PI_NAME.
L_S_BDC-DYNPRO    = PI_VALUE.
L_S_BDC-DYNBEGIN  = PI_BEGIN.
APPEND L_S_BDC TO G_I_BDC.
ELSE.
L_S_BDC-FNAM      = PI_NAME.
L_S_BDC-FVAL      = PI_VALUE.
APPEND L_S_BDC TO G_I_BDC.
ENDIF.

ENDFORM.                    " bdc_dataset
*&---------------------------------------------------------------------*
*&      Form  call_tran
*&---------------------------------------------------------------------*
*       トランザクション起動
*----------------------------------------------------------------------*
FORM CALL_TRAN   USING PW_TCD
CHANGING PS_OUT   TYPE T_S_OUT.

* ローカル定義
FIELD-SYMBOLS:
<LFS_WORK>   TYPE T_S_OUT.

DATA:
LW_MODE       TYPE CTU_MODE,
LW_MSGTX      TYPE MSGTX.

LW_MODE = 'N'.

* トランザクション起動
CALL TRANSACTION  PW_TCD
USING  G_I_BDC
MODE  LW_MODE
UPDATE  'S'.

* メッセージ取得
CALL FUNCTION 'MESSAGE_TEXT_BUILD'
EXPORTING
MSGID               = SY-MSGID
MSGNR               = SY-MSGNO
MSGV1               = SY-MSGV1
MSGV2               = SY-MSGV2
MSGV3               = SY-MSGV3
MSGV4               = SY-MSGV4
IMPORTING
MESSAGE_TEXT_OUTPUT = LW_MSGTX.

PS_OUT-MSG = LW_MSGTX.

ENDFORM.                    " call_tran
*&---------------------------------------------------------------------*
*&      Form  SET_BDC_DETAIL
*&---------------------------------------------------------------------*
*       text  BDCのセット
*----------------------------------------------------------------------*
FORM SET_BDC_DETAIL USING PS_OUT  TYPE T_S_OUT
PW_ZEILE_CNT.

DATA :
LW_ERFMG(14)  TYPE C.

WRITE PS_OUT-ERFMG TO LW_ERFMG.

PERFORM BDC_DATASET USING:
'X'   'SAPLMIGO'            '0001',
' '   'BDC_OKCODE'          '=OK_GO',
' '   'GODEFAULT_TV-BWART'  CNS_BWART_101,
' '   'GOHEAD-BLDAT'        PS_OUT-BLDAT,
' '   'GOHEAD-BUDAT'        PS_OUT-BUDAT,	
' '   'BDC_CURSOR'          'GOHEAD-LFSNR',
' '   'GOHEAD-LFSNR'        PS_OUT-LFSNR,	
' '   'BDC_CURSOR'          'GODYNPRO-PO_NUMBER',
' '   'GODYNPRO-PO_NUMBER'  PS_OUT-EBELN,	
' '   'GODYNPRO-PO_ITEM'    PS_OUT-EBELP,

*         入出庫明細番号の設定
'X'   'SAPLMIGO'            '0001',
' '   'BDC_OKCODE'          '=MIGO_OK_LOCATE',
' '   'GODYNPRO-DETAIL_ZEILE' PW_ZEILE_CNT,

*         明細詳細の設定
'X'   'SAPLMIGO'            '0001',
' '   'BDC_OKCODE'          '=OK_GO',
*          ' '   'GOITEM-ERFMG'        PS_OUT-ERFMG,
' '   'GOITEM-ERFMG'        LW_ERFMG,
' '   'GOITEM-MIGO_INSMK'   PS_OUT-INSMK,
' '   'GOITEM-BWART'        CNS_BWART_101,
' '   'BDC_CURSOR'          'GOITEM-LGOBE',
' '   'GOITEM-LGOBE'        CNS_LGOBE_H000,
' '   'BDC_CURSOR'          'GODYNPRO-DETAIL_TAKE',
' '   'GODYNPRO-DETAIL_TAKE' CNS_FLG-ON.

ENDFORM.                    " SET_BDC_DETAIL
*&---------------------------------------------------------------------*
*&      Form  SET_BDC_COMMON
*&---------------------------------------------------------------------*
*       text  BDCのセット
*----------------------------------------------------------------------*
FORM SET_BDC_COMMON USING PS_OUT  TYPE T_S_OUT.

PERFORM BDC_DATASET USING:
'X'   'SAPLMIGO'            '0001',
' '   'BDC_OKCODE'          '=MIGO_OK_ACTION',
' '   'GODYNPRO-ACTION'     'A01',
' '   'GODYNPRO-REFDOC'     'R01'.

ENDFORM.                    " SET_BDC_COMMON
*&---------------------------------------------------------------------*
*&      Form  SET_BDC_END
*&---------------------------------------------------------------------*
*       text  BDCのセット
*----------------------------------------------------------------------*
FORM SET_BDC_END USING PS_OUT  TYPE T_S_OUT
PW_ZEILE_CNT.

DATA :
LW_ERFMG(13)  TYPE C.

WRITE PS_OUT-ERFMG TO LW_ERFMG.

PERFORM BDC_DATASET USING:
'X'   'SAPLMIGO'            '0001',
' '   'BDC_OKCODE'          '=OK_POST1'.

ENDFORM.                    " SET_BDC_DETAIL
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_PROC
*&---------------------------------------------------------------------*
*       text  画面出力
*----------------------------------------------------------------------*
FORM OUTPUT_PROC USING  PIT_OUT  TYPE T_I_OUT.

* ローカル定義
FIELD-SYMBOLS:
<LFS_OUT>       TYPE T_S_OUT.

* 画面出力
LOOP AT PIT_OUT ASSIGNING <LFS_OUT>.

WRITE:/002 <LFS_OUT>-EBELN.

IF NOT <LFS_OUT>-EBELP IS INITIAL.
WRITE:/014 <LFS_OUT>-EBELP.
ENDIF.
WRITE: 022 <LFS_OUT>-BLDAT USING EDIT MASK '____/__/__',
035 <LFS_OUT>-BUDAT USING EDIT MASK '____/__/__'.
IF NOT <LFS_OUT>-EBELP IS INITIAL.
WRITE:
050 <LFS_OUT>-ERFMG NO-ZERO CENTERED,
068 <LFS_OUT>-INSMK,
081 <LFS_OUT>-LFSNR.
ENDIF.
WRITE:098 <LFS_OUT>-MSG.
ENDLOOP.

ENDFORM.                    " OUTPUT_PROC
