REPORT ZZ_CMTEST_1 MESSAGE-ID Y1.

INCLUDE <ICON>.
*&---------------------------------------------------------------------*
*& 属性定義                                                            *
*&---------------------------------------------------------------------*
TYPE-POOLS SLIS.
TYPES:
* ファイル読込用構造
BEGIN OF T_S_FILE,
CLIENT(10)    TYPE C,           "取引先コード
NAYOSE(10)    TYPE C,           "名寄先コード
KUBUN         TYPE C,           "区分
NAME1         TYPE NAME1_GP,    "名称
WAERS         TYPE WAERS,       "通貨コード
LOWAMT        TYPE ZNELOWAMT,   "閾値下限
BASE_ZT       TYPE ZNEBASE_ZT,  "基本取引条件
ZTERM_PZ      TYPE ZNEZTERM_PZ, "残額-条件（支払日）
ZTERM_SZ      TYPE ZNEZTERM_SZ, "残額-条件（サイト）
ZLSCH_Z       TYPE ZNEZLSCH_Z,  "残額-方法
PER1          TYPE ZNEPER1,     "1-分割（％）
PAY1          TYPE ZNEPAY1,     "1-分割（金額）
ZTERM_P1      TYPE ZNEZTERM_P1, "1-条件（支払日）
ZTERM_S1      TYPE ZNEZTERM_S1, "1-条件（サイト）
ZLSCH_1       TYPE ZNEZLSCH_1,                          "1-方法
PER2          TYPE ZNEPER2,     "2-分割（％）
PAY2          TYPE ZNEPAY2,     "2-分割（金額）
ZTERM_P2      TYPE ZNEZTERM_P2, "2-条件（支払日）
ZTERM_S2      TYPE ZNEZTERM_S2, "2-条件（サイト）
ZLSCH_2       TYPE ZNEZLSCH_2,                          "2-方法
PER3          TYPE ZNEPER3,     "3-分割（％）
PAY3          TYPE ZNEPAY3,     "3-分割（金額）
ZTERM_P3      TYPE ZNEZTERM_P3, "3-条件（支払日）
ZTERM_S3      TYPE ZNEZTERM_S3, "3-条件（サイト）
ZLSCH_3       TYPE ZNEZLSCH_3,                          "3-方法
PER4          TYPE ZNEPER4,     "4-分割（％）
PAY4          TYPE ZNEPAY4,     "4-分割（金額）
ZTERM_P4      TYPE ZNEZTERM_P4, "4-条件（支払日）
ZTERM_S4      TYPE ZNEZTERM_S4, "4-条件（サイト）
ZLSCH_4       TYPE ZNEZLSCH_4,                          "4-方法
ZNTCH         TYPE ZNENTCH,     "手形通信費
MEMO          TYPE ZNEMEMO,     "備考
END   OF T_S_FILE,
T_I_FILE        TYPE TABLE OF T_S_FILE,  "内部テーブル定義

* 編集用
BEGIN OF T_S_EDIT,
CLIENT(10)    TYPE C,           "取引先コード
KUBUN         TYPE C,           "区分
NAME1         TYPE NAME1_GP,    "名称
WAERS         TYPE WAERS,       "通貨コード
SEQ           TYPE ZNESEQ,      "SEQ
LOWAMT        TYPE ZNELOWAMT,   "閾値下限
BASE_ZT       TYPE ZNEBASE_ZT,  "基本取引条件
ZTERM_PZ      TYPE ZNEZTERM_PZ, "残額-条件（支払日）
ZTERM_SZ      TYPE ZNEZTERM_SZ, "残額-条件（サイト）
ZLSCH_Z       TYPE ZNEZLSCH_Z,  "残額-方法
PER1          TYPE ZNEPER1,     "1-分割（％）
PAY1          TYPE ZNEPAY1,     "1-分割（金額）
ZTERM_P1      TYPE ZNEZTERM_P1, "1-条件（支払日）
ZTERM_S1      TYPE ZNEZTERM_S1, "1-条件（サイト）
ZLSCH_1       TYPE ZNEZLSCH_1,                          "1-方法
PER2          TYPE ZNEPER2,     "2-分割（％）
PAY2          TYPE ZNEPAY2,     "2-分割（金額）
ZTERM_P2      TYPE ZNEZTERM_P2, "2-条件（支払日）
ZTERM_S2      TYPE ZNEZTERM_S2, "2-条件（サイト）
ZLSCH_2       TYPE ZNEZLSCH_2,                          "2-方法
PER3          TYPE ZNEPER3,     "3-分割（％）
PAY3          TYPE ZNEPAY3,     "3-分割（金額）
ZTERM_P3      TYPE ZNEZTERM_P3, "3-条件（支払日）
ZTERM_S3      TYPE ZNEZTERM_S3, "3-条件（サイト）
ZLSCH_3       TYPE ZNEZLSCH_3,                          "3-方法
PER4          TYPE ZNEPER4,     "4-分割（％）
PAY4          TYPE ZNEPAY4,     "4-分割（金額）
ZTERM_P4      TYPE ZNEZTERM_P4, "4-条件（支払日）
ZTERM_S4      TYPE ZNEZTERM_S4, "4-条件（サイト）
ZLSCH_4       TYPE ZNEZLSCH_4,                          "4-方法
ZNTCH         TYPE ZNENTCH,     "手形通信費
MEMO          TYPE ZNEMEMO,     "備考
MSG(100)      TYPE C,           "エラーメッセージ
NAYOSE(10)    TYPE C,           "名寄先(ファイル)
BNRUI(6)      TYPE C,           "分類
LIFN2         TYPE LIFN2,       "名寄先(取得)
END   OF T_S_EDIT,
T_I_EDIT        TYPE TABLE OF T_S_EDIT,   "内部テーブル定義

* 画面出力
BEGIN OF T_S_OUT,
ICON          TYPE ICON,        "信号機
MSG(100)      TYPE C,           "メッセージ
BNRUI(6)      TYPE C,           "分類
CLIENT(10)    TYPE C,           "取引先コード
KUBUN         TYPE C,           "区分
NAME1         TYPE NAME1_GP,    "名称
WAERS         TYPE WAERS,       "通貨コード
SEQ           TYPE ZNESEQ,      "SEQ
LOWAMT        TYPE ZNELOWAMT,   "閾値下限
BASE_ZT       TYPE ZNEBASE_ZT,  "基本取引条件
ZTERM_PZ      TYPE ZNEZTERM_PZ, "残額-条件（支払日）
ZTERM_SZ      TYPE ZNEZTERM_SZ, "残額-条件（サイト）
ZLSCH_Z       TYPE ZNEZLSCH_Z,  "残額-方法
PER1          TYPE ZNEPER1,     "1-分割（％）
PAY1          TYPE ZNEPAY1,     "1-分割（金額）
ZTERM_P1      TYPE ZNEZTERM_P1, "1-条件（支払日）
ZTERM_S1      TYPE ZNEZTERM_S1, "1-条件（サイト）
ZLSCH_1       TYPE ZNEZLSCH_1,                          "1-方法
PER2          TYPE ZNEPER2,     "2-分割（％）
PAY2          TYPE ZNEPAY2,     "2-分割（金額）
ZTERM_P2      TYPE ZNEZTERM_P2, "2-条件（支払日）
ZTERM_S2      TYPE ZNEZTERM_S2, "2-条件（サイト）
ZLSCH_2       TYPE ZNEZLSCH_2,                          "2-方法
PER3          TYPE ZNEPER3,     "3-分割（％）
PAY3          TYPE ZNEPAY3,     "3-分割（金額）
ZTERM_P3      TYPE ZNEZTERM_P3, "3-条件（支払日）
ZTERM_S3      TYPE ZNEZTERM_S3, "3-条件（サイト）
ZLSCH_3       TYPE ZNEZLSCH_3,                          "3-方法
PER4          TYPE ZNEPER4,     "4-分割（％）
PAY4          TYPE ZNEPAY4,     "4-分割（金額）
ZTERM_P4      TYPE ZNEZTERM_P4, "4-条件（支払日）
ZTERM_S4      TYPE ZNEZTERM_S4, "4-条件（サイト）
ZLSCH_4       TYPE ZNEZLSCH_4,                          "4-方法
ZNTCH         TYPE ZNENTCH,     "手形通信費
MEMO          TYPE ZNEMEMO,     "備考
INSDT         TYPE ZNEINSDAT,   "登録日
INSTM         TYPE ZNEINSTIM,   "登録時刻
INSUSR        TYPE ZNEINSUSR,   "登録ユーザ
END   OF T_S_OUT,
T_I_OUT         TYPE TABLE OF T_S_OUT,    "内部テーブル定義

* 規定外マスタテーブル(仕入)
T_S_ZN007       TYPE ZN007,
T_I_ZN007       TYPE TABLE OF T_S_ZN007,  "内部テーブル定義

* 規定外マスタテーブル(売上)
T_S_ZN008       TYPE ZN008,
T_I_ZN008       TYPE TABLE OF T_S_ZN008,  "内部テーブル定義

* 仕入先(購買組織)取得用
BEGIN OF T_S_LFM1,
LIFNR         TYPE LIFNR,         "仕入先コード
WAERS         TYPE BSTWA,         "購買発注通貨
END   OF T_S_LFM1,
T_I_LFM1        TYPE TABLE OF T_S_LFM1,   "内部テーブル定義

* 得意先(販売組織)
BEGIN OF T_S_KNVV,
KUNNR         TYPE KUNNR,         "得意先コード
WAERS         TYPE WAERS_V02D,    "通貨コード
END   OF T_S_KNVV,
T_I_KNVV        TYPE TABLE OF T_S_KNVV,  "内部テーブル定義

* 仕入先(一般)取得用
BEGIN OF T_S_LFA1,
LIFNR         TYPE LIFNR,         "仕入先コード
NAME1         TYPE NAME1_GP,                            "名称1
END   OF T_S_LFA1,
T_I_LFA1        TYPE TABLE OF T_S_LFA1,   "内部テーブル定義

* 得意先(一般)取得用
BEGIN OF T_S_KNA1,
KUNNR         TYPE KUNNR,         "得意先コード
NAME1         TYPE NAME1_GP,                            "名称1
END   OF T_S_KNA1,
T_I_KNA1        TYPE TABLE OF T_S_KNA1,   "内部テーブル定義

* 仕入先(取引先機能)取得用
BEGIN OF T_S_WYT3,
LIFNR         TYPE LIFNR,         "仕入先コード
LIFN2         TYPE LIFN2,         "購買発注通貨
END   OF T_S_WYT3,
T_I_WYT3        TYPE TABLE OF T_S_WYT3,   "内部テーブル定義

* 仕入先検索用
BEGIN OF T_S_LIFNR,
LIFNR         TYPE LIFNR,         "仕入先コード
END OF T_S_LIFNR,
T_I_LIFNR       TYPE TABLE OF T_S_LIFNR,  "内部テーブル定義

* 得意先
BEGIN OF T_S_KUNNR,
KUNNR         TYPE KUNNR,         "得意先コード
END OF T_S_KUNNR,
T_I_KUNNR       TYPE TABLE OF T_S_KUNNR,  "内部テーブル定義

* 支払方法
BEGIN OF T_S_T042Z,
ZLSCH         TYPE DZLSCH,        "支払方法
END   OF T_S_T042Z,
T_I_T042Z       TYPE TABLE OF T_S_T042Z,  "内部テーブル定義

* 支払条件
BEGIN OF T_S_T052,
ZTERM         TYPE DZTERM,        "支払条件
END   OF T_S_T052,
T_I_T052        TYPE TABLE OF T_S_T052,   "内部テーブル定義

* 同PI情報チェック用
BEGIN OF T_S_PIC,
LIFNR         TYPE LIFNR,         "仕入先コード
CNT_PI        TYPE I,             "読込回数
END   OF T_S_PIC,
T_I_PIC        TYPE TABLE OF T_S_PIC,   "内部テーブル定義

* 閾値重複チェック用
BEGIN OF T_S_LOWAMT,
LOWAMT        TYPE ZNELOWAMT,     "閾値
END   OF T_S_LOWAMT,
T_I_LOWAMT      TYPE TABLE OF T_S_LOWAMT, "内部テーブル定義

* 一次格納用構造(取引先単位処理)
BEGIN OF T_S_WKS,
ZWELS(20)     TYPE C,        "支払方法格納
CNT_ZWELS     TYPE I,        "支払方法カウント用
CNT_BASE      TYPE I,        "基本取引条件カウント用
TCH           TYPE ZNENTCH,  "手形通信費保存用
WAERS         TYPE WAERS,    "取引先の通貨格納用
SEQ           TYPE ZNESEQ,   "SEQのカウント用
LIFN2         TYPE LIFN2,    "名寄先(取得)
END   OF T_S_WKS,

* BDC用の退避構造
BEGIN OF T_S_TEMP,
ZTERMA       TYPE DZTERM,
ZTERMB       TYPE DZTERM,
ZWELS        TYPE DZWELS,
END   OF T_S_TEMP,

* 件数用
BEGIN OF T_S_CNT,
INP  TYPE I,                 "入力件数
NML  TYPE I,                 "正常処理件数
ERR  TYPE I,                 "エラー件数
END   OF T_S_CNT.

*&---------------------------------------------------------------------*
*& 内部テーブル定義                                                    *
*&---------------------------------------------------------------------*
DATA:
*-内部テーブル
G_I_BDC     TYPE TABLE OF BDCDATA,     "BDCテーブル

*-構造
GS_CNT      TYPE T_S_CNT               "件数
.
*&---------------------------------------------------------------------*
*& データ定義：グローバルデータ型
*&---------------------------------------------------------------------*
DATA:
GW_DATUM          TYPE SY-DATUM,   "日付
GW_UZEIT          TYPE SY-UZEIT,   "時刻
GW_UNAME          TYPE SY-UNAME.   "時刻

*&---------------------------------------------------------------------*
*& コンスタント定義
*&---------------------------------------------------------------------*
CONSTANTS:
* トランザクションコード
BEGIN OF CNS_TCD,
XK02         TYPE TCODE VALUE 'XK02',  "T-cd：仕入先更新
XD02         TYPE TCODE VALUE 'XD02',  "T-cd：得意先更新
END   OF CNS_TCD,

* 取引先機能
BEGIN OF CNS_PARVW,
CLIENT        TYPE PARVW VALUE 'Z3',    "取引先
AGGREG        TYPE PARVW VALUE 'RS',    "名寄先
OFFSET        TYPE PARVW VALUE 'Z2',    "相殺対象
END   OF CNS_PARVW,

* 処理フラグ
BEGIN OF CNS_FLG,
ON(1)         TYPE C     VALUE 'X',     "フラグON
OFF(1)        TYPE C     VALUE ' ',     "フラグOFF
END   OF CNS_FLG,

* 仕入先・得意先フラグ
BEGIN OF CNS_KBN,
K(1)         TYPE C     VALUE 'K',     "仕入先区分
D(1)         TYPE C     VALUE 'D',     "得意先区分
END   OF CNS_KBN,

CNS_EKORG_1     TYPE EKORG VALUE '1000',  "購買組織
CNS_VKORG_1     TYPE VKORG VALUE '1000',  "販売組織
CNS_BUKRS_1     TYPE BUKRS VALUE 'C001',  "会社コード
CNS_LAND_JP     TYPE LAND1 VALUE 'JP'    "国コード
.
*&---------------------------------------------------------------------*
*& 選択画面定義                                                        *
*&---------------------------------------------------------------------*
PARAMETERS:
P_INPATH(128)  LOWER CASE OBLIGATORY.   "入力ﾌｧｲﾙ名(ローカル)

SELECTION-SCREEN SKIP.

PARAMETERS:
P_OTPATH(128)  LOWER CASE OBLIGATORY.   "入力ﾌｧｲﾙ名(ローカル)

SELECTION-SCREEN SKIP.

PARAMETERS P_TEST AS CHECKBOX.            "テスト実行

*&---------------------------------------------------------------------*
*& AT SELECTION-SCREEN                                                 *
*&---------------------------------------------------------------------*
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_INPATH.
PERFORM FILE_OPEN_DIALOG.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_OTPATH.
PERFORM FILE_SAVE_DIALOG.
*&---------------------------------------------------------------------*
*& START-OF-SELECTION                                                  *
*&---------------------------------------------------------------------*
START-OF-SELECTION.
PERFORM INIT.
PERFORM MAIN.

*----------------------------------------------------------------------*
* TOP-OF-PAGE
*----------------------------------------------------------------------*
TOP-OF-PAGE.
PERFORM HEADER_WRITE.

*&---------------------------------------------------------------------*
*& END-OF-SELECTION                                                    *
*&---------------------------------------------------------------------*
END-OF-SELECTION.

*&---------------------------------------------------------------------*
*&      Form  file_open_dialog_sv
*&---------------------------------------------------------------------*
*       ファイルダイアログ表示
*----------------------------------------------------------------------*
FORM FILE_OPEN_DIALOG.

DATA:
LV_FILENAME  TYPE STRING,
LV_FILETABLE TYPE FILETABLE,
LV_RC TYPE I.

CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
EXPORTING
FILE_FILTER             = '*.txt'
INITIAL_DIRECTORY       = 'C:\'
CHANGING
FILE_TABLE              = LV_FILETABLE
RC                      = LV_RC
EXCEPTIONS
FILE_OPEN_DIALOG_FAILED = 1
CNTL_ERROR              = 2
ERROR_NO_GUI            = 3
OTHERS                  = 4
.

READ TABLE LV_FILETABLE INTO LV_FILENAME INDEX 1.
P_INPATH = LV_FILENAME.

ENDFORM.                    " file_open_dialog
*&---------------------------------------------------------------------*
*&      Form  INIT
*&---------------------------------------------------------------------*
*       初期処理
*----------------------------------------------------------------------*
FORM INIT .

CLEAR:
G_I_BDC,
GS_CNT.

GW_DATUM = SY-DATUM.   "日付
GW_UZEIT = SY-UZEIT.   "時刻
GW_UNAME = SY-UNAME.   "ユーザ名

ENDFORM.                    " INIT
*&---------------------------------------------------------------------*
*&      Form  data_read
*&---------------------------------------------------------------------*
*       ファイル読込
*----------------------------------------------------------------------*
FORM GUI_UPLOAD CHANGING PIT_FILE TYPE T_I_FILE.

DATA LV_FILENAME TYPE STRING.
LV_FILENAME = P_INPATH.

CALL FUNCTION 'GUI_UPLOAD'
EXPORTING
FILENAME                = LV_FILENAME
HAS_FIELD_SEPARATOR     = CNS_FLG-ON
TABLES
DATA_TAB                = PIT_FILE
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
OTHERS                  = 17.

IF SY-SUBRC <> 0.
MESSAGE S401 WITH '入力ファイルオープンエラー'
P_INPATH.
LEAVE LIST-PROCESSING.
ENDIF.

DESCRIBE TABLE PIT_FILE LINES GS_CNT-INP.

* データなしの場合、終了処理へ
CHECK GS_CNT-INP = 0.
MESSAGE S400 WITH '入力ファイルが０件です'.
LEAVE LIST-PROCESSING.

ENDFORM.                    " data_read
*&---------------------------------------------------------------------*
*&      Form  MAIN
*&---------------------------------------------------------------------*
*       メイン処理
*----------------------------------------------------------------------*
FORM MAIN .

DATA:
LIT_LFM1     TYPE T_I_LFM1,    "内部TBL:仕入先(購買)取得用
LIT_WYT3     TYPE T_I_WYT3,    "内部TBL:仕入先(取引先)取得用
LIT_LFA1     TYPE T_I_LFA1,    "内部TBL:仕入先(一般)取得用
LIT_KNA1     TYPE T_I_KNA1,    "内部TBL:得意先(一般)取得用
LIT_PICHECK  TYPE T_I_PIC,     "内部TBL:同PIチェック用
LIT_COMP     TYPE T_I_EDIT,    "内部TBL:処理完了データ
LIT_OKDATA   TYPE T_I_EDIT,    "内部TBL:一次チェックOKデータ
LIT_NGDATA   TYPE T_I_EDIT.    "内部TBL:NGデータ

* 事前処理
PERFORM ADVANCE_PROC
CHANGING LIT_OKDATA   "内部TBL:OKデータ
LIT_NGDATA   "内部TBL:NGデータ
LIT_LFM1     "内部TBL:仕入先(購買)取得用
LIT_WYT3     "内部TBL:仕入先(取引先)取得用
LIT_LFA1     "内部TBL:仕入先(一般)取得用
LIT_KNA1     "内部TBL:得意先(一般)取得用
LIT_PICHECK. "内部TBL:同PIチェック用

* 更新処理
PERFORM UPDATE_PROC
USING LIT_OKDATA    "内部TBL:OKデータ
LIT_LFM1      "内部TBL:仕入先(購買)取得用
LIT_WYT3      "内部TBL:仕入先(取引先)取得用
LIT_PICHECK   "内部TBL:同PIチェック用
CHANGING LIT_COMP      "内部TBL:画面出力データ
LIT_NGDATA.   "内部TBL:NGデータ


* 出力処理
PERFORM OUTPUT_PROC
USING LIT_NGDATA    "内部TBL:NGデータ
LIT_COMP      "内部TBL:処理完了データ
LIT_LFA1      "内部TBL:仕入先(一般)取得用
LIT_KNA1.     "内部TBL:得意先(一般)取得用

ENDFORM.                    " MAIN
*&---------------------------------------------------------------------*
*&      Form  CONV_ALPHA_INPUT
*&---------------------------------------------------------------------*
*       SAP内部形式変換(数値前ゼロ埋め)
*----------------------------------------------------------------------*
*  -->  pi_input    入力値
*  <--  po_output   出力値
*----------------------------------------------------------------------*
FORM CONV_ALPHA_INPUT USING     PI_INPUT   TYPE C
CHANGING  PO_OUTPUT  TYPE C.

CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = PI_INPUT
IMPORTING
OUTPUT = PO_OUTPUT.

ENDFORM.                    " CONV_ALPHA_INPUT
*&---------------------------------------------------------------------*
*&      Form  bdc_dataset
*&---------------------------------------------------------------------*
*       BDCデータ編集
*----------------------------------------------------------------------*
*  -->  pi_begin  Dynpro 開始
*       pi_name   BDC モジュールプール / 項目名
*       pi_value  BDC Dynpro 番号 / 項目値
*----------------------------------------------------------------------*
FORM BDC_DATASET USING PI_BEGIN TYPE CHAR1
PI_NAME  TYPE ANY
PI_VALUE TYPE ANY.
DATA:
L_S_BDC     TYPE BDCDATA.              "BDCテーブル

IF PI_BEGIN = 'X'.
L_S_BDC-PROGRAM   = PI_NAME.
L_S_BDC-DYNPRO    = PI_VALUE.
L_S_BDC-DYNBEGIN  = PI_BEGIN.
APPEND L_S_BDC TO G_I_BDC.
ELSE.
*-  '/'が入力されてない場合にセット
IF PI_VALUE <> '/'.
L_S_BDC-FNAM      = PI_NAME.
L_S_BDC-FVAL      = PI_VALUE.
APPEND L_S_BDC TO G_I_BDC.
ENDIF.
ENDIF.

ENDFORM.                    " bdc_dataset
*&---------------------------------------------------------------------*
*&      Form  call_tran
*&---------------------------------------------------------------------*
*       トランザクション起動
*----------------------------------------------------------------------*
FORM CALL_TRAN      USING PW_TCD
CHANGING PIT_WORK   TYPE T_I_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* ローカル定義
FIELD-SYMBOLS:
<LFS_WORK>   TYPE T_S_EDIT.

DATA:
LW_MODE       TYPE CTU_MODE,
LW_MSGTX      TYPE MSGTX.

LW_MODE = 'N'.

* トランザクション起動
CALL TRANSACTION  PW_TCD
USING  G_I_BDC
MODE  LW_MODE
UPDATE  'S'.


CHECK SY-SUBRC <> 0.

* メッセージ取得
CALL FUNCTION 'MESSAGE_TEXT_BUILD'
EXPORTING
MSGID               = SY-MSGID
MSGNR               = SY-MSGNO
MSGV1               = SY-MSGV1
MSGV2               = SY-MSGV2
MSGV3               = SY-MSGV3
MSGV4               = SY-MSGV4
IMPORTING
MESSAGE_TEXT_OUTPUT = LW_MSGTX.

* 基本条件データを検索
READ TABLE PIT_WORK       "一次格納WORKTBL
ASSIGNING <LFS_WORK>
WITH KEY BASE_ZT = '1'.

IF SY-SUBRC = 0.

*   メッセージの格納
<LFS_WORK>-MSG = LW_MSGTX.

ELSE.

READ TABLE PIT_WORK
ASSIGNING <LFS_WORK>
INDEX 1.

IF SY-SUBRC = 0.
*  　 メッセージの格納
<LFS_WORK>-MSG = LW_MSGTX.

ENDIF.

ENDIF.

PW_ERFLG_T = CNS_FLG-ON.
PW_ERFLG_R = CNS_FLG-ON.

ENDFORM.                    " call_tran
*&---------------------------------------------------------------------*
*&      Form  bdc_close
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_KAISHA
*&---------------------------------------------------------------------*
*       BDCデータ作成：仕入先会社コードデータ
*----------------------------------------------------------------------*
*  -->  pi_FLG  保存フラグ
*----------------------------------------------------------------------*
FORM EDIT_BDC_KAISHA_K USING PS_TEMP TYPE T_S_TEMP.

****** 支払処理 会計管理
PERFORM BDC_DATASET USING:
'X'  'SAPMF02K'    '0215',
' '  'LFB1-ZTERM'  PS_TEMP-ZTERMB,   "支払条件
' '  'LFB1-ZWELS'  PS_TEMP-ZWELS,    "支払方法
' '  'BDC_OKCODE'  '/00'.

ENDFORM.                    " EDIT_BDC_KAISHA_K
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_KOBAI
*&---------------------------------------------------------------------*
*       BDCデータ作成：仕入先購買組織データ
*----------------------------------------------------------------------*
FORM EDIT_BDC_KOBAI USING PS_TEMP TYPE T_S_TEMP.

****** 購買データ
PERFORM BDC_DATASET USING:
'X'  'SAPMF02K'     '0310',
*          ' '  'LFM1-WAERS'             G_S_DATA-WAERS,
' '  'LFM1-ZTERM'    PS_TEMP-ZTERMA,   "支払条件
' '  'BDC_OKCODE'             '/00'.

ENDFORM.                    " EDIT_BDC_KOBAI
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_KAISHA
*&---------------------------------------------------------------------*
*       BDCデータ作成：仕入先第一画面
*----------------------------------------------------------------------*
FORM EDIT_BDC_FIRST_K USING PW_LIFNR.

PERFORM BDC_DATASET USING:
'X'  'SAPMF02K'       '0101',
' '  'RF02K-LIFNR'     PW_LIFNR,
' '  'RF02K-BUKRS'     CNS_BUKRS_1,
' '  'RF02K-EKORG'     CNS_EKORG_1,
' '  'RF02K-D0215'     'X',
' '  'RF02K-D0310'     'X',
' '  'BDC_OKCODE'      '/00'.

ENDFORM.                    " EDIT_BDC_FIRST
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_SAVE
*&---------------------------------------------------------------------*
*       BDCデータ作成：保存画面
*----------------------------------------------------------------------*
FORM EDIT_BDC_SAVE.
PERFORM BDC_DATASET USING:
'X'  'SAPLSPO1'       '0300',
' '  'BDC_OKCODE'     '=YES'.

* 本実行
IF P_TEST IS INITIAL.

PERFORM BDC_DATASET USING:
'X'  'SAPLSPO1'       '0300',
' '  'BDC_OKCODE'     '=YES'.

* テスト実行
ELSE.
PERFORM BDC_DATASET USING:
'X'  'SAPLSPO1'       '0300',
' '  'BDC_OKCODE'     '=NO'.

ENDIF.

ENDFORM.                    " EDIT_BDC_SAVE
*&---------------------------------------------------------------------*
*&      Form  ADVANCE_PROC
*&---------------------------------------------------------------------*
*       text  更新事前準備処理
*----------------------------------------------------------------------*
FORM ADVANCE_PROC CHANGING PIT_OK     TYPE T_I_EDIT
PIT_NG     TYPE T_I_EDIT
PIT_LFM1   TYPE T_I_LFM1
PIT_WYT3   TYPE T_I_WYT3
PIT_LFA1   TYPE T_I_LFA1
PIT_KNA1   TYPE T_I_KNA1
PIT_CHECK  TYPE T_I_PIC.
DATA:
LIT_FILE    TYPE T_I_FILE,     "内部TBL:入力ファイル
LIT_KNVV    TYPE T_I_KNVV,     "内部TBL:得意先(販売)取得用
LIT_T052    TYPE T_I_T052,     "内部TBL:支払条件取得用
LIT_T042Z   TYPE T_I_T042Z.    "内部TBL:支払方法取得用

*-入力ファイル処理
PERFORM GUI_UPLOAD
CHANGING LIT_FILE.     "内部TBL:入力ファイル

*-マスタ情報の取得
PERFORM GET_PROC
CHANGING LIT_FILE        "内部TBL:入力ファイル
PIT_LFM1        "内部TBL:仕入先(購買)取得用
PIT_WYT3        "内部TBL:仕入先(取引先)取得用
LIT_KNVV        "内部TBL:得意先(販売)取得用
PIT_LFA1        "内部TBL:仕入先(一般)取得用
PIT_KNA1        "内部TBL:得意先(一般)取得用
LIT_T052        "内部TBL:支払条件取得用
LIT_T042Z.      "内部TBL:支払方法取得用

*-チェック処理
PERFORM CHECK_PROC
CHANGING LIT_FILE        "内部TBL:入力ファイル
PIT_LFM1        "内部TBL:仕入先(購買)取得用
PIT_WYT3        "内部TBL:仕入先(取引先)取得用
LIT_KNVV        "内部TBL:得意先(販売)取得用
LIT_T052        "内部TBL:支払条件取得用
LIT_T042Z       "内部TBL:支払方法取得用
PIT_OK          "内部TBL:OKデータ
PIT_NG          "内部TBL:NGデータ
PIT_CHECK.      "内部TBL:PIチェック用

* SORT処理
SORT PIT_CHECK BY LIFNR.

ENDFORM.                    " ADVANCE_PROC
*&---------------------------------------------------------------------*
*&      Form  GET_PROC
*&---------------------------------------------------------------------*
*       text　マスタ情報取得処理
*----------------------------------------------------------------------*
FORM GET_PROC CHANGING PIT_FILE    TYPE T_I_FILE
PIT_LFM1    TYPE T_I_LFM1
PIT_WYT3    TYPE T_I_WYT3
PIT_KNVV    TYPE T_I_KNVV
PIT_LFA1    TYPE T_I_LFA1
PIT_KNA1    TYPE T_I_KNA1
PIT_T052    TYPE T_I_T052
PIT_T042Z   TYPE T_I_T042Z.

DATA:
LIT_LIFNR   TYPE T_I_LIFNR,    "内部TBL:仕入先検索用
LIT_KUNNR   TYPE T_I_KUNNR,    "内部TBL:得意先検索用
LIT_T052    TYPE T_I_T052,     "内部TBL:支払条件検索用
LIT_T042Z   TYPE T_I_T042Z.    "内部TBL:支払方法検索用

* 取得用の検索データ作成
PERFORM MAKE_DATA
CHANGING PIT_FILE
LIT_LIFNR
LIT_KUNNR
LIT_T052
LIT_T042Z.

* 取得処理
PERFORM GET_MSTDATA
USING LIT_LIFNR
LIT_KUNNR
LIT_T052
LIT_T042Z
CHANGING PIT_LFM1
PIT_WYT3
PIT_KNVV
PIT_LFA1
PIT_KNA1
PIT_T052
PIT_T042Z.
ENDFORM.                    " GET_PROC
*&---------------------------------------------------------------------*
*&      Form  MAKE_DATA
*&---------------------------------------------------------------------*
*       text 一括取得用データの作成
*----------------------------------------------------------------------*
FORM MAKE_DATA CHANGING PIT_FILE    TYPE T_I_FILE
PIT_LIFNR   TYPE T_I_LIFNR
PIT_KUNNR   TYPE T_I_KUNNR
PIT_T052    TYPE T_I_T052
PIT_T042Z   TYPE T_I_T042Z.
* ローカル定義
FIELD-SYMBOLS:
<LFS_FILE>     TYPE T_S_FILE.

DATA:
LS_LIFNR       TYPE T_S_LIFNR,  "仕入先コード
LS_KUNNR       TYPE T_S_KUNNR.  "得意先コード

LOOP AT PIT_FILE ASSIGNING <LFS_FILE>.

*-- 取引先コード
IF NOT <LFS_FILE>-CLIENT IS INITIAL.
CASE <LFS_FILE>-KUBUN.
WHEN CNS_KBN-K.

*         仕入先コードをSAP内部形式に変換
PERFORM CONV_ALPHA_INPUT USING    <LFS_FILE>-CLIENT
CHANGING <LFS_FILE>-CLIENT.
LS_LIFNR-LIFNR = <LFS_FILE>-CLIENT.
COLLECT LS_LIFNR INTO PIT_LIFNR.

WHEN CNS_KBN-D.

*         得意先コードをSAP内部形式に変換
PERFORM CONV_ALPHA_INPUT USING    <LFS_FILE>-CLIENT
CHANGING <LFS_FILE>-CLIENT.

LS_KUNNR-KUNNR = <LFS_FILE>-CLIENT.
COLLECT LS_KUNNR INTO PIT_KUNNR.

ENDCASE.
ENDIF.

*-- 支払条件(書式変換)
PERFORM SET_ZTERM :
CHANGING <LFS_FILE>-ZTERM_PZ
PIT_T052,

CHANGING <LFS_FILE>-ZTERM_SZ
PIT_T052,

CHANGING <LFS_FILE>-ZTERM_P1
PIT_T052,

CHANGING <LFS_FILE>-ZTERM_S1
PIT_T052,

CHANGING <LFS_FILE>-ZTERM_P2
PIT_T052,

CHANGING <LFS_FILE>-ZTERM_S2
PIT_T052,

CHANGING <LFS_FILE>-ZTERM_P3
PIT_T052,

CHANGING <LFS_FILE>-ZTERM_S3
PIT_T052,

CHANGING <LFS_FILE>-ZTERM_P4
PIT_T052,

CHANGING <LFS_FILE>-ZTERM_S4
PIT_T052.

*-- 支払方法
PERFORM SET_ZLSCH :
USING <LFS_FILE>-ZLSCH_Z
CHANGING PIT_T042Z,

USING <LFS_FILE>-ZLSCH_1
CHANGING PIT_T042Z,

USING <LFS_FILE>-ZLSCH_2
CHANGING PIT_T042Z,

USING <LFS_FILE>-ZLSCH_3
CHANGING PIT_T042Z,

USING <LFS_FILE>-ZLSCH_4
CHANGING PIT_T042Z.

ENDLOOP.

* SORT処理
SORT PIT_FILE BY KUBUN
CLIENT
WAERS
LOWAMT.

ENDFORM.                    " MAKE_DATA
*&---------------------------------------------------------------------*
*&      Form  SET_ZTERM
*&---------------------------------------------------------------------*
*       text  支払条件を内部TBLにSET
*----------------------------------------------------------------------*
FORM SET_ZTERM CHANGING PW_ZTERM
PIT_T052  TYPE T_I_T052.

DATA:
LW_T052    TYPE T_S_T052.

* 初期値でない
CHECK NOT PW_ZTERM IS INITIAL.

* 書式変換
PERFORM CONV_ALPHA_INPUT
USING PW_ZTERM
CHANGING PW_ZTERM.

LW_T052-ZTERM = PW_ZTERM.
COLLECT LW_T052 INTO PIT_T052.

ENDFORM.                    " SET_ZTERM
*&---------------------------------------------------------------------*
*&      Form  SET_ZLSCH
*&---------------------------------------------------------------------*
*       text  支払方法を内部TBLにSET
*----------------------------------------------------------------------*
FORM SET_ZLSCH USING    PW_ZLSCH
CHANGING PIT_T042Z  TYPE T_I_T042Z.

DATA:
LW_T042Z    TYPE T_S_T042Z.

* 初期値でない
CHECK NOT PW_ZLSCH IS INITIAL.
LW_T042Z-ZLSCH = PW_ZLSCH.
COLLECT LW_T042Z INTO PIT_T042Z.

ENDFORM.                    " SET_ZLSCH
*&---------------------------------------------------------------------*
*&      Form  GET_MSTDATA
*&---------------------------------------------------------------------*
*       text  マスタデータ取得処理
*----------------------------------------------------------------------*
FORM GET_MSTDATA USING  PIT_LIFNR_S TYPE T_I_LIFNR
PIT_KUNNR_S TYPE T_I_KUNNR
PIT_T052_S  TYPE T_I_T052
PIT_T042Z_S TYPE T_I_T042Z
CHANGING  PIT_LFM1    TYPE T_I_LFM1
PIT_WYT3    TYPE T_I_WYT3
PIT_KNVV    TYPE T_I_KNVV
PIT_LFA1    TYPE T_I_LFA1
PIT_KNA1    TYPE T_I_KNA1
PIT_T052    TYPE T_I_T052
PIT_T042Z   TYPE T_I_T042Z.

* 仕入先情報
PERFORM GET_SHIRE
USING PIT_LIFNR_S  "内部TBL:仕入先コード検索用
CHANGING PIT_WYT3     "内部TBL:名寄先一覧
PIT_LFM1     "内部TBL:仕入先(購買組織)
PIT_LFA1.    "内部TBL:仕入先(一般)

* 得意先情報
PERFORM GET_TOKUI
USING PIT_KUNNR_S  "内部TBL:得意先コード検索用
CHANGING PIT_KNVV     "内部TBL:得意先(販売組織)
PIT_KNA1.    "内部TBL:得意先(一般)

* その他情報
PERFORM GET_OTHER
USING PIT_T052_S   "内部TBL:支払条件検索用
PIT_T042Z_S  "内部TBL:支払方法検索用
CHANGING PIT_T052     "内部TBL:支払条件
PIT_T042Z.   "内部TBL:支払方法

SORT:
PIT_LFM1  BY LIFNR,
PIT_LFA1  BY LIFNR,
PIT_KNVV  BY KUNNR,
PIT_KNA1  BY KUNNR,
PIT_T052  BY ZTERM,
PIT_T042Z BY ZLSCH.

ENDFORM.                    " GET_MSTDATA
*&---------------------------------------------------------------------*
*&      Form  GET_SHIRE
*&---------------------------------------------------------------------*
*       text 仕入先情報の取得
*----------------------------------------------------------------------*
FORM GET_SHIRE   USING  PIT_LIFNR_S TYPE T_I_LIFNR
CHANGING  PIT_WYT3    TYPE T_I_WYT3
PIT_LFM1    TYPE T_I_LFM1
PIT_LFA1    TYPE T_I_LFA1.

FIELD-SYMBOLS:
<LFS_WYT3>  TYPE T_S_WYT3.

DATA:
LIT_LIFNR   TYPE T_I_LIFNR,    "内部TB:Lマージ用(仕入先+名寄先)
LS_LIFNR    TYPE T_S_LIFNR,    "構造:マージ用(仕入先+名寄先)
LIT_WYT3    TYPE T_I_WYT3.     "内部TBL:仕入先(取引先機能)取得用

CHECK NOT PIT_LIFNR_S IS INITIAL.

* マージのためのデータ移行
LIT_LIFNR =  PIT_LIFNR_S.

* 入力データの仕入先コードを元に名寄先に設定されている
* 名寄先コードを取得
SELECT LIFNR   "仕入先コード
LIFN2   "他の仕入先への参照
INTO TABLE LIT_WYT3
FROM WYT3
FOR ALL ENTRIES IN PIT_LIFNR_S
WHERE LIFNR = PIT_LIFNR_S-LIFNR
AND EKORG = CNS_EKORG_1
AND PARVW = CNS_PARVW-AGGREG.  "名寄先:"RG"

* 名寄先の取得に成功した場合
IF SY-SUBRC = 0.

*   名寄先の重複削除
SORT LIT_WYT3 BY LIFN2.
DELETE ADJACENT DUPLICATES FROM LIT_WYT3
COMPARING LIFN2.

*   名寄先コードを元に名寄先に設定されている
*   仕入先コードを取得
SELECT LIFNR   "仕入先コード
LIFN2   "他の仕入先への参照
INTO TABLE PIT_WYT3
FROM WYT3
FOR ALL ENTRIES IN LIT_WYT3
WHERE LIFN2 = LIT_WYT3-LIFN2
AND EKORG = CNS_EKORG_1
AND PARVW = CNS_PARVW-AGGREG.  "名寄先:"RG"

*   名寄先の重複削除
SORT PIT_WYT3 BY LIFNR
LIFN2.
DELETE ADJACENT DUPLICATES FROM PIT_WYT3.

* 　仕入先 + 名寄先マージ処理
LOOP AT PIT_WYT3 ASSIGNING <LFS_WYT3>.
LS_LIFNR-LIFNR = <LFS_WYT3>-LIFNR.
COLLECT LS_LIFNR INTO LIT_LIFNR.
ENDLOOP.
ENDIF.

* 仕入先情報(購買組織)
SELECT LIFNR   "仕入先コード
WAERS   "購買発注通貨
INTO TABLE PIT_LFM1
FROM LFM1
FOR ALL ENTRIES IN LIT_LIFNR
WHERE LIFNR = LIT_LIFNR-LIFNR
AND EKORG = CNS_EKORG_1.

* 仕入先情報(一般)
SELECT LIFNR   "仕入先コード
NAME1                                              "名称1
INTO TABLE PIT_LFA1
FROM LFA1
FOR ALL ENTRIES IN LIT_LIFNR
WHERE LIFNR = LIT_LIFNR-LIFNR.

SORT: PIT_LFM1 BY LIFNR,
PIT_LFA1 BY LIFNR.

ENDFORM.                                                    " GET_SHIRE
*&---------------------------------------------------------------------*
*&      Form  GET_TOKUI
*&---------------------------------------------------------------------*
*       text　得意先情報の取得
*----------------------------------------------------------------------*
FORM GET_TOKUI USING    PIT_KUNNR_S   TYPE T_I_KUNNR
CHANGING PIT_KNVV      TYPE T_I_KNVV
PIT_KNA1      TYPE T_I_KNA1.

CHECK NOT PIT_KUNNR_S  IS INITIAL.

SELECT KUNNR     "得意先コード
WAERS     "通貨
INTO TABLE PIT_KNVV
FROM KNVV
FOR ALL ENTRIES IN PIT_KUNNR_S
WHERE KUNNR = PIT_KUNNR_S-KUNNR
AND VKORG = CNS_VKORG_1.

SELECT KUNNR     "得意先コード
NAME1     "名称１
INTO TABLE PIT_KNA1
FROM KNA1
FOR ALL ENTRIES IN PIT_KUNNR_S
WHERE KUNNR = PIT_KUNNR_S-KUNNR.

SORT: PIT_KNVV BY KUNNR,
PIT_KNA1 BY KUNNR.

ENDFORM.                    " GET_TOKUI
*&---------------------------------------------------------------------*
*&      Form  GET_OTHER
*&---------------------------------------------------------------------*
*       text 他情報の取得
*----------------------------------------------------------------------*
FORM GET_OTHER USING    PIT_T052_S    TYPE T_I_T052
PIT_T042Z_S   TYPE T_I_T042Z
CHANGING PIT_T052      TYPE T_I_T052
PIT_T042Z     TYPE T_I_T042Z.

* 支払条件
IF NOT PIT_T052_S IS INITIAL.

SELECT ZTERM     "支払条件
INTO TABLE PIT_T052
FROM T052
FOR ALL ENTRIES IN PIT_T052_S
WHERE ZTERM = PIT_T052_S-ZTERM.

SORT PIT_T052 BY ZTERM.
ENDIF.

* 支払方法
IF NOT PIT_T042Z_S IS INITIAL.

SELECT ZLSCH     "支払方法
INTO TABLE PIT_T042Z
FROM T042Z
FOR ALL ENTRIES IN PIT_T042Z_S
WHERE LAND1 = CNS_LAND_JP
AND ZLSCH = PIT_T042Z_S-ZLSCH.

SORT PIT_T042Z BY ZLSCH .

ENDIF.

ENDFORM.                    " GET_OTHER
*&---------------------------------------------------------------------*
*&      Form  CHECK_PROC
*&---------------------------------------------------------------------*
*       text  チェック処理
*----------------------------------------------------------------------*
FORM CHECK_PROC CHANGING PIT_FILE    TYPE T_I_FILE
PIT_LFM1    TYPE T_I_LFM1
PIT_WYT3    TYPE T_I_WYT3
PIT_KNVV    TYPE T_I_KNVV
PIT_T052    TYPE T_I_T052
PIT_T042Z   TYPE T_I_T042Z
PIT_OK      TYPE T_I_EDIT
PIT_NG      TYPE T_I_EDIT
PIT_CHECK   TYPE T_I_PIC.

* ローカル定義
FIELD-SYMBOLS:
<LFS_FILE>     TYPE T_S_FILE.

DATA:
LW_ERFLG_T   TYPE C,           "取引先単位のエラー
LW_ERFLG_R   TYPE C,           "1レコード単位エラー
LS_WORK      TYPE T_S_EDIT,    "構造:一次格納用
LS_WKS       TYPE T_S_WKS,     "構造:取引先単位の退避用
LIT_WORK     TYPE T_I_EDIT,    "内部TBL:一次格納用
LIT_LOWAMT   TYPE T_I_LOWAMT.  "内部TBL:閾値重複用

* 入力ファイルデータのループ
LOOP AT PIT_FILE ASSIGNING <LFS_FILE>.

CLEAR :
LW_ERFLG_R,
LS_WORK.

*   ファイル構造⇒出力構造
MOVE-CORRESPONDING <LFS_FILE> TO LS_WORK.

*-- 初期処理
AT NEW KUBUN.

PERFORM NEW_PROC_1
USING <LFS_FILE>
CHANGING LIT_WORK     "内部TBL:一次格納用
PIT_CHECK    "内部TBL:PIチェック用
PIT_LFM1     "内部TBL:仕入先(購買)取得用
PIT_KNVV     "内部TBL:得意先(販売)取得用
PIT_WYT3     "内部TBL:仕入先(取引先)取得用
LIT_LOWAMT   "内部TBL:閾値重複用
LS_WKS       "構造:取引先単位の退避用
LS_WORK      "構造:一次格納用
LW_ERFLG_T   "取引先単位のエラー
LW_ERFLG_R.  "1レコード単位エラー
ENDAT.

*-- 初期値チェック
PERFORM CHECK_INIT
USING <LFS_FILE>
CHANGING LS_WORK
LW_ERFLG_T     "取引先単位のエラー
LW_ERFLG_R.    "1レコード単位エラー

*-- マスタチェック
PERFORM CHECK_MST
USING <LFS_FILE>
CHANGING LS_WORK
PIT_T052        "内部TBL:支払条件取得用
PIT_T042Z       "内部TBL:支払方法取得用
LW_ERFLG_T      "取引先単位のエラー
LW_ERFLG_R.     "1レコード単位エラー

*-- その他チェック
PERFORM CHECK_OTHER
USING <LFS_FILE>
CHANGING LS_WORK
LIT_LOWAMT    "内部TBL:閾値重複用
LS_WKS        "構造:取引先単位の退避用
LW_ERFLG_T    "取引先単位のエラー
LW_ERFLG_R.   "1レコード単位エラー

*-- レコード処理
*   SEQの採番
LS_WORK-SEQ = LS_WORK-SEQ + 1.
LS_WORK-SEQ = LS_WORK-SEQ.
*   退避した名寄先の格納
LS_WORK-LIFN2 = LS_WKS-LIFN2.
*   金額の書式変換
PERFORM CONVERT_INTER
USING <LFS_FILE>
CHANGING LS_WORK.

*   一次作業用の内部TBLに格納
APPEND LS_WORK TO LIT_WORK.

*-- 終了処理
AT END OF KUBUN.
*     基本取引条件のチェック
PERFORM CHECK_BASE_ZT
CHANGING LIT_WORK
LS_WKS
LW_ERFLG_T
LW_ERFLG_R.

*--   取引先単位のエラー判定
IF LW_ERFLG_T IS INITIAL.
APPEND LINES OF LIT_WORK TO PIT_OK.
ELSE.
APPEND LINES OF LIT_WORK TO PIT_NG.
ENDIF.
ENDAT.

ENDLOOP.

ENDFORM.                    " CHECK_PROC
*&---------------------------------------------------------------------*
*&      Form  NEW_PROC_1
*&---------------------------------------------------------------------*
*       text 初期処理
*----------------------------------------------------------------------*
FORM NEW_PROC_1    USING PW_FILE      TYPE T_S_FILE
CHANGING PIT_WORK     TYPE T_I_EDIT
PIT_CHECK    TYPE T_I_PIC
PIT_LFM1     TYPE T_I_LFM1
PIT_KNVV     TYPE T_I_KNVV
PIT_WYT3     TYPE T_I_WYT3
PIT_LOWAMT   TYPE T_I_LOWAMT
PS_WKS       TYPE T_S_WKS
PS_WORK      TYPE T_S_EDIT
PW_ERFLG_T   TYPE C
PW_ERFLG_R   TYPE C.
DATA:
LS_WYT3        TYPE T_S_WYT3,
LS_CHECK       TYPE T_S_PIC,
LS_WORK        TYPE T_S_EDIT,
LS_LFM1        TYPE T_S_LFM1,
LS_KNVV        TYPE T_S_KNVV.

* 初期化
REFRESH : PIT_WORK,    "内部TBL:一次格納用
PIT_LOWAMT.  "内部TBL:閾値重複用

CLEAR: PW_ERFLG_T,     "取引先単位のエラー
PS_WKS.         "一次データ

*- 区分のチェック
IF PW_FILE-KUBUN <> CNS_KBN-K
AND PW_FILE-KUBUN <> CNS_KBN-D.

*   エラー処理
PERFORM ERROR_PROC_MSG_1
USING PW_FILE-KUBUN
TEXT-T01
TEXT-E01
CHANGING LS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

CHECK PW_ERFLG_R IS INITIAL.

CASE PW_FILE-KUBUN.

* 仕入先の場合
WHEN CNS_KBN-K.

*     購買組織情報
READ TABLE PIT_LFM1
INTO LS_LFM1
WITH KEY LIFNR = PW_FILE-CLIENT
BINARY SEARCH.

IF SY-SUBRC <> 0.

*       エラー処理
PERFORM ERROR_PROC_MSG_1
USING PW_FILE-CLIENT
TEXT-T02
TEXT-E02
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

*     通貨の退避
PS_WKS-WAERS = LS_LFM1-WAERS.

*     取引先情報
READ TABLE PIT_WYT3
INTO LS_WYT3
WITH KEY LIFNR = PW_FILE-CLIENT
BINARY SEARCH.

*     同PIチェック用
LS_CHECK-LIFNR  = LS_WYT3-LIFN2. "名寄先
LS_CHECK-CNT_PI = 1.             "カウンタ
COLLECT LS_CHECK INTO PIT_CHECK.

*     名寄先退避
PS_WKS-LIFN2  = LS_WYT3-LIFN2. "名寄先

*   得意先の場合
WHEN CNS_KBN-D.

*     販売情報の読込
READ TABLE PIT_KNVV
INTO LS_KNVV
WITH KEY KUNNR = PW_FILE-CLIENT
BINARY SEARCH.

IF SY-SUBRC <> 0.

*       エラー処理
PERFORM ERROR_PROC_MSG_1
USING PW_FILE-CLIENT
TEXT-T03
TEXT-E02
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

*     通貨の退避
PS_WKS-WAERS = LS_KNVV-WAERS.

*     手形通信費の退避
PS_WKS-TCH = PW_FILE-ZNTCH.

ENDCASE.

ENDFORM.                    " NEW_PROC_1
*&---------------------------------------------------------------------*
*&      Form  ERROR_PROC_MSG_1
*&---------------------------------------------------------------------*
*       text エラー処理
*----------------------------------------------------------------------*
FORM ERROR_PROC_MSG_1 USING    PW_ITEM
LW_TEXT01
LW_TEXT02
CHANGING PS_WORK       TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* メッセージの格納
IF PW_ITEM = SPACE.
PS_WORK-MSG = LW_TEXT01.
ELSE.

CONCATENATE LW_TEXT01
PW_ITEM
LW_TEXT02
INTO PS_WORK-MSG.
ENDIF.

* エラーフラグ
PW_ERFLG_T = CNS_FLG-ON.
PW_ERFLG_R = CNS_FLG-ON.

ENDFORM.                    " ERROR_PROC_MSG_1
*&---------------------------------------------------------------------*
*&      Form  ERROR_PROC_MSG_2
*&---------------------------------------------------------------------*
*       text エラー処理
*----------------------------------------------------------------------*
FORM ERROR_PROC_MSG_2 USING    PW_MSG
CHANGING PS_WORK     TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* メッセージの設定
PS_WORK-MSG = PW_MSG.

* ロックリリース
CALL FUNCTION 'DEQUEUE_ALL'
EXPORTING
_SYNCHRON = ' '.

* エラーフラグの設定
PW_ERFLG_T = CNS_FLG-ON.
PW_ERFLG_R = CNS_FLG-ON.

ENDFORM.                    " ERROR_PROC_MSG_2
*&---------------------------------------------------------------------*
*&      Form  CHECK_INIT
*&---------------------------------------------------------------------*
*       text  初期値チェック
*----------------------------------------------------------------------*
FORM CHECK_INIT USING    PS_FILE      TYPE T_S_FILE
CHANGING PS_WORK      TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

CHECK PW_ERFLG_R IS INITIAL.

*- 通貨コード
IF PS_FILE-WAERS IS INITIAL.
*   エラー処理
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E03
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDIF.

*- 残額-条件（支払日）
IF PS_FILE-ZTERM_PZ IS INITIAL.

*   エラー処理
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E04
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDIF.

*- 残額-条件（サイト）
IF PS_FILE-ZTERM_SZ IS INITIAL.
*   エラー処理
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E05
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

*- 残額-支払方法
IF PS_FILE-ZTERM_SZ IS INITIAL
AND PS_FILE-KUBUN = CNS_KBN-K.

*   エラー処理
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E06
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

ENDFORM.                    " CHECK_INIT
*&---------------------------------------------------------------------*
*&      Form  CHECK_MST
*&---------------------------------------------------------------------*
*       text  マスタの存在チェック
*----------------------------------------------------------------------*
FORM CHECK_MST USING    PS_FILE     TYPE T_S_FILE
CHANGING PS_WORK     TYPE T_S_EDIT
PIT_T052    TYPE T_I_T052
PIT_T042Z   TYPE T_I_T042Z
PW_ERFLG_T
PW_ERFLG_R.

CHECK PW_ERFLG_R IS INITIAL.

*- 支払条件
PERFORM CHECK_ZTERM :
USING PS_FILE-ZTERM_PZ
CHANGING PS_WORK
PIT_T052
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZTERM_PZ
CHANGING PS_WORK
PIT_T052
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZTERM_P1
CHANGING PS_WORK
PIT_T052
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZTERM_S1
CHANGING PS_WORK
PIT_T052
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZTERM_P2
CHANGING PS_WORK
PIT_T052
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZTERM_S2
CHANGING PS_WORK
PIT_T052
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZTERM_P3
CHANGING PS_WORK
PIT_T052
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZTERM_S3
CHANGING PS_WORK
PIT_T052
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZTERM_P4
CHANGING PS_WORK
PIT_T052
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZTERM_S4
CHANGING PS_WORK
PIT_T052
PW_ERFLG_T
PW_ERFLG_R.

CHECK PW_ERFLG_R IS INITIAL.

*- 支払方法
PERFORM CHECK_ZLSCH :
USING PS_FILE-ZLSCH_Z
CHANGING PS_WORK
PIT_T042Z
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZLSCH_1
CHANGING PS_WORK
PIT_T042Z
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZLSCH_2
CHANGING PS_WORK
PIT_T042Z
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZLSCH_3
CHANGING PS_WORK
PIT_T042Z
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZLSCH_4
CHANGING PS_WORK
PIT_T042Z
PW_ERFLG_T
PW_ERFLG_R.

ENDFORM.                    " CHECK_MST
*&---------------------------------------------------------------------*
*&      Form  CHECK_ZTERM
*&---------------------------------------------------------------------*
*       text  支払条件のマスタチェック
*----------------------------------------------------------------------*
FORM CHECK_ZTERM USING    PW_ZTERM
CHANGING PS_WORK     TYPE T_S_EDIT
PIT_T052    TYPE T_I_T052
PW_ERFLG_T
PW_ERFLG_R.

CHECK NOT PW_ZTERM IS INITIAL
AND PW_ERFLG_R IS INITIAL.

* 支払条件の検索
READ TABLE PIT_T052
TRANSPORTING NO FIELDS
WITH KEY ZTERM = PW_ZTERM
BINARY SEARCH.

CHECK SY-SUBRC <> 0.

* エラー処理
PERFORM ERROR_PROC_MSG_1
USING PW_ZTERM
TEXT-T04
TEXT-E02
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDFORM.                    " CHECK_ZTERM
*&---------------------------------------------------------------------*
*&      Form  CHECK_ZLSCH
*&---------------------------------------------------------------------*
*       text  支払方法のマスタチェック
*----------------------------------------------------------------------*
FORM CHECK_ZLSCH USING    PW_ZLSCH
CHANGING PS_WORK     TYPE T_S_EDIT
PIT_T042Z   TYPE T_I_T042Z
PW_ERFLG_T
PW_ERFLG_R.

CHECK NOT PW_ZLSCH IS INITIAL
AND PW_ERFLG_R IS INITIAL.

READ TABLE PIT_T042Z
TRANSPORTING NO FIELDS
WITH KEY ZLSCH = PW_ZLSCH
BINARY SEARCH.

CHECK SY-SUBRC <> 0.

* エラー処理
PERFORM ERROR_PROC_MSG_1
USING PW_ZLSCH
TEXT-T05
TEXT-E02
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDFORM.                    " CHECK_ZLSCH
*&---------------------------------------------------------------------*
*&      Form  CHECK_OTHER
*&---------------------------------------------------------------------*
*       text　その他チェック用
*----------------------------------------------------------------------*
FORM CHECK_OTHER USING    PS_FILE      TYPE T_S_FILE
CHANGING PS_WORK      TYPE T_S_EDIT
PIT_LOWAMT   TYPE T_I_LOWAMT
PS_WKS       TYPE T_S_WKS
PW_ERFLG_T
PW_ERFLG_R.

DATA:
LW_PER(7)       TYPE P DECIMALS 2.

* 基本取引条件のカウント
IF PS_FILE-BASE_ZT = '1'.

PS_WKS-CNT_BASE = PS_WKS-CNT_BASE + 1.

ENDIF.

CHECK PW_ERFLG_R IS INITIAL.
*- 金額・数値項目の妥当性チェック
PERFORM CHECK_CURRENCY
USING PS_FILE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

CHECK PW_ERFLG_R IS INITIAL.

*- 閾値の重複
PERFORM CHECK_DUPL
USING PS_FILE
CHANGING PS_WORK
PIT_LOWAMT
PW_ERFLG_T
PW_ERFLG_R.

CHECK PW_ERFLG_R IS INITIAL.

*- 通貨コード
IF PS_FILE-WAERS <> PS_WKS-WAERS.
PERFORM ERROR_PROC_MSG_1
USING PS_WKS-WAERS
TEXT-E08
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

CHECK PW_ERFLG_R IS INITIAL.

*- 手形通信費
IF PS_FILE-ZNTCH <> PS_WKS-TCH
AND PS_FILE-KUBUN = CNS_KBN-D.
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E09
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

CHECK PW_ERFLG_R IS INITIAL.

*- 100％未満チェック
LW_PER = PS_FILE-PER1 + PS_FILE-PER2
+ PS_FILE-PER3 + PS_FILE-PER4.

IF LW_PER > 100.

PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E10
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDIF.

CHECK PW_ERFLG_R IS INITIAL.

*- 分割方法チェック
PERFORM CHEK_EXIST :
USING PS_FILE-PER1
PS_FILE-PAY1
PS_FILE-ZTERM_P1
PS_FILE-ZTERM_S1
PS_FILE-ZLSCH_1
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-PER2
PS_FILE-PAY2
PS_FILE-ZTERM_P2
PS_FILE-ZTERM_S2
PS_FILE-ZLSCH_2
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-PER3
PS_FILE-PAY3
PS_FILE-ZTERM_P3
PS_FILE-ZTERM_S3
PS_FILE-ZLSCH_3
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-PER4
PS_FILE-PAY4
PS_FILE-ZTERM_P4
PS_FILE-ZTERM_S4
PS_FILE-ZLSCH_4
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

CHECK PW_ERFLG_R IS INITIAL.

*- 項目の不足チェック
PERFORM CHEK_CHIP :
USING PS_FILE-ZTERM_P1
PS_FILE-ZTERM_S1
PS_FILE-ZLSCH_1
PS_FILE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

CHECK PW_ERFLG_R IS INITIAL.

*- 飛び飛びチェック
PERFORM CHEK_INTERVALS
USING PS_FILE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

CHECK PW_ERFLG_R IS INITIAL.

*- 支払方法一覧チェック
PERFORM CHEK_ZLSCH :
USING PS_FILE-ZLSCH_Z
CHANGING PS_WORK
PS_WKS
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZLSCH_1
CHANGING PS_WORK
PS_WKS
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZLSCH_2
CHANGING PS_WORK
PS_WKS
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZLSCH_3
CHANGING PS_WORK
PS_WKS
PW_ERFLG_T
PW_ERFLG_R,

USING PS_FILE-ZLSCH_4
CHANGING PS_WORK
PS_WKS
PW_ERFLG_T
PW_ERFLG_R.

ENDFORM.                    " CHECK_OTHER
*&---------------------------------------------------------------------*
*&      Form  CHECK_DUPL
*&---------------------------------------------------------------------*
*       text  閾値の重複チェック
*----------------------------------------------------------------------*
FORM CHECK_DUPL USING PS_FILE      TYPE T_S_FILE
CHANGING PS_WORK      TYPE T_S_EDIT
PIT_LOWAMT   TYPE T_I_LOWAMT
PW_ERFLG_T
PW_ERFLG_R.

DATA:
LS_LOWAMT_C(15) TYPE C.

CHECK NOT PS_FILE-LOWAMT IS INITIAL.

READ TABLE PIT_LOWAMT
TRANSPORTING NO FIELDS
WITH KEY LOWAMT = PS_FILE-LOWAMT.

IF SY-SUBRC <> 0.
APPEND PS_FILE-LOWAMT TO PIT_LOWAMT.
ELSE.

*   エラー処理
LS_LOWAMT_C = PS_FILE-LOWAMT.
PERFORM ERROR_PROC_MSG_1
USING LS_LOWAMT_C
TEXT-T06
TEXT-E07
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.
ENDFORM.                    " CHECK_DUPL
*&---------------------------------------------------------------------*
*&      Form  CHEK_EXIST
*&---------------------------------------------------------------------*
*       text  分割方法のチェック
*----------------------------------------------------------------------*
FORM CHEK_EXIST USING    PW_PER
PW_PAY
PW_ZTERM_P
PW_ZTERM_S
PW_ZLSCH_1
CHANGING PS_WORK       TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* ％と金額が両方入力されている場合
IF NOT PW_PER IS INITIAL
AND NOT PW_PAY IS INITIAL.

PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E11
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

* ％と金額が両方入力されていない場合
ELSEIF PW_PER IS INITIAL
AND PW_PAY IS INITIAL.

*   条件が全て空白でない
CHECK NOT PW_ZTERM_P IS INITIAL
AND NOT PW_ZTERM_S IS INITIAL
AND NOT PW_ZLSCH_1 IS INITIAL.

PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E13
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDIF.
ENDFORM.                    " CHEK_EXIST
*&---------------------------------------------------------------------*
*&      Form  CHEK_ZLSCH
*&---------------------------------------------------------------------*
*       text  支払方法のチェック
*----------------------------------------------------------------------*
FORM CHEK_ZLSCH USING    PW_ZLSCH
CHANGING PS_WORK     TYPE T_S_EDIT
PS_WKS      TYPE T_S_WKS
PW_ERFLG_T
PW_ERFLG_R.

CHECK NOT PW_ZLSCH IS INITIAL
AND PS_WORK-KUBUN = CNS_KBN-K.

* 退避した支払方法に、当該の支払方法が含まれない場合
IF PS_WKS-ZWELS NA PW_ZLSCH.
CONCATENATE PS_WKS-ZWELS
PW_ZLSCH
INTO PS_WKS-ZWELS.

*   カウントアップ
PS_WKS-CNT_ZWELS = PS_WKS-CNT_ZWELS + 1.

*   カウントした支払条件が10より大きい場合
IF PS_WKS-CNT_ZWELS > 10.

*     エラー設定
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E18
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.


ENDIF.


ENDIF.


ENDFORM.                    " CHEK_ZLSCH
*&---------------------------------------------------------------------*
*&      Form  CHEK_INTERVALS
*&---------------------------------------------------------------------*
*       text  飛び飛びチェック
*----------------------------------------------------------------------*
FORM CHEK_INTERVALS USING    PS_FILE     TYPE T_S_FILE
CHANGING PS_WORK     TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* 支払条件1が空白の場合
IF  PS_FILE-ZTERM_P1 IS INITIAL.

*   後続の何れかが空白でない場合エラー
IF NOT PS_FILE-ZTERM_P2 IS INITIAL
OR NOT PS_FILE-ZTERM_P3 IS INITIAL
OR NOT PS_FILE-ZTERM_P4 IS INITIAL.

*     エラー処理
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E12
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

ELSEIF PS_FILE-ZTERM_P2 IS INITIAL.

*   後続の何れかが空白でない場合エラー
IF NOT PS_FILE-ZTERM_P3 IS INITIAL
OR NOT PS_FILE-ZTERM_P4 IS INITIAL.

*     エラー処理
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E12
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

ELSEIF PS_FILE-ZTERM_P3 IS INITIAL.

*   後続の何れかが空白でない場合エラー
IF NOT PS_FILE-ZTERM_P4 IS INITIAL.

*     エラー処理
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E12
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.
ENDIF.

ENDFORM.                    " CHEK_INTERVALS
*&---------------------------------------------------------------------*
*&      Form  CHEK_CHIP
*&---------------------------------------------------------------------*
*       text  分割、支払条件、支払方法の不足チェック
*----------------------------------------------------------------------*
FORM CHEK_CHIP USING    PW_ZTERM_P
PW_ZTERM_S
PW_ZLSCH
PS_FILE      TYPE T_S_FILE
CHANGING PS_WORK      TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* 全てが空白でない場合
CHECK NOT PW_ZTERM_P IS INITIAL
AND NOT PW_ZTERM_S IS INITIAL
AND NOT PW_ZLSCH IS INITIAL.

* 全てが空白の場合
CHECK PW_ZTERM_P IS INITIAL
AND PW_ZTERM_S IS INITIAL
AND PW_ZLSCH IS INITIAL.

CASE PS_FILE-KUBUN.

*   仕入先の場合
WHEN CNS_KBN-K.

IF PW_ZTERM_P IS INITIAL.

PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E14
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ELSEIF PW_ZTERM_S IS INITIAL.

PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E14
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ELSEIF PW_ZLSCH IS INITIAL.

PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E14
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

*   得意先の場合
WHEN CNS_KBN-D.
IF PW_ZTERM_P IS INITIAL.

PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E14
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ELSEIF PW_ZTERM_S IS INITIAL.

PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E14
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

ENDCASE.

ENDFORM.                    " CHEK_CHIP
*&---------------------------------------------------------------------*
*&      Form  UPDATE_PROC
*&---------------------------------------------------------------------*
*       text　更新処理
*----------------------------------------------------------------------*
FORM UPDATE_PROC USING    PIT_DATA      TYPE T_I_EDIT
PIT_LFM1      TYPE T_I_LFM1
PIT_WYT3      TYPE T_I_WYT3
PIT_CHECK     TYPE T_I_PIC
CHANGING PIT_COMP      TYPE T_I_EDIT
PIT_NGDATA    TYPE T_I_EDIT.

* ローカル定義
FIELD-SYMBOLS:
<LFS_DATA>   TYPE T_S_EDIT.

DATA:
LW_ERFLG_T   TYPE C,          "取引先単位のエラー
LW_ERFLG_R   TYPE C,          "1レコード単位エラー
LW_FLG_EXT   TYPE C,          "取引先切替フラグ
LS_WORK      TYPE T_S_EDIT,   "構造：一次格納用
LIT_WORK     TYPE T_I_EDIT.   "内部TBL:一次格納用

* 一次チェックOKデータ(展開前)
LOOP AT PIT_DATA ASSIGNING <LFS_DATA>.

CLEAR:
LW_ERFLG_R,
LS_WORK.

MOVE-CORRESPONDING <LFS_DATA> TO LS_WORK.

AT NEW KUBUN.
*     初期処理
PERFORM NEW_PROC_2
USING <LFS_DATA>
PIT_CHECK
CHANGING LIT_WORK
LS_WORK
LW_FLG_EXT
LW_ERFLG_T
LW_ERFLG_R.
ENDAT.

*   展開データ作成
PERFORM CHECK_DEVELOPDATA
USING <LFS_DATA>
PIT_WYT3
PIT_LFM1
CHANGING LIT_WORK
LS_WORK
LW_FLG_EXT
LW_ERFLG_T
LW_ERFLG_R.


IF LW_FLG_EXT IS INITIAL.

*     ロック処理
PERFORM LOCK_DATA
USING <LFS_DATA>
CHANGING LS_WORK
LW_ERFLG_T
LW_ERFLG_R.
ENDIF.

*   切替FLG ON
LW_FLG_EXT = CNS_FLG-ON.
LS_WORK-BNRUI   = TEXT-T12.
LS_WORK-CLIENT  = <LFS_DATA>-CLIENT.
APPEND LS_WORK TO LIT_WORK.

AT END OF KUBUN.

*     更新処理
PERFORM END_PROC_1
USING LIT_WORK
CHANGING PIT_COMP
PIT_NGDATA
LW_ERFLG_T
LW_ERFLG_R.

*     ロックリリース
CALL FUNCTION 'DEQUEUE_ALL'
EXPORTING
_SYNCHRON = ' '.
ENDAT.
ENDLOOP.

ENDFORM.                    " UPDATE_PROC
*&---------------------------------------------------------------------*
*&      Form  NEW_PROC_2
*&---------------------------------------------------------------------*
*       text 初期処理
*----------------------------------------------------------------------*
FORM NEW_PROC_2 USING    PS_DATA      TYPE T_S_EDIT
PIT_CHECK    TYPE T_I_PIC
CHANGING PIT_WORK     TYPE T_I_EDIT
PS_WORK      TYPE T_S_EDIT
PW_FLG_EXT
PW_ERFLG_T
PW_ERFLG_R.
DATA:
LS_CHECK     TYPE T_S_PIC.    "構造：同PI情報チェック用

REFRESH PIT_WORK.     "内部TBL:一次格納用
CLEAR: PW_ERFLG_T,    "取引先単位のエラーFLG
PW_ERFLG_R,    "レコード単位のエラーFLG
PW_FLG_EXT.    "取引先切替FLG

* 仕入先の場合
CHECK PS_DATA-KUBUN = CNS_KBN-K.

READ TABLE PIT_CHECK     "同PI情報チェック用
INTO LS_CHECK
WITH KEY LIFNR = PS_DATA-LIFN2
BINARY SEARCH.

CHECK SY-SUBRC = 0
AND LS_CHECK-CNT_PI > 1.

PERFORM ERROR_PROC_MSG_1
USING PS_DATA-LIFN2
TEXT-T07
TEXT-E15
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDFORM.                    " NEW_PROC_2
*&---------------------------------------------------------------------*
*&      Form  CHECK_DEVELOPDATA
*&---------------------------------------------------------------------*
*       text　展開データのチェック
*----------------------------------------------------------------------*
FORM CHECK_DEVELOPDATA USING    PS_DATA     TYPE T_S_EDIT
PIT_WYT3    TYPE T_I_WYT3
PIT_LFM1    TYPE T_I_LFM1
CHANGING PIT_WORK    TYPE T_I_EDIT
PS_WORK     TYPE T_S_EDIT
PW_FLG_EXT
PW_ERFLG_T
PW_ERFLG_R.
* ローカル定義
FIELD-SYMBOLS:
<LFS_WYT3>   TYPE T_S_WYT3.

DATA:
LS_LFM1      TYPE T_S_LFM1.   "構造：同PI情報チェック用

CHECK PW_ERFLG_R IS INITIAL.

* 仕入先の場合
CHECK PS_DATA-KUBUN = CNS_KBN-K.

* 名寄先一覧のLOOP
LOOP AT PIT_WYT3 ASSIGNING <LFS_WYT3>
WHERE LIFNR <> PS_DATA-CLIENT
AND LIFN2 = PS_DATA-LIFN2.

*   ファイル構造⇒出力構造
MOVE-CORRESPONDING PS_DATA TO PS_WORK.
PS_WORK-CLIENT = <LFS_WYT3>-LIFNR.
PS_WORK-BNRUI  = TEXT-T13.

*   購買情報の読込
READ TABLE PIT_LFM1
INTO LS_LFM1
WITH KEY LIFNR = <LFS_WYT3>-LIFNR
BINARY SEARCH.

*   通貨がマスタと異なる場合
IF LS_LFM1-WAERS <> PS_DATA-WAERS.
PERFORM ERROR_PROC_MSG_1
USING LS_LFM1-WAERS
TEXT-E08
SPACE
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

*   エラーがなし、かつ取引先切替時
IF PW_ERFLG_R IS INITIAL
AND PW_FLG_EXT IS INITIAL.

*　　 展開データのロック処理
PERFORM LOCK_LFA1
USING <LFS_WYT3>-LIFNR
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

APPEND PS_WORK TO PIT_WORK.

ENDLOOP.

ENDFORM.                    " CHECK_DEVELOPDATA
*&---------------------------------------------------------------------*
*&      Form  LOCK_LFA1
*&---------------------------------------------------------------------*
*       text  仕入先マスタのロック
*----------------------------------------------------------------------*
FORM LOCK_LFA1 USING    PW_LIFNR
CHANGING PS_WORK      TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* ロック処理
CALL FUNCTION 'ENQUEUE_EXLFA1'
EXPORTING
MANDT          = SY-MANDT
LIFNR          = PW_LIFNR
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.

CHECK SY-SUBRC <> 0.

MESSAGE ID SY-MSGID
TYPE SY-MSGTY
NUMBER SY-MSGNO
WITH SY-MSGV1
SY-MSGV2
SY-MSGV3
SY-MSGV4
INTO PS_WORK-MSG.

PW_ERFLG_T = CNS_FLG-ON.
PW_ERFLG_R = CNS_FLG-ON.

ENDFORM.                                                    " LOCK_LFA1
*&---------------------------------------------------------------------*
*&      Form  LOCK_DATA
*&---------------------------------------------------------------------*
*       text  ロック処理
*----------------------------------------------------------------------*
FORM LOCK_DATA USING    PS_DATA       TYPE T_S_EDIT
CHANGING PS_WORK       TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* 仕入先の場合
CHECK PS_DATA-KUBUN = CNS_KBN-K.


* 仕入先の場合
CASE PS_DATA-KUBUN.

WHEN CNS_KBN-K.

*     ロック処理
PERFORM LOCK_LFA1
USING PS_DATA-CLIENT
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

WHEN CNS_KBN-D.

*     ロック処理
PERFORM LOCK_KNA1
USING PS_DATA-CLIENT
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDCASE.
ENDFORM.                    " LOCK_DATA
*&---------------------------------------------------------------------*
*&      Form  LOCK_KNA1
*&---------------------------------------------------------------------*
*       text  KNA1のロック処理
*----------------------------------------------------------------------*
FORM LOCK_KNA1 USING    PW_KUNNR
CHANGING PS_WORK      TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* 得意先マスタロック処理
CALL FUNCTION 'ENQUEUE_EXKNA1'
EXPORTING
MANDT          = SY-MANDT
KUNNR          = PW_KUNNR
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.

CHECK SY-SUBRC <> 0.

MESSAGE ID SY-MSGID
TYPE SY-MSGTY
NUMBER SY-MSGNO
WITH SY-MSGV1
SY-MSGV2
SY-MSGV3
SY-MSGV4
INTO PS_WORK-MSG.

PW_ERFLG_T = CNS_FLG-ON.
PW_ERFLG_R = CNS_FLG-ON.

ENDFORM.                                                    " LOCK_KNA1
*&---------------------------------------------------------------------*
*&      Form  END_PROC_1
*&---------------------------------------------------------------------*
*       text  終了処理
*----------------------------------------------------------------------*
FORM END_PROC_1 USING    PIT_WORK     TYPE T_I_EDIT
CHANGING PIT_COMP   TYPE T_I_EDIT
PIT_NGDATA   TYPE T_I_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* エラーが発生している場合
IF NOT PW_ERFLG_T IS INITIAL.

APPEND LINES OF PIT_WORK TO PIT_NGDATA.
*   サブルーチンを抜ける
EXIT.

ENDIF.

* 更新処理
PERFORM UPDATE_DATA
USING PIT_WORK
CHANGING PIT_COMP
PIT_NGDATA
PW_ERFLG_T
PW_ERFLG_R.

ENDFORM.                    " END_PROC_1
*&---------------------------------------------------------------------*
*&      Form  UPDATE_DATA
*&---------------------------------------------------------------------*
*       text  更新処理
*----------------------------------------------------------------------*
FORM UPDATE_DATA USING    PIT_DATA   TYPE T_I_EDIT
CHANGING PIT_COMP TYPE T_I_EDIT
PIT_NGDATA TYPE T_I_EDIT
PW_ERFLG_T
PW_ERFLG_R.
* ローカル定義
FIELD-SYMBOLS:
<LFS_DATA>   TYPE T_S_EDIT.

DATA:
LS_ZN007     TYPE ZN007,
LS_ZN008     TYPE ZN008,
LIT_ZN007    TYPE T_I_ZN007,
LIT_ZN008    TYPE T_I_ZN008,
LS_WORK      TYPE T_S_EDIT,
LIT_WORK     TYPE T_I_EDIT,
LS_TEMP      TYPE T_S_TEMP.

* SORT処理
SORT PIT_DATA BY CLIENT
WAERS
SEQ.

* 展開データ
LOOP AT PIT_DATA ASSIGNING <LFS_DATA>.

CLEAR:
LS_WORK,
LS_ZN007,
LS_ZN008.

*   一次退避
MOVE-CORRESPONDING <LFS_DATA> TO LS_WORK.

AT NEW CLIENT.

REFRESH :
LIT_WORK,
LIT_ZN007,
LIT_ZN008.

CLEAR:
LS_TEMP,
PW_ERFLG_R.

*     テーブル削除処理
PERFORM DELETE_TABLE
USING <LFS_DATA>
CHANGING LS_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDAT.

*   BDC用データの退避
PERFORM MAKE_LIST
USING <LFS_DATA>
CHANGING  LS_TEMP.

APPEND LS_WORK TO LIT_WORK.

*   規定外マスタ更新用データ
IF <LFS_DATA>-KUBUN = CNS_KBN-K.
MOVE-CORRESPONDING <LFS_DATA> TO LS_ZN007.
LS_ZN007-LIFNR = <LFS_DATA>-CLIENT.
APPEND LS_ZN007  TO LIT_ZN007.
ELSE.
MOVE-CORRESPONDING <LFS_DATA> TO LS_ZN008.
LS_ZN008-KUNNR = <LFS_DATA>-CLIENT.
APPEND LS_ZN008  TO LIT_ZN008.
ENDIF.

AT END OF CLIENT.
IF PW_ERFLG_T IS INITIAL.

*       BDC処理
PERFORM BDC_PROC
USING <LFS_DATA>
LS_TEMP
CHANGING LIT_WORK
PIT_NGDATA
PW_ERFLG_T
PW_ERFLG_R.

CHECK PW_ERFLG_T IS INITIAL.

*       規定外マスタ更新処理
PERFORM UPDATE_TABLE
USING LIT_ZN007
LIT_ZN008
CHANGING PIT_COMP
LIT_WORK
PIT_NGDATA
LS_WORK
PW_ERFLG_T
PW_ERFLG_R.


ELSE.

*       対象データをNGデータを格納
APPEND LINES OF LIT_WORK TO PIT_NGDATA.
ENDIF.

ENDAT.

ENDLOOP.

ENDFORM.                    " UPDATE_DATA
*&---------------------------------------------------------------------*
*&      Form  DELETE_TABLE
*&---------------------------------------------------------------------*
*       text  テーブル削除
*----------------------------------------------------------------------*
FORM DELETE_TABLE USING    PS_DATA     TYPE T_S_EDIT
CHANGING PS_WORK     TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

DATA:
LW_LIFNR_W   TYPE LIFNR,
LW_KUNNR_W   TYPE KUNNR.


*  テスト実行時は実施しない
CHECK P_TEST IS INITIAL.

* 処理区分判定
CASE PS_DATA-KUBUN.

WHEN CNS_KBN-K.

*     削除データの存在チェック
SELECT SINGLE LIFNR
INTO LW_LIFNR_W
FROM ZN007
WHERE LIFNR = PS_DATA-CLIENT.

*     存在した場合
IF SY-SUBRC = 0.
*       規定外マスタTBLの対象レコード削除
DELETE FROM ZN007
WHERE LIFNR = PS_DATA-CLIENT.

IF SY-SUBRC <> 0.

PERFORM ERROR_PROC_MSG_2
USING TEXT-T09
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDIF.
ENDIF.
WHEN CNS_KBN-D.

*     削除データの存在チェック
SELECT SINGLE KUNNR
INTO LW_KUNNR_W
FROM ZN008
WHERE KUNNR = PS_DATA-CLIENT.

IF SY-SUBRC = 0.
*       規定外マスタTBLの対象レコード削除
DELETE FROM ZN008
WHERE KUNNR = PS_DATA-CLIENT.

IF SY-SUBRC <> 0.
PERFORM ERROR_PROC_MSG_2
USING TEXT-T08
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDIF.
ENDIF.
ENDCASE.

ENDFORM.                    " DELETE_TABLE
*&---------------------------------------------------------------------*
*&      Form  MAKE_LIST
*&---------------------------------------------------------------------*
*       text  BDC用のデータの退避
*----------------------------------------------------------------------*
FORM MAKE_LIST USING    PS_DATA   TYPE T_S_EDIT
CHANGING PS_TEMP   TYPE T_S_TEMP.

* 支払方法一覧の作成
PERFORM MAKE_ZWELS :
USING PS_DATA-ZLSCH_Z
CHANGING PS_TEMP-ZWELS,

USING PS_DATA-ZLSCH_1
CHANGING PS_TEMP-ZWELS,

USING PS_DATA-ZLSCH_2
CHANGING PS_TEMP-ZWELS,

USING PS_DATA-ZLSCH_3
CHANGING PS_TEMP-ZWELS,

USING PS_DATA-ZLSCH_4
CHANGING PS_TEMP-ZWELS.

CHECK PS_DATA-BASE_ZT = '1'.

* 支払条件
PS_TEMP-ZTERMA =  PS_DATA-ZTERM_PZ.
PS_TEMP-ZTERMB =  PS_DATA-ZTERM_SZ.


ENDFORM.                    " MAKE_LIST
*&---------------------------------------------------------------------*
*&      Form  MAKE_ZWELS
*&---------------------------------------------------------------------*
*       text  格納処理
*----------------------------------------------------------------------*
FORM MAKE_ZWELS USING    PW_ZLSCH
CHANGING PW_ZWELS.

CHECK NOT PW_ZLSCH IS INITIAL.

IF PW_ZWELS NA PW_ZLSCH.
*   支払方法の結合
CONCATENATE PW_ZWELS
PW_ZLSCH
INTO PW_ZWELS.
ENDIF.

ENDFORM.                    " MAKE_ZWELS
*&---------------------------------------------------------------------*
*&      Form  BDC_PROC
*&---------------------------------------------------------------------*
*       text  BDC処理
*----------------------------------------------------------------------*
FORM BDC_PROC USING    PS_DATA     TYPE T_S_EDIT
PS_TEMP     TYPE T_S_TEMP
CHANGING PIT_WORK    TYPE T_I_EDIT
PIT_NGDATA  TYPE T_I_EDIT
PW_ERFLG_T
PW_ERFLG_R.

CASE PS_DATA-KUBUN.

* 仕入先の場合
WHEN CNS_KBN-K.

PERFORM BDC_K
USING PS_DATA
PS_TEMP
CHANGING PIT_WORK
PW_ERFLG_T
PW_ERFLG_R.

*   得意先の場合
WHEN CNS_KBN-D.

PERFORM BDC_D
USING PS_DATA
PS_TEMP
CHANGING PIT_WORK
PW_ERFLG_T
PW_ERFLG_R.
ENDCASE.

REFRESH G_I_BDC.

CHECK NOT PW_ERFLG_T IS INITIAL.

* 対象データをNGデータを格納
APPEND LINES OF PIT_WORK TO PIT_NGDATA.

ENDFORM.                    " BDC_PROC
*&---------------------------------------------------------------------*
*&      Form  BDC_K
*&---------------------------------------------------------------------*
*       text  仕入先BDC
*----------------------------------------------------------------------*
FORM BDC_K      USING  PS_DATA     TYPE T_S_EDIT
PS_TEMP     TYPE T_S_TEMP
CHANGING PIT_WORK    TYPE T_I_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* 第一画面セット
PERFORM EDIT_BDC_FIRST_K
USING PS_DATA-CLIENT.

* 会社コードデータのセット
PERFORM EDIT_BDC_KAISHA_K
USING PS_TEMP.

* 購買組織データのセット
PERFORM EDIT_BDC_KOBAI
USING PS_TEMP.

* 保存
PERFORM EDIT_BDC_SAVE.

* ロック解除
PERFORM UNLOOK_LFA1
USING PS_DATA-CLIENT.

* トランザクション起動
PERFORM CALL_TRAN
USING CNS_TCD-XK02
CHANGING PIT_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDFORM.                    " BDC_K
*&---------------------------------------------------------------------*
*&      Form  BDC_D
*&---------------------------------------------------------------------*
*       text  得意先BDC
*----------------------------------------------------------------------*
FORM BDC_D      USING  PS_DATA     TYPE T_S_EDIT
PS_TEMP     TYPE T_S_TEMP
CHANGING PIT_WORK    TYPE T_I_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* 第一画面セット
PERFORM EDIT_BDC_FIRST_D
USING PS_DATA-CLIENT.

* 会社コードデータのセット
PERFORM EDIT_BDC_KAISHA_D USING PS_TEMP.

* 販売組織データのセット
PERFORM EDIT_BDC_HANBAI USING PS_TEMP.

* 保存
PERFORM EDIT_BDC_SAVE.

* ロック解除
PERFORM UNLOOK_KNA1
USING PS_DATA-CLIENT.

* トランザクション起動
PERFORM CALL_TRAN
USING CNS_TCD-XD02
CHANGING PIT_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDFORM.                    " BDC_D
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_FIRST_D
*&---------------------------------------------------------------------*
FORM EDIT_BDC_FIRST_D USING  PW_KUNNR.

PERFORM BDC_DATASET USING:
'X'  'SAPMF02D'       '0101',
' '  'RF02D-KUNNR'     PW_KUNNR,
' '  'RF02D-BUKRS'     'C001',
' '  'RF02D-VKORG'     CNS_VKORG_1,
' '  'RF02D-VTWEG'     '10',
' '  'RF02D-SPART'     '10',
' '  'RF02D-D0215'     'X',
' '  'RF02D-D0320'     'X',
' '  'BDC_OKCODE'      '/00'.

ENDFORM.                    " EDIT_BDC_FIRST_D
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_KAISHA_D
*&---------------------------------------------------------------------*
*       text  得意先会社コードデータ
*----------------------------------------------------------------------*
FORM EDIT_BDC_KAISHA_D USING PS_TEMP   TYPE T_S_TEMP.

** 支払処理 会計管理
PERFORM BDC_DATASET USING:
'X'  'SAPMF02D'    '0215',   "支払条件
' '  'KNB1-ZTERM'  PS_TEMP-ZTERMB,
*          ' '  'KNB1-ZWELS' P_ZWELS,  "支払方法
' '  'BDC_OKCODE'  '/00'.

ENDFORM.                    " EDIT_BDC_KAISHA_D
*&---------------------------------------------------------------------*
*&      Form  EDIT_BDC_HANBAI
*&---------------------------------------------------------------------*
*       text　販売組織データ
*----------------------------------------------------------------------*
FORM EDIT_BDC_HANBAI USING PS_TEMP   TYPE T_S_TEMP.

** 販売データ
PERFORM BDC_DATASET USING:
'X'  'SAPMF02D'     '0320',
*          ' '  'LFM1-WAERS'  G_S_DATA-WAERS,
' '  'KNVV-ZTERM'   PS_TEMP-ZTERMA,
' '  'BDC_OKCODE'   '/00'.

ENDFORM.                    " EDIT_BDC_HANBAI
*&---------------------------------------------------------------------*
*&      Form  UPDATE_TABLE
*&---------------------------------------------------------------------*
*       text 規定外マスタ更新処理
*----------------------------------------------------------------------*
FORM UPDATE_TABLE USING    PIT_ZN007     TYPE T_I_ZN007
PIT_ZN008     TYPE T_I_ZN008
CHANGING PIT_COMP    TYPE T_I_EDIT
PIT_WORK      TYPE T_I_EDIT
PIT_NGDATA    TYPE T_I_EDIT
PS_WORK       TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* ローカル定義
FIELD-SYMBOLS:
<LFS_WORK>   TYPE T_S_EDIT.

DATA:
LW_ETEXT     TYPE STRING.

* テスト実行の場合
IF P_TEST = CNS_FLG-ON.
APPEND LINES OF PIT_WORK TO PIT_COMP.
EXIT.
ENDIF.

* 登録処理
IF PS_WORK-KUBUN = CNS_KBN-K.

* 　メッセージの退避
LW_ETEXT = TEXT-T11.

*   登録処理
INSERT ZN007
FROM TABLE PIT_ZN007.
ELSE.

* 　メッセージの退避
LW_ETEXT = TEXT-T10.

*   登録処理
INSERT ZN008
FROM TABLE PIT_ZN008.
ENDIF.

IF SY-SUBRC = 0.

COMMIT WORK.
APPEND LINES OF PIT_WORK TO PIT_COMP.

ELSE.
ROLLBACK WORK.

*  エラーの設定
READ TABLE PIT_WORK
ASSIGNING <LFS_WORK>
INDEX 1.

IF SY-SUBRC = 0.
PERFORM ERROR_PROC_MSG_1
USING SPACE
LW_ETEXT
SPACE
CHANGING <LFS_WORK>
PW_ERFLG_T
PW_ERFLG_R.

*     対象データをNGデータを格納
APPEND LINES OF PIT_WORK TO PIT_NGDATA.

ENDIF.
ENDIF.

ENDFORM.                    " UPDATE_TABLE
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_PROC
*&---------------------------------------------------------------------*
*       text  画面出力処理
*----------------------------------------------------------------------*
FORM OUTPUT_PROC USING    PIT_NGDATA   TYPE T_I_EDIT
PIT_COMP     TYPE T_I_EDIT
PIT_LFA1     TYPE T_I_LFA1
PIT_KNA1     TYPE T_I_KNA1.

* ローカル定義
DATA:
LIT_DLFILE  TYPE T_I_FILE,       "内部TBL:DL用エラーデータ
LIT_OUTPUT  TYPE T_I_OUT.        "内部TBL: ALV一覧

*-出力データの作成(ALV/FILE)
PERFORM MAKE_OUTDATA
USING PIT_NGDATA    "内部TBL:NGデータ
PIT_COMP      "内部TBL:処理完了データ
PIT_LFA1      "内部TBL:仕入先(一般)取得用
PIT_KNA1      "内部TBL:得意先(一般)取得用
CHANGING LIT_OUTPUT    "内部TBL:ALV一覧
LIT_DLFILE.   "内部TBL:DL用エラーデータ

*-ファイル処理
PERFORM ERR0RDL_PROC
USING LIT_DLFILE.   "内部TBL:DL用エラーデータ

*-ALV出力
PERFORM OUTPUT_ALV
CHANGING LIT_OUTPUT.     "内部TBL:ALV一覧

ENDFORM.                    " OUTPUT_PROC
*&---------------------------------------------------------------------*
*&      Form  MAKE_OUTDATA
*&---------------------------------------------------------------------*
*       text  出力用データの作成
*----------------------------------------------------------------------*
FORM MAKE_OUTDATA USING    PIT_NG       TYPE T_I_EDIT
PIT_COMP     TYPE T_I_EDIT
PIT_LFA1     TYPE T_I_LFA1
PIT_KNA1     TYPE T_I_KNA1
CHANGING PIT_OUTPUT   TYPE T_I_OUT
PIT_DLFILE   TYPE T_I_FILE.

* ローカル定義
FIELD-SYMBOLS:
<LFS_COMP>   TYPE T_S_EDIT,
<LFS_NG>     TYPE T_S_EDIT.

DATA:
LS_OUTPUT    TYPE T_S_OUT,
LS_FILE      TYPE T_S_FILE.

* 正常処理データのループ
LOOP AT PIT_COMP ASSIGNING <LFS_COMP>.

CLEAR:
LS_OUTPUT.

MOVE-CORRESPONDING <LFS_COMP> TO LS_OUTPUT.

AT NEW KUBUN.
*     名称の取得
PERFORM GET_NAME
USING PIT_LFA1
PIT_KNA1
<LFS_COMP>
CHANGING LS_OUTPUT-NAME1.
ENDAT.

*   メッセージの設定
LS_OUTPUT-MSG = TEXT-T14.

*   青信号の設定
WRITE  ICON_GREEN_LIGHT AS ICON TO LS_OUTPUT-ICON. "青信号

*   他の設定
LS_OUTPUT-INSDT  = GW_DATUM.   "日付
LS_OUTPUT-INSTM  = GW_UZEIT.   "時刻
LS_OUTPUT-INSUSR = GW_UNAME.   "ユーザ名

*   出力用内部TBLに格納
APPEND LS_OUTPUT TO PIT_OUTPUT.

*   正常処理件数のカウント
GS_CNT-NML = GS_CNT-NML + 1.
ENDLOOP.

* NGデータのループ
LOOP AT PIT_NG ASSIGNING <LFS_NG>.

CLEAR:
LS_OUTPUT,
LS_FILE.

MOVE-CORRESPONDING <LFS_NG> TO LS_OUTPUT.
MOVE-CORRESPONDING <LFS_NG> TO LS_FILE.

AT NEW KUBUN.
*     名称の取得
PERFORM GET_NAME
USING PIT_LFA1
PIT_KNA1
<LFS_NG>
CHANGING LS_OUTPUT-NAME1.
ENDAT.

*   赤信号の設定
WRITE ICON_RED_LIGHT AS ICON TO LS_OUTPUT-ICON.

*   出力用内部TBLに格納
APPEND LS_OUTPUT TO PIT_OUTPUT.

*   エラーファイル用内部TBLに格納
APPEND LS_FILE   TO PIT_DLFILE.

*   異常処理件数のカウント
GS_CNT-ERR = GS_CNT-ERR + 1.
ENDLOOP.

ENDFORM.                    " MAKE_OUTDATA
*&---------------------------------------------------------------------*
*&      Form  CHECK_BASE_ZT
*&---------------------------------------------------------------------*
*       text  基本取引条件のチェック
*----------------------------------------------------------------------*
FORM CHECK_BASE_ZT CHANGING PIT_WORK    TYPE T_I_EDIT
PS_WKS      TYPE T_S_WKS
PW_ERFLG_T
PW_ERFLG_R.

* ローカル定義
FIELD-SYMBOLS:
<LFS_WORK>   TYPE T_S_EDIT.

* 基本取引条件が１より大きい場合、
IF PS_WKS-CNT_BASE > 1.

*   一次格納データのメッセージなしデータを検索
READ TABLE PIT_WORK
ASSIGNING <LFS_WORK>
WITH KEY MSG = SPACE.

IF SY-SUBRC = 0.

*     基本取引条件が複数のエラー
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E16
SPACE
CHANGING <LFS_WORK>
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.

* 基本取引条件が１より小さい場合
ELSEIF PS_WKS-CNT_BASE < 1.

*   一次格納データのメッセージなしデータを検索
READ TABLE PIT_WORK
ASSIGNING <LFS_WORK>
WITH KEY MSG = SPACE.

IF SY-SUBRC = 0.

*     基本取引条件なしのエラー
PERFORM ERROR_PROC_MSG_1
USING SPACE
TEXT-E17
SPACE
CHANGING <LFS_WORK>
PW_ERFLG_T
PW_ERFLG_R.
ENDIF.
ENDIF.
ENDFORM.                    " CHECK_BASE_ZT
*&---------------------------------------------------------------------*
*&      Form  GET_NAME
*&---------------------------------------------------------------------*
*       text  名称の取得
*----------------------------------------------------------------------*
FORM GET_NAME USING    PIT_LFA1     TYPE T_I_LFA1
PIT_KNA1     TYPE T_I_KNA1
PS_DATA      TYPE T_S_EDIT
CHANGING PW_NAME1.

DATA:
LS_LFA1      TYPE T_S_LFA1,
LS_KNA1      TYPE T_S_KNA1.

CASE PS_DATA-KUBUN.
WHEN CNS_KBN-K.

*     仕入先マスタ(一般)の読込
READ TABLE PIT_LFA1
INTO LS_LFA1
WITH KEY LIFNR = PS_DATA-CLIENT
BINARY SEARCH.

*     名称の格納
PW_NAME1 = LS_LFA1-NAME1.

WHEN CNS_KBN-D.

*     得意先マスタ(一般)の読込
READ TABLE PIT_KNA1
INTO LS_KNA1
WITH KEY KUNNR = PS_DATA-CLIENT
BINARY SEARCH.

*     名称の格納
PW_NAME1 = LS_KNA1-NAME1.

ENDCASE.

ENDFORM.                    " GET_NAME
*&---------------------------------------------------------------------*
*&      Form  OUTPUT_ALV
*&---------------------------------------------------------------------*
*       text ALV出力
*----------------------------------------------------------------------*
FORM OUTPUT_ALV CHANGING PIT_OUTPUT  TYPE T_I_OUT.

* ローカル定義
DATA:
LW_LAYOUT      TYPE SLIS_LAYOUT_ALV,     "ALV出力レイアウト
LIT_FIELDCAT   TYPE SLIS_T_FIELDCAT_ALV, "ALV出力項目設定
LIT_EVENT      TYPE SLIS_T_EVENT,        "イベント
LW_REPID       TYPE SY-REPID,            "ALV出力用：プログラムID
LW_PRINT       TYPE SLIS_PRINT_ALV.

* フィールドカタログ
PERFORM SET_FLELDCAT
CHANGING LIT_FIELDCAT.

* その他編集
PERFORM ALV_LAYOUT
CHANGING LW_LAYOUT
LW_REPID
LIT_EVENT
LW_PRINT.
* ALV一覧出力
PERFORM ALV_CALL
USING PIT_OUTPUT
LIT_FIELDCAT
LW_LAYOUT
LW_REPID
LIT_EVENT
LW_PRINT.

ENDFORM.                    " OUTPUT_ALV
*&---------------------------------------------------------------------*
*&      Form  SET_FLELDCAT
*&---------------------------------------------------------------------*
*       text  フィールドカタログの設定
*----------------------------------------------------------------------*
FORM SET_FLELDCAT CHANGING PIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV.

DATA:
LW_COL      TYPE I.               "カラム位置

PERFORM SET_VALUE:
* 結果
USING 'ICON'           "項目ID
TEXT-F01         "項目テキスト(短)
TEXT-F01         "項目テキスト(中)
TEXT-F01         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* メッセージ
USING 'MSG'            "項目ID
TEXT-F02         "項目テキスト(短)
TEXT-F02         "項目テキスト(中)
TEXT-F02         "項目テキスト(長)
100                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
100                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 分類
USING 'BNRUI'          "項目ID
TEXT-F03         "項目テキスト(短)
TEXT-F03         "項目テキスト(中)
TEXT-F03         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 取引先コード
USING 'CLIENT'         "項目ID
TEXT-F04         "項目テキスト(短)
TEXT-F04         "項目テキスト(中)
TEXT-F04         "項目テキスト(長)
10               "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
10               "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 区分
USING 'KUBUN'          "項目ID
TEXT-F05         "項目テキスト(短)
TEXT-F05         "項目テキスト(中)
TEXT-F05         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 名称
USING 'NAME1'          "項目ID
TEXT-F06         "項目テキスト(短)
TEXT-F06         "項目テキスト(中)
TEXT-F06         "項目テキスト(長)
35               "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
35               "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 通貨コード
USING 'WAERS'          "項目ID
TEXT-F07         "項目テキスト(短)
TEXT-F07         "項目テキスト(中)
TEXT-F07         "項目テキスト(長)
5                "出力データ長
'CUKY'           "データ型
SPACE            "数値データ型
5                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* SEQ
USING 'SEQ'            "項目ID
TEXT-F08         "項目テキスト(短)
TEXT-F08         "項目テキスト(中)
TEXT-F08         "項目テキスト(長)
5                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
5                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,

* 閾値下限
USING 'LOWAMT'         "項目ID
TEXT-F09         "項目テキスト(短)
TEXT-F09         "項目テキスト(中)
TEXT-F09         "項目テキスト(長)
16               "出力データ長
'CURR'           "データ型
'P'              "数値データ型
13               "数値データ長
'WAERS'          "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 基本取引条件
USING 'BASE_ZT'         "項目ID
TEXT-F10         "項目テキスト(短)
TEXT-F10         "項目テキスト(中)
TEXT-F10         "項目テキスト(長)
1                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
1                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 残額-条件（支払日）
USING 'ZTERM_PZ'       "項目ID
TEXT-F11         "項目テキスト(短)
TEXT-F11         "項目テキスト(中)
TEXT-F11         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 残額-条件（サイト）
USING 'ZTERM_SZ'       "項目ID
TEXT-F12         "項目テキスト(短)
TEXT-F12         "項目テキスト(中)
TEXT-F12         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 残額-方法
USING 'ZLSCH_Z'        "項目ID
TEXT-F13         "項目テキスト(短)
TEXT-F13         "項目テキスト(中)
TEXT-F13         "項目テキスト(長)
1                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
1                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 1-分割（％）
USING 'PER1'           "項目ID
TEXT-F14         "項目テキスト(短)
TEXT-F14         "項目テキスト(中)
TEXT-F14         "項目テキスト(長)
5                "出力データ長
'DEC'            "データ型
SPACE            "数値データ型
5                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 1-分割（金額）
USING 'PAY1'           "項目ID
TEXT-F15         "項目テキスト(短)
TEXT-F15         "項目テキスト(中)
TEXT-F15         "項目テキスト(長)
16               "出力データ長
'CURR'           "データ型
'P'              "数値データ型
13               "数値データ長
'WAERS'          "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 1-条件（支払日）
USING 'ZTERM_P1'       "項目ID
TEXT-F16         "項目テキスト(短)
TEXT-F16         "項目テキスト(中)
TEXT-F16         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 1-条件（サイト）
USING 'ZTERM_S1'       "項目ID
TEXT-F17         "項目テキスト(短)
TEXT-F17         "項目テキスト(中)
TEXT-F17         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 1-方法
USING 'ZLSCH_1'        "項目ID
TEXT-F18         "項目テキスト(短)
TEXT-F18         "項目テキスト(中)
TEXT-F18         "項目テキスト(長)
1                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
1                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 2-分割（％）
USING 'PER2'           "項目ID
TEXT-F19         "項目テキスト(短)
TEXT-F19         "項目テキスト(中)
TEXT-F19         "項目テキスト(長)
5                "出力データ長
'DEC'            "データ型
SPACE            "数値データ型
5                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 2-分割（金額）
USING 'PAY2'           "項目ID
TEXT-F20         "項目テキスト(短)
TEXT-F20         "項目テキスト(中)
TEXT-F20         "項目テキスト(長)
16               "出力データ長
'CURR'           "データ型
'P'              "数値データ型
13               "数値データ長
'WAERS'          "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 2-条件（支払日）
USING 'ZTERM_P2'       "項目ID
TEXT-F21         "項目テキスト(短)
TEXT-F21         "項目テキスト(中)
TEXT-F21         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 2-条件（サイト）
USING 'ZTERM_S2'       "項目ID
TEXT-F22         "項目テキスト(短)
TEXT-F22         "項目テキスト(中)
TEXT-F22         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 2-方法
USING 'ZLSCH_2'        "項目ID
TEXT-F23         "項目テキスト(短)
TEXT-F23         "項目テキスト(中)
TEXT-F23         "項目テキスト(長)
1                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
1                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 3-分割（％）
USING 'PER3'           "項目ID
TEXT-F24         "項目テキスト(短)
TEXT-F24         "項目テキスト(中)
TEXT-F24         "項目テキスト(長)
5                "出力データ長
'DEC'            "データ型
SPACE            "数値データ型
5                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 3-分割（金額）
USING 'PAY3'           "項目ID
TEXT-F25         "項目テキスト(短)
TEXT-F25         "項目テキスト(中)
TEXT-F25         "項目テキスト(長)
16               "出力データ長
'CURR'           "データ型
'P'              "数値データ型
13               "数値データ長
'WAERS'          "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 3-条件（支払日）
USING 'ZTERM_P3'       "項目ID
TEXT-F26         "項目テキスト(短)
TEXT-F26         "項目テキスト(中)
TEXT-F26         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 3-条件（サイト）
USING 'ZTERM_S3'       "項目ID
TEXT-F27         "項目テキスト(短)
TEXT-F27         "項目テキスト(中)
TEXT-F27         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 3-方法
USING 'ZLSCH_3'        "項目ID
TEXT-F28         "項目テキスト(短)
TEXT-F28         "項目テキスト(中)
TEXT-F28         "項目テキスト(長)
1                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
1                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 4-分割（％）
USING 'PER4'           "項目ID
TEXT-F29         "項目テキスト(短)
TEXT-F29         "項目テキスト(中)
TEXT-F29         "項目テキスト(長)
5                "出力データ長
'DEC'           "データ型
SPACE            "数値データ型
5                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 4-分割（金額）
USING 'PAY4'           "項目ID
TEXT-F30         "項目テキスト(短)
TEXT-F30         "項目テキスト(中)
TEXT-F30         "項目テキスト(長)
16               "出力データ長
'CURR'           "データ型
'P'              "数値データ型
13               "数値データ長
'WAERS'          "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 4-条件（支払日）
USING 'ZTERM_P4'       "項目ID
TEXT-F31         "項目テキスト(短)
TEXT-F31         "項目テキスト(中)
TEXT-F31         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 4-条件（サイト）
USING 'ZTERM_S4'       "項目ID
TEXT-F32         "項目テキスト(短)
TEXT-F32         "項目テキスト(中)
TEXT-F32         "項目テキスト(長)
4                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
4                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 4-方法
USING 'ZLSCH_4'        "項目ID
TEXT-F33         "項目テキスト(短)
TEXT-F33         "項目テキスト(中)
TEXT-F33         "項目テキスト(長)
1                "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
1                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 手形通信費
USING 'ZNTCH'          "項目ID
TEXT-F34         "項目テキスト(短)
TEXT-F34         "項目テキスト(中)
TEXT-F34         "項目テキスト(長)
16               "出力データ長
'CURR'           "データ型
'P'              "数値データ型
13               "数値データ長
'WAERS'          "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 備考
USING 'MEMO'           "項目ID
TEXT-F35         "項目テキスト(短)
TEXT-F35         "項目テキスト(中)
TEXT-F35         "項目テキスト(長)
40               "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
40               "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 登録日
USING 'INSDT'          "項目ID
TEXT-F36         "項目テキスト(短)
TEXT-F36         "項目テキスト(中)
TEXT-F36         "項目テキスト(長)
8                "出力データ長
'DATS'           "データ型
SPACE            "数値データ型
8                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 登録時刻
USING 'INSTM'          "項目ID
TEXT-F37         "項目テキスト(短)
TEXT-F37         "項目テキスト(中)
TEXT-F37         "項目テキスト(長)
6                "出力データ長
'TIMS'           "データ型
SPACE            "数値データ型
6                "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL,
* 登録ユーザ
USING 'INSUSR'         "項目ID
TEXT-F38         "項目テキスト(短)
TEXT-F38         "項目テキスト(中)
TEXT-F38         "項目テキスト(長)
12               "出力データ長
'CHAR'           "データ型
SPACE            "数値データ型
12               "数値データ長
SPACE            "通貨参照項目
CHANGING PIT_FIELDCAT
LW_COL.

ENDFORM.                    " SET_FLELDCAT
*&---------------------------------------------------------------------*
*&      Form  SET_VALUE
*&---------------------------------------------------------------------*
*       フィールドカタログ用の内部テーブルセット
*----------------------------------------------------------------------*
FORM SET_VALUE  USING P_FIELDNAME   TYPE SLIS_FIELDCAT_ALV-FIELDNAME
P_SELTEXT_S   TYPE ANY
P_SELTEXT_M   TYPE ANY
P_SELTEXT_L   TYPE ANY
P_OUTPUTLEN   TYPE SLIS_FIELDCAT_ALV-OUTPUTLEN
P_DATATYPE    TYPE SLIS_FIELDCAT_ALV-DATATYPE
P_INTTYPE     TYPE SLIS_FIELDCAT_ALV-INTTYPE
P_INTLEN      TYPE SLIS_FIELDCAT_ALV-INTLEN
P_CFIELDNAME  TYPE SLIS_FIELDCAT_ALV-CFIELDNAME
CHANGING PIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV
PW_COL.

DATA:
LW_FIELDCAT    TYPE SLIS_FIELDCAT_ALV.   "ALV出力項目設定

* カラム位置設定
PW_COL = PW_COL + 1.

LW_FIELDCAT-COL_POS    = PW_COL.             "カラム位置
LW_FIELDCAT-FIELDNAME  = P_FIELDNAME.       "項目ID
LW_FIELDCAT-SELTEXT_S  = P_SELTEXT_S.       "項目テキスト(短)
LW_FIELDCAT-SELTEXT_M  = P_SELTEXT_M.       "項目テキスト(中)
LW_FIELDCAT-SELTEXT_L  = P_SELTEXT_L.       "項目テキスト(長)
LW_FIELDCAT-OUTPUTLEN  = P_OUTPUTLEN.       "出力データ長
LW_FIELDCAT-DATATYPE   = P_DATATYPE.        "データ型
LW_FIELDCAT-INTTYPE    = P_INTTYPE.         "数値のデータ型
LW_FIELDCAT-INTLEN     = P_INTLEN.          "データ長
LW_FIELDCAT-CFIELDNAME = P_CFIELDNAME.      "参照通貨

APPEND LW_FIELDCAT TO PIT_FIELDCAT.

ENDFORM.                    " SET_VALUE
*&---------------------------------------------------------------------*
*&      Form  ALV_LAYOUT
*&---------------------------------------------------------------------*
*       text  その他編集
*----------------------------------------------------------------------*
FORM ALV_LAYOUT CHANGING PW_LAYOUT  TYPE SLIS_LAYOUT_ALV
PW_REPID   TYPE SY-REPID
PIT_EVENT  TYPE SLIS_T_EVENT
PW_PRINT   TYPE SLIS_PRINT_ALV.
* ローカル定義
DATA:
LW_EVENT TYPE SLIS_ALV_EVENT.

* プログラムID取得
PW_REPID = SY-REPID.
* レイアウト設定
PW_LAYOUT-COLWIDTH_OPTIMIZE    = 'X'.  "ALV コントロール: 列幅の最適化
PW_LAYOUT-DETAIL_INITIAL_LINES = 'X'.
PW_LAYOUT-ZEBRA                = 'X'.

PW_LAYOUT-GROUP_CHANGE_EDIT = 'X'.

* ALV印刷時用 設定項目
PW_PRINT-NO_PRINT_LISTINFOS = 'X'.

* 処理イベントの取得
CALL FUNCTION 'REUSE_ALV_EVENTS_GET'
EXPORTING
I_LIST_TYPE = 0
IMPORTING
ET_EVENTS   = PIT_EVENT.

* イベント時にコールされるFORM名を設定
CLEAR LW_EVENT.
READ TABLE PIT_EVENT INTO LW_EVENT WITH KEY NAME = 'TOP_OF_PAGE'.
IF SY-SUBRC = 0.
LW_EVENT-FORM = 'HEADER_WRITE'.
MODIFY PIT_EVENT INDEX SY-TABIX FROM LW_EVENT.
ENDIF.

ENDFORM.                    " ALV_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  ALV_CALL
*&---------------------------------------------------------------------*
*       text  ALV一覧出力
*----------------------------------------------------------------------*
FORM ALV_CALL USING  PIT_OUTPUT   TYPE T_I_OUT
PIT_FIELDCAT TYPE SLIS_T_FIELDCAT_ALV
PW_LAYOUT    TYPE SLIS_LAYOUT_ALV
PW_REPID     TYPE SY-REPID
PIT_EVENT    TYPE SLIS_T_EVENT
PW_PRINT     TYPE SLIS_PRINT_ALV.

* 汎用モジュールCALL: ALV
CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
EXPORTING
I_CALLBACK_PROGRAM = PW_REPID
IS_LAYOUT          = PW_LAYOUT
IS_PRINT           = PW_PRINT
IT_FIELDCAT        = PIT_FIELDCAT
I_DEFAULT          = 'X'
I_SAVE             = 'A'
IT_EVENTS          = PIT_EVENT
TABLES
T_OUTTAB           = PIT_OUTPUT
EXCEPTIONS
PROGRAM_ERROR      = 1
OTHERS             = 2.

IF SY-SUBRC <> 0.
MESSAGE S400(Y1) WITH 'ALV出力にてエラーが発生しました'.
LEAVE LIST-PROCESSING.
ENDIF.

ENDFORM.                    " ALV_CALL
*&---------------------------------------------------------------------*
*&      Form  ERR0RDL_PROC
*&---------------------------------------------------------------------*
*       text  ダウンロード処理
*----------------------------------------------------------------------*
FORM ERR0RDL_PROC USING PIT_DLFILE TYPE T_I_FILE.

DATA:
LW_FILENAME TYPE STRING.

CHECK P_TEST = CNS_FLG-OFF.

LW_FILENAME = P_OTPATH.

* エラーファイルのダウンロード
CALL FUNCTION 'GUI_DOWNLOAD'
EXPORTING
FILENAME                = LW_FILENAME
FILETYPE                = 'ASC'
WRITE_FIELD_SEPARATOR   = 'X'
TABLES
DATA_TAB                = PIT_DLFILE
EXCEPTIONS
FILE_WRITE_ERROR        = 1
NO_BATCH                = 2
GUI_REFUSE_FILETRANSFER = 3
INVALID_TYPE            = 4
NO_AUTHORITY            = 5
UNKNOWN_ERROR           = 6
HEADER_NOT_ALLOWED      = 7
SEPARATOR_NOT_ALLOWED   = 8
FILESIZE_NOT_ALLOWED    = 9
HEADER_TOO_LONG         = 10
DP_ERROR_CREATE         = 11
DP_ERROR_SEND           = 12
DP_ERROR_WRITE          = 13
UNKNOWN_DP_ERROR        = 14
ACCESS_DENIED           = 15
DP_OUT_OF_MEMORY        = 16
DISK_FULL               = 17
DP_TIMEOUT              = 18
FILE_NOT_FOUND          = 19
DATAPROVIDER_EXCEPTION  = 20
CONTROL_FLUSH_ERROR     = 21
OTHERS                  = 22.

* メッセージの出力
CHECK SY-SUBRC <> 0.
MESSAGE S401 WITH 'エラーファイルのダウンロードに失敗しました'
P_OTPATH.

ENDFORM.                    " ERR0RDL_PROC
*&---------------------------------------------------------------------*
*&      Form  HEADER_WRITE
*&---------------------------------------------------------------------*
*       text  ヘッダ出力
*----------------------------------------------------------------------*
FORM HEADER_WRITE.

DATA:
LIT_HEAD       TYPE SLIS_T_LISTHEADER,
LW_INFO(60)    TYPE C,
LW_PAGNO(4)    TYPE C,
LW_CNT(10)     TYPE C,
LW_STRING(18)  TYPE C.

* テスト実行時の文言追加
IF NOT P_TEST IS INITIAL.
LW_STRING =  TEXT-M02.
ENDIF.

* 機能名
CLEAR: LW_INFO.
CONCATENATE TEXT-M01
LW_STRING
INTO LW_INFO.
PERFORM SET_HEADER
USING 'H' LW_INFO SPACE
CHANGING LIT_HEAD.

* ページ
CLEAR: LW_INFO.
LW_PAGNO = SY-PAGNO.
CONDENSE LW_PAGNO.
CONCATENATE 'PAGE:'
LW_PAGNO
INTO LW_INFO.
PERFORM SET_HEADER
USING 'S' SPACE LW_INFO
CHANGING LIT_HEAD.

* 実行日・時間
CLEAR: LW_INFO.
CONCATENATE TEXT-M03
GW_DATUM+0(4)  '年'
GW_DATUM+4(2)  '月'
GW_DATUM+6(2)  '日'
GW_UZEIT+0(2)  ':'
GW_UZEIT+2(2)
INTO LW_INFO.
PERFORM SET_HEADER
USING 'S' SPACE LW_INFO
CHANGING LIT_HEAD.

*処理件数
CLEAR: LW_INFO,LW_CNT.
LW_CNT = GS_CNT-INP.
CONCATENATE TEXT-M04    "読込件数
LW_CNT
'件'
INTO LW_INFO.

PERFORM SET_HEADER
USING 'S' SPACE LW_INFO
CHANGING LIT_HEAD.

CLEAR: LW_INFO,LW_CNT.
LW_CNT = GS_CNT-NML.
CONCATENATE TEXT-M05    "正常処理件数
LW_CNT
'件'
INTO LW_INFO.
PERFORM SET_HEADER
USING 'S' SPACE LW_INFO
CHANGING LIT_HEAD.

CLEAR: LW_INFO,LW_CNT.
LW_CNT = GS_CNT-ERR.
CONCATENATE TEXT-M06    "正常処理件数
LW_CNT
'件'
INTO LW_INFO.
PERFORM SET_HEADER
USING 'S' SPACE LW_INFO
CHANGING LIT_HEAD.

* ヘッダ出力
CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
EXPORTING
IT_LIST_COMMENTARY = LIT_HEAD.

ENDFORM.                    " HEADER_WRITE
*&---------------------------------------------------------------------*
*&      Form  FILE_SAVE_DIALOG
*&---------------------------------------------------------------------*
*       ファイル保存ダイアログ表示
*----------------------------------------------------------------------*
*      <--O_FILE  ファイル名
*----------------------------------------------------------------------*
FORM FILE_SAVE_DIALOG.

DATA :
LW_FILENAME TYPE STRING,
LW_PATH     TYPE STRING,
LW_FULLPATH TYPE STRING,
LW_FILTER   TYPE STRING.

LW_FILTER = '*.txt'.

CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_SAVE_DIALOG
EXPORTING
FILE_FILTER       = LW_FILTER
CHANGING
FILENAME          = LW_FILENAME
PATH              = LW_PATH
FULLPATH          = LW_FULLPATH
EXCEPTIONS
CNTL_ERROR        = 1
ERROR_NO_GUI      = 2
OTHERS            = 3.

IF SY-SUBRC = 0.
P_OTPATH = LW_FULLPATH.
ELSE.
MESSAGE S400 WITH 'ファイル名取得に失敗しました'.
ENDIF.

ENDFORM.                    " FILE_SAVE_DIALOG
*&---------------------------------------------------------------------*
*&      Form  CHECK_CURRENCY
*&---------------------------------------------------------------------*
*       text  金額・数値項目の妥当性チェック
*----------------------------------------------------------------------*
FORM CHECK_CURRENCY USING PS_FILE      TYPE T_S_FILE
CHANGING PS_WORK      TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

* マイナス値の場合エラー
PERFORM CHECK_MINUS :
*  閾値下限
USING PS_FILE-LOWAMT
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,
*  1-分割（％）
USING PS_FILE-PER1
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,
*  1-分割（金額）
USING PS_FILE-PAY1
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,
*  2-分割（％）
USING PS_FILE-PER2
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,
*  2-分割（金額）
USING PS_FILE-PAY2
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,
*  3-分割（％）
USING PS_FILE-PER3
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,
*  3-分割（金額）
USING PS_FILE-PAY3
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,
*  4-分割（％）
USING PS_FILE-PER4
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R,
*  4-分割（金額）
USING PS_FILE-PAY4
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDFORM.                    " CHECK_CURRENCY
*&---------------------------------------------------------------------*
*&      Form  CHECK_minus
*&---------------------------------------------------------------------*
*       text  マイナスチェック
*----------------------------------------------------------------------*
FORM CHECK_MINUS USING    PW_ITEM        TYPE ANY
CHANGING PS_WORK        TYPE T_S_EDIT
PW_ERFLG_T
PW_ERFLG_R.

CHECK NOT PW_ITEM IS INITIAL.

* 0より小さい場合
CHECK PW_ITEM < 0 .

*   エラー処理
PERFORM ERROR_PROC_MSG_1
USING PW_ITEM
TEXT-T06
TEXT-E19
CHANGING PS_WORK
PW_ERFLG_T
PW_ERFLG_R.

ENDFORM.                    " CHECK_minus
*&---------------------------------------------------------------------*
*&      Form  CONVERT_INTER
*&---------------------------------------------------------------------*
*       text 書式変換
*----------------------------------------------------------------------*
FORM CONVERT_INTER USING PS_FILE    TYPE T_S_FILE
CHANGING PS_WORK   TYPE T_S_EDIT.

PERFORM CONV_TO_INTERNAL :
*  閾値下限
USING PS_FILE-LOWAMT
PS_FILE-WAERS
CHANGING PS_WORK-LOWAMT,

*  1-分割（金額）
USING PS_FILE-PAY1
PS_FILE-WAERS
CHANGING PS_WORK-PAY1,

*  2-分割（金額）
USING PS_FILE-PAY2
PS_FILE-WAERS
CHANGING PS_WORK-PAY2,

*  3-分割（金額）
USING PS_FILE-PAY3
PS_FILE-WAERS
CHANGING PS_WORK-PAY3,

*  4-分割（金額）
USING PS_FILE-PAY4
PS_FILE-WAERS
CHANGING PS_WORK-PAY4.

ENDFORM.                    " CONVERT_INTER
*&---------------------------------------------------------------------*
*&      Form  CONV_TO_INTERNAL
*&---------------------------------------------------------------------*
*       text  金額項目の書式変換
*----------------------------------------------------------------------*
FORM CONV_TO_INTERNAL USING    PW_EXTERNAL
PW_WAERS
CHANGING PS_INTERNAL.

DATA :
LW_RETURN          TYPE BAPIRETURN.

CHECK NOT PW_EXTERNAL IS INITIAL.

* 内部書式への変換
CALL FUNCTION 'BAPI_CURRENCY_CONV_TO_INTERNAL'
EXPORTING
CURRENCY             = PW_WAERS
AMOUNT_EXTERNAL      = PW_EXTERNAL
MAX_NUMBER_OF_DIGITS = 16
IMPORTING
AMOUNT_INTERNAL      = PS_INTERNAL
RETURN               = LW_RETURN.

* エラーの場合
CHECK NOT LW_RETURN IS INITIAL.

* 元の値で上書き
PS_INTERNAL = PW_EXTERNAL.

ENDFORM.                    " CONV_TO_INTERNAL
*&---------------------------------------------------------------------*
*&      Form  UNLOOK_KNA1
*&---------------------------------------------------------------------*
*       text  得意先マスタのロック解除
*----------------------------------------------------------------------*
FORM UNLOOK_KNA1 USING    PW_KUNNR.

CALL FUNCTION 'DEQUEUE_EXKNA1'
EXPORTING
MODE_KNA1 = 'E'
MANDT     = SY-MANDT
KUNNR     = PW_KUNNR
X_KUNNR   = ' '
_SCOPE    = '3'
_SYNCHRON = ' '
_COLLECT  = ' '.

ENDFORM.                    " UNLOOK_KNA1
*&---------------------------------------------------------------------*
*&      Form  UNLOOK_LFA1
*&---------------------------------------------------------------------*
*       text  仕入先マスタのロック解除
*----------------------------------------------------------------------*
FORM UNLOOK_LFA1 USING    PW_LIFNR.

CALL FUNCTION 'DEQUEUE_EXLFA1'
EXPORTING
MODE_LFA1 = 'E'
MANDT     = SY-MANDT
LIFNR     = PW_LIFNR
X_LIFNR   = ' '
_SCOPE    = '3'
_SYNCHRON = ' '
_COLLECT  = ' '.

ENDFORM.                    " UNLOOK_KNA1
*&---------------------------------------------------------------------*
*       ヘッダ編集
*----------------------------------------------------------------------*
*      -->L_TYP    タイプ
*      -->L_INFO   編集内容
*----------------------------------------------------------------------*
FORM SET_HEADER  USING   LW_TYP
LW_INFO
LW_KEY
CHANGING   PIT_HEAD  TYPE SLIS_T_LISTHEADER.

DATA:
LW_HEAD    TYPE SLIS_LISTHEADER.

LW_HEAD-TYP  = LW_TYP.
LW_HEAD-KEY =  LW_KEY.
LW_HEAD-INFO = LW_INFO.
APPEND LW_HEAD TO PIT_HEAD.

ENDFORM.                    " SET_HEADER
