***INCLUDE YF01CCUT.
************************************************************************
* [プログラム名]
*   YF01CCUT   ２バイト文字桁落ち防止（インクルード）
*
* [処理概要]
*   ２バイト文字桁落ち防止を行う。
*
* [改定履歴]
*　YYYY/MM/DD  Programar         Description
*  2012/08/13  ISID              ES-UP
************************************************************************

DATA: IN_CHAR(50) TYPE C,
IN_LEN TYPE I,
OUT_CHAR(50) TYPE C.
* Del ES-UP 2012/08/13 -->
*DATA: HEX(1) TYPE X,
*      W_LEN TYPE I,
*      LOOP_CNT TYPE I,
*      KANJI_FLG.
*
*FIELD-SYMBOLS: <G1>,
*               <G2>,
*               <G3>.
*
*CONSTANTS: C_HEX(1) TYPE X VALUE '20'.
* Del ES-UP 2012/08/13 <--
*---------------------------------------------------------------------*
*       FORM YF01CCUT                                                 *
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
*  -->  VALUE(IN_CHAR)                                                *
*  -->  VALUE(IN_LEN)                                                 *
*---------------------------------------------------------------------*
FORM YF01CCUT USING VALUE(IN_CHAR) VALUE(IN_LEN).

CLEAR: OUT_CHAR.
* Mod ES-UP 2012/08/13 -->
*  MOVE '0' TO KANJI_FLG.
*  LOOP_CNT = 0.
*  W_LEN = IN_LEN - 1.
*
*  ASSIGN IN_CHAR+LOOP_CNT(1) TO <G1> TYPE 'X'.
*  ASSIGN IN_CHAR+LOOP_CNT(1) TO <G2>.
*
** 最終バイトのチェック
*  WHILE LOOP_CNT < W_LEN.
*    IF KANJI_FLG = '0'.
*      IF ( <G1> >= '81' AND <G1> <= '9F' ) OR
*         ( <G1> >= 'E0' AND <G1> <= 'FC' ).
*        MOVE '1' TO KANJI_FLG.
*      ENDIF.
*    ELSE.
*      MOVE '0' TO KANJI_FLG.
*    ENDIF.
*    ASSIGN OUT_CHAR+LOOP_CNT(1) TO <G3>.
*    MOVE <G2> TO <G3>.
*    LOOP_CNT = LOOP_CNT + 1.
*    ASSIGN IN_CHAR+LOOP_CNT(1) TO <G1> TYPE 'X'.
*    ASSIGN IN_CHAR+LOOP_CNT(1) TO <G2>.
*  ENDWHILE.
** 最終カラムの判定
*  ASSIGN OUT_CHAR+LOOP_CNT(1) TO <G3>.
*  IF KANJI_FLG = '0'.
*    IF ( <G1> >= '81' AND <G1> <= '9F' ) OR
*       ( <G1> >= 'E0' AND <G1> <= 'FC' ).
*      MOVE SPACE TO <G3>.
*    ELSE.
*      MOVE <G2> TO <G3>.
*    ENDIF.
*  ELSE.
*    MOVE <G2> TO <G3>.
*  ENDIF.
*>>> REPLACE_INTO_DISPLAY_LAYOUTは、
*    サロゲートペアや合字に対応していないため使用不可。
*    DYNAMIC_OUTPUT_LENGTHを使用する。
*  CL_ABAP_LIST_UTILITIES=>REPLACE_INTO_DISPLAY_LAYOUT(
*    EXPORTING FIELD          = IN_CHAR
*              DISPLAY_OFFSET = 0
*              DISPLAY_LENGTH = IN_LEN
*    CHANGING  DISPLAY_DATA   = OUT_CHAR ).
DATA: L_LENGTH TYPE I,
L_OFFSET TYPE I.
* strlenは文字数ではなく、16ﾋﾞｯﾄを1とした内部長を返す。
* (例1：サロゲートペアの場合、1文字で2を返す)
* (例2：合字の場合、1文字に重ねる文字分が加算される)
* (例3：上記以外のとき、文字数と同じ値を返す)
WHILE L_OFFSET < STRLEN( IN_CHAR ).
L_LENGTH = L_OFFSET + CHARLEN( IN_CHAR+L_OFFSET(*) ).
IF IN_LEN < CL_ABAP_LIST_UTILITIES=>DYNAMIC_OUTPUT_LENGTH( IN_CHAR(L_LENGTH) ).
EXIT.
ENDIF.
L_OFFSET = L_LENGTH.
ENDWHILE.
IF L_OFFSET = 0.
CLEAR OUT_CHAR.
ELSE.
OUT_CHAR = IN_CHAR(L_OFFSET).
ENDIF.
* Mod ES-UP 2012/08/13 <--
ENDFORM.
