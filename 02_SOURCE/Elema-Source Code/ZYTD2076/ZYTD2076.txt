*&---------------------------------------------------------------------*
*& 移行                                                                *
*&     プログラム名称：与信マスタ更新                                  *
*&     プログラムＩＤ：                                                *
*&     作成者　　　　：K.KAJISA(NDSC)    作成日　　　　：2002/02/25    *
*&     更新者　　　　：K.KAJISA(NDSC)    更新日　　　　：2002/04/25    *
*&[改定履歴]
*& YYYY/MM/DD  Programar         Description
*& 2012/08/20  ISID              ES-UP
*&---------------------------------------------------------------------*
REPORT ZYTD2076
line-size  255
line-count  58
NO STANDARD PAGE HEADING
MESSAGE-ID Y1.
************************************************************************
* 使用DB定義
TABLES:KNA1,
T151.
* Add ES-UP 2012/08/20 -->
*-----------------------------------------------------------------------
*  固定値
*-----------------------------------------------------------------------
CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
* Add ES-UP 2012/08/20 <--
************************************************************************
* 内部テーブル
DATA BEGIN OF I_BDC  OCCURS 100.    "BDC入力データ
INCLUDE STRUCTURE BDCDATA.
DATA END   OF I_BDC.
DATA BEGIN OF I_MSG  OCCURS 100.    "BDCのメッセージ
INCLUDE STRUCTURE BDCMSGCOLL.
DATA END   OF I_MSG.
* CSVファイル読込用
DATA : BEGIN OF I_DTAB OCCURS 0 ,
* Mod ES-UP 2012/10/23 -->
*               DLINE(1000) TYPE C ,  "データ読込み用
DLINE TYPE string,  "データ読込み用
* Mod ES-UP 2012/10/23 <--
END OF I_DTAB .

DATA: BEGIN OF ST_FILE,
KUNNR(10)        TYPE C,
KANRI(4)         TYPE C,
STS(1)           TYPE C,
YOSIN_GEND(20)   TYPE C,
*  KIKANBI(4)       TYPE C,
KIKANBI(8)      TYPE C,
RISUK(3)         TYPE C,
T_GRP(4)         TYPE C,
NAIBU_J(40)      TYPE C,
GAIBU_J(40)      TYPE C,
HANBAI_S(40)     TYPE C,
END OF ST_FILE.
DATA: BEGIN OF ST_ERR.
INCLUDE STRUCTURE ST_FILE.
DATA: MESSAGE(100) TYPE C.
DATA: END OF ST_ERR.
DATA:I_FILE LIKE ST_FILE OCCURS 0 WITH HEADER LINE. "入力ファイル格納
DATA:I_WRITE  LIKE ST_ERR  OCCURS 0 WITH HEADER LINE. "ERRファイル格納
************************************************************************
* ワーク定義
data : w_msg like message.
DATA W_KINGAKU LIKE BKNKK-KLIMK.
*カウンタ
DATA: CT_REC   TYPE P.                         "読込カウンタ
DATA: CT_OK    TYPE P.                         "正常カウンタ
DATA: CT_ERR   TYPE P.                         "ERRカウンタ
* 定数
DATA:C_MODE(1)    TYPE C VALUE 'N',
*     C_MODE(1)    TYPE C VALUE 'A',            "TEST用
C_UPDATE(1)  TYPE C VALUE 'S',"CALL TRANSACTIONの更新モード
C_KANRI(4)   TYPE C VALUE'C001',
C_STS(1)     TYPE C VALUE 'X',
* Mod ES-UP 2012/08/20 -->
*     C_RISUK(3)   TYPE c VALUE 'Y01',
*     C_TAB        TYPE X VALUE '09'.
C_RISUK(3)   TYPE c VALUE 'Y01'.
* Mod ES-UP 2012/08/20 <--
************************************************************************
* 選択画面定義
***CHECK OR BDC
PARAMETERS:P_CHK AS CHECKBOX.
***入力ファイル
PARAMETERS:P_FILE(128) TYPE C LOWER CASE OBLIGATORY.
***ローカル読込 OR サーバ読込
PARAMETERS:P_R1 RADIOBUTTON GROUP RADI,
P_R2 RADIOBUTTON GROUP RADI.

************************************************************************
START-OF-SELECTION.
PERFORM INIT_PROC.                          "初期処理
PERFORM MAIN_PROC.                          "主処理
PERFORM END_PROC.                           "終了処理
************************************************************************
TOP-OF-PAGE.
skip.
uline.
write:/001 '得意先コード'(001),
014 '与信管理領域'(002),
027 'ステータス'(003),
039 '与信限度額'(004),
061 '与信期間日'(005),
073 'リスクカテゴリ'(006),
089 '得意先GRP'(007),
*        100 '内部情報'(008),
*        141 '外部情報'(009),
*        183 '販売促進'(010),
100 '実行結果'(011).
uline.

*&---------------------------------------------------------------------*
*&      Form  INIT_PROC
*&---------------------------------------------------------------------*
*       初期処理
*----------------------------------------------------------------------*
FORM INIT_PROC.
REFRESH:I_BDC,I_FILE,I_DTAB,I_WRITE.
CLEAR:  I_BDC,I_FILE,CT_REC,I_DTAB,I_WRITE,CT_OK,CT_ERR.
IF P_R1 = 'X'.
PERFORM GET_FILE.
ELSE.
PERFORM DATA_GET_L. "ローカルよりファイルをゲット
ENDIF.

ENDFORM.                    " INIT_PROC
*&---------------------------------------------------------------------*
*&      Form  GET_FILE
*&---------------------------------------------------------------------*
*       入力ファイルのデータ取得
*----------------------------------------------------------------------*
FORM GET_FILE.
* Add ES-UP 2012/08/20 -->
DATA L_CODEPAGE TYPE ABAP_ENCODING.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
* Add ES-UP 2012/08/20 <--
* ファイルオープン
* Mod ES-UP 2012/08/20 -->
*  OPEN DATASET P_FILE FOR INPUT IN TEXT MODE.
OPEN DATASET P_FILE FOR INPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
* Mod ES-UP 2012/08/20 <--
IF SY-SUBRC NE 0.
MESSAGE I306 WITH '与信マスタ更新用ファイル' P_FILE.
ENDIF.
DO.
* Mod ES-UP 2012/10/23 -->
*    READ DATASET P_FILE INTO I_DTAB.
READ DATASET P_FILE INTO I_DTAB-DLINE.
* Mod ES-UP 2012/10/23 <--
IF SY-SUBRC = 0.
APPEND I_DTAB.
ELSE.
EXIT.
ENDIF.
ENDDO.
*データ件数カウント
DESCRIBE TABLE I_DTAB LINES CT_REC.
IF CT_REC < 1.
MESSAGE I621.  "ファイルにデータが存在しません
STOP.
ENDIF.
*CSV 分割　処理
LOOP AT I_DTAB.
* Mod ES-UP 2012/08/20 -->
*    SPLIT I_DTAB-DLINE AT C_TAB INTO
SPLIT I_DTAB-DLINE AT CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB INTO
* Mod ES-UP 2012/08/20 <--
I_FILE-KUNNR
I_FILE-KANRI
I_FILE-STS
I_FILE-YOSIN_GEND
I_FILE-KIKANBI
I_FILE-RISUK
I_FILE-T_GRP
I_FILE-NAIBU_J
I_FILE-GAIBU_J
I_FILE-HANBAI_S.
APPEND I_FILE.
CLEAR I_FILE.
ENDLOOP.

ENDFORM.                    " GET_FILE
*&---------------------------------------------------------------------*
*&      Form  MAIN_PROC
*&---------------------------------------------------------------------*
*       主処理
*----------------------------------------------------------------------*
FORM MAIN_PROC.
PERFORM DATA_CHECK.   "ファイルの内容チェックその他

ENDFORM.                    " MAIN_PROC
*&---------------------------------------------------------------------*
*&      Form  BDC_DATASET
*&---------------------------------------------------------------------*
*       BDCデータ作成
*----------------------------------------------------------------------*
FORM BDC_DATASET USING FLG NAME VALUE.
CLEAR I_BDC.
IF FLG = 'X'.
I_BDC-PROGRAM   = NAME.
I_BDC-DYNPRO    = VALUE.
I_BDC-DYNBEGIN  = 'X'.
ELSE.
I_BDC-FNAM      = NAME.
I_BDC-FVAL      = VALUE.
ENDIF.
APPEND I_BDC.

ENDFORM.                    " BDC_DATASET
*&---------------------------------------------------------------------*
*&      Form  GO_TRAN
*&---------------------------------------------------------------------*
*       トランザクションの実行
*----------------------------------------------------------------------*
FORM GO_TRAN.
* 必要項目定義 *********************************************************
DATA  BEGIN OF W_TEXT.            "メッセージのテキスト
INCLUDE STRUCTURE LMESS.
DATA: END   OF W_TEXT,
W_MSG(255) TYPE C.          "BDC戻りメッセージ編集
************************************************************************
CLEAR:  I_MSG,W_TEXT,W_MSG.
REFRESH:I_MSG.
CALL TRANSACTION 'FD32' USING    I_BDC
MODE     C_MODE
UPDATE   C_UPDATE.
*                    MESSAGES INTO I_MSG.
** トランザクション実行時のメッセージを表示
*  LOOP AT I_MSG.
*    W_TEXT-MSGID = I_MSG-MSGID.
*    W_TEXT-MSGNO = I_MSG-MSGNR.
*    W_TEXT-MSGTY = I_MSG-MSGTYP.
*    W_TEXT-MSGV1 = I_MSG-MSGV1.
*    W_TEXT-MSGV2 = I_MSG-MSGV2.
*    W_TEXT-MSGV3 = I_MSG-MSGV3.
*    W_TEXT-MSGV4 = I_MSG-MSGV4.
*    IF SY-BATCH = 'X'.                 "1999/01/28 ADD
*      MESSAGE ID     I_MSG-MSGID
*              TYPE   I_MSG-MSGTYP
*              NUMBER I_MSG-MSGNR
*              WITH   I_MSG-MSGV1 I_MSG-MSGV2 I_MSG-MSGV3
*                     I_MSG-MSGV4.
*    ELSE.
*      CALL FUNCTION 'L_MESSAGE_AUFBEREITEN'
*           EXPORTING
*                I_MESS = W_TEXT
*           IMPORTING
*                O_TEXT = W_MSG
*           EXCEPTIONS
*                OTHERS = 1.
*      WRITE: /001 I_MSG-DYNAME,
*              010 I_MSG-DYNUMB,
*              015 I_MSG-FLDNAME+0(15),
*              031 W_MSG+0(80).
*    ENDIF.
*  ENDLOOP.


ENDFORM.                    " GO_TRAN
*&---------------------------------------------------------------------*
*&      Form  BDC_SEC
*&---------------------------------------------------------------------*
*       BDC処理
*----------------------------------------------------------------------*
FORM BDC_SEC.
REFRESH I_BDC.
*  LOOP AT I_FILE.
W_KINGAKU = I_FILE-YOSIN_GEND.
W_KINGAKU = W_KINGAKU / 100.
*与信期間日/対応
IF I_FILE-KIKANBI = '/'.
CLEAR  I_FILE-KIKANBI.
ENDIF.
PERFORM BDC_DATASET
USING: 'X'  'SAPMF02C'         '0100',
''   'BDC_CURSOR'       'RF02L-D0210',
''   'BDC_OKCODE'       '/00',
''   'RF02L-KUNNR'      I_FILE-KUNNR(10),
''   'RF02L-KKBER'      I_FILE-KANRI,
''   'RF02L-D0105'      'X',
''   'RF02L-D0210'      'X',
'X'  'SAPMF02C'         '0210',
''   'BDC_CURSOR'       'RF02L-HORDA',
''   'BDC_OKCODE'       'TEXT',
''   'KNKK-KLIMK'       I_FILE-YOSIN_GEND,
''   'KNKK-KNKLI'       I_FILE-KUNNR(10),
''   'RF02L-HORDA'      I_FILE-KIKANBI,
''   'KNKK-CTLPC'       I_FILE-RISUK,
''   'KNKK-KDGRP'       I_FILE-T_GRP,
''   'BDC_SUBSCR'
'SAPMF02C                                1090ARI-ST',
''   'BDC_SUBSCR'
'SAPMF02C                                1099ARI-01',
'X'  'SAPLFTXT'         '0100',
''   'BDC_CURSOR'       'RTEXT-LTEXT(03)',
''   'BDC_OKCODE'       '=BACK',
''   'RTEXT-LTEXT(01)'  I_FILE-NAIBU_J,
''   'RTEXT-LTEXT(02)'  I_FILE-GAIBU_J,
''   'RTEXT-LTEXT(03)'  I_FILE-HANBAI_S,
'X'  'SAPMF02C'         '0210',
''   'BDC_CURSOR'       'KNKK-KLIMK',
''   'BDC_OKCODE'       '=UPDA'.
* トランザクションの実行
PERFORM GO_TRAN.
CLEAR W_MSG.
if sy-subrc <> 0 .
perform err_mes.
move-corresponding I_FILE  to I_WRITE.
I_WRITE-message = w_msg .
CT_ERR = CT_ERR + 1.
else .
move-corresponding I_FILE to I_WRITE .
I_WRITE-message = '正常に登録されました'.
CT_OK = CT_OK + 1.
endif.
append I_WRITE. clear I_WRITE.
*  ENDLOOP.
ENDFORM.                    " BDC_SEC
*&---------------------------------------------------------------------*
*&      Form  DATA_GET_L
*&---------------------------------------------------------------------*
*       ローカルファイルの取得
*----------------------------------------------------------------------*
FORM DATA_GET_L.
* Mod ES-UP 2012/08/20 -->
*  CALL FUNCTION 'WS_UPLOAD'
*    EXPORTING
*      FILENAME                      = P_FILE
*      FILETYPE                      = 'DAT'
*    TABLES
*      DATA_TAB                      = I_FILE
*    EXCEPTIONS
*      CONVERSION_ERROR              = 1
*      FILE_OPEN_ERROR               = 2
*      FILE_READ_ERROR               = 3
*      INVALID_TYPE                  = 4
*      NO_BATCH                      = 5
*      UNKNOWN_ERROR                 = 6
*      INVALID_TABLE_WIDTH           = 7
*      GUI_REFUSE_FILETRANSFER       = 8
*      CUSTOMER_ERROR                = 9
*      OTHERS                        = 10.
*  IF SY-SUBRC = 2 OR SY-SUBRC = 3.
DATA: L_FILENAME TYPE STRING,
L_CODEPAGE TYPE ABAP_ENCODING.
L_FILENAME = P_FILE.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
CL_GUI_FRONTEND_SERVICES=>GUI_UPLOAD(
EXPORTING
FILENAME                = L_FILENAME
FILETYPE                = 'DAT'
HAS_FIELD_SEPARATOR     = ABAP_TRUE
*      HEADER_LENGTH           = 0
*      READ_BY_LINE            = 'X'
*      DAT_MODE                = SPACE
CODEPAGE                = L_CODEPAGE
*      IGNORE_CERR             = ABAP_TRUE
*      REPLACEMENT             = '#'
*      VIRUS_SCAN_PROFILE      = VIRUS_SCAN_PROFILE
*    IMPORTING
*      FILELENGTH              = FILELENGTH
*      HEADER                  = HEADER
CHANGING
DATA_TAB                = I_FILE[]
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
NOT_SUPPORTED_BY_GUI    = 17
ERROR_NO_GUI            = 18
OTHERS                  = 19 ).
IF SY-SUBRC = 1 OR SY-SUBRC = 2.
* Mod ES-UP 2012/08/20 <--
MESSAGE I209.
STOP.
ENDIF.
DESCRIBE TABLE I_FILE LINES CT_REC.
IF CT_REC < 1.
MESSAGE I621.   "ファイルにデータが存在しません
STOP.
ENDIF.

ENDFORM.                    " DATA_GET_L
*&---------------------------------------------------------------------*
*&      Form  DATA_CHECK
*&---------------------------------------------------------------------*
*       入力チェック
*----------------------------------------------------------------------*
FORM DATA_CHECK.
DATA W_KUNNR_N(10) TYPE N.
CLEAR:CT_OK,CT_ERR.
LOOP AT I_FILE.
* 必須項目チェック
IF I_FILE-KUNNR      IS initial.  "得意先コード
PERFORM ERR_EDIT USING  '得意先コードが入力がされていません'.
CONTINUE.
ENDIF.
IF I_FILE-KANRI      IS INITIAl.
PERFORM ERR_EDIT USING  '与信管理領域が入力されていません'.
CONTINUE.
ENDIF.
W_KINGAKU = I_FILE-YOSIN_GEND.
*   IF I_FILE-YOSIN_GEND IS INITIAL or W_KINGAKU = 0.
*     PERFORM ERR_EDIT USING  '与信限度額が入力がされていません'.
*     CONTINUE.
*   ENDIF.
iF I_FILE-KIKANBI    IS INITIAL.
PERFORM ERR_EDIT USING  '与信期間日入力がされていません'.
CONTINUE.
ENDIF.
* 固定値チェック
IF I_FILE-KANRI      <> C_KANRI.
PERFORM ERR_EDIT USING  '与信管理領域の値が不正です'.
CONTINUE.
ENDIF.
IF I_FILE-STS        <> C_STS.
PERFORM ERR_EDIT USING  'ステータスの値が不正です'.
CONTINUE.
ENDIF.
IF I_FILE-RISUK      <> C_RISUK.
PERFORM ERR_EDIT USING  'リスクカテゴリの値が不正です'.
CONTINUE.
ENDIF.
* 存在チェック
*    CLEAR:KNA1,T151,W_KUNNR_N.
*    IF I_FILE-KUNNR CO '1234567890 '.
*      W_KUNNR_N = I_FILE-KUNNR.
*      I_FILE-KUNNR =  W_KUNNR_N.
*    ENDIF.
*    SELECT SINGLE KUNNR INTO KNA1-KUNNR FROM KNA1
*     WHERE KUNNR = I_FILE-KUNNR.
*    IF SY-SUbRC <> 0.
*      PERFORM ERR_EDIT USING  '得意先コードがR/3に存在しません'.
*      CONTINUE.
*    ENDIF.
*    SELECT SINGLE KDGRP INTo T151-KDGRP FROm T151
*     WHERE KDGRP = I_FILE-T_GRP.
*    IF SY-SUbRC <> 0.
*      PERFORM ERR_EDIT USING  '得意先グループがR/3に存在しません'.
*      CONTINUE.
*    ENDIF.
* バッチインプット
IF P_CHK = SPACE.
PERFORM BDC_SEC.      "BDC実行
ENDIF.
ENDLOOP.
ENDFORM.                    " DATA_CHECK
*&---------------------------------------------------------------------*
*&      Form  ERR_EDIT
*&---------------------------------------------------------------------*
*       エラー情報
*----------------------------------------------------------------------*
*      -->P_text  ERR内容
*----------------------------------------------------------------------*
FORM ERR_EDIT USING  P_TEXT.
CLEAR:I_WRITE.
MOVE-CORRESPONDING I_FILE TO I_WRITE.
I_WRITE-MESSAGE = P_TEXT.
APPEND I_WRITE.
CT_ERR = CT_ERR + 1.
*  CONTINUE.
ENDFORM.                    " ERR_EDIT
*&---------------------------------------------------------------------*
*&      Form  err_mes
*&---------------------------------------------------------------------*
*       エラーメッセージか格納
*----------------------------------------------------------------------*
FORM err_mes.
call function 'WRITE_MESSAGE'
exporting
msgid = sy-msgid
msgno = sy-msgno
msgty = sy-msgty
msgv1 = sy-msgv1
msgv2 = sy-msgv2
msgv3 = sy-msgv3
msgv4 = sy-msgv4
msgv5 = ' '
importing
messg = w_msg
exceptions
others = 1.
ENDFORM.                    " err_mes
*&---------------------------------------------------------------------*
*&      Form  END_PROC
*&---------------------------------------------------------------------*
*       終了処理
*----------------------------------------------------------------------*
FORM END_PROC.
DATA CT_WRITE TYPE P.
* 実行状況の出力
clear:I_WRITE.
loop at I_WRITE.
write:/ I_WRITE-KUNNR      under text-001,
I_WRITE-KANRI      UNDER TEXT-002,
I_WRITE-STS        UNDER TEXT-003,
I_WRITE-YOSIN_GEND UNDER TEXT-004,
I_WRITE-KIKANBI    UNDER TEXT-005,
I_WRITE-RISUK      UNDER TEXT-006,
I_WRITE-T_GRP      UNDER TEXT-007,
*            I_WRITE-NAIBU_J    UNDER TEXT-008,
*            I_WRITE-GAIBU_J    UNDER TEXT-009,
*            I_WRITE-HANBAI_S   UNDER TEXT-010,
I_WRITE-MESSAGE    UNDER TEXT-011.
endloop.
CLEAR CT_WRITE.
DESCRIBE TABLE I_WRITE LINES CT_WRITE.
IF CT_WRITE = 0.
WRITE /1 'エラーデータはありませんでした'.
ENDIF.
ULINE.
WRITE:/1 '読込件数',CT_REC,'件'.
IF NOT P_CHK IS INITIAL.
CT_OK = CT_REC - CT_ERR.
WRITE:/1 '正常件数',CT_OK, '件'.
ELSE.
WRITE:/1 '登録件数',CT_OK, '件'.
ENDIF.
WRITE:/1 '異常件数',CT_ERR,'件'.

ENDFORM.                    " END_PROC
