************************************************************************
* INCLUDE ZS012600_0200  　
* 　
* 送受信リスト画面用 　
* [改定履歴]　
*  2009/04/07   NDSC(KODAMA)
*      ・ダミーレコードを受信取消した場合は数量調整しないよう変更
************************************************************************
*---------------------------------------------------------------------
* TYPES
*---------------------------------------------------------------------
* 送信リストALV表示用
TYPES: BEGIN OF TYP_ALV_0201.
INCLUDE TYPE TYP_TRANSMIT_LOG.
TYPES:   CHKBOX(1) TYPE C,        " チェックボックス
STYLES TYPE LVC_T_STYL,  " 入力可否コントロール
END OF TYP_ALV_0201.
TYPES: TYP_T_ALV_0201 TYPE STANDARD TABLE OF TYP_ALV_0201.

* 受信リストALV表示用
TYPES: BEGIN OF TYP_ALV_0202.
INCLUDE TYPE TYP_RECEIVE_LOG.
TYPES:   CHKBOX(1) TYPE C,        " チェックボックス
STYLES TYPE LVC_T_STYL,  " 入力可否コントロール
END OF TYP_ALV_0202.
TYPES: TYP_T_ALV_0202 TYPE STANDARD TABLE OF TYP_ALV_0202.

*----------------------------------------------------------------------*
* CLASS DEFINITION
*----------------------------------------------------------------------*
* 送受信リスト画面EVENT処理用 　
CLASS CLS_ALV_HANDLER_0200 DEFINITION.
PUBLIC SECTION.
*   ツールバー設定
METHODS HANDLE_TOOLBAR
FOR EVENT TOOLBAR OF CL_GUI_ALV_GRID
IMPORTING E_OBJECT E_INTERACTIVE.
*   「ENTER」押下
METHODS HANDLE_DATA_CHANGED
FOR EVENT DATA_CHANGED OF CL_GUI_ALV_GRID
IMPORTING ER_DATA_CHANGED.
*   「ENTER」押下、入力エラーなし
METHODS HANDLE_DATA_CHANGED_FINISHED
FOR EVENT DATA_CHANGED_FINISHED OF CL_GUI_ALV_GRID.
*   USER COMMAND押下
METHODS HANDLE_USER_COMMAND
FOR EVENT USER_COMMAND OF CL_GUI_ALV_GRID
IMPORTING E_UCOMM.
ENDCLASS.                    "CLS_ALV_HANDLER_0200 DEFINITION

*----------------------------------------------------------------------*
* CLASS IMPLEMENTATION
*----------------------------------------------------------------------*
* 送受信リスト画面EVENT処理用 　
CLASS CLS_ALV_HANDLER_0200 IMPLEMENTATION.
* ツールバー設定
METHOD HANDLE_TOOLBAR.
PERFORM CUSTOMIZE_ALV_COMMAND_0200 USING E_OBJECT.
ENDMETHOD.                    "HANDLE_TOOLBAR
* 「ENTER」押下
METHOD HANDLE_DATA_CHANGED.
PERFORM CHECK_ALV_INPUT_0200 USING ER_DATA_CHANGED.
ENDMETHOD.                    "HANDLE_DATA_CHANGED
* 「ENTER」押下、入力エラーなし
METHOD HANDLE_DATA_CHANGED_FINISHED.
PERFORM CHANGE_ALV_DATA_0200.
ENDMETHOD.                    "HANDLE_DATA_CHANGED_FINISHED
* USER COMMAND押下
METHOD HANDLE_USER_COMMAND.
PERFORM PROCESS_ALV_COMMAND_0200 USING E_UCOMM.
ENDMETHOD.                    "HANDLE_USER_COMMAND
ENDCLASS.                    "CLS_ALV_HANDLER_0200 IMPLEMENTATION

*---------------------------------------------------------------------
* 定数宣言
*---------------------------------------------------------------------
* OK CODE
CONSTANTS: CNS_OK_CODE_DELETE TYPE SY-UCOMM VALUE 'ZDEL'.   " 削除

*---------------------------------------------------------------------
* 内部テーブル・作業領域
*---------------------------------------------------------------------
* 送信リストALV表示用内部テーブル
DATA: GT_ALV_0201 TYPE TYP_T_ALV_0201.
* 受信リストALV表示用内部テーブル
DATA: GT_ALV_0202 TYPE TYP_T_ALV_0202.

*---------------------------------------------------------------------
* 変数宣言
*---------------------------------------------------------------------
* 送受信リスト画面EVENT処理オブジェクト
DATA: OBJ_ALV_HANDLER_0200 TYPE REF TO CLS_ALV_HANDLER_0200.

*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       ステータスと表題設定
*----------------------------------------------------------------------*
MODULE STATUS_0200 OUTPUT.

* 削除権限チェック
PERFORM CHECK_AUTHORITY_0200.
IF G_RC = 0.
SET PF-STATUS '0200'.
ELSE.
*   削除権限なしの場合、「削除」ボタンは非表示
SET PF-STATUS '0200' EXCLUDING CNS_OK_CODE_DELETE.
ENDIF.

CASE G_LIST_MODE.
WHEN CNS_LIST_MODE_TRANSMITTED.
SET TITLEBAR '0201'.    " 送信済リスト
WHEN CNS_LIST_MODE_RECEIVED.
SET TITLEBAR '0202'.    " 受信済リスト
ENDCASE.

ENDMODULE.                 " STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  EXIT_0200  INPUT
*&---------------------------------------------------------------------*
*       EXIT
*----------------------------------------------------------------------*
MODULE EXIT_0200 INPUT.

* 選択画面へ戻る
PERFORM BACK_TO_FIRST_SCREEN.

ENDMODULE.                 " EXIT_0200  INPUT
*&---------------------------------------------------------------------*
*&      Module  INITIALIZE_0200  OUTPUT
*&---------------------------------------------------------------------*
*       初期化
*----------------------------------------------------------------------*
MODULE INITIALIZE_0200 OUTPUT.

IF OBJ_GRID IS INITIAL.
**   CUSTOM_CONTAINERオブジェクト作成
*    CREATE OBJECT OBJ_CUSTOM_CONTAINER
*      EXPORTING
*        CONTAINER_NAME    = 'ALV_CONTAINER_0200'.
**   SPLITTER_CONTAINERオブジェクト作成
*    CREATE OBJECT OBJ_SPLITTER_CONTAINER
*      EXPORTING
*        PARENT    = OBJ_CUSTOM_CONTAINER
*        SASH_POSITION      = 100
*        WITH_BORDER  = 0.
*   SPLITTER_CONTAINERオブジェクト作成
CREATE OBJECT OBJ_SPLITTER_CONTAINER
EXPORTING
PARENT    = CL_GUI_CONTAINER=>DEFAULT_SCREEN
SASH_POSITION      = 100
WITH_BORDER  = 0.
*   ALV FIELDCATALOG設定
PERFORM SET_T_ALV_FIELDCAT_0200.
*   ALV DATA設定
PERFORM SET_T_ALV_0200.
*   ALV LAYOUT設定
PERFORM SET_ALV_LAYOUT_0200.
*   ALV VARIANT設定
PERFORM SET_ALV_VARIANT_0200.
*   ALV TOOLBAR設定
PERFORM SET_ALV_TOOLBAR_0200.
*   ALV ROW ID設定
PERFORM SET_T_ALV_ROID_0200.
*   ALVオブジェクト作成
CREATE OBJECT OBJ_GRID
EXPORTING
I_PARENT       = OBJ_SPLITTER_CONTAINER->TOP_LEFT_CONTAINER
I_APPLOGPARENT = OBJ_SPLITTER_CONTAINER->BOTTOM_RIGHT_CONTAINER.
*   EVENT処理オブジェクト作成
CREATE OBJECT OBJ_ALV_HANDLER_0200.
*   EVENT処理オブジェクトALVとつながる
SET HANDLER
OBJ_ALV_HANDLER_0200->HANDLE_TOOLBAR
OBJ_ALV_HANDLER_0200->HANDLE_DATA_CHANGED
OBJ_ALV_HANDLER_0200->HANDLE_DATA_CHANGED_FINISHED
OBJ_ALV_HANDLER_0200->HANDLE_USER_COMMAND
FOR OBJ_GRID.
*   「ENTER」押下を有効にする
CALL METHOD OBJ_GRID->REGISTER_EDIT_EVENT
EXPORTING
I_EVENT_ID = CL_GUI_ALV_GRID=>MC_EVT_ENTER.
*   ALV初期表示
CASE G_LIST_MODE.
*     送信リスト表示
WHEN CNS_LIST_MODE_TRANSMITTED.
CALL METHOD OBJ_GRID->SET_TABLE_FOR_FIRST_DISPLAY
EXPORTING
IS_VARIANT           = GF_ALV_VARIANT
IS_LAYOUT            = GF_ALV_LAYOUT
IT_TOOLBAR_EXCLUDING = GT_ALV_FUNCTION
I_SAVE               = 'A'
CHANGING
IT_OUTTAB            = GT_ALV_0201
IT_FIELDCATALOG      = GT_ALV_FIELDCAT.
*     受信リスト表示
WHEN CNS_LIST_MODE_RECEIVED.
CALL METHOD OBJ_GRID->SET_TABLE_FOR_FIRST_DISPLAY
EXPORTING
IS_VARIANT           = GF_ALV_VARIANT
IS_LAYOUT            = GF_ALV_LAYOUT
IT_TOOLBAR_EXCLUDING = GT_ALV_FUNCTION
I_SAVE               = 'A'
CHANGING
IT_OUTTAB            = GT_ALV_0202
IT_FIELDCATALOG      = GT_ALV_FIELDCAT.
ENDCASE.
CALL METHOD CL_GUI_CFW=>FLUSH.
ENDIF.

ENDMODULE.                 " INITIALIZE_0200  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  CHECK_INPUT_0200  INPUT
*&---------------------------------------------------------------------*
*       入力チェック
*----------------------------------------------------------------------*
MODULE CHECK_INPUT_0200 INPUT.

* ALV一覧データチェック
PERFORM HANDLE_ALV_DATA.

CHECK G_RC = 0.
CASE OK_CODE.
*   「選択削除」押下
WHEN CNS_OK_CODE_DELETE.
*     №入力チェック
PERFORM CHECK_SENDID_IS_SELECTED.
IF G_RC = 0.
*     送信IDが異なるチェック
PERFORM CHECK_SENDID_HAS_NO_DIFFERENT.
ENDIF.
ENDCASE.

ENDMODULE.                 " CHECK_INPUT_0200  INPUT
*&---------------------------------------------------------------------*
*&      Module  INFORM_0200  INPUT
*&---------------------------------------------------------------------*
*       メッセージ表示
*----------------------------------------------------------------------*
MODULE INFORM_0200 INPUT.

CHECK G_RC = 0.
CASE OK_CODE.
*   「選択削除」押下
WHEN CNS_OK_CODE_DELETE.
*     出荷確認メッセージ表示
PERFORM INFORM_SHIPMENT_MESSAGE.
ENDCASE.

ENDMODULE.                 " INFORM_0200  INPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       USER_COMMAND
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0200 INPUT.

CHECK G_RC = 0.
CASE OK_CODE.
*   「選択削除」押下
WHEN CNS_OK_CODE_DELETE.
*     削除確認
PERFORM CONFIRM_TO_DELETE.
IF G_RC = 0.
*       削除
PERFORM DELETE_DATA.
*       選択画面へ戻る
LEAVE TO SCREEN 0.
ENDIF.
*   「BACK」押下
WHEN CNS_OK_CODE_BACK.
*     選択画面へ戻る
PERFORM BACK_TO_FIRST_SCREEN.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*&      Form  SET_T_ALV_FIELDCAT_0200
*&---------------------------------------------------------------------*
*       ALV FIELDCATALOG設定
*----------------------------------------------------------------------*
FORM SET_T_ALV_FIELDCAT_0200.

DATA: LF_ALV_FIELDCAT LIKE LINE OF GT_ALV_FIELDCAT.

* 構造よりFIELDCATALOG設定
PERFORM CREATE_T_ALV_FIELDCAT.
* チェックボックス追加
LF_ALV_FIELDCAT-FIELDNAME = 'CHKBOX'.
LF_ALV_FIELDCAT-CHECKBOX = 'X'.
LF_ALV_FIELDCAT-EDIT = 'X'.
LF_ALV_FIELDCAT-OUTPUTLEN = 2.
INSERT LF_ALV_FIELDCAT INTO GT_ALV_FIELDCAT INDEX 1.

ENDFORM.                    " SET_T_ALV_FIELDCAT_0200
*&---------------------------------------------------------------------*
*&      Form  SET_ALV_LAYOUT_0200
*&---------------------------------------------------------------------*
*       ALVレイアウト設定
*----------------------------------------------------------------------*
FORM SET_ALV_LAYOUT_0200.

CLEAR GF_ALV_LAYOUT.
GF_ALV_LAYOUT-STYLEFNAME = 'STYLES'.

ENDFORM.                    " SET_ALV_LAYOUT_0200
*&---------------------------------------------------------------------*
*&      Form  SET_ALV_VARIANT_0200
*&---------------------------------------------------------------------*
*       ALVバリアント設定
*----------------------------------------------------------------------*
FORM SET_ALV_VARIANT_0200 .

CLEAR GF_ALV_VARIANT.
GF_ALV_VARIANT-REPORT = SY-REPID.
GF_ALV_VARIANT-HANDLE = SY-DYNNR.

ENDFORM.                    " SET_ALV_VARIANT_0200
*&---------------------------------------------------------------------*
*&      Form  SET_ALV_TOOLBAR_0200
*&---------------------------------------------------------------------*
*       ALVツールバー設定
*----------------------------------------------------------------------*
FORM SET_ALV_TOOLBAR_0200.

DATA: LF_ALV_FUNCTION LIKE LINE OF GT_ALV_FUNCTION.

CLEAR GT_ALV_FUNCTION[].
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_CHECK.    " エントリチェック
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_REFRESH.  " リフレッシュ
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_MB_PASTE.    " ペーストメニュー
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_MB_FILTER.   " フィルタ
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_MB_VIEW.     " ビューメニュー
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_MB_SUBTOT.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_MB_SUM.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_GRAPH.    " グラフィック
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_INFO.     " 情報
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_SORT.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_SORT_ASC.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_SORT_DSC.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_MOVE_ROW.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_PASTE_NEW_ROW.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.
LF_ALV_FUNCTION = CL_GUI_ALV_GRID=>MC_FC_FIND.
APPEND LF_ALV_FUNCTION TO GT_ALV_FUNCTION.

ENDFORM.                    " SET_ALV_TOOLBAR_0200
*&---------------------------------------------------------------------*
*&      Form  SET_T_ALV_ROID_0200
*&---------------------------------------------------------------------*
*       ALV行番内部テーブル初期設定
*----------------------------------------------------------------------*
FORM SET_T_ALV_ROID_0200.

DATA: LF_ALV_ROID LIKE LINE OF GT_ALV_ROID.
DATA: L_COUNT TYPE I.

CASE G_LIST_MODE.
WHEN CNS_LIST_MODE_TRANSMITTED.
DESCRIBE TABLE GT_ALV_0201 LINES L_COUNT.
WHEN CNS_LIST_MODE_RECEIVED.
DESCRIBE TABLE GT_ALV_0202 LINES L_COUNT.
ENDCASE.
DO L_COUNT TIMES.
*   初期の場合、行番 = テーブルインデックス
LF_ALV_ROID-ROW_ID = SY-INDEX.
APPEND LF_ALV_ROID TO GT_ALV_ROID.
ENDDO.

ENDFORM.                    " SET_T_ALV_ROID_0200
*&---------------------------------------------------------------------*
*&      Form  SET_T_ALV_0201
*&---------------------------------------------------------------------*
*       送信リスト内部テーブル格納
*----------------------------------------------------------------------*
FORM SET_T_ALV_0201.

DATA: LF_ALV_0201 LIKE LINE OF GT_ALV_0201.
DATA: LF_STYLE LIKE LINE OF LF_ALV_0201-STYLES.
DATA: LF_TRANSMIT_LOG LIKE LINE OF GT_TRANSMIT_LOG.
DATA: L_COUNT TYPE I,
L_LOCK_FLAG(1) TYPE C.

CLEAR GT_ALV_0201[].
SORT GT_TRANSMIT_LOG BY SENDID VBELN POSNR.
LOOP AT GT_TRANSMIT_LOG INTO LF_TRANSMIT_LOG.
CLEAR LF_ALV_0201.
LF_ALV_0201-MANDT     = LF_TRANSMIT_LOG-MANDT.
LF_ALV_0201-SENDID    = LF_TRANSMIT_LOG-SENDID.
LF_ALV_0201-VBELN     = LF_TRANSMIT_LOG-VBELN.
LF_ALV_0201-POSNR     = LF_TRANSMIT_LOG-POSNR.
LF_ALV_0201-NRFLG     = LF_TRANSMIT_LOG-NRFLG.
LF_ALV_0201-LOEVM     = LF_TRANSMIT_LOG-LOEVM.
LF_ALV_0201-KUNNR     = LF_TRANSMIT_LOG-KUNNR.
LF_ALV_0201-MATNR     = LF_TRANSMIT_LOG-MATNR.
LF_ALV_0201-MENGE     = LF_TRANSMIT_LOG-MENGE.
LF_ALV_0201-NETPR     = LF_TRANSMIT_LOG-NETPR.
LF_ALV_0201-WAERK     = LF_TRANSMIT_LOG-WAERK.
LF_ALV_0201-VSTEL     = LF_TRANSMIT_LOG-VSTEL.
LF_ALV_0201-PIKNO     = LF_TRANSMIT_LOG-PIKNO.
LF_ALV_0201-ASNNO     = LF_TRANSMIT_LOG-ASNNO.
LF_ALV_0201-KWMENG    = LF_TRANSMIT_LOG-KWMENG.
LF_ALV_0201-VDATU     = LF_TRANSMIT_LOG-VDATU.
LF_ALV_0201-SYKSJBKU  = LF_TRANSMIT_LOG-SYKSJBKU.
LF_ALV_0201-NOHINTP   = LF_TRANSMIT_LOG-NOHINTP.
LF_ALV_0201-TRMTYP    = LF_TRANSMIT_LOG-TRMTYP.
LF_ALV_0201-SYOHIN    = LF_TRANSMIT_LOG-SYOHIN.
LF_ALV_0201-PRODUCT   = LF_TRANSMIT_LOG-PRODUCT.
LF_ALV_0201-SDMENG    = LF_TRANSMIT_LOG-SDMENG.
LF_ALV_0201-RCMENG    = LF_TRANSMIT_LOG-RCMENG.
LF_ALV_0201-LFIMG     = LF_TRANSMIT_LOG-LFIMG.
LF_ALV_0201-KWAMNG    = LF_TRANSMIT_LOG-KWAMNG.
LF_ALV_0201-SENDFL    = LF_TRANSMIT_LOG-SENDFL.
LF_ALV_0201-SDDATE    = LF_TRANSMIT_LOG-SDDATE.
LF_ALV_0201-SDTIME    = LF_TRANSMIT_LOG-SDTIME.
LF_ALV_0201-SDNAME    = LF_TRANSMIT_LOG-SDNAME.
LF_ALV_0201-DLDATE    = LF_TRANSMIT_LOG-DLDATE.
LF_ALV_0201-DLTIME    = LF_TRANSMIT_LOG-DLTIME.
LF_ALV_0201-DLNAME    = LF_TRANSMIT_LOG-DLNAME.
AT NEW SENDID.
CLEAR: L_COUNT, L_LOCK_FLAG.
READ TABLE GT_TRANSMIT_LOG TRANSPORTING NO FIELDS
WITH KEY SENDID = LF_TRANSMIT_LOG-SENDID LOCK = 'X'.
IF SY-SUBRC = 0.
L_LOCK_FLAG = 'X'.
ENDIF.
ENDAT.
L_COUNT = L_COUNT + 1.
IF L_COUNT = 1 AND L_LOCK_FLAG = ' '.
LF_STYLE-FIELDNAME = 'CHKBOX'.
LF_STYLE-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
ELSE.
LF_STYLE-FIELDNAME = 'CHKBOX'.
LF_STYLE-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
ENDIF.
INSERT LF_STYLE INTO TABLE LF_ALV_0201-STYLES.
APPEND  LF_ALV_0201 TO GT_ALV_0201.
ENDLOOP.

ENDFORM.                    " SET_T_ALV_0201
*&---------------------------------------------------------------------*
*&      Form  SET_T_ALV_0202
*&---------------------------------------------------------------------*
*       受信リスト内部テーブル格納
*----------------------------------------------------------------------*
FORM SET_T_ALV_0202.

DATA: LF_ALV_0202 LIKE LINE OF GT_ALV_0202.
DATA: LF_STYLE LIKE LINE OF LF_ALV_0202-STYLES.
DATA: LF_RECEIVE_LOG LIKE LINE OF GT_RECEIVE_LOG.

CLEAR GT_ALV_0202[].
SORT GT_RECEIVE_LOG BY SENDID VBELN POSNR.
LOOP AT GT_RECEIVE_LOG INTO LF_RECEIVE_LOG.
CLEAR LF_ALV_0202.
LF_ALV_0202-MANDT    = LF_RECEIVE_LOG-MANDT.
LF_ALV_0202-SENDID   = LF_RECEIVE_LOG-SENDID.
LF_ALV_0202-VBELN    = LF_RECEIVE_LOG-VBELN.
LF_ALV_0202-POSNR    = LF_RECEIVE_LOG-POSNR.
LF_ALV_0202-INVOICE  = LF_RECEIVE_LOG-INVOICE.
LF_ALV_0202-TORIKOMI = LF_RECEIVE_LOG-TORIKOMI.
LF_ALV_0202-LOEVM    = LF_RECEIVE_LOG-LOEVM.
LF_ALV_0202-LFIMG    = LF_RECEIVE_LOG-LFIMG.
LF_ALV_0202-SHPDAT   = LF_RECEIVE_LOG-SHPDAT.
LF_ALV_0202-WADAT    = LF_RECEIVE_LOG-WADAT.
LF_ALV_0202-ASNNO    = LF_RECEIVE_LOG-ASNNO.
LF_ALV_0202-KUNNR    = LF_RECEIVE_LOG-KUNNR.
LF_ALV_0202-BLNO     = LF_RECEIVE_LOG-BLNO.
LF_ALV_0202-SINO     = LF_RECEIVE_LOG-SINO.
LF_ALV_0202-INDATE   = LF_RECEIVE_LOG-INDATE.
LF_ALV_0202-INTIME   = LF_RECEIVE_LOG-INTIME.
LF_ALV_0202-INNAME   = LF_RECEIVE_LOG-INNAME.
LF_ALV_0202-VSTEL    = LF_RECEIVE_LOG-VSTEL.
LF_ALV_0202-SBDC     = LF_RECEIVE_LOG-SBDC.
LF_ALV_0202-SBDCDAT  = LF_RECEIVE_LOG-SBDCDAT.
LF_ALV_0202-SBDCTIM  = LF_RECEIVE_LOG-SBDCTIM.
LF_ALV_0202-SBDCNAM  = LF_RECEIVE_LOG-SBDCNAM.
LF_ALV_0202-VBELN_S  = LF_RECEIVE_LOG-VBELN_S.
LF_ALV_0202-WABDC    = LF_RECEIVE_LOG-WABDC.
LF_ALV_0202-WBDCDAT  = LF_RECEIVE_LOG-WBDCDAT.
LF_ALV_0202-WBDCTIM  = LF_RECEIVE_LOG-WBDCTIM.
LF_ALV_0202-WBDCNAM  = LF_RECEIVE_LOG-WBDCNAM.
LF_ALV_0202-DLDATE   = LF_RECEIVE_LOG-DLDATE.
LF_ALV_0202-DLTIME   = LF_RECEIVE_LOG-DLTIME.
LF_ALV_0202-DLNAME   = LF_RECEIVE_LOG-DLNAME.
IF LF_RECEIVE_LOG-LOCK = ' '.
LF_STYLE-FIELDNAME = 'CHKBOX'.
LF_STYLE-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.
ELSE.
LF_STYLE-FIELDNAME = 'CHKBOX'.
LF_STYLE-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
ENDIF.
INSERT LF_STYLE INTO TABLE LF_ALV_0202-STYLES.
APPEND LF_ALV_0202 TO GT_ALV_0202.
ENDLOOP.

ENDFORM.                    " SET_T_ALV_0202
*&---------------------------------------------------------------------*
*&      Form  CHANGE_ALV_DATA_0200
*&---------------------------------------------------------------------*
*       ALV画面項目値更新
*----------------------------------------------------------------------*
FORM CHANGE_ALV_DATA_0200.

DATA: LF_ALV_0201 LIKE LINE OF GT_ALV_0201.
DATA: LF_GOOD_CELL TYPE LVC_S_MODI.
DATA: L_TABIX TYPE SY-TABIX.
DATA: L_COUNT TYPE I.

FIELD-SYMBOLS: <FF_ALV_0201> LIKE LINE OF GT_ALV_0201.
FIELD-SYMBOLS: <F_FIELD> TYPE ANY.

LOOP AT GT_ALV_GOOD_CELL INTO LF_GOOD_CELL.
READ TABLE GT_ALV_ROID TRANSPORTING NO FIELDS
WITH KEY ROW_ID = LF_GOOD_CELL-ROW_ID.
L_TABIX = SY-TABIX.
CASE G_LIST_MODE.
WHEN CNS_LIST_MODE_TRANSMITTED.
READ TABLE GT_ALV_0201 INTO LF_ALV_0201 INDEX L_TABIX.
LOOP AT GT_ALV_0201 ASSIGNING <FF_ALV_0201>
WHERE SENDID  = LF_ALV_0201-SENDID.
CHECK L_TABIX <> SY-TABIX.
ASSIGN COMPONENT LF_GOOD_CELL-FIELDNAME
OF STRUCTURE <FF_ALV_0201>
TO <F_FIELD>.
L_COUNT = L_COUNT + 1.
<F_FIELD> = LF_GOOD_CELL-VALUE.
ENDLOOP.
ENDCASE.
ENDLOOP.
CALL METHOD OBJ_GRID->REFRESH_TABLE_DISPLAY.
CALL METHOD CL_GUI_CFW=>FLUSH.
* 変更項目履歴クリア
CLEAR GT_ALV_GOOD_CELL[].

ENDFORM.                    " CHANGE_ALV_DATA_0200
*&---------------------------------------------------------------------*
*&      Form  CHECK_ALV_INPUT_0200
*&---------------------------------------------------------------------*
*       ALV変更内容チェック
*----------------------------------------------------------------------*
*      -->IR_DATA_CHANGED  変更内容
*----------------------------------------------------------------------*
FORM CHECK_ALV_INPUT_0200
USING IR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

DATA: LF_GOOD_CELL TYPE LVC_S_MODI.

GT_ALV_ROID[] = IR_DATA_CHANGED->MT_ROID_FRONT[].

* 変更項目履歴
LOOP AT IR_DATA_CHANGED->MT_GOOD_CELLS[] INTO LF_GOOD_CELL.
MODIFY GT_ALV_GOOD_CELL FROM LF_GOOD_CELL TRANSPORTING VALUE
WHERE ROW_ID    = LF_GOOD_CELL-ROW_ID
AND FIELDNAME = LF_GOOD_CELL-FIELDNAME.
IF SY-SUBRC <> 0.
APPEND LF_GOOD_CELL TO GT_ALV_GOOD_CELL.
ENDIF.
ENDLOOP.

ENDFORM.                    " CHECK_ALV_INPUT_0200
*&---------------------------------------------------------------------*
*&      Form  CONFIRM_TO_DELETE
*&---------------------------------------------------------------------*
*       削除確認
*----------------------------------------------------------------------*
FORM CONFIRM_TO_DELETE.

DATA: L_QUESTION(80) TYPE C.
DATA: L_ANSWER TYPE C.

CLEAR G_RC.
CASE G_LIST_MODE.
WHEN CNS_LIST_MODE_TRANSMITTED.
L_QUESTION = TEXT-P02.
WHEN CNS_LIST_MODE_RECEIVED.
L_QUESTION = TEXT-P03.
ENDCASE.
CALL FUNCTION 'POPUP_TO_CONFIRM'
EXPORTING
TEXT_QUESTION         = L_QUESTION
DISPLAY_CANCEL_BUTTON = ' '
IMPORTING
ANSWER                = L_ANSWER
EXCEPTIONS
OTHERS                = 0.
CASE L_ANSWER.
WHEN '1'.
WHEN OTHERS.
G_RC = CNS_RC_CODE_CANCEL.
ENDCASE.

ENDFORM.                    " CONFIRM_TO_DELETE
*&---------------------------------------------------------------------*
*&      Form  DELETE_DATA
*&---------------------------------------------------------------------*
*       削除
*----------------------------------------------------------------------*
FORM DELETE_DATA.

CASE G_LIST_MODE.
WHEN CNS_LIST_MODE_TRANSMITTED.
PERFORM DELETE_TRANSMITTED_DATA.
IF G_RC = 0.
PERFORM SET_T_RESULT_0201.
ENDIF.
WHEN CNS_LIST_MODE_RECEIVED.
PERFORM DELETE_RECEIVED_DATA.
IF G_RC = 0.
PERFORM SET_T_RESULT_0202.
ENDIF.
ENDCASE.

ENDFORM.                    " DELETE_DATA
*&---------------------------------------------------------------------*
*&      Form  DELETE_TRANSMITTED_DATA
*&---------------------------------------------------------------------*
*       送信ログ削除
*----------------------------------------------------------------------*
FORM DELETE_TRANSMITTED_DATA.

DATA: LF_ALV_0201 LIKE LINE OF GT_ALV_0201.

CLEAR G_RC.
LOOP AT GT_ALV_0201 INTO LF_ALV_0201
WHERE CHKBOX = 'X'.
*   送信ログ更新（送信リストで「削除」押下するとき）
PERFORM UPDATE_ZSD002_0201 USING LF_ALV_0201.
IF G_RC <> 0.
EXIT.
ENDIF.
*   受信ログデータロック
PERFORM LOCK_ZSD003_WITH_ID USING LF_ALV_0201.
IF G_RC <> 0.
EXIT.
ENDIF.
*   受信ログ更新（送信リストで「削除」押下するとき）
PERFORM UPDATE_ZSD003_0201 USING LF_ALV_0201.
*   受信ログデータロック解除
PERFORM UNLOCK_ZSD003_WITH_ID USING LF_ALV_0201.
CLEAR G_RC.
ENDLOOP.

CHECK G_RC = 0.
COMMIT WORK.

ENDFORM.                    " DELETE_TRANSMITTED_DATA
*&---------------------------------------------------------------------*
*&      Form  DELETE_RECEIVED_DATA
*&---------------------------------------------------------------------*
*       受信ログ削除
*----------------------------------------------------------------------*
FORM DELETE_RECEIVED_DATA.

DATA: LF_ALV_0202 LIKE LINE OF GT_ALV_0202.

LOOP AT GT_ALV_0202 INTO LF_ALV_0202 WHERE
CHKBOX = 'X'.
*   受信ログ更新（受信リストで「削除」押下するとき）
PERFORM UPDATE_ZSD003_0202 USING LF_ALV_0202.
IF G_RC <> 0.
EXIT.
ENDIF.
*   送信ログデータロック
PERFORM LOCK_ZSD002_WITH_ID USING LF_ALV_0202.
IF G_RC <> 0.
EXIT.
ENDIF.
*   送信ログ更新（受信リストで「削除」押下するとき）
PERFORM UPDATE_ZSD002_0202 USING LF_ALV_0202.
IF G_RC <> 0.
EXIT.
ENDIF.
*   送信ログデータロック解除
PERFORM UNLOCK_ZSD002_WITH_ID USING LF_ALV_0202.
CLEAR G_RC.
ENDLOOP.

CHECK G_RC = 0.
COMMIT WORK.

ENDFORM.                    " DELETE_RECEIVED_DATA
*&---------------------------------------------------------------------*
*&      Form  UPDATE_ZSD002_0201
*&---------------------------------------------------------------------*
*       送信ログ更新（送信リストで「削除」押下するとき）
*----------------------------------------------------------------------*
*      -->IF_ALV_0201  送信ログ
*----------------------------------------------------------------------*
FORM UPDATE_ZSD002_0201 USING IF_ALV_0201 TYPE TYP_ALV_0201.

CLEAR G_RC.
UPDATE ZSD002
SET LOEVM = 'X'
DLDATE = SY-DATUM
DLTIME = SY-UZEIT
DLNAME = SY-UNAME
WHERE SENDID = IF_ALV_0201-SENDID
AND VBELN = IF_ALV_0201-VBELN
AND POSNR = IF_ALV_0201-POSNR.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
G_RC = CNS_RC_CODE_DB_ERROR.
*   テーブルの更新でエラーが発生しました
MESSAGE S639.
ENDIF.

ENDFORM.                    " UPDATE_ZSD002_0201
*&---------------------------------------------------------------------*
*&      Form  UPDATE_ZSD003_0201
*&---------------------------------------------------------------------*
*       受信ログ更新（送信リストで「削除」押下するとき）
*----------------------------------------------------------------------*
*      -->IF_ALV_0201  受信ログ
*----------------------------------------------------------------------*
FORM UPDATE_ZSD003_0201 USING IF_ALV_0201 TYPE TYP_ALV_0201.

CLEAR G_RC.
UPDATE ZSD003
SET LOEVM = 'X'
DLDATE = SY-DATUM
DLTIME = SY-UZEIT
DLNAME = SY-UNAME
WHERE SENDID = IF_ALV_0201-SENDID
AND VBELN = IF_ALV_0201-VBELN
AND POSNR = IF_ALV_0201-POSNR
AND LOEVM = ' '.
IF SY-SUBRC <> 0.
G_RC = CNS_RC_CODE_DB_ERROR.
ENDIF.

ENDFORM.                    " UPDATE_ZSD003_0201
*&---------------------------------------------------------------------*
*&      Form  UPDATE_ZSD002_0202
*&---------------------------------------------------------------------*
*       送信ログ更新（受信リストで「削除」押下するとき）
*----------------------------------------------------------------------*
*      -->IF_ALV_0202  text
*----------------------------------------------------------------------*
FORM UPDATE_ZSD002_0202 USING    IF_ALV_0202 TYPE TYP_ALV_0202.

DATA: LF_TRANSMIT_LOG LIKE LINE OF GT_TRANSMIT_LOG.

CLEAR G_RC.
READ TABLE GT_TRANSMIT_LOG INTO LF_TRANSMIT_LOG
WITH KEY SENDID = IF_ALV_0202-SENDID
VBELN = IF_ALV_0202-VBELN
POSNR = IF_ALV_0202-POSNR.
IF SY-SUBRC = 0.
*   受信数量減算
*2009/04/07 MODIFY START
IF IF_ALV_0202-TORIKOMI <> 0.   "20090407APPEND
LF_TRANSMIT_LOG-RCMENG =
LF_TRANSMIT_LOG-RCMENG - IF_ALV_0202-LFIMG.
ENDIF.                          "20090407APPEND
*2009/04/07 MODIFY END
*   出荷数量減算
IF IF_ALV_0202-SBDC = 'X'.
LF_TRANSMIT_LOG-LFIMG =
LF_TRANSMIT_LOG-LFIMG - IF_ALV_0202-LFIMG.
ENDIF.
*   出庫数量減算
IF IF_ALV_0202-WABDC = 'X'.
LF_TRANSMIT_LOG-KWAMNG =
LF_TRANSMIT_LOG-KWAMNG - IF_ALV_0202-LFIMG.
ENDIF.
*   送信ログ更新
UPDATE ZSD002
SET RCMENG = LF_TRANSMIT_LOG-RCMENG
LFIMG = LF_TRANSMIT_LOG-LFIMG
KWAMNG = LF_TRANSMIT_LOG-KWAMNG
WHERE SENDID = IF_ALV_0202-SENDID
AND VBELN = IF_ALV_0202-VBELN
AND POSNR = IF_ALV_0202-POSNR.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
G_RC = CNS_RC_CODE_DB_ERROR.
*     テーブルの更新でエラーが発生しました
MESSAGE S639.
ENDIF.
CHECK G_RC = 0.
MODIFY GT_TRANSMIT_LOG FROM LF_TRANSMIT_LOG
TRANSPORTING RCMENG LFIMG KWAMNG
WHERE SENDID = IF_ALV_0202-SENDID
AND VBELN = IF_ALV_0202-VBELN
AND POSNR = IF_ALV_0202-POSNR.
ENDIF.

ENDFORM.                    " UPDATE_ZSD002_0202
*&---------------------------------------------------------------------*
*&      Form  UPDATE_ZSD003_0202
*&---------------------------------------------------------------------*
*       受信ログ更新（受信リストで「削除」押下するとき）
*----------------------------------------------------------------------*
*      -->IF_ALV_0202  text
*----------------------------------------------------------------------*
FORM UPDATE_ZSD003_0202 USING    IF_ALV_0202 TYPE TYP_ALV_0202.

CLEAR G_RC.
UPDATE ZSD003
SET LOEVM = 'X'
DLDATE = SY-DATUM
DLTIME = SY-UZEIT
DLNAME = SY-UNAME
WHERE SENDID = IF_ALV_0202-SENDID
AND VBELN = IF_ALV_0202-VBELN
AND POSNR = IF_ALV_0202-POSNR
AND INVOICE = IF_ALV_0202-INVOICE
AND TORIKOMI = IF_ALV_0202-TORIKOMI.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
G_RC = CNS_RC_CODE_DB_ERROR.
*   テーブルの更新でエラーが発生しました
MESSAGE S639.
ENDIF.

ENDFORM.                    " UPDATE_ZSD003_0202
*&---------------------------------------------------------------------*
*&      Form  CHECK_SENDID_IS_SELECTED
*&---------------------------------------------------------------------*
*       チェックされたデータがあるかどうかを判断する
*----------------------------------------------------------------------*
FORM CHECK_SENDID_IS_SELECTED.

CLEAR G_RC.
CASE G_LIST_MODE.
WHEN CNS_LIST_MODE_TRANSMITTED.
READ TABLE GT_ALV_0201 TRANSPORTING NO FIELDS
WITH KEY CHKBOX = 'X'.
IF SY-SUBRC <> 0.
G_RC = CNS_RC_CODE_ERROR.
ENDIF.
WHEN CNS_LIST_MODE_RECEIVED.
READ TABLE GT_ALV_0202 TRANSPORTING NO FIELDS
WITH KEY CHKBOX = 'X'.
IF SY-SUBRC <> 0.
G_RC = CNS_RC_CODE_ERROR.
ENDIF.
ENDCASE.

IF G_RC <> 0.
*   削除データが選択されていません
MESSAGE S632.
ENDIF.

ENDFORM.                    " CHECK_SENDID_IS_SELECTED
*&---------------------------------------------------------------------*
*&      Form  CHECK_SENDID_HAS_NO_DIFFERENT
*&---------------------------------------------------------------------*
*       チェックされたデータが重複してるかどうかを判断する
*----------------------------------------------------------------------*
FORM CHECK_SENDID_HAS_NO_DIFFERENT.

TYPES: BEGIN OF TYP_CHECKER,
SENDID TYPE ZSD002-SENDID,
END OF TYP_CHECKER.

DATA: LT_CHECKER TYPE STANDARD TABLE OF TYP_CHECKER,
LF_CHECKER LIKE LINE OF LT_CHECKER.
DATA: LF_ALV_0201 LIKE LINE OF GT_ALV_0201,
LF_ALV_0202 LIKE LINE OF GT_ALV_0202.
DATA: L_COUNT TYPE I.

CLEAR G_RC.
CASE G_LIST_MODE.
*   送信済
WHEN CNS_LIST_MODE_TRANSMITTED.
LOOP AT GT_ALV_0201 INTO LF_ALV_0201
WHERE CHKBOX = 'X'.
CLEAR LF_CHECKER.
LF_CHECKER-SENDID = LF_ALV_0201-SENDID.
COLLECT LF_CHECKER INTO LT_CHECKER.
ENDLOOP.
*   受信済
WHEN CNS_LIST_MODE_RECEIVED.
LOOP AT GT_ALV_0202 INTO LF_ALV_0202
WHERE CHKBOX = 'X'.
CLEAR LF_CHECKER.
LF_CHECKER-SENDID = LF_ALV_0202-SENDID.
COLLECT LF_CHECKER INTO LT_CHECKER.
ENDLOOP.
ENDCASE.

DESCRIBE TABLE LT_CHECKER LINES L_COUNT.
IF L_COUNT > 1.
G_RC = CNS_RC_CODE_ERROR.
*   １送信ID分のみ、１度に削除可能です
MESSAGE S633.
ENDIF.

ENDFORM.                    " CHECK_SENDID_HAS_NO_DIFFERENT
*&---------------------------------------------------------------------*
*&      Form  CHECK_AUTHORITY_0200
*&---------------------------------------------------------------------*
*       権限チェック
*----------------------------------------------------------------------*
FORM CHECK_AUTHORITY_0200.

DATA: L_REPID(10) TYPE C.
DATA: L_FLAG(1) TYPE C.

CLEAR G_RC.
L_REPID = SY-REPID.
GET PARAMETER ID L_REPID FIELD L_FLAG.
IF L_FLAG <> 'X'.
G_RC = CNS_RC_CODE_NO_AUTHORITY.
ENDIF.

ENDFORM.                    " CHECK_AUTHORITY_0200
*&---------------------------------------------------------------------*
*&      Form  INFORM_SHIPMENT_MESSAGE
*&---------------------------------------------------------------------*
*       出荷伝票存在チェック
*----------------------------------------------------------------------*
FORM INFORM_SHIPMENT_MESSAGE.

DATA: LF_ALV_0201 LIKE LINE OF GT_ALV_0201,
LF_ALV_0202 LIKE LINE OF GT_ALV_0202.
DATA: LF_RECEIVE_LOG LIKE LINE OF GT_RECEIVE_LOG.
DATA: LT_VBELN TYPE STANDARD TABLE OF LIKP-VBELN,
L_VBELN LIKE LINE OF LT_VBELN.

CLEAR G_RC.
CASE G_LIST_MODE.
WHEN CNS_LIST_MODE_TRANSMITTED.
LOOP AT GT_ALV_0201 INTO LF_ALV_0201
WHERE CHKBOX = 'X'.
READ TABLE GT_RECEIVE_LOG INTO LF_RECEIVE_LOG
WITH KEY SENDID = LF_ALV_0201-SENDID
VBELN = LF_ALV_0201-VBELN
POSNR = LF_ALV_0201-POSNR.
IF SY-SUBRC = 0.
APPEND LF_RECEIVE_LOG-VBELN_S TO LT_VBELN.
ENDIF.
ENDLOOP.
WHEN CNS_LIST_MODE_RECEIVED.
LOOP AT GT_ALV_0202 INTO LF_ALV_0202
WHERE CHKBOX = 'X'.
APPEND LF_ALV_0202-VBELN_S TO LT_VBELN.
ENDLOOP.
ENDCASE.

LOOP AT LT_VBELN INTO L_VBELN.
*   出荷伝票存在チェック
PERFORM CHECK_VBELN_IS_EXIST USING L_VBELN.
IF G_RC = 0.
*     出荷伝票 & を確認して下さい
MESSAGE I634 WITH L_VBELN.
ENDIF.
ENDLOOP.

CLEAR G_RC.

ENDFORM.                    " INFORM_SHIPMENT_MESSAGE
*&---------------------------------------------------------------------*
*&      Form  CHECK_VBELN_IS_EXIST
*&---------------------------------------------------------------------*
*       出荷伝票存在チェック
*----------------------------------------------------------------------*
*      -->I_VBELN  出荷伝票番号
*----------------------------------------------------------------------*
FORM CHECK_VBELN_IS_EXIST USING    I_VBELN.

CLEAR: G_RC.
SELECT COUNT(*) FROM LIKP
WHERE VBELN = I_VBELN.
IF SY-SUBRC <> 0.
G_RC = CNS_RC_CODE_NOT_FOUND.
ENDIF.

ENDFORM.                    " CHECK_VBELN_IS_EXIST
*&---------------------------------------------------------------------*
*&      Form  SET_T_RESULT_0201
*&---------------------------------------------------------------------*
*       処理結果出力(送信ログデータ削除)
*----------------------------------------------------------------------*
FORM SET_T_RESULT_0201.

DATA: LF_RESULT LIKE LINE OF GT_RESULT.
DATA: LF_ALV_0201 LIKE LINE OF GT_ALV_0201,
LF_RECEIVE_LOG LIKE LINE OF GT_RECEIVE_LOG.
DATA: L_COUNT_TRANSMIT TYPE I,
L_COUNT_RECEIVE TYPE I.
DATA: LS_SENDID TYPE RANGE OF ZSD003-SENDID,
LF_SENDID LIKE LINE OF LS_SENDID.

CLEAR GT_RESULT[].

CLEAR L_COUNT_TRANSMIT.
CLEAR LF_RESULT.
LF_RESULT-FORMAT = 'S'.
APPEND LF_RESULT TO GT_RESULT.
CLEAR LF_RESULT.
* 【送信ログ】
LF_RESULT-LINE = TEXT-R01.
APPEND LF_RESULT TO GT_RESULT.
CLEAR LF_RESULT.
* 送信ID
LF_RESULT-LINE+3(16) = TEXT-R09.
* 受注伝票
LF_RESULT-LINE+19(12) = TEXT-R05.
* 明細
LF_RESULT-LINE+31(8) = TEXT-R06.
* 得意先コード
LF_RESULT-LINE+39(16) = TEXT-R03.
* 品目コード
LF_RESULT-LINE+55(20) = TEXT-R07.
* 数量
LF_RESULT-LINE+75(12) = TEXT-R08.
APPEND LF_RESULT TO GT_RESULT.
LOOP AT GT_ALV_0201 INTO  LF_ALV_0201
WHERE CHKBOX = 'X'.
CLEAR LF_RESULT.
LF_RESULT-LINE+3(16) = LF_ALV_0201-SENDID.
LF_RESULT-LINE+19(12) = LF_ALV_0201-VBELN.
LF_RESULT-LINE+31(8) = LF_ALV_0201-POSNR.
LF_RESULT-LINE+39(16) = LF_ALV_0201-KUNNR.
LF_RESULT-LINE+55(20) = LF_ALV_0201-MATNR.
LF_RESULT-LINE+75(12) = LF_ALV_0201-SDMENG.
APPEND LF_RESULT TO GT_RESULT.
L_COUNT_TRANSMIT = L_COUNT_TRANSMIT + 1.
AT NEW SENDID.
LF_SENDID-SIGN = 'I'.
LF_SENDID-OPTION = 'EQ'.
LF_SENDID-LOW = LF_ALV_0201-SENDID.
APPEND LF_SENDID TO LS_SENDID.
ENDAT.
ENDLOOP.

CLEAR L_COUNT_RECEIVE.
IF NOT LS_SENDID[] IS INITIAL.
CLEAR LF_RESULT.
LF_RESULT-FORMAT = 'S'.
APPEND LF_RESULT TO GT_RESULT.
CLEAR LF_RESULT.
*   【取込ログ】
LF_RESULT-LINE = TEXT-R02.
APPEND LF_RESULT TO GT_RESULT.
CLEAR LF_RESULT.
*   送信ID
LF_RESULT-LINE+3(16) = TEXT-R09.
*   受注伝票
LF_RESULT-LINE+19(12) = TEXT-R05.
*   明細
LF_RESULT-LINE+31(8) = TEXT-R06.
*   インボイス№
LF_RESULT-LINE+39(20) = TEXT-R10.
*   取込回数
LF_RESULT-LINE+59(10) = TEXT-R11.
*   数量
LF_RESULT-LINE+69(12) = TEXT-R08.
APPEND LF_RESULT TO GT_RESULT.
LOOP AT GT_RECEIVE_LOG INTO  LF_RECEIVE_LOG
WHERE SENDID IN LS_SENDID AND LOEVM = ' '.
CLEAR LF_RESULT.
LF_RESULT-LINE+3(16) = LF_RECEIVE_LOG-SENDID.
LF_RESULT-LINE+19(12) = LF_RECEIVE_LOG-VBELN.
LF_RESULT-LINE+31(8) = LF_RECEIVE_LOG-POSNR.
LF_RESULT-LINE+39(20) = LF_RECEIVE_LOG-INVOICE.
LF_RESULT-LINE+59(10) = LF_RECEIVE_LOG-TORIKOMI.
LF_RESULT-LINE+69(12) = LF_RECEIVE_LOG-LFIMG.
APPEND LF_RESULT TO GT_RESULT.
L_COUNT_RECEIVE = L_COUNT_RECEIVE + 1.
ENDLOOP.
ENDIF.

* 送信ID & の送信ログ( XXX 件)/取込ログ( XXX 件)を削除しました
MESSAGE ID 'Z1' TYPE 'S' NUMBER 635 INTO LF_RESULT-LINE
WITH LF_ALV_0201-SENDID L_COUNT_TRANSMIT L_COUNT_RECEIVE.
INSERT LF_RESULT INTO GT_RESULT INDEX 1.

ENDFORM.                    " SET_T_RESULT_0201
*&---------------------------------------------------------------------*
*&      Form  SET_T_RESULT_0202
*&---------------------------------------------------------------------*
*       処理結果出力(受信ログデータ削除)
*----------------------------------------------------------------------*
FORM SET_T_RESULT_0202.

DATA: LF_RESULT LIKE LINE OF GT_RESULT.
DATA: LF_ALV_0202 LIKE LINE OF GT_ALV_0202.
DATA: L_COUNT_RECEIVE TYPE I.

CLEAR GT_RESULT[].

CLEAR LF_RESULT.
LF_RESULT-FORMAT = 'S'.
APPEND LF_RESULT TO GT_RESULT.
CLEAR LF_RESULT.
* 【取込ログ】
LF_RESULT-LINE = TEXT-R02.
APPEND LF_RESULT TO GT_RESULT.
CLEAR LF_RESULT.
* 送信ID
LF_RESULT-LINE+3(16) = TEXT-R09.
* 受注伝票
LF_RESULT-LINE+19(12) = TEXT-R05.
* 明細
LF_RESULT-LINE+31(8) = TEXT-R06.
* インボイス№
LF_RESULT-LINE+39(20) = TEXT-R10.
* 取込回数
LF_RESULT-LINE+59(10) = TEXT-R11.
* 数量
LF_RESULT-LINE+69(12) = TEXT-R08.
APPEND LF_RESULT TO GT_RESULT.
LOOP AT GT_ALV_0202 INTO  LF_ALV_0202
WHERE CHKBOX = 'X'.
L_COUNT_RECEIVE = L_COUNT_RECEIVE + 1.
CLEAR LF_RESULT.
LF_RESULT-LINE+3(16) = LF_ALV_0202-SENDID.
LF_RESULT-LINE+19(12) = LF_ALV_0202-VBELN.
LF_RESULT-LINE+31(8) = LF_ALV_0202-POSNR.
LF_RESULT-LINE+39(20) = LF_ALV_0202-INVOICE.
LF_RESULT-LINE+59(10) = LF_ALV_0202-TORIKOMI.
LF_RESULT-LINE+69(12) = LF_ALV_0202-LFIMG.
APPEND LF_RESULT TO GT_RESULT.
ENDLOOP.

* 取込ログ( XXX 件)を削除しました
MESSAGE ID 'Z1' TYPE 'S' NUMBER 638 INTO LF_RESULT-LINE
WITH L_COUNT_RECEIVE.
INSERT LF_RESULT INTO GT_RESULT INDEX 1.

ENDFORM.                    " SET_T_RESULT_0202
*&---------------------------------------------------------------------*
*&      Form  CUSTOMIZE_ALV_COMMAND_0200
*&---------------------------------------------------------------------*
*       ALV TOOLBAR CUSTOMIZE
*----------------------------------------------------------------------*
*      -->IR_TOOLBAR_SET  ALV TOOLBAR オブジェクト
*----------------------------------------------------------------------*
FORM CUSTOMIZE_ALV_COMMAND_0200
USING IR_TOOLBAR_SET TYPE REF TO CL_ALV_EVENT_TOOLBAR_SET.

DATA: LF_BUTTON TYPE STB_BUTTON.

CLEAR LF_BUTTON.
LF_BUTTON-BUTN_TYPE = 3.
APPEND LF_BUTTON TO IR_TOOLBAR_SET->MT_TOOLBAR.

* 「全選択」追加
CLEAR LF_BUTTON.
LF_BUTTON-FUNCTION = CNS_OK_CODE_SELECT_ALL.
LF_BUTTON-ICON = ICON_SELECT_ALL.
LF_BUTTON-BUTN_TYPE = 0.
LF_BUTTON-DISABLED = ' '.
LF_BUTTON-QUICKINFO = TEXT-B01.
APPEND LF_BUTTON TO IR_TOOLBAR_SET->MT_TOOLBAR.

* 「全解除」追加
CLEAR LF_BUTTON.
LF_BUTTON-FUNCTION = CNS_OK_CODE_DESELECT_ALL.
LF_BUTTON-ICON = ICON_DESELECT_ALL.
LF_BUTTON-BUTN_TYPE = 0.
LF_BUTTON-DISABLED = ' '.
LF_BUTTON-QUICKINFO = TEXT-B02.
APPEND LF_BUTTON TO IR_TOOLBAR_SET->MT_TOOLBAR.

ENDFORM.                    " CUSTOMIZE_ALV_COMMAND_0200
*&---------------------------------------------------------------------*
*&      Form  PROCESS_ALV_COMMAND_0200
*&---------------------------------------------------------------------*
*       ALV USER COMMAND を実行する
*----------------------------------------------------------------------*
*      -->I_UCOMM  USER COMMAND
*----------------------------------------------------------------------*
FORM PROCESS_ALV_COMMAND_0200 USING    I_UCOMM.

FIELD-SYMBOLS: <FF_ALV_0201> LIKE LINE OF GT_ALV_0201,
<FF_ALV_0202> LIKE LINE OF GT_ALV_0202.

CASE I_UCOMM.
*   全選択
WHEN CNS_OK_CODE_SELECT_ALL.
CASE G_LIST_MODE.
WHEN CNS_LIST_MODE_TRANSMITTED.
LOOP AT GT_ALV_0201 ASSIGNING <FF_ALV_0201>.
<FF_ALV_0201>-CHKBOX = 'X'.
ENDLOOP.
WHEN CNS_LIST_MODE_RECEIVED.
LOOP AT GT_ALV_0202 ASSIGNING <FF_ALV_0202>.
<FF_ALV_0202>-CHKBOX = 'X'.
ENDLOOP.
ENDCASE.
*   全解除
WHEN CNS_OK_CODE_DESELECT_ALL.
CASE G_LIST_MODE.
WHEN CNS_LIST_MODE_TRANSMITTED.
LOOP AT GT_ALV_0201 ASSIGNING <FF_ALV_0201>.
<FF_ALV_0201>-CHKBOX = ' '.
ENDLOOP.
WHEN CNS_LIST_MODE_RECEIVED.
LOOP AT GT_ALV_0202 ASSIGNING <FF_ALV_0202>.
<FF_ALV_0202>-CHKBOX = ' '.
ENDLOOP.
ENDCASE.
ENDCASE.

CALL METHOD OBJ_GRID->REFRESH_TABLE_DISPLAY.
CALL METHOD CL_GUI_CFW=>FLUSH.

ENDFORM.                    " PROCESS_ALV_COMMAND_0200
*&---------------------------------------------------------------------*
*&      Form  LOCK_ZSD003_WITH_ID
*&---------------------------------------------------------------------*
*       受信ログデータロック
*----------------------------------------------------------------------*
*      -->IF_ALV_0201  受信ログデータ
*----------------------------------------------------------------------*
FORM LOCK_ZSD003_WITH_ID USING    IF_ALV_0201 TYPE TYP_ALV_0201.

CLEAR G_RC.
CALL FUNCTION 'ENQUEUE_EZ_ZSD003'
EXPORTING
SENDID         = IF_ALV_0201-SENDID
VBELN          = IF_ALV_0201-VBELN
POSNR          = IF_ALV_0201-POSNR
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
G_RC = CNS_RC_CODE_DB_ERROR.
*   テーブルの更新でエラーが発生しました
MESSAGE S639.
ENDIF.

ENDFORM.                    " LOCK_ZSD003_WITH_ID
*&---------------------------------------------------------------------*
*&      Form  UNLOCK_ZSD003_WITH_ID
*&---------------------------------------------------------------------*
*       受信ログデータロック解除
*----------------------------------------------------------------------*
*      -->IF_ALV_0201  受信ログデータ
*----------------------------------------------------------------------*
FORM UNLOCK_ZSD003_WITH_ID USING    IF_ALV_0201 TYPE TYP_ALV_0201.

CALL FUNCTION 'DEQUEUE_EZ_ZSD003'
EXPORTING
SENDID = IF_ALV_0201-SENDID
VBELN  = IF_ALV_0201-VBELN
POSNR  = IF_ALV_0201-POSNR.

ENDFORM.                    " UNLOCK_ZSD003_WITH_ID
*&---------------------------------------------------------------------*
*&      Form  LOCK_ZSD002_WITH_ID
*&---------------------------------------------------------------------*
*       送信ログデータロック
*----------------------------------------------------------------------*
*      -->IF_ALV_0202  送信ログデータ
*----------------------------------------------------------------------*
FORM LOCK_ZSD002_WITH_ID USING    IF_ALV_0202 TYPE TYP_ALV_0202.

CLEAR G_RC.
CALL FUNCTION 'ENQUEUE_EZ_ZSD002'
EXPORTING
SENDID         = IF_ALV_0202-SENDID
VBELN          = IF_ALV_0202-VBELN
POSNR          = IF_ALV_0202-POSNR
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
G_RC = CNS_RC_CODE_DB_ERROR.
MESSAGE S639.
ENDIF.

ENDFORM.                    " LOCK_ZSD002_WITH_ID
*&---------------------------------------------------------------------*
*&      Form  UNLOCK_ZSD002_WITH_ID
*&---------------------------------------------------------------------*
*       送信ログデータロック解除
*----------------------------------------------------------------------*
*      -->IF_ALV_0202  送信ログデータ
*----------------------------------------------------------------------*
FORM UNLOCK_ZSD002_WITH_ID USING    IF_ALV_0202 TYPE TYP_ALV_0202.

CALL FUNCTION 'DEQUEUE_EZ_ZSD002'
EXPORTING
SENDID = IF_ALV_0202-SENDID
VBELN  = IF_ALV_0202-VBELN
POSNR  = IF_ALV_0202-POSNR.

ENDFORM.                    " UNLOCK_ZSD002_WITH_ID
*&---------------------------------------------------------------------*
*&      Form  SET_T_ALV_0200
*&---------------------------------------------------------------------*
*       ALVデータ設定
*----------------------------------------------------------------------*
FORM SET_T_ALV_0200.

CASE G_LIST_MODE.
WHEN CNS_LIST_MODE_TRANSMITTED.
*     送信済リスト設定
PERFORM SET_T_ALV_0201.
WHEN CNS_LIST_MODE_RECEIVED.
*     受信済リスト設定
PERFORM SET_T_ALV_0202.
ENDCASE.

ENDFORM.                    " SET_T_ALV_0200
