***---------------------------------------------------------------------
***          (c)Copyright 1998 OptiSystem Solution                   ***
***---------------------------------------------------------------------
*----------------------------------------------------------------------*
*   INCLUDE ZSGRMPR   v3.0
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  PR_EXIT
*&---------------------------------------------------------------------*
FORM IO2_SCR_EXIT.
****
SET SCREEN 0.
LEAVE SCREEN.
*******
ENDFORM.                               " PI_EXIT
*&---------------------------------------------------------------------*
*&      Form  PR_PREP_ST
*&---------------------------------------------------------------------*
FORM IO1_BO_SCR1111.
*** prepare screen 1111
DATA: PRINV TYPE N, PRINP TYPE N.
*** 1th time ***
***** each time ***
CON_TIP11-CURRENT_LINE = 1.
STS-DNOW = SY-DATUM.  STS-TNOW = SY-TIMLO.
****
CASE STS-REG.
WHEN 'cp'.
YMA_SCREEN-TYPERG = TEXT-001.    "'Comparison Graph'.
PRINV = 0. PRINP = 1.
WHEN 'tg'.
YMA_SCREEN-TYPERG = TEXT-002.    "'Time Graph'.
PRINV = 1. PRINP = 0.
*  WHEN 'cr'.
*    YMA_SCREEN-TYPERG = TEXT-003.    "'Correlation'.
*    PRINV = 1. PRINP = 0.
*  WHEN 'ca'.
*    YMA_SCREEN-TYPERG = TEXT-010.    "'All Correlation'.
*    PRINV = 1. PRINP = 0.
WHEN OTHERS.
PRINV = 1. PRINP = 0.
ENDCASE.
****
LOOP AT SCREEN.
CASE SCREEN-GROUP4.                       "EW
WHEN 'CMP'. SCREEN-INVISIBLE = PRINV.   "EW
SCREEN-INPUT = PRINP.       "EW
MODIFY SCREEN.              "EW
* case screen-name.
*   when '%#AUTOTEXT024'. screen-invisible = prinv.
*   when '%#AUTOTEXT021'. screen-invisible = prinv.
*   when '%#AUTOTEXT022'. screen-invisible = prinv.
*   when '%#AUTOTEXT026'. screen-invisible = prinv.
*   when '%#AUTOTEXT028'. screen-invisible = prinv.
*   when '%#AUTOTEXT029'. screen-invisible = prinv.
*   when 'STS-D12'. screen-invisible = prinv. screen-input = prinp.
*   when 'STS-T12'. screen-invisible = prinv. screen-input = prinp.
*   when 'STS-D22'. screen-invisible = prinv. screen-input = prinp.
*   when 'STS-T22'. screen-invisible = prinv. screen-input = prinp.
ENDCASE.
* modify screen.
ENDLOOP.
***** tb_scr *****
STS-KG = 0.  CON_TIP11-LINES = 0.
****
LOOP AT TB_SCR.
ADD 1 TO CON_TIP11-LINES.
IF TB_SCR-SG_AC = ' '.CONTINUE. ENDIF.
ADD 1 TO STS-KG.
***  condense tb_ip-ro.
**    IF     TB_IP-CR-RO =  2.
**      TB_IP-CR-ROTXT = ' Basis'.
**    ELSEIF TB_IP-CR-RO = -2.
**      TB_IP-CR-ROTXT = '<-N/A->'.
**    ELSEIF TB_IP-CR-RO = -3.
**      TB_IP-CR-ROTXT = '      '.
**    ENDIF.
*  APPEND TB_SCR.
ENDLOOP.
*******
ENDFORM.                               " AI_PREP_ST
*&---------------------------------------------------------------------*
*&      Form  PR_ANAL_TU
*&---------------------------------------------------------------------*
form pr_anal_tb_un.
*** analisys of parameter unit
DATA: PR. PR = ' '.
refresh tb_un.
loop at tb_ip where dop-sg_ac <> ' '.
TB_UN-U     = TB_IP-PRM-UNIT. COLLECT TB_UN.
PR = 'x'.
ENDLOOP.
IF PR = ' '. EXIT. ENDIF.

refresh tb_buf.
loop at tb_un.
write sy-tabix to tb_buf-objtype.
shift tb_buf-objtype left  deleting leading  ' '.
tb_buf-objtext = tb_un-u.
append tb_buf.
ENDLOOP.

sort tb_buf by objtext.

CALL FUNCTION 'Z_ZSGR_POPUP_TBL'
EXPORTING
TOP                 = 1
LEFT                = 1
BOTTOM              = 11
RIGHT               = 40
PTIT                = 'unit'
importing
objtype             = g_robj
tables
objectypes          = tb_buf
EXCEPTIONS
OBECJTYPES_IS_EMPTY = 1
OTHERS              = 2.
*if g_robj = ' '. sts-prs = 's'. exit. endif.
if g_robj = ' '. exit. endif.

sts-prs = 'x'.
read table tb_buf with key objtype = g_robj.
loop at tb_ip where prm-unit <> tb_buf-objtext and dop-sg_ac <> ' '.
tb_ip-dop-sg_ac = ' '.         modify tb_ip.
sts-kg = sts-kg - 1.  sts-prs = 's'.
ENDLOOP.

endform.                               " AI_ANAL_tb_un
*&---------------------------------------------------------------------*
*&      Form  PR_TI_XO
*&---------------------------------------------------------------------*
FORM MM_TI_XOD USING P_RCODE.
DATA: X.
*** processing Vi
CASE P_RCODE.
WHEN 'BD'.
LOOP AT TB_SCR WHERE SG_AC = ' '.
DELETE TB_SCR.
ENDLOOP.
EXIT.
WHEN 'BR'.  PERFORM MM_FULL_SCR.
WHEN 'BX'.  X = 'x'.
WHEN 'BO'.  X = ' '.
ENDCASE.
****
LOOP AT TB_SCR WHERE SG_AC <> X.
TB_SCR-SG_AC = X. MODIFY TB_SCR.
ENDLOOP.
ENDFORM.                               " AI_TI_XO
*&---------------------------------------------------------------------*
*&      Form  PR_SORT_CORR
*&---------------------------------------------------------------------*
FORM PR_SORT_CORR.
*** sort of corralation
loop at tb_ip.
CHECK TB_IP-CR-RO >= -1.
TB_IP-CR-RO = ABS( TB_IP-CR-RO ).
modify tb_ip.
ENDLOOP.
SORT TB_IP BY CR-RO DESCENDING.

ENDFORM.                               " PR_SORT_CORR
*&---------------------------------------------------------------------*
*&      Form  PR_INT_IRA
*&---------------------------------------------------------------------*
FORM PR_INT_IRA.
*** define intervals for main screen
DATA: KK LIKE SY-TABIX, KF LIKE SY-TABIX.
DATA: LI LIKE YTR_WORK-NO_CYCLE, RI TYPE I,
"ri like YTR_WORK-no_cycle,
RIF LIKE YTR_WORK-NO_CYCLE,  RIT LIKE YTR_WORK-NO_CYCLE.
****
KK = 0.
sts-dfrom = sts-dto = st_dii-rdate = sts-dira.
sts-tto = st_dii-rtime = sts-tira.
sts-ito = sts-iir.
****
ri = sts-iir - 40.
if ri > 0.
sts-ifr = ri.
else.
sts-ifr = 1.
ENDIF.
****
st_dii-no_cycle = sts-ifr.
CALL FUNCTION 'Y_MA_ZS_INTERVAL'
exporting mode = 'it' si = st_dii
importing             so = st_dii
EXCEPTIONS EMPTY_IN_YTR_INTERV    = 1
IT_IS_LAST_INTERVAL  = 2
IT_IS_FIRST_INTERVAL = 3
OTHERS               = 4.
if sy-subrc <> 0. sts-prs = 'e'.  exit. endif.
*****
sts-tfrom = st_dii-rtime.
****
EXIT.                                "!!!!!!!!!!!!!!!!!!!!!!!!!!!
*****
*   RI = st_dii-NO_CYCLE - sts-IIR.
*   IF RI > 20. RIT = sts-IIR + RI.
*   ELSE.       RIT = st_dii-NO_CYCLE.
*   ENDIF.
*   RI = RIT - 40.
*   IF RI > 0. RIF = RI.
*   ELSE.      RIF = 1.
*   ENDIF.
*****
*   sts-dfrom = sts-dira.   sts-tfrom = ' '.   sts-ifr = rif.
*   sts-dto   = sts-dira.   sts-tto   = ' '.   sts-ito = rit.
*****
*   exit.
*endif.
***** forward *****
*  KF = 0.
*  st_dii-RDATE    = sts-DIRA.
*  st_dii-NO_CYCLE = sts-IIR.
*  CALL FUNCTION 'Y_MA_ZS_INTERVAL'
*       EXPORTING MODE = 'it' SI = st_dii
*       IMPORTING             SO = st_dii
*       EXCEPTIONS EMPTY_IN_YTR_INTERV    = 1
*                  IT_IS_LAST_INTERVAL  = 2
*                  IT_IS_FIRST_INTERVAL = 3
*                  OTHERS               = 4.
*    IF SY-SUBRC <> 0. EXIT. ENDIF.
****** loop *****
*  DO C_KK_CORR_IRA TIMES.
*  CALL FUNCTION 'Y_MA_ZS_INTERVAL'
*       EXPORTING MODE = 'ni' SI = st_dii
*       IMPORTING             SO = st_dii
*       EXCEPTIONS EMPTY_IN_YTR_INTERV    = 1
*                  IT_IS_LAST_INTERVAL  = 2
*                  IT_IS_FIRST_INTERVAL = 3
*                  OTHERS               = 4.
*    IF SY-SUBRC <> 0. EXIT. ENDIF.
*    KF = SY-INDEX.
*  ENDDO.
*  sts-DTO   = st_dii-RDATE.      sts-TTO   = st_dii-RTIME.
*  KK = 2 * C_KK_CORR_IRA - KF.
****** back *****
*  st_dii-RDATE    = sts-DIRA.
*  st_dii-NO_CYCLE = sts-IIR.
****
*  DO KK TIMES.
*  CALL FUNCTION 'Y_MA_ZS_INTERVAL'
*       EXPORTING MODE = 'pi' SI = st_dii
*       IMPORTING             SO = st_dii
*       EXCEPTIONS EMPTY_IN_YTR_INTERV    = 1
*                  IT_IS_LAST_INTERVAL  = 2
*                  IT_IS_FIRST_INTERVAL = 3
*                  OTHERS               = 4.
*    IF SY-SUBRC <> 0. EXIT. ENDIF.
*  ENDDO.
*  sts-DFROM = st_dii-RDATE.  sts-TFROM = st_dii-RTIME.
ENDFORM.                               " PR_INT_IRA
*&---------------------------------------------------------------------*
*&      Form  PR_PRINT_SCR
*&---------------------------------------------------------------------*
FORM PR_PRINT_SCR.
*** not active
DATA: ZPRPR VALUE 'y'.
****
IF ZPRPR = 'y'. NEW-PAGE PRINT ON. ENDIF.
***
WRITE: / '============= screen -- YTRZM000 ========='.
**** str 1 ****
WRITE: / 'PATROL for R/3 - Graphs', (16)YMA_SCREEN-TYPERG,
'Current_Time', sts-dnow, sts-tnow.
**** str 2 ****
WRITE: / '----------------------------------------------------------'.
**** str 3 ****
write: / 'Time'(011), 'From'(012), sts-dfrom, ' ', sts-tfrom.
write:          40 'Comparison', sts-d12,' ',  sts-t12.
**** str 4 ****
write: / 'Range ', 'To   ', sts-dto,   ' ', sts-tto.
write:          40 'With      ', sts-d22,' ',  sts-t22.
**** str 5 ****
WRITE: / '----------------------------------------------------------'.
**** tip *****
DATA: NFROM TYPE I, NTO TYPE I.
nfrom = sts-ltop.  nto = sts-ltop +  sts-lines - 1.
LOOP AT TB_IP FROM NFROM TO NTO.
*    WRITE: / TB_IP-dop-sg_ac, (11)TB_IP-SNAM,
*                                         (8)TB_IP-CNAM, (7)TB_IP-CVAL,
*             (32)TB_IP-PTXT, (7)TB_IP-UNIT, (7)TB_IP-ROTXT.
ENDLOOP.
*****
WRITE: / '----------------------------------------------------------'.
IF ZPRPR = 'y'. NEW-PAGE PRINT OFF. ENDIF.
*******
ENDFORM.                               " PR_PRINT_SCR
