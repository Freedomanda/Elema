*&---------------------------------------------------------------------*
*& Report   ZYTD6016
*&
*&---------------------------------------------------------------------*
*&  機能     ： 得意先マスタテキスト更新
*&              (DMW2424)
*&  作成日   ： 2010/12/16
*&  作成者   ： DMK 加治佐
*&  変更履歴 ：
*&  変更内容 ：
* [改定履歴]
*  2012/08/14   ISID                  ES-UP
*  2014/08/29   ISID11                コードページを"UTF-8"に修正
*  2015/02/04   ISID11                コードページ処理の再修正
*  2015/03/10   ISID13                グローバル対応を実施する
*                                     得意先マスタ-一般データに加え、
*                                     得意先マスタ-会社・販売データなど
*                                     更新できるようにする
*  2016/06/11   ISID18                文字コード制御追加
*  2015/08/10   ISID21                得意先品目情報マスタデータの
*                                     ロングテキストも更新
*&---------------------------------------------------------------------*
REPORT ZYTD6016  MESSAGE-ID Y1 LINE-SIZE 255.
*                 NO STANDARD PAGE HEADING.
*----------------------------------------------------------------------*
*  型定義
*----------------------------------------------------------------------*
TABLES:TTXID, "テキストID検索ヘルプ用
**** START ADD 2015/03/10 ISID13 ****
LFA1,  "仕入先マスタ
LFB1,  "仕入先マスタ (会社コ−ド)
MVKE,  "品目の販売データ
EINE.  "購買情報: 購買組織データ
**** END ADD 2015/03/10 ISID13 ****

* 入力ファイル用
TYPES:BEGIN OF T_INFILE,
FNAME(10)   TYPE C, "テキスト名
FID(4)      TYPE C, "テキストID
FLINE(3)    TYPE C, "テキスト行数
TDLINE(134) TYPE C, "テキスト内容(桁チェック用)
END OF T_INFILE.

**** START ADD 2015/03/10 ISID13 ****
* 入力ファイル用:KNB1、KNVV、LFB1、LFM1
TYPES:BEGIN OF T_INFILE_KNLF,
FNAME(10)   TYPE C, "テキスト名
FNAME1(4)   TYPE C, "テキスト名1
FID(4)      TYPE C, "テキストID
FLINE(3)    TYPE C, "テキスト行数
TDLINE(134) TYPE C, "テキスト内容(桁チェック用)
END OF T_INFILE_KNLF.

*TABLE:入力ファイル用
TYPES TYP_TD_KNLF TYPE STANDARD TABLE OF T_INFILE_KNLF.

* 入力ファイル用:EINE
TYPES:BEGIN OF T_INFILE_EINE,
FNAME(10)   TYPE C, "テキスト名
FNAME1(4)   TYPE C, "テキスト名1
FNAME2(1)   TYPE C, "テキスト名2
FNAME3(4)   TYPE C, "テキスト名3
FID(4)      TYPE C, "テキストID
FLINE(3)    TYPE C, "テキスト行数
TDLINE(134) TYPE C, "テキスト内容(桁チェック用)
END OF T_INFILE_EINE.

*TABLE:入力ファイル用
TYPES TYP_TD_FEINE  TYPE STANDARD TABLE OF T_INFILE_EINE.

* 入力ファイル用:MVKE
TYPES:BEGIN OF T_INFILE_MVKE,
FNAME(18)   TYPE C, "テキスト名
FNAME1(4)   TYPE C, "テキスト名1
FNAME2(2)   TYPE C, "テキスト名2
FID(4)      TYPE C, "テキストID
FLINE(3)    TYPE C, "テキスト行数
TDLINE(134) TYPE C, "テキスト内容(桁チェック用)
END OF T_INFILE_MVKE.

*TABLE:入力ファイル用
TYPES TYP_TD_FMVKE  TYPE STANDARD TABLE OF T_INFILE_MVKE.
**** END ADD 2015/03/10 ISID13 ****

**** START ADD 2015/08/10 ISID21 ****
* 入力ファイル用:KNMT
TYPES:BEGIN OF T_INFILE_KNMT,
FNAME(10)   TYPE C, "テキスト名
FNAME1(4)   TYPE C, "テキスト名1
FNAME2(2)   TYPE C, "テキスト名2
FNAME3(18)  TYPE C, "テキスト名3
FID(4)      TYPE C, "テキストID
FLINE(3)    TYPE C, "テキスト行数
TDLINE(134) TYPE C, "テキスト内容(桁チェック用)
END OF T_INFILE_KNMT.

*TABLE:入力ファイル用
TYPES TYP_TD_FKNMT  TYPE STANDARD TABLE OF T_INFILE_KNMT.

**** END ADD 2015/08/10 ISID21 ****

* ダウンロードファイル用
TYPES:BEGIN OF T_DFILE,
* Mod ES-UP 2012/10/25 -->
*      LTEXT(1000) TYPE C,
LTEXT TYPE STRING,
* Mod ES-UP 2012/10/25 <--
END OF T_DFILE.
* エラーデータ用
TYPES:BEGIN OF T_EDATA,
FNAME(10)   TYPE C, "テキスト名
FID(4)      TYPE C, "テキストID
TDLINE(200) TYPE C, "テキスト内容
END OF T_EDATA.

**** START ADD 2015/03/10 ISID13 ****
* エラーデータ用:KNB1、KNVV、LFB1、LFM1
TYPES:BEGIN OF T_EDATA_KNLF,
FNAME(10)   TYPE C, "テキスト名
FNAME1(4)   TYPE C, "テキスト名1
FID(4)      TYPE C, "テキストID
TDLINE(200) TYPE C, "テキスト内容
END OF T_EDATA_KNLF.

* エラーデータ用:KNB1、KNVV、LFB1、LFM1
TYPES TYP_TD_EKNLF  TYPE STANDARD TABLE OF T_EDATA_KNLF.

* エラーデータ用:EINE
TYPES:BEGIN OF T_EDATA_EINE,
FNAME(10)   TYPE C, "テキスト名
FNAME1(4)   TYPE C, "テキスト名1
FNAME2(1)   TYPE C, "テキスト名2
FNAME3(4)   TYPE C, "テキスト名3
FID(4)      TYPE C, "テキストID
TDLINE(200) TYPE C, "テキスト内容
END OF T_EDATA_EINE.

* エラーデータ用:EINE
TYPES TYP_TD_DEINE  TYPE STANDARD TABLE OF T_EDATA_EINE.

**** START ADD 2015/08/10 ISID21 ****
* エラーデータ用:KNMT
TYPES:BEGIN OF T_EDATA_KNMT,
FNAME(10)   TYPE C, "テキスト名
FNAME1(4)   TYPE C, "テキスト名1
FNAME2(2)   TYPE C, "テキスト名2
FNAME3(18)   TYPE C, "テキスト名3
FID(4)      TYPE C, "テキストID
TDLINE(200) TYPE C, "テキスト内容
END OF T_EDATA_KNMT.

* エラーデータ用:KNMT
TYPES TYP_TD_DKNMT  TYPE STANDARD TABLE OF T_EDATA_KNMT.
**** END ADD 2015/08/10 ISID21 ****

* エラーデータ用:MVKE
TYPES:BEGIN OF T_EDATA_MVKE,
FNAME(18)   TYPE C, "テキスト名
FNAME1(4)   TYPE C, "テキスト名1
FNAME2(2)   TYPE C, "テキスト名2
FID(4)      TYPE C, "テキストID
TDLINE(200) TYPE C, "テキスト内容
END OF T_EDATA_MVKE.

* エラーデータ用:MVKE
TYPES TYP_TD_DMVKE  TYPE STANDARD TABLE OF T_EDATA_MVKE.
**** END ADD 2015/03/10 ISID13 ****

* 処理対象得意先格納用
TYPES:BEGIN OF T_KNA1,
KUNNR TYPE KNA1-KUNNR,
END OF T_KNA1.

* 処理対象テキストID格納用
TYPES:BEGIN OF T_TTXID,
TDID TYPE TTXID-TDID,
END OF T_TTXID.

**** START ADD 2015/03/10 ISID13 ****
* 処理対象テキストID格納用
TYPES:BEGIN OF T_TTXIDTMP,
TDOBJECT TYPE TTXID-TDOBJECT,
TDID     TYPE TTXID-TDID,
TDTEXT   TYPE TTXOT-TDTEXT,
END OF T_TTXIDTMP.

* 会社コード
TYPES:BEGIN OF T_BUKRS,
BUKRS      TYPE T001-BUKRS,    "会社コード
END OF T_BUKRS.

* 会社コード
TYPES:TYP_RD_BUKRS TYPE RANGE OF T001-BUKRS.

* 得意先マスタ（会社コード）
TYPES:BEGIN OF T_KNB1,
KUNNR      TYPE KNB1-KUNNR,    "得意先コード
BUKRS      TYPE KNB1-BUKRS,    "会社コード
END OF T_KNB1.

*TABLE:得意先マスタ（会社コード）
TYPES TYP_TD_KNB1  TYPE STANDARD TABLE OF T_KNB1.

* 販売組織
TYPES:BEGIN OF T_TVKO,
VKORG      TYPE KNVV-VKORG,    "販売組織
BUKRS      TYPE TVKO-BUKRS,    "会社コード
END OF T_TVKO.

* 得意先マスタ: 販売データ
TYPES:BEGIN OF T_KNVV,
KUNNR      TYPE KNVV-KUNNR,    "得意先コード
VKORG      TYPE KNVV-VKORG,    "販売組織
END OF T_KNVV.

*TABLE:得意先マスタ: 販売データ
TYPES TYP_TD_KNVV  TYPE STANDARD TABLE OF T_KNVV.

* 仕入先マスタ (一般セクション)
TYPES:BEGIN OF T_LFA1,
LIFNR      TYPE LFA1-LIFNR,    "仕入先コード
END OF T_LFA1.

*TABLE:仕入先マスタ (一般セクション)
TYPES TYP_TD_LFA1  TYPE STANDARD TABLE OF T_LFA1.

* 仕入先マスタ (会社コ−ド)
TYPES:BEGIN OF T_LFB1,
LIFNR      TYPE LFB1-LIFNR,    "仕入先コード
BUKRS      TYPE LFB1-BUKRS,    "会社コード
END OF T_LFB1.

*TABLE:仕入先マスタ (会社コ−ド)
TYPES TYP_TD_LFB1  TYPE STANDARD TABLE OF T_LFB1.

* 仕入先マスタ購買組織データ
TYPES:BEGIN OF T_LFM1,
LIFNR      TYPE LFM1-LIFNR,    "仕入先コード
EKORG      TYPE LFM1-EKORG,    "購買組織
END OF T_LFM1.

*TABLE:仕入先マスタ購買組織データ
TYPES TYP_TD_LFM1  TYPE STANDARD TABLE OF T_LFM1.

* 購買組織
TYPES:BEGIN OF T_T024E,
EKORG      TYPE T024E-EKORG,   "購買組織
BUKRS      TYPE T024E-BUKRS,   "会社コード
END OF T_T024E.

* 購買情報: 一般データ
TYPES:BEGIN OF T_EINA,
INFNR      TYPE EINA-INFNR,    "仕入先コード
END OF T_EINA.

*TABLE:購買情報: 一般データ
TYPES TYP_TD_EINA  TYPE STANDARD TABLE OF T_EINA.

* 購買情報: 購買組織データ
TYPES:BEGIN OF T_EINE,
INFNR      TYPE EINE-INFNR,    "購買情報番号
EKORG      TYPE EINE-EKORG,    "購買組織
ESOKZ      TYPE EINE-ESOKZ,    "購買情報カテゴリ
WERKS      TYPE EINE-WERKS,    "プラント
END OF T_EINE.

*TABLE:購買情報: 購買組織データ
TYPES TYP_TD_EINE  TYPE STANDARD TABLE OF T_EINE.

* 品目の販売データ
TYPES:BEGIN OF T_MVKE,
MATNR      TYPE MVKE-MATNR,    "品目コード
VKORG      TYPE MVKE-VKORG,    "販売組織
VTWEG      TYPE MVKE-VTWEG,    "流通チャネル
END OF T_MVKE.

*TABLE:品目の販売データ
TYPES TYP_TD_MVKE  TYPE STANDARD TABLE OF T_MVKE.

*ダウンロードファイル用
TYPES TYP_TD_DFILE TYPE STANDARD TABLE OF T_DFILE.

* アプリケーションオブジェクト
TYPES:TYP_RD_TDOBJECT   TYPE RANGE OF TTXID-TDOBJECT.
**** END ADD 2015/03/10 ISID13 ****

**** START ADD 2015/08/10 ISID21 ****
TYPES:BEGIN OF T_KNMT,
KUNNR TYPE KNMT-KUNNR,         "得意先コード
VKORG TYPE KNMT-VKORG,         "販売組織
VTWEG TYPE KNMT-VTWEG,         "流通チャネル
MATNR TYPE KNMT-MATNR,         "品目コード
END OF T_KNMT.
TYPES TYP_TD_KNMT TYPE STANDARD TABLE OF T_KNMT.
**** END ADD 2015/08/10 ISID21 ****

*----------------------------------------------------------------------*
*  内部テーブル・構造定義
*----------------------------------------------------------------------*
* ファイル用
DATA: IT_FILE           TYPE STANDARD TABLE OF T_INFILE,
WA_FILE           TYPE T_INFILE.

* 出力ファイル用
DATA: IT_DFILE          TYPE STANDARD TABLE OF T_DFILE,
WA_DFILE          TYPE T_DFILE.

* エラーデータ用
DATA: IT_EDATA          TYPE STANDARD TABLE OF T_EDATA,
WA_EDATA          TYPE T_EDATA.

* 処理対象の得意先格納用
**** START UPD 2015/03/10 ISID13 ****
*DATA: IT_KNA1           TYPE HASHED TABLE OF T_KNA1
*                        WITH UNIQUE KEY KUNNR,
DATA: IT_KNA1           TYPE STANDARD TABLE OF T_KNA1,
**** END UPD 2015/03/10 ISID13 ****
WA_KNA1           TYPE T_KNA1.

* 処理対象のテキストID格納用
DATA: IT_TTXID          TYPE STANDARD TABLE OF T_TTXID,
WA_TTXID          TYPE T_TTXID.

* CREATE_TEXT用
DATA: IT_TLINE          TYPE STANDARD TABLE OF TLINE,
WA_TLINE          TYPE TLINE,
WA_THEAD          TYPE THEAD.

**** START ADD 2015/03/10 ISID13 ****
* エラーデータ用:KNB1、KNVV、LFB1、LFM1
DATA: IT_EDATA_KNLF     TYPE TYP_TD_EKNLF.

* エラーデータ用:EINE
DATA: IT_EDATA_EINE     TYPE TYP_TD_DEINE.

**** START ADD 2015/08/10 ISID21 ****
* エラーデータ用:EINE
DATA: IT_EDATA_KNMT     TYPE TYP_TD_DKNMT.
**** END ADD 2015/08/10 ISID21 ****

* エラーデータ用:MVKE
DATA: IT_EDATA_MVKE     TYPE TYP_TD_DMVKE.

* ファイル用::KNB1、KNVV、LFB1、LFM1
DATA: IT_FILE_KNLF      TYPE TYP_TD_KNLF.

* ファイル用:EINE
DATA: IT_FILE_EINE      TYPE TYP_TD_FEINE.

**** START ADD 2015/08/10 ISID21 ****
* ファイル用:EINE
DATA: IT_FILE_KNMT      TYPE TYP_TD_FKNMT.
**** END ADD 2015/08/10 ISID21 ****

* ファイル用:MVKE
DATA: IT_FILE_MVKE      TYPE TYP_TD_FMVKE.
* ITAB:対象会社コード
DATA: RD_BUKRS          TYPE TYP_RD_BUKRS.

* ITAB:対象プラント
DATA: RD_WERKS          TYPE RANGE_T_WERKS.

TYPES:TYP_RH_BUKRS      LIKE LINE OF RD_BUKRS.

**** END ADD 2015/03/10 ISID13 ****
*----------------------------------------------------------------------*
*  変数定義
*----------------------------------------------------------------------*
DATA:V_LINECNT(3)       TYPE N,       "テーブル行数
V_M_CNT            TYPE I,       "得意先/テキストIDの組合数
V_ERR_NAME_FLG(1)  TYPE C,       "エラー判定(得意先単位1)
"1:マスタなし 2:ロックエラー
V_ERR_ID_FLG(1)    TYPE C,       "エラー判定(テキストID単位)
V_ETEXT(200)       TYPE C,       "エラーテキスト
* Mod ES-UP 2012/10/25 -->
*     V_LONGTXT(1000)    TYPE C,       "ファイル編集領域
V_LONGTXT          TYPE STRING,       "ファイル編集領域
* Mod ES-UP 2012/10/25 <--
V_LOCAL(1)         TYPE C,       "ローカル限定F4ヘルプ処理用
V_DOWN(1)          TYPE C.       "ローカル限定F4ヘルプ処理用

* READ_TEXT文字化対策用
DATA:V_STEXT            TYPE STRING,
IT_L_TEXT          LIKE TABLE OF V_STEXT.

*----------------------------------------------------------------------*
*  定数定義
*----------------------------------------------------------------------*
CONSTANTS:
CNS_LOCAL(7)          TYPE C VALUE 'R_LOCAL',
CNS_DOWN(6)           TYPE C VALUE 'R_DOWN',
CNS_ON(1)             TYPE C VALUE 'X',
**** START ADD 2014/09/01 ISID11 ****
**** START DEL 2015/02/04 ISID11 ****
**** START ADD 2015/06/11 ISID18 ****
CNS_UTF TYPE STRING VALUE 'UTF-8',
CNS_JIS TYPE STRING VALUE 'shift_jis',
**** END ADD 2015/06/11 ISID18 ****
**** END DEL 2015/02/04 ISID11 ****
**** END ADD 2014/09/01 ISID11 ****
* Mod ES-UP 2012/08/21 -->
*  CNS_TAB(1)            TYPE X VALUE '09',
CNS_TAB               TYPE STRING VALUE CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB,
* Mod ES-UP 2012/08/21 <--
CNS_ASTER(1)          TYPE C VALUE '*',
**** START DEL 2015/03/10 ISID13 ****
*  CNS_FILTER(21)        TYPE C VALUE '全ファイル (*.*)|*.*|',
**** END DEL 2015/03/10 ISID13 ****
**** START ADD 2015/03/10 ISID13 ****
CNS_RNG_SIGN          TYPE DDSIGN   VALUE 'I',
CNS_RNG_OPTION        TYPE DDOPTION VALUE 'EQ',
CNS_VALUE_TWO         TYPE I        VALUE '2',
CNS_VALUE_THREE       TYPE I        VALUE '3',
CNS_VTWEG             TYPE VTWEG    VALUE '10',
CNS_SPART             TYPE SPART    VALUE '10',
CNS_KNA1              TYPE TABNAME  VALUE 'KNA1',
CNS_KNB1              TYPE TABNAME  VALUE 'KNB1',
CNS_KNVV              TYPE TABNAME  VALUE 'KNVV',
CNS_LFA1              TYPE TABNAME  VALUE 'LFA1',
CNS_LFB1              TYPE TABNAME  VALUE 'LFB1',
CNS_LFM1              TYPE TABNAME  VALUE 'LFM1',
CNS_EINA              TYPE TABNAME  VALUE 'EINA',
CNS_EINE              TYPE TABNAME  VALUE 'EINE',
**** START ADD 2015/08/10 ISID21 ****
CNS_KNMT              TYPE TABNAME  VALUE 'KNMT',
**** END ADD 2015/08/10 ISID21 ****
CNS_MVKE              TYPE TABNAME  VALUE 'MVKE'.
**** END ADD 2015/03/10 ISID13 ****

*----------------------------------------------------------------------*
*  選択画面定義
*----------------------------------------------------------------------*
*--枠１ ファイル系
SELECTION-SCREEN:BEGIN OF BLOCK B01 WITH FRAME."TITLE なし.
SELECTION-SCREEN BEGIN OF LINE.
*  ローカル
SELECTION-SCREEN POSITION 1.
PARAMETERS R_LOCAL  RADIOBUTTON GROUP RD01 DEFAULT 'X'.
SELECTION-SCREEN POSITION 4.
SELECTION-SCREEN COMMENT (12) TEXT-001.
*  サーバ
PARAMETERS R_SERVER RADIOBUTTON GROUP RD01.
SELECTION-SCREEN POSITION 20.
SELECTION-SCREEN COMMENT (12) TEXT-002.
SELECTION-SCREEN END OF LINE.
*  入力ファイル
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN POSITION 1.
SELECTION-SCREEN COMMENT (12) TEXT-005.
SELECTION-SCREEN POSITION 14.
PARAMETERS P_FILE(128) TYPE C OBLIGATORY.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN:END OF BLOCK B01.

*--枠２ 処理選択（アップ or ダウン)
SELECTION-SCREEN:BEGIN OF BLOCK B02 WITH FRAME."TITLE なし.
SELECTION-SCREEN BEGIN OF LINE.
*  ダウンロード
SELECTION-SCREEN POSITION 1.
PARAMETERS R_DOWN  RADIOBUTTON GROUP RD02  DEFAULT 'X'.
SELECTION-SCREEN POSITION 4.
SELECTION-SCREEN COMMENT (12) TEXT-003.
*  アップロード
PARAMETERS R_UP    RADIOBUTTON GROUP RD02.
SELECTION-SCREEN POSITION 20.
SELECTION-SCREEN COMMENT (12) TEXT-004.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN:END OF BLOCK B02.

*--枠３ 選択条件
SELECTION-SCREEN:BEGIN OF BLOCK B03 WITH FRAME."TITLE なし.
*  テキストオブジェクト
**** START UPD 2015/03/10 ISID13 ****
*PARAMETERS P_OBJ    TYPE TTXID-TDOBJECT DEFAULT 'KNA1' OBLIGATORY.
PARAMETERS P_OBJ    TYPE TTXID-TDOBJECT OBLIGATORY.
**** END UPD 2015/03/10 ISID13 ****
*  言語
**** START UPD 2015/03/10 ISID13 ****
*PARAMETERS P_LANG   TYPE THEAD-TDSPRAS DEFAULT 'JA' OBLIGATORY.
PARAMETERS P_LANG   TYPE THEAD-TDSPRAS DEFAULT SY-LANGU OBLIGATORY.
**** END UPD 2015/03/10 ISID13 ****
*  チェックのみ（アップロード用）
PARAMETERS P_CHK    TYPE C AS CHECKBOX  DEFAULT 'X'.
*  得意先コード（ダウンロード用）
SELECT-OPTIONS S_KUNNR FOR WA_KNA1-KUNNR.
**** START ADD 2015/03/10 ISID13 ****
*  仕入先コード
SELECT-OPTIONS S_LIFNR FOR LFA1-LIFNR.
*  会社コード
SELECT-OPTIONS S_BUKRS FOR LFB1-BUKRS.
*  品目コード
SELECT-OPTIONS S_MATNR FOR MVKE-MATNR.
*  販売組織
SELECT-OPTIONS S_VKORG FOR MVKE-VKORG.
*  流通チャネル
SELECT-OPTIONS S_VTWEG FOR MVKE-VTWEG.
*  購買組織
SELECT-OPTIONS S_EKORG FOR EINE-EKORG.
*  プラント
SELECT-OPTIONS S_WERKS FOR EINE-WERKS.
*  購買情報
SELECT-OPTIONS S_INFNR FOR EINE-INFNR.
*  カテゴリ
SELECT-OPTIONS S_ESOKZ FOR EINE-ESOKZ.
**** END ADD 2015/03/10 ISID13 ****
*  テキストID（ダウンロード用）
SELECT-OPTIONS S_TDID   FOR TTXID-TDID NO INTERVALS.
SELECTION-SCREEN:END OF BLOCK B03.
**** START ADD 2015/06/11 ISID18 ****
SELECTION-SCREEN BEGIN OF BLOCK B04 WITH FRAME.
SELECTION-SCREEN BEGIN OF LINE.
PARAMETERS R_JIS RADIOBUTTON GROUP RD03 DEFAULT 'X'.
SELECTION-SCREEN COMMENT 4(10) TEXT-C01 FOR FIELD R_JIS.
SELECTION-SCREEN POSITION 17.
PARAMETERS R_UTF RADIOBUTTON GROUP RD03.
SELECTION-SCREEN COMMENT 20(10) TEXT-C02 FOR FIELD R_UTF.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK B04.
**** END ADD 2015/06/11 ISID18 ****
*----------------------------------------------------------------------*
*  AT SELECTION-SCREEN ON VALUE-REQUEST
*----------------------------------------------------------------------*
* 入力ファイル
AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_FILE.

* 選択画面最新値の取得
PERFORM DYNP_VALUES_READ.
IF V_DOWN = CNS_ON.
* ファイル保存ダイアログ表示
PERFORM FILE_SAVE_DIALOG CHANGING P_FILE.
ELSE.
* ファイル選択ダイアログ表示
PERFORM FILE_OPEN_DIALOG CHANGING P_FILE.
ENDIF.

**** START ADD 2015/03/10 ISID13 ****
AT SELECTION-SCREEN ON VALUE-REQUEST FOR S_TDID-LOW.
* テキストID検索へループ
PERFORM TDID_F4_HELP.

AT SELECTION-SCREEN.
* ダウンロード
IF R_DOWN = CNS_ON.
*   入力チェック
*   会社コードとプラント
PERFORM CHECK_INPUT CHANGING RD_BUKRS
RD_WERKS.
ENDIF.
**** END ADD 2015/03/10 ISID13 ****
*----------------------------------------------------------------------*
*  START-OF-SELECTION
*----------------------------------------------------------------------*
START-OF-SELECTION.
PERFORM INTI_PROC.
* ダウンロード処理
IF R_DOWN = CNS_ON.
PERFORM DOWN_PROC.
* アップロード処理
ELSE.
PERFORM UP_PROC.
ENDIF.


*&---------------------------------------------------------------------*
*&      Form  DYNP_VALUES_READ
*&---------------------------------------------------------------------*
*       選択画面最新値の取得
*----------------------------------------------------------------------*
FORM DYNP_VALUES_READ.

DATA : LV_DYNAME  TYPE D020S-PROG,
LV_DYNUMB  TYPE D020S-DNUM,
LT_FIELD   TYPE STANDARD TABLE OF DYNPREAD,
LW_FIELD   TYPE DYNPREAD.

CLEAR:V_LOCAL,V_DOWN.

LV_DYNAME = SY-REPID.
LV_DYNUMB = SY-DYNNR.

LW_FIELD-FIELDNAME = CNS_LOCAL.  "R_LOCAL
LW_FIELD-STEPL     = 0.
APPEND LW_FIELD TO LT_FIELD.

LW_FIELD-FIELDNAME = CNS_DOWN.  "R_DOWN
LW_FIELD-STEPL     = 0.
APPEND LW_FIELD TO LT_FIELD.

CALL FUNCTION 'DYNP_VALUES_READ'
EXPORTING
DYNAME               = LV_DYNAME
DYNUMB               = LV_DYNUMB
TABLES
DYNPFIELDS           = LT_FIELD
EXCEPTIONS
INVALID_ABAPWORKAREA = 1
INVALID_DYNPROFIELD  = 2
INVALID_DYNPRONAME   = 3
INVALID_DYNPRONUMMER = 4
INVALID_REQUEST      = 5
NO_FIELDDESCRIPTION  = 6
INVALID_PARAMETER    = 7
UNDEFIND_ERROR       = 8
DOUBLE_CONVERSION    = 9
STEPL_NOT_FOUND      = 10
OTHERS               = 11.

IF SY-SUBRC = 0.
CLEAR LW_FIELD.
READ TABLE LT_FIELD INTO LW_FIELD
WITH KEY FIELDNAME = CNS_LOCAL.
V_LOCAL = LW_FIELD-FIELDVALUE.

CLEAR LW_FIELD.
READ TABLE LT_FIELD INTO LW_FIELD
WITH KEY FIELDNAME = CNS_DOWN.
V_DOWN = LW_FIELD-FIELDVALUE.
ENDIF.

ENDFORM.                    " DYNP_VALUES_READ
*&---------------------------------------------------------------------*
*&      Form  FILE_SAVE_DIALOG
*&---------------------------------------------------------------------*
*       ファイル保存ダイアログ表示
*----------------------------------------------------------------------*
*      <--O_FILE  ファイル名
*----------------------------------------------------------------------*
FORM FILE_SAVE_DIALOG CHANGING O_FILE.
DATA : LV_FILENAME TYPE STRING,
LV_PATH     TYPE STRING,
LV_FULLPATH TYPE STRING,
LV_FILTER   TYPE STRING.

* ローカル選択時のみ
CHECK V_LOCAL = CNS_ON.
**** START UPD 2015/03/10 ISID13 ****
*  LV_FILTER = CNS_FILTER.
LV_FILTER = TEXT-007.
**** END UPD 2015/03/10 ISID13 ****
CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_SAVE_DIALOG
EXPORTING
FILE_FILTER  = LV_FILTER
CHANGING
FILENAME     = LV_FILENAME
PATH         = LV_PATH
FULLPATH     = LV_FULLPATH
EXCEPTIONS
CNTL_ERROR   = 1
ERROR_NO_GUI = 2
OTHERS       = 3.

IF SY-SUBRC = 0.
O_FILE = LV_FULLPATH.
ELSE.
*   ファイル名取得に失敗しました
MESSAGE S400 WITH TEXT-M01.
ENDIF.

ENDFORM.                    " FILE_SAVE_DIALOG
*&---------------------------------------------------------------------*
*&      Form  FILE_OPEN_DIALOG
*&---------------------------------------------------------------------*
*       ファイル選択ダイアログ表示
*----------------------------------------------------------------------*
*      <--O_FILE ファイル名
*----------------------------------------------------------------------*
FORM FILE_OPEN_DIALOG CHANGING O_FILE.

DATA : LT_FILE TYPE FILETABLE,
LW_FILE LIKE LINE OF LT_FILE,
LV_RC   TYPE I.

* ローカル選択時のみ
CHECK V_LOCAL = CNS_ON.

CALL METHOD CL_GUI_FRONTEND_SERVICES=>FILE_OPEN_DIALOG
CHANGING
FILE_TABLE              = LT_FILE
RC                      = LV_RC
EXCEPTIONS
FILE_OPEN_DIALOG_FAILED = 1
CNTL_ERROR              = 2
ERROR_NO_GUI            = 3
OTHERS                  = 4.

IF SY-SUBRC = 0.
READ TABLE LT_FILE INTO LW_FILE INDEX 1.
O_FILE = LW_FILE-FILENAME.
ELSE.
*   ファイル名取得に失敗しました
MESSAGE S400 WITH TEXT-M01.
ENDIF.

ENDFORM.                    " FILE_OPEN_DIALOG
*&---------------------------------------------------------------------*
*&      Form  INTI_PROC
*&---------------------------------------------------------------------*
*       初期化処理
*----------------------------------------------------------------------*
FORM INTI_PROC.
* 内部テーブル初期化
REFRESH: IT_FILE ,
IT_DFILE,
IT_EDATA,
IT_KNA1 ,
IT_TLINE,
IT_TTXID,
IT_L_TEXT,
**** START ADD 2015/03/10 ISID13 ****
IT_EDATA_KNLF,
IT_EDATA_EINE,
IT_EDATA_MVKE,
IT_FILE_KNLF,
IT_FILE_EINE,
IT_FILE_MVKE.
**** END ADD 2015/03/10 ISID13 ****

*作業領域初期化
CLEAR:  WA_FILE,
WA_EDATA,
WA_DFILE,
WA_KNA1,
WA_TLINE,
WA_THEAD,
WA_TTXID,
V_M_CNT,
V_LINECNT.
ENDFORM.                    " INTI_PROC
*&---------------------------------------------------------------------*
*&      Form  DOWN_PROC
*&---------------------------------------------------------------------*
*       ダウンロード処理
*----------------------------------------------------------------------*
FORM DOWN_PROC.
DATA:L_MSG(50) TYPE C.
**** START UPD 2015/03/19 ISID13 ****
** 処理対象データ取得
*  PERFORM GET_DATA.
* テキスト取得処理
*  PERFORM READ_TEXT_DATA.

DATA: LT_KNB1  TYPE TYP_TD_KNB1,            "得意先マスタ（会社コード）
LT_KNVV  TYPE TYP_TD_KNVV,            "得意先マスタ: 販売データ
LT_LFA1  TYPE TYP_TD_LFA1,            "仕入先マスタ (一般セクション)
LT_LFB1  TYPE TYP_TD_LFB1,            "仕入先マスタ (会社コ−ド)
LT_LFM1  TYPE TYP_TD_LFM1,            "仕入先マスタ購買組織データ
LT_EINA  TYPE TYP_TD_EINA,            "購買情報: 一般データ
LT_EINE  TYPE TYP_TD_EINE,            "購買情報: 購買組織データ
LT_MVKE  TYPE TYP_TD_MVKE.            "品目の販売データ
**** START ADD 2015/08/10 ISID21 ****
DATA: LT_KNMT  TYPE TYP_TD_KNMT.
**** END ADD 2015/08/10 ISID21 ****

* 処理対象データ取得
PERFORM GET_DATA CHANGING LT_KNB1           "得意先マスタ（会社コード）
LT_KNVV           "得意先マスタ: 販売データ
LT_LFA1           "仕入先マスタ (一般セクション)
LT_LFB1           "仕入先マスタ (会社コ−ド)
LT_LFM1           "仕入先マスタ購買組織データ
LT_EINA           "購買情報: 一般データ
LT_EINE           "購買情報: 購買組織データ
LT_MVKE           "品目の販売データ
**** START ADD 2015/08/10 ISID21 ****
LT_KNMT.          "得意先/品目情報
**** END ADD 2015/08/10 ISID21 ****

* テキスト取得処理
PERFORM READ_TEXT_DATA USING LT_KNB1        "得意先マスタ（会社コード）
LT_KNVV        "得意先マスタ: 販売データ
LT_LFA1        "仕入先マスタ (一般セクション)
LT_LFB1        "仕入先マスタ (会社コ−ド)
LT_LFM1        "仕入先マスタ購買組織データ
LT_EINA        "購買情報: 一般データ
LT_EINE        "購買情報: 購買組織データ
LT_MVKE        "品目の販売データ
**** START ADD 2015/08/10 ISID21 ****
LT_KNMT.       "得意先/品目情報
**** END ADD 2015/08/10 ISID21 ****
**** END UPD 2015/03/19 ISID13 ****

* 結果処理
*-- エラーがある場合
**** START UPD 2015/03/10 ISID13 ****
*  IF NOT IT_EDATA[] IS INITIAL.
*    PERFORM WRITE_ERR_SPOOL.
*    EXIT.                   "処理終了
*  ENDIF.

* オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1
OR CNS_LFA1
OR CNS_EINA.
*--     エラーがある場合
IF NOT IT_EDATA[] IS INITIAL.
PERFORM WRITE_ERR_SPOOL USING IT_EDATA.
RETURN.                    "処理終了
ENDIF.
WHEN CNS_KNB1
OR CNS_KNVV
OR CNS_LFB1
OR CNS_LFM1.
*--     エラーがある場合
IF NOT IT_EDATA_KNLF[] IS INITIAL.
PERFORM WRITE_ERR_SPOOL USING IT_EDATA_KNLF.
RETURN.                    "処理終了
ENDIF.
WHEN CNS_EINE.
*--   エラーがある場合
IF NOT IT_EDATA_EINE[] IS INITIAL.
PERFORM WRITE_ERR_SPOOL USING IT_EDATA_EINE.
RETURN.                      "処理終了
ENDIF.
WHEN CNS_MVKE.
*--   エラーがある場合
IF NOT IT_EDATA_MVKE[] IS INITIAL.
PERFORM WRITE_ERR_SPOOL USING IT_EDATA_MVKE.
RETURN.                      "処理終了
ENDIF.
**** START ADD 2015/08/10 ISID21 ****
WHEN CNS_KNMT.
*--   エラーがある場合
IF NOT IT_EDATA_KNMT[] IS INITIAL.
PERFORM WRITE_ERR_SPOOL USING IT_EDATA_KNMT.
RETURN.                      "処理終了
ENDIF.
**** END ADD 2015/08/10 ISID21 ****
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/03/10 ISID13 ****

*-- エラーが無い場合、ファイル出力
PERFORM OUT_FILE.
*-- ファイル出力まで正常に終了したら、メッセージを出力して終了
*   XX件、ダウンロードしました。
L_MSG = V_M_CNT * 1.
MESSAGE S401 WITH L_MSG TEXT-M02.

ENDFORM.                    " DOWN_PROC
*&---------------------------------------------------------------------*
*&      Form  GET_KNA1
*&---------------------------------------------------------------------*
*       処理対象データ取得
*----------------------------------------------------------------------*
**** START UPD 2015/03/10 ISID13 ****
*    <--O_TD_KNB1    得意先マスタ（会社コード）
*    <--O_TD_KNVV    得意先マスタ: 販売データ
*    <--O_TD_LFA1    仕入先マスタ (一般セクション)
*    <--O_TD_LFB1    仕入先マスタ (会社コ−ド)
*    <--O_TD_LFM1    仕入先マスタ購買組織データ
*    <--O_TD_EINA    購買情報: 一般データ
*    <--O_TD_EINE    購買情報: 購買組織データ
*    <--O_TD_MVKE    品目の販売データ
*    <--O_TD_KNMT    得意先/品目情報
*----------------------------------------------------------------------*
*FORM GET_DATA.
FORM GET_DATA CHANGING O_TD_KNB1 TYPE TYP_TD_KNB1  "得意先マスタ（会社コード）
O_TD_KNVV TYPE TYP_TD_KNVV  "得意先マスタ: 販売データ
O_TD_LFA1 TYPE TYP_TD_LFA1  "仕入先マスタ (一般セクション)
O_TD_LFB1 TYPE TYP_TD_LFB1  "仕入先マスタ (会社コ−ド)
O_TD_LFM1 TYPE TYP_TD_LFM1  "仕入先マスタ購買組織データ
O_TD_EINA TYPE TYP_TD_EINA  "購買情報: 一般データ
O_TD_EINE TYPE TYP_TD_EINE  "購買情報: 購買組織データ
O_TD_MVKE TYPE TYP_TD_MVKE  "品目の販売データ
**** START ADD 2015/08/10 ISID21 ****
O_TD_KNMT TYPE TYP_TD_KNMT. "得意先/品目情報
**** END ADD 2015/08/10 ISID21 ****

*  SELECT KUNNR INTO TABLE IT_KNA1 FROM KNA1
*   WHERE KUNNR IN S_KUNNR.
*  SORT IT_KNA1 BY KUNNR.
**** END UPD 2015/03/10 ISID13 ****

SELECT TDID INTO TABLE IT_TTXID FROM TTXID
WHERE TDOBJECT = P_OBJ           "テキストオブジェクト
AND TDID    IN S_TDID.         "テキストID
SORT IT_TTXID BY TDID.

**** START ADD 2015/03/10 ISID13 ****
* オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1.
*     得意先マスタ: 一般データの取得
PERFORM GET_DATA_KNA1.
WHEN CNS_KNB1.
*     得意先マスタ(会社コード)の取得
PERFORM GET_DATA_KNB1 CHANGING O_TD_KNB1. "得意先マスタ（会社コード）
WHEN CNS_KNVV.
*     得意先マスタ: 販売データの取得
PERFORM GET_DATA_KNVV CHANGING O_TD_KNVV. "得意先マスタ: 販売データ
WHEN CNS_LFA1.
*     仕入先マスタ(一般セクション)の取得
PERFORM GET_DATA_LFA1 CHANGING O_TD_LFA1. "仕入先マスタ (一般セクション)
WHEN CNS_LFB1.
*     仕入先マスタ(会社コ−ド)の取得
PERFORM GET_DATA_LFB1 CHANGING O_TD_LFB1. "仕入先マスタ (会社コ−ド)
WHEN CNS_LFM1.
*     仕入先マスタ購買組織データの取得
PERFORM GET_DATA_LFM1 CHANGING O_TD_LFM1. "仕入先マスタ購買組織データ
WHEN CNS_EINA.
*     購買情報: 一般データの取得
PERFORM GET_DATA_EINA CHANGING O_TD_EINA. "購買情報: 一般データ
WHEN CNS_EINE.
*     購買情報: 購買組織データの取得
PERFORM GET_DATA_EINE CHANGING O_TD_EINE. "購買情報: 購買組織データ
WHEN CNS_MVKE.
*     品目の販売データの取得
PERFORM GET_DATA_MVKE CHANGING O_TD_MVKE. "品目の販売データ
**** START ADD 2015/08/10 ISID21 ****
WHEN CNS_KNMT.
PERFORM GET_DATA_KNMT CHANGING O_TD_KNMT. "得意先/品目情報
**** END ADD 2015/08/10 ISID21 ****
WHEN OTHERS.
ENDCASE.
**** END ADD 2015/03/10 ISID13 ****
ENDFORM.                    " GET_DATA
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_DATA
*&---------------------------------------------------------------------*
*       テキストデータ取得
*----------------------------------------------------------------------*
**** START UPD 2015/03/10 ISID13 ****
*    -->I_TD_KNB1    得意先マスタ（会社コード）
*    -->I_TD_KNVV    得意先マスタ: 販売データ
*    -->I_TD_LFA1    仕入先マスタ (一般セクション)
*    -->I_TD_LFB1    仕入先マスタ (会社コ−ド)
*    -->I_TD_LFM1    仕入先マスタ購買組織データ
*    -->I_TD_EINA    購買情報: 一般データ
*    -->I_TD_EINE    購買情報: 購買組織データ
*    -->I_TD_MVKE    品目の販売データ
*    -->I_TD_KNMT    得意先/品目情報
*----------------------------------------------------------------------*
*FORM READ_TEXT_DATA.
FORM READ_TEXT_DATA USING I_TD_KNB1 TYPE TYP_TD_KNB1
I_TD_KNVV TYPE TYP_TD_KNVV
I_TD_LFA1 TYPE TYP_TD_LFA1
I_TD_LFB1 TYPE TYP_TD_LFB1
I_TD_LFM1 TYPE TYP_TD_LFM1
I_TD_EINA TYPE TYP_TD_EINA
I_TD_EINE TYPE TYP_TD_EINE
I_TD_MVKE TYPE TYP_TD_MVKE
**** START ADD 2015/08/10 ISID21 ****
I_TD_KNMT TYPE TYP_TD_KNMT.
**** END ADD 2015/08/10 ISID21 ****

*  CHECK NOT IT_KNA1[] IS INITIAL.   "該当得意先が無ければ処理しない
**** END UPD 2015/03/10 ISID13 ****

CHECK NOT IT_TTXID[] IS INITIAL.  "該当テキストIDが無ければ処理しない

**** START UPD 2015/03/10 ISID13 ****
** 得意先ループ
*  LOOP AT IT_KNA1 INTO WA_KNA1.
*    CLEAR:WA_FILE,WA_THEAD.
*    WA_FILE-FNAME   = WA_KNA1-KUNNR.
*    WA_THEAD-TDNAME = WA_KNA1-KUNNR.
**   テキストIDループ
*    LOOP AT IT_TTXID INTO WA_TTXID.
*      CLEAR:V_LINECNT.             "得意先/テキストIDごとに行番リセット
*      REFRESH:IT_TLINE.            "テキスト取得用内部テーブル初期化
*      WA_FILE-FNAME     = WA_KNA1-KUNNR.
*      WA_FILE-FID       = WA_TTXID-TDID.
*      WA_THEAD-TDID     = WA_TTXID-TDID.
*      WA_THEAD-TDSPRAS  = P_LANG.
*      WA_THEAD-TDOBJECT = P_OBJ.
**     テキストを取得し、内部テーブルに格納
*      PERFORM EDIT_FILE.
*    ENDLOOP.
*  ENDLOOP.

* オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1.
*     得意先マスタ: 一般データ
PERFORM READ_TEXT_KNA1.
WHEN CNS_KNB1.
*     得意先マスタ(会社コード)
PERFORM READ_TEXT_KNB1 USING I_TD_KNB1. "得意先マスタ（会社コード）
WHEN CNS_KNVV.
*     得意先マスタ: 販売データ
PERFORM READ_TEXT_KNVV USING I_TD_KNVV. "得意先マスタ: 販売データ
WHEN CNS_LFA1.
*     仕入先マスタ(一般セクション)
PERFORM READ_TEXT_LFA1 USING I_TD_LFA1. "仕入先マスタ(一般セクション)
WHEN CNS_LFB1.
*     得意先マスタ(会社コード)
PERFORM READ_TEXT_LFB1 USING I_TD_LFB1. "仕入先マスタ (会社コ−ド)
WHEN CNS_LFM1.
*     仕入先マスタ購買組織データ
PERFORM READ_TEXT_LFM1 USING I_TD_LFM1. "仕入先マスタ購買組織データ
WHEN CNS_EINA.
*     購買情報: 一般データ
PERFORM READ_TEXT_EINA USING I_TD_EINA. "購買情報: 一般データ
WHEN CNS_EINE.
*     購買情報: 購買組織データ
PERFORM READ_TEXT_EINE USING I_TD_EINE. "購買情報: 購買組織データ
WHEN CNS_MVKE.
*     品目の販売データ
PERFORM READ_TEXT_MVKE USING I_TD_MVKE. "品目の販売データ
**** START ADD 2015/08/10 ISID21 ****
WHEN CNS_KNMT.
*     得意先/品目情報
PERFORM READ_TEXT_KNMT USING I_TD_KNMT. "得意先/品目情報
**** END ADD 2015/08/10 ISID21 ****
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/03/10 ISID13 ****
ENDFORM.                    " READ_TEXT_DATA
*&---------------------------------------------------------------------*
*&      Form  EDIT_FILE
*&---------------------------------------------------------------------*
*       テキスト読み込み→改行で編集
*----------------------------------------------------------------------*
**** START UPD 2015/03/10 ISID13 ****
*  -->I_WA_FILE   ファイル用
*  -->I_WA_FILE1  ファイル用:KNB1
*  -->I_WA_FILE2  ファイル用:EINE
*  -->I_WA_FILE3  ファイル用:MVKE
*----------------------------------------------------------------------*
*FORM EDIT_FILE.
FORM EDIT_FILE USING I_WA_FILE   TYPE T_INFILE
I_WA_FILE1  TYPE T_INFILE_KNLF
I_WA_FILE2  TYPE T_INFILE_EINE
I_WA_FILE3  TYPE T_INFILE_MVKE.
**** END UPD 2015/03/10 ISID13 ****

*ローカルデータ
DATA: L_TEXT_S        TYPE STRING,
L_TEXT          TYPE STRING,            "ロングテキスト
L_TEXT2         TYPE STRING,            "(1行の出力桁数）
L_TEXT3         TYPE STRING,            "(1行の出力桁数）
L_TEXT132(134)  TYPE C,                 "132桁編集
*        L_CRLF(2)       TYPE C.                 "改行コード
* Mod ES-UP 2012/08/21 -->
*        L_CRLF = CL_ABAP_CHAR_UTILITIES=>CR_LF.
*        L_CR          TYPE X VALUE '0A',
L_CR          TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>NEWLINE,
*        L_LF          TYPE X VALUE '0D',
L_LF          TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>CR_LF,
* Mod ES-UP 2012/08/21 -->
L_SUBRC       TYPE SY-SUBRC.
*
*  CALL FUNCTION 'AMDS_READ_SAPSCRIPT_TEXT'
*       EXPORTING
*            I_ID       = WA_THEAD-TDID
*            I_LANGUAGE = WA_THEAD-TDSPRAS
*            I_NAME     = WA_THEAD-TDNAME
*            I_OBJECT   = WA_THEAD-TDOBJECT
*       TABLES
*            T_NETEXT   = LI_L_TEXT
*       EXCEPTIONS
*            NOT_FOUND  = 1
*            OTHERS     = 2.
CLEAR L_SUBRC.
PERFORM Z_AMDS_READ_SAPSCRIPT_TEXT USING  L_SUBRC.
IF  L_SUBRC = 0.
V_M_CNT = V_M_CNT + 1.  "得意先/テキストIDの組合数カウント
ELSEIF  L_SUBRC = 1 .      "未入力はスルー
EXIT.
ELSE.   "正常、もしくは未入力以外のみエラー
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
**** START UPD 2015/03/10 ISID13 ****
*    PERFORM WRITE_ERR USING V_ETEXT.
PERFORM WRITE_ERR USING V_ETEXT
I_WA_FILE
I_WA_FILE1
I_WA_FILE2
I_WA_FILE3.
**** END UPD 2015/03/10 ISID13 ****
EXIT.
ENDIF.

* 横１行のテキストに全件格納
CLEAR: L_TEXT_S.
LOOP AT IT_L_TEXT INTO V_STEXT.
CONCATENATE  L_TEXT_S V_STEXT INTO  L_TEXT_S.
ENDLOOP.

*改行コードで分解
DO.
CLEAR:L_TEXT2,L_TEXT3.
SPLIT L_TEXT_S AT L_CR INTO L_TEXT2  L_TEXT_S.
IF NOT L_TEXT2 IS INITIAL.
SPLIT L_TEXT2 AT L_LF INTO L_TEXT2 L_TEXT3.
V_LINECNT = V_LINECNT + 1.
**** START DEL 2015/03/10 ISID13 ****
*      WA_FILE-FLINE  = V_LINECNT.
**** END DEL 2015/03/10 ISID13 ****
L_TEXT132      = L_TEXT2.
**** START UPD 2015/03/10 ISID13 ****
*      WA_FILE-TDLINE = L_TEXT132(132).
*      CLEAR WA_DFILE.
*      CONCATENATE I_WA_FILE-FNAME
*                  I__WA_FILE-FID
*                  I_WA_FILE-FLINE
*                  I_WA_FILE-TDLINE
*             INTO I_WA_DFILE-LTEXT
*        SEPARATED BY CNS_TAB.
*     オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1
OR CNS_LFA1
OR CNS_EINA.
I_WA_FILE-FLINE  = V_LINECNT.
I_WA_FILE-TDLINE = L_TEXT132(132).
CLEAR WA_DFILE.
CONCATENATE I_WA_FILE-FNAME
I_WA_FILE-FID
I_WA_FILE-FLINE
I_WA_FILE-TDLINE
INTO WA_DFILE-LTEXT
SEPARATED BY CNS_TAB.
WHEN CNS_KNB1
OR CNS_KNVV
OR CNS_LFB1
OR CNS_LFM1.
I_WA_FILE1-FLINE  = V_LINECNT.
I_WA_FILE1-TDLINE = L_TEXT132(132).
CONCATENATE I_WA_FILE1-FNAME
I_WA_FILE1-FNAME1
I_WA_FILE1-FID
I_WA_FILE1-FLINE
I_WA_FILE1-TDLINE
INTO WA_DFILE-LTEXT
SEPARATED BY CNS_TAB.
WHEN CNS_EINE.
I_WA_FILE2-FLINE  = V_LINECNT.
I_WA_FILE2-TDLINE = L_TEXT132(132).
CONCATENATE I_WA_FILE2-FNAME
I_WA_FILE2-FNAME1
I_WA_FILE2-FNAME2
I_WA_FILE2-FNAME3
I_WA_FILE2-FID
I_WA_FILE2-FLINE
I_WA_FILE2-TDLINE
INTO WA_DFILE-LTEXT
SEPARATED BY CNS_TAB.
WHEN CNS_MVKE.
I_WA_FILE3-FLINE  = V_LINECNT.
I_WA_FILE3-TDLINE = L_TEXT132(132).
CONCATENATE I_WA_FILE3-FNAME
I_WA_FILE3-FNAME1
I_WA_FILE3-FNAME2
I_WA_FILE3-FID
I_WA_FILE3-FLINE
I_WA_FILE3-TDLINE
INTO WA_DFILE-LTEXT
SEPARATED BY CNS_TAB.
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/03/10 ISID13 ****

APPEND WA_DFILE TO IT_DFILE.
ENDIF.
IF  L_TEXT_S IS INITIAL.
EXIT.
ENDIF.
ENDDO.

ENDFORM.                    " EDIT_FILE

**** START ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  EDIT_FILE_KNMT
*&---------------------------------------------------------------------*
*       テキスト読み込み→改行で編集
*----------------------------------------------------------------------*
*  -->I_WA_FILE4   ファイル用 KNMT
*----------------------------------------------------------------------*
FORM EDIT_FILE_KNMT USING I_WA_FILE4  TYPE T_INFILE_KNMT.

*ローカルデータ
DATA: L_TEXT_S        TYPE STRING,
L_TEXT          TYPE STRING,            "ロングテキスト
L_TEXT2         TYPE STRING,            "(1行の出力桁数）
L_TEXT3         TYPE STRING,            "(1行の出力桁数）
L_TEXT132(134)  TYPE C,                 "132桁編集
L_CR          TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>NEWLINE,
L_LF          TYPE C VALUE CL_ABAP_CHAR_UTILITIES=>CR_LF,
L_SUBRC       TYPE SY-SUBRC.

CLEAR L_SUBRC.
PERFORM Z_AMDS_READ_SAPSCRIPT_TEXT USING  L_SUBRC.
IF  L_SUBRC = 0.
V_M_CNT = V_M_CNT + 1.  "得意先/テキストIDの組合数カウント
ELSEIF  L_SUBRC = 1 .      "未入力はスルー
EXIT.
ELSE.   "正常、もしくは未入力以外のみエラー
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.

PERFORM WRITE_ERR_KNMT USING V_ETEXT
I_WA_FILE4.

EXIT.
ENDIF.

* 横１行のテキストに全件格納
CLEAR: L_TEXT_S.
LOOP AT IT_L_TEXT INTO V_STEXT.
CONCATENATE  L_TEXT_S V_STEXT INTO  L_TEXT_S.
ENDLOOP.

*改行コードで分解
DO.
CLEAR:L_TEXT2,L_TEXT3.
SPLIT L_TEXT_S AT L_CR INTO L_TEXT2  L_TEXT_S.
IF NOT L_TEXT2 IS INITIAL.
SPLIT L_TEXT2 AT L_LF INTO L_TEXT2 L_TEXT3.
V_LINECNT = V_LINECNT + 1.
L_TEXT132      = L_TEXT2.
I_WA_FILE4-FLINE  = V_LINECNT.
I_WA_FILE4-TDLINE = L_TEXT132(132).
CONCATENATE I_WA_FILE4-FNAME
I_WA_FILE4-FNAME1
I_WA_FILE4-FNAME2
I_WA_FILE4-FNAME3
I_WA_FILE4-FID
I_WA_FILE4-FLINE
I_WA_FILE4-TDLINE
INTO WA_DFILE-LTEXT
SEPARATED BY CNS_TAB.

APPEND WA_DFILE TO IT_DFILE.
ENDIF.
IF  L_TEXT_S IS INITIAL.
EXIT.
ENDIF.
ENDDO.

ENDFORM.                    " EDIT_FILE_KNMT

*&---------------------------------------------------------------------*
*&      Form  WRITE_ERR_KNMT
*&---------------------------------------------------------------------*
*       エラーデータ内部テーブル格納
*----------------------------------------------------------------------*
*  -->I_WA_FILE4  ファイル用:KNMT
*----------------------------------------------------------------------*
FORM WRITE_ERR_KNMT USING V_ETEXT    TYPE ANY
I_WA_FILE4  TYPE T_INFILE_KNMT.

DATA:LWA_EDATA4    TYPE T_EDATA_KNMT.

* オブジェクト判定
CLEAR LWA_EDATA4.
LWA_EDATA4-FNAME  = I_WA_FILE4-FNAME.
LWA_EDATA4-FNAME1 = I_WA_FILE4-FNAME1.
LWA_EDATA4-FNAME2 = I_WA_FILE4-FNAME2.
LWA_EDATA4-FNAME3 = I_WA_FILE4-FNAME3.
LWA_EDATA4-FID    = I_WA_FILE4-FID.
LWA_EDATA4-TDLINE = V_ETEXT.
APPEND LWA_EDATA4 TO IT_EDATA_KNMT.

ENDFORM.                    " WRITE_ERR_KNMT

**** END ADD 2015/08/10 ISID21 ****

*&---------------------------------------------------------------------*
*&      Form  WRITE_ERR
*&---------------------------------------------------------------------*
*       エラーデータ内部テーブル格納
*----------------------------------------------------------------------*
**** START UPD 2015/03/10 ISID13 ****
*  -->V_ETEXT     変数
*  -->I_WA_FILE   ファイル用
*  -->I_WA_FILE1  ファイル用:KNB1
*  -->I_WA_FILE2  ファイル用:EINE
*  -->I_WA_FILE3  ファイル用:MVKE
*----------------------------------------------------------------------*
*FORM WRITE_ERR USING V_ETEXT
*  CLEAR WA_EDATA.
*  WA_EDATA-FNAME  = WA_FILE-FNAME.
*  WA_EDATA-FID    = WA_FILE-FID.
*  WA_EDATA-TDLINE = V_ETEXT.
*  APPEND WA_EDATA TO IT_EDATA.
FORM WRITE_ERR USING V_ETEXT    TYPE ANY
I_WA_FILE  TYPE T_INFILE
I_WA_FILE1 TYPE T_INFILE_KNLF
I_WA_FILE2 TYPE T_INFILE_EINE
I_WA_FILE3 TYPE T_INFILE_MVKE.

DATA:LWA_EDATA1    TYPE T_EDATA_KNLF,
LWA_EDATA2    TYPE T_EDATA_EINE,
LWA_EDATA3    TYPE T_EDATA_MVKE.

* オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1
OR CNS_LFA1
OR CNS_EINA.
CLEAR WA_EDATA.
WA_EDATA-FNAME  = I_WA_FILE-FNAME.
WA_EDATA-FID    = I_WA_FILE-FID.
WA_EDATA-TDLINE = V_ETEXT.
APPEND WA_EDATA TO IT_EDATA.
WHEN CNS_KNB1
OR CNS_KNVV
OR CNS_LFB1
OR CNS_LFM1.
CLEAR LWA_EDATA1.
LWA_EDATA1-FNAME  = I_WA_FILE1-FNAME.
LWA_EDATA1-FNAME1 = I_WA_FILE1-FNAME1.
LWA_EDATA1-FID    = I_WA_FILE1-FID.
LWA_EDATA1-TDLINE = V_ETEXT.
APPEND LWA_EDATA1 TO IT_EDATA_KNLF.
WHEN CNS_EINE.
CLEAR LWA_EDATA2.
LWA_EDATA2-FNAME  = I_WA_FILE2-FNAME.
LWA_EDATA2-FNAME1 = I_WA_FILE2-FNAME1.
LWA_EDATA2-FNAME2 = I_WA_FILE2-FNAME2.
LWA_EDATA2-FNAME3 = I_WA_FILE2-FNAME3.
LWA_EDATA2-FID    = I_WA_FILE2-FID.
LWA_EDATA2-TDLINE = V_ETEXT.
APPEND LWA_EDATA2 TO IT_EDATA_EINE.
WHEN CNS_MVKE.
CLEAR LWA_EDATA3.
LWA_EDATA3-FNAME  = I_WA_FILE3-FNAME.
LWA_EDATA3-FNAME1 = I_WA_FILE3-FNAME1.
LWA_EDATA3-FNAME2 = I_WA_FILE3-FNAME2.
LWA_EDATA3-FID    = I_WA_FILE3-FID.
LWA_EDATA3-TDLINE = V_ETEXT.
APPEND LWA_EDATA3 TO IT_EDATA_MVKE.
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/03/10 ISID13 ****

ENDFORM.                    " WRITE_ERR
*&---------------------------------------------------------------------*
*&      Form  WRITE_ERR_SPOOL
*&---------------------------------------------------------------------*
*       エラーデータありの場合の処理
*----------------------------------------------------------------------*
**** START UPD 2015/03/10 ISID13 ****
*   -->I_TD_EDATAE  エラーデータ用
*----------------------------------------------------------------------*
*FORM WRITE_ERR_SPOOL.
** ヘッダ
*   WRITE:/1  TEXT-H01, "得意先コード
*          15 TEXT-H02, "テキストID
*          27 TEXT-H03. "エラー内容
*   ULINE.
*   LOOP AT IT_EDATA INTO WA_EDATA.
*     WRITE:/1  WA_EDATA-FNAME,    "得意先コード
*            17 WA_EDATA-FID,      "テキストID
*            27 WA_EDATA-TDLINE.   "エラー内容
*   ENDLOOP.
FORM WRITE_ERR_SPOOL USING I_TD_EDATAE TYPE ANY TABLE.

DATA:LWA_EDATA1    TYPE T_EDATA_KNLF,
LWA_EDATA2    TYPE T_EDATA_EINE,
LWA_EDATA3    TYPE T_EDATA_MVKE,
**** START ADD 2015/08/10 ISID21 ****
LWA_EDATA4    TYPE T_EDATA_KNMT.
**** END ADD 2015/08/10 ISID21 ****

* オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1.
*     ヘッダ
WRITE:/1  TEXT-H01,            "得意先コード
15 TEXT-H02,            "テキストID
27 TEXT-H03.            "エラー内容
ULINE.
LOOP AT I_TD_EDATAE INTO WA_EDATA.
WRITE:/1  WA_EDATA-FNAME,    "得意先コード
17 WA_EDATA-FID,      "テキストID
27 WA_EDATA-TDLINE.   "エラー内容
ENDLOOP.
WHEN CNS_KNB1.
*     ヘッダ
WRITE:/1  TEXT-H01,            "得意先コード
15 TEXT-H04,            "会社コード
27 TEXT-H02,            "テキストID
39 TEXT-H03.            "エラー内容
ULINE.
LOOP AT I_TD_EDATAE INTO LWA_EDATA1.
WRITE:/1  LWA_EDATA1-FNAME,  "得意先コード
15 LWA_EDATA1-FNAME1, "会社コード
27 LWA_EDATA1-FID,    "テキストID
39 LWA_EDATA1-TDLINE. "エラー内容
ENDLOOP.
WHEN CNS_KNVV.
*     ヘッダ
WRITE:/1  TEXT-H01,            "得意先コード
15 TEXT-H05,            "販売組織
27 TEXT-H02,            "テキストID
39 TEXT-H03.            "エラー内容
ULINE.
LOOP AT I_TD_EDATAE INTO LWA_EDATA1.
WRITE:/1  LWA_EDATA1-FNAME,  "得意先コード
15 LWA_EDATA1-FNAME1, "販売組織
27 LWA_EDATA1-FID,    "テキストID
39 LWA_EDATA1-TDLINE. "エラー内容
ENDLOOP.
WHEN CNS_LFA1.
*     ヘッダ
WRITE:/1  TEXT-H06,            "仕入先コード
15 TEXT-H02,            "テキストID
27 TEXT-H03.            "エラー内容
ULINE.
LOOP AT I_TD_EDATAE INTO WA_EDATA.
WRITE:/1  WA_EDATA-FNAME,    "仕入先コード
15 WA_EDATA-FID,      "テキストID
27 WA_EDATA-TDLINE.   "エラー内容
ENDLOOP.
WHEN CNS_LFB1.
*     ヘッダ
WRITE:/1  TEXT-H06,            "仕入先コード
15 TEXT-H04,            "会社コード
27 TEXT-H02,            "テキストID
39 TEXT-H03.            "エラー内容
ULINE.
LOOP AT I_TD_EDATAE INTO LWA_EDATA1.
WRITE:/1  LWA_EDATA1-FNAME,  "仕入先コード
15 LWA_EDATA1-FNAME1, "会社コード
27 LWA_EDATA1-FID,    "テキストID
39 LWA_EDATA1-TDLINE. "エラー内容
ENDLOOP.
WHEN CNS_LFM1.
*     ヘッダ
WRITE:/1  TEXT-H06,            "仕入先コード
15 TEXT-H07,            "購買組織
27 TEXT-H02,            "テキストID
39 TEXT-H03.            "エラー内容
ULINE.
LOOP AT I_TD_EDATAE INTO LWA_EDATA1.
WRITE:/1  LWA_EDATA1-FNAME,  "仕入先コード
15 LWA_EDATA1-FNAME1, "購買組織
27 LWA_EDATA1-FID,    "テキストID
39 LWA_EDATA1-TDLINE. "エラー内容
ENDLOOP.
WHEN CNS_EINA.
*     ヘッダ
WRITE:/1  TEXT-H08,            "購買情報番号
15 TEXT-H02,            "テキストID
27 TEXT-H03.            "エラー内容
ULINE.
LOOP AT I_TD_EDATAE INTO WA_EDATA.
WRITE:/1  WA_EDATA-FNAME,    "購買情報番号
15 WA_EDATA-FID,      "テキストID
27 WA_EDATA-TDLINE.   "エラー内容
ENDLOOP.
WHEN CNS_EINE.
*     ヘッダ
WRITE:/1  TEXT-H08,            "購買情報番号
15 TEXT-H07,            "購買組織
32 TEXT-H09,            "購買情報カテゴリ
49 TEXT-H10,            "プラント
59 TEXT-H02,            "テキストID
71 TEXT-H03.            "エラー内容
ULINE.
LOOP AT I_TD_EDATAE INTO LWA_EDATA2.
WRITE:/1  LWA_EDATA2-FNAME,  "購買情報番号
15 LWA_EDATA2-FNAME1, "購買組織
32 LWA_EDATA2-FNAME2, "購買情報カテゴリ
49 LWA_EDATA2-FNAME3, "プラント
59 LWA_EDATA2-FID,    "テキストID
71 LWA_EDATA2-TDLINE. "エラー内容
ENDLOOP.
WHEN CNS_MVKE.
*     ヘッダ
WRITE:/1  TEXT-H11,            "品目コード
20 TEXT-H05,            "販売組織
33 TEXT-H12,            "流通チャネル
47 TEXT-H02,            "テキストID
59 TEXT-H03.            "エラー内容
ULINE.
LOOP AT I_TD_EDATAE INTO LWA_EDATA3.
WRITE:/1  LWA_EDATA3-FNAME,  "品目コード
20 LWA_EDATA3-FNAME1, "販売組織
33 LWA_EDATA3-FNAME2, "流通チャネル
47 LWA_EDATA3-FID,    "テキストID
59 LWA_EDATA3-TDLINE. "エラー内容
ENDLOOP.
**** START ADD 2015/08/10 ISID21 ****
WHEN CNS_KNMT.
*     ヘッダ
WRITE:/1  TEXT-H01,            "得意先コード
15 TEXT-H05,            "販売組織
32 TEXT-H12,            "流通チャネル
49 TEXT-H11,            "品目コード
59 TEXT-H02,            "テキストID
71 TEXT-H03.            "エラー内容
ULINE.
LOOP AT I_TD_EDATAE INTO LWA_EDATA4.
WRITE:/1  LWA_EDATA4-FNAME,  "得意先コード
15 LWA_EDATA4-FNAME1, "販売組織
32 LWA_EDATA4-FNAME2, "流通チャネル
49 LWA_EDATA4-FNAME3, "品目コード
59 LWA_EDATA4-FID,    "テキストID
71 LWA_EDATA4-TDLINE. "エラー内容
ENDLOOP.
**** END ADD 2015/08/10 ISID21 ****
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/03/10 ISID13 ****
ENDFORM.                    " WRITE_ERR_SPOOL
*&---------------------------------------------------------------------*
*&      Form  OUT_FILE
*&---------------------------------------------------------------------*
*       ファイル出力
*----------------------------------------------------------------------*
FORM OUT_FILE.
* データが存在する場合のみ
**** START UPD 2015/03/10 ISID13 ****
*  IF IT_DFILE[] IS INITIAL.
IF LINES( IT_DFILE[] ) <= 1.
**** END UPD 2015/03/10 ISID13 ****
*   処理対象データがありません
MESSAGE S204.
STOP.
ENDIF.
CHECK NOT IT_DFILE IS INITIAL.
IF R_SERVER = CNS_ON.
*   サーバ選択時
PERFORM OUT_FILE_SERVER.
ELSE.
*   ローカル選択時
PERFORM OUT_FILE_LOCAL.
ENDIF.

ENDFORM.                    " OUT_FILE
*&---------------------------------------------------------------------*
*&      Form  OUT_FILE_SERVER
*&---------------------------------------------------------------------*
*       サーバファイル出力
*----------------------------------------------------------------------*
FORM OUT_FILE_SERVER.
**** START DEL 2014/09/01 ISID11 ****
** ファイルオープン1
** Mod ES-UP 2012/08/21 -->
**  OPEN DATASET P_FILE FOR OUTPUT IN TEXT MODE.
*  CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
*  DATA L_CODEPAGE TYPE CPCODEPAGE.
*
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
**** END DEL 2014/09/01 ISID11 ****
**** START ADD 2015/02/04 ISID11 ****
**** START DEL 2015/03/10 ISID13 ***
DATA:
*    L_Z_OUTPUT_CP TYPE  ZTEGZZM001-Z_OUTPUT_CP,
*    L_SAPCODEPAGE TYPE STRING,
*    L_FLGUTF8  TYPE  FLAG,
**** END DEL 2015/03/10 ISID13 ***
L_SUBRC    TYPE SY-SUBRC,
L_CODEPAGE TYPE ABAP_ENCODING.
*
*  CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
*    EXPORTING
*      IMPPGM      = SY-REPID
*      IMPBUKRS    = TEXT-006
*    IMPORTING
*      EXPCODEPAGE = L_Z_OUTPUT_CP
*      EXPFLGUTF8  = L_FLGUTF8.
**** END DEL 2015/03/10 ISID13 ****
**** START UPD 2015/03/10 ISID13 ****
*  IF L_FLGUTF8 IS INITIAL.
*    L_SAPCODEPAGE = L_Z_OUTPUT_CP.
*    IF L_SAPCODEPAGE IS NOT INITIAL.
*      L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).
**** START DEL 2015/06/11 ISID18 ****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( 'UTF-8' ).
**    ENDIF.
***** END UPD 2015/03/10 ISID13 ****
*  TRY .
*      OPEN DATASET P_FILE FOR OUTPUT
*        IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
*        IGNORING CONVERSION ERRORS.
*
*      L_SUBRC = SY-SUBRC.
*
*    CATCH CX_SY_CODEPAGE_CONVERTER_INIT.
*
*      L_SUBRC = 8.
*
*  ENDTRY.
**** END DEL 2015/06/11 ISID18 ****
**** START DEL 2015/03/10 ISID13 ****
*  ELSE.
***** END ADD 2015/02/04 ISID11 ****
*    OPEN DATASET P_FILE FOR OUTPUT
***** START UPD 2014/08/31 ISID19 ****
**    IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
*    IN TEXT MODE ENCODING UTF-8
***** END UPD 2014/08/31 ISID19 ****
*      IGNORING CONVERSION ERRORS.
***** START ADD 2015/02/04 ISID11 ****
*    L_SUBRC = SY-SUBRC.
*
*  ENDIF.
**** END DEL 2015/03/10 ISID13 ****
**** END ADD 2015/02/04 ISID11 ****
**** START ADD 2015/06/11 ISID18 ****
CASE ABAP_ON.
WHEN R_JIS.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_JIS ).
TRY.
OPEN DATASET P_FILE FOR OUTPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
L_SUBRC = SY-SUBRC.
CATCH CX_SY_CODEPAGE_CONVERTER_INIT.
L_SUBRC = 8.
ENDTRY.
WHEN R_UTF.
OPEN DATASET P_FILE FOR OUTPUT
IN TEXT MODE ENCODING UTF-8
IGNORING CONVERSION ERRORS.
L_SUBRC = SY-SUBRC.
WHEN OTHERS.
ENDCASE.
**** END ADD 2015/06/11 ISID18 ****
**** START UPD 2015/02/04 ISID11 ****
*  IF SY-SUBRC <> 0.
IF L_SUBRC <> 0 .
**** END UPD 2015/02/04 ISID11 ****
*   ファイルのオープンでエラーが発生しました
MESSAGE S400 WITH TEXT-M04.
STOP.
ENDIF.

* 出力
LOOP AT IT_DFILE INTO WA_DFILE.
TRANSFER WA_DFILE-LTEXT TO P_FILE.
ENDLOOP.

* ファイルクローズ
CLOSE DATASET P_FILE.

ENDFORM.                    " OUT_FILE_SERVER
*&---------------------------------------------------------------------*
*&      Form  OUT_FILE_LOCAL
*&---------------------------------------------------------------------*
*       ローカルファイル出力
*----------------------------------------------------------------------*
FORM OUT_FILE_LOCAL.

* Add ES-UP 2012/09/11 -->
DATA: L_CODEPAGE  TYPE ABAP_ENCODING,
LV_FILENAME TYPE STRING.

**** START ADD 2015/02/04 ISID11 ****
**** START DEL 2015/03/10 ISID13 ****
*  DATA:
*    L_Z_OUTPUT_CP TYPE  ZTEGZZM001-Z_OUTPUT_CP,
*    L_SAPCODEPAGE TYPE STRING.
*
*  CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
*    EXPORTING
*      IMPPGM      = SY-REPID
*      IMPBUKRS    = TEXT-006
*    IMPORTING
*      EXPCODEPAGE = L_Z_OUTPUT_CP.
**** END DEL 2015/03/10 ISID13 ****
**** END ADD 2015/02/04 ISID11 ****
LV_FILENAME = P_FILE.

**** START DEL 2015/03/10 ISID13 ****
**--- シフトJISのコードページを取得
***** START UPD 2014/09/01 ISID11 ****
**  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( 'shift_jis' ).
***** START ADD 2015/02/04 ISID11 ****
**  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_UTF ).
*  L_SAPCODEPAGE = L_Z_OUTPUT_CP.
*  IF L_SAPCODEPAGE IS NOT INITIAL.
*
*    L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).
*
*  ENDIF.
**** END DEL 2015/03/10 ISID13 ****
**** END UPD 2014/09/01 ISID11 ****

**** START ADD 2015/03/10 ISID13 ****
**** START UPD 2015/06/11 ISID18 ****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( 'UTF-8' ).
CASE ABAP_ON.
WHEN R_JIS.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_JIS ).
WHEN R_UTF.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_UTF ).
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/06/11 ISID18 ****
**** END ADD 2015/03/10 ISID13 ****

CL_GUI_FRONTEND_SERVICES=>GUI_DOWNLOAD(
EXPORTING
*    BIN_FILESIZE              = BIN_FILESIZE
FILENAME                  = LV_FILENAME
*    FILETYPE                  = 'ASC'
*    APPEND                    = SPACE
*    WRITE_FIELD_SEPARATOR     = SPACE
*    HEADER                    = '00'
*    TRUNC_TRAILING_BLANKS     = SPACE
*    WRITE_LF                  = 'X'
*    COL_SELECT                = SPACE
*    COL_SELECT_MASK           = SPACE
*    DAT_MODE                  = SPACE
*    CONFIRM_OVERWRITE         = SPACE
*    NO_AUTH_CHECK             = SPACE
CODEPAGE                  = L_CODEPAGE
IGNORE_CERR               = ABAP_FALSE
*    REPLACEMENT               = '#'
*    WRITE_BOM                 = SPACE
*    TRUNC_TRAILING_BLANKS_EOL = 'X'
*    WK1_N_FORMAT              = SPACE
*    WK1_N_SIZE                = SPACE
*    WK1_T_FORMAT              = SPACE
*    WK1_T_SIZE                = SPACE
*    SHOW_TRANSFER_STATUS      = 'X'
*    FIELDNAMES                = FIELDNAMES
*    WRITE_LF_AFTER_LAST_LINE  = 'X'
*  IMPORTING
*    FILELENGTH                = FILELENGTH
CHANGING
DATA_TAB                  = IT_DFILE
EXCEPTIONS
FILE_WRITE_ERROR          = 1
NO_BATCH                  = 2
GUI_REFUSE_FILETRANSFER   = 3
INVALID_TYPE              = 4
NO_AUTHORITY              = 5
UNKNOWN_ERROR             = 6
HEADER_NOT_ALLOWED        = 7
SEPARATOR_NOT_ALLOWED     = 8
FILESIZE_NOT_ALLOWED      = 9
HEADER_TOO_LONG           = 10
DP_ERROR_CREATE           = 11
DP_ERROR_SEND             = 12
DP_ERROR_WRITE            = 13
UNKNOWN_DP_ERROR          = 14
ACCESS_DENIED             = 15
DP_OUT_OF_MEMORY          = 16
DISK_FULL                 = 17
DP_TIMEOUT                = 18
FILE_NOT_FOUND            = 19
DATAPROVIDER_EXCEPTION    = 20
CONTROL_FLUSH_ERROR       = 21
NOT_SUPPORTED_BY_GUI      = 22
ERROR_NO_GUI              = 23
OTHERS                    = 24 ).

* Add ES-UP 2012/09/11 <--

* Del ES-UP 2012/09/11 -->
*  DATA : LV_FILENAME TYPE STRING.
*
*  LV_FILENAME = P_FILE.
*
*  CALL FUNCTION 'GUI_DOWNLOAD'
*       EXPORTING
*            FILENAME                = LV_FILENAME
*       TABLES
*            DATA_TAB                = IT_DFILE
*       EXCEPTIONS
*            FILE_WRITE_ERROR        = 1
*            NO_BATCH                = 2
*            GUI_REFUSE_FILETRANSFER = 3
*            INVALID_TYPE            = 4
*            NO_AUTHORITY            = 5
*            UNKNOWN_ERROR           = 6
*            HEADER_NOT_ALLOWED      = 7
*            SEPARATOR_NOT_ALLOWED   = 8
*            FILESIZE_NOT_ALLOWED    = 9
*            HEADER_TOO_LONG         = 10
*            DP_ERROR_CREATE         = 11
*            DP_ERROR_SEND           = 12
*            DP_ERROR_WRITE          = 13
*            UNKNOWN_DP_ERROR        = 14
*            ACCESS_DENIED           = 15
*            DP_OUT_OF_MEMORY        = 16
*            DISK_FULL               = 17
*            DP_TIMEOUT              = 18
*            FILE_NOT_FOUND          = 19
*            DATAPROVIDER_EXCEPTION  = 20
*            CONTROL_FLUSH_ERROR     = 21
*            OTHERS                  = 22.

* Del ES-UP 2012/09/11 -->

IF SY-SUBRC <> 0.
*   ファイルの出力でエラーが発生しました
MESSAGE S400 WITH TEXT-M05.
STOP.
ENDIF.

ENDFORM.                    " OUT_FILE_LOCAL
*&---------------------------------------------------------------------*
*&      Form  UP_PROC
*&---------------------------------------------------------------------*
*       アップロード処理
*----------------------------------------------------------------------*
FORM UP_PROC.
**** START DEL 2015/03/10 ISID13 ****
*  DATA:L_MSG(50) TYPE C.
**** END DEL 2015/03/10 ISID13 ****

* ファイル読込み
PERFORM GET_FILE.

**** START UPD 2015/03/10 ISID13 ****
*  IF IT_FILE[] IS INITIAL.
IF IT_FILE[]  IS INITIAL AND
IT_FILE_KNLF[] IS INITIAL AND
IT_FILE_EINE[] IS INITIAL AND
IT_FILE_MVKE[] IS INITIAL
**** START ADD 2015/08/10 ISID21 ****
AND IT_FILE_KNMT[] IS INITIAL.
**** END ADD 2015/08/10 ISID21 ****
**** END UPD 2015/03/10 ISID13 ****
*   処理対象データがありません
MESSAGE S204.
EXIT.
ENDIF.
**** START UPD 2015/03/10 ISID13 ****
* テキスト書き込み
*  PERFORM CREATE_DATA.
* 結果処理
**-- エラーがない場合
*  IF IT_EDATA[] IS INITIAL.
**---- チェックのみでない場合
*    IF P_CHK IS INITIAL. "実実行
*      COMMIT WORK.
**     XX件、更新しました
*      L_MSG = V_M_CNT * 1.
*      MESSAGE S401 WITH L_MSG TEXT-M07.
**---- チェックのみの場合
*    ELSE.
*      ROLLBACK WORK.
**     エラーはありません
*      MESSAGE S400 WITH TEXT-M03.
*    ENDIF.
**-- エラーがある場合
*  ELSE.
*    ROLLBACK WORK.
*    PERFORM WRITE_ERR_SPOOL.
*    EXIT.                   "処理終了
*  ENDIF.

* オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1
OR CNS_LFA1
OR CNS_EINA.
*      グループ1テキスト書き込み
PERFORM CREATE_GROUP1_DATA.
*      ファイル判定
PERFORM CHK_EDATA_FILE USING IT_EDATA.
WHEN CNS_KNB1
OR CNS_KNVV
OR CNS_LFB1
OR CNS_LFM1.
*     グループ2テキスト書き込み
PERFORM CREATE_GROUP2_DATA.
*     ファイル判定
PERFORM CHK_EDATA_FILE USING IT_EDATA_KNLF.
WHEN CNS_EINE.
*     グループ3テキスト書き込み
PERFORM CREATE_GROUP3_DATA.
*     ファイル判定
PERFORM CHK_EDATA_FILE USING IT_EDATA_EINE.
WHEN CNS_MVKE.
*     グループ4テキスト書き込み
PERFORM CREATE_GROUP4_DATA.
*     ファイル判定
PERFORM CHK_EDATA_FILE USING IT_EDATA_MVKE.
WHEN CNS_KNMT.
*     グループ5テキスト書き込み
PERFORM CREATE_GROUP5_DATA.
*     ファイル判定
PERFORM CHK_EDATA_FILE USING IT_EDATA_KNMT.
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/03/10 ISID13 ****
ENDFORM.                    " UP_PROC
*&---------------------------------------------------------------------*
*&      Form  GET_FILE
*&---------------------------------------------------------------------*
*       入力ファイル読みこみ
*----------------------------------------------------------------------*
FORM GET_FILE.
CASE CNS_ON.
*   サーバ選択時
WHEN R_SERVER.
PERFORM GET_FILE_SERVER.

*   ローカル選択時
WHEN R_LOCAL.
PERFORM GET_FILE_LOCAL.

WHEN OTHERS.
ENDCASE.


ENDFORM.                    " GET_FILE
*&---------------------------------------------------------------------*
*&      Form  GET_FILE_SERVER
*&---------------------------------------------------------------------*
*       サーバファイル読込み
*----------------------------------------------------------------------*
FORM GET_FILE_SERVER.

**** START ADD 2015/02/04 ISID11 ****
**** START DEL 2015/03/10 ISID13 ****
DATA:
*    L_Z_OUTPUT_CP TYPE  ZTEGZZM001-Z_OUTPUT_CP,
*    L_SAPCODEPAGE TYPE STRING,
*    L_FLGUTF8  TYPE  FLAG,
**** END UPD 2015/03/10 ISID13 ****
L_SUBRC    TYPE SY-SUBRC,
L_CODEPAGE TYPE ABAP_ENCODING.
**** END ADD 2015/02/04 ISID11 ****

REFRESH IT_FILE.

**** START ADD 2015/02/04 ISID11 ****
**** START DEL 2015/03/10 ISID13 ****
*  CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
*    EXPORTING
*      IMPPGM      = SY-REPID
*      IMPBUKRS    = TEXT-006
*    IMPORTING
*      EXPCODEPAGE = L_Z_OUTPUT_CP
*      EXPFLGUTF8  = L_FLGUTF8.
**** END DEL 2015/03/10 ISID13 ****
**** END ADD 2015/02/04 ISID11 ****
* ファイルオープン
*  OPEN DATASET P_FILE FOR INPUT IN TEXT MODE.

**** START UPD 2014/08/31 ISID19 ****
*  CONSTANTS CNS_SJIS TYPE STRING VALUE `shift_jis`.
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_SJIS ).
*  OPEN DATASET P_FILE FOR OUTPUT
*    IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
*    IGNORING CONVERSION ERRORS.
**** START ADD 2015/02/04 ISID11 ****
**** START UPD 2015/03/10 ISID13 ****
*   IF L_FLGUTF8 IS INITIAL.
*    L_SAPCODEPAGE = L_Z_OUTPUT_CP.
*    IF L_SAPCODEPAGE IS NOT INITIAL.
*      L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).
**** START DEL 2015/06/11 ISID18 ****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( 'UTF-8' ).
**    ENDIF.
***** END UPD 2015/03/10 ISID13 ****
*  TRY .
*      OPEN DATASET P_FILE FOR OUTPUT
*        IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
*           IGNORING CONVERSION ERRORS.
*
*      L_SUBRC = SY-SUBRC.
*
*    CATCH CX_SY_CODEPAGE_CONVERTER_INIT.
*
*      L_SUBRC = 8.
*
*  ENDTRY.
**** END DEL 2015/06/11 ISID18 ****
**** START DEL 2015/03/10 ISID13 ****
*  ELSE.
***** END ADD 2015/02/04 ISID11 ****
*    OPEN DATASET P_FILE FOR OUTPUT IN TEXT MODE ENCODING UTF-8
***** START ADD 2015/02/04 ISID11 ****
*    IGNORING CONVERSION ERRORS.
*
*    L_SUBRC = SY-SUBRC.
*
*  ENDIF.
**** END DEL 2015/03/10 ISID13 ****
**** END ADD 2015/02/04 ISID11 ****
**** END UPD 2014/08/31 ISID19 ****
**** START ADD 2015/06/11 ISID18 ****
CASE ABAP_ON.
WHEN R_JIS.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_JIS ).
TRY.
OPEN DATASET P_FILE FOR INPUT
IN LEGACY TEXT MODE CODE PAGE L_CODEPAGE
IGNORING CONVERSION ERRORS.
L_SUBRC = SY-SUBRC.
CATCH CX_SY_CODEPAGE_CONVERTER_INIT.
L_SUBRC = 8.
ENDTRY.
WHEN R_UTF.
OPEN DATASET P_FILE FOR INPUT
IN TEXT MODE ENCODING UTF-8
IGNORING CONVERSION ERRORS.
L_SUBRC = SY-SUBRC.
WHEN OTHERS.
ENDCASE.
**** END ADD 2015/06/11 ISID18 ****
**** START UPD 2015/02/04 ISID11 ****
*  IF SY-SUBRC <> 0.
IF L_SUBRC <> 0 .
**** END UPD 2015/02/04 ISID11 ****
*   入力ファイルのオープンでエラーが発生しました
MESSAGE S400 WITH TEXT-M06.
STOP.
ENDIF.

* 読込み
DO.
CLEAR V_LONGTXT.
READ DATASET P_FILE INTO V_LONGTXT.

IF SY-SUBRC = 0.
*     内部テーブルに追加
**** START UPD 2015/08/10 ISID21 ****
*      CLEAR WA_FILE.
*      SPLIT V_LONGTXT
*         AT CNS_TAB
*       INTO WA_FILE-FNAME   "テキスト名
*            WA_FILE-FID     "テキストID
*            WA_FILE-FLINE   "テキスト行数
*            WA_FILE-TDLINE. "テキスト内容
*      PERFORM ZERO_CONV.    "ゼロ埋め
*      APPEND WA_FILE TO IT_FILE.
CASE P_OBJ.
WHEN CNS_KNA1
OR CNS_LFA1
OR CNS_EINA.
*           グループ1データの取得
PERFORM GET_GROUP1_FILE_SERVER.
WHEN CNS_KNB1
OR CNS_KNVV
OR CNS_LFB1
OR CNS_LFM1.
*           グループ2データの取得
PERFORM GET_GROUP2_FILE_SERVER.
WHEN CNS_EINE.
*         グループ3データの取得
PERFORM GET_GROUP3_FILE_SERVER.
WHEN CNS_MVKE.
*         グループ4データの取得
PERFORM GET_GROUP4_FILE_SERVER.
*         グループ5データの取得
WHEN CNS_KNMT.
PERFORM GET_GROUP5_FILE_SERVER.
WHEN OTHERS.
ENDCASE.

**** END UPD 2015/08/10 ISID21 ****
ELSE.
*     取得終了
EXIT.
ENDIF.
ENDDO.

* ファイルクローズ
CLOSE DATASET P_FILE.

ENDFORM.                    " GET_FILE_SERVER
*&---------------------------------------------------------------------*
*&      Form  GET_FILE_LOCAL
*&---------------------------------------------------------------------*
*       ローカルファイル読込み
*----------------------------------------------------------------------*
FORM GET_FILE_LOCAL.

DATA : LV_FILENAME TYPE STRING.

REFRESH IT_DFILE.

LV_FILENAME = P_FILE.

* Mod ES-UP 2012/09/11 -->
DATA L_CODEPAGE TYPE ABAP_ENCODING.

**** START ADD 2015/02/04 ISID11 ****
**** START DEL 2015/03/10 ISID13 ****
*  DATA:
*    L_Z_OUTPUT_CP TYPE  ZTEGZZM001-Z_OUTPUT_CP,
*    L_SAPCODEPAGE TYPE STRING.
*
*  CALL FUNCTION 'ZEG_ZZ_GLOBAL_PGM_CONFIG_GET'
*    EXPORTING
*      IMPPGM      = SY-REPID
*      IMPBUKRS    = TEXT-006
*    IMPORTING
*      EXPCODEPAGE = L_Z_OUTPUT_CP.
***** END ADD 2015/02/04 ISID11 ****
**--- シフトJISのコードページを取得
***** START UPD 2014/09/01 ISID11 ****
**  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( 'shift_jis' ).
***** START ADD 2015/02/04 ISID11 ****
**  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_UTF ).
*  L_SAPCODEPAGE = L_Z_OUTPUT_CP.
*  IF L_SAPCODEPAGE IS NOT INITIAL.
*
*    L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( L_SAPCODEPAGE ).
*
*  ENDIF.
**** END DEL 2015/03/10 ISID13 ****
***** END UPD 2014/09/01 ISID11 ****
**** START ADD 2015/03/10 ISID13 ****
**** START UPD 2015/06/11 ISID18 ****
*  L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( 'UTF-8' ).
CASE ABAP_ON.
WHEN R_JIS.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_JIS ).
WHEN R_UTF.
L_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( CNS_UTF ).
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/06/11 ISID18 ****
**** END ADD 2015/03/10 ISID13 ****
CL_GUI_FRONTEND_SERVICES=>GUI_UPLOAD(
EXPORTING
FILENAME                = LV_FILENAME
*    FILETYPE                = 'DAT'
*    HAS_FIELD_SEPARATOR     = ABAP_TRUE
*    HEADER_LENGTH           = 0
*    READ_BY_LINE            = 'X'
*    DAT_MODE                = SPACE
CODEPAGE                = L_CODEPAGE
IGNORE_CERR             = ABAP_FALSE
*    REPLACEMENT             = '#'
*    VIRUS_SCAN_PROFILE      = VIRUS_SCAN_PROFILE
*  IMPORTING
*    FILELENGTH              = FILELENGTH
*    HEADER                  = HEADER
CHANGING
DATA_TAB                = IT_DFILE
EXCEPTIONS
FILE_OPEN_ERROR         = 1
FILE_READ_ERROR         = 2
NO_BATCH                = 3
GUI_REFUSE_FILETRANSFER = 4
INVALID_TYPE            = 5
NO_AUTHORITY            = 6
UNKNOWN_ERROR           = 7
BAD_DATA_FORMAT         = 8
HEADER_NOT_ALLOWED      = 9
SEPARATOR_NOT_ALLOWED   = 10
HEADER_TOO_LONG         = 11
UNKNOWN_DP_ERROR        = 12
ACCESS_DENIED           = 13
DP_OUT_OF_MEMORY        = 14
DISK_FULL               = 15
DP_TIMEOUT              = 16
NOT_SUPPORTED_BY_GUI    = 17
ERROR_NO_GUI            = 18
OTHERS                  = 19 ).

*  CALL FUNCTION 'GUI_UPLOAD'
*       EXPORTING
*            FILENAME                = LV_FILENAME
*       TABLES
*            DATA_TAB                = IT_DFILE
*       EXCEPTIONS
*            FILE_OPEN_ERROR         = 1
*            FILE_READ_ERROR         = 2
*            NO_BATCH                = 3
*            GUI_REFUSE_FILETRANSFER = 4
*            INVALID_TYPE            = 5
*            NO_AUTHORITY            = 6
*            UNKNOWN_ERROR           = 7
*            BAD_DATA_FORMAT         = 8
*            HEADER_NOT_ALLOWED      = 9
*            SEPARATOR_NOT_ALLOWED   = 10
*            HEADER_TOO_LONG         = 11
*            UNKNOWN_DP_ERROR        = 12
*            ACCESS_DENIED           = 13
*            DP_OUT_OF_MEMORY        = 14
*            DISK_FULL               = 15
*            DP_TIMEOUT              = 16
*            OTHERS                  = 17.

* Mod ES-UP 2012/09/11 <--

IF SY-SUBRC <> 0.
*   入力ファイルのアップロードでエラーが発生しました
MESSAGE S400 WITH TEXT-M10.
STOP.
ENDIF.
**** START ADD 2015/03/10 ISID13 ****
DELETE IT_DFILE INDEX 1.
**** END ADD 2015/03/10 ISID13 ****
* 入力ファイルゼロ件
IF IT_DFILE IS INITIAL.
*   処理対象データがありません
MESSAGE S204.
STOP.
ELSE.
**** START UPD 2015/03/10 ISID13 ****
*   タブで区切って編集
*    LOOP AT IT_DFILE INTO WA_DFILE.
*      CLEAR WA_FILE.
*      SPLIT WA_DFILE-LTEXT
*         AT CNS_TAB
*       INTO WA_FILE-FNAME   "テキスト名
*            WA_FILE-FID     "テキストID
*            WA_FILE-FLINE   "テキスト行数
*            WA_FILE-TDLINE. "テキスト内容
*      PERFORM ZERO_CONV.    "ゼロ埋め
*      APPEND WA_FILE TO IT_FILE.
*    ENDLOOP.

*   オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1
OR CNS_LFA1
OR CNS_EINA.
*         グループ1データの取得
PERFORM GET_GROUP1_FILE.
WHEN CNS_KNB1
OR CNS_KNVV
OR CNS_LFB1
OR CNS_LFM1.
*         グループ2データの取得
PERFORM GET_GROUP2_FILE.
WHEN CNS_EINE.
*       グループ3データの取得
PERFORM GET_GROUP3_FILE.
WHEN CNS_MVKE.
*       グループ4データの取得
PERFORM GET_GROUP4_FILE.
**** START ADD 2015/08/10 ISID21 ****
*       グループ5データの取得
WHEN CNS_KNMT.
PERFORM GET_GROUP5_FILE.
**** END ADD 2015/08/10 ISID21 ****
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/03/10 ISID13 ****
ENDIF.

ENDFORM.                    " GET_FILE_LOCAL
**** START DEL 2015/03/10 ISID13 ****
*&---------------------------------------------------------------------*
*&      Form  CREATE_DATA
*&---------------------------------------------------------------------*
*       テキスト書き込み
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
*FORM CREATE_DATA.
*  DATA:L_CNT TYPE I.
*
** マスタチェック用得意先取得
*  PERFORM GET_KNA1_CHK.
*
*  CLEAR:V_M_CNT.
** 入力ファイルの内容でループ
*  LOOP AT IT_FILE INTO WA_FILE.
**   得意先コード 開始ブレイク
*    AT NEW FNAME.
**     得意先コード 入力チェック
*      PERFORM CHK_NAME_UPLOAD.
*    ENDAT.
**   得意先コード&テキストID 開始ブレイク
*    AT NEW FID.
*      REFRESH:IT_TLINE.
*      CLEAR:V_ERR_ID_FLG.
*    ENDAT.
*
**   テキスト内容桁数チェック(132を越えたらエラー)
*    L_CNT = STRLEN( WA_FILE-TDLINE ).
*    IF  L_CNT > 132.
*      V_ERR_ID_FLG = CNS_ON.
*    ENDIF.
*
**   入力ファイルのテキスト内容を、汎用モジュールに渡す内部テーブルに格納
*    PERFORM STREAM_TO_ITF.
*
**   得意先コード&テキストID 終了ブレイク
*    AT END OF FID.
*      PERFORM CALL_CREATE_TEXT.
*    ENDAT.
*
*  ENDLOOP.
*ENDFORM.                    " CREATE_DATA
**** END DEL 2015/03/10 ISID13 ****
*&---------------------------------------------------------------------*
*&      Form  CALL_CREATE_TEXT
*&---------------------------------------------------------------------*
*       汎用モジュールCREATE_TEXT実行
*----------------------------------------------------------------------*
**** START UPD 2015/03/10 ISID13 ****
*    -->I_WA_FILE   ファイル用
*    -->I_WA_FILE1  ファイル用:KNB1
*    -->I_WA_FILE2  ファイル用:EINE
*    -->I_WA_FILE3  ファイル用:MVKE
*----------------------------------------------------------------------*
*FORM CALL_CREATE_TEXT.
FORM CALL_CREATE_TEXT USING I_WA_FILE  TYPE T_INFILE
I_WA_FILE1 TYPE T_INFILE_KNLF
I_WA_FILE2 TYPE T_INFILE_EINE
I_WA_FILE3 TYPE T_INFILE_MVKE.
**** END UPD 2015/03/10 ISID13 ****
DATA:
L_TDID        TYPE THEAD-TDID,
L_TDSPRAS     TYPE THEAD-TDSPRAS,
L_TDNAME      TYPE THEAD-TDNAME,
L_TDOBJECT    TYPE THEAD-TDOBJECT,
LW_ETEXT(200) TYPE C.

* エラー確認
*-- 得意先マスタ 存在しない
IF V_ERR_NAME_FLG = 1.
*   得意先が存在しません
**** START UPD 2015/03/10 ISID13 ****
*    PERFORM WRITE_ERR USING TEXT-M09.
PERFORM WRITE_ERR USING TEXT-M09
I_WA_FILE
I_WA_FILE1
I_WA_FILE2
I_WA_FILE3.
**** END UPD 2015/03/10 ISID13 ****
EXIT.
ENDIF.

*-- 得意先マスタ ロック判定
IF V_ERR_NAME_FLG = 2.
*   要求オブジェクトは現在ユーザ XXXXXXXX にロックされています
**** START UPD 2015/03/10 ISID13 ****
*    PERFORM WRITE_ERR USING V_ETEXT.
PERFORM WRITE_ERR USING V_ETEXT
I_WA_FILE
I_WA_FILE1
I_WA_FILE2
I_WA_FILE3.
**** END UPD 2015/03/10 ISID13 ****
EXIT.
ENDIF.
**** START ADD 2015/03/10 ISID13 ****
*-- 権限しない
IF V_ERR_NAME_FLG = 3.
CLEAR LW_ETEXT.
MESSAGE E144(Z3) INTO LW_ETEXT.
PERFORM WRITE_ERR USING LW_ETEXT
I_WA_FILE
I_WA_FILE1
I_WA_FILE2
I_WA_FILE3.
RETURN.
ENDIF.
**** END ADD 2015/03/10 ISID13 ****

*-- 132桁以上のテキストエラー
IF V_ERR_ID_FLG = CNS_ON.
*   テキストが１３２桁を越えています
**** START UPD 2015/03/10 ISID13 ****
*    PERFORM WRITE_ERR USING TEXT-M08.
*    PERFORM UNROCK_KNA1.
PERFORM WRITE_ERR USING TEXT-M08
I_WA_FILE
I_WA_FILE1
I_WA_FILE2
I_WA_FILE3.
PERFORM UNROCK_TABLE.
**** END UPD 2015/03/10 ISID13 ****
EXIT.
ENDIF.

* エラーが無ければテキスト登録
**** START UPD 2015/03/10 ISID13 ****
*  L_TDID     = WA_FILE-FID.
*  L_TDSPRAS  = P_LANG.
*  L_TDNAME   = WA_FILE-FNAME.
*  L_TDOBJECT = P_OBJ.

* エラーが無ければテキスト登録
PERFORM EDIT_CREATE_DATA USING    I_WA_FILE
I_WA_FILE1
I_WA_FILE2
I_WA_FILE3
CHANGING L_TDID
L_TDNAME.

L_TDSPRAS  = P_LANG.
L_TDOBJECT = P_OBJ.
**** END UPD 2015/03/10 ISID13 ****
CALL FUNCTION 'CREATE_TEXT'
EXPORTING
FID         = L_TDID
FLANGUAGE   = L_TDSPRAS
FNAME       = L_TDNAME
FOBJECT     = L_TDOBJECT
SAVE_DIRECT = 'X'
TABLES
FLINES      = IT_TLINE
EXCEPTIONS
NO_INIT     = 1
NO_SAVE     = 2
OTHERS      = 3.
IF SY-SUBRC = 0.
V_M_CNT = V_M_CNT + 1.
**** START UPD 2015/03/10 ISID13 ****
*    PERFORM UNROCK_KNA1.
PERFORM UNROCK_TABLE.
**** END UPD 2015/03/10 ISID13 ****
ELSE.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
**** START UPD 2015/03/10 ISID13 ****
*    PERFORM WRITE_ERR USING V_ETEXT.
*    PERFORM UNROCK_KNA1.
PERFORM WRITE_ERR USING V_ETEXT
I_WA_FILE
I_WA_FILE1
I_WA_FILE2
I_WA_FILE3.
PERFORM UNROCK_TABLE.
**** END UPD 2015/03/10 ISID13 ****
EXIT.
ENDIF.

ENDFORM.                    " CALL_CREATE_TEXT
**** START ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  CALL_CREATE_TEXT_KNMT
*&---------------------------------------------------------------------*
*       汎用モジュールCREATE_TEXT実行
*----------------------------------------------------------------------*
*    -->I_WA_FILE4  ファイル用:KNMT
*----------------------------------------------------------------------*
FORM CALL_CREATE_TEXT_KNMT USING I_WA_FILE4 TYPE T_INFILE_KNMT.
DATA:
L_TDID        TYPE THEAD-TDID,
L_TDSPRAS     TYPE THEAD-TDSPRAS,
L_TDNAME      TYPE THEAD-TDNAME,
L_TDOBJECT    TYPE THEAD-TDOBJECT,
LW_ETEXT(200) TYPE C.

* エラー確認
*-- 得意先/品目情報マスタ 存在しない
IF V_ERR_NAME_FLG = 1.
*   得意先/品目情報が存在しません
PERFORM WRITE_ERR_KNMT USING TEXT-M11
I_WA_FILE4.
EXIT.
ENDIF.

*-- 得意先マスタ ロック判定
IF V_ERR_NAME_FLG = 2.
*   要求オブジェクトは現在ユーザ XXXXXXXX にロックされています
PERFORM WRITE_ERR_KNMT USING V_ETEXT
I_WA_FILE4.
EXIT.
ENDIF.

*-- 権限しない
IF V_ERR_NAME_FLG = 3.
CLEAR LW_ETEXT.
MESSAGE E144(Z3) INTO LW_ETEXT.
PERFORM WRITE_ERR_KNMT USING LW_ETEXT
I_WA_FILE4.
RETURN.
ENDIF.

*-- 132桁以上のテキストエラー
IF V_ERR_ID_FLG = CNS_ON.
*   テキストが１３２桁を越えています
PERFORM WRITE_ERR_KNMT USING TEXT-M08
I_WA_FILE4.
PERFORM UNROCK_TABLE.
EXIT.
ENDIF.

* エラーが無ければテキスト登録
PERFORM EDIT_CREATE_DATA_KNMT USING    I_WA_FILE4
CHANGING L_TDID
L_TDNAME.
L_TDSPRAS  = P_LANG.
L_TDOBJECT = P_OBJ.
CALL FUNCTION 'CREATE_TEXT'
EXPORTING
FID         = L_TDID
FLANGUAGE   = L_TDSPRAS
FNAME       = L_TDNAME
FOBJECT     = L_TDOBJECT
SAVE_DIRECT = 'X'
TABLES
FLINES      = IT_TLINE
EXCEPTIONS
NO_INIT     = 1
NO_SAVE     = 2
OTHERS      = 3.
IF SY-SUBRC = 0.
V_M_CNT = V_M_CNT + 1.
PERFORM UNROCK_TABLE.
ELSE.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.

PERFORM WRITE_ERR_KNMT USING V_ETEXT
I_WA_FILE4.
PERFORM UNROCK_TABLE.
EXIT.
ENDIF.

ENDFORM.                    " CALL_CREATE_TEXT_KNMT
**** END ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  GET_KNA1_CHK
*&---------------------------------------------------------------------*
*       入力ファイルチェック用 得意先マスタ取得
*----------------------------------------------------------------------*
FORM GET_KNA1_CHK.
SELECT KUNNR INTO TABLE IT_KNA1 FROM KNA1
FOR ALL ENTRIES IN IT_FILE
WHERE KUNNR = IT_FILE-FNAME.
**** START ADD 2015/03/10 ISID13 ****
SORT IT_KNA1 BY KUNNR ASCENDING.
**** END ADD 2015/03/10 ISID13 ****
ENDFORM.                    " GET_KNA1_CHK
**** START DEL 2015/03/10 ISID13 ****
*&---------------------------------------------------------------------*
*&      Form  CHK_NAME_UPLOAD
*&---------------------------------------------------------------------*
*      入力ファイルの得意先コードのチェック
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
*FORM CHK_NAME_UPLOAD.
** 得意先マスタチェック
*  CLEAR:V_ERR_NAME_FLG.
*  READ TABLE IT_KNA1 INTO WA_KNA1
*       WITH TABLE KEY KUNNR = WA_FILE-FNAME.
*
*  IF SY-SUBRC <> 0.
*    V_ERR_NAME_FLG = 1. "マスタ存在エラー
*    EXIT.
*  ENDIF.
*
** 得意先マスタ ロックチェック
*  CALL FUNCTION 'ENQUEUE_EXKNA1'
*    EXPORTING
*      KUNNR          = WA_FILE-FNAME
*    EXCEPTIONS
*      FOREIGN_LOCK   = 1
*      SYSTEM_FAILURE = 2
*      OTHERS         = 3.
*  IF SY-SUBRC <> 0.
*    CLEAR V_ETEXT.
*    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
*            INTO V_ETEXT.
*    V_ERR_NAME_FLG = 2. "ロックエラー
*  ENDIF.
*ENDFORM.                    " CHK_NAME_UPLOAD
**** END DEL 2015/03/10 ISID13 ****
*&---------------------------------------------------------------------*
*&      Form  ZERO_CONV
*&---------------------------------------------------------------------*
*       ゼロ埋め
*----------------------------------------------------------------------*
FORM ZERO_CONV.
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = WA_FILE-FNAME
IMPORTING
OUTPUT = WA_FILE-FNAME.

CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = WA_FILE-FID
IMPORTING
OUTPUT = WA_FILE-FID.
ENDFORM.                    " ZERO_CONV
**** START DEL 2015/03/10 ISID13 ****
**&---------------------------------------------------------------------*
**&      Form  UNROCK_KNA1
**&---------------------------------------------------------------------*
**       得意先マスタ ロック解除
**----------------------------------------------------------------------*
*FORM UNROCK_KNA1.
** 得意先マスタ: 一般データ解除
*  CALL FUNCTION 'DEQUEUE_EXKNA1'
*    EXPORTING
*      KUNNR = WA_FILE-FNAME.
*
*ENDFORM.                    " UNROCK_KNA1
**** END DEL 2015/03/10 ISID13 ****
*&---------------------------------------------------------------------*
*&      Form  Z_AMDS_READ_SAPSCRIPT_TEXT
*&---------------------------------------------------------------------*
*       テキスト編集
*----------------------------------------------------------------------*
*      -->L_SUBRC  リターンコード
*----------------------------------------------------------------------*
FORM Z_AMDS_READ_SAPSCRIPT_TEXT USING L_SUBRC.
TYPES:NLINE(80)  TYPE C.
DATA: LT_SSTEXT  LIKE TLINE OCCURS 0,
LT_SSTEXT2 LIKE TLINE OCCURS 0,
LW_SSTEXT  LIKE TLINE,
LW_SSTEXT2 LIKE TLINE.
DATA: LT_NETEXT  TYPE NLINE OCCURS 0.
DATA: E_HEADER   TYPE THEAD.

REFRESH: IT_L_TEXT,LT_NETEXT,LT_SSTEXT,LT_SSTEXT2.
CLEAR:   E_HEADER.

CALL FUNCTION 'READ_TEXT'
EXPORTING
ID        = WA_THEAD-TDID
LANGUAGE  = WA_THEAD-TDSPRAS
NAME      = WA_THEAD-TDNAME
OBJECT    = WA_THEAD-TDOBJECT
IMPORTING
HEADER    = E_HEADER
TABLES
LINES     = LT_SSTEXT
EXCEPTIONS
NOT_FOUND = 1
OTHERS    = 8.
IF SY-SUBRC <> 0.
L_SUBRC = SY-SUBRC.
EXIT.
ENDIF.

*132桁切り落としに編集
LOOP AT LT_SSTEXT INTO LW_SSTEXT.
IF LW_SSTEXT-TDFORMAT = CNS_ASTER.
IF NOT LW_SSTEXT2 IS INITIAL.
APPEND  LW_SSTEXT2 TO LT_SSTEXT2.
ENDIF.
CLEAR:LW_SSTEXT2.
LW_SSTEXT2-TDFORMAT = CNS_ASTER.
LW_SSTEXT2-TDLINE   = LW_SSTEXT-TDLINE.
ELSE.
CONCATENATE LW_SSTEXT2-TDLINE LW_SSTEXT-TDLINE
INTO  LW_SSTEXT2-TDLINE.
ENDIF.
ENDLOOP.

IF NOT LW_SSTEXT2 IS INITIAL.
APPEND  LW_SSTEXT2 TO LT_SSTEXT2.
ENDIF.

*文字化け対策
CALL FUNCTION 'CONVERT_ITF_TO_STREAM_TEXT'
TABLES
ITF_TEXT    = LT_SSTEXT2
TEXT_STREAM = LT_NETEXT
EXCEPTIONS
OTHERS      = 8.

IT_L_TEXT[] = LT_NETEXT[].
ENDFORM.                    " Z_AMDS_READ_SAPSCRIPT_TEXT
*&---------------------------------------------------------------------*
*&      Form  STREAM_TO_ITF
*&---------------------------------------------------------------------*
*       テキスト変換
*----------------------------------------------------------------------*
*   -->I_WA_FILE    ファイル用
*   -->I_WA_FILE1   ファイル用:KNB1
*   -->I_WA_FILE2   ファイル用:EINE
*   -->I_WA_FILE3   ファイル用:MVKE
*----------------------------------------------------------------------*
**** START UPD 2015/03/10 ISID13 ****
*FORM STREAM_TO_ITF.
FORM STREAM_TO_ITF USING I_WA_FILE  TYPE T_INFILE
I_WA_FILE1 TYPE T_INFILE_KNLF
I_WA_FILE2 TYPE T_INFILE_EINE
I_WA_FILE3 TYPE T_INFILE_MVKE.
**** END UPD 2015/03/10 ISID13 ****
TYPES:LT_NOTETAB_LINE(132) TYPE C.

DATA:LIT_STREAM TYPE LT_NOTETAB_LINE OCCURS 0,
LWA_STREAM TYPE LT_NOTETAB_LINE,
LIT_ITF    TYPE STANDARD TABLE OF TLINE,
LWA_ITF    TYPE TLINE.
REFRESH: LIT_STREAM ,LIT_ITF .
*    WA_TLINE-TDFORMAT = CNS_ASTER.
*    WA_TLINE-TDLINE   = WA_FILE-TDLINE(132).
*    APPEND WA_TLINE TO IT_TLINE.
**** START UPD 2015/03/10 ISID13 ****
*  LWA_STREAM = WA_FILE-TDLINE(132).
* オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1
OR CNS_LFA1
OR CNS_EINA.
LWA_STREAM = I_WA_FILE-TDLINE(132).
WHEN CNS_KNB1
OR CNS_KNVV
OR CNS_LFB1
OR CNS_LFM1.
LWA_STREAM = I_WA_FILE1-TDLINE(132).
WHEN CNS_EINE.
LWA_STREAM = I_WA_FILE2-TDLINE(132).
WHEN CNS_MVKE.
LWA_STREAM = I_WA_FILE3-TDLINE(132).
WHEN OTHERS.
ENDCASE.
**** END UPD 2015/03/10 ISID13 ****
APPEND LWA_STREAM TO LIT_STREAM.
CALL FUNCTION 'CONVERT_STREAM_TO_ITF_TEXT'
TABLES
TEXT_STREAM = LIT_STREAM
ITF_TEXT    = LIT_ITF
EXCEPTIONS
OTHERS      = 8.
LOOP AT LIT_ITF INTO LWA_ITF.
APPEND LWA_ITF TO IT_TLINE.
ENDLOOP.

ENDFORM.                    " STREAM_TO_ITF
**** START ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  STREAM_TO_ITF_KNMT
*&---------------------------------------------------------------------*
*       テキスト変換
*----------------------------------------------------------------------*
*   -->I_WA_FILE4   ファイル用:KNMT
*----------------------------------------------------------------------*
FORM STREAM_TO_ITF_KNMT USING I_WA_FILE4 TYPE T_INFILE_KNMT.

TYPES:LT_NOTETAB_LINE(132) TYPE C.

DATA:LIT_STREAM TYPE LT_NOTETAB_LINE OCCURS 0,
LWA_STREAM TYPE LT_NOTETAB_LINE,
LIT_ITF    TYPE STANDARD TABLE OF TLINE,
LWA_ITF    TYPE TLINE.
REFRESH: LIT_STREAM ,LIT_ITF .


LWA_STREAM = I_WA_FILE4-TDLINE(132).

APPEND LWA_STREAM TO LIT_STREAM.
CALL FUNCTION 'CONVERT_STREAM_TO_ITF_TEXT'
TABLES
TEXT_STREAM = LIT_STREAM
ITF_TEXT    = LIT_ITF
EXCEPTIONS
OTHERS      = 8.
LOOP AT LIT_ITF INTO LWA_ITF.
APPEND LWA_ITF TO IT_TLINE.
ENDLOOP.

ENDFORM.                    " STREAM_TO_ITF_KNMT
**** END ADD 2015/08/10 ISID21 ****
**** START ADD 2015/03/10 ISID13 ****
*&---------------------------------------------------------------------*
*&      Form  CHECK_INPUT
*&---------------------------------------------------------------------*
*       入力チェック：会社コード
*----------------------------------------------------------------------*
*      <--O_RD_BUKRS   ITAB:対象会社コード
*      <--O_RD_WERKS   ITAB:対象プラント
*----------------------------------------------------------------------*
FORM CHECK_INPUT CHANGING O_RD_BUKRS  TYPE TYP_RD_BUKRS
O_RD_WERKS  TYPE RANGE_T_WERKS.

DATA: LT_BUKRS        TYPE STANDARD TABLE OF T_BUKRS,
LT_SUBRC        TYPE STANDARD TABLE OF SYST,
LT_RANGE_WERKS  TYPE RANGE_T_WERKS,
LWA_BUKRS       TYPE T_BUKRS,
LWA_SUBRC       TYPE SYST,
LWA_RD_BUKRS    TYPE TYP_RH_BUKRS,
LRD_RANGE_WERKS TYPE RANGE_T_WERKS.

CLEAR:O_RD_BUKRS,
O_RD_WERKS,
LT_BUKRS,
LT_SUBRC,
LT_RANGE_WERKS,
LWA_BUKRS,
LWA_SUBRC,
LWA_RD_BUKRS,
LRD_RANGE_WERKS.

* オブジェクト判定
IF P_OBJ <> CNS_KNA1 AND
P_OBJ <> CNS_LFA1 AND
P_OBJ <> CNS_EINA.

*   選択画面の会社コードの存在チェックを行う
SELECT BUKRS
INTO TABLE LT_BUKRS
FROM T001
WHERE BUKRS IN S_BUKRS.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_BUKRS-LOW'.
MESSAGE E057(ZMEGSD01) WITH SPACE.
*     会社コード&1は存在しません
ENDIF.

CLEAR LWA_RD_BUKRS.

LWA_RD_BUKRS-SIGN   = CNS_RNG_SIGN.
LWA_RD_BUKRS-OPTION = CNS_RNG_OPTION.

LOOP AT LT_BUKRS INTO LWA_BUKRS.
*     選択画面の会社コードの権限チェックを行う
AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
ID 'BUKRS' FIELD LWA_BUKRS-BUKRS          "対象会社コード
ID 'ACTVT' FIELD '03'.

IF SY-SUBRC = 0.
LWA_RD_BUKRS-LOW = LWA_BUKRS-BUKRS.
APPEND LWA_RD_BUKRS TO O_RD_BUKRS.
ENDIF.
ENDLOOP.

*   全ての会社コードの権限がない場合
IF O_RD_BUKRS IS INITIAL.
SET CURSOR FIELD 'S_BUKRS-LOW'.
MESSAGE E001(ZMEGSD01).
*     会社コードに対する実行権限がありません
ENDIF.

IF P_OBJ = CNS_EINE.
LRD_RANGE_WERKS = S_WERKS[].

LOOP AT O_RD_BUKRS INTO LWA_RD_BUKRS.
CLEAR LT_RANGE_WERKS.
*       プラントチェック
CALL FUNCTION 'ZEG_ZZ_WERKS_CHK'
EXPORTING
IMPBUKRS           = LWA_RD_BUKRS-LOW
IMPRNGWERKS        = LRD_RANGE_WERKS
IMPORTING
EXPWERKS           = LT_RANGE_WERKS
EXCEPTIONS
WERKS_NOT_EXIST    = 1
WERKS_NO_AUTHORITY = 2
WERKS_BUKRS_ERROR  = 3
OTHERS             = 4.
IF SY-SUBRC = 0.
APPEND LINES OF LT_RANGE_WERKS TO O_RD_WERKS.
ELSE.
LWA_SUBRC-SUBRC = SY-SUBRC.
APPEND LWA_SUBRC TO LT_SUBRC.
ENDIF.
ENDLOOP.

*     ソート
SORT O_RD_WERKS BY LOW ASCENDING.
*     削除
DELETE ADJACENT DUPLICATES FROM O_RD_WERKS
COMPARING LOW.
*     対象プラントを判定
IF O_RD_WERKS IS INITIAL.
READ TABLE LT_SUBRC TRANSPORTING NO FIELDS
WITH KEY SUBRC = CNS_VALUE_THREE.
IF SY-SUBRC = 0.
MESSAGE E035(Z3) WITH SPACE SPACE.
*         会社コード&1とプラント&2の組合せチェックが失敗しました
ELSE.
READ TABLE LT_SUBRC TRANSPORTING NO FIELDS
WITH KEY SUBRC = CNS_VALUE_TWO.
IF SY-SUBRC = 0.
MESSAGE E048(Z3) WITH SPACE.
*           プラント &1 では実行する権限がありません
ELSE.
MESSAGE E086(Z3) WITH SPACE.
*           プラント&が存在しません。
ENDIF.
ENDIF.
ENDIF.
ENDIF.
ENDIF.
ENDFORM.                    " CHECK_INPUT
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_KNA1
*&---------------------------------------------------------------------*
*       得意先マスタ: 一般データの取得
*----------------------------------------------------------------------*
FORM GET_DATA_KNA1.
* 得意先マスタ: 一般データの取得
SELECT KUNNR INTO TABLE IT_KNA1 FROM KNA1
WHERE KUNNR IN S_KUNNR.          "得意先コード
* ソート
SORT IT_KNA1 BY KUNNR ASCENDING.  "得意先コード
ENDFORM.                    " GET_DATA_KNA1
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_KNB1
*&---------------------------------------------------------------------*
*       得意先マスタ(会社コード)の取得
*----------------------------------------------------------------------*
*    <--O_TD_LFB1    仕入先マスタ (会社コ−ド)
*----------------------------------------------------------------------*
FORM GET_DATA_KNB1 CHANGING O_TD_KNB1 TYPE TYP_TD_KNB1.
CLEAR O_TD_KNB1.                  "得意先マスタ（会社コード）
* 得意先マスタ(会社コード)の取得
SELECT KUNNR BUKRS INTO TABLE O_TD_KNB1 FROM KNB1
WHERE KUNNR IN S_KUNNR           "得意先コード
AND BUKRS IN RD_BUKRS.         "会社コード
* ソート
SORT O_TD_KNB1 BY KUNNR ASCENDING "得意先コード
BUKRS ASCENDING."会社コード
ENDFORM.                    " GET_DATA_KNB1
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_KNVV
*&---------------------------------------------------------------------*
*       得意先マスタ: 販売データの取得
*----------------------------------------------------------------------*
*    <--O_TD_KNVV    得意先マスタ: 販売データ
*----------------------------------------------------------------------*
FORM GET_DATA_KNVV CHANGING O_TD_KNVV TYPE TYP_TD_KNVV.
* 販売組織
DATA:LT_TVKO TYPE STANDARD TABLE OF T_TVKO.

CLEAR LT_TVKO.                     "販売組織

* 販売組織の取得
SELECT VKORG BUKRS INTO TABLE LT_TVKO FROM TVKO
WHERE VKORG IN S_VKORG            "販売組織
AND BUKRS IN RD_BUKRS.          "会社コード

* 販売組織を判定
IF LT_TVKO IS NOT INITIAL.
*   得意先マスタ: 販売データの取得
SELECT KUNNR VKORG INTO TABLE O_TD_KNVV FROM KNVV
FOR ALL ENTRIES IN LT_TVKO
WHERE KUNNR IN S_KUNNR           "得意先コード
AND VKORG = LT_TVKO-VKORG      "販売組織
AND VTWEG = CNS_VTWEG
AND SPART = CNS_SPART.
*   ソート
SORT O_TD_KNVV BY KUNNR ASCENDING "得意先コード
VKORG ASCENDING."販売組織
ENDIF.
ENDFORM.                    " GET_DATA_KNVV
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_LFA1
*&---------------------------------------------------------------------*
*       仕入先マスタ(一般セクション)の取得
*----------------------------------------------------------------------*
*    <--O_TD_LFA1    仕入先マスタ (一般セクション)
*----------------------------------------------------------------------*
FORM GET_DATA_LFA1 CHANGING O_TD_LFA1 TYPE TYP_TD_LFA1.
* 仕入先マスタ(一般セクション)の取得
SELECT LIFNR INTO TABLE O_TD_LFA1 FROM LFA1
WHERE LIFNR IN S_LIFNR.            "仕入先勘定コード
* ソート
SORT O_TD_LFA1 BY LIFNR ASCENDING.  "仕入先勘定コード
ENDFORM.                    " GET_DATA_LFA1
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_LFB1
*&---------------------------------------------------------------------*
*       仕入先マスタ(会社コ−ド)の取得
*----------------------------------------------------------------------*
*    <--O_TD_LFB1    仕入先マスタ (会社コ−ド)
*----------------------------------------------------------------------*
FORM GET_DATA_LFB1 CHANGING O_TD_LFB1 TYPE TYP_TD_LFB1.
* 仕入先マスタ(会社コ−ド)の取得
SELECT LIFNR BUKRS INTO TABLE O_TD_LFB1 FROM LFB1
WHERE LIFNR IN S_LIFNR             "仕入先勘定コード
AND BUKRS IN RD_BUKRS.           "会社コード
* ソート
SORT O_TD_LFB1 BY LIFNR ASCENDING   "仕入先勘定コード
BUKRS ASCENDING.  "会社コード
ENDFORM.                    " GET_DATA_LFB1
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_LFM1
*&---------------------------------------------------------------------*
*       仕入先マスタ購買組織データの取得
*----------------------------------------------------------------------*
*    <--O_TD_LFM1    仕入先マスタ購買組織データ
*----------------------------------------------------------------------*
FORM GET_DATA_LFM1 CHANGING O_TD_LFM1 TYPE TYP_TD_LFM1.
* 購買組織
DATA: LT_T024E TYPE STANDARD TABLE OF T_T024E.

CLEAR LT_T024E.                     "購買組織
* 購買組織の取得
SELECT EKORG BUKRS INTO TABLE LT_T024E FROM T024E
WHERE EKORG IN S_EKORG             "購買組織
AND BUKRS IN RD_BUKRS.           "会社コード
* ソート
SORT LT_T024E BY EKORG ASCENDING.
* 購買組織を判定
IF LT_T024E IS NOT INITIAL.
*   仕入先マスタ購買組織データの取得
SELECT LIFNR EKORG INTO TABLE O_TD_LFM1 FROM LFM1
FOR ALL ENTRIES IN LT_T024E
WHERE LIFNR IN S_LIFNR           "仕入先勘定コード
AND EKORG = LT_T024E-EKORG.    "購買組織
*   ソート
SORT O_TD_LFM1 BY LIFNR ASCENDING "仕入先勘定コード
EKORG ASCENDING."購買組織
ENDIF.
ENDFORM.                    " GET_DATA_LFM1
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_EINA
*&---------------------------------------------------------------------*
*       購買情報: 一般データの取得
*----------------------------------------------------------------------*
*    <--O_TD_EINA    購買情報: 一般データ
*----------------------------------------------------------------------*
FORM GET_DATA_EINA CHANGING O_TD_EINA TYPE TYP_TD_EINA.
* 購買情報: 一般データの取得
SELECT INFNR INTO TABLE O_TD_EINA FROM EINA
WHERE INFNR IN S_INFNR.           "購買情報番号
* ソート
SORT O_TD_EINA BY INFNR ASCENDING. "購買情報番号
ENDFORM.                    " GET_DATA_EINA
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_EINE
*&---------------------------------------------------------------------*
*       購買情報: 購買組織データの取得
*----------------------------------------------------------------------*
*    <--O_TD_EINE    購買情報: 購買組織データ
*----------------------------------------------------------------------*
FORM GET_DATA_EINE CHANGING O_TD_EINE TYPE TYP_TD_EINE.
* 購買情報: 購買組織データの取得
SELECT INFNR EKORG ESOKZ WERKS INTO TABLE O_TD_EINE FROM EINE
WHERE INFNR IN S_INFNR             "購買情報番号
AND EKORG IN S_EKORG             "購買組織
AND ESOKZ IN S_ESOKZ             "購買情報カテゴリ
AND WERKS IN RD_WERKS.           "プラント
* ソート
SORT O_TD_EINE BY INFNR ASCENDING   "購買情報番号
EKORG ASCENDING   "購買組織
ESOKZ ASCENDING   "購買情報カテゴリ
WERKS ASCENDING.  "プラント
ENDFORM.                    " GET_DATA_EINE
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_MVKE
*&---------------------------------------------------------------------*
*       品目の販売データの取得
*----------------------------------------------------------------------*
*    <--O_TD_MVKE    品目の販売データ
*----------------------------------------------------------------------*
FORM GET_DATA_MVKE CHANGING O_TD_MVKE TYPE TYP_TD_MVKE.
* 販売組織
DATA:LT_TVKO TYPE STANDARD TABLE OF T_TVKO.

CLEAR LT_TVKO.                    "販売組織

* 販売組織の取得
SELECT VKORG BUKRS INTO TABLE LT_TVKO FROM TVKO
WHERE VKORG IN S_VKORG           "販売組織
AND BUKRS IN RD_BUKRS.         "会社コード
* ソート
SORT LT_TVKO BY VKORG ASCENDING.
* 販売組織を判定
IF LT_TVKO IS NOT INITIAL.
*   品目の販売データの取得
SELECT MATNR VKORG VTWEG INTO TABLE O_TD_MVKE FROM MVKE
FOR ALL ENTRIES IN LT_TVKO
WHERE MATNR IN S_MATNR           "品目コード
AND VKORG  = LT_TVKO-VKORG     "販売組織
AND VTWEG IN S_VTWEG.          "流通チャネル
*   ソート
SORT O_TD_MVKE BY MATNR ASCENDING "品目コード
VKORG ASCENDING "販売組織
VTWEG ASCENDING."流通チャネル
ENDIF.
ENDFORM.                    " GET_DATA_MVKE

**** START ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  GET_DATA_KNMT
*&---------------------------------------------------------------------*
*       得意先/品目情報の取得
*----------------------------------------------------------------------*
*    <--O_TD_KNMT    得意先/品目情報
*----------------------------------------------------------------------*
FORM GET_DATA_KNMT CHANGING O_TD_KNMT TYPE TYP_TD_KNMT.
* 販売組織
DATA:LT_TVKO TYPE STANDARD TABLE OF T_TVKO.

CLEAR LT_TVKO.                    "販売組織

* 販売組織の取得
SELECT VKORG BUKRS INTO TABLE LT_TVKO FROM TVKO
WHERE VKORG IN S_VKORG           "販売組織
AND BUKRS IN RD_BUKRS.         "会社コード
* ソート
SORT LT_TVKO BY VKORG ASCENDING.
* 販売組織を判定
IF LT_TVKO IS NOT INITIAL.
*   得意先/品目情報の取得
SELECT KUNNR VKORG VTWEG MATNR INTO TABLE O_TD_KNMT FROM KNMT
FOR ALL ENTRIES IN LT_TVKO
WHERE KUNNR IN S_KUNNR           "得意先コード
AND VKORG  = LT_TVKO-VKORG     "販売組織
AND VTWEG IN S_VTWEG           "流通チャネル
AND MATNR IN S_MATNR.          "品目コード
*   ソート
SORT O_TD_KNMT BY KUNNR ASCENDING "得意先コード
VKORG ASCENDING "販売組織
VTWEG ASCENDING "流通チャネル
MATNR ASCENDING."品目コード
ENDIF.
ENDFORM.                    " GET_DATA_KNMT
**** END ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_KNA1
*&---------------------------------------------------------------------*
*       得意先処理
*----------------------------------------------------------------------*
FORM READ_TEXT_KNA1.
DATA:LWA_FILE   TYPE T_INFILE,            "STRU:入力ファイル用
LWA_FILE1  TYPE T_INFILE_KNLF,       "STRU:入力ファイル用
LWA_FILE2  TYPE T_INFILE_EINE,       "STRU:入力ファイル用
LWA_FILE3  TYPE T_INFILE_MVKE.       "STRU:入力ファイル用

CHECK NOT IT_KNA1[] IS INITIAL.   "該当得意先が無ければ処理しない

* ヘッダテキスト行セット
PERFORM SET_HEADER_LINE USING 'ZSEGSD0028' " 対象名
CHANGING IT_DFILE.    " 出力ファイル

* 得意先ループ
LOOP AT IT_KNA1 INTO WA_KNA1.
CLEAR:LWA_FILE,WA_THEAD.
LWA_FILE-FNAME   = WA_KNA1-KUNNR.
WA_THEAD-TDNAME = WA_KNA1-KUNNR.
*   テキストIDループ
LOOP AT IT_TTXID INTO WA_TTXID.
CLEAR:V_LINECNT.              "得意先/テキストIDごとに行番リセット
REFRESH:IT_TLINE.             "テキスト取得用内部テーブル初期化
LWA_FILE-FNAME    = WA_KNA1-KUNNR.
LWA_FILE-FID      = WA_TTXID-TDID.
WA_THEAD-TDID     = WA_TTXID-TDID.
WA_THEAD-TDSPRAS  = P_LANG.
WA_THEAD-TDOBJECT = P_OBJ.
*     テキストを取得し、内部テーブルに格納
PERFORM EDIT_FILE USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDLOOP.
ENDLOOP.
ENDFORM.                    " READ_TEXT_KNA1
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_KNB1
*&---------------------------------------------------------------------*
*       得意先マスタ（会社コード）処理
*----------------------------------------------------------------------*
*    -->I_TD_KNB1        得意先マスタ
*----------------------------------------------------------------------*
FORM READ_TEXT_KNB1 USING I_TD_KNB1 TYPE TYP_TD_KNB1.

DATA:LWA_KNB1   TYPE T_KNB1,                "STRU:得意先マスタ（会社コード）
LWA_FILE   TYPE T_INFILE,              "STRU:入力ファイル用
LWA_FILE1  TYPE T_INFILE_KNLF,         "STRU:入力ファイル用
LWA_FILE2  TYPE T_INFILE_EINE,         "STRU:入力ファイル用
LWA_FILE3  TYPE T_INFILE_MVKE.         "STRU:入力ファイル用

* 該当得意先マスタが無ければ処理しない
CHECK I_TD_KNB1[] IS NOT INITIAL.

* ヘッダテキスト行セット
PERFORM SET_HEADER_LINE USING 'ZSEGSD0029' " 対象名
CHANGING IT_DFILE.    " 出力ファイル
* 得意先ループ
LOOP AT I_TD_KNB1 INTO LWA_KNB1.
CLEAR:LWA_FILE1,WA_THEAD.
LWA_FILE1-FNAME = LWA_KNB1-KUNNR.        "得意先コード
WA_THEAD-TDNAME = LWA_KNB1-KUNNR.        "得意先コード
WA_THEAD-TDNAME+10(4) = LWA_KNB1-BUKRS.  "会社コード

*   テキストIDループ
LOOP AT IT_TTXID INTO WA_TTXID.
CLEAR:V_LINECNT.              "得意先/テキストIDごとに行番リセット
REFRESH:IT_TLINE.             "テキスト取得用内部テーブル初期化
LWA_FILE1-FNAME   = LWA_KNB1-KUNNR.
LWA_FILE1-FNAME1  = LWA_KNB1-BUKRS.
LWA_FILE1-FID     = WA_TTXID-TDID.
WA_THEAD-TDID     = WA_TTXID-TDID.
WA_THEAD-TDSPRAS  = P_LANG.
WA_THEAD-TDOBJECT = P_OBJ.
*     テキストを取得し、内部テーブルに格納
PERFORM EDIT_FILE USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDLOOP.
ENDLOOP.
ENDFORM.                    " READ_TEXT_KNB1
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_KNVV
*&---------------------------------------------------------------------*
*       得意先マスタ: 販売データ
*----------------------------------------------------------------------*
*    -->I_TD_KNVV    得意先マスタ: 販売データ
*----------------------------------------------------------------------*
FORM READ_TEXT_KNVV USING I_TD_KNVV TYPE TYP_TD_KNVV.
DATA:LW_TDNAME(10) TYPE C,          "名称変数
LWA_KNVV      TYPE T_KNVV,     "得意先マスタ: 販売データ
LWA_FILE   TYPE T_INFILE,      "STRU:入力ファイル用
LWA_FILE1  TYPE T_INFILE_KNLF, "STRU:入力ファイル用
LWA_FILE2  TYPE T_INFILE_EINE, "STRU:入力ファイル用
LWA_FILE3  TYPE T_INFILE_MVKE. "STRU:入力ファイル用

CHECK I_TD_KNVV[] IS NOT INITIAL.   "該当得意先マスタが無ければ処理しない

CLEAR LW_TDNAME.                    "名称変数
* ヘッダテキスト行セット
PERFORM SET_HEADER_LINE USING 'ZSEGSD0030' " 対象名
CHANGING IT_DFILE.    " 出力ファイル

* 得意先ループ
LOOP AT I_TD_KNVV INTO LWA_KNVV.
CLEAR:LWA_FILE1,WA_THEAD.
WA_FILE-FNAME   = LWA_KNVV-KUNNR. "得意先コード
CONCATENATE LWA_KNVV-VKORG        "販売組織
CNS_VTWEG             "流通チャネル
CNS_SPART             "製品部門
INTO LW_TDNAME.
WA_THEAD-TDNAME = LWA_KNVV-KUNNR. "得意先コード
WA_THEAD-TDNAME+10(10) = LW_TDNAME.

*   テキストIDループ
LOOP AT IT_TTXID INTO WA_TTXID.
CLEAR:V_LINECNT.                "得意先/テキストIDごとに行番リセット
REFRESH:IT_TLINE.               "テキスト取得用内部テーブル初期化
LWA_FILE1-FNAME   = LWA_KNVV-KUNNR.
LWA_FILE1-FNAME1  = LWA_KNVV-VKORG.
LWA_FILE1-FID     = WA_TTXID-TDID.
WA_THEAD-TDID     = WA_TTXID-TDID.
WA_THEAD-TDSPRAS  = P_LANG.
WA_THEAD-TDOBJECT = P_OBJ.
*     テキストを取得し、内部テーブルに格納
PERFORM EDIT_FILE USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDLOOP.
ENDLOOP.
ENDFORM.                    " READ_TEXT_KNVV
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_LFA1
*&---------------------------------------------------------------------*
*       仕入先マスタ (一般セクション)処理
*----------------------------------------------------------------------*
*    -->I_TD_LFA1    仕入先マスタ (一般セクション)
*----------------------------------------------------------------------*
FORM READ_TEXT_LFA1 USING I_TD_LFA1 TYPE TYP_TD_LFA1.
DATA:LWA_LFA1   TYPE T_LFA1,          "STRU:仕入先マスタ
LWA_FILE   TYPE T_INFILE,        "STRU:入力ファイル用
LWA_FILE1  TYPE T_INFILE_KNLF,   "STRU:入力ファイル用
LWA_FILE2  TYPE T_INFILE_EINE,   "STRU:入力ファイル用
LWA_FILE3  TYPE T_INFILE_MVKE.   "STRU:入力ファイル用

* 該当仕入先が無ければ処理しない
CHECK I_TD_LFA1[] IS NOT INITIAL.

* ヘッダテキスト行セット
PERFORM SET_HEADER_LINE USING 'ZSEGSD0031' " 対象名
CHANGING IT_DFILE.    " 出力ファイル
* 仕入先コードループ
LOOP AT I_TD_LFA1 INTO LWA_LFA1.
CLEAR:LWA_FILE,WA_THEAD.
WA_FILE-FNAME   = LWA_LFA1-LIFNR. " 仕入先コード
WA_THEAD-TDNAME = LWA_LFA1-LIFNR. " 仕入先コード

*   テキストIDループ
LOOP AT IT_TTXID INTO WA_TTXID.
CLEAR:V_LINECNT.               "仕入先コード/テキストIDごとに行番リセット
REFRESH:IT_TLINE.              "テキスト取得用内部テーブル初期化
LWA_FILE-FNAME    = LWA_LFA1-LIFNR.
LWA_FILE-FID      = WA_TTXID-TDID.
WA_THEAD-TDID     = WA_TTXID-TDID.
WA_THEAD-TDSPRAS  = P_LANG.
WA_THEAD-TDOBJECT = P_OBJ.
*     テキストを取得し、内部テーブルに格納
PERFORM EDIT_FILE USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDLOOP.
ENDLOOP.
ENDFORM.                    " READ_TEXT_LFA1
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_LFB1
*&---------------------------------------------------------------------*
*       仕入先マスタ (会社コ−ド)処理
*----------------------------------------------------------------------*
*    -->I_TD_LFB1    仕入先マスタ (会社コ−ド)
*----------------------------------------------------------------------*
FORM READ_TEXT_LFB1 USING I_TD_LFB1 TYPE TYP_TD_LFB1.
DATA:LWA_LFB1   TYPE T_LFB1,          "STRU:仕入先マスタ (会社コ−ド)
LWA_FILE   TYPE T_INFILE,        "STRU:入力ファイル用
LWA_FILE1  TYPE T_INFILE_KNLF,   "STRU:入力ファイル用
LWA_FILE2  TYPE T_INFILE_EINE,   "STRU:入力ファイル用
LWA_FILE3  TYPE T_INFILE_MVKE.   "STRU:入力ファイル用

CHECK I_TD_LFB1[] IS NOT INITIAL.          "該当仕入先が無ければ処理しない

* ヘッダテキスト行セット
PERFORM SET_HEADER_LINE USING 'ZSEGSD0032' " 対象名
CHANGING IT_DFILE.    " 出力ファイル
* 仕入先ループ
LOOP AT I_TD_LFB1 INTO LWA_LFB1.
CLEAR:LWA_FILE1,WA_THEAD.
LWA_FILE1-FNAME = LWA_LFB1-LIFNR.        " 仕入先コード
WA_THEAD-TDNAME = LWA_LFB1-LIFNR.        " 仕入先コード
WA_THEAD-TDNAME+10(4) = LWA_LFB1-BUKRS.  " 会社コード

*   テキストIDループ
LOOP AT IT_TTXID INTO WA_TTXID.
CLEAR:V_LINECNT.               " 仕入先コード/テキストIDごとに行番リセット
REFRESH:IT_TLINE.              " テキスト取得用内部テーブル初期化
LWA_FILE1-FNAME   = LWA_LFB1-LIFNR.
LWA_FILE1-FNAME1  = LWA_LFB1-BUKRS.
LWA_FILE1-FID     = WA_TTXID-TDID.
WA_THEAD-TDID     = WA_TTXID-TDID.
WA_THEAD-TDSPRAS  = P_LANG.
WA_THEAD-TDOBJECT = P_OBJ.
*     テキストを取得し、内部テーブルに格納
PERFORM EDIT_FILE USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDLOOP.
ENDLOOP.
ENDFORM.                    " READ_TEXT_LFB1
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_LFM1
*&---------------------------------------------------------------------*
*       仕入先マスタ購買組織データ処理
*----------------------------------------------------------------------*
*    -->I_TD_LFM1    仕入先マスタ購買組織データ
*----------------------------------------------------------------------*
FORM READ_TEXT_LFM1 USING I_TD_LFM1 TYPE TYP_TD_LFM1.
DATA:LWA_LFM1   TYPE T_LFM1,          "STRU:仕入先マスタ購買組織データ
LWA_FILE   TYPE T_INFILE,        "STRU:入力ファイル用
LWA_FILE1  TYPE T_INFILE_KNLF,   "STRU:入力ファイル用
LWA_FILE2  TYPE T_INFILE_EINE,   "STRU:入力ファイル用
LWA_FILE3  TYPE T_INFILE_MVKE.   "STRU:入力ファイル用

* 該当仕入先が無ければ処理しない
CHECK I_TD_LFM1[] IS NOT INITIAL.

* ヘッダテキスト行セット
PERFORM SET_HEADER_LINE USING 'ZSEGSD0033' " 対象名
CHANGING IT_DFILE.    " 出力ファイル
* 仕入先ループ
LOOP AT I_TD_LFM1 INTO LWA_LFM1.
CLEAR:LWA_FILE1,WA_THEAD.
LWA_FILE1-FNAME = LWA_LFM1-LIFNR.        "仕入先コード
WA_THEAD-TDNAME = LWA_LFM1-LIFNR.        "仕入先コード
WA_THEAD-TDNAME+10(4) = LWA_LFM1-EKORG.  "購買組織

*   テキストIDループ
LOOP AT IT_TTXID INTO WA_TTXID.
CLEAR:V_LINECNT.             "仕入先コード/テキストIDごとに行番リセット
REFRESH:IT_TLINE.            "テキスト取得用内部テーブル初期化
LWA_FILE1-FNAME   = LWA_LFM1-LIFNR.
LWA_FILE1-FNAME1  = LWA_LFM1-EKORG.
LWA_FILE1-FID     = WA_TTXID-TDID.
WA_THEAD-TDID     = WA_TTXID-TDID.
WA_THEAD-TDSPRAS  = P_LANG.
WA_THEAD-TDOBJECT = P_OBJ.
*     テキストを取得し、内部テーブルに格納
PERFORM EDIT_FILE USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDLOOP.
ENDLOOP.
ENDFORM.                    " READ_TEXT_LFM1
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_EINA
*&---------------------------------------------------------------------*
*       購買情報: 一般データ処理
*----------------------------------------------------------------------*
*    -->I_TD_EINA    購買情報: 一般データ
*----------------------------------------------------------------------*
FORM READ_TEXT_EINA USING I_TD_EINA TYPE TYP_TD_EINA.
DATA: LWA_EINA   TYPE T_EINA,          "STRU:購買情報: 一般データ
LWA_FILE   TYPE T_INFILE,        "STRU:入力ファイル用
LWA_FILE1  TYPE T_INFILE_KNLF,   "STRU:入力ファイル用
LWA_FILE2  TYPE T_INFILE_EINE,   "STRU:入力ファイル用
LWA_FILE3  TYPE T_INFILE_MVKE.   "STRU:入力ファイル用

* 該当購買情報が無ければ処理しない
CHECK I_TD_EINA[] IS NOT INITIAL.

* ヘッダテキスト行セット
PERFORM SET_HEADER_LINE USING 'ZSEGSD0034' " 対象名
CHANGING IT_DFILE.    " 出力ファイル
* 購買情報ループ
LOOP AT I_TD_EINA INTO LWA_EINA.
CLEAR:LWA_FILE,WA_THEAD.
WA_FILE-FNAME   = LWA_EINA-INFNR.        "購買情報番号
WA_THEAD-TDNAME = LWA_EINA-INFNR.        "購買情報番号

*   テキストIDループ
LOOP AT IT_TTXID INTO WA_TTXID.
CLEAR:V_LINECNT.             "購買情報番号/テキストIDごとに行番リセット
REFRESH:IT_TLINE.            "テキスト取得用内部テーブル初期化
LWA_FILE-FNAME    = LWA_EINA-INFNR.
LWA_FILE-FID      = WA_TTXID-TDID.
WA_THEAD-TDID     = WA_TTXID-TDID.
WA_THEAD-TDSPRAS  = P_LANG.
WA_THEAD-TDOBJECT = P_OBJ.
*     テキストを取得し、内部テーブルに格納
PERFORM EDIT_FILE USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDLOOP.
ENDLOOP.
ENDFORM.                    " READ_TEXT_EINA
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_EINE
*&---------------------------------------------------------------------*
*       購買情報: 購買組織データ処理
*----------------------------------------------------------------------*
*    -->I_TD_EINE    購買情報: 購買組織データ
*----------------------------------------------------------------------*
FORM READ_TEXT_EINE USING I_TD_EINE TYPE TYP_TD_EINE.
DATA:LW_TDNAME(10) TYPE C,             "名称変数
LWA_EINE      TYPE T_EINE,        "STRU:購買情報: 購買組織データ
LWA_FILE      TYPE T_INFILE,      "STRU:入力ファイル用
LWA_FILE1     TYPE T_INFILE_KNLF, "STRU:入力ファイル用
LWA_FILE2     TYPE T_INFILE_EINE, "STRU:入力ファイル用
LWA_FILE3     TYPE T_INFILE_MVKE. "STRU:入力ファイル用

* 該当購買情報が無ければ処理しない
CHECK I_TD_EINE[] IS NOT INITIAL.

CLEAR LW_TDNAME.                   "名称変数
* ヘッダテキスト行セット
PERFORM SET_HEADER_LINE USING 'ZSEGSD0035' " 対象名
CHANGING IT_DFILE.    " 出力ファイル
* 購買情報ループ
LOOP AT I_TD_EINE INTO LWA_EINE.
CLEAR:LWA_FILE2,WA_THEAD.
LWA_FILE2-FNAME = LWA_EINE-INFNR.        "購買情報番号
WA_THEAD-TDNAME = LWA_EINE-INFNR.        "購買情報番号
CONCATENATE LWA_EINE-EKORG               "購買組織
LWA_EINE-ESOKZ               "購買情報カテゴリ
LWA_EINE-WERKS               "プラント
INTO LW_TDNAME.                   "名称変数
WA_THEAD-TDNAME+10(10) = LW_TDNAME.      "名称

*   テキストIDループ
LOOP AT IT_TTXID INTO WA_TTXID.
CLEAR:V_LINECNT.             "購買情報番号/テキストIDごとに行番リセット
REFRESH:IT_TLINE.            "テキスト取得用内部テーブル初期化
LWA_FILE2-FNAME   = LWA_EINE-INFNR.
LWA_FILE2-FNAME1  = LWA_EINE-EKORG.
LWA_FILE2-FNAME2  = LWA_EINE-ESOKZ.
LWA_FILE2-FNAME3  = LWA_EINE-WERKS.
LWA_FILE2-FID     = WA_TTXID-TDID.
WA_THEAD-TDID     = WA_TTXID-TDID.
WA_THEAD-TDSPRAS  = P_LANG.
WA_THEAD-TDOBJECT = P_OBJ.
*     テキストを取得し、内部テーブルに格納
PERFORM EDIT_FILE USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDLOOP.
ENDLOOP.
ENDFORM.                    " READ_TEXT_EINE
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_MVKE
*&---------------------------------------------------------------------*
*       品目の販売データ処理
*----------------------------------------------------------------------*
*    -->I_TD_MVKE    品目の販売データ
*----------------------------------------------------------------------*
FORM READ_TEXT_MVKE USING I_TD_MVKE TYPE TYP_TD_MVKE.
DATA:LW_TDNAME(10) TYPE C,             "名称変数
LWA_MVKE      TYPE T_MVKE,        "STRU:品目の販売データ
LWA_FILE      TYPE T_INFILE,      "STRU:入力ファイル用
LWA_FILE1     TYPE T_INFILE_KNLF, "STRU:入力ファイル用
LWA_FILE2     TYPE T_INFILE_EINE, "STRU:入力ファイル用
LWA_FILE3     TYPE T_INFILE_MVKE. "STRU:入力ファイル用

* 品目の販売データが無ければ処理しない
CHECK I_TD_MVKE[] IS NOT INITIAL.

CLEAR LW_TDNAME.                   "名称変数

* ヘッダテキスト行セット
PERFORM SET_HEADER_LINE USING 'ZSEGSD0036' " 対象名
CHANGING IT_DFILE.    " 出力ファイル
* 品目の販売データループ
LOOP AT I_TD_MVKE INTO LWA_MVKE.
CLEAR:LWA_FILE3,WA_THEAD.
LWA_FILE3-FNAME  = LWA_MVKE-MATNR.       "品目コード
WA_THEAD-TDNAME  = LWA_MVKE-MATNR.       "品目コード
CONCATENATE LWA_MVKE-VKORG               "販売組織
LWA_MVKE-VTWEG               "流通チャネル
INTO LW_TDNAME.
WA_THEAD-TDNAME+18(10) = LW_TDNAME.

*   テキストIDループ
LOOP AT IT_TTXID INTO WA_TTXID.
CLEAR:V_LINECNT.             "品目コード/テキストIDごとに行番リセット
REFRESH:IT_TLINE.            "テキスト取得用内部テーブル初期化
LWA_FILE3-FNAME   = LWA_MVKE-MATNR.
LWA_FILE3-FNAME1  = LWA_MVKE-VKORG.
LWA_FILE3-FNAME2  = LWA_MVKE-VTWEG.
LWA_FILE3-FID     = WA_TTXID-TDID.
WA_THEAD-TDID     = WA_TTXID-TDID.
WA_THEAD-TDSPRAS  = P_LANG.
WA_THEAD-TDOBJECT = P_OBJ.
*     テキストを取得し、内部テーブルに格納
PERFORM EDIT_FILE USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDLOOP.
ENDLOOP.
ENDFORM.                    " READ_TEXT_MVKE

**** START ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  READ_TEXT_KNMT
*&---------------------------------------------------------------------*
*       得意先/品目情報処理
*----------------------------------------------------------------------*
*    -->I_TD_KNMT    得意先/品目情報
*----------------------------------------------------------------------*
FORM READ_TEXT_KNMT USING I_TD_KNMT TYPE TYP_TD_KNMT.
DATA:LW_TDNAME(10) TYPE C,             "名称変数
LWA_KNMT      TYPE T_KNMT,        "STRU:品目の販売データ
LWA_FILE4     TYPE T_INFILE_KNMT. "STRU:入力ファイル用

* 品目の販売データが無ければ処理しない
CHECK I_TD_KNMT[] IS NOT INITIAL.

CLEAR LW_TDNAME.                   "名称変数

* ヘッダテキスト行セット
PERFORM SET_HEADER_LINE USING 'ZSEGSD0037' " 対象名
CHANGING IT_DFILE.    " 出力ファイル
* 得意先/品目情報処理
LOOP AT I_TD_KNMT INTO LWA_KNMT.
CLEAR:LWA_FILE4,WA_THEAD.
LWA_FILE4-FNAME  = LWA_KNMT-KUNNR.       "得意先コード
CONCATENATE LWA_KNMT-VKORG               "販売組織
LWA_KNMT-VTWEG               "流通チャネル
INTO LW_TDNAME.
WA_THEAD-TDNAME = LW_TDNAME.
WA_THEAD-TDNAME+6(10) = LWA_KNMT-KUNNR.       "得意先コード
WA_THEAD-TDNAME+16(18) = LWA_KNMT-MATNR.

*   テキストIDループ
LOOP AT IT_TTXID INTO WA_TTXID.
CLEAR:V_LINECNT.    "得意先/品目情報/テキストIDごとに行番リセット
REFRESH:IT_TLINE.            "テキスト取得用内部テーブル初期化
LWA_FILE4-FNAME   = LWA_KNMT-KUNNR.
LWA_FILE4-FNAME1  = LWA_KNMT-VKORG.
LWA_FILE4-FNAME2  = LWA_KNMT-VTWEG.
LWA_FILE4-FNAME3  = LWA_KNMT-MATNR.
LWA_FILE4-FID     = WA_TTXID-TDID.
WA_THEAD-TDID     = WA_TTXID-TDID.
WA_THEAD-TDSPRAS  = P_LANG.
WA_THEAD-TDOBJECT = P_OBJ.
*     テキストを取得し、内部テーブルに格納
PERFORM EDIT_FILE_KNMT USING LWA_FILE4.
ENDLOOP.
ENDLOOP.
ENDFORM.                    " READ_TEXT_KNMT
**** END ADD 2015/08/10 ISID21 ****

*&---------------------------------------------------------------------*
*&      Form  GET_GRP1_FILE
*&---------------------------------------------------------------------*
*       グループ1データの取得
*----------------------------------------------------------------------*
FORM GET_GROUP1_FILE .
* タブで区切って編集
LOOP AT IT_DFILE INTO WA_DFILE.
CLEAR WA_FILE.
SPLIT WA_DFILE-LTEXT
AT CNS_TAB
INTO WA_FILE-FNAME   "テキスト名
WA_FILE-FID     "テキストID
WA_FILE-FLINE   "テキスト行数
WA_FILE-TDLINE. "テキスト内容
*   ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING WA_FILE-FNAME.
*   ゼロ埋め:テキストID
PERFORM CONVT_FILE_INPUT USING WA_FILE-FID.
APPEND WA_FILE TO IT_FILE.
ENDLOOP.
ENDFORM.                    " GET_GRP1_FILE
*&---------------------------------------------------------------------*
*&      Form  GET_GROUP2_FILE
*&---------------------------------------------------------------------*
*       グループ2データの取得
*----------------------------------------------------------------------*
FORM GET_GROUP2_FILE .
DATA LWA_FILE1 TYPE T_INFILE_KNLF.
* タブで区切って編集
LOOP AT IT_DFILE INTO WA_DFILE.
CLEAR LWA_FILE1.
SPLIT WA_DFILE-LTEXT
AT CNS_TAB
INTO LWA_FILE1-FNAME   "テキスト名
LWA_FILE1-FNAME1  "テキスト名1
LWA_FILE1-FID     "テキストID
LWA_FILE1-FLINE   "テキスト行数
LWA_FILE1-TDLINE. "テキスト内容
*   ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING LWA_FILE1-FNAME.
*   ゼロ埋め:テキストID
PERFORM CONVT_FILE_INPUT USING LWA_FILE1-FID.
APPEND LWA_FILE1 TO IT_FILE_KNLF.
ENDLOOP.
ENDFORM.                    " GET_GROUP2_FILE
*&---------------------------------------------------------------------*
*&      Form  GET_GROUP3_FILE
*&---------------------------------------------------------------------*
*       グループ3データの取得
*----------------------------------------------------------------------*
FORM GET_GROUP3_FILE.
DATA LWA_FILE2 TYPE T_INFILE_EINE.
* タブで区切って編集
LOOP AT IT_DFILE INTO WA_DFILE.
CLEAR LWA_FILE2.
SPLIT WA_DFILE-LTEXT
AT CNS_TAB
INTO LWA_FILE2-FNAME   "テキスト名
LWA_FILE2-FNAME1  "テキスト名1
LWA_FILE2-FNAME2  "テキスト名2
LWA_FILE2-FNAME3  "テキスト名3
LWA_FILE2-FID     "テキストID
LWA_FILE2-FLINE   "テキスト行数
LWA_FILE2-TDLINE. "テキスト内容
*   ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING LWA_FILE2-FNAME.
*   ゼロ埋め:テキストID
PERFORM CONVT_FILE_INPUT USING LWA_FILE2-FID.
APPEND LWA_FILE2 TO IT_FILE_EINE.
ENDLOOP.
ENDFORM.                    " GET_GROUP3_FILE
*&---------------------------------------------------------------------*
*&      Form  GET_GROUP4_FILE
*&---------------------------------------------------------------------*
*       グループ4データの取得
*----------------------------------------------------------------------*
FORM GET_GROUP4_FILE .
DATA LWA_FILE3 TYPE T_INFILE_MVKE.
* タブで区切って編集
LOOP AT IT_DFILE INTO WA_DFILE.
CLEAR LWA_FILE3.
SPLIT WA_DFILE-LTEXT
AT CNS_TAB
INTO LWA_FILE3-FNAME   "テキスト名
LWA_FILE3-FNAME1  "テキスト名1
LWA_FILE3-FNAME2  "テキスト名2
LWA_FILE3-FID     "テキストID
LWA_FILE3-FLINE   "テキスト行数
LWA_FILE3-TDLINE. "テキスト内容
*   ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING LWA_FILE3-FNAME.
*   ゼロ埋め:テキストID
PERFORM CONVT_FILE_INPUT USING LWA_FILE3-FID.
APPEND LWA_FILE3 TO IT_FILE_MVKE.
ENDLOOP.
ENDFORM.                    " GET_GROUP4_FILE
**** START ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  GET_GROUP3_FILE
*&---------------------------------------------------------------------*
*       グループ3データの取得
*----------------------------------------------------------------------*
FORM GET_GROUP5_FILE.
DATA LWA_FILE4 TYPE T_INFILE_KNMT.
* タブで区切って編集
LOOP AT IT_DFILE INTO WA_DFILE.
CLEAR LWA_FILE4.
SPLIT WA_DFILE-LTEXT
AT CNS_TAB
INTO LWA_FILE4-FNAME   "テキスト名
LWA_FILE4-FNAME1  "テキスト名1
LWA_FILE4-FNAME2  "テキスト名2
LWA_FILE4-FNAME3  "テキスト名3
LWA_FILE4-FID     "テキストID
LWA_FILE4-FLINE   "テキスト行数
LWA_FILE4-TDLINE. "テキスト内容
*   ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING LWA_FILE4-FNAME.
*   ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING LWA_FILE4-FNAME3.
*   ゼロ埋め:テキストID
PERFORM CONVT_FILE_INPUT USING LWA_FILE4-FID.
APPEND LWA_FILE4 TO IT_FILE_KNMT.
ENDLOOP.
ENDFORM.                    " GET_GROUP5_FILE

*&---------------------------------------------------------------------*
*&      Form  GET_GROUP1_FILE_SERVER
*&---------------------------------------------------------------------*
*       グループ1データの取得
*----------------------------------------------------------------------*
FORM GET_GROUP1_FILE_SERVER .
* タブで区切って編集
CLEAR WA_FILE.
SPLIT V_LONGTXT
AT CNS_TAB
INTO WA_FILE-FNAME   "テキスト名
WA_FILE-FID     "テキストID
WA_FILE-FLINE   "テキスト行数
WA_FILE-TDLINE. "テキスト内容
* ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING WA_FILE-FNAME.
* ゼロ埋め:テキストID
PERFORM CONVT_FILE_INPUT USING WA_FILE-FID.
APPEND WA_FILE TO IT_FILE.

ENDFORM.                    " GET_GROUP1_FILE_SERVER

*&---------------------------------------------------------------------*
*&      Form  GET_GROUP2_FILE_SERVER
*&---------------------------------------------------------------------*
*       グループ2データの取得
*----------------------------------------------------------------------*
FORM GET_GROUP2_FILE_SERVER .

DATA LWA_FILE1 TYPE T_INFILE_KNLF.
* タブで区切って編集
CLEAR LWA_FILE1.

SPLIT V_LONGTXT
AT CNS_TAB
INTO LWA_FILE1-FNAME   "テキスト名
LWA_FILE1-FNAME1  "テキスト名1
LWA_FILE1-FID     "テキストID
LWA_FILE1-FLINE   "テキスト行数
LWA_FILE1-TDLINE. "テキスト内容

* ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING LWA_FILE1-FNAME.
* ゼロ埋め:テキストID
PERFORM CONVT_FILE_INPUT USING LWA_FILE1-FID.
APPEND LWA_FILE1 TO IT_FILE_KNLF.

ENDFORM.                    " GET_GROUP2_FILE_SERVER

*&---------------------------------------------------------------------*
*&      Form  GET_GROUP3_FILE_SERVER
*&---------------------------------------------------------------------*
*       グループ3データの取得
*----------------------------------------------------------------------*
FORM GET_GROUP3_FILE_SERVER .
DATA LWA_FILE2 TYPE T_INFILE_EINE.
* タブで区切って編集
CLEAR LWA_FILE2.

SPLIT V_LONGTXT
AT CNS_TAB
INTO LWA_FILE2-FNAME   "テキスト名
LWA_FILE2-FNAME1  "テキスト名1
LWA_FILE2-FNAME2  "テキスト名2
LWA_FILE2-FNAME3  "テキスト名3
LWA_FILE2-FID     "テキストID
LWA_FILE2-FLINE   "テキスト行数
LWA_FILE2-TDLINE. "テキスト内容
* ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING LWA_FILE2-FNAME.
* ゼロ埋め:テキストID
PERFORM CONVT_FILE_INPUT USING LWA_FILE2-FID.
APPEND LWA_FILE2 TO IT_FILE_EINE.

ENDFORM.                    " GET_GROUP3_FILE_SERVER

*&---------------------------------------------------------------------*
*&      Form  GET_GROUP4_FILE_SERVER
*&---------------------------------------------------------------------*
*       グループ4データの取得
*----------------------------------------------------------------------*
FORM GET_GROUP4_FILE_SERVER .
DATA LWA_FILE3 TYPE T_INFILE_MVKE.
* タブで区切って編集
CLEAR LWA_FILE3.

SPLIT V_LONGTXT
AT CNS_TAB
INTO LWA_FILE3-FNAME   "テキスト名
LWA_FILE3-FNAME1  "テキスト名1
LWA_FILE3-FNAME2  "テキスト名2
LWA_FILE3-FID     "テキストID
LWA_FILE3-FLINE   "テキスト行数
LWA_FILE3-TDLINE. "テキスト内容
* ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING LWA_FILE3-FNAME.
* ゼロ埋め:テキストID
PERFORM CONVT_FILE_INPUT USING LWA_FILE3-FID.
APPEND LWA_FILE3 TO IT_FILE_MVKE.

ENDFORM.                    " GET_GROUP4_FILE_SERVER

*&---------------------------------------------------------------------*
*&      Form  GET_GROUP5_FILE_SERVER
*&---------------------------------------------------------------------*
*       グループ5データの取得
*----------------------------------------------------------------------*
FORM GET_GROUP5_FILE_SERVER .
DATA LWA_FILE4 TYPE T_INFILE_KNMT.
* タブで区切って編集
CLEAR LWA_FILE4.

SPLIT V_LONGTXT
AT CNS_TAB
INTO LWA_FILE4-FNAME   "テキスト名
LWA_FILE4-FNAME1  "テキスト名1
LWA_FILE4-FNAME2  "テキスト名2
LWA_FILE4-FNAME3  "テキスト名3
LWA_FILE4-FID     "テキストID
LWA_FILE4-FLINE   "テキスト行数
LWA_FILE4-TDLINE. "テキスト内容

* ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING LWA_FILE4-FNAME.
* ゼロ埋め:テキスト名
PERFORM CONVT_FILE_INPUT USING LWA_FILE4-FNAME3.
* ゼロ埋め:テキストID
PERFORM CONVT_FILE_INPUT USING LWA_FILE4-FID.
APPEND LWA_FILE4 TO IT_FILE_KNMT.

ENDFORM.                    " GET_GROUP5_FILE_SERVER

**** END ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  GET_KNB1_CHK
*&---------------------------------------------------------------------*
*       得意先マスタ（会社コード）チェック
*----------------------------------------------------------------------*
*   <--O_TD_KNB1    得意先マスタ（会社コード）
*----------------------------------------------------------------------*
FORM GET_KNB1_CHK CHANGING O_TD_KNB1    TYPE TYP_TD_KNB1
O_TD_KNLFTMP TYPE TYP_TD_KNLF.

* 会社コードの権限チェック
DATA: LT_KNB1   TYPE TYP_TD_KNB1,
LWA_KNB1   TYPE T_KNB1,
LWA_KNLF   TYPE T_INFILE_KNLF.

* 得意先マスタ（会社コード）チェック
SELECT KUNNR BUKRS INTO TABLE O_TD_KNB1 FROM KNB1
FOR ALL ENTRIES IN IT_FILE_KNLF
WHERE KUNNR = IT_FILE_KNLF-FNAME     "得意先コード
AND BUKRS = IT_FILE_KNLF-FNAME1.   "会社コード
* ソート
SORT O_TD_KNB1 BY KUNNR ASCENDING     "得意先コード
BUKRS ASCENDING.    "会社コード

APPEND LINES OF O_TD_KNB1 TO LT_KNB1.
* ソート
SORT LT_KNB1 BY BUKRS ASCENDING.     "会社コード

* 削除
DELETE ADJACENT DUPLICATES FROM LT_KNB1 COMPARING BUKRS.

* 会社コードの権限チェック
LOOP AT LT_KNB1 INTO LWA_KNB1.
AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
ID 'BUKRS' FIELD LWA_KNB1-BUKRS   "対象会社コード
ID 'ACTVT' FIELD '03'.
IF SY-SUBRC = 0.
LWA_KNLF-FNAME1 = LWA_KNB1-BUKRS. "対象会社コード
APPEND LWA_KNLF TO O_TD_KNLFTMP.
ENDIF.
ENDLOOP.

ENDFORM.                    " GET_KNB1_CHK
*&---------------------------------------------------------------------*
*&      Form  GET_KNVV_CHK
*&---------------------------------------------------------------------*
*       得意先マスタ: 販売データチェック
*----------------------------------------------------------------------*
*   <--- O_TD_KNVV    得意先マスタ: 販売データ
*----------------------------------------------------------------------*
FORM GET_KNVV_CHK CHANGING O_TD_KNVV    TYPE TYP_TD_KNVV
O_TD_KNLFTMP TYPE TYP_TD_KNLF.
DATA: LT_KNVV    TYPE TYP_TD_KNVV,
LT_TVKO    TYPE STANDARD TABLE OF T_TVKO,
LT_TVKOTMP TYPE STANDARD TABLE OF T_TVKO,
LWA_KNLF    TYPE T_INFILE_KNLF,
LWA_TVKO    TYPE T_TVKO,
LWA_TVKOTMP TYPE T_TVKO.

* 得意先マスタ: 販売データチェック
SELECT KUNNR VKORG INTO TABLE O_TD_KNVV FROM KNVV
FOR ALL ENTRIES IN IT_FILE_KNLF
WHERE KUNNR = IT_FILE_KNLF-FNAME     "得意先コード
AND VKORG = IT_FILE_KNLF-FNAME1    "販売組織
AND VTWEG = CNS_VTWEG              "流通チャネル
AND SPART = CNS_SPART.             "製品部門
* ソート
SORT O_TD_KNVV BY KUNNR ASCENDING     "得意先コード
VKORG ASCENDING.    "販売組織

APPEND LINES OF O_TD_KNVV TO LT_KNVV.

* ソート
SORT LT_KNVV BY VKORG ASCENDING.      "販売組織
DELETE ADJACENT DUPLICATES FROM LT_KNVV COMPARING VKORG.

IF LT_KNVV IS NOT INITIAL.
*   会社コードの権限チェック
SELECT VKORG BUKRS INTO TABLE LT_TVKO FROM TVKO
FOR ALL ENTRIES IN LT_KNVV
WHERE VKORG = LT_KNVV-VKORG.        "販売組織

APPEND LINES OF LT_TVKO TO LT_TVKOTMP.

SORT LT_TVKO BY BUKRS ASCENDING.
DELETE ADJACENT DUPLICATES FROM LT_TVKO COMPARING BUKRS.

*   会社コードの権限チェック
LOOP AT LT_TVKO INTO LWA_TVKO.
AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
ID 'BUKRS' FIELD LWA_TVKO-BUKRS  "対象会社コード
ID 'ACTVT' FIELD '03'.
IF SY-SUBRC <> 0.
DELETE LT_TVKOTMP WHERE BUKRS = LWA_TVKO-BUKRS.
ENDIF.
ENDLOOP.

LOOP AT LT_TVKOTMP INTO LWA_TVKOTMP.
LWA_KNLF-FNAME1 = LWA_TVKOTMP-VKORG.
APPEND LWA_KNLF TO O_TD_KNLFTMP.
ENDLOOP.
SORT O_TD_KNLFTMP BY FNAME1 ASCENDING.
ENDIF.
ENDFORM.                    " GET_KNVV_CHK
*&---------------------------------------------------------------------*
*&      Form  GET_LFA1_CHK
*&---------------------------------------------------------------------*
*       仕入先マスタ (一般セクション)チェック
*----------------------------------------------------------------------*
*   <--O_TD_LFA1    仕入先マスタ (一般セクション)
*----------------------------------------------------------------------*
FORM GET_LFA1_CHK CHANGING O_TD_LFA1 TYPE TYP_TD_LFA1.
* 仕入先マスタ (一般セクション)チェック
SELECT LIFNR INTO TABLE O_TD_LFA1 FROM LFA1
FOR ALL ENTRIES IN IT_FILE
WHERE LIFNR = IT_FILE-FNAME.     "仕入先勘定コード
* ソート
SORT O_TD_LFA1 BY LIFNR ASCENDING.
ENDFORM.                    " GET_LFA1_CHK
*&---------------------------------------------------------------------*
*&      Form  GET_LFB1_CHK
*&---------------------------------------------------------------------*
*       仕入先マスタ (会社コ−ド)チェック
*----------------------------------------------------------------------*
*   <--O_TD_LFB1    仕入先マスタ (会社コ−ド)
*----------------------------------------------------------------------*
FORM GET_LFB1_CHK CHANGING O_TD_LFB1    TYPE TYP_TD_LFB1
O_TD_KNLFTMP TYPE TYP_TD_KNLF.

DATA: LT_LFB1  TYPE TYP_TD_LFB1,
LWA_LFB1 TYPE T_LFB1,
LWA_KNLF TYPE T_INFILE_KNLF.

* 仕入先マスタ (会社コ−ド)チェック
SELECT LIFNR BUKRS INTO TABLE O_TD_LFB1 FROM LFB1
FOR ALL ENTRIES IN IT_FILE_KNLF
WHERE LIFNR = IT_FILE_KNLF-FNAME     "仕入先勘定コード
AND BUKRS = IT_FILE_KNLF-FNAME1.   "会社コード
* ソート
SORT O_TD_LFB1 BY LIFNR ASCENDING     "仕入先勘定コード
BUKRS ASCENDING.    "会社コード

APPEND LINES OF O_TD_LFB1 TO LT_LFB1.
* ソート
SORT LT_LFB1 BY BUKRS ASCENDING.     "会社コード

* 削除
DELETE ADJACENT DUPLICATES FROM LT_LFB1 COMPARING BUKRS.

* 会社コードの権限チェック
LOOP AT LT_LFB1 INTO LWA_LFB1.
AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
ID 'BUKRS' FIELD LWA_LFB1-BUKRS   "対象会社コード
ID 'ACTVT' FIELD '03'.
IF SY-SUBRC = 0.
LWA_KNLF-FNAME1 = LWA_LFB1-BUKRS. "対象会社コード
APPEND LWA_KNLF TO O_TD_KNLFTMP.
ENDIF.
ENDLOOP.
ENDFORM.                    " GET_LFB1_CHK
*&---------------------------------------------------------------------*
*&      Form  GET_LFM1_CHK
*&---------------------------------------------------------------------*
*　　　仕入先マスタ購買組織データチェック
*----------------------------------------------------------------------*
*   <--O_TD_LFM1    仕入先マスタ購買組織データ
*----------------------------------------------------------------------*
FORM GET_LFM1_CHK CHANGING O_TD_LFM1    TYPE TYP_TD_LFM1
O_TD_KNLFTMP TYPE TYP_TD_KNLF.

DATA:LT_T024E      TYPE STANDARD TABLE OF T_T024E,
LT_T024ETMP   TYPE STANDARD TABLE OF T_T024E,
LT_LFM1       TYPE TYP_TD_LFM1,
LWA_T024E     TYPE T_T024E,
LWA_T024ETMP  TYPE T_T024E,
LWA_KNLF      TYPE T_INFILE_KNLF.

* 仕入先マスタ購買組織データチェック
SELECT LIFNR EKORG INTO TABLE O_TD_LFM1 FROM LFM1
FOR ALL ENTRIES IN IT_FILE_KNLF
WHERE LIFNR = IT_FILE_KNLF-FNAME     "仕入先勘定コード
AND EKORG = IT_FILE_KNLF-FNAME1.   "購買組織
* ソート
SORT O_TD_LFM1 BY LIFNR ASCENDING     "仕入先勘定コード
EKORG ASCENDING.    "購買組織

APPEND LINES OF O_TD_LFM1 TO LT_LFM1.
* ソート
SORT LT_LFM1 BY EKORG ASCENDING.
DELETE ADJACENT DUPLICATES FROM LT_LFM1 COMPARING EKORG.

* 会社コードの権限チェック
IF LT_LFM1 IS NOT INITIAL.
CLEAR LT_T024E.                              "購買組織
*   購買組織の取得
SELECT EKORG BUKRS INTO TABLE LT_T024E FROM T024E
FOR ALL ENTRIES IN LT_LFM1
WHERE EKORG = LT_LFM1-EKORG.        "購買組織

APPEND LINES OF LT_T024E TO LT_T024ETMP.

SORT LT_T024E BY BUKRS ASCENDING.
DELETE ADJACENT DUPLICATES FROM LT_T024E COMPARING BUKRS.

*   会社コードの権限チェック
LOOP AT LT_T024E INTO LWA_T024E.
AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
ID 'BUKRS' FIELD LWA_T024E-BUKRS  "対象会社コード
ID 'ACTVT' FIELD '03'.
IF SY-SUBRC <> 0.
DELETE LT_T024ETMP WHERE BUKRS = LWA_T024E-BUKRS.
ENDIF.
ENDLOOP.

LOOP AT LT_T024ETMP INTO LWA_T024ETMP.
LWA_KNLF-FNAME1 = LWA_T024ETMP-EKORG.
APPEND LWA_KNLF TO O_TD_KNLFTMP.
ENDLOOP.
SORT O_TD_KNLFTMP BY FNAME1 ASCENDING.
ENDIF.
ENDFORM.                    " GET_LFM1_CHK
*&---------------------------------------------------------------------*
*&      Form  GET_EINA_CHK
*&---------------------------------------------------------------------*
*       購買情報: 一般データチェック
*----------------------------------------------------------------------*
*   <--O_TD_EINA    購買情報: 一般データ
*----------------------------------------------------------------------*
FORM GET_EINA_CHK CHANGING O_TD_EINA TYPE TYP_TD_EINA.
* 購買情報: 一般データチェック
SELECT INFNR INTO TABLE O_TD_EINA FROM EINA
FOR ALL ENTRIES IN IT_FILE
WHERE INFNR = IT_FILE-FNAME.     "購買情報番号
* ソート
SORT O_TD_EINA BY INFNR ASCENDING.
ENDFORM.                    " GET_EINA_CHK
*&---------------------------------------------------------------------*
*&      Form  GET_EINE_CHK
*&---------------------------------------------------------------------*
*       購買情報: 購買組織データチェック
*----------------------------------------------------------------------*
*   <--O_TD_EINE    購買情報: 購買組織データ
*----------------------------------------------------------------------*
FORM GET_EINE_CHK CHANGING O_TD_EINE    TYPE TYP_TD_EINE
O_TD_EINETMP TYPE TYP_TD_FEINE.
DATA: LT_T024E     TYPE STANDARD TABLE OF T_T024E,
LT_T024ETMP  TYPE STANDARD TABLE OF T_T024E,
LT_EINE      TYPE TYP_TD_EINE,
LWA_T024E    TYPE T_T024E,
LWA_T024ETMP TYPE T_T024E,
LWA_KNLF     TYPE T_INFILE_EINE.

* 購買情報: 購買組織データチェック
SELECT INFNR EKORG ESOKZ WERKS INTO TABLE O_TD_EINE FROM EINE
FOR ALL ENTRIES IN IT_FILE_EINE
WHERE INFNR = IT_FILE_EINE-FNAME     "購買情報番号
AND EKORG = IT_FILE_EINE-FNAME1    "購買組織
AND ESOKZ = IT_FILE_EINE-FNAME2    "購買情報カテゴリ
AND WERKS = IT_FILE_EINE-FNAME3.   "プラント
* ソート
SORT O_TD_EINE BY INFNR ASCENDING     "購買情報番号
EKORG ASCENDING     "購買組織
ESOKZ ASCENDING     "購買情報カテゴリ
WERKS ASCENDING.    "プラント

* 会社コードの権限チェック
APPEND LINES OF O_TD_EINE TO LT_EINE.

* ソート
SORT LT_EINE BY EKORG ASCENDING.
DELETE ADJACENT DUPLICATES FROM LT_EINE COMPARING EKORG.

* 会社コードの権限チェック
IF LT_EINE IS NOT INITIAL.
CLEAR LT_T024E.                       "購買組織
*   購買組織の取得
SELECT EKORG BUKRS INTO TABLE LT_T024E FROM T024E
FOR ALL ENTRIES IN LT_EINE
WHERE EKORG = LT_EINE-EKORG.        "購買組織

APPEND LINES OF LT_T024E TO LT_T024ETMP.

SORT LT_T024E BY BUKRS ASCENDING.
DELETE ADJACENT DUPLICATES FROM LT_T024E COMPARING BUKRS.

*   会社コードの権限チェック
LOOP AT LT_T024E INTO LWA_T024E.
AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
ID 'BUKRS' FIELD LWA_T024E-BUKRS  "対象会社コード
ID 'ACTVT' FIELD '03'.
IF SY-SUBRC <> 0.
DELETE LT_T024ETMP WHERE BUKRS = LWA_T024E-BUKRS.
ENDIF.
ENDLOOP.

LOOP AT LT_T024ETMP INTO LWA_T024ETMP.
LWA_KNLF-FNAME1 = LWA_T024ETMP-EKORG.
APPEND LWA_KNLF TO O_TD_EINETMP.
ENDLOOP.
SORT O_TD_EINETMP BY FNAME1 ASCENDING.
ENDIF.
ENDFORM.                    " GET_EINE_CHK
*&---------------------------------------------------------------------*
*&      Form  GET_MVKE_CHK
*&---------------------------------------------------------------------*
*       品目の販売データチェック
*----------------------------------------------------------------------*
*   <-- O_TD_MVKE    品目の販売データ
*----------------------------------------------------------------------*
FORM GET_MVKE_CHK CHANGING O_TD_MVKE    TYPE TYP_TD_MVKE
O_TD_MVKETMP TYPE TYP_TD_FMVKE.

DATA: LT_MVKE     TYPE TYP_TD_MVKE,
LT_TVKO     TYPE STANDARD TABLE OF T_TVKO,
LT_TVKOTMP  TYPE STANDARD TABLE OF T_TVKO,
LWA_KNLF    TYPE T_INFILE_MVKE,
LWA_TVKO    TYPE T_TVKO,
LWA_TVKOTMP TYPE T_TVKO.

* 品目の販売データチェック
SELECT MATNR VKORG VTWEG INTO TABLE O_TD_MVKE FROM MVKE
FOR ALL ENTRIES IN IT_FILE_MVKE
WHERE MATNR = IT_FILE_MVKE-FNAME     "品目コード
AND VKORG = IT_FILE_MVKE-FNAME1    "販売組織
AND VTWEG = IT_FILE_MVKE-FNAME2.   "流通チャネル
* ソート
SORT O_TD_MVKE BY MATNR ASCENDING     "品目コード
VKORG ASCENDING     "販売組織
VTWEG ASCENDING.    "流通チャネル

* 会社コードの権限チェック
APPEND LINES OF O_TD_MVKE TO LT_MVKE.

* ソート
SORT LT_MVKE BY VKORG ASCENDING.      "販売組織
DELETE ADJACENT DUPLICATES FROM LT_MVKE COMPARING VKORG.

IF LT_MVKE IS NOT INITIAL.
*   会社コードの権限チェック
SELECT VKORG BUKRS INTO TABLE LT_TVKO FROM TVKO
FOR ALL ENTRIES IN LT_MVKE
WHERE VKORG = LT_MVKE-VKORG.        "販売組織

APPEND LINES OF LT_TVKO TO LT_TVKOTMP.

SORT LT_TVKO BY BUKRS ASCENDING.
DELETE ADJACENT DUPLICATES FROM LT_TVKO COMPARING BUKRS.

*   会社コードの権限チェック
LOOP AT LT_TVKO INTO LWA_TVKO.
AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
ID 'BUKRS' FIELD LWA_TVKO-BUKRS  "対象会社コード
ID 'ACTVT' FIELD '03'.
IF SY-SUBRC <> 0.
DELETE LT_TVKOTMP WHERE BUKRS = LWA_TVKO-BUKRS.
ENDIF.
ENDLOOP.

LOOP AT LT_TVKOTMP INTO LWA_TVKOTMP.
LWA_KNLF-FNAME1 = LWA_TVKOTMP-VKORG.
APPEND LWA_KNLF TO O_TD_MVKETMP.
ENDLOOP.
SORT O_TD_MVKETMP BY FNAME1 ASCENDING.
ENDIF.
ENDFORM.                    " GET_MVKE_CHK
*&---------------------------------------------------------------------*
*&      Form  CREATE_GROUP2_DATA
*&---------------------------------------------------------------------*
*       グループ2テキスト書き込み
*----------------------------------------------------------------------*
FORM CREATE_GROUP2_DATA.
DATA:L_CNT      TYPE I,
LT_KNLFTMP TYPE TYP_TD_KNLF,
LT_KNB1    TYPE TYP_TD_KNB1,
LT_KNVV    TYPE TYP_TD_KNVV,
LT_LFB1    TYPE TYP_TD_LFB1,
LT_LFM1    TYPE TYP_TD_LFM1,
LWA_FILE   TYPE T_INFILE,
LWA_FILE1  TYPE T_INFILE_KNLF,
LWA_FILE2  TYPE T_INFILE_EINE,
LWA_FILE3  TYPE T_INFILE_MVKE.
* オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNB1.
*     得意先マスタ（会社コード）チェック
PERFORM GET_KNB1_CHK CHANGING LT_KNB1
LT_KNLFTMP.
WHEN CNS_KNVV.
*     得意先マスタ: 販売データチェック
PERFORM GET_KNVV_CHK CHANGING LT_KNVV
LT_KNLFTMP.
WHEN CNS_LFB1.
*     仕入先マスタ (会社コ−ド)チェック
PERFORM GET_LFB1_CHK CHANGING LT_LFB1
LT_KNLFTMP.
WHEN CNS_LFM1.
*     仕入先マスタ購買組織データチェック
PERFORM GET_LFM1_CHK CHANGING LT_LFM1
LT_KNLFTMP.
WHEN OTHERS.
ENDCASE.

CLEAR:V_M_CNT.

* 入力ファイルの内容でループ
* アップロードファイル順入力
LOOP AT IT_FILE_KNLF INTO LWA_FILE1.
*   得意先コード 開始ブレイク
AT NEW FNAME1.
*     オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNB1.
*         得意先マスタ(会社コード)ロック
PERFORM LOCK_TABLE_KNB1 USING LT_KNB1
LT_KNLFTMP
LWA_FILE1.
WHEN CNS_KNVV.
*         得意先マスタ: 販売データロック
PERFORM LOCK_TABLE_KNVV USING LT_KNVV
LT_KNLFTMP
LWA_FILE1.
WHEN CNS_LFB1.
*         仕入先マスタ(会社コ−ド)ロック
PERFORM LOCK_TABLE_LFB1 USING LT_LFB1
LT_KNLFTMP
LWA_FILE1.
WHEN CNS_LFM1.
*         仕入先マスタ購買組織データロック
PERFORM LOCK_TABLE_LFM1 USING LT_LFM1
LT_KNLFTMP
LWA_FILE1.
WHEN OTHERS.
RETURN.
ENDCASE.
ENDAT.
*   得意先コード&テキストID 開始ブレイク
AT NEW FID.
REFRESH:IT_TLINE.
CLEAR:V_ERR_ID_FLG.
ENDAT.

*   テキスト内容桁数チェック(132を越えたらエラー)
L_CNT = STRLEN( LWA_FILE1-TDLINE ).
IF  L_CNT > 132.
V_ERR_ID_FLG = CNS_ON.
ENDIF.

*   入力ファイルのテキスト内容を、汎用モジュールに渡す内部テーブルに格納
PERFORM STREAM_TO_ITF USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.

*   得意先コード&テキストID 終了ブレイク
AT END OF FID.
PERFORM CALL_CREATE_TEXT USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDAT.

ENDLOOP.
ENDFORM.                    " CREATE_GROUP2_DATA

*&---------------------------------------------------------------------*
*&      Form  CREATE_GROUP3_DATA
*&---------------------------------------------------------------------*
*       グループ3テキスト書き込み
*----------------------------------------------------------------------*
FORM CREATE_GROUP3_DATA.

DATA:L_CNT      TYPE I,
LT_EINE    TYPE TYP_TD_EINE,
LT_EINETMP TYPE TYP_TD_FEINE,
LWA_FILE   TYPE T_INFILE,
LWA_FILE1  TYPE T_INFILE_KNLF,
LWA_FILE2  TYPE T_INFILE_EINE,
LWA_FILE3  TYPE T_INFILE_MVKE.

* マスタチェック用得意先取得
PERFORM GET_EINE_CHK CHANGING LT_EINE
LT_EINETMP.

CLEAR:V_M_CNT.
* 入力ファイルの内容でループ
* アップロードファイル順入力
LOOP AT IT_FILE_EINE INTO LWA_FILE2.
*   得意先コード 開始ブレイク
AT NEW FNAME3.
*     購買情報: 購買組織データロック
PERFORM LOCK_TABLE_EINE USING LT_EINE
LT_EINETMP
LWA_FILE2.
ENDAT.
*   得意先コード&テキストID 開始ブレイク
AT NEW FID.
REFRESH:IT_TLINE.
CLEAR:V_ERR_ID_FLG.
ENDAT.

*   テキスト内容桁数チェック(132を越えたらエラー)
L_CNT = STRLEN( LWA_FILE2-TDLINE ).
IF  L_CNT > 132.
V_ERR_ID_FLG = CNS_ON.
ENDIF.

*   入力ファイルのテキスト内容を、汎用モジュールに渡す内部テーブルに格納
PERFORM STREAM_TO_ITF USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.

*   得意先コード&テキストID 終了ブレイク
AT END OF FID.
PERFORM CALL_CREATE_TEXT USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDAT.

ENDLOOP.
ENDFORM.                    " CREATE_GROUP3_DATA
*&---------------------------------------------------------------------*
*&      Form  CREATE_GROUP4_DATA
*&---------------------------------------------------------------------*
*       グループ4テキスト書き込み
*----------------------------------------------------------------------*
FORM CREATE_GROUP4_DATA.

DATA:L_CNT      TYPE I,
LT_MVKETMP TYPE TYP_TD_FMVKE,
LT_MVKE    TYPE TYP_TD_MVKE,
LWA_FILE   TYPE T_INFILE,
LWA_FILE1  TYPE T_INFILE_KNLF,
LWA_FILE2  TYPE T_INFILE_EINE,
LWA_FILE3  TYPE T_INFILE_MVKE.
* マスタチェック用得意先取得
PERFORM GET_MVKE_CHK CHANGING LT_MVKE
LT_MVKETMP.

CLEAR:V_M_CNT.
* 入力ファイルの内容でループ
* アップロードファイル順入力
LOOP AT IT_FILE_MVKE INTO LWA_FILE3.
*   得意先コード 開始ブレイク
AT NEW FNAME2.
*     品目の販売データロック
PERFORM LOCK_TABLE_MVKE USING LT_MVKE
LT_MVKETMP
LWA_FILE3.
ENDAT.
*   得意先コード&テキストID 開始ブレイク
AT NEW FID.
REFRESH:IT_TLINE.
CLEAR:V_ERR_ID_FLG.
ENDAT.

*   テキスト内容桁数チェック(132を越えたらエラー)
L_CNT = STRLEN( LWA_FILE3-TDLINE ).
IF  L_CNT > 132.
V_ERR_ID_FLG = CNS_ON.
ENDIF.

*   入力ファイルのテキスト内容を、汎用モジュールに渡す内部テーブルに格納
PERFORM STREAM_TO_ITF USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.

*   得意先コード&テキストID 終了ブレイク
AT END OF FID.
PERFORM CALL_CREATE_TEXT USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDAT.

ENDLOOP.
ENDFORM.                    " CREATE_GROUP4_DATA
**** START ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  CREATE_GROUP5_DATA
*&---------------------------------------------------------------------*
*       グループ5テキスト書き込み
*----------------------------------------------------------------------*
FORM CREATE_GROUP5_DATA.

DATA:L_CNT      TYPE I,
LT_KNMT    TYPE TYP_TD_KNMT,
LT_KNMTTMP TYPE TYP_TD_FKNMT,
LWA_FILE   TYPE T_INFILE,
LWA_FILE1  TYPE T_INFILE_KNLF,
LWA_FILE2  TYPE T_INFILE_EINE,
LWA_FILE3  TYPE T_INFILE_MVKE,
LWA_FILE4  TYPE T_INFILE_KNMT.

* マスタチェック用得意先取得
PERFORM GET_KNMT_CHK CHANGING LT_KNMT
LT_KNMTTMP.

CLEAR:V_M_CNT.
* 入力ファイルの内容でループ
* アップロードファイル順入力
LOOP AT IT_FILE_KNMT INTO LWA_FILE4.
*   得意先/品目情報 開始ブレイク
AT NEW FNAME3.
*     得意先/品目情報データロック
PERFORM LOCK_TABLE_KNMT USING LT_KNMT
LT_KNMTTMP
LWA_FILE4.
ENDAT.
*   得意先/品目情報&テキストID 開始ブレイク
AT NEW FID.
REFRESH:IT_TLINE.
CLEAR:V_ERR_ID_FLG.
ENDAT.

*   テキスト内容桁数チェック(132を越えたらエラー)
L_CNT = STRLEN( LWA_FILE2-TDLINE ).
IF  L_CNT > 132.
V_ERR_ID_FLG = CNS_ON.
ENDIF.

*   入力ファイルのテキスト内容を、汎用モジュールに渡す内部テーブルに格納
PERFORM STREAM_TO_ITF_KNMT USING LWA_FILE4.

*   得意先コード&テキストID 終了ブレイク
AT END OF FID.
PERFORM CALL_CREATE_TEXT_KNMT USING LWA_FILE4.
ENDAT.

ENDLOOP.
ENDFORM.                    " CREATE_GROUP5_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_KNMT_CHK
*&---------------------------------------------------------------------*
*       得意先/品目情報チェック
*----------------------------------------------------------------------*
*   <-- O_TD_KNMT    得意先/品目情報
*----------------------------------------------------------------------*
FORM GET_KNMT_CHK CHANGING O_TD_KNMT    TYPE TYP_TD_KNMT
O_TD_KNMTTMP TYPE TYP_TD_FKNMT.

DATA: LT_KNMT     TYPE TYP_TD_KNMT,
LT_TVKO     TYPE STANDARD TABLE OF T_TVKO,
LT_TVKOTMP  TYPE STANDARD TABLE OF T_TVKO,
LWA_KNLF    TYPE T_INFILE_KNMT,
LWA_TVKO    TYPE T_TVKO,
LWA_TVKOTMP TYPE T_TVKO.

* 得意先/品目情報チェック
SELECT KUNNR VKORG VTWEG MATNR INTO TABLE O_TD_KNMT FROM KNMT
FOR ALL ENTRIES IN IT_FILE_KNMT
WHERE KUNNR = IT_FILE_KNMT-FNAME     "得意先コード
AND VKORG = IT_FILE_KNMT-FNAME1    "販売組織
AND VTWEG = IT_FILE_KNMT-FNAME2    "流通チャネル
AND MATNR = IT_FILE_KNMT-FNAME3.   "品目コード
* ソート
SORT O_TD_KNMT BY KUNNR ASCENDING     "得意先コード
VKORG ASCENDING     "販売組織
VTWEG ASCENDING     "流通チャネル
MATNR ASCENDING.    "品目コード

* 会社コードの権限チェック
APPEND LINES OF O_TD_KNMT TO LT_KNMT.

* ソート
SORT LT_KNMT BY VKORG ASCENDING.      "販売組織
DELETE ADJACENT DUPLICATES FROM LT_KNMT COMPARING VKORG.

IF LT_KNMT IS NOT INITIAL.
*   会社コードの権限チェック
SELECT VKORG BUKRS INTO TABLE LT_TVKO FROM TVKO
FOR ALL ENTRIES IN LT_KNMT
WHERE VKORG = LT_KNMT-VKORG.        "販売組織

APPEND LINES OF LT_TVKO TO LT_TVKOTMP.

SORT LT_TVKO BY BUKRS ASCENDING.
DELETE ADJACENT DUPLICATES FROM LT_TVKO COMPARING BUKRS.

*   会社コードの権限チェック
LOOP AT LT_TVKO INTO LWA_TVKO.
AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
ID 'BUKRS' FIELD LWA_TVKO-BUKRS  "対象会社コード
ID 'ACTVT' FIELD '03'.
IF SY-SUBRC <> 0.
DELETE LT_TVKOTMP WHERE BUKRS = LWA_TVKO-BUKRS.
ENDIF.
ENDLOOP.

LOOP AT LT_TVKOTMP INTO LWA_TVKOTMP.
LWA_KNLF-FNAME1 = LWA_TVKOTMP-VKORG.
APPEND LWA_KNLF TO O_TD_KNMTTMP.
ENDLOOP.
SORT O_TD_KNMTTMP BY FNAME1 ASCENDING.
ENDIF.
ENDFORM.                    " GET_KNMT_CHK

**** END ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  CREATE_GROUP1_DATA
*&---------------------------------------------------------------------*
*       グループ1テキスト書き込み
*----------------------------------------------------------------------*
FORM CREATE_GROUP1_DATA.
DATA:L_CNT      TYPE I,
LT_LFA1    TYPE TYP_TD_LFA1,
LT_EINA    TYPE TYP_TD_EINA,
LWA_FILE   TYPE T_INFILE,
LWA_FILE1  TYPE T_INFILE_KNLF,
LWA_FILE2  TYPE T_INFILE_EINE,
LWA_FILE3  TYPE T_INFILE_MVKE.

* オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1.
*    マスタチェック用得意先取得
PERFORM GET_KNA1_CHK.
WHEN CNS_LFA1.
*     仕入先マスタ (一般セクション)チェック
PERFORM GET_LFA1_CHK CHANGING LT_LFA1.
WHEN CNS_EINA.
*     購買情報: 一般データチェック
PERFORM GET_EINA_CHK CHANGING LT_EINA.
WHEN OTHERS.
ENDCASE.

CLEAR:V_M_CNT.
* 入力ファイルの内容でループ
* アップロードファイル順入力
LOOP AT IT_FILE INTO LWA_FILE.
*   得意先コード 開始ブレイク
AT NEW FNAME.
*     オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1.
*         得意先マスタロック
PERFORM LOCK_TABLE_KNA1 USING LWA_FILE.
WHEN CNS_LFA1.
*         仕入先マスタロック
PERFORM LOCK_TABLE_LFA1 USING LT_LFA1
LWA_FILE.
WHEN CNS_EINA.
*         購買情報: 一般データロック
PERFORM LOCK_TABLE_EINA USING LT_EINA
LWA_FILE.
WHEN OTHERS.
RETURN.
ENDCASE.
ENDAT.
*   得意先コード&テキストID 開始ブレイク
AT NEW FID.
REFRESH:IT_TLINE.
CLEAR:V_ERR_ID_FLG.
ENDAT.

*   テキスト内容桁数チェック(132を越えたらエラー)
L_CNT = STRLEN( LWA_FILE-TDLINE ).
IF  L_CNT > 132.
V_ERR_ID_FLG = CNS_ON.
ENDIF.

*   入力ファイルのテキスト内容を、汎用モジュールに渡す内部テーブルに格納
PERFORM STREAM_TO_ITF USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.

*   得意先コード&テキストID 終了ブレイク
AT END OF FID.
PERFORM CALL_CREATE_TEXT USING LWA_FILE
LWA_FILE1
LWA_FILE2
LWA_FILE3.
ENDAT.
ENDLOOP.
ENDFORM.                    " CREATE_GROUP1_DATA
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_KNA1
*&---------------------------------------------------------------------*
*       得意先マスタロック
*----------------------------------------------------------------------*
*       -->I_WA_FILE  入力ファイル用
*----------------------------------------------------------------------*
FORM LOCK_TABLE_KNA1 USING I_WA_FILE TYPE T_INFILE.
CLEAR:V_ERR_NAME_FLG.
* 得意先マスタチェック
READ TABLE IT_KNA1 TRANSPORTING NO FIELDS
WITH KEY KUNNR = I_WA_FILE-FNAME
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 1. "マスタ存在エラー
RETURN.
ENDIF.

* 得意先マスタ ロックチェック
CALL FUNCTION 'ENQUEUE_EXKNA1'
EXPORTING
KUNNR          = I_WA_FILE-FNAME
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.
IF SY-SUBRC <> 0.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
V_ERR_NAME_FLG = 2. "ロックエラー
ENDIF.

ENDFORM.                    " LOCK_TABLE_KNA1
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_KNB1
*&---------------------------------------------------------------------*
*       得意先マスタ（会社コード）ロック
*----------------------------------------------------------------------*
*    -->I_TD_KNB1    得意先マスタ（会社コード）
*    -->I_WA_FILE1  ファイル用:KNB1
*----------------------------------------------------------------------*
FORM LOCK_TABLE_KNB1 USING I_TD_KNB1    TYPE TYP_TD_KNB1
I_TD_KNLFTMP TYPE TYP_TD_KNLF
I_WA_FILE1   TYPE T_INFILE_KNLF.
CLEAR:V_ERR_NAME_FLG.
* 得意先マスタチェック
READ TABLE I_TD_KNB1 TRANSPORTING NO FIELDS
WITH KEY KUNNR = I_WA_FILE1-FNAME
BUKRS = I_WA_FILE1-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 1. "マスタ存在エラー
RETURN.
ENDIF.

* 会社コードの権限チェック
READ TABLE I_TD_KNLFTMP TRANSPORTING NO FIELDS
WITH KEY FNAME1 = I_WA_FILE1-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 3."権限なし
RETURN.
ENDIF.
* 得意先マスタ(会社コード)ロックチェック
CALL FUNCTION 'ENQUEUE_EFKNB1A'
EXPORTING
KUNNR          = I_WA_FILE1-FNAME
BUKRS          = I_WA_FILE1-FNAME1
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.

IF SY-SUBRC <> 0.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
V_ERR_NAME_FLG = 2. "ロックエラー
ENDIF.
ENDFORM.                    " LOCK_TABLE_KNB1
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_KNVV
*&---------------------------------------------------------------------*
*       得意先マスタ: 販売データロック
*----------------------------------------------------------------------*
*    -->I_TD_KNVV    得意先マスタ: 販売データ
*    -->I_WA_FILE1   ファイル用:KNB1
*----------------------------------------------------------------------*
FORM LOCK_TABLE_KNVV USING I_TD_KNVV    TYPE TYP_TD_KNVV
I_TD_KNLFTMP TYPE TYP_TD_KNLF
I_WA_FILE1   TYPE T_INFILE_KNLF.
CLEAR:V_ERR_NAME_FLG.
* 得意先マスタ: 販売データをチェック
READ TABLE I_TD_KNVV TRANSPORTING NO FIELDS
WITH KEY KUNNR = I_WA_FILE1-FNAME
VKORG = I_WA_FILE1-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 1. "マスタ存在エラー
RETURN.
ENDIF.

* 会社コードの権限チェック
READ TABLE I_TD_KNLFTMP TRANSPORTING NO FIELDS
WITH KEY FNAME1 = I_WA_FILE1-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 3."権限なし
RETURN.
ENDIF.

* 得意先マスタ: 販売データロックチェック
CALL FUNCTION 'CMD_ENQUEUE_EXKNA1'
EXPORTING
KUNNR          = I_WA_FILE1-FNAME
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.

IF SY-SUBRC <> 0.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
V_ERR_NAME_FLG = 2. "ロックエラー
ENDIF.
ENDFORM.                    " LOCK_TABLE_KNVV
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_LFA1
*&---------------------------------------------------------------------*
*       仕入先マスタ一般デ−タロック
*----------------------------------------------------------------------*
*    -->I_TD_LFA1    仕入先マスタ (一般セクション)
*    -->I_WA_FILE  入力ファイル用
*----------------------------------------------------------------------*
FORM LOCK_TABLE_LFA1 USING I_TD_LFA1 TYPE TYP_TD_LFA1
I_WA_FILE TYPE T_INFILE.
CLEAR:V_ERR_NAME_FLG.
* 仕入先マスタ一般デ−タをチェック
READ TABLE I_TD_LFA1 TRANSPORTING NO FIELDS
WITH KEY LIFNR = I_WA_FILE-FNAME
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 1. "マスタ存在エラー
RETURN.
ENDIF.

* 仕入先マスタロックチェック
CALL FUNCTION 'VMD_ENQUEUE_EXLFA1'
EXPORTING
LIFNR          = I_WA_FILE-FNAME
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.
IF SY-SUBRC <> 0.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
V_ERR_NAME_FLG = 2. "ロックエラー
ENDIF.
ENDFORM.                    " LOCK_TABLE_LFA1
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_LFB1
*&---------------------------------------------------------------------*
*       仕入先マスタ(会社コ−ド)ロック
*----------------------------------------------------------------------*
*    -->I_TD_KNB1    得意先マスタ（会社コード）
*    -->I_TD_KNLFTMP 入力ファイル用
*    -->I_WA_FILE1  ファイル用:KNB1
*----------------------------------------------------------------------*
FORM LOCK_TABLE_LFB1 USING I_TD_LFB1    TYPE TYP_TD_LFB1
I_TD_KNLFTMP TYPE TYP_TD_KNLF
I_WA_FILE1   TYPE T_INFILE_KNLF.

CLEAR:V_ERR_NAME_FLG.
* 仕入先マスタ(会社コ−ド)をチェック
READ TABLE I_TD_LFB1 TRANSPORTING NO FIELDS
WITH KEY LIFNR = I_WA_FILE1-FNAME
BUKRS = I_WA_FILE1-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 1. "マスタ存在エラー
RETURN.
ENDIF.

* 会社コードの権限チェック
READ TABLE I_TD_KNLFTMP TRANSPORTING NO FIELDS
WITH KEY FNAME1 = I_WA_FILE1-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 3."権限なし
RETURN.
ENDIF.

* 仕入先マスタ(会社コ−ド)チェック
CALL FUNCTION 'ENQUEUE_EFLFB1A'
EXPORTING
LIFNR          = I_WA_FILE1-FNAME
BUKRS          = I_WA_FILE1-FNAME1
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.
IF SY-SUBRC <> 0.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
V_ERR_NAME_FLG = 2. "ロックエラー
ENDIF.
ENDFORM.                    " LOCK_TABLE_LFB1
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_LFM1
*&---------------------------------------------------------------------*
*       仕入先マスタ購買組織データロック
*----------------------------------------------------------------------*
*    -->I_TD_LFM1    仕入先マスタ購買組織データ
*    -->I_TD_KNLFTMP 入力ファイル用
*    -->I_WA_FILE1   ファイル用:KNB1
*----------------------------------------------------------------------*
FORM LOCK_TABLE_LFM1 USING I_TD_LFM1    TYPE TYP_TD_LFM1
I_TD_KNLFTMP TYPE TYP_TD_KNLF
I_WA_FILE1   TYPE T_INFILE_KNLF.
CLEAR:V_ERR_NAME_FLG.
* 仕入先マスタ購買組織データをチェック
READ TABLE I_TD_LFM1 TRANSPORTING NO FIELDS
WITH KEY LIFNR = I_WA_FILE1-FNAME
EKORG = I_WA_FILE1-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 1. "マスタ存在エラー
RETURN.
ENDIF.

* 会社コードの権限チェック
READ TABLE I_TD_KNLFTMP TRANSPORTING NO FIELDS
WITH KEY FNAME1 = I_WA_FILE1-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 3. "権限なし
RETURN.
ENDIF.

* 仕入先マスタ購買組織データロックチェック
CALL FUNCTION 'ENQUEUE_E_PDTC_LFM1'
EXPORTING
LIFNR          = I_WA_FILE1-FNAME
EKORG          = I_WA_FILE1-FNAME1
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.
IF SY-SUBRC <> 0.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
V_ERR_NAME_FLG = 2. "ロックエラー
ENDIF.
ENDFORM.                    " LOCK_TABLE_LFM1
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_EINA
*&---------------------------------------------------------------------*
*       購買情報ロック
*----------------------------------------------------------------------*
*    -->I_TD_EINA    購買情報: 一般データ
*----------------------------------------------------------------------*
*       -->I_TD_EINA  入力ファイル用
*       -->I_WA_FILE  入力ファイル用
*----------------------------------------------------------------------*
FORM LOCK_TABLE_EINA USING I_TD_EINA TYPE TYP_TD_EINA
I_WA_FILE TYPE T_INFILE.
CLEAR:V_ERR_NAME_FLG.
* 購買情報をチェック
READ TABLE I_TD_EINA TRANSPORTING NO FIELDS
WITH KEY INFNR = I_WA_FILE-FNAME
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 1. "マスタ存在エラー
RETURN.
ENDIF.

* 購買情報ロックチェック
CALL FUNCTION 'ENQUEUE_EMEINAE'
EXPORTING
INFNR          = I_WA_FILE-FNAME
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.
IF SY-SUBRC <> 0.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
V_ERR_NAME_FLG = 2. "ロックエラー
ENDIF.
ENDFORM.                    " LOCK_TABLE_EINA
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_EINE
*&---------------------------------------------------------------------*
*       購買情報: 購買組織データロック
*----------------------------------------------------------------------*
*    -->I_TD_EINE    購買情報: 購買組織データ
*    -->I_TD_EINETMP 入力ファイル用
*    -->I_WA_FILE2   ファイル用:EINE
*----------------------------------------------------------------------*
FORM LOCK_TABLE_EINE USING I_TD_EINE    TYPE TYP_TD_EINE
I_TD_EINETMP TYPE TYP_TD_FEINE
I_WA_FILE2   TYPE T_INFILE_EINE.
CLEAR:V_ERR_NAME_FLG.
* 購買情報: 購買組織データをチェック
READ TABLE I_TD_EINE TRANSPORTING NO FIELDS
WITH KEY INFNR = I_WA_FILE2-FNAME
EKORG = I_WA_FILE2-FNAME1
ESOKZ = I_WA_FILE2-FNAME2
WERKS = I_WA_FILE2-FNAME3
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 1. "マスタ存在エラー
RETURN.
ENDIF.

* 会社コードの権限チェック
READ TABLE I_TD_EINETMP TRANSPORTING NO FIELDS
WITH KEY FNAME1 = I_WA_FILE2-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 3."権限なし
RETURN.
ENDIF.

* 購買情報: 購買組織データロックチェック
CALL FUNCTION 'ENQUEUE_E_PDTC_EINE'
EXPORTING
INFNR          = I_WA_FILE2-FNAME
EKORG          = I_WA_FILE2-FNAME1
ESOKZ          = I_WA_FILE2-FNAME2
WERKS          = I_WA_FILE2-FNAME3
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.
IF SY-SUBRC <> 0.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
V_ERR_NAME_FLG = 2. "ロックエラー
ENDIF.
ENDFORM.                    " LOCK_TABLE_EINE
**** START ADD 2015/08/10 ISID21 *****&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_KNMT
*&---------------------------------------------------------------------*
*       得意先/品目情報データロック
*----------------------------------------------------------------------*
*    -->I_TD_KNMT    得意先/品目情報
*    -->I_TD_EINETMP 入力ファイル用
*    -->I_WA_FILE2   ファイル用:EINE
*----------------------------------------------------------------------*
FORM LOCK_TABLE_KNMT USING I_TD_KNMT    TYPE TYP_TD_KNMT
I_TD_KNMTTMP TYPE TYP_TD_FKNMT
I_WA_FILE4   TYPE T_INFILE_KNMT.
CLEAR:V_ERR_NAME_FLG.
* 得意先/品目情報をチェック
READ TABLE I_TD_KNMT TRANSPORTING NO FIELDS
WITH KEY KUNNR = I_WA_FILE4-FNAME
VKORG = I_WA_FILE4-FNAME1
VTWEG = I_WA_FILE4-FNAME2
MATNR = I_WA_FILE4-FNAME3
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 1. "マスタ存在エラー
RETURN.
ENDIF.

* 会社コードの権限チェック
READ TABLE I_TD_KNMTTMP TRANSPORTING NO FIELDS
WITH KEY FNAME1 = I_WA_FILE4-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 3."権限なし
RETURN.
ENDIF.

* 得意先品目情報: ブロックチェック
CALL FUNCTION 'ENQUEUE_EVKNMT'
EXPORTING
VKORG                = I_WA_FILE4-FNAME1
VTWEG                = I_WA_FILE4-FNAME2
KUNNR                = I_WA_FILE4-FNAME
MATNR                = I_WA_FILE4-FNAME3
EXCEPTIONS
FOREIGN_LOCK         = 1
SYSTEM_FAILURE       = 2
OTHERS               = 3.
IF SY-SUBRC <> 0.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
V_ERR_NAME_FLG = 2. "ロックエラー
ENDIF.
ENDFORM.                    " LOCK_TABLE_KNMT
**** END ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  LOCK_TABLE_MVKE
*&---------------------------------------------------------------------*
*       品目の販売データロック
*----------------------------------------------------------------------*
*    -->I_TD_MVKE    品目の販売データ
*    -->I_TD_MVKETMP 入力ファイル用
*    -->I_WA_FILE3   ファイル用:MVKE
*----------------------------------------------------------------------*
FORM LOCK_TABLE_MVKE USING I_TD_MVKE    TYPE TYP_TD_MVKE
I_TD_MVKETMP TYPE TYP_TD_FMVKE
I_WA_FILE3   TYPE T_INFILE_MVKE.
CLEAR:V_ERR_NAME_FLG.
* 品目の販売データロックをチェック
READ TABLE I_TD_MVKE TRANSPORTING NO FIELDS
WITH KEY MATNR = I_WA_FILE3-FNAME
VKORG = I_WA_FILE3-FNAME1
VTWEG = I_WA_FILE3-FNAME2
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 1. "マスタ存在エラー
RETURN.
ENDIF.

* 会社コードの権限チェック
READ TABLE I_TD_MVKETMP TRANSPORTING NO FIELDS
WITH KEY FNAME1 = I_WA_FILE3-FNAME1
BINARY SEARCH.
IF SY-SUBRC <> 0.
V_ERR_NAME_FLG = 3. "権限なし
RETURN.
ENDIF.

* 品目の販売データロックチェック
CALL FUNCTION 'ENQUEUE_EMMVKEE'
EXPORTING
MATNR          = I_WA_FILE3-FNAME
VKORG          = I_WA_FILE3-FNAME1
VTWEG          = I_WA_FILE3-FNAME2
EXCEPTIONS
FOREIGN_LOCK   = 1
SYSTEM_FAILURE = 2
OTHERS         = 3.
IF SY-SUBRC <> 0.
CLEAR V_ETEXT.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO V_ETEXT.
V_ERR_NAME_FLG = 2. "ロックエラー
ENDIF.
ENDFORM.                    " LOCK_TABLE_MVKE
*&---------------------------------------------------------------------*
*&      Form  UNROCK_TABLE
*&---------------------------------------------------------------------*
*       テーブル解除
*----------------------------------------------------------------------*
FORM UNROCK_TABLE.
* テーブル解除
CALL FUNCTION 'DEQUEUE_ALL'.
ENDFORM.                    " UNROCK_TABLE
*&---------------------------------------------------------------------*
*&      Form  EDIT_CREATE_DATA
*&---------------------------------------------------------------------*
*       エラーが無ければテキスト登録
*----------------------------------------------------------------------*
*      -->I_WA_FILE   ファイル用
*      -->I_WA_FILE1  ファイル用:KNB1
*      -->I_WA_FILE2  ファイル用:EINE
*      -->I_WA_FILE3  ファイル用:MVKE
*      <--O_TDID      テキスト ID
*      <--O_TDNAME    名称
*----------------------------------------------------------------------*
FORM EDIT_CREATE_DATA USING    I_WA_FILE   TYPE T_INFILE
I_WA_FILE1  TYPE T_INFILE_KNLF
I_WA_FILE2  TYPE T_INFILE_EINE
I_WA_FILE3  TYPE T_INFILE_MVKE
CHANGING O_TDID      TYPE THEAD-TDID
O_TDNAME    TYPE THEAD-TDNAME.

DATA LW_TDNAME(10) TYPE C.         "名称変数

CLEAR LW_TDNAME.                   "名称変数
* オブジェクト判定
CASE P_OBJ.
WHEN CNS_KNA1
OR CNS_LFA1
OR CNS_EINA.
O_TDID   = I_WA_FILE-FID.
O_TDNAME = I_WA_FILE-FNAME.
WHEN CNS_KNB1
OR CNS_LFB1
OR CNS_LFM1.
O_TDID   = I_WA_FILE1-FID.
O_TDNAME = I_WA_FILE1-FNAME.
O_TDNAME+10(10) = I_WA_FILE1-FNAME1.
WHEN CNS_KNVV.
O_TDID   = I_WA_FILE1-FID.
O_TDNAME = I_WA_FILE1-FNAME.
CONCATENATE I_WA_FILE1-FNAME1
CNS_VTWEG
CNS_SPART
INTO LW_TDNAME.
O_TDNAME+10(10) = LW_TDNAME.
WHEN CNS_EINE.
O_TDID   = I_WA_FILE2-FID.
O_TDNAME = I_WA_FILE2-FNAME.
CONCATENATE I_WA_FILE2-FNAME1
I_WA_FILE2-FNAME2
I_WA_FILE2-FNAME3
INTO LW_TDNAME.
O_TDNAME+10(10) = LW_TDNAME.
WHEN CNS_MVKE.
O_TDID     = I_WA_FILE3-FID.
O_TDNAME   = I_WA_FILE3-FNAME.
CONCATENATE I_WA_FILE3-FNAME1
I_WA_FILE3-FNAME2
INTO LW_TDNAME.
O_TDNAME+18(10) = LW_TDNAME.
WHEN OTHERS.
ENDCASE.
ENDFORM.                    " EDIT_CREATE_DATA
**** START ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  EDIT_CREATE_DATA_KNMT
*&---------------------------------------------------------------------*
*       エラーが無ければテキスト登録
*----------------------------------------------------------------------*
*      -->I_WA_FILE4  ファイル用:KNMT
*      <--O_TDID      テキスト ID
*      <--O_TDNAME    名称
*----------------------------------------------------------------------*
FORM EDIT_CREATE_DATA_KNMT USING
I_WA_FILE4  TYPE T_INFILE_KNMT
CHANGING O_TDID      TYPE THEAD-TDID
O_TDNAME    TYPE THEAD-TDNAME.

DATA LW_TDNAME(10) TYPE C.         "名称変数

CLEAR LW_TDNAME.                   "名称変数

O_TDID   = I_WA_FILE4-FID.
CONCATENATE I_WA_FILE4-FNAME1
I_WA_FILE4-FNAME2
INTO LW_TDNAME.
O_TDNAME = LW_TDNAME.
O_TDNAME+6(10) = I_WA_FILE4-FNAME.
O_TDNAME+16(18) = I_WA_FILE4-FNAME3.

ENDFORM.                    " EDIT_CREATE_DATA_KNMT
**** END ADD 2015/08/10 ISID21 ****
*&---------------------------------------------------------------------*
*&      Form  CHK_EDATA_FILE
*&---------------------------------------------------------------------*
*       ファイル判定
*----------------------------------------------------------------------*
*       -->I_TD_EDATAE  ファイル
*----------------------------------------------------------------------*
FORM CHK_EDATA_FILE  USING I_TD_EDATAE TYPE ANY TABLE.
DATA:L_MSG(50) TYPE C.
*-- エラーがない場合
IF I_TD_EDATAE[] IS INITIAL.
*---- チェックのみでない場合
IF P_CHK IS INITIAL. "実実行
COMMIT WORK.
*     XX件、更新しました
L_MSG = V_M_CNT * 1.
MESSAGE S401 WITH L_MSG TEXT-M07.
*---- チェックのみの場合
ELSE.
ROLLBACK WORK.
*     エラーはありません
MESSAGE S400 WITH TEXT-M03.
ENDIF.
*-- エラーがある場合
ELSE.
ROLLBACK WORK.
PERFORM WRITE_ERR_SPOOL USING I_TD_EDATAE.
RETURN.                   "処理終了
ENDIF.
ENDFORM.                    " CHK_EDATA_FILE
*&---------------------------------------------------------------------*
*&      Form  SET_HEADER_LINE
*&---------------------------------------------------------------------*
*       ヘッダテキスト行セット
*----------------------------------------------------------------------*
*      -->I_STRU_NAME   対象名
*      <--O_TD_DFILE    出力ファイル
*----------------------------------------------------------------------*
FORM SET_HEADER_LINE  USING I_STRU_NAME TYPE TABNAME
CHANGING O_TD_DFILE  TYPE TYP_TD_DFILE.
* データエレメントに対するテキストの取得
CALL FUNCTION 'ZEG_ZZ_DD04T_GET'
EXPORTING
IMPTSNAME    = I_STRU_NAME
IMPLANGU     = P_LANG
IMPORTING
EXPSCRTEXT_M = WA_DFILE-LTEXT.

APPEND WA_DFILE TO O_TD_DFILE.
ENDFORM.                    " SET_HEADER_LINE
*&---------------------------------------------------------------------*
*&      Form  CONVT_FILE_INPUT
*&---------------------------------------------------------------------*
*       ゼロ埋め
*----------------------------------------------------------------------*
*   -->I_WA_FIELD        変数
*----------------------------------------------------------------------*
FORM CONVT_FILE_INPUT USING I_WA_FIELD TYPE ANY.
* ALPHA 変換 Exit: 外部->内部
CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
EXPORTING
INPUT  = I_WA_FIELD
IMPORTING
OUTPUT = I_WA_FIELD.
ENDFORM.                    " CONVT_FILE_INPUT
*&---------------------------------------------------------------------*
*&      Form  TDID_F4_HELP
*&---------------------------------------------------------------------*
*       テキストID検索へループ
*----------------------------------------------------------------------*
FORM TDID_F4_HELP .
DATA: LT_TDTEXT    TYPE STANDARD TABLE OF T_TTXIDTMP,
LT_FIELD     TYPE STANDARD TABLE OF DYNPREAD,
LW_FIELD     TYPE DYNPREAD,
LW_OBJECT    TYPE TTXID-TDOBJECT,
LW_LANGU     TYPE SY-LANGU,
LRD_TDOBJECT TYPE TYP_RD_TDOBJECT,
LW_TDOBJECT  TYPE LINE OF TYP_RD_TDOBJECT.

LW_FIELD-FIELDNAME = 'P_OBJ'.
LW_FIELD-STEPL     = 0.
APPEND LW_FIELD TO LT_FIELD.

LW_FIELD-FIELDNAME = 'P_LANG'.
LW_FIELD-STEPL     = 0.
APPEND LW_FIELD TO LT_FIELD.

* Read screen field values before PAI field transport
CALL FUNCTION 'DYNP_VALUES_READ'
EXPORTING
DYNAME                         = SY-REPID
DYNUMB                         = SY-DYNNR
TABLES
DYNPFIELDS                     = LT_FIELD
EXCEPTIONS
INVALID_ABAPWORKAREA           = 1
INVALID_DYNPROFIELD            = 2
INVALID_DYNPRONAME             = 3
INVALID_DYNPRONUMMER           = 4
INVALID_REQUEST                = 5
NO_FIELDDESCRIPTION            = 6
INVALID_PARAMETER              = 7
UNDEFIND_ERROR                 = 8
DOUBLE_CONVERSION              = 9
STEPL_NOT_FOUND                = 10
OTHERS                         = 11.
CLEAR LW_FIELD.
READ TABLE LT_FIELD INTO LW_FIELD WITH KEY FIELDNAME = 'P_OBJ'.
LW_OBJECT = LW_FIELD-FIELDVALUE.

CLEAR LW_FIELD.
READ TABLE LT_FIELD INTO LW_FIELD WITH KEY FIELDNAME = 'P_LANG'.
LW_LANGU = LW_FIELD-FIELDVALUE.
IF LW_LANGU IS INITIAL.
LW_LANGU = SY-LANGU.
ENDIF.

*  アプリケーションオブジェクトを判定
CLEAR LRD_TDOBJECT.
IF LW_OBJECT IS NOT INITIAL.
LW_TDOBJECT-SIGN   = CNS_RNG_SIGN.
LW_TDOBJECT-OPTION = CNS_RNG_OPTION.
LW_TDOBJECT-LOW    = LW_OBJECT.
APPEND LW_TDOBJECT TO LRD_TDOBJECT.
ENDIF.

SELECT TTXID~TDOBJECT        "アプリケーションオブジェクト
TTXID~TDID            "テキスト ID
TTXIT~TDTEXT          "内容説明
INTO TABLE LT_TDTEXT FROM TTXID
LEFT JOIN TTXIT
ON TTXIT~TDOBJECT = TTXID~TDOBJECT
AND TTXIT~TDID     = TTXID~TDID
AND TTXIT~TDSPRAS  = LW_LANGU
WHERE TTXID~TDOBJECT IN LRD_TDOBJECT.

*  F4 help also returning the value to be displayed in internal table
CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
EXPORTING
RETFIELD              = 'TDID'
DYNPPROG              = SY-REPID
DYNPNR                 = SY-DYNNR
DYNPROFIELD           = 'S_TDID-LOW'
VALUE_ORG              = 'S'
TABLES
VALUE_TAB             = LT_TDTEXT
EXCEPTIONS
PARAMETER_ERROR        = 1
NO_VALUES_FOUND        = 2
OTHERS                 = 3.

ENDFORM.                    " TDID_F4_HELP
**** END ADD 2015/03/10 ISID13 ****
*Text symbol text・
*001:Local
*002:Server
*003:Download
*004:Upload
*005:File
*006:C001
*007:All File (*.*)|*.*|
*C01:shift_jis
*C02:UTF-8
*H01:Customer
*H02:Text ID
*H03:Error
*H04:Company
*H05:Sales Org.
*H06:Vendor
*H07:Purchasing Org.
*H08:Info Record
*H09:Infotype
*H10:Plant
*H11:Material
*H12:Distr.Channel
*M01:Filed to get the name of the file
*M02:entries、the downloaded.
*M03:No error
*M04:An error occurred in the file open
*M05:output file is error occurred
*M06:An error occurred in the input file open
*M07:entries、the updated.
*M08:The length of text over 132
*M09:The customer does not exist
*M10:Input file upload error occurred
*M11:The customer material does not exist
*Selection text・
*P_CHK:        Only Check(Upload)
*P_FILE:        File
*P_LANG:        Language
*P_OBJ:        Text Object
*S_BUKRS:        Company code(For Download)
*S_EKORG:        Purchasing Org.(For Download)
*S_ESOKZ:        Infotype(For Download)
*S_INFNR:        Info Record(For Download)
*S_KUNNR:        Customer(For Download)
*S_LIFNR:        Vendor(For Download)
*S_MATNR:        Material(For Download)
*S_TDID:        Text ID(For Download)
*S_VKORG:        Sales Org.(For Download)
*S_VTWEG:        Distr. Channel(For Download)
*S_WERKS:        Plant(For Download)
