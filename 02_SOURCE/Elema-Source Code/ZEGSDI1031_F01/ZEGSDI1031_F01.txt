*&---------------------------------------------------------------------*
*&  Include           ZEGSDI1031_F01
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Module  STATUS_3000  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE STATUS_3000 OUTPUT.

SET PF-STATUS '3000'.

ENDMODULE.                 " STATUS_3000  OUTPUT
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3000  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_3000 INPUT.
CASE SY-UCOMM.
WHEN 'SAVE'.
LEAVE TO SCREEN 0.
WHEN 'BACK'.
LEAVE TO SCREEN 0.
WHEN 'EXIT'.
LEAVE PROGRAM.
WHEN 'RETN'.
LEAVE TO SCREEN 0.
WHEN OTHERS.
ENDCASE.
ENDMODULE.                 " USER_COMMAND_3000  INPUT


*&---------------------------------------------------------------------*
*&      Form  get_next_id
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM GET_NEXT_ID .

DATA:  LV_OBJECT  TYPE TNRO-OBJECT.
*         LV_CODE    LIKE INRI-RETURNCODE. "returncode
LV_OBJECT = CNS_OBJID.
*ÅgOCO  ê•#è€ñº
CALL FUNCTION 'NUMBER_RANGE_ENQUEUE'
EXPORTING
OBJECT           = LV_OBJECT
EXCEPTIONS
FOREIGN_LOCK     = 1
OBJECT_NOT_FOUND = 2
SYSTEM_FAILURE   = 3
OTHERS           = 4.
IF SY-SUBRC = 0.
CALL FUNCTION 'NUMBER_GET_NEXT'
EXPORTING
NR_RANGE_NR             = '01'
OBJECT                  = LV_OBJECT
SUBOBJECT               = P_BUKRS
IMPORTING
NUMBER                  = GV_DRNUM
EXCEPTIONS
INTERVAL_NOT_FOUND      = 1
NUMBER_RANGE_NOT_INTERN = 2
OBJECT_NOT_FOUND        = 3
QUANTITY_IS_0           = 4
QUANTITY_IS_NOT_1       = 5
INTERVAL_OVERFLOW       = 6
BUFFER_OVERFLOW         = 7
OTHERS                  = 8.

IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.
CALL FUNCTION 'NUMBER_RANGE_DEQUEUE'
EXPORTING
OBJECT = LV_OBJECT.
*      EXCEPTIONS
*        OBJECT_NOT_FOUND = 1
*        OTHERS           = 2.
ELSE.
MESSAGE E155(ZMEGSD01) WITH LV_OBJECT.
ENDIF.
ENDFORM.                    "get_next_id
*&---------------------------------------------------------------------*
*&      Form  PRINT_DEL_REQUEST
*&---------------------------------------------------------------------*
*       Print delivery request
*----------------------------------------------------------------------*
FORM PRINT_DEL_REQUEST .
* Get delivery request data
PERFORM GET_DR_DATA.
* Print the delivery request out
PERFORM PRINT_OUT_DR.
ENDFORM.                    " PRINT_DEL_REQUEST
*&---------------------------------------------------------------------*
*&      Form  CHECK_OBLIGATORY
*&---------------------------------------------------------------------*
*       Obligatory check
*----------------------------------------------------------------------*
FORM CHECK_OBLIGATORY .                                     "#EC NEEDED
DATA: LS_RANGE_BUKRS LIKE LINE OF GRG_BUKRS,
LS_RANGE_VSTEL LIKE LINE OF GRG_VSTEL,
LS_RANGE_KUNNR LIKE LINE OF GRG_KUNNR.

REFRESH:  GRG_BUKRS,GRG_VSTEL,GRG_KUNNR.

* Add company code from selection screen
IF P_BUKRS IS NOT INITIAL.
LS_RANGE_BUKRS-SIGN = 'I'.
LS_RANGE_BUKRS-OPTION = 'EQ'.
LS_RANGE_BUKRS-LOW    = P_BUKRS.
APPEND LS_RANGE_BUKRS TO GRG_BUKRS.
ENDIF.
* Add Shipping point from selection screen
IF P_VSTEL IS NOT INITIAL.
LS_RANGE_VSTEL-SIGN = 'I'.
LS_RANGE_VSTEL-OPTION = 'EQ'.
LS_RANGE_VSTEL-LOW    = P_VSTEL.
APPEND LS_RANGE_VSTEL TO GRG_VSTEL.
ENDIF.

* Add Ship-to party from selection screen
IF P_KUNNR IS NOT INITIAL.
LS_RANGE_KUNNR-SIGN = 'I'.
LS_RANGE_KUNNR-OPTION = 'EQ'.
LS_RANGE_KUNNR-LOW    = P_KUNNR.
APPEND LS_RANGE_KUNNR TO GRG_KUNNR.
ENDIF.
IF P_DEREQ IS  INITIAL.
*   Obligatory check
*   Company code
IF P_BUKRS IS INITIAL.
SET CURSOR FIELD 'P_BUKRS'.
MESSAGE E055(00).
ENDIF.

*   Schedule Line Delivery Date
IF S_EDATU[] IS INITIAL.
SET CURSOR FIELD 'S_EDATU-LOW'.
MESSAGE E055(00).
ENDIF.

*   Shipping point
IF P_VSTEL IS INITIAL.
SET CURSOR FIELD 'P_VSTEL'.
MESSAGE E055(00).
ENDIF.

*   Ship to Party
IF P_KUNNR IS INITIAL.
SET CURSOR FIELD 'P_KUNNR'.
MESSAGE E055(00).
ENDIF.

SELECT COUNT(*)
FROM T001
WHERE BUKRS = P_BUKRS.
*     Company code is not valid
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'P_BUKRS'.
MESSAGE E002(ZMEGSD01) WITH P_BUKRS.
ENDIF.
*   Shipping point is not valid
SELECT COUNT(*)
FROM TVST
WHERE VSTEL = P_VSTEL.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'P_VSTEL'.
MESSAGE E005(ZMEGSD01) WITH P_VSTEL.
ENDIF.
*   Ship-to party is not valid
SELECT COUNT(*)
FROM KNA1
WHERE KUNNR = P_KUNNR.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'P_KUNNR'.
MESSAGE E156(ZMEGSD01) WITH P_KUNNR.
ENDIF.
ENDIF.
** Schedule Line Delivery Date is mandantory
*  IF S_EDATU IS INITIAL.
*    SET CURSOR FIELD 'S_EDATU'.
*    MESSAGE E157(ZMEGSD01).
*  ENDIF.
ENDFORM.                    " CHECK_OBLIGATORY
*&---------------------------------------------------------------------*
*&      Form  CHECK_BUKRS_AUTH
*&---------------------------------------------------------------------*
*       Company code authorization check
*----------------------------------------------------------------------*
FORM CHECK_BUKRS_AUTH .
CHECK P_BUKRS IS NOT INITIAL.
* Company code authorization check
AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
ID 'BUKRS' FIELD P_BUKRS
ID 'ACTVT' FIELD '03'.
IF SY-SUBRC <> 0.
MESSAGE E146(ZMEGSD01).
ENDIF.

ENDFORM.                    " CHECK_BUKRS_AUTH
*&---------------------------------------------------------------------*
*&      Form  CHECK_DELREQ_FILLED
*&---------------------------------------------------------------------*
*       Check delivery request input or not
*----------------------------------------------------------------------*
FORM CHECK_DELREQ_FILLED .
* Check delivery request is not blank when click print
IF P_DEREQ IS INITIAL.
SET CURSOR FIELD 'P_DEREQ'.
*   Delivery request is initial
MESSAGE E145(ZMEGSD01).
ENDIF.
ENDFORM.                    " CHECK_DELREQ_FILLED
*&---------------------------------------------------------------------*
*&      Form  SET_BUTTON_TEXT
*&---------------------------------------------------------------------*
*       Set the button text on selection screen
*----------------------------------------------------------------------*
FORM SET_BUTTON_TEXT .
SSCRFIELDS-FUNCTXT_01 = '   Print'(S99).
ENDFORM.                    " SET_BUTTON_TEXT

*&---------------------------------------------------------------------*
*&      Form  GET_DEFAULT_PRINTER
*&---------------------------------------------------------------------*
*       Default User
*----------------------------------------------------------------------*
FORM GET_DEFAULT_PRINTER .

DATA:
LST_USER_DEFAULTS  TYPE USDEFAULTS.

CALL FUNCTION 'SUSR_USER_READ'
EXPORTING
USER_NAME            = SY-UNAME
IMPORTING
USER_DEFAULTS        = LST_USER_DEFAULTS
EXCEPTIONS
USER_NAME_NOT_EXISTS = 1
INTERNAL_ERROR       = 2
OTHERS               = 3.

IF SY-SUBRC = 0.

CALL FUNCTION 'CONVERSION_EXIT_SPDEV_OUTPUT'
EXPORTING
INPUT  = LST_USER_DEFAULTS-SPLD
IMPORTING
OUTPUT = P_PTRAY.

ENDIF.

ENDFORM.                    " GET_DEFAULT_PRINTER
*&---------------------------------------------------------------------*
*&      Form  PREVIEW_DEL_REQUEST
*&---------------------------------------------------------------------*
*       Show delivery request
*----------------------------------------------------------------------*
FORM PREVIEW_DEL_REQUEST.
* Get general data
PERFORM GET_GEN_DATA.

* Get the existing delivery request data
PERFORM GET_DR_DATA.

* Get the open so items
PERFORM GET_SO_ITEMS.

* Generate the ALV data that to be shown
PERFORM GENERATE_ALV_DATA.

* Set the ALV property
PERFORM SET_ALV_PROPERTY.

* Show the ALV
PERFORM SHOW_ALV.

ENDFORM.                    " PREVIEW_DEL_REQUEST
*&---------------------------------------------------------------------*
*&      Form  MAIN_PROCESS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*éÂèàóù
*----------------------------------------------------------------------*
FORM MAIN_PROCESS .

CASE GV_PROC_CODE.
WHEN 'ONLI'.    "Press "Execute"
*     Show delivery request
PERFORM PREVIEW_DEL_REQUEST.
WHEN OTHERS.
ENDCASE.

ENDFORM.                    " MAIN_PROCESS
*&---------------------------------------------------------------------*
*&      Form  GET_DR_DATA
*&---------------------------------------------------------------------*
*       Get the existing delivery request data
*----------------------------------------------------------------------*
FORM GET_DR_DATA .

* If Delivery Request is input
IF P_DEREQ IS NOT INITIAL.
*   Get Delivery Request.
SELECT *
FROM ZTEGSDT021
INTO TABLE GT_ZTEGSDT021
WHERE BUKRS = P_BUKRS
AND Z_DR_NO = P_DEREQ.
SELECT *
FROM ZTEGSDT022
INTO TABLE GT_ZTEGSDT022
WHERE BUKRS = P_BUKRS
AND Z_DR_NO = P_DEREQ.
IF SY-SUBRC = 0.
GV_EORC = 'E'.            "Edit

*     Lock process
CALL FUNCTION 'ENQUEUE_EZZTEGSDT021'
EXPORTING
*         MODE_ZTEGSDT021 = 'E'
BUKRS           = P_BUKRS
Z_DR_NO         = P_DEREQ
EXCEPTIONS
FOREIGN_LOCK    = 1
SYSTEM_FAILURE  = 2
OTHERS          = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID
TYPE 'S'
NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

ELSE.
MESSAGE S147(ZMEGSD01) WITH P_DEREQ DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDIF.

ENDFORM.                    " GET_DR_DATA
*&---------------------------------------------------------------------*
*&      Form  GET_SO_ITEMS
*&---------------------------------------------------------------------*
*       Get the open so items
*----------------------------------------------------------------------*
FORM GET_SO_ITEMS .

TYPES: BEGIN OF LTYP_VBAK_KEY,
VBELN   TYPE VBAK-VBELN,
END OF LTYP_VBAK_KEY.
DATA: LV_CONDITION TYPE STRING,
LS_VBEP      TYPE TYP_VBEP,
LS_VBAK_KEY  TYPE LTYP_VBAK_KEY,
LT_VBAK_KEY  TYPE STANDARD TABLE OF LTYP_VBAK_KEY.

LV_CONDITION = 'VBELN = LT_VBAK_KEY-VBELN'.

IF P_ERDAT IS NOT INITIAL.
CONCATENATE LV_CONDITION  'AND ERDAT = P_ERDAT'
INTO LV_CONDITION SEPARATED BY SPACE.
ENDIF.

IF P_ERNAM IS NOT INITIAL.
CONCATENATE LV_CONDITION
'AND ERNAM = P_ERNAM'
INTO   LV_CONDITION SEPARATED BY SPACE.
ENDIF.

CONCATENATE LV_CONDITION 'AND VKORG IN GRG_VKORG'
INTO LV_CONDITION SEPARATED BY SPACE.

IF P_VKGRP IS NOT INITIAL.
CONCATENATE LV_CONDITION
'AND VKGRP = P_VKGRP'
INTO  LV_CONDITION SEPARATED BY SPACE.
ENDIF.

SELECT  VBELN                   "Sales Order
POSNR                   "Sales Item No
MATNR                   "Material
ARKTX                   "Description
UMZIN                   "Conversion Factors
UMZIZ                   "Factors
MEINS                   "Uom
WAERK                   "Currency
KWMENG                  "Order Qty
VRKME                   "Sales Unit
WERKS                   "Plant
VSTEL                   "Shipping point
NETPR                   "Net Price
KPEIN                   "Per
INTO TABLE GT_VBAP
FROM VBAP
WHERE VSTEL IN GRG_VSTEL "=  P_VSTEL
AND ABGRU = SPACE
AND SHKZG = SPACE
AND FKREL = 'A'.
IF SY-SUBRC <> 0.
IF GT_ZTEGSDT021 IS INITIAL.
MESSAGE S064(ZMEGSD01) DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
ENDIF.

IF GV_EORC IS INITIAL.
GV_EORC = 'C'.                  "Create
ENDIF.

CHECK GT_VBAP IS NOT INITIAL.

SELECT   VBELN                  "Sales Document
POSNR                  "Sales Document Item
ETENR                  "Delivery Schedule Item
ETTYP                  "Schedule line category
EDATU                  "Schedule line date
INTO TABLE GT_VBEP
FROM VBEP
FOR ALL ENTRIES IN GT_VBAP
WHERE VBELN = GT_VBAP-VBELN
AND POSNR = GT_VBAP-POSNR
AND EDATU IN S_EDATU.
SORT GT_VBEP.

LOOP AT GT_VBEP INTO LS_VBEP .
LS_VBAK_KEY-VBELN = LS_VBEP-VBELN.
APPEND LS_VBAK_KEY TO LT_VBAK_KEY.
ENDLOOP.

CHECK LT_VBAK_KEY IS NOT INITIAL.
SORT LT_VBAK_KEY.
DELETE ADJACENT DUPLICATES FROM LT_VBAK_KEY.

SELECT  VBELN                   "Sales Order
ERDAT                   "Created On(SO)
ERNAM                   "Created By(SO)
WAERK                   "SD Document Currency
VKORG                   "Sales Organization
VTWEG                   "Distribution Channel
VKGRP                   "Sales Group
VKBUR                   "Sales Office
INTO TABLE GT_VBAK
FROM VBAK
FOR ALL ENTRIES IN LT_VBAK_KEY
WHERE (LV_CONDITION).

CHECK GT_VBAK IS NOT INITIAL.

SELECT  VBELN                   "SO
POSNR                   "Item number
PARVW                   "Partner Function
KUNNR                   "Customer Number
LIFNR                   "Vendor
PERNR                   "Personnel Number
PARNR                   "Contact person
ADRNR                   "Address
INTO TABLE GT_VBPA
FROM VBPA
FOR ALL ENTRIES IN GT_VBAK
WHERE VBELN = GT_VBAK-VBELN
AND PARVW = 'WE'            "Ship-to party function code
AND KUNNR IN GRG_KUNNR. " P_KUNNR.    "Ship-to party

CHECK GT_VBAK IS NOT INITIAL.

SELECT   VBELN                  "Sales Order
POSNR                  "Sale  Order Item
BSTKD                  "Customer PO
INTO TABLE GT_VBKD
FROM VBKD
FOR ALL ENTRIES IN GT_VBAK
WHERE VBELN = GT_VBAK-VBELN
*      AND POSNR = GT_VBAP-POSNR
AND BSTKD IN S_BSTKD.

ENDFORM.                    " GET_SO_ITEMS
*&---------------------------------------------------------------------*
*&      Form  GENERATE_ALV_DATA
*&---------------------------------------------------------------------*
*       Generate the ALV data that to be shown
*----------------------------------------------------------------------*
FORM GENERATE_ALV_DATA .

DATA: LS_ALVDATA    TYPE TYP_ALVDATA,
LS_VBAK       TYPE TYP_VBAK,
LS_VBAPTMP    TYPE VBAP,
LS_VBAKTMP    TYPE VBAK,
LV_ENAME      TYPE PA0001-ENAME,
LS_VBKD       TYPE TYP_VBKD,
LS_VBAP       TYPE TYP_VBAP,
LS_VBEP       TYPE TYP_VBEP,
LS_SDT021     TYPE ZTEGSDT021,
LS_KNMT       TYPE TYP_KNMT,
LS_KNA1       TYPE KNA1,
LS_ADRC       TYPE ADRC,
LV_WAERK      TYPE VBAK-WAERK,
LV_PERNR      TYPE VBPA-PERNR,                      "#EC NEEDED
LS_VBPA       TYPE TYP_VBPA,
LS_SDT022     TYPE ZTEGSDT022,
LS_EDIT       TYPE LVC_S_STYL,
LT_EDIT       TYPE LVC_T_STYL.

CLEAR: LS_ALVDATA.

* IF Delivery request exist
IF GT_ZTEGSDT021 IS NOT INITIAL.

CLEAR: LS_KNA1, LS_ADRC.
READ TABLE GT_ZTEGSDT021 INTO LS_SDT021 INDEX 1.

GS_SCREEN3000-BUKRS         = LS_SDT021-BUKRS."Company Code
GS_SCREEN3000-KUNNR         = LS_SDT021-Z_CUST_ST."Ship To Party
GS_SCREEN3000-Z_CRE_YMD     = LS_SDT021-Z_CRE_YMD."Created Date
GS_SCREEN3000-NETAMT        = LS_SDT021-Z_NET_AMOUNT."Net Amount
GS_SCREEN3000-Z_CRE_USERID  = LS_SDT021-Z_CRE_USRID."Created User
GS_SCREEN3000-Z_PRINTED     = LS_SDT021-Z_PRINTED.  "Printed
GS_SCREEN3000-Z_DR_NO       = LS_SDT021-Z_DR_NO."Delivery Request
GS_SCREEN3000-Z_DELI_DATE   = LS_SDT021-Z_DELIVERY_DATE. "DeliDate
GS_SCREEN3000-Z_TAX_INV     = LS_SDT021-Z_TAX_INV.  "Tax Invoice
GS_SCREEN3000-ZSABE         = LS_SDT021-Z_CONTACT. "ContactPerson
GS_SCREEN3000-TELF1         = LS_SDT021-Z_TEL_ST.    "TEL
GS_SCREEN3000-TELFX         = LS_SDT021-Z_FAX_ST.    "FAX
GS_SCREEN3000-CITY          = LS_SDT021-Z_ADDRESS1_ST. "Address1
GS_SCREEN3000-STREET        = LS_SDT021-Z_ADDRESS2_ST. "Address2
GS_SCREEN3000-STR_SUPPL1    = LS_SDT021-Z_ADDRESS3_ST. "Address3
GS_SCREEN3000-STR_SUPPL2    = LS_SDT021-Z_ADDRESS4_ST. "Address4
GS_SCREEN3000-ENAME         = LS_SDT021-ENAME. "Sales-Co-Ordinator
GS_SCREEN3000-WAERK         = LS_SDT021-WAERK. "Currency
SELECT SINGLE *
FROM KNA1
INTO LS_KNA1
WHERE KUNNR = LS_SDT021-Z_CUST_ST.
CONCATENATE LS_KNA1-NAME2 LS_KNA1-NAME3
INTO GS_SCREEN3000-NAME23.                      "Ship To Party


LOOP AT GT_ZTEGSDT022 INTO LS_SDT022.
CLEAR: LS_ALVDATA, LS_VBAPTMP,LS_EDIT,LS_KNMT.
REFRESH: LT_EDIT.

LS_ALVDATA-SELECT        =  CNS_X.        "Selected
LS_ALVDATA-DELETE        =  LS_SDT022-Z_DELETE_FLAG."Delete
LS_ALVDATA-INDICATOR     =  CNS_IND_DR.   "Data indicator
LS_ALVDATA-Z_DR_NO    =  LS_SDT022-Z_DR_NO."Delivery Request
LS_ALVDATA-Z_DR_ITEM_NO  = LS_SDT022-Z_DR_ITEM_NO."Del Item No
LS_ALVDATA-VBELN         =  LS_SDT022-VBELN.   "Sales Order
LS_ALVDATA-POSNR         =  LS_SDT022-POSNR.   "Sales Item No

SELECT SINGLE BSTKD                            "Customer PO
INTO LS_ALVDATA-BSTKD
FROM VBKD
WHERE VBELN = LS_SDT022-VBELN
AND POSNR = LS_SDT022-POSNR.
IF SY-SUBRC <> 0.
SELECT SINGLE BSTKD                            "Customer PO
INTO LS_ALVDATA-BSTKD
FROM VBKD
WHERE VBELN = LS_SDT022-VBELN.
ENDIF.

SELECT SINGLE *
FROM VBAK
INTO LS_VBAKTMP
WHERE VBELN = LS_SDT022-VBELN.

*     Get so item info
SELECT SINGLE *
FROM VBAP
INTO LS_VBAPTMP
WHERE VBELN = LS_SDT022-VBELN
AND POSNR = LS_SDT022-POSNR.

LS_ALVDATA-MATNR         =  LS_VBAPTMP-MATNR.     "Material
LS_ALVDATA-ARKTX         =  LS_VBAPTMP-ARKTX.     "Description
LS_ALVDATA-KWMENG        =  LS_VBAPTMP-KWMENG.    "Order Qty
SELECT SINGLE EDATU                                   "#EC WARNOK
FROM VBEP
INTO LS_ALVDATA-EDATU                           "Delivery Date
WHERE VBELN = LS_SDT022-VBELN
AND POSNR = LS_SDT022-POSNR.

CLEAR: LS_VBPA.
READ TABLE GT_VBPA   INTO LS_VBPA
WITH KEY VBELN = LS_SDT022-VBELN.

SELECT SINGLE  VKORG                "Sales Organization
VTWEG                "Distribution Channel
KUNNR                "Customer number
MATNR                "Material Number
KDMAT                "Customer Material Number
POSTX                "Customer description
INTO LS_KNMT
FROM KNMT
WHERE VKORG = LS_VBAKTMP-VKORG
AND VTWEG = LS_VBAKTMP-VTWEG
AND KUNNR = LS_VBPA-KUNNR
AND MATNR = LS_VBAPTMP-MATNR.


SELECT SUM( Z_DR_QTY )                          "Total Requested
FROM ZTEGSDT022
INTO LS_ALVDATA-DRSUM_QTY                     "Net Price
WHERE VBELN = LS_SDT022-VBELN
AND POSNR = LS_SDT022-POSNR
AND Z_DELETE_FLAG = SPACE.

*      LS_ALVDATA-DRSUM_QTY     =  LS_SDT022-Z_DR_QTY.
LS_ALVDATA-OPEN_QTY =
LS_VBAPTMP-KWMENG - LS_ALVDATA-DRSUM_QTY. "Open Qty
LS_ALVDATA-OLD_REQ       = LS_SDT022-Z_DR_QTY. "Old requst Qty
LS_ALVDATA-NEW_REQ       =  LS_SDT022-Z_DR_QTY.  "New requestQty
LS_ALVDATA-VRKME         =  LS_VBAPTMP-VRKME.    "Sales Unit
LS_ALVDATA-WAERK         =  LS_VBAPTMP-WAERK.    "Currency
LS_ALVDATA-NETPR         =  LS_VBAPTMP-NETPR.    "Net Price
LS_ALVDATA-KPEIN         =  LS_VBAPTMP-KPEIN.    "Per
LS_ALVDATA-WERKS         =  LS_VBAPTMP-WERKS.    "Plant
LS_ALVDATA-UNTPR         =
LS_VBAPTMP-NETPR / LS_VBAPTMP-KPEIN.  "Unit Price
SELECT SINGLE ENAME                                   "#EC WARNOK
FROM VBPA
INNER JOIN PA0001
ON VBPA~PERNR = PA0001~PERNR
INTO LS_ALVDATA-ENAME             "Sales Assistant
WHERE VBELN = LS_SDT022-VBELN
AND PARVW = 'ZP'.
LS_ALVDATA-DELAMT        =
LS_ALVDATA-NEW_REQ * LS_ALVDATA-UNTPR. "Delivery Amount
LS_ALVDATA-UMZIN         =  LS_VBAPTMP-UMZIN. "Conversion Factors
LS_ALVDATA-UMZIZ         =  LS_VBAPTMP-UMZIZ. "Factors
LS_ALVDATA-MEINS         =  LS_VBAPTMP-MEINS. "Uom
LS_ALVDATA-KDMAT         =  LS_KNMT-KDMAT. "Customer Material
LS_ALVDATA-POSTX         =  LS_KNMT-POSTX. "Customer Mat Desc

LS_EDIT-FIELDNAME = 'SELECT'.
LS_EDIT-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
LS_EDIT-STYLE2 = SPACE.
LS_EDIT-STYLE3 = SPACE.
LS_EDIT-STYLE4 = SPACE.
INSERT LS_EDIT INTO TABLE LT_EDIT.

LS_ALVDATA-STYLE         =   LT_EDIT. "FOR EDIT DISABLE
APPEND LS_ALVDATA TO GT_ALVDATA.
ENDLOOP.

ENDIF.

* If open so exist
IF GT_VBAP IS NOT INITIAL.
LOOP AT GT_VBAP INTO LS_VBAP.
CLEAR:  LS_ALVDATA, LS_VBKD,LS_EDIT,LS_VBAK,
LS_VBPA,LS_KNMT,LS_VBEP,LV_PERNR.
REFRESH: LT_EDIT.

READ TABLE GT_VBAK INTO LS_VBAK
WITH KEY VBELN = LS_VBAP-VBELN.
IF SY-SUBRC <> 0.
CONTINUE.
ELSE.
IF LV_WAERK IS  INITIAL.
LV_WAERK = LS_VBAK-WAERK.
ENDIF.
ENDIF.

IF GV_EORC  = 'E'.    "Ignore the item which DR already exist
*       Check if this item already exist in Delivery requst
READ TABLE GT_ZTEGSDT022 TRANSPORTING NO FIELDS
WITH KEY  VBELN = LS_VBAP-VBELN
POSNR = LS_VBAP-POSNR.
IF SY-SUBRC = 0.
CONTINUE.
ENDIF.
ENDIF.

*     Check the customer PO on selection screen
READ TABLE GT_VBKD INTO LS_VBKD
WITH KEY VBELN = LS_VBAP-VBELN
POSNR = LS_VBAP-POSNR.
IF SY-SUBRC <> 0.
*       Check the customer PO on selection screen
READ TABLE GT_VBKD INTO LS_VBKD
WITH KEY VBELN = LS_VBAP-VBELN.
IF SY-SUBRC <> 0.
IF S_BSTKD IS NOT INITIAL.
CONTINUE.
ENDIF.
ELSE.
LS_ALVDATA-BSTKD = LS_VBKD-BSTKD. "Customer PO
ENDIF.

ELSE.
LS_ALVDATA-BSTKD = LS_VBKD-BSTKD. "Customer PO
ENDIF.

*     Check the ship_to party
READ TABLE GT_VBPA INTO LS_VBPA
WITH KEY VBELN = LS_VBAP-VBELN.
IF SY-SUBRC <> 0.
CONTINUE.
ENDIF.

*     Check the schedule line date
READ TABLE GT_VBEP INTO LS_VBEP
WITH KEY  VBELN = LS_VBAP-VBELN
POSNR = LS_VBAP-POSNR.
IF SY-SUBRC = 0.
LS_ALVDATA-EDATU     =  LS_VBEP-EDATU."Delivery Date
ELSE.
CONTINUE.
ENDIF.

SELECT SINGLE  VKORG                "Sales Organization
VTWEG                "Distribution Channel
KUNNR                "Customer number
MATNR                "Material Number
KDMAT                "Customer Material Number
POSTX                "Customer description
INTO LS_KNMT
FROM KNMT
WHERE VKORG = LS_VBAK-VKORG
AND VTWEG = LS_VBAK-VTWEG
AND KUNNR = LS_VBPA-KUNNR
AND MATNR = LS_VBAP-MATNR.
IF SY-SUBRC = 0.
LS_ALVDATA-KDMAT     = LS_KNMT-KDMAT. "Customer Material
LS_ALVDATA-POSTX     = LS_KNMT-POSTX. "Customer Material Desc
ENDIF.

LS_ALVDATA-INDICATOR   =  CNS_IND_SO.   "Data indicator
CLEAR LS_ALVDATA-Z_DR_NO.               "Delivery Request
CLEAR LS_ALVDATA-Z_DR_ITEM_NO.          "Del Item No
LS_ALVDATA-VBELN       =  LS_VBAP-VBELN."Sales Order
LS_ALVDATA-POSNR       =  LS_VBAP-POSNR."Sales Item No
LS_ALVDATA-MATNR       =  LS_VBAP-MATNR."Material
LS_ALVDATA-ARKTX       =  LS_VBAP-ARKTX."Description
LS_ALVDATA-KWMENG      =  LS_VBAP-KWMENG."Order Qty
SELECT SUM( Z_DR_QTY )                          "Total Requested
FROM ZTEGSDT022
INTO LS_ALVDATA-DRSUM_QTY                     "Net Price
WHERE VBELN = LS_VBAP-VBELN
AND POSNR = LS_VBAP-POSNR
AND Z_DELETE_FLAG = SPACE.
"Ignore the unopen item
IF LS_VBAP-KWMENG <= LS_ALVDATA-DRSUM_QTY.
CONTINUE.
ENDIF.
LS_ALVDATA-OPEN_QTY      =
LS_VBAP-KWMENG  - LS_ALVDATA-DRSUM_QTY.     "Open Qty
*      LS_ALVDATA-OLD_REQ       =      "Old requst Qty
LS_ALVDATA-NEW_REQ       =  LS_ALVDATA-OPEN_QTY."New request Qty
LS_ALVDATA-VRKME         =  LS_VBAP-VRKME.    "Sales Unit
LS_ALVDATA-WAERK         =  LS_VBAP-WAERK.    "Currency
LS_ALVDATA-NETPR         =  LS_VBAP-NETPR.    "Net Price
LS_ALVDATA-KPEIN         =  LS_VBAP-KPEIN.    "Per
LS_ALVDATA-WERKS         =  LS_VBAP-WERKS.    "Plant
LS_ALVDATA-UNTPR         =
LS_VBAP-NETPR  / LS_VBAP-KPEIN.      "Unit Price
SELECT SINGLE VBPA~PERNR PA0001~ENAME                 "#EC WARNOK
FROM VBPA
INNER JOIN PA0001
ON VBPA~PERNR = PA0001~PERNR
INTO (LV_PERNR,LS_ALVDATA-ENAME)     "Sales Assistant
WHERE VBELN = LS_VBAP-VBELN
AND PARVW = 'ZP'.
IF SY-SUBRC = 0.
IF LV_ENAME IS INITIAL.
LV_ENAME = LS_ALVDATA-ENAME.
ENDIF.
ENDIF.
LS_ALVDATA-DELAMT        =
LS_ALVDATA-NEW_REQ * LS_ALVDATA-UNTPR.   "Delivery Amount
LS_ALVDATA-UMZIN         =  LS_VBAP-UMZIN. "Conversion Factors
LS_ALVDATA-UMZIZ         = LS_VBAP-UMZIZ.  "Factors
LS_ALVDATA-MEINS         =  LS_VBAP-MEINS. "Uom

LS_EDIT-FIELDNAME = 'DELETE'.
LS_EDIT-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_DISABLED.
LS_EDIT-STYLE2 = SPACE.
LS_EDIT-STYLE3 = SPACE.
LS_EDIT-STYLE4 = SPACE.
INSERT LS_EDIT INTO TABLE LT_EDIT.

LS_ALVDATA-STYLE         =   LT_EDIT. "FOR EDIT DISABLE
APPEND LS_ALVDATA TO GT_ALVDATA.
ENDLOOP.

IF GS_SCREEN3000 IS INITIAL.
CLEAR: LS_KNA1, LS_ADRC.
SELECT SINGLE *
FROM KNA1
INTO LS_KNA1
WHERE KUNNR = P_KUNNR.
IF SY-SUBRC = 0.
SELECT SINGLE *                                     "#EC WARNOK
FROM ADRC
INTO LS_ADRC
WHERE ADDRNUMBER = LS_KNA1-ADRNR.
CONCATENATE LS_KNA1-NAME2 LS_KNA1-NAME3
INTO  GS_SCREEN3000-NAME23. "Ship To Party
ENDIF.
SELECT SINGLE ZSABE             "ContactPerson
INTO  GS_SCREEN3000-ZSABE
FROM  KNB1
WHERE  KUNNR = P_KUNNR
AND  BUKRS = P_BUKRS.
GS_SCREEN3000-BUKRS         = P_BUKRS.
GS_SCREEN3000-KUNNR         = P_KUNNR."Ship To Party
GS_SCREEN3000-NAME1         = LS_KNA1-NAME1.  "Customer Name
GS_SCREEN3000-Z_CRE_YMD     = SY-DATUM."Created Date
*      GS_SCREEN3000-NETAMT        =           "Net Amount
GS_SCREEN3000-Z_CRE_USERID  = SY-UNAME."Created User
*      GS_SCREEN3000-Z_PRINTED     = LS_SDT021-Z_PRINTED.  "Printed
*      GS_SCREEN3000-Z_DR_NO       = LS_SDT021-Z_DR_NO."Delivery Request
*      GS_SCREEN3000-Z_DELI_DATE  = LS_SDT021-Z_DELIVERY_DATE. "DeliDate
*      GS_SCREEN3000-Z_TAX_INV     = LS_SDT021-Z_TAX_INV.  "Tax Invoice

GS_SCREEN3000-TELF1         = LS_KNA1-TELF1.    "TEL
GS_SCREEN3000-TELFX         = LS_KNA1-TELFX.    "FAX
GS_SCREEN3000-CITY          = LS_ADRC-CITY1.         "Address1
GS_SCREEN3000-STREET        = LS_ADRC-STREET.        "Address2
GS_SCREEN3000-STR_SUPPL1    = LS_ADRC-STR_SUPPL1.    "Address3
GS_SCREEN3000-STR_SUPPL2    = LS_ADRC-STR_SUPPL2.    "Address4
GS_SCREEN3000-ENAME         = LV_ENAME.  "Sales-Co-Ordinator
GS_SCREEN3000-WAERK         = LV_WAERK.  "Sales-Co-Ordinator
ENDIF.

ENDIF.


ENDFORM.                    " GENERATE_ALV_DATA
*&---------------------------------------------------------------------*
*&      Form  SET_ALV_PROPERTY
*&---------------------------------------------------------------------*
*       Set the ALV property
*----------------------------------------------------------------------*
FORM SET_ALV_PROPERTY .

* Set the ALV layout property
PERFORM SET_ALV_LAYOUT.

* Set the fieldcat property
PERFORM SET_ALV_FIELDCAT.

ENDFORM.                    " SET_ALV_PROPERTY
*&---------------------------------------------------------------------*
*&      Form  SHOW_ALV
*&---------------------------------------------------------------------*
*       Show the ALV
*----------------------------------------------------------------------*
FORM SHOW_ALV .
IF GT_ALVDATA IS INITIAL.
MESSAGE S064(ZMEGSD01) DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
EXPORTING
I_CALLBACK_PROGRAM       = SY-REPID
I_CALLBACK_PF_STATUS_SET = GV_SET_STATUS
I_CALLBACK_USER_COMMAND  = GV_CALLBACK
IS_LAYOUT_LVC            = GS_LAYOUT
IT_FIELDCAT_LVC          = GT_FIELDCAT
I_SAVE                   = GV_SAVE
TABLES
T_OUTTAB                 = GT_ALVDATA
EXCEPTIONS
PROGRAM_ERROR            = 1
OTHERS                   = 2.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

ENDFORM.                    " SHOW_ALV
*&---------------------------------------------------------------------*
*&      Form  SET_ALV_LAYOUT
*&---------------------------------------------------------------------*
*       Set the ALV layout property
*----------------------------------------------------------------------*
FORM SET_ALV_LAYOUT .

GS_LAYOUT-COL_OPT = 'X'.
GS_LAYOUT-CWIDTH_OPT = 'X'.
GS_LAYOUT-SEL_MODE = 'A'.
GS_LAYOUT-STYLEFNAME = 'STYLE'.

ENDFORM.                    " SET_ALV_LAYOUT
*&---------------------------------------------------------------------*
*&      Form  SET_ALV_FIELDCAT
*&---------------------------------------------------------------------*
*       Set the fieldcat property
*----------------------------------------------------------------------*
FORM SET_ALV_FIELDCAT .
*  checkbox fix_column fieldnm  edit text_s text_m text_l hotspot
PERFORM SET_FIELDCAT USING:
CNS_X  CNS_X  'SELECT'  CNS_X TEXT-01S TEXT-01S TEXT-01S SPACE,
CNS_X  CNS_X  'DELETE'  CNS_X TEXT-02S TEXT-02S TEXT-02S SPACE,
SPACE  CNS_X  'Z_DR_NO' SPACE TEXT-03S TEXT-03M TEXT-03M SPACE,
SPACE CNS_X 'Z_DR_ITEM_NO' SPACE TEXT-04S TEXT-04M TEXT-04L SPACE,
SPACE SPACE 'VBELN' SPACE TEXT-05S TEXT-05M TEXT-05M CNS_X,
SPACE SPACE 'POSNR' SPACE TEXT-06S TEXT-06M TEXT-06M SPACE,
SPACE SPACE 'BSTKD' SPACE TEXT-07S TEXT-07M TEXT-07M SPACE,
SPACE SPACE 'MATNR' SPACE TEXT-08S TEXT-08M TEXT-08M CNS_X,
SPACE SPACE 'ARKTX' SPACE TEXT-09S TEXT-09M TEXT-09L SPACE,
SPACE SPACE 'KWMENG' SPACE TEXT-10S TEXT-10M TEXT-10M SPACE,
SPACE SPACE 'EDATU' SPACE TEXT-11S TEXT-11M TEXT-11M SPACE,
SPACE SPACE 'DRSUM_QTY' SPACE TEXT-12S TEXT-12M TEXT-12L SPACE,
SPACE SPACE 'OPEN_QTY' SPACE TEXT-13S TEXT-13M TEXT-13M SPACE,
SPACE SPACE 'OLD_REQ' SPACE TEXT-14S TEXT-14M TEXT-14M SPACE,
SPACE SPACE 'NEW_REQ' CNS_X TEXT-15S TEXT-15M TEXT-15M SPACE,
SPACE SPACE 'VRKME' SPACE TEXT-16S TEXT-16M TEXT-16M SPACE,
SPACE SPACE 'WAERK' SPACE TEXT-17S TEXT-17M TEXT-17M SPACE,
SPACE SPACE 'NETPR' SPACE TEXT-18S TEXT-18M TEXT-18M SPACE,
SPACE SPACE 'KPEIN' SPACE TEXT-19S TEXT-19S TEXT-19S SPACE,
SPACE SPACE 'DELAMT' SPACE TEXT-20S TEXT-20M TEXT-20M SPACE,
SPACE SPACE 'WERKS' SPACE TEXT-21S TEXT-21S TEXT-21S SPACE,
SPACE SPACE 'UNTPR' SPACE TEXT-22S TEXT-22S TEXT-22S SPACE,
SPACE SPACE 'ENAME' SPACE TEXT-23S TEXT-23M TEXT-23M SPACE,
SPACE SPACE 'UMZIN' SPACE TEXT-24S TEXT-24M TEXT-24M SPACE,
SPACE SPACE 'UMZIZ' SPACE TEXT-24S TEXT-24M TEXT-24M SPACE,
SPACE SPACE 'MEINS' SPACE TEXT-25S TEXT-25S TEXT-25S SPACE,
SPACE SPACE 'KDMAT' SPACE TEXT-26S TEXT-26M TEXT-26M SPACE,
SPACE SPACE 'POSTX' SPACE TEXT-27S TEXT-27M TEXT-27L SPACE.

ENDFORM.                    " SET_ALV_FIELDCAT

*&---------------------------------------------------------------------*
*&      Form  ALV_OTHERS_SET
*&---------------------------------------------------------------------*
*       USER_COMMAND
*----------------------------------------------------------------------*
FORM USER_COMMAND USING U_UCOMM     LIKE SY-UCOMM           "#EC CALLED
P_SELFIELD  TYPE SLIS_SELFIELD.

DATA: LS_ALVDATA    TYPE TYP_ALVDATA,
LS_STBL       TYPE LVC_S_STBL,
LV_VALID      TYPE CHAR1,                           "#EC NEEDED
LS_DETA_DT022 TYPE  ZTEGSDT022,
LS_DETA_DT021 TYPE  ZTEGSDT021,
LV_DRITEM(6)     TYPE N,
LT_DETA_DT022 TYPE STANDARD TABLE OF ZTEGSDT022,
LT_DETA_DT021 TYPE STANDARD TABLE OF ZTEGSDT021,
LR_GRID1      TYPE REF TO CL_GUI_ALV_GRID.
FIELD-SYMBOLS: <LFS_ALVDATA>  TYPE TYP_ALVDATA,
<LFS_DT022>    TYPE  ZTEGSDT022.

CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
IMPORTING
E_GRID = LR_GRID1.
CALL METHOD LR_GRID1->CHECK_CHANGED_DATA
IMPORTING
E_VALID = LV_VALID.

LOOP AT GT_ALVDATA ASSIGNING <LFS_ALVDATA>.
<LFS_ALVDATA>-DELAMT  =
<LFS_ALVDATA>-NEW_REQ * <LFS_ALVDATA>-UNTPR.
ENDLOOP.

* Check if the delivery request header is setup
PERFORM CHECK_HEAD_SET.

CASE U_UCOMM.
WHEN 'SAVE'.
IF GV_HEADSET IS INITIAL.
MESSAGE E153(ZMEGSD01).
ENDIF.
IF  GV_EORC = 'C'.   "Create

LV_DRITEM = LV_DRITEM + 10.
LOOP AT GT_ALVDATA INTO LS_ALVDATA
WHERE SELECT = CNS_X.
IF LS_ALVDATA-NEW_REQ <= 0.
MESSAGE E158(ZMEGSD01).
*            CONTINUE.
ENDIF.
LS_DETA_DT022-MANDT = SY-MANDT.
LS_DETA_DT022-BUKRS         = P_BUKRS.
*          LS_DETA_DT022-Z_DR_NO       = LS_DETA_DT021-Z_DR_NO.
LS_DETA_DT022-Z_DR_ITEM_NO  = LV_DRITEM.
LS_DETA_DT022-VBELN         = LS_ALVDATA-VBELN.
LS_DETA_DT022-POSNR         = LS_ALVDATA-POSNR.
LS_DETA_DT022-MATNR         = LS_ALVDATA-MATNR.
LS_DETA_DT022-Z_DR_QTY      = LS_ALVDATA-NEW_REQ.
LS_DETA_DT022-ZIEME         = LS_ALVDATA-MEINS.
LS_DETA_DT022-Z_CRE_YMD     = SY-DATUM.
LS_DETA_DT022-Z_CRE_USERID  = SY-UNAME.
LS_DETA_DT022-Z_MOD_YMD     = SY-DATUM.
LS_DETA_DT022-Z_MOD_USERID  = SY-UNAME.
APPEND LS_DETA_DT022 TO LT_DETA_DT022.
LV_DRITEM =  LV_DRITEM + 10.
ENDLOOP.

*       No data was checked.
IF SY-SUBRC <> 0.
MESSAGE E008(ZMEGSD01).
ENDIF.

PERFORM GET_NEXT_ID.
LS_DETA_DT021-BUKRS = P_BUKRS.
CONCATENATE 'TDR-' SY-DATUM+4(4) GV_DRNUM
INTO LS_DETA_DT021-Z_DR_NO.

LS_DETA_DT021-MANDT = SY-MANDT.
LS_DETA_DT021-Z_CUST_ST       = P_KUNNR.
LS_DETA_DT021-Z_DELIVERY_DATE = GS_SCREEN3000-Z_DELI_DATE.
LS_DETA_DT021-Z_TAX_INV       = GS_SCREEN3000-Z_TAX_INV.
LS_DETA_DT021-Z_CONTACT       = GS_SCREEN3000-ZSABE.
LS_DETA_DT021-VSTEL           = P_VSTEL.
LS_DETA_DT021-Z_TEL_ST        = GS_SCREEN3000-TELF1.
LS_DETA_DT021-Z_FAX_ST        = GS_SCREEN3000-TELFX.
LS_DETA_DT021-Z_ADDRESS1_ST   = GS_SCREEN3000-CITY.
LS_DETA_DT021-Z_ADDRESS2_ST   = GS_SCREEN3000-STREET.
LS_DETA_DT021-Z_ADDRESS3_ST   = GS_SCREEN3000-STR_SUPPL1.
LS_DETA_DT021-Z_ADDRESS4_ST   = GS_SCREEN3000-STR_SUPPL2.
CLEAR: LS_DETA_DT021-Z_PRINTED.
LS_DETA_DT021-Z_SALES_ASS     = GS_SCREEN3000-ENAME.
LS_DETA_DT021-Z_CRE_YMD       = SY-DATUM.
LS_DETA_DT021-Z_CRE_USRID     = SY-UNAME.
LS_DETA_DT021-Z_MOD_YMD       = SY-DATUM.
LS_DETA_DT021-Z_MOD_USRID     = SY-UNAME.
LS_DETA_DT021-ENAME           = GS_SCREEN3000-ENAME.
LS_DETA_DT021-Z_NET_AMOUNT    = GS_SCREEN3000-NETAMT.
LS_DETA_DT021-WAERK           = GS_SCREEN3000-WAERK.
APPEND LS_DETA_DT021 TO LT_DETA_DT021.

*       Set Delivery No to the table of items.
LOOP AT LT_DETA_DT022 INTO LS_DETA_DT022.
LS_DETA_DT022-Z_DR_NO  = LS_DETA_DT021-Z_DR_NO.
MODIFY LT_DETA_DT022 FROM LS_DETA_DT022
TRANSPORTING Z_DR_NO.
ENDLOOP.

ELSEIF GV_EORC = 'E'.
READ TABLE GT_ZTEGSDT021 INTO LS_DETA_DT021 INDEX 1.
LS_DETA_DT021-Z_DELIVERY_DATE = GS_SCREEN3000-Z_DELI_DATE.
LS_DETA_DT021-Z_TAX_INV       = GS_SCREEN3000-Z_TAX_INV.
LS_DETA_DT021-Z_CONTACT       = GS_SCREEN3000-ZSABE.
LS_DETA_DT021-Z_TEL_ST        = GS_SCREEN3000-TELF1.
LS_DETA_DT021-Z_FAX_ST        = GS_SCREEN3000-TELFX.
LS_DETA_DT021-Z_ADDRESS1_ST   = GS_SCREEN3000-CITY.
LS_DETA_DT021-Z_ADDRESS2_ST   = GS_SCREEN3000-STREET.
LS_DETA_DT021-Z_ADDRESS3_ST   = GS_SCREEN3000-STR_SUPPL1.
LS_DETA_DT021-Z_ADDRESS4_ST   = GS_SCREEN3000-STR_SUPPL2.
LS_DETA_DT021-Z_MOD_YMD       = SY-DATUM.
LS_DETA_DT021-Z_MOD_USRID     = SY-UNAME.
LS_DETA_DT021-ENAME           = GS_SCREEN3000-ENAME.
APPEND LS_DETA_DT021 TO LT_DETA_DT021.
APPEND LINES OF GT_ZTEGSDT022 TO LT_DETA_DT022.

SORT LT_DETA_DT022 BY Z_DR_NO Z_DR_ITEM_NO.
LOOP AT LT_DETA_DT022 ASSIGNING <LFS_DT022> .
READ TABLE GT_ALVDATA INTO LS_ALVDATA
WITH KEY VBELN = <LFS_DT022>-VBELN
POSNR = <LFS_DT022>-POSNR.
<LFS_DT022>-Z_DELETE_FLAG = LS_ALVDATA-DELETE.
<LFS_DT022>-Z_DR_QTY =  LS_ALVDATA-NEW_REQ.
LV_DRITEM = <LFS_DT022>-Z_DR_ITEM_NO.
DELETE  GT_ALVDATA FROM LS_ALVDATA.
ENDLOOP.

LV_DRITEM = LV_DRITEM + 10.
LOOP AT GT_ALVDATA INTO LS_ALVDATA
WHERE SELECT = CNS_X.
IF LS_ALVDATA-NEW_REQ <= 0.
MESSAGE E158(ZMEGSD01).
*            CONTINUE.
ENDIF.
LS_DETA_DT022-BUKRS         = P_BUKRS.
LS_DETA_DT022-Z_DR_NO       = LS_DETA_DT021-Z_DR_NO.
LS_DETA_DT022-Z_DR_ITEM_NO  = LV_DRITEM.
LS_DETA_DT022-VBELN         = LS_ALVDATA-VBELN.
LS_DETA_DT022-POSNR         = LS_ALVDATA-POSNR.
LS_DETA_DT022-MATNR         = LS_ALVDATA-MATNR.
LS_DETA_DT022-Z_DR_QTY      = LS_ALVDATA-NEW_REQ.
LS_DETA_DT022-ZIEME         = LS_ALVDATA-MEINS.
LS_DETA_DT022-Z_CRE_YMD     = SY-DATUM.
LS_DETA_DT022-Z_CRE_USERID  = SY-UNAME.
LS_DETA_DT022-Z_MOD_YMD     = SY-DATUM.
LS_DETA_DT022-Z_MOD_USERID  = SY-UNAME.
APPEND LS_DETA_DT022 TO LT_DETA_DT022.
LV_DRITEM =  LV_DRITEM + 10.
ENDLOOP.
ENDIF.

CHECK  NOT  ( LT_DETA_DT021 IS NOT INITIAL
AND LT_DETA_DT022 IS INITIAL ).
*     Update delivery request
MODIFY ZTEGSDT021 FROM TABLE LT_DETA_DT021.
IF SY-SUBRC <> 0.
*        Delivery Request [xxxxxxx] is locked by other user
MESSAGE S149(ZMEGSD01) WITH LS_DETA_DT021-Z_DR_NO
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.

*     Update delivery request item
MODIFY ZTEGSDT022 FROM TABLE LT_DETA_DT022.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
*        Delivery Request [xxxxxxx] is locked by other user
MESSAGE S149(ZMEGSD01) WITH LS_DETA_DT021-Z_DR_NO
DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ELSE.
COMMIT WORK AND WAIT.
ENDIF..


IF GV_EORC = 'E'.
MESSAGE S151(ZMEGSD01) WITH LS_DETA_DT021-Z_DR_NO.

*       Unlock all
CALL FUNCTION 'DEQUEUE_ALL'.

ELSEIF GV_EORC = 'C'.
GS_SCREEN3000-Z_DR_NO = LS_DETA_DT021-Z_DR_NO.
EXPORT P1 = LS_DETA_DT021-Z_DR_NO TO MEMORY ID 'DRNO'.
MESSAGE S150(ZMEGSD01) WITH LS_DETA_DT021-Z_DR_NO.
ENDIF.
LEAVE TO SCREEN 0.
WHEN 'SELALL'.
LS_ALVDATA-SELECT = 'X'.
MODIFY GT_ALVDATA FROM LS_ALVDATA TRANSPORTING SELECT
WHERE SELECT IS INITIAL.
WHEN 'DEALL'.
CLEAR LS_ALVDATA-SELECT.
MODIFY GT_ALVDATA FROM LS_ALVDATA TRANSPORTING SELECT
WHERE SELECT ='X'.
WHEN 'DELALL'.
LS_ALVDATA-DELETE = 'X'.
MODIFY GT_ALVDATA FROM LS_ALVDATA TRANSPORTING DELETE
WHERE DELETE IS INITIAL.
WHEN 'DEDELALL'.
CLEAR LS_ALVDATA-DELETE.
MODIFY GT_ALVDATA FROM LS_ALVDATA TRANSPORTING DELETE
WHERE DELETE ='X'.
WHEN '&IC1'.        " SAP standard code for double-clicking
IF P_SELFIELD-FIELDNAME = 'VBELN'.
IF P_SELFIELD-VALUE IS NOT INITIAL.
SET PARAMETER ID 'AUN' FIELD P_SELFIELD-VALUE.
CALL TRANSACTION 'VA03' AND SKIP FIRST SCREEN.
ENDIF.
ELSEIF P_SELFIELD-FIELDNAME = 'MATNR'.
IF P_SELFIELD-VALUE IS NOT INITIAL.
SET PARAMETER ID 'MAT' FIELD P_SELFIELD-VALUE.
CALL TRANSACTION 'MM03'.
ENDIF.
ENDIF.
WHEN 'HEADER'.
CLEAR: GS_SCREEN3000-NETAMT.
LOOP AT GT_ALVDATA INTO LS_ALVDATA
WHERE SELECT = CNS_X.

GS_SCREEN3000-NETAMT =
GS_SCREEN3000-NETAMT + LS_ALVDATA-DELAMT. "Collect netamount
ENDLOOP.
CONDENSE: GS_SCREEN3000-NETAMT.
CALL SCREEN 3000.
WHEN OTHERS.
ENDCASE.

LS_STBL-ROW = 'X'.
LS_STBL-COL = 'X'.
CALL METHOD LR_GRID1->REFRESH_TABLE_DISPLAY
EXPORTING
IS_STABLE = LS_STBL.

ENDFORM.                    " USER_COMMAND
*&---------------------------------------------------------------------*
*&      Form  SET_FIELDCAT
*&---------------------------------------------------------------------*
*       set fieldcat internal table
*----------------------------------------------------------------------*
*      -->P_IV_CHECKBOX     Output as checkbox
*      -->P_IV_FIX_COLUMN   Fix Column
*      -->P_IV_FIELDNAME    Field name
*      -->P_IV_EDIT         Ready for input
*      -->P_IV_TEXT_S       Short Field Label
*      -->P_IV_TEXT_M       Medium Field Label
*      -->P_IV_TEXT_L       Long Field Label
*      -->P_IV_HOTSPOT      SingleClick-sensitive
*----------------------------------------------------------------------*
FORM SET_FIELDCAT  USING    P_IV_CHECKBOX
P_IV_FIX_COLUMN
P_IV_FIELDNAME
P_IV_EDIT
P_IV_TEXT_S
P_IV_TEXT_M
P_IV_TEXT_L
P_IV_HOTSPOT.

DATA: LS_FCAT   TYPE LVC_S_FCAT.

CLEAR LS_FCAT.
LS_FCAT-CHECKBOX   = P_IV_CHECKBOX.
LS_FCAT-FIX_COLUMN = P_IV_FIX_COLUMN.
LS_FCAT-TABNAME    = 'GT_ALVDATA'.
LS_FCAT-EDIT       = P_IV_EDIT.
LS_FCAT-FIELDNAME = P_IV_FIELDNAME.
LS_FCAT-SCRTEXT_L = P_IV_TEXT_L.
LS_FCAT-SCRTEXT_S = P_IV_TEXT_S.
LS_FCAT-SCRTEXT_M = P_IV_TEXT_M.
LS_FCAT-HOTSPOT   = P_IV_HOTSPOT.
IF P_IV_FIELDNAME = 'VBELN'.
LS_FCAT-CONVEXIT = 'ALPHA'.
ENDIF.
IF      P_IV_FIELDNAME = 'MEINS'
OR  P_IV_FIELDNAME = 'VRKME'.
LS_FCAT-CONVEXIT = 'CUNIT'.
ENDIF.
* Set currency reference
IF     P_IV_FIELDNAME = 'DELAMT'
OR P_IV_FIELDNAME = 'UNTPR'.
LS_FCAT-CFIELDNAME = 'WAERK'.
ENDIF.
* Set quantity reference
IF      P_IV_FIELDNAME = 'KWMENG'
OR  P_IV_FIELDNAME = 'DRSUM_QTY'
OR  P_IV_FIELDNAME = 'OPEN_QTY'
OR  P_IV_FIELDNAME = 'OLD_REQ'
OR  P_IV_FIELDNAME = 'NEW_REQ'.
LS_FCAT-QFIELDNAME = 'MEINS'.
LS_FCAT-DECIMALS = '3'.
ENDIF.
APPEND LS_FCAT TO GT_FIELDCAT.

ENDFORM.                    " SET_FIELDCAT

*&---------------------------------------------------------------------*
*&      Form  FRM_MY_STATUS
*&---------------------------------------------------------------------*
*       Status Set
*----------------------------------------------------------------------*
*  --> I_EXTAB    STATUS
*----------------------------------------------------------------------*
FORM FRM_MY_STATUS                                          "#EC CALLED
USING I_EXTAB TYPE SLIS_T_EXTAB.                        "#EC NEEDED

SET PF-STATUS '2000'.

ENDFORM.        "FRM_MY_STATUS
*&---------------------------------------------------------------------*
*&      Form  SET_INITIAL
*&---------------------------------------------------------------------*
*       Initialization
*----------------------------------------------------------------------*
FORM SET_INITIAL .

REFRESH:  GT_FIELDCAT   ,
GT_ALVDATA    ,
GT_ZTEGSDT021 ,
GT_ZTEGSDT022,
GT_VBEP    ,
GT_VBAK    ,
GT_VBKD    ,
GT_VBPA    ,
GT_VBAP    .

CLEAR: GV_HEADSET,
GS_SCREEN3000,
GV_PROC_CODE.

* Set the button text on selection screen
PERFORM SET_BUTTON_TEXT.

* Default User
PERFORM GET_DEFAULT_PRINTER.

ENDFORM.                    " SET_INITIAL
*&---------------------------------------------------------------------*
*&      Form  PRINT_OUT_DR
*&---------------------------------------------------------------------*
*       Print the delivery request out
*----------------------------------------------------------------------*
FORM PRINT_OUT_DR .
* Get filename and codepage
PERFORM   GET_FILE_NAME.
* Generate output file
PERFORM  GENERATE_FILE.
* Write data to the application server
PERFORM MAKE_PRINT_OUT.

ENDFORM.                    " PRINT_OUT_DR
*&---------------------------------------------------------------------*
*&      Form  CHECK_HEAD_SET
*&---------------------------------------------------------------------*
*       Check if the delivery request header is setup
*----------------------------------------------------------------------*
FORM CHECK_HEAD_SET .
IF GS_SCREEN3000-Z_DELI_DATE IS NOT INITIAL.
GV_HEADSET = CNS_X.
ENDIF.
ENDFORM.                    " CHECK_HEAD_SET

*&---------------------------------------------------------------------*
*&      Form  GET_FILE_NAME
*&---------------------------------------------------------------------*
*       Get the output filename
*----------------------------------------------------------------------*
FORM GET_FILE_NAME .

DATA: LV_PATH(128) TYPE C,
LV_BUKRS     TYPE BUKRS,
LS_ZTEGSDT021 TYPE ZTEGSDT021,
LV_OUTPUT_FN TYPE ZTEGZZM001-Z_OUTPUT_FN.

READ TABLE GT_ZTEGSDT021 INTO LS_ZTEGSDT021
WITH KEY Z_DR_NO = P_DEREQ.

LV_BUKRS = LS_ZTEGSDT021-BUKRS.

GET PARAMETER ID 'ZSVF' FIELD LV_PATH.

SELECT SINGLE Z_OUTPUT_FN                                 "#EC WARNOK
Z_OUTPUT_CP
INTO (LV_OUTPUT_FN,GV_CODEPAGE)
FROM ZTEGZZM001
WHERE PROGNAME       = SY-REPID
AND BUKRS          = LV_BUKRS
AND Z_CONV_SUBKEY1 = TEXT-C01.

IF SY-SUBRC <> 0.
*   Data not exist,terminate the program
MESSAGE E051(ZMEGSD01) WITH 'ZTEGZZM001' SY-REPID.
ENDIF.

CONCATENATE LV_PATH
LV_OUTPUT_FN
SY-REPID
SY-UNAME
SY-UZEIT
CNS_EXTNAME
INTO GV_FILENAME.

ENDFORM.                    " GET_FILE_NAME
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  MAKE_PRINT_OUT
*&---------------------------------------------------------------------*
*       Write data to the application server
*----------------------------------------------------------------------*
FORM MAKE_PRINT_OUT .

DATA: LV_CDUTF8    TYPE ABAP_ENCODING,
LV_CODE_STR  TYPE STRING,
LS_ZSEGSD0041 TYPE ZSEGSD0041,
LV_SFILE      TYPE STRING,
LV_CODEPAGE  TYPE ABAP_ENCODING.
LV_CODE_STR  = GV_CODEPAGE.
IF LV_CODE_STR IS NOT INITIAL.
LV_CODEPAGE = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( LV_CODE_STR ).
ENDIF.
LV_CDUTF8 = CL_ABAP_CODEPAGE=>SAP_CODEPAGE( 'UTF-8' ).
IF LV_CODEPAGE = LV_CDUTF8.
OPEN DATASET GV_FILENAME FOR OUTPUT IN TEXT MODE
ENCODING UTF-8
IGNORING CONVERSION ERRORS.
ELSE.
TRY.

OPEN DATASET GV_FILENAME FOR OUTPUT IN LEGACY TEXT MODE
CODE PAGE LV_CODEPAGE
IGNORING CONVERSION ERRORS.
CATCH CX_SY_CODEPAGE_CONVERTER_INIT.
*      äYìñÉRÅ[ÉhÉyÅ[ÉWïœä∑ÇÕÉTÉ|Å[ÉgÇµÇƒÇ®ÇËÇ‹ÇπÇÒ
MESSAGE E078(ZMEGSD01).
ENDTRY.
ENDIF.
IF SY-SUBRC <> 0.
*   Data not exist,terminate the program
MESSAGE E154(ZMEGSD01) WITH LV_CODEPAGE.
ENDIF.
LOOP AT GT_FILE_OUT INTO LS_ZSEGSD0041.
CONCATENATE LS_ZSEGSD0041-LNAME
LS_ZSEGSD0041-Z_COMP_NAME
LS_ZSEGSD0041-Z_COMP_ADDRESS1
LS_ZSEGSD0041-Z_COMP_ADDRESS2
LS_ZSEGSD0041-Z_COMP_TEL
LS_ZSEGSD0041-Z_COMP_FAX
LS_ZSEGSD0041-Z_REPORT_TITLE
LS_ZSEGSD0041-Z_DR_NO
LS_ZSEGSD0041-Z_CRE_YMD
LS_ZSEGSD0041-Z_DELIVERY_DATE
LS_ZSEGSD0041-Z_TAX_INV
LS_ZSEGSD0041-Z_CUST_ST
LS_ZSEGSD0041-Z_CUST_NAME_ST
LS_ZSEGSD0041-Z_ADDRESS1_ST
LS_ZSEGSD0041-Z_ADDRESS2_ST
LS_ZSEGSD0041-Z_ADDRESS3_ST
LS_ZSEGSD0041-Z_ADDRESS4_ST
LS_ZSEGSD0041-Z_CONTACT
LS_ZSEGSD0041-Z_TEL_ST
LS_ZSEGSD0041-Z_FAX_ST
LS_ZSEGSD0041-Z_DR_ITEM_NO
LS_ZSEGSD0041-MATNR
LS_ZSEGSD0041-Z_MAKTX
LS_ZSEGSD0041-KDMAT
LS_ZSEGSD0041-POSTX
LS_ZSEGSD0041-VBELN
LS_ZSEGSD0041-POSNR
LS_ZSEGSD0041-Z_DR_QTY
LS_ZSEGSD0041-ZIEME
LS_ZSEGSD0041-Z_SALES_ASS
INTO    LV_SFILE
SEPARATED BY CL_ABAP_CHAR_UTILITIES=>HORIZONTAL_TAB.
TRANSFER LV_SFILE TO GV_FILENAME.
ENDLOOP.
CLOSE DATASET GV_FILENAME.
UPDATE ZTEGSDT021 SET Z_PRINTED = CNS_X
WHERE Z_DR_NO = P_DEREQ.
*   Delivery Request [xxxxxxx] is printed
MESSAGE S148(ZMEGSD01) WITH P_DEREQ.
ENDFORM.                    " MAKE_PRINT_OUT

*&---------------------------------------------------------------------*
*&      Form  GET_LOCAL_CODEPAGE
*&---------------------------------------------------------------------*
*       ÉçÅ[ÉJÉãÉRÅ[ÉhÉyÅ[ÉWéÊìæ
*----------------------------------------------------------------------*
*      <--O_OUTPUT_CP
*----------------------------------------------------------------------*
FORM GET_LOCAL_CODEPAGE  CHANGING O_OUTPUT_CP TYPE ANY.     "#EC CALLED

DATA:
LW_ENCODING  TYPE ABAP_ENCODING,
LW_RC        TYPE I,
LW_CODE TYPE CPCODEPAGE.

CALL METHOD CL_GUI_FRONTEND_SERVICES=>GET_SAPLOGON_ENCODING
CHANGING
FILE_ENCODING                 = LW_ENCODING
RC                            = LW_RC
EXCEPTIONS
CNTL_ERROR                    = 1
ERROR_NO_GUI                  = 2
NOT_SUPPORTED_BY_GUI          = 3
CANNOT_INITIALIZE_GLOBALSTATE = 4
OTHERS                        = 5.

IF SY-SUBRC = 0.
LW_CODE = LW_ENCODING.
CALL FUNCTION 'SCP_CODEPAGE_INFO'
EXPORTING
CODEPAGE  = LW_CODE
IMPORTING
HTTP_NAME = O_OUTPUT_CP.
ENDIF.

ENDFORM.                    " GET_LOCAL_CODEPAGE
*&---------------------------------------------------------------------*
*&      Form  CHECK_PRINT_SETUP
*&---------------------------------------------------------------------*
*       Check printer is setup
*----------------------------------------------------------------------*
FORM CHECK_PRINT_SETUP .
IF P_PTRAY IS INITIAL.
SET CURSOR FIELD 'P_PTRAY'.
*   Print is not input
MESSAGE E031(ZMEGSD01) WITH TEXT-M01.
ENDIF.
ENDFORM.                    " CHECK_PRINT_SETUP
*&---------------------------------------------------------------------*
*&      Form  GENERATE_FILE
*&---------------------------------------------------------------------*
*       Generate output file
*----------------------------------------------------------------------*
FORM GENERATE_FILE .
DATA: LS_ZSEGSD0041 TYPE ZSEGSD0041,
LS_ZTEGSDT021 TYPE ZTEGSDT021,
LV_NAME2      TYPE KNA1-NAME2,
LV_NAME3      TYPE KNA1-NAME3,
LS_ZTEGSDT022 TYPE ZTEGSDT022.

IF GT_ZTEGSDT021 IS INITIAL OR GT_ZTEGSDT022 IS INITIAL.
*   Print is not input
MESSAGE S147(ZMEGSD01) WITH P_DEREQ DISPLAY LIKE 'E'.
LEAVE LIST-PROCESSING.
ENDIF.
LOOP AT GT_ZTEGSDT022 INTO LS_ZTEGSDT022.
READ TABLE GT_ZTEGSDT021 INTO LS_ZTEGSDT021
WITH KEY BUKRS = LS_ZTEGSDT022-BUKRS
Z_DR_NO = LS_ZTEGSDT022-Z_DR_NO.

LS_ZSEGSD0041-LNAME           = P_PTRAY."Printer/Tray
SELECT SINGLE T001~BUTXT                                "#EC WARNOK
ADRC~STREET               "Street
ADRC~STR_SUPPL1           "Street 2
ADRC~TEL_NUMBER           "TRL
ADRC~FAX_NUMBER           "FAX

FROM T001
INNER JOIN ADRC
ON T001~ADRNR = ADRC~ADDRNUMBER
INTO (LS_ZSEGSD0041-Z_COMP_NAME,
LS_ZSEGSD0041-Z_COMP_ADDRESS1,
LS_ZSEGSD0041-Z_COMP_ADDRESS2,
LS_ZSEGSD0041-Z_COMP_TEL,
LS_ZSEGSD0041-Z_COMP_FAX)
WHERE T001~BUKRS = LS_ZTEGSDT022-BUKRS.

LS_ZSEGSD0041-Z_REPORT_TITLE = TEXT-T02.    "DocumentTitle
LS_ZSEGSD0041-Z_DR_NO = LS_ZTEGSDT022-Z_DR_NO."DeliveryRequest
LS_ZSEGSD0041-Z_CRE_YMD = LS_ZTEGSDT022-Z_CRE_YMD."CreatedDate
LS_ZSEGSD0041-Z_DELIVERY_DATE =
LS_ZTEGSDT021-Z_DELIVERY_DATE."DelDate
LS_ZSEGSD0041-Z_TAX_INV = LS_ZTEGSDT021-Z_TAX_INV."Tax Invoice
LS_ZSEGSD0041-Z_CUST_ST = LS_ZTEGSDT021-Z_CUST_ST."CustCodeShipTo
SELECT SINGLE NAME2
NAME3
INTO (LV_NAME2, LV_NAME3)
FROM KNA1
WHERE KUNNR = LS_ZTEGSDT021-Z_CUST_ST.
CONCATENATE LV_NAME2 LV_NAME3 INTO LS_ZSEGSD0041-Z_CUST_NAME_ST.
LS_ZSEGSD0041-Z_ADDRESS1_ST = LS_ZTEGSDT021-Z_ADDRESS1_ST.
LS_ZSEGSD0041-Z_ADDRESS2_ST = LS_ZTEGSDT021-Z_ADDRESS2_ST.
LS_ZSEGSD0041-Z_ADDRESS3_ST = LS_ZTEGSDT021-Z_ADDRESS3_ST.
LS_ZSEGSD0041-Z_ADDRESS4_ST = LS_ZTEGSDT021-Z_ADDRESS4_ST.
LS_ZSEGSD0041-Z_CONTACT = LS_ZTEGSDT021-Z_CONTACT.
LS_ZSEGSD0041-Z_TEL_ST  = LS_ZTEGSDT021-Z_TEL_ST.
LS_ZSEGSD0041-Z_FAX_ST  = LS_ZTEGSDT021-Z_FAX_ST.
LS_ZSEGSD0041-Z_DR_ITEM_NO = LS_ZTEGSDT022-Z_DR_ITEM_NO.
LS_ZSEGSD0041-MATNR = LS_ZTEGSDT022-MATNR.
SELECT SINGLE MAKTX
INTO LS_ZSEGSD0041-Z_MAKTX
FROM MAKT
WHERE MATNR = LS_ZTEGSDT022-MATNR
AND SPRAS = SY-LANGU.
SELECT SINGLE KNMT~KDMAT                                "#EC WARNOK
KNMT~POSTX
FROM VBAK
INNER JOIN KNMT
ON VBAK~VKORG = KNMT~VKORG
AND VBAK~VTWEG = KNMT~VTWEG
INTO (LS_ZSEGSD0041-KDMAT, LS_ZSEGSD0041-POSTX)
WHERE VBAK~VBELN = LS_ZTEGSDT022-VBELN
AND KNMT~KUNNR = LS_ZTEGSDT021-Z_CUST_ST
AND KNMT~MATNR = LS_ZTEGSDT022-MATNR.

LS_ZSEGSD0041-VBELN = LS_ZTEGSDT022-VBELN.
LS_ZSEGSD0041-POSNR = LS_ZTEGSDT022-POSNR.
LS_ZSEGSD0041-Z_DR_QTY = LS_ZTEGSDT022-Z_DR_QTY.
LS_ZSEGSD0041-ZIEME  = LS_ZTEGSDT022-ZIEME.
LS_ZSEGSD0041-Z_SALES_ASS = LS_ZTEGSDT021-Z_SALES_ASS.
APPEND LS_ZSEGSD0041 TO GT_FILE_OUT.
ENDLOOP.

ENDFORM.                    " GENERATE_FILE
*&---------------------------------------------------------------------*
*&      Form  GET_GEN_DATA
*&---------------------------------------------------------------------*
*       Get general data
*----------------------------------------------------------------------*
FORM GET_GEN_DATA .
DATA: LS_RG_VKORG LIKE LINE OF GRG_VKORG,
LS_ZTEGSDT021 TYPE ZTEGSDT021,
LT_TVKO     TYPE STANDARD TABLE OF TVKO,
LS_TVKO     TYPE TVKO,
LS_RANGE_BUKRS LIKE LINE OF GRG_BUKRS,
LS_RANGE_VSTEL LIKE LINE OF GRG_VSTEL,
LS_RANGE_KUNNR LIKE LINE OF GRG_KUNNR.

*  REFRESH:  GRG_BUKRS,GRG_VSTEL,GRG_KUNNR.
* When delivery request in selection screen is not input
IF P_DEREQ IS NOT INITIAL.
SELECT SINGLE *
FROM ZTEGSDT021
INTO LS_ZTEGSDT021
WHERE Z_DR_NO = P_DEREQ.

*   Add company code from selection screen
IF LS_ZTEGSDT021-BUKRS IS NOT INITIAL.
LS_RANGE_BUKRS-SIGN = 'I'.
LS_RANGE_BUKRS-OPTION = 'EQ'.
LS_RANGE_BUKRS-LOW    = LS_ZTEGSDT021-BUKRS.
APPEND LS_RANGE_BUKRS TO GRG_BUKRS.
ENDIF.
*   Add Shipping point from selection screen
IF LS_ZTEGSDT021-VSTEL IS NOT INITIAL.
LS_RANGE_VSTEL-SIGN = 'I'.
LS_RANGE_VSTEL-OPTION = 'EQ'.
LS_RANGE_VSTEL-LOW    = LS_ZTEGSDT021-VSTEL.
APPEND LS_RANGE_VSTEL TO GRG_VSTEL.
ENDIF.

*   Add Ship-to party from selection screen
IF LS_ZTEGSDT021-Z_CUST_ST IS NOT INITIAL.
LS_RANGE_KUNNR-SIGN = 'I'.
LS_RANGE_KUNNR-OPTION = 'EQ'.
LS_RANGE_KUNNR-LOW    = LS_ZTEGSDT021-Z_CUST_ST.
APPEND LS_RANGE_KUNNR TO GRG_KUNNR.
ENDIF.
ENDIF.

SELECT *
FROM TVKO
INTO TABLE LT_TVKO
WHERE BUKRS IN GRG_BUKRS.
IF SY-SUBRC = 0.
LOOP AT LT_TVKO INTO LS_TVKO.
LS_RG_VKORG-SIGN = 'I'.
LS_RG_VKORG-OPTION = 'EQ'.
LS_RG_VKORG-LOW = LS_TVKO-VKORG.
APPEND LS_RG_VKORG TO GRG_VKORG.
ENDLOOP.
ENDIF.


ENDFORM.                    " GET_GEN_DATA
*&---------------------------------------------------------------------*
*&      Form  SET_RETURN_DR
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM SET_RETURN_DR .
DATA: LV_DRNO TYPE CHAR15.
IMPORT P1 = LV_DRNO  FROM MEMORY ID 'DRNO'.
IF LV_DRNO(4)  = 'TDR-'.
P_DEREQ = LV_DRNO.
ENDIF.
FREE MEMORY ID 'DRNO'.
ENDFORM.                    " SET_RETURN_DR
