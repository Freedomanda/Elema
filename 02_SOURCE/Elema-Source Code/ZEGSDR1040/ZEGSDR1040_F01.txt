*&---------------------------------------------------------------------*
*&  Include           ZEGSDR1040_F01
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  INIT_DATA
*&---------------------------------------------------------------------*
*       初期処理
*----------------------------------------------------------------------*
FORM INIT_DATA .

SSCRFIELDS-FUNCTXT_01 = TEXT-P03.
REFRESH:
TD_ZT004C.

ENDFORM.                    " INIT_DATA

*&---------------------------------------------------------------------*
*&    Form  F1000_SET_UCOMM_SLS
*&---------------------------------------------------------------------*
*     Check on Key of 'FC01'
*----------------------------------------------------------------------*
FORM SET_UCOMM_SLS.
IF SY-DYNNR = 3110 OR
SY-DYNNR = 3410.
SSCRFIELDS-UCOMM = OK_CODE.
ENDIF.
CASE SSCRFIELDS-UCOMM.
WHEN CNS_FC01.
IF SY-DYNNR = 1000.
CLEAR:ST_S016.
REFRESH: TD_ZT004C.
CALL SCREEN 3000.
ENDIF.
WHEN OTHERS.
ENDCASE.    "<SSCRFIELDS-UCOMM>
ENDFORM.                    " F1000_SET_UCOMM_SLS

*&---------------------------------------------------------------------*
*&      Form  CHECK_INPUT
*&---------------------------------------------------------------------*
*       入力チェック
*----------------------------------------------------------------------*
FORM CHECK_INPUT .

TYPES: BEGIN OF LTYP_WERKS,
WERKS TYPE T001W-WERKS,
END OF LTYP_WERKS.

DATA: LTD_WERKS   TYPE STANDARD TABLE OF LTYP_WERKS,
LST_WERKS   TYPE LTYP_WERKS,
LST_WERKS_R LIKE LINE OF RD_WERKS.

* A-1-1．入力チェック
* プラントコード存在チェック
SELECT WERKS
INTO TABLE LTD_WERKS
FROM T001W
WHERE WERKS IN S_WERKS.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_WERKS-LOW'.
MESSAGE E004(ZMEGSD01) WITH S_WERKS-LOW.
*   プラント ( &1 ) は存在しません
ENDIF.

* A-1-2．権限チェック
REFRESH RD_WERKS.
LOOP AT LTD_WERKS INTO LST_WERKS.
LST_WERKS_R-SIGN = 'I'.
LST_WERKS_R-OPTION = 'EQ'.
LST_WERKS_R-LOW = LST_WERKS-WERKS.
APPEND LST_WERKS_R TO RD_WERKS.

AUTHORITY-CHECK OBJECT 'M_MSEG_WMB'
ID 'WERKS' FIELD LST_WERKS-WERKS
ID 'ACTVT' FIELD '01'.
IF SY-SUBRC <> 0.
SET CURSOR FIELD 'S_WERKS-LOW'.
MESSAGE E003(ZMEGSD01).
*     プラントに対する実行権限がありません
ENDIF.
ENDLOOP.

ENDFORM.                    " CHECK_INPUT

*&---------------------------------------------------------------------*
*&      Form  MAIN_PROCESS
*&---------------------------------------------------------------------*
*       主処理
*----------------------------------------------------------------------*
FORM MAIN_PROCESS .

DATA:
LTD_ZT003 TYPE TYP_TD_ZT003,
LTD_TEXT  TYPE TYP_TD_TEXT.

* A-2-1．ShippingInstructionデータ取得
PERFORM GET_SI_DATA CHANGING LTD_ZT003.

* A-2-2．テキスト取得
PERFORM GET_TEXT CHANGING LTD_TEXT.

* 画面出力データ取得
PERFORM GET_ALV_CONTENT USING LTD_ZT003
LTD_TEXT
CHANGING TD_SIN.

* A-3．画面出力
PERFORM DISPLAY_DATA USING  TD_SIN
ABAP_OFF.

ENDFORM.                    " MAIN_PROCESS

*&---------------------------------------------------------------------*
*&      Form  GET_SI_DATA
*&---------------------------------------------------------------------*
*       A-2-1-1．S/I Noの取得
*----------------------------------------------------------------------*
*      <--O_TD_zt003  S/I data
*----------------------------------------------------------------------*
FORM GET_SI_DATA  CHANGING O_TD_SIN TYPE TYP_TD_ZT003.

SELECT
ZTEGSDT003~MANDT
ZTEGSDT003~Z_SI_NO                     "S/I No
ZTEGSDT003~Z_SI_DATE                   "S/I Date
ZTEGSDT003~Z_BL_NO                     "B/L No
ZTEGSDT003~Z_BL_DATE                   "B/L Date
ZTEGSDT003~Z_CUST_CNEE                 "Customer(CNEE)
ZTEGSDT003~Z_CUST_NAME_CNEE            "Customer Name(CNEE)
ZTEGSDT003~Z_ADDRESS1_CNEE             "Address1(CNEE)
ZTEGSDT003~Z_ADDRESS2_CNEE             "Address2(CNEE)
**** START UPD 2014/12/24 ISID11 ****
ZTEGSDT003~Z_ADDRESS3_CNEE             "Address3(CNEE)
ZTEGSDT003~Z_ADDRESS4_CNEE             "Address4(CNEE)
**** END UPD 2014/12/24 ISID11 ****
ZTEGSDT003~Z_ATTN_CNEE                 "Attn(CNEE)
ZTEGSDT003~Z_TEL_CNEE                  "Tel(CNEE)
ZTEGSDT003~Z_FAX_CNEE                  "Fax(CNEE)
ZTEGSDT003~Z_CUST_NTFY                 "Customer(Notify)
ZTEGSDT003~Z_CUST_NAME_NTFY            "Customer Name(Notify)
ZTEGSDT003~Z_ADDRESS1_NTFY             "Address1(Notify)
ZTEGSDT003~Z_ADDRESS2_NTFY             "Address2(Notify)
**** START UPD 2014/12/24 ISID11 ****
ZTEGSDT003~Z_ADDRESS3_NTFY             "Address3(Notify)
ZTEGSDT003~Z_ADDRESS4_NTFY             "Address4(Notify)
**** END UPD 2014/12/24 ISID11 ****
ZTEGSDT003~Z_ATTN_NTFY                 "Attn(Notify)
ZTEGSDT003~Z_TEL_NTFY                  "Tel(Notify)
ZTEGSDT003~Z_FAX_NTFY                  "Fax(Notify)
ZTEGSDT003~Z_CARRIER                   "Carrier
ZTEGSDT003~Z_BOOKING_NO                "Booking No
ZTEGSDT003~Z_SHIPPED_PER               "Shipped Per
ZTEGSDT003~Z_VOY_NO                    "Voy No
ZTEGSDT003~Z_ETD                       "ETD
ZTEGSDT003~Z_ETA                       "ETA
ZTEGSDT003~Z_SHIP_DATE                 "Ship Date
ZTEGSDT003~Z_CFS_CUT                   "CFS-CUT
ZTEGSDT003~Z_CY_CUT                    "CY-CUT
ZTEGSDT003~Z_CSIZE_20FT_QTY            "20ft
ZTEGSDT003~Z_CSIZE_40FT_QTY            "40ft
ZTEGSDT003~Z_CSIZE_OTH_QTY             "Others
ZTEGSDT003~Z_PL_RECEIPT                "Place of Receipt
ZTEGSDT003~Z_PT_LOADING                "Port of Loading
ZTEGSDT003~Z_PT_DISCHARGE              "Port of Discharge
ZTEGSDT003~Z_PL_DELIVERY               "Place of Delivery
ZTEGSDT003~Z_FINAL_DEST                "Final Destination
ZTEGSDT003~Z_FREIGHT_TERM              "Freight Term
ZTEGSDT003~Z_FREIGHT_ON_BL             "Freight on B/L
ZTEGSDT003~Z_PL_ISSUE                  "Place of Issue
ZTEGSDT003~Z_KIND_OF_BL                "Kind of B/L
ZTEGSDT003~Z_DG_CODE                   "DG Code
ZTEGSDT003~Z_TEMP_ZONES                "Temperature Zones
ZTEGSDT003~Z_DESC_OF_GOODS             "Description of Goods
ZTEGSDT003~Z_SI_REMARKS1               "Remarks (1)
ZTEGSDT003~Z_SI_REMARKS2               "Remarks (2)
ZTEGSDT003~Z_SI_REMARKS3               "Remarks (3)
ZTEGSDT003~Z_SI_REMARKS4               "Remarks (4)
ZTEGSDT003~Z_SI_REMARKS5               "Remarks (5)
**** START ADD 2015/05/31 ISID18 ****
ZTEGSDT003~VSTEL                       "ShippingPt
**** END ADD 2015/05/31 ISID18 ****
ZTEGSDT003~Z_CRE_YMD                   "登録年月日
ZTEGSDT003~Z_CRE_HMS                   "登録時分秒
ZTEGSDT003~Z_CRE_USERID                "ユーザ名
ZTEGSDT003~Z_MOD_YMD                   "更新年月日
ZTEGSDT003~Z_MOD_HMS                   "更新時分秒
ZTEGSDT003~Z_MOD_USERID                "ユーザ名
**** START ADD 2015/02/02 ISID11 ****
ZTEGSDT004~Z_INVOICE_NO                "Invoice No
ZTEGSDT001~Z_INVOICE_DATE              "Invoice Date
**** END ADD 2015/02/02 ISID11 ****
INTO CORRESPONDING FIELDS OF TABLE O_TD_SIN
FROM ZTEGSDT003
INNER JOIN ZTEGSDT004
ON ZTEGSDT003~Z_SI_NO = ZTEGSDT004~Z_SI_NO
**** START ADD 2015/02/02 ISID11 ****
LEFT OUTER JOIN ZTEGSDT001
ON ZTEGSDT004~Z_INVOICE_NO = ZTEGSDT001~Z_INVOICE_NO
**** END ADD 2015/02/02 ISID11 ****
WHERE ZTEGSDT003~Z_SI_NO IN S_SINO           "S/I No
**** START ADD 2015/05/31 ISID18 ****
AND ZTEGSDT003~VSTEL IN S_SHPT             "ShippingPt
**** END ADD 2015/05/31 ISID18 ****
AND ZTEGSDT003~Z_SI_DATE IN S_SIDT         "S/I Date
AND ZTEGSDT003~Z_BL_NO IN S_BLNO           "B/L No
AND ZTEGSDT003~Z_BL_DATE IN S_BLDT         "B/L Date 5
AND ZTEGSDT003~Z_CUST_CNEE IN S_CONS       "Consinee
AND ZTEGSDT003~Z_CUST_NTFY IN S_NOTF       "Notify
AND ZTEGSDT003~Z_CARRIER IN S_CARR         "Carrier
AND ZTEGSDT003~Z_BOOKING_NO IN S_BKNO      "Booking No
AND ZTEGSDT003~Z_SHIPPED_PER IN S_SPPE     "Shipped Per
AND ZTEGSDT003~Z_VOY_NO IN S_VONO          "Voy No 10
AND ZTEGSDT003~Z_ETD IN S_ETD              "ETD
AND ZTEGSDT003~Z_ETA IN S_ETA              "ETA
AND ZTEGSDT003~Z_SHIP_DATE IN S_SPDT       "Ship Date
AND ZTEGSDT003~Z_CFS_CUT IN S_CFCT         "CFS-CUT
AND ZTEGSDT003~Z_CY_CUT IN S_CYCT          "CY-CUT 15
AND ZTEGSDT003~Z_CRE_YMD IN S_CRDT         "Create Date
AND ZTEGSDT003~Z_CRE_HMS IN S_CRTM         "Create Time
AND ZTEGSDT003~Z_CRE_USERID IN S_CRUS      "Create User
AND ZTEGSDT003~Z_MOD_YMD IN S_MDDT         "Modify Date
AND ZTEGSDT003~Z_MOD_HMS IN S_MDTM         "Modify Time
AND ZTEGSDT003~Z_MOD_USERID IN S_MDUS.     "Modify User
IF SY-SUBRC <> 0.
MESSAGE S006(ZMEGSD01) WITH TEXT-E01 DISPLAY LIKE CNS_MSG_E.
*   対象データが存在しません。(TBL = ZTEGSDT003)
LEAVE LIST-PROCESSING.
ENDIF.

**** START ADD 2015/02/02 ISID11 ****
DELETE O_TD_SIN
WHERE NOT
( Z_INVOICE_NO IN S_INVO
AND Z_INVOICE_DATE IN S_IVDT ).

IF O_TD_SIN IS INITIAL.

MESSAGE S006(ZMEGSD01) WITH TEXT-E02 DISPLAY LIKE CNS_MSG_E.
*   対象データが存在しません。(TBL = ZTEGSDT003)
LEAVE LIST-PROCESSING.

ENDIF.
**** END ADD 2015/02/02 ISID11 ****

SORT O_TD_SIN BY Z_SI_NO ASCENDING.

DELETE ADJACENT DUPLICATES FROM O_TD_SIN COMPARING Z_SI_NO.

ENDFORM.                    " GET_SI_DATA

*&---------------------------------------------------------------------*
*&      Form  GET_TEXT
*&---------------------------------------------------------------------*
*       A-2-2．テキスト取得
*----------------------------------------------------------------------*
*      -->I_TD_zt003 S/I No
*      <--O_TD_TEXT  text
*----------------------------------------------------------------------*
FORM GET_TEXT CHANGING O_TD_TEXT  TYPE TYP_TD_TEXT.
DATA:
LTD_TEXT   TYPE TYP_TD_TEXT,
LST_TEXT   TYPE TYP_TEXT.

* FreightTerm Text
CLEAR LST_TEXT.
LST_TEXT-DOMNAME = CNS_FT_T.
LST_TEXT-DDLANGUAGE = SY-LANGU.
APPEND LST_TEXT TO LTD_TEXT.

* FreightOnB/L Text
CLEAR LST_TEXT.
LST_TEXT-DOMNAME = CNS_FOB_T.
LST_TEXT-DDLANGUAGE = SY-LANGU.
APPEND LST_TEXT TO LTD_TEXT.

* KindOfB/L Text
CLEAR LST_TEXT.
LST_TEXT-DOMNAME = CNS_KOB_T.
LST_TEXT-DDLANGUAGE = SY-LANGU.
APPEND LST_TEXT TO LTD_TEXT.

* DGCode Text
CLEAR LST_TEXT.
LST_TEXT-DOMNAME = CNS_DG_T.
LST_TEXT-DDLANGUAGE = SY-LANGU.
APPEND LST_TEXT TO LTD_TEXT.

* TemperatureZones Text
CLEAR LST_TEXT.
LST_TEXT-DOMNAME = CNS_TZ_T.
LST_TEXT-DDLANGUAGE = SY-LANGU.
APPEND LST_TEXT TO LTD_TEXT.

SORT LTD_TEXT BY DOMNAME ASCENDING.
IF LTD_TEXT IS NOT INITIAL.
SELECT
DOMNAME                                 "ドメイン名
DDLANGUAGE                              "言語キー
VALPOS                                  "ドメイン値キー
DOMVALUE_L                              "ドメインの値
DDTEXT                                  "固定テキスト(短)
FROM DD07T
INTO TABLE O_TD_TEXT
FOR ALL ENTRIES IN LTD_TEXT
WHERE DOMNAME    = LTD_TEXT-DOMNAME      "ドメイン名
AND DDLANGUAGE = LTD_TEXT-DDLANGUAGE.  "言語キー

SORT O_TD_TEXT BY DOMNAME DOMVALUE_L DDTEXT.
ENDIF.

ENDFORM.                    " GET_TEXT

*&---------------------------------------------------------------------*
*&      Form  GET_ALV_CONTENT
*&---------------------------------------------------------------------*
*       S/I ALV data
*----------------------------------------------------------------------*
*      -->I_TD_ZT003  S/I data
*      -->I_TD_TEXT   Text
*      <--O_TD_SIN    S/I ALV data
*----------------------------------------------------------------------*
FORM GET_ALV_CONTENT  USING    I_TD_ZT003 TYPE TYP_TD_ZT003
I_TD_TEXT TYPE TYP_TD_TEXT
CHANGING O_TD_SIN TYPE TYP_TD_SIN.

DATA:
LST_ZT003   LIKE LINE OF I_TD_ZT003,
LST_SIN     LIKE LINE OF O_TD_SIN,
LST_TEXT    LIKE LINE OF I_TD_TEXT.


LOOP AT I_TD_ZT003 INTO LST_ZT003.
MOVE-CORRESPONDING LST_ZT003 TO LST_SIN.

*   FreightTerm Text
READ TABLE I_TD_TEXT INTO LST_TEXT BINARY SEARCH
WITH KEY DOMNAME    = CNS_FT_T
DOMVALUE_L = LST_ZT003-Z_FREIGHT_TERM.
IF SY-SUBRC = 0.
LST_SIN-Z_FREIGHT_TERMT = LST_TEXT-DDTEXT.
CLEAR LST_TEXT.
ENDIF.

*   FreightOnB/L Text
READ TABLE I_TD_TEXT INTO LST_TEXT BINARY SEARCH
WITH KEY DOMNAME    = CNS_FOB_T
DOMVALUE_L = LST_ZT003-Z_FREIGHT_ON_BL.
IF SY-SUBRC = 0.
LST_SIN-Z_FREIGHT_ON_BLT = LST_TEXT-DDTEXT.
CLEAR LST_TEXT.
ENDIF.

*   KindOfB/L Text
READ TABLE I_TD_TEXT INTO LST_TEXT BINARY SEARCH
WITH KEY DOMNAME    = CNS_KOB_T
DOMVALUE_L = LST_ZT003-Z_KIND_OF_BL.
IF SY-SUBRC = 0.
LST_SIN-Z_KIND_OF_BLT = LST_TEXT-DDTEXT.
CLEAR LST_TEXT.
ENDIF.

*   DGCode Text
READ TABLE I_TD_TEXT INTO LST_TEXT BINARY SEARCH
WITH KEY DOMNAME    = CNS_DG_T
DOMVALUE_L = LST_ZT003-Z_DG_CODE.
IF SY-SUBRC = 0.
LST_SIN-Z_DG_CODET = LST_TEXT-DDTEXT.
CLEAR LST_TEXT.
ENDIF.

*   TemperatureZones Text
READ TABLE I_TD_TEXT INTO LST_TEXT BINARY SEARCH
WITH KEY DOMNAME    = CNS_TZ_T
DOMVALUE_L = LST_ZT003-Z_TEMP_ZONES.
IF SY-SUBRC = 0.
LST_SIN-Z_TEMP_ZONEST = LST_TEXT-DDTEXT.
CLEAR LST_TEXT.
ENDIF.

APPEND LST_SIN TO O_TD_SIN.
CLEAR:
LST_SIN.
ENDLOOP.

ENDFORM.                    " GET_ALV_CONTENT

*&---------------------------------------------------------------------*
*&      Form  DISPLAY_DATA
*&---------------------------------------------------------------------*
*       A-3．画面出力
*----------------------------------------------------------------------*
*      -->i_td_sin  S/I Data
*      -->i_w_flag  Dialog alv flag
*----------------------------------------------------------------------*
FORM DISPLAY_DATA  USING    I_TD_SIN TYPE TYP_TD_SIN
I_W_FLAG TYPE C.

DATA:
LTD_EXCLUDE  TYPE UI_FUNCTIONS,
LST_VARIANT  TYPE DISVARIANT,
LST_FIELDCAT TYPE LVC_S_FCAT,
LTD_FIELDCAT TYPE LVC_T_FCAT,
LW_SAVE      TYPE C,
LST_VARI     TYPE DISVARIANT,
LST_LAYOUT   TYPE LVC_S_LAYO.     "slis_layout_alv

* fielcat 属性の設定
CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
EXPORTING
I_STRUCTURE_NAME       = CNS_SIN_ALV
CHANGING
CT_FIELDCAT            = LTD_FIELDCAT
EXCEPTIONS
INCONSISTENT_INTERFACE = 1
PROGRAM_ERROR          = 2
OTHERS                 = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE CNS_MSG_S NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE CNS_MSG_E.
LEAVE LIST-PROCESSING.
ENDIF.

**** START UPD 2014/12/24 ISID11 ****
*  LOOP AT ltd_fieldcat INTO lst_fieldcat.
*    IF sy-tabix = 1.
*      lst_fieldcat-checkbox = abap_on.
*      lst_fieldcat-no_out   = abap_on.
*      lst_fieldcat-edit     = abap_on.
*    ENDIF.
*    IF sy-tabix = 6 OR
*       sy-tabix = 7 OR
*       sy-tabix = 8 OR
*       sy-tabix = 9 OR
*       sy-tabix = 10 OR
*       sy-tabix = 13 OR
*       sy-tabix = 14 OR
*       sy-tabix = 15 OR
*       sy-tabix = 16 OR
*       sy-tabix = 17 OR
*       sy-tabix = 21 OR
*       sy-tabix = 22 OR
*       sy-tabix = 32 OR
*       sy-tabix = 33 OR
*       sy-tabix = 34 OR
*       sy-tabix = 35 OR
*       sy-tabix = 36 OR
*       sy-tabix = 38 OR
*       sy-tabix = 40 OR
*       sy-tabix = 41 OR
*       sy-tabix = 43 OR
*       sy-tabix = 45 OR
*       sy-tabix = 47 OR
*       sy-tabix = 48.
*      lst_fieldcat-coltext = lst_fieldcat-scrtext_l.
*    ENDIF.
*    MODIFY ltd_fieldcat FROM lst_fieldcat INDEX sy-tabix.
*  ENDLOOP.

READ TABLE LTD_FIELDCAT INTO LST_FIELDCAT INDEX 1.
IF SY-SUBRC = 0.
LST_FIELDCAT-CHECKBOX = ABAP_ON.
LST_FIELDCAT-NO_OUT   = ABAP_ON.
**** START DEL 2015/02/02 ISID11 ****
*    lst_fieldcat-edit     = abap_on.
**** END DEL 2015/02/02 ISID11 ****
MODIFY LTD_FIELDCAT FROM LST_FIELDCAT INDEX 1.
ENDIF.
**** END UPD 2014/12/24 ISID11 ****

* LAYOUT の設定
LST_LAYOUT-CWIDTH_OPT = ABAP_ON.
LST_LAYOUT-ZEBRA      = ABAP_ON.
LST_LAYOUT-BOX_FNAME  = CNS_CHKBX.
**** START ADD 2015/02/05 ISID11 ****
LST_LAYOUT-NUMC_TOTAL  = ABAP_ON.
**** END ADD 2015/02/05 ISID11 ****

LW_SAVE = CNS_SAVE_A.
LST_VARI-VARIANT = P_LAOT.
LST_VARI-REPORT  = SY-REPID.

* Dialog alv flag(3200)
IF I_W_FLAG = ABAP_ON.
PERFORM EXCLUDE_TB_FUNCTIONS CHANGING LTD_EXCLUDE.

IF CI_CCONTAINER_S IS INITIAL.
*     コントロールの創建
CREATE OBJECT CI_CCONTAINER_S
EXPORTING
CONTAINER_NAME              = CI_CUSTOM_CONTROL_NAME_S
EXCEPTIONS
CNTL_ERROR                  = 1
CNTL_SYSTEM_ERROR           = 2
CREATE_ERROR                = 3
LIFETIME_ERROR              = 4
LIFETIME_DYNPRO_DYNPRO_LINK = 5
OTHERS                      = 6.

IF SY-SUBRC = 0.
*       ALVインスタント
CREATE OBJECT CI_ALV_S
EXPORTING
I_PARENT          = CI_CCONTAINER_S
EXCEPTIONS
ERROR_CNTL_CREATE = 1
ERROR_CNTL_INIT   = 2
ERROR_CNTL_LINK   = 3
ERROR_DP_CREATE   = 4
OTHERS            = 5.

ELSE.
MESSAGE ID SY-MSGID TYPE CNS_MSG_I NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE CNS_MSG_E.

LEAVE TO SCREEN 0.
ENDIF.

CALL METHOD CI_ALV_S->SET_TABLE_FOR_FIRST_DISPLAY
EXPORTING
IS_VARIANT                    = LST_VARIANT
IS_LAYOUT                     = LST_LAYOUT
IT_TOOLBAR_EXCLUDING          = LTD_EXCLUDE
I_SAVE                        = LW_SAVE
CHANGING
IT_OUTTAB                     = I_TD_SIN
IT_FIELDCATALOG               = LTD_FIELDCAT
EXCEPTIONS
INVALID_PARAMETER_COMBINATION = 1
PROGRAM_ERROR                 = 2
TOO_MANY_LINES                = 3
OTHERS                        = 4.

IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE CNS_MSG_I NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE CNS_MSG_E.

LEAVE TO SCREEN 0.
ENDIF.

ELSE.
*     リフレッシュ
CALL METHOD CI_ALV_S->REFRESH_TABLE_DISPLAY
EXCEPTIONS
FINISHED = 1
OTHERS   = 2.

IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE CNS_MSG_I NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE CNS_MSG_E.

LEAVE TO SCREEN 0.
ENDIF.

ENDIF.
ELSE.
*   Normal alv flag(2000)
CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
EXPORTING
I_CALLBACK_PROGRAM       = SY-REPID
I_CALLBACK_PF_STATUS_SET = CNS_ST_2000
I_CALLBACK_USER_COMMAND  = CNS_UC_2000
IS_LAYOUT_LVC            = LST_LAYOUT
IT_FIELDCAT_LVC          = LTD_FIELDCAT
I_SAVE                   = LW_SAVE
IS_VARIANT               = LST_VARI
TABLES
T_OUTTAB                 = I_TD_SIN
EXCEPTIONS
PROGRAM_ERROR            = 1
OTHERS                   = 2.

IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE CNS_MSG_S NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE CNS_MSG_E.

LEAVE LIST-PROCESSING.

ENDIF.
ENDIF.

ENDFORM.                    " DISPLAY_DATA

*&---------------------------------------------------------------------*
*&      Form  SET_STATUS
*&---------------------------------------------------------------------*
*       Shipping Instruction Data Input（List）ALV画面のステータスの設定
*----------------------------------------------------------------------*
*      -->I_TD_EXTAB     EXCLUDING テーブル
*----------------------------------------------------------------------*
FORM SET_STATUS USING I_TD_EXTAB TYPE SLIS_T_EXTAB.

SET PF-STATUS 'ST_2000'.
**** START ADD 2015/03/02 ISID11 ****
SET TITLEBAR 'T_2000'.
**** END ADD 2015/03/02 ISID11 ****

ENDFORM.                    " SET_STATUS

*&---------------------------------------------------------------------*
*&      Form  USER_COMMAND
*&---------------------------------------------------------------------*
*       Invoice Data Input（List）ALV画面の事件
*----------------------------------------------------------------------*
*      -->I_W_UCOMM         機能コード
*      -->I_ST_SELFIELD     ALV項目情報
*----------------------------------------------------------------------*
FORM USER_COMMAND USING I_W_UCOMM     TYPE SY-UCOMM
I_ST_SELFIELD TYPE SLIS_SELFIELD.

CASE I_W_UCOMM.
WHEN CNS_INP.
CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
IMPORTING
E_GRID = WO_GUID.
*     A-4-1．「Input」ボタン押下時の処理
PERFORM CHECK_INPUT_2000.
*
*     B-2．データ抽出編集処理
PERFORM GET_DATA_SCR3000.

*     B-3．画面出力
CALL SCREEN 3000.
WHEN OTHERS.
ENDCASE.

ENDFORM.                    " SET_STATUS

*&---------------------------------------------------------------------*
*&      Form  CHECK_INPUT ALV
*&---------------------------------------------------------------------*
*       Shipping Instruction Data Input（List）ALV画面のチェック処理
*----------------------------------------------------------------------*
FORM CHECK_INPUT_2000.
DATA: LW_CNT          TYPE I,
LTD_SIN         TYPE TYP_TD_SIN.

* A-4-1-1．行選択のチェック処理
LTD_SIN = TD_SIN.

DELETE LTD_SIN WHERE Z_CHK <> ABAP_ON.

DESCRIBE TABLE LTD_SIN LINES LW_CNT.

IF LW_CNT = 0.
*   行が選択されていない場合
MESSAGE E008(ZMEGSD01).
*   行が選択されていません。
ELSEIF LW_CNT > 1.
*   行のチェックが複数選択されている場合
MESSAGE E007(ZMEGSD01).
*   行が複数選択されています。
ENDIF.

ENDFORM.                    " CHECK_INPUT_2000

*&---------------------------------------------------------------------*
*&      Form  GET_DATA_SCR3000
*&---------------------------------------------------------------------*
*       B-2．データ抽出編集処理
*----------------------------------------------------------------------*
FORM GET_DATA_SCR3000 .

DATA: LW_NO           TYPE SY-TABIX,
LST_SIN         TYPE ZSEGSD0016,
LST_ZT003       TYPE ZTEGSDT003,
LST_TEXT        TYPE TYP_TEXT,
LTD_TEXT        TYPE TYP_TD_TEXT,
LTD_TEXT_DD     TYPE TYP_TD_TEXT,
LTD_ZT004       TYPE TYP_TD_ZT004,
LST_ZT004       TYPE TYP_ZT004,
LST_ZT004C      TYPE TYP_ZT004C,
LW_SINO         TYPE ZESINO.

* B-2-1．ShippingInstructionデータ取得
READ TABLE TD_SIN INTO LST_SIN
WITH KEY Z_CHK = ABAP_ON.
IF SY-SUBRC = 0.
LW_SINO = LST_SIN-Z_SI_NO.      "S/I No
ENDIF.

SELECT SINGLE *
FROM ZTEGSDT003
INTO LST_ZT003
WHERE Z_SI_NO = LW_SINO.
IF SY-SUBRC <> 0.

MESSAGE E006(ZMEGSD01) WITH TEXT-E01.
*   対象データが存在しません。(TBL = ZTEGSDT003)
ENDIF.

**** START ADD 2015/02/11 ISID11 ****
* テーブルロック
PERFORM LOCK_ZT003 USING LW_SINO.
**** END ADD 2015/02/11 ISID11 ****

MOVE-CORRESPONDING LST_ZT003 TO ST_S016.

* B-2-2．Invoiceデータ取得
SELECT Z_INVOICE_NO               "Invoice No
Z_SI_NO                    "S/I No
FROM ZTEGSDT004
INTO TABLE LTD_ZT004
WHERE Z_SI_NO = LW_SINO.
REFRESH: TD_ZT004C.
LOOP AT LTD_ZT004 INTO LST_ZT004.
LW_NO = SY-TABIX.
MOVE-CORRESPONDING LST_ZT004 TO LST_ZT004C.
LST_ZT004C-NO = LW_NO.
APPEND LST_ZT004C TO TD_ZT004C.
CLEAR LST_ZT004C.
ENDLOOP.
SORT TD_ZT004C BY Z_INVOICE_NO ASCENDING.
CLEAR LW_NO.
**** START ADD 2015/02/11 ISID11 ****
CLEAR:
TD_ZT004I.

TD_ZT004I = TD_ZT004C.
* ZTEGSDT004をロックする
PERFORM LOCK_ZT004 USING TD_ZT004C
'X'
LW_SINO.
**** END ADD 2015/02/11 ISID11 ****

* B-2-3．テキスト取得
* FreightTerm Text
LST_TEXT-DOMNAME = CNS_FT_T.
LST_TEXT-DDLANGUAGE = SY-LANGU.
LST_TEXT-DOMVALUE_L = LST_ZT003-Z_FREIGHT_TERM.
APPEND LST_TEXT TO LTD_TEXT.
CLEAR LST_TEXT.

* FreightOnB/L Text
LST_TEXT-DOMNAME = CNS_FOB_T.
LST_TEXT-DDLANGUAGE = SY-LANGU.
LST_TEXT-DOMVALUE_L = LST_ZT003-Z_FREIGHT_ON_BL.
APPEND LST_TEXT TO LTD_TEXT.
CLEAR LST_TEXT.

* KindOfB/L Text
LST_TEXT-DOMNAME = CNS_KOB_T.
LST_TEXT-DDLANGUAGE = SY-LANGU.
LST_TEXT-DOMVALUE_L = LST_ZT003-Z_KIND_OF_BL.
APPEND LST_TEXT TO LTD_TEXT.
CLEAR LST_TEXT.

* DGCode Text
LST_TEXT-DOMNAME = CNS_DG_T.
LST_TEXT-DDLANGUAGE = SY-LANGU.
LST_TEXT-DOMVALUE_L = LST_ZT003-Z_DG_CODE.
APPEND LST_TEXT TO LTD_TEXT.
CLEAR LST_TEXT.

* TemperatureZones Text
LST_TEXT-DOMNAME = CNS_TZ_T.
LST_TEXT-DDLANGUAGE = SY-LANGU.
LST_TEXT-DOMVALUE_L = LST_ZT003-Z_TEMP_ZONES.
APPEND LST_TEXT TO LTD_TEXT.
CLEAR LST_TEXT.

SORT LTD_TEXT BY DOMNAME    ASCENDING
DOMVALUE_L ASCENDING.
SELECT
DOMNAME                               "ドメイン名
DDLANGUAGE                            "言語キー
VALPOS                                "ドメイン値キー
DOMVALUE_L                            "ドメインの値
DDTEXT                                "固定テキスト(短)
FROM DD07T
INTO TABLE LTD_TEXT_DD
FOR ALL ENTRIES IN LTD_TEXT
WHERE DOMNAME    = LTD_TEXT-DOMNAME    "ドメイン名
AND DOMVALUE_L = LTD_TEXT-DOMVALUE_L "ドメインの値
AND DDLANGUAGE = LTD_TEXT-DDLANGUAGE."言語キー

SORT LTD_TEXT_DD BY DOMNAME ASCENDING
DOMVALUE_L ASCENDING.
* FreightTerm Text
READ TABLE LTD_TEXT_DD INTO LST_TEXT BINARY SEARCH
WITH KEY DOMNAME    = CNS_FT_T
DOMVALUE_L = LST_ZT003-Z_FREIGHT_TERM.
IF SY-SUBRC = 0.
ST_S016-Z_FREIGHT_TERMT = LST_TEXT-DDTEXT.
CLEAR LST_TEXT.
ENDIF.

* FreightOnB/L Text
READ TABLE LTD_TEXT_DD INTO LST_TEXT BINARY SEARCH
WITH KEY DOMNAME    = CNS_FOB_T
DOMVALUE_L = LST_ZT003-Z_FREIGHT_ON_BL.
IF SY-SUBRC = 0.
ST_S016-Z_FREIGHT_ON_BLT = LST_TEXT-DDTEXT.
CLEAR LST_TEXT.
ENDIF.

* KindOfB/L Text
READ TABLE LTD_TEXT_DD INTO LST_TEXT BINARY SEARCH
WITH KEY DOMNAME    = CNS_KOB_T
DOMVALUE_L = LST_ZT003-Z_KIND_OF_BL.
IF SY-SUBRC = 0.
ST_S016-Z_KIND_OF_BLT = LST_TEXT-DDTEXT.
CLEAR LST_TEXT.
ENDIF.

* DGCode Text
READ TABLE LTD_TEXT_DD INTO LST_TEXT BINARY SEARCH
WITH KEY DOMNAME    = CNS_DG_T
DOMVALUE_L = LST_ZT003-Z_DG_CODE.
IF SY-SUBRC = 0.
ST_S016-Z_DG_CODET = LST_TEXT-DDTEXT.
CLEAR LST_TEXT.
ENDIF.

* TemperatureZones Text
READ TABLE LTD_TEXT_DD INTO LST_TEXT BINARY SEARCH
WITH KEY DOMNAME    = CNS_TZ_T
DOMVALUE_L = LST_ZT003-Z_TEMP_ZONES.
IF SY-SUBRC = 0.
ST_S016-Z_TEMP_ZONEST = LST_TEXT-DDTEXT.
CLEAR LST_TEXT.
ENDIF.

ENDFORM.                    " GET_DATA_SCR3000

*&---------------------------------------------------------------------*
*&      Module  STATUS_3000  OUTPUT
*&---------------------------------------------------------------------*
*       画面3000のステータスの設定
*----------------------------------------------------------------------*
MODULE STATUS_3000 OUTPUT.

SET PF-STATUS 'ST_3000'.
SET TITLEBAR 'T_3000'.

IF ST_S016-Z_SI_DATE IS INITIAL.
ST_S016-Z_SI_DATE = SY-DATLO.
ENDIF.

ENDMODULE.                 " STATUS_3000  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3000  INPUT
*&---------------------------------------------------------------------*
*       画面3000のボタンイベント処理
*----------------------------------------------------------------------*
MODULE USER_COMMAND_3000 INPUT.

W_CODE = OK_CODE.
CASE W_CODE.
**** START DEL 2015/02/27 ISID11 ****
*    WHEN CNS_BACK OR CNS_EXIT OR CNS_CANC.  "Back,exit,cancel
*      IF WO_GUID IS NOT INITIAL.
**       リフレッシュ
*        CALL METHOD WO_GUID->REFRESH_TABLE_DISPLAY
**          EXPORTING
**            IS_STABLE      =
**           I_SOFT_REFRESH =
*          EXCEPTIONS
*            FINISHED       = 1
*            OTHERS         = 2.
*      ENDIF.
*
***** START ADD 2015/02/11 ISID11 ****
**     全てロックの解除
*      PERFORM UNLOCK_ALL.
***** END ADD 2015/02/11 ISID11 ****
*      LEAVE TO SCREEN 0.
**** END DEL 2015/02/27 ISID11 ****

WHEN CNS_SAVE.                          "Save
PERFORM PRC_SAVE.
WHEN CNS_ADD.                           "Add invoice
CALL SCREEN 3400 STARTING AT 11 1
**** START UPD 2015/02/02 ISID11 ****
*                        ENDING AT 130 30.
ENDING AT 126 24.
**** END UPD 2015/02/02 ISID11 ****
WHEN CNS_RCP.                           "Ref.copy
CALL SCREEN 3100 STARTING AT 11 1
**** START UPD 2015/02/02 ISID11 ****
*                       ENDING AT 130 30.
ENDING AT 126 26.
**** END UPD 2015/02/02 ISID11 ****
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3000  INPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_3000  INPUT
*&---------------------------------------------------------------------*
*       画面3000のEXITイベント処理
*----------------------------------------------------------------------*
MODULE EXIT_3000 INPUT.
W_CODE = OK_CODE.

**** START UPD 2015/02/27 ISID11 ****
IF WO_GUID IS NOT INITIAL.
*   リフレッシュ
CALL METHOD WO_GUID->REFRESH_TABLE_DISPLAY
EXCEPTIONS
FINISHED = 1
OTHERS   = 2.
ENDIF.

* 全てロックの解除
CALL FUNCTION 'DEQUEUE_ALL'.

**** END UPD 2015/02/27 ISID11 ****
LEAVE TO SCREEN 0.

ENDMODULE.                 " EXIT_3000  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_CUSTOMER_INFO  INPUT
*&---------------------------------------------------------------------*
*       「Cutomer(CNEE)」入力後の処理
*----------------------------------------------------------------------*
MODULE GET_CUSTOMER_INFO INPUT.

* 「Cutomer(CNEE)」入力後の処理
PERFORM GET_CUSTOMER_I.

ENDMODULE.                 " GET_CUSTOMER_INFO  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_CUSTOMER_INFO  INPUT
*&---------------------------------------------------------------------*
*       「Customer(Notify)」入力後の処理
*----------------------------------------------------------------------*
MODULE GET_CUSTOMER_INFO2 INPUT.

* 「Customer(Notify)」入力後の処理
PERFORM GET_CUSTOMER_I2.

ENDMODULE.                 " GET_CUSTOMER_INFO2  INPUT

*&---------------------------------------------------------------------*
*&      Form  GET_CUSTOMER_I
*&---------------------------------------------------------------------*
*       「Cutomer(CNEE)」入力後の処理
*----------------------------------------------------------------------*
FORM GET_CUSTOMER_I .

DATA:
LW_KUNNR      TYPE KUNNR,
LW_NAME1      TYPE AD_NAME1,
LW_STREET     TYPE AD_STREET,
LW_CITY1      TYPE AD_CITY1,
**** START UPD 2014/12/24 ISID11 ****
LW_STR_SUPPL1 TYPE ADRC-STR_SUPPL1,
LW_STR_SUPPL2 TYPE ADRC-STR_SUPPL2,
**** END UPD 2014/12/24 ISID11 ****
LW_TEL_NUMBER TYPE AD_TLNMBR1,
LW_FAX_NUMBER TYPE AD_FXNMBR1.

IF ST_S016-Z_CUST_CNEE IS NOT INITIAL.
LW_KUNNR = ST_S016-Z_CUST_CNEE.
PERFORM GET_CUSTOMER_INFO USING LW_KUNNR
CHANGING LW_NAME1
LW_STREET
LW_CITY1
**** START UPD 2014/12/24 ISID11 ****
LW_STR_SUPPL1
LW_STR_SUPPL2
**** END UPD 2014/12/24 ISID11 ****
LW_TEL_NUMBER
LW_FAX_NUMBER.
ST_S016-Z_CUST_NAME_CNEE = LW_NAME1.
ST_S016-Z_ADDRESS1_CNEE = LW_STREET.
ST_S016-Z_ADDRESS2_CNEE = LW_CITY1.
**** START UPD 2014/12/24 ISID11 ****
ST_S016-Z_ADDRESS3_CNEE = LW_STR_SUPPL1.
ST_S016-Z_ADDRESS4_CNEE = LW_STR_SUPPL2.
**** END UPD 2014/12/24 ISID11 ****
ST_S016-Z_TEL_CNEE = LW_TEL_NUMBER.
ST_S016-Z_FAX_CNEE = LW_FAX_NUMBER.
ELSE.
CLEAR:
ST_S016-Z_CUST_NAME_CNEE,
ST_S016-Z_ADDRESS1_CNEE,
ST_S016-Z_ADDRESS2_CNEE,
**** START ADD 2014/12/26 ISID11 ****
ST_S016-Z_ADDRESS3_CNEE,
ST_S016-Z_ADDRESS4_CNEE,
**** END ADD 2014/12/26 ISID11 ****
ST_S016-Z_TEL_CNEE,
ST_S016-Z_FAX_CNEE.
ENDIF.

ENDFORM.                    " GET_CUSTOMER_I

*&---------------------------------------------------------------------*
*&      Form  GET_CUSTOMER_I2
*&---------------------------------------------------------------------*
*       「Customer(Notify)」入力後の処理
*----------------------------------------------------------------------*
FORM GET_CUSTOMER_I2 .

DATA:
LW_KUNNR      TYPE KUNNR,
LW_NAME1      TYPE AD_NAME1,
LW_STREET     TYPE AD_STREET,
LW_CITY1      TYPE AD_CITY1,
**** START UPD 2014/12/24 ISID11 ****
LW_STR_SUPPL1 TYPE ADRC-STR_SUPPL1,
LW_STR_SUPPL2 TYPE ADRC-STR_SUPPL2,
**** END UPD 2014/12/24 ISID11 ****
LW_TEL_NUMBER TYPE AD_TLNMBR1,
LW_FAX_NUMBER TYPE AD_FXNMBR1.

IF ST_S016-Z_CUST_NTFY IS NOT INITIAL.
LW_KUNNR = ST_S016-Z_CUST_NTFY.
PERFORM GET_CUSTOMER_INFO USING LW_KUNNR
CHANGING LW_NAME1
LW_STREET
LW_CITY1
**** START UPD 2014/12/24 ISID11 ****
LW_STR_SUPPL1
LW_STR_SUPPL2
**** END UPD 2014/12/24 ISID11 ****
LW_TEL_NUMBER
LW_FAX_NUMBER.

ST_S016-Z_CUST_NAME_NTFY = LW_NAME1.
ST_S016-Z_ADDRESS1_NTFY = LW_STREET.
ST_S016-Z_ADDRESS2_NTFY = LW_CITY1.
**** START UPD 2014/12/24 ISID11 ****
ST_S016-Z_ADDRESS3_NTFY = LW_STR_SUPPL1.
ST_S016-Z_ADDRESS4_NTFY = LW_STR_SUPPL2.
**** END UPD 2014/12/24 ISID11 ****
ST_S016-Z_TEL_NTFY = LW_TEL_NUMBER.
ELSE.
CLEAR:
ST_S016-Z_CUST_NAME_NTFY,
ST_S016-Z_ADDRESS1_NTFY,
ST_S016-Z_ADDRESS2_NTFY,
**** START ADD 2014/12/26 ISID11 ****
ST_S016-Z_ADDRESS3_NTFY,
ST_S016-Z_ADDRESS4_NTFY,
**** END ADD 2014/12/26 ISID11 ****
ST_S016-Z_TEL_NTFY,
ST_S016-Z_FAX_NTFY.
ENDIF.

ENDFORM.                    " GET_CUSTOMER_I2

*&---------------------------------------------------------------------*
*&      Form  GET_CUSTOMER_INFO
*&---------------------------------------------------------------------*
*       Get customer information
*----------------------------------------------------------------------*
*      -->i_w_KUNNR       得意先コード
*      <--o_w_NAME1       Customer Name
*      <--o_w_STREET      Address1
*      <--o_w_CITY1       Address2
*      <--o_w_SUPPL1      Address3
*      <--o_w_SUPPL2      Address4
*      <--o_w_TEL_NUMBER  Tel
*      <--o_w_FAX_NUMBER  Fax
*----------------------------------------------------------------------*
FORM GET_CUSTOMER_INFO  USING    I_W_KUNNR TYPE KUNNR
CHANGING O_W_NAME1  TYPE AD_NAME1
O_W_STREET TYPE AD_STREET
O_W_CITY1  TYPE AD_CITY1
O_W_SUPPL1 TYPE ADRC-STR_SUPPL1
O_W_SUPPL2 TYPE ADRC-STR_SUPPL2
O_W_TELN   TYPE AD_TLNMBR1
O_W_FAXN   TYPE AD_FXNMBR1.
DATA:
**** START ADD 2014/12/26 ISID11 ****
LST_ADRC TYPE ZSEGZZ0002,
LW_SUBRC TYPE SY-SUBRC,
**** END ADD 2014/12/26 ISID11 ****
LW_ADRNR TYPE KNA1-ADRNR.

SELECT SINGLE ADRNR
FROM KNA1
INTO LW_ADRNR
WHERE KUNNR = I_W_KUNNR.
IF SY-SUBRC = 0.

**** START UPD 2014/12/26 ISID11 ****
*    SELECT name1
*           street
*           city1
***** START UPD 2014/12/24 ISID11 ****
*           str_suppl1
*           str_suppl2
***** END UPD 2014/12/24 ISID11 ****
*           tel_number
*           fax_number
*      UP TO 1 ROWS
*      FROM adrc
*      INTO (o_w_name1,o_w_street,o_w_city1,
***** START UPD 2014/12/24 ISID11 ****
*      o_w_suppl1,o_w_suppl2,
***** END UPD 2014/12/24 ISID11 ****
*      o_w_teln,o_w_faxn)
*     WHERE addrnumber = lw_adrnr.
*    ENDSELECT.

CALL FUNCTION 'ZEG_ZZ_ADRC_GET'
EXPORTING
IMPMULTITFLG  = '1'
IMPADDRNUMBER = LW_ADRNR
IMPORTING
EXPADRC       = LST_ADRC
EXPSUBRC      = LW_SUBRC.

IF LW_SUBRC = 0.

O_W_NAME1  = LST_ADRC-Z_NAME.
O_W_STREET = LST_ADRC-Z_ADDRESS1.
O_W_CITY1  = LST_ADRC-Z_ADDRESS2.
O_W_SUPPL1 = LST_ADRC-Z_ADDRESS3.
O_W_SUPPL2 = LST_ADRC-Z_ADDRESS4.
O_W_TELN   = LST_ADRC-TEL_NUMBER.
O_W_FAXN   = LST_ADRC-FAX_NUMBER.

ELSE.

CLEAR:
O_W_NAME1,
O_W_STREET,
O_W_CITY1,
O_W_SUPPL1,
O_W_SUPPL2,
O_W_TELN,
O_W_FAXN.

ENDIF.
**** END UPD 2014/12/26 ISID11 ****

ELSE.
MESSAGE E006(ZMEGSD01) WITH CNS_KNA1 DISPLAY LIKE CNS_MSG_E.
*   対象データが存在しません。(TBL = KNA1)
ENDIF.
ENDFORM.                    " GET_CUSTOMER_INFO

*&---------------------------------------------------------------------*
*&      Form  GET_DD07T
*&---------------------------------------------------------------------*
*       ドメイン値より、DD07Tからドメイン値テキストを取得する
*----------------------------------------------------------------------*
*      -->i_W_DOMNAME  ドメイン名
*      -->i_W_DOMVALUE ドメイン値
*      <--O_W_DDTEXT   固定値のテキスト
*----------------------------------------------------------------------*
FORM GET_DD07T  USING    I_W_DOMNAME  TYPE DOMNAME
I_W_DOMVALUE TYPE DOMVALUE_L
CHANGING O_W_DDTEXT   TYPE VAL_TEXT.
SELECT
DDTEXT                        "固定テキスト(短)
FROM DD07T
UP TO 1 ROWS
INTO O_W_DDTEXT
WHERE DOMNAME = I_W_DOMNAME
AND DDLANGUAGE = SY-LANGU
AND DOMVALUE_L = I_W_DOMVALUE.
ENDSELECT.
IF SY-SUBRC <> 0.
MESSAGE E006(ZMEGSD01) WITH CNS_DD07T DISPLAY LIKE CNS_MSG_E.
*   対象データが存在しません。(TBL = DD07T)
ENDIF.
ENDFORM.                    " GET_DD07T

*&---------------------------------------------------------------------*
*&      Module  GET_Z_FREIGHT_TERM  INPUT
*&---------------------------------------------------------------------*
*       「Freight Term」入力後の処理
*----------------------------------------------------------------------*
MODULE GET_Z_FREIGHT_TERM INPUT.

PERFORM GET_Z_FREIGHT_TERM.

ENDMODULE.                 " GET_Z_FREIGHT_TERM  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_Z_FREIGHT_ON_BL  INPUT
*&---------------------------------------------------------------------*
*       「FreightOnB/L」入力後の処理
*----------------------------------------------------------------------*
MODULE GET_Z_FREIGHT_ON_BL INPUT.

PERFORM GET_Z_FREIGHT_ON_BL.

ENDMODULE.                 " GET_Z_FREIGHT_ON_BL  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_Z_KIND_OF_BL  INPUT
*&---------------------------------------------------------------------*
*       「KindOfB/L」入力後の処理
*----------------------------------------------------------------------*
MODULE GET_Z_KIND_OF_BL INPUT.

PERFORM GET_Z_KIND_OF_BL.

ENDMODULE.                 " GET_Z_KIND_OF_BL  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_Z_DG_CODE  INPUT
*&---------------------------------------------------------------------*
*       「DGCode」入力後の処理
*----------------------------------------------------------------------*
MODULE GET_Z_DG_CODE INPUT.

PERFORM GET_Z_DG_CODE.

ENDMODULE.                 " GET_Z_DG_CODE  INPUT

*&---------------------------------------------------------------------*
*&      Module  GET_Z_TEMP_ZONES  INPUT
*&---------------------------------------------------------------------*
*       「TemperatureZones」入力後の処理
*----------------------------------------------------------------------*
MODULE GET_Z_TEMP_ZONES INPUT.

PERFORM GET_Z_TEMP_ZONES.

ENDMODULE.                 " GET_Z_TEMP_ZONES  INPUT

*&---------------------------------------------------------------------*
*&      Form  GET_Z_FREIGHT_TERM
*&---------------------------------------------------------------------*
*       「Freight Term」入力後の処理
*----------------------------------------------------------------------*
FORM GET_Z_FREIGHT_TERM .

DATA:
LW_DOMNAME  TYPE DOMNAME,
LW_DOMVALUE TYPE DOMVAL_LD,
LW_DDTEXT   TYPE VAL_TEXT.

LW_DOMNAME = CNS_FT_T.
LW_DOMVALUE = ST_S016-Z_FREIGHT_TERM.

PERFORM GET_DD07T USING LW_DOMNAME
LW_DOMVALUE
CHANGING LW_DDTEXT.
ST_S016-Z_FREIGHT_TERMT = LW_DDTEXT.
CLEAR:
LW_DOMNAME,
LW_DOMVALUE,
LW_DDTEXT.

ENDFORM.                    " GET_Z_FREIGHT_TERM

*&---------------------------------------------------------------------*
*&      Form  GET_Z_FREIGHT_ON_BL
*&---------------------------------------------------------------------*
*       「FreightOnB/L」入力後の処理
*----------------------------------------------------------------------*
FORM GET_Z_FREIGHT_ON_BL .
DATA:
LW_DOMNAME  TYPE DOMNAME,
LW_DOMVALUE TYPE DOMVAL_LD,
LW_DDTEXT   TYPE VAL_TEXT.

LW_DOMNAME = CNS_FOB_T.
LW_DOMVALUE = ST_S016-Z_FREIGHT_ON_BL.

PERFORM GET_DD07T USING LW_DOMNAME
LW_DOMVALUE
CHANGING LW_DDTEXT.
ST_S016-Z_FREIGHT_ON_BLT = LW_DDTEXT.
CLEAR:
LW_DOMNAME,
LW_DOMVALUE,
LW_DDTEXT.

ENDFORM.                    " GET_Z_FREIGHT_ON_BL

*&---------------------------------------------------------------------*
*&      Form  GET_Z_KIND_OF_BL
*&---------------------------------------------------------------------*
*       「KindOfB/L」入力後の処理
*----------------------------------------------------------------------*
FORM GET_Z_KIND_OF_BL .
DATA:
LW_DOMNAME  TYPE DOMNAME,
LW_DOMVALUE TYPE DOMVAL_LD,
LW_DDTEXT   TYPE VAL_TEXT.

LW_DOMNAME = CNS_KOB_T.
LW_DOMVALUE = ST_S016-Z_KIND_OF_BL.

PERFORM GET_DD07T USING LW_DOMNAME
LW_DOMVALUE
CHANGING LW_DDTEXT.

ST_S016-Z_KIND_OF_BLT = LW_DDTEXT.
CLEAR:
LW_DOMNAME,
LW_DOMVALUE,
LW_DDTEXT.
ENDFORM.                    " GET_Z_KIND_OF_BL

*&---------------------------------------------------------------------*
*&      Form  GET_Z_DG_CODE
*&---------------------------------------------------------------------*
*       「DGCode」入力後の処理
*----------------------------------------------------------------------*
FORM GET_Z_DG_CODE .
DATA:
LW_DOMNAME  TYPE DOMNAME,
LW_DOMVALUE TYPE DOMVAL_LD,
LW_DDTEXT   TYPE VAL_TEXT.

LW_DOMNAME = CNS_DG_T.
LW_DOMVALUE = ST_S016-Z_DG_CODE.

PERFORM GET_DD07T USING LW_DOMNAME
LW_DOMVALUE
CHANGING LW_DDTEXT.
ST_S016-Z_DG_CODET = LW_DDTEXT.
CLEAR:
LW_DOMNAME,
LW_DOMVALUE,
LW_DDTEXT.

ENDFORM.                    " GET_Z_DG_CODE

*&---------------------------------------------------------------------*
*&      Form  GET_Z_TEMP_ZONES
*&---------------------------------------------------------------------*
*       「TemperatureZones」入力後の処理
*----------------------------------------------------------------------*
FORM GET_Z_TEMP_ZONES .
DATA:
LW_DOMNAME  TYPE DOMNAME,
LW_DOMVALUE TYPE DOMVAL_LD,
LW_DDTEXT   TYPE VAL_TEXT.

LW_DOMNAME = CNS_TZ_T.
LW_DOMVALUE = ST_S016-Z_TEMP_ZONES.

PERFORM GET_DD07T USING LW_DOMNAME
LW_DOMVALUE
CHANGING LW_DDTEXT.
ST_S016-Z_TEMP_ZONEST = LW_DDTEXT.
CLEAR:
LW_DOMNAME,
LW_DOMVALUE,
LW_DDTEXT.

ENDFORM.                    " GET_Z_TEMP_ZONES

*&---------------------------------------------------------------------*
*&      Module  STATUS_3100  OUTPUT
*&---------------------------------------------------------------------*
*       画面3100のステータスの設定
*----------------------------------------------------------------------*
MODULE STATUS_3100 OUTPUT.
SET PF-STATUS 'ST_3100'.
SET TITLEBAR 'T_3100'.

IF W_CODE = CNS_NO2 OR
W_CODE = CNS_CANC2 OR
W_CODE = CNS_CAN3 OR
W_CODE = CNS_EXC3 OR
W_CODE = CNS_CANC3.
LEAVE TO SCREEN 0.
ENDIF.

ENDMODULE.                 " STATUS_3100  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3100  INPUT
*&---------------------------------------------------------------------*
*       画面3100のボタンイベント処理
*----------------------------------------------------------------------*
MODULE USER_COMMAND_3100 INPUT.

W_CODE = OK_CODE.
CASE W_CODE.
WHEN CNS_YES.   "Yes
*     C-2-1．ShippingInstructionデータ取得
REFRESH TD_SIN2.
PERFORM GET_SI_DATA2 CHANGING TD_SIN2.

IF TD_SIN2 IS NOT INITIAL.
CALL SCREEN 3200 STARTING AT 11 1
**** START UPD 2015/02/02 ISID11 ****
*                         ENDING AT 131 30.
ENDING AT 129 21.
**** END UPD 2015/02/02 ISID11 ****
ENDIF.
WHEN CNS_NO OR  "No
CNS_CANC1 OR
CNS_NO2.
LEAVE TO SCREEN 0.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3100  INPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_3100  INPUT
*&---------------------------------------------------------------------*
*       画面3100のEXITイベント処理
*----------------------------------------------------------------------*
MODULE EXIT_3100 INPUT.
W_CODE = OK_CODE.
LEAVE TO SCREEN 0.
ENDMODULE.                 " EXIT_3100  INPUT

*&---------------------------------------------------------------------*
*&      Form  GET_SI_DATA
*&---------------------------------------------------------------------*
*       A-2-1-1．S/I Noの取得
*----------------------------------------------------------------------*
*      <--O_TD_zt003  S/I data
*----------------------------------------------------------------------*
FORM GET_SI_DATA2  CHANGING O_TD_SIN TYPE TYP_TD_SIN.

DATA:
LTD_ZT003 TYPE TYP_TD_ZT003,
LTD_TEXT  TYPE TYP_TD_TEXT,
LW_EFLG   TYPE C.

SELECT *
INTO CORRESPONDING FIELDS OF TABLE LTD_ZT003
FROM ZTEGSDT003
INNER JOIN ZTEGSDT004
ON ZTEGSDT003~Z_SI_NO = ZTEGSDT004~Z_SI_NO
WHERE ZTEGSDT003~Z_SI_NO IN S_SINO_S           "S/I No
**** START ADD 2015/05/31 ISID18 ****
AND ZTEGSDT003~VSTEL IN S_SHPT_S             "ShippingPt
**** END ADD 2015/05/31 ISID18 ****
AND ZTEGSDT003~Z_SI_DATE IN S_SIDT_S         "S/I Date
AND ZTEGSDT003~Z_BL_NO IN S_BLNO_S           "B/L No
AND ZTEGSDT003~Z_BL_DATE IN S_BLDT_S         "B/L Date 5
AND ZTEGSDT003~Z_CUST_CNEE IN S_CONS_S       "Consinee
AND ZTEGSDT003~Z_CUST_NTFY IN S_NOTF_S       "Notify
AND ZTEGSDT003~Z_CARRIER IN S_CARR_S         "Carrier
AND ZTEGSDT003~Z_BOOKING_NO IN S_BKNO_S      "Booking No
AND ZTEGSDT003~Z_SHIPPED_PER IN S_SPPE_S     "Shipped Per
AND ZTEGSDT003~Z_VOY_NO IN S_VONO_S          "Voy No 10
AND ZTEGSDT003~Z_ETD IN S_ETD_S              "ETD
AND ZTEGSDT003~Z_ETA IN S_ETA_S              "ETA
AND ZTEGSDT003~Z_SHIP_DATE IN S_SPDT_S       "Ship Date
AND ZTEGSDT003~Z_CFS_CUT IN S_CFCT_S         "CFS-CUT
AND ZTEGSDT003~Z_CY_CUT IN S_CYCT_S          "CY-CUT 15
AND ZTEGSDT003~Z_CRE_YMD IN S_CRDT_S         "Create Date
AND ZTEGSDT003~Z_CRE_HMS IN S_CRTM_S         "Create Time
AND ZTEGSDT003~Z_CRE_USERID IN S_CRUS_S       "Create User
AND ZTEGSDT003~Z_MOD_YMD IN S_MDDT_S         "Modify Date
AND ZTEGSDT003~Z_MOD_HMS IN S_MDTM_S         "Modify Time
AND ZTEGSDT003~Z_MOD_USERID IN S_MDUS_S.     "Modify User
IF SY-SUBRC <> 0.
LW_EFLG = ABAP_ON.
MESSAGE I006(ZMEGSD01) WITH TEXT-E01 DISPLAY LIKE CNS_MSG_E.
*   対象データが存在しません。(TBL = ZEGSDT003)
ENDIF.
SORT LTD_ZT003 BY Z_SI_NO ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_ZT003 COMPARING Z_SI_NO.

IF LW_EFLG = ABAP_OFF.
SORT LTD_ZT003 BY Z_SI_NO ASCENDING.
*   C-2-2．テキスト取得
PERFORM GET_TEXT CHANGING LTD_TEXT.

*   画面出力データ取得
PERFORM GET_ALV_CONTENT USING LTD_ZT003
LTD_TEXT
CHANGING O_TD_SIN.
ENDIF.

ENDFORM.                    " GET_SI_DATA2

*&---------------------------------------------------------------------*
*&      Module  STATUS_3200  OUTPUT
*&---------------------------------------------------------------------*
*       画面3200のステータスの設定
*----------------------------------------------------------------------*
MODULE STATUS_3200 OUTPUT.
SET PF-STATUS 'ST_3200'.
SET TITLEBAR 'T_3200'.

IF W_CODE = CNS_CAN3 OR
W_CODE = CNS_EXC3 OR
W_CODE = CNS_CANC3.
LEAVE TO SCREEN 0.
ENDIF.

PERFORM DISPLAY_DATA USING TD_SIN2
ABAP_ON.

ENDMODULE.                 " STATUS_3200  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3200  INPUT
*&---------------------------------------------------------------------*
*       画面3200のボタンイベント処理
*----------------------------------------------------------------------*
MODULE USER_COMMAND_3200 INPUT.

W_CODE = OK_CODE.
CASE W_CODE.
WHEN CNS_YES2.
PERFORM CALL_3300.
WHEN CNS_NO2 OR
CNS_CANC2 OR
CNS_CAN3.
LEAVE TO SCREEN 0.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3200  INPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_3200  INPUT
*&---------------------------------------------------------------------*
*       画面3200のEXITイベント処理
*----------------------------------------------------------------------*
MODULE EXIT_3200 INPUT.
W_CODE = OK_CODE.
LEAVE TO SCREEN 0.
ENDMODULE.                 " EXIT_3200  INPUT

*&---------------------------------------------------------------------*
*&      Form  EXCLUDE_TB_FUNCTIONS
*&---------------------------------------------------------------------*
*       ユーザ事件を除く
*----------------------------------------------------------------------*
*      <--O_TD_EXCLUDE     ITAB:SCREEN9000ALVユーザ事件
*----------------------------------------------------------------------*
FORM EXCLUDE_TB_FUNCTIONS CHANGING O_TD_EXCLUDE TYPE UI_FUNCTIONS.
DATA:
LST_EXCLUDE TYPE UI_FUNC.

LST_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_DELETE_ROW.
APPEND LST_EXCLUDE TO O_TD_EXCLUDE.
CLEAR LST_EXCLUDE.

LST_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_INSERT_ROW.
APPEND LST_EXCLUDE TO O_TD_EXCLUDE.
CLEAR LST_EXCLUDE.

LST_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_APPEND_ROW.
APPEND LST_EXCLUDE TO O_TD_EXCLUDE.
CLEAR LST_EXCLUDE.

LST_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY_ROW.
APPEND LST_EXCLUDE TO O_TD_EXCLUDE.
CLEAR LST_EXCLUDE.

LST_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_UNDO.
APPEND LST_EXCLUDE TO O_TD_EXCLUDE.
CLEAR LST_EXCLUDE.

LST_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_REFRESH.
APPEND LST_EXCLUDE TO O_TD_EXCLUDE.
CLEAR LST_EXCLUDE.

LST_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_CHECK.
APPEND LST_EXCLUDE TO O_TD_EXCLUDE.
CLEAR LST_EXCLUDE.

LST_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_CUT.
APPEND LST_EXCLUDE TO O_TD_EXCLUDE.
CLEAR LST_EXCLUDE.

LST_EXCLUDE = CL_GUI_ALV_GRID=>MC_FC_LOC_COPY.
APPEND LST_EXCLUDE TO O_TD_EXCLUDE.
CLEAR LST_EXCLUDE.

LST_EXCLUDE = CL_GUI_ALV_GRID=>MC_MB_PASTE.
APPEND LST_EXCLUDE TO O_TD_EXCLUDE.
CLEAR LST_EXCLUDE.

ENDFORM.                    " EXCLUDE_TB_FUNCTIONS

*&---------------------------------------------------------------------*
*&      Form  CALL_3300
*&---------------------------------------------------------------------*
*       Call screen 3300
*----------------------------------------------------------------------*
FORM CALL_3300 .

DATA:
LW_CNT            TYPE SY-INDEX,
LST_SIN           TYPE ZSEGSD0016,
LTD_ET_INDEX_ROWS TYPE LVC_T_ROW,
LSD_ET_INDEX_ROWS TYPE LVC_S_ROW.

* C-4-3．一覧画面の「OK」ボタン押下時の処理
CALL METHOD CI_ALV_S->GET_SELECTED_ROWS
IMPORTING
ET_INDEX_ROWS = LTD_ET_INDEX_ROWS.

DESCRIBE TABLE LTD_ET_INDEX_ROWS LINES LW_CNT.

IF LW_CNT = 0.
*   行が選択されていない場合
MESSAGE E008(ZMEGSD01).
*   行が選択されていません。
ELSEIF LW_CNT > 1.
*   行のチェックが複数選択されている場合
MESSAGE E007(ZMEGSD01).
*   行が複数選択されています。
ENDIF.

READ TABLE LTD_ET_INDEX_ROWS INTO LSD_ET_INDEX_ROWS INDEX 1.

CLEAR: LW_CNT.
LW_CNT = LSD_ET_INDEX_ROWS-INDEX.

READ TABLE TD_SIN2 INTO LST_SIN INDEX LW_CNT.
ST_S0162 = LST_SIN.
ST_S0162-Z_CHK = ABAP_ON.

CLEAR:
W_CHK1,
W_CHK2,
W_CHK3,
W_CHK4,
W_CHK5,
W_CHK6,
W_CHK7,
W_CHK8,
W_CHK9,
W_CHK10,
W_CHK11,
W_CHK12,
W_CHK13,
W_CHK14,
W_CHK15,
W_CHK16,
W_CHK17,
W_CHK18,
W_CHK19,
W_CHK20,
W_CHK21,
W_CHK22,
W_CHK23,
W_CHK24,
W_CHK25,
W_CHK26,
W_CHK27,
W_CHK28,
W_CHK29,
W_CHK30,
W_CHK31,
W_CHK32,
W_CHK33,
W_CHK34,
W_CHK35,
W_CHK36,
W_CHK37,
W_CHK38,
W_CHK39,
W_CHK40,
W_CHK41,
W_CHK42,
W_CHK43,
**** START ADD 2014/12/24 ISID11 ****
W_CHK44,
W_CHK45,
W_CHK46,
W_CHK47.
**** END ADD 2014/12/24 ISID11 ****

CALL SCREEN 3300 STARTING AT 11 1
**** START UPD 2014/12/24 ISID11 ****
*                   ENDING AT 125 16.
ENDING AT 135 16.
**** END UPD 2014/12/24 ISID11 ****

ENDFORM.                    " CALL_3300

*&---------------------------------------------------------------------*
*&      Module  STATUS_3300  OUTPUT
*&---------------------------------------------------------------------*
*       画面3300のステータスの設定
*----------------------------------------------------------------------*
MODULE STATUS_3300 OUTPUT.
SET PF-STATUS 'ST_3300'.
SET TITLEBAR 'T_3300'.

ENDMODULE.                 " STATUS_3300  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3300  INPUT
*&---------------------------------------------------------------------*
*       画面3300のボタンイベント処理
*----------------------------------------------------------------------*
MODULE USER_COMMAND_3300 INPUT.

W_CODE = OK_CODE.
CASE W_CODE.
WHEN CNS_EXC3.
PERFORM EXC_PROC.
LEAVE TO SCREEN 0.
WHEN CNS_CAN3 OR
CNS_CANC3 .
LEAVE TO SCREEN 0.
WHEN CNS_SLA.
W_CHK1 = ABAP_ON.
W_CHK2 = ABAP_ON.
W_CHK3 = ABAP_ON.
W_CHK4 = ABAP_ON.
W_CHK5 = ABAP_ON.
W_CHK6 = ABAP_ON.
W_CHK7 = ABAP_ON.
W_CHK8 = ABAP_ON.
W_CHK9 = ABAP_ON.
W_CHK10 = ABAP_ON.
W_CHK11 = ABAP_ON.
W_CHK12 = ABAP_ON.
W_CHK13 = ABAP_ON.
W_CHK14 = ABAP_ON.
W_CHK15 = ABAP_ON.
W_CHK16 = ABAP_ON.
W_CHK17 = ABAP_ON.
W_CHK18 = ABAP_ON.
W_CHK19 = ABAP_ON.
W_CHK20 = ABAP_ON.
W_CHK21 = ABAP_ON.
W_CHK22 = ABAP_ON.
W_CHK23 = ABAP_ON.
W_CHK24 = ABAP_ON.
W_CHK25 = ABAP_ON.
W_CHK26 = ABAP_ON.
W_CHK27 = ABAP_ON.
W_CHK28 = ABAP_ON.
W_CHK29 = ABAP_ON.
W_CHK30 = ABAP_ON.
W_CHK31 = ABAP_ON.
W_CHK32 = ABAP_ON.
W_CHK33 = ABAP_ON.
W_CHK34 = ABAP_ON.
W_CHK35 = ABAP_ON.
W_CHK36 = ABAP_ON.
W_CHK37 = ABAP_ON.
W_CHK38 = ABAP_ON.
W_CHK39 = ABAP_ON.
W_CHK40 = ABAP_ON.
W_CHK41 = ABAP_ON.
W_CHK42 = ABAP_ON.
W_CHK43 = ABAP_ON.
**** START ADD 2014/12/24 ISID11 ****
W_CHK44 = ABAP_ON.
W_CHK45 = ABAP_ON.
W_CHK46 = ABAP_ON.
W_CHK47 = ABAP_ON.
**** END ADD 2014/12/24 ISID11 ****
WHEN CNS_DSA.
W_CHK1 = ABAP_OFF.
W_CHK2 = ABAP_OFF.
W_CHK3 = ABAP_OFF.
W_CHK4 = ABAP_OFF.
W_CHK5 = ABAP_OFF.
W_CHK6 = ABAP_OFF.
W_CHK7 = ABAP_OFF.
W_CHK8 = ABAP_OFF.
W_CHK9 = ABAP_OFF.
W_CHK10 = ABAP_OFF.
W_CHK11 = ABAP_OFF.
W_CHK12 = ABAP_OFF.
W_CHK13 = ABAP_OFF.
W_CHK14 = ABAP_OFF.
W_CHK15 = ABAP_OFF.
W_CHK16 = ABAP_OFF.
W_CHK17 = ABAP_OFF.
W_CHK18 = ABAP_OFF.
W_CHK19 = ABAP_OFF.
W_CHK20 = ABAP_OFF.
W_CHK21 = ABAP_OFF.
W_CHK22 = ABAP_OFF.
W_CHK23 = ABAP_OFF.
W_CHK24 = ABAP_OFF.
W_CHK25 = ABAP_OFF.
W_CHK26 = ABAP_OFF.
W_CHK27 = ABAP_OFF.
W_CHK28 = ABAP_OFF.
W_CHK29 = ABAP_OFF.
W_CHK30 = ABAP_OFF.
W_CHK31 = ABAP_OFF.
W_CHK32 = ABAP_OFF.
W_CHK33 = ABAP_OFF.
W_CHK34 = ABAP_OFF.
W_CHK35 = ABAP_OFF.
W_CHK36 = ABAP_OFF.
W_CHK37 = ABAP_OFF.
W_CHK38 = ABAP_OFF.
W_CHK39 = ABAP_OFF.
W_CHK40 = ABAP_OFF.
W_CHK41 = ABAP_OFF.
W_CHK42 = ABAP_OFF.
W_CHK43 = ABAP_OFF.
**** START ADD 2014/12/24 ISID11 ****
W_CHK44 = ABAP_OFF.
W_CHK45 = ABAP_OFF.
W_CHK46 = ABAP_OFF.
W_CHK47 = ABAP_OFF.
**** END ADD 2014/12/24 ISID11 ****
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3300  INPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_3300  INPUT
*&---------------------------------------------------------------------*
*       画面3300のEXITイベント処理
*----------------------------------------------------------------------*
MODULE EXIT_3300 INPUT.
W_CODE = OK_CODE.
LEAVE TO SCREEN 0.
ENDMODULE.                 " EXIT_3300  INPUT

*&---------------------------------------------------------------------*
*&      Form  EXC_PROC
*&---------------------------------------------------------------------*
*       Execute process
*----------------------------------------------------------------------*
FORM EXC_PROC .

IF W_CHK1 = ABAP_OFF AND
W_CHK2 = ABAP_OFF AND
W_CHK3 = ABAP_OFF AND
W_CHK4 = ABAP_OFF AND
W_CHK5 = ABAP_OFF AND
W_CHK6 = ABAP_OFF AND
W_CHK7 = ABAP_OFF AND
W_CHK8 = ABAP_OFF AND
W_CHK9 = ABAP_OFF AND
W_CHK10 = ABAP_OFF AND
W_CHK11 = ABAP_OFF AND
W_CHK12 = ABAP_OFF AND
W_CHK13 = ABAP_OFF AND
W_CHK14 = ABAP_OFF AND
W_CHK15 = ABAP_OFF AND
W_CHK16 = ABAP_OFF AND
W_CHK17 = ABAP_OFF AND
W_CHK18 = ABAP_OFF AND
W_CHK19 = ABAP_OFF AND
W_CHK20 = ABAP_OFF AND
W_CHK21 = ABAP_OFF AND
W_CHK22 = ABAP_OFF AND
W_CHK23 = ABAP_OFF AND
W_CHK24 = ABAP_OFF AND
W_CHK25 = ABAP_OFF AND
W_CHK26 = ABAP_OFF AND
W_CHK27 = ABAP_OFF AND
W_CHK28 = ABAP_OFF AND
W_CHK29 = ABAP_OFF AND
W_CHK30 = ABAP_OFF AND
W_CHK31 = ABAP_OFF AND
W_CHK32 = ABAP_OFF AND
W_CHK33 = ABAP_OFF AND
W_CHK34 = ABAP_OFF AND
W_CHK35 = ABAP_OFF AND
W_CHK36 = ABAP_OFF AND
W_CHK37 = ABAP_OFF AND
W_CHK38 = ABAP_OFF AND
W_CHK39 = ABAP_OFF AND
W_CHK40 = ABAP_OFF AND
W_CHK41 = ABAP_OFF AND
W_CHK42 = ABAP_OFF AND
W_CHK43 = ABAP_OFF AND
**** START ADD 2014/12/24 ISID11 ****
W_CHK44 = ABAP_OFF AND
W_CHK45 = ABAP_OFF AND
W_CHK46 = ABAP_OFF AND
W_CHK47 = ABAP_OFF.
**** END ADD 2014/12/24 ISID11 ****
MESSAGE I014(ZMEGSD01) DISPLAY LIKE CNS_MSG_E.
*   チェックボックスが選択されていません。
LEAVE SCREEN.
ENDIF.

**** START ADD 2015/05/31 ISID18 ****
* ShippingPtの設定
IF ST_S016-VSTEL IS INITIAL.
ST_S016-VSTEL = ST_S0162-VSTEL.
ENDIF.
**** END ADD 2015/05/31 ISID18 ****

IF W_CHK1 = ABAP_ON.
ST_S016-Z_CUST_CNEE = ST_S0162-Z_CUST_CNEE.
ENDIF.

IF W_CHK2 = ABAP_ON.
ST_S016-Z_CUST_NAME_CNEE = ST_S0162-Z_CUST_NAME_CNEE.
ENDIF.

IF W_CHK3 = ABAP_ON.
ST_S016-Z_ADDRESS1_CNEE = ST_S0162-Z_ADDRESS1_CNEE.
ENDIF.

IF W_CHK4 = ABAP_ON.
ST_S016-Z_ADDRESS2_CNEE = ST_S0162-Z_ADDRESS2_CNEE.
ENDIF.

IF W_CHK5 = ABAP_ON.
ST_S016-Z_ATTN_CNEE = ST_S0162-Z_ATTN_CNEE.
ENDIF.

IF W_CHK6 = ABAP_ON.
ST_S016-Z_TEL_CNEE = ST_S0162-Z_TEL_CNEE.
ENDIF.

IF W_CHK7 = ABAP_ON.
ST_S016-Z_FAX_CNEE = ST_S0162-Z_FAX_CNEE.
ENDIF.

IF W_CHK8 = ABAP_ON.
ST_S016-Z_CUST_NTFY = ST_S0162-Z_CUST_NTFY.
ENDIF.

IF W_CHK9 = ABAP_ON.
ST_S016-Z_CUST_NAME_NTFY = ST_S0162-Z_CUST_NAME_NTFY.
ENDIF.

IF W_CHK10 = ABAP_ON.
ST_S016-Z_ADDRESS1_NTFY = ST_S0162-Z_ADDRESS1_NTFY.
ENDIF.

IF W_CHK11 = ABAP_ON.
ST_S016-Z_ADDRESS2_NTFY = ST_S0162-Z_ADDRESS2_NTFY.
ENDIF.

IF W_CHK12 = ABAP_ON.
ST_S016-Z_ATTN_NTFY = ST_S0162-Z_ATTN_NTFY.
ENDIF.

IF W_CHK13 = ABAP_ON.
ST_S016-Z_TEL_NTFY = ST_S0162-Z_TEL_NTFY.
ENDIF.

IF W_CHK14 = ABAP_ON.
ST_S016-Z_FAX_NTFY = ST_S0162-Z_FAX_NTFY.
ENDIF.

IF W_CHK15 = ABAP_ON.
ST_S016-Z_CARRIER = ST_S0162-Z_CARRIER.
ENDIF.

IF W_CHK16 = ABAP_ON.
ST_S016-Z_BOOKING_NO = ST_S0162-Z_BOOKING_NO.
ENDIF.

IF W_CHK17 = ABAP_ON.
ST_S016-Z_SHIPPED_PER = ST_S0162-Z_SHIPPED_PER.
ENDIF.

IF W_CHK18 = ABAP_ON.
ST_S016-Z_VOY_NO = ST_S0162-Z_VOY_NO.
ENDIF.

IF W_CHK19 = ABAP_ON.
ST_S016-Z_ETD = ST_S0162-Z_ETD.
ENDIF.

IF W_CHK20 = ABAP_ON.
ST_S016-Z_ETA = ST_S0162-Z_ETA.
ENDIF.

IF W_CHK21 = ABAP_ON.
ST_S016-Z_SHIP_DATE = ST_S0162-Z_SHIP_DATE.
ENDIF.

IF W_CHK22 = ABAP_ON.
ST_S016-Z_CFS_CUT = ST_S0162-Z_CFS_CUT.
ENDIF.

IF W_CHK23 = ABAP_ON.
ST_S016-Z_CY_CUT = ST_S0162-Z_CY_CUT.
ENDIF.

IF W_CHK24 = ABAP_ON.
ST_S016-Z_CSIZE_20FT_QTY = ST_S0162-Z_CSIZE_20FT_QTY.
ENDIF.

IF W_CHK25 = ABAP_ON.
ST_S016-Z_CSIZE_40FT_QTY = ST_S0162-Z_CSIZE_40FT_QTY.
ENDIF.

IF W_CHK26 = ABAP_ON.
ST_S016-Z_CSIZE_OTH_QTY = ST_S0162-Z_CSIZE_OTH_QTY.
ENDIF.

IF W_CHK27 = ABAP_ON.
ST_S016-Z_PL_RECEIPT = ST_S0162-Z_PL_RECEIPT.
ENDIF.

IF W_CHK28 = ABAP_ON.
ST_S016-Z_PT_LOADING = ST_S0162-Z_PT_LOADING.
ENDIF.

IF W_CHK29 = ABAP_ON.
ST_S016-Z_PT_DISCHARGE = ST_S0162-Z_PT_DISCHARGE.
ENDIF.

IF W_CHK30 = ABAP_ON.
ST_S016-Z_PL_DELIVERY = ST_S0162-Z_PL_DELIVERY.
ENDIF.

IF W_CHK31 = ABAP_ON.
ST_S016-Z_FINAL_DEST = ST_S0162-Z_FINAL_DEST.
ENDIF.

IF W_CHK32 = ABAP_ON.
ST_S016-Z_FREIGHT_TERM = ST_S0162-Z_FREIGHT_TERM.
ENDIF.

IF W_CHK33 = ABAP_ON.
ST_S016-Z_FREIGHT_ON_BL = ST_S0162-Z_FREIGHT_ON_BL.
ENDIF.

IF W_CHK34 = ABAP_ON.
ST_S016-Z_PL_ISSUE = ST_S0162-Z_PL_ISSUE.
ENDIF.

IF W_CHK35 = ABAP_ON.
ST_S016-Z_KIND_OF_BL = ST_S0162-Z_KIND_OF_BL.
ENDIF.

IF W_CHK36 = ABAP_ON.
ST_S016-Z_DG_CODE = ST_S0162-Z_DG_CODE.
ENDIF.

IF W_CHK37 = ABAP_ON.
ST_S016-Z_TEMP_ZONES = ST_S0162-Z_TEMP_ZONES.
ENDIF.

IF W_CHK38 = ABAP_ON.
ST_S016-Z_DESC_OF_GOODS = ST_S0162-Z_DESC_OF_GOODS.
ENDIF.

IF W_CHK39 = ABAP_ON.
ST_S016-Z_SI_REMARKS1 = ST_S0162-Z_SI_REMARKS1.
ENDIF.

IF W_CHK40 = ABAP_ON.
ST_S016-Z_SI_REMARKS2 = ST_S0162-Z_SI_REMARKS2.
ENDIF.

IF W_CHK41 = ABAP_ON.
ST_S016-Z_SI_REMARKS3 = ST_S0162-Z_SI_REMARKS3.
ENDIF.

IF W_CHK42 = ABAP_ON.
ST_S016-Z_SI_REMARKS4 = ST_S0162-Z_SI_REMARKS4.
ENDIF.

IF W_CHK43 = ABAP_ON.
ST_S016-Z_SI_REMARKS5 = ST_S0162-Z_SI_REMARKS5.
ENDIF.

**** START ADD 2014/12/24 ISID11 ****
IF W_CHK44 = ABAP_ON.
ST_S016-Z_ADDRESS3_CNEE = ST_S0162-Z_ADDRESS3_CNEE.
ENDIF.

IF W_CHK45 = ABAP_ON.
ST_S016-Z_ADDRESS4_CNEE = ST_S0162-Z_ADDRESS4_CNEE.
ENDIF.

IF W_CHK46 = ABAP_ON.
ST_S016-Z_ADDRESS3_NTFY = ST_S0162-Z_ADDRESS3_NTFY.
ENDIF.

IF W_CHK47 = ABAP_ON.
ST_S016-Z_ADDRESS4_NTFY = ST_S0162-Z_ADDRESS4_NTFY.
ENDIF.
**** END ADD 2014/12/24 ISID11 ****

ENDFORM.                    " EXC_PROC

*&---------------------------------------------------------------------*
*&      Module  STATUS_3400  OUTPUT
*&---------------------------------------------------------------------*
*       画面3400のステータスの設定
*----------------------------------------------------------------------*
MODULE STATUS_3400 OUTPUT.
SET PF-STATUS 'ST_3400'.
SET TITLEBAR 'T_3400'.

IF W_CODE = CNS_EXC5 OR
W_CODE = CNS_NO5 OR
W_CODE = CNS_CANC5.
LEAVE TO SCREEN 0.
ENDIF.

ENDMODULE.                 " STATUS_3400  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3400  INPUT
*&---------------------------------------------------------------------*
*       画面3400のボタンイベント処理
*----------------------------------------------------------------------*
MODULE USER_COMMAND_3400 INPUT.

W_CODE = OK_CODE.
CASE W_CODE.
WHEN CNS_YES4.
PERFORM CALL_SCR3500.
WHEN CNS_NO4 OR
CNS_CANC4 .
LEAVE TO SCREEN 0.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3400  INPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_3400  INPUT
*&---------------------------------------------------------------------*
*       画面3400のEXITイベント処理
*----------------------------------------------------------------------*
MODULE EXIT_3400 INPUT.
W_CODE = OK_CODE.
LEAVE TO SCREEN 0.
ENDMODULE.                 " EXIT_3400  INPUT

*&---------------------------------------------------------------------*
*&      Form  CALL_SCR3500
*&---------------------------------------------------------------------*
*       CALL SCREEN 3500
*----------------------------------------------------------------------*
FORM CALL_SCR3500 .

DATA:
LTD_ZT001 TYPE TYP_TD_ZT001.

REFRESH:
TD_INV.
IF RB_1 = ABAP_ON.
*   選択画面のラジオボタン「Outbounde Delivery」が選択されている場合
PERFORM GET_FROM_OD CHANGING LTD_ZT001.
ELSE.
*   選択画面のラジオボタン「External Data」が選択されている場合
PERFORM GET_FROM_ED CHANGING LTD_ZT001.
ENDIF.

* D-2-2．テキスト取得
PERFORM GET_KNA1 USING LTD_ZT001
CHANGING TD_INV.

CHECK TD_INV IS NOT INITIAL.
CALL SCREEN 3500 STARTING AT 11 1
**** START UPD 2015/02/02 ISID11 ****
*                   ENDING AT 141 31.
ENDING AT 127 27.
**** END UPD 2015/02/02 ISID11 ****

ENDFORM.                    " CALL_SCR3500

*&---------------------------------------------------------------------*
*&      Form  GET_FROM_OD
*&---------------------------------------------------------------------*
*       Invoiceデータ取得:「Outbounde Delivery」が選択
*----------------------------------------------------------------------*
FORM GET_FROM_OD CHANGING I_TD_ZT001 TYPE TYP_TD_ZT001.

DATA:
LTD_ZT001   TYPE TYP_TD_ZT001T,
LTD_ZT001T  TYPE TYP_TD_ZT001T,
**** START DEL 2015/02/27 ISID11 ****
*    LTD_ZT003   TYPE TYP_TD_SIND,
*    LST_ZT003   TYPE TYP_SIND,
**** END DEL 2015/02/27 ISID11 ****
LST_ZT001   TYPE TYP_ZT001T,
LST_ZT001O  TYPE TYP_ZT001.

SELECT
ZTEGSDT001~Z_SOURCE_TYPE      "ソースタイプ
LIKP~VSTEL                    "ShippingPt
LIKP~WADAT                    "Planed GI
LIKP~KUNAG                    "Sold-to party
LIKP~KUNNR                    "Ship-to party
LIKP~VBELN                    "出荷伝票(Outbound Delivery)
LIKP~ERDAT                    "レコード登録日
LIKP~ERNAM                    "登録者
ZTEGSDT001~Z_INVOICE_NO       "Invoice No
ZTEGSDT001~Z_INVOICE_DATE     "Invoice Date
ZTEGSDT001~Z_STATUS_INVOICE   "ステータス（Invoice）
ZTEGSDT001~Z_CUST_BT          "得意先（Bill To）
ZTEGSDT001~Z_CUST_NAME_BT     "得意先名（Bill To）
ZTEGSDT001~Z_ADDRESS1_BT      "得意先住所1（Bill To）
ZTEGSDT001~Z_ADDRESS2_BT      "得意先住所2（Bill To）
**** START ADD 2014/12/24 ISID11 ****
ZTEGSDT001~Z_ADDRESS3_BT      "得意先住所3（Bill To）
ZTEGSDT001~Z_ADDRESS4_BT      "得意先住所4（Bill To
**** END ADD 2014/12/24 ISID11 ****
ZTEGSDT001~Z_ATTN_BT          "得意先担当者（Bill To）
ZTEGSDT001~Z_TEL_BT           "得意先電話番号（Bill To）
ZTEGSDT001~Z_FAX_BT           "得意先FAX（Bill To）
ZTEGSDT001~Z_CUST_ST          "得意先（Ship To）
ZTEGSDT001~Z_CUST_NAME_ST     "得意先名（Ship To）
ZTEGSDT001~Z_ADDRESS1_ST      "得意先住所1（Ship To）
ZTEGSDT001~Z_ADDRESS2_ST      "得意先住所2（Ship To）
**** START ADD 2014/12/24 ISID11 ****
ZTEGSDT001~Z_ADDRESS3_ST      "得意先住所3（Ship To）
ZTEGSDT001~Z_ADDRESS4_ST      "得意先住所4（Ship To）
**** END ADD 2014/12/24 ISID11 ****
ZTEGSDT001~Z_ATTN_ST          "得意先担当者（Ship To）
ZTEGSDT001~Z_TEL_ST           "得意先電話番号（Ship To）
ZTEGSDT001~Z_FAX_ST           "得意先FAX（Ship To）
ZTEGSDT001~Z_SHIPPED_PER      "Shipped Per
ZTEGSDT001~Z_ON_OR_ABOUT      "On or About
ZTEGSDT001~Z_TRADE_FROM       "From
ZTEGSDT001~Z_TRADE_TO         "To
ZTEGSDT001~Z_TRADE_VIA        "Via
**** START UPD 2015/02/11 ISID11 ****
*    ZTEGSDT001~Z_TRADE_PAYMENT    "Payment
ZTEGSDT001~ZTERM    "Payment
**** END UPD 2015/02/11 ISID11 ****
ZTEGSDT001~Z_TRADE_TERM       "Trade Term
ZTEGSDT001~Z_INV_REMARKS1     "Remarks (1)
ZTEGSDT001~Z_INV_REMARKS2     "Remarks (2)
ZTEGSDT001~Z_INV_REMARKS3     "Remarks (3)
ZTEGSDT001~Z_INV_REMARKS4     "Remarks (4)
ZTEGSDT001~Z_INV_REMARKS5     "Remarks (5)
ZTEGSDT001~Z_CASEMARK1        "Case Mark (1)
ZTEGSDT001~Z_CASEMARK2        "Case Mark (2)
ZTEGSDT001~Z_CASEMARK3        "Case Mark (3)
ZTEGSDT001~Z_CASEMARK4        "Case Mark (4)
ZTEGSDT001~Z_CASEMARK5        "Case Mark (5)
ZTEGSDT004~Z_SI_NO            "S/I No
ZTEGSDT001~Z_CRE_YMD_INV      "登録年月日
ZTEGSDT001~Z_CRE_HMS_INV      "登録時分秒
ZTEGSDT001~Z_CRE_USERID_INV   "ユーザマスタレコードのユーザ名
ZTEGSDT001~Z_MOD_YMD_INV      "更新年月日
ZTEGSDT001~Z_MOD_HMS_INV      "更新時分秒
ZTEGSDT001~Z_MOD_USERID_INV   "ユーザマスタレコードのユーザ名
**** START ADD 2015/02/27 ISID11 ****
ZTEGSDT004~Z_INVOICE_NO AS Z_INVOICE_NO_CHK  "Invoice No
**** END ADD 2015/02/27 ISID11 ****
FROM ZTEGSDT001
INNER JOIN LIKP
ON ZTEGSDT001~VBELN = LIKP~VBELN
**** START ADD 2015/02/11 ISID11 ****
AND ZTEGSDT001~ERDAT = LIKP~ERDAT
**** END ADD 2015/02/11 ISID11 ****
LEFT JOIN ZTEGSDT004
ON ZTEGSDT001~Z_INVOICE_NO = ZTEGSDT004~Z_INVOICE_NO
INTO TABLE LTD_ZT001
WHERE ZTEGSDT001~Z_SOURCE_TYPE = CNS_STYP1
AND LIKP~VSTEL                  IN S_SHIPPT
AND LIKP~WADAT                  IN S_PLANED
AND LIKP~KUNNR                  IN S_SHIPTO
AND LIKP~KUNAG                  IN S_SOLDTO
AND LIKP~VBELN                  IN S_OUTBD
AND ZTEGSDT001~Z_INVOICE_NO     IN S_INVNO
AND ZTEGSDT001~Z_INVOICE_DATE   IN S_INVDT
AND ZTEGSDT001~Z_CUST_NAME_BT   IN S_BTC
AND ZTEGSDT001~Z_CUST_NAME_ST   IN S_STC
AND ZTEGSDT001~Z_SHIPPED_PER    IN S_SHPPER
AND ZTEGSDT001~Z_CRE_YMD_INV    IN S_CRTEDT
AND ZTEGSDT001~Z_CRE_HMS_INV    IN S_CRTETM
AND ZTEGSDT001~Z_CRE_USERID_INV IN S_CRTEUS
AND ZTEGSDT001~Z_MOD_YMD_INV    IN S_MDFDT
AND ZTEGSDT001~Z_MOD_HMS_INV    IN S_MDFTM
AND ZTEGSDT001~Z_MOD_USERID_INV IN S_MDFUSR.

IF SY-SUBRC <> 0.
MESSAGE I006(ZMEGSD01) WITH TEXT-E02 DISPLAY LIKE CNS_MSG_E.
LEAVE LIST-PROCESSING.
ENDIF.

**** START ADD 2015/02/27 ISID11 ****
DELETE LTD_ZT001 WHERE Z_INVOICE_NO_CHK IS NOT INITIAL.
IF LTD_ZT001 IS INITIAL.
MESSAGE I006(ZMEGSD01) WITH TEXT-E02 DISPLAY LIKE CNS_MSG_E.
LEAVE LIST-PROCESSING.
ENDIF.
**** END ADD 2015/02/27 ISID11 ****

**** START DEL 2015/02/27 ISID11 ****
* Get B/L date
*  LTD_ZT001T = LTD_ZT001.
*  SORT LTD_ZT001T BY Z_SI_NO ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM LTD_ZT001T COMPARING Z_SI_NO.
*
*  IF LTD_ZT001T IS NOT INITIAL.
*    SELECT Z_SI_NO
*           Z_BL_DATE
*      FROM ZTEGSDT003
*      INTO TABLE LTD_ZT003
*      FOR ALL ENTRIES IN LTD_ZT001T
*     WHERE Z_SI_NO = LTD_ZT001T-Z_SI_NO.
*  ENDIF.
* 未紐づけのデータのみの抽出となる
**** END DEL 2015/02/27 ISID11 ****

LOOP AT LTD_ZT001 INTO LST_ZT001.
MOVE-CORRESPONDING LST_ZT001 TO LST_ZT001O.
**** START DEL 2015/02/27 ISID11 ****
*    READ TABLE LTD_ZT003 BINARY SEARCH INTO LST_ZT003
*      WITH KEY Z_SI_NO = LST_ZT001-Z_SI_NO.
*    IF SY-SUBRC = 0.
*      LST_ZT001O-Z_BL_DATE = LST_ZT003-Z_BL_DATE.
*    ENDIF.
**** END DEL 2015/02/27 ISID11 ****
APPEND LST_ZT001O TO I_TD_ZT001.
CLEAR:
LST_ZT001,
LST_ZT001O.
ENDLOOP.

SORT I_TD_ZT001 BY VSTEL ASCENDING  "ShippingPt
WADAT ASCENDING  "Planed GI
KUNNR ASCENDING  "Ship-to party
VBELN ASCENDING. "Outbound Delivery

ENDFORM.                    " GET_FROM_OD

*&---------------------------------------------------------------------*
*&      Form  GET_FROM_ED
*&---------------------------------------------------------------------*
*       Invoiceデータ取得:「External Data」が選択
*----------------------------------------------------------------------*
FORM GET_FROM_ED CHANGING I_TD_ZT001 TYPE TYP_TD_ZT001.
DATA:
LTD_ZT001   TYPE TYP_TD_ZT001T,
LTD_ZT001T  TYPE TYP_TD_ZT001T,
**** START DEL 2015/02/27 ISID11 ****
*    LTD_ZT003   TYPE TYP_TD_SIND,
*    LST_ZT003   TYPE TYP_SIND,
**** END DEL 2015/02/27 ISID11 ****
LST_ZT001   TYPE TYP_ZT001T,
LST_ZT001O  TYPE TYP_ZT001.

SELECT
ZTEGSDT001~Z_SOURCE_TYPE      "ソースタイプ
ZTEGSDT010~VSTEL              "ShippingPt
ZTEGSDT010~WADAT              "Planed GI
ZTEGSDT010~KUNAG              "Sold-to party
ZTEGSDT010~KUNNR              "Ship-to party
ZTEGSDT010~VBELN              "出荷伝票(Outbound Delivery)
ZTEGSDT010~ERDAT              "レコード登録日
ZTEGSDT010~ERNAM              "登録者
ZTEGSDT001~Z_INVOICE_NO       "Invoice No
ZTEGSDT001~Z_INVOICE_DATE     "Invoice Date
ZTEGSDT001~Z_STATUS_INVOICE   "ステータス（Invoice）
ZTEGSDT001~Z_CUST_BT          "得意先（Bill To）
ZTEGSDT001~Z_CUST_NAME_BT     "得意先名（Bill To）
ZTEGSDT001~Z_ADDRESS1_BT      "得意先住所1（Bill To）
ZTEGSDT001~Z_ADDRESS2_BT      "得意先住所2（Bill To）
**** START ADD 2014/12/24 ISID11 ****
ZTEGSDT001~Z_ADDRESS3_BT      "得意先住所3（Bill To）
ZTEGSDT001~Z_ADDRESS4_BT      "得意先住所4（Bill To）
**** END ADD 2014/12/24 ISID11 ****
ZTEGSDT001~Z_ATTN_BT          "得意先担当者（Bill To）
ZTEGSDT001~Z_TEL_BT           "得意先電話番号（Bill To）
ZTEGSDT001~Z_FAX_BT           "得意先FAX（Bill To）
ZTEGSDT001~Z_CUST_ST          "得意先（Ship To）
ZTEGSDT001~Z_CUST_NAME_ST     "得意先名（Ship To）
ZTEGSDT001~Z_ADDRESS1_ST      "得意先住所1（Ship To）
ZTEGSDT001~Z_ADDRESS2_ST      "得意先住所2（Ship To）
**** START ADD 2014/12/24 ISID11 ****
ZTEGSDT001~Z_ADDRESS3_ST      "得意先住所3（Ship To）
ZTEGSDT001~Z_ADDRESS4_ST      "得意先住所4（Ship To）
**** END ADD 2014/12/24 ISID11 ****
ZTEGSDT001~Z_ATTN_ST          "得意先担当者（Ship To）
ZTEGSDT001~Z_TEL_ST           "得意先電話番号（Ship To）
ZTEGSDT001~Z_FAX_ST           "得意先FAX（Ship To）
ZTEGSDT001~Z_SHIPPED_PER      "Shipped Per
ZTEGSDT001~Z_ON_OR_ABOUT      "On or About
ZTEGSDT001~Z_TRADE_FROM       "From
ZTEGSDT001~Z_TRADE_TO         "To
ZTEGSDT001~Z_TRADE_VIA        "Via
**** START UPD 2015/02/11 ISID11 ****
*    ZTEGSDT001~Z_TRADE_PAYMENT    "Payment
ZTEGSDT001~ZTERM              "Payment
**** END UPD 2015/02/11 ISID11 ****
ZTEGSDT001~Z_TRADE_TERM       "Trade Term
ZTEGSDT001~Z_INV_REMARKS1     "Remarks (1)
ZTEGSDT001~Z_INV_REMARKS2     "Remarks (2)
ZTEGSDT001~Z_INV_REMARKS3     "Remarks (3)
ZTEGSDT001~Z_INV_REMARKS4     "Remarks (4)
ZTEGSDT001~Z_INV_REMARKS5     "Remarks (5)
ZTEGSDT001~Z_CASEMARK1        "Case Mark (1)
ZTEGSDT001~Z_CASEMARK2        "Case Mark (2)
ZTEGSDT001~Z_CASEMARK3        "Case Mark (3)
ZTEGSDT001~Z_CASEMARK4        "Case Mark (4)
ZTEGSDT001~Z_CASEMARK5        "Case Mark (5)
ZTEGSDT004~Z_SI_NO            "S/I No
ZTEGSDT001~Z_CRE_YMD_INV      "登録年月日
ZTEGSDT001~Z_CRE_HMS_INV      "登録時分秒
ZTEGSDT001~Z_CRE_USERID_INV   "ユーザマスタレコードのユーザ名
ZTEGSDT001~Z_MOD_YMD_INV      "更新年月日
ZTEGSDT001~Z_MOD_HMS_INV      "更新時分秒
ZTEGSDT001~Z_MOD_USERID_INV   "ユーザマスタレコードのユーザ名
**** START ADD 2015/02/27 ISID11 ****
ZTEGSDT004~Z_INVOICE_NO AS Z_INVOICE_NO_CHK  "Invoice No
**** END ADD 2015/02/27 ISID11 ****
FROM ZTEGSDT001
INNER JOIN ZTEGSDT010
ON ZTEGSDT001~VBELN = ZTEGSDT010~VBELN
LEFT JOIN ZTEGSDT004
ON ZTEGSDT001~Z_INVOICE_NO = ZTEGSDT004~Z_INVOICE_NO
INTO TABLE LTD_ZT001
WHERE ZTEGSDT001~Z_SOURCE_TYPE = CNS_STYP2
AND ZTEGSDT010~VSTEL            IN S_SHIPPT
AND ZTEGSDT010~WADAT            IN S_PLANED
AND ZTEGSDT010~KUNNR            IN S_SHIPTO
AND ZTEGSDT010~KUNAG            IN S_SOLDTO
AND ZTEGSDT010~VBELN            IN S_OUTBD
AND ZTEGSDT001~Z_INVOICE_NO     IN S_INVNO
AND ZTEGSDT001~Z_INVOICE_DATE   IN S_INVDT
AND ZTEGSDT001~Z_CUST_NAME_BT   IN S_BTC
AND ZTEGSDT001~Z_CUST_NAME_ST   IN S_STC
AND ZTEGSDT001~Z_SHIPPED_PER    IN S_SHPPER
AND ZTEGSDT001~Z_CRE_YMD_INV    IN S_CRTEDT
AND ZTEGSDT001~Z_CRE_HMS_INV    IN S_CRTETM
AND ZTEGSDT001~Z_CRE_USERID_INV IN S_CRTEUS
AND ZTEGSDT001~Z_MOD_YMD_INV    IN S_MDFDT
AND ZTEGSDT001~Z_MOD_HMS_INV    IN S_MDFTM
AND ZTEGSDT001~Z_MOD_USERID_INV IN S_MDFUSR.

IF SY-SUBRC <> 0.
MESSAGE I006(ZMEGSD01) WITH TEXT-E02 DISPLAY LIKE CNS_MSG_E.
LEAVE LIST-PROCESSING.
ENDIF.

**** START ADD 2015/02/27 ISID11 ****
DELETE LTD_ZT001 WHERE Z_INVOICE_NO_CHK IS NOT INITIAL.
IF LTD_ZT001 IS INITIAL.
MESSAGE I006(ZMEGSD01) WITH TEXT-E02 DISPLAY LIKE CNS_MSG_E.
LEAVE LIST-PROCESSING.
ENDIF.
**** END ADD 2015/02/27 ISID11 ****

**** START DEL 2015/02/27 ISID11 ****
* Get B/L date
*  LTD_ZT001T = LTD_ZT001.
*  SORT LTD_ZT001T BY Z_SI_NO ASCENDING.
*  DELETE ADJACENT DUPLICATES FROM LTD_ZT001T COMPARING Z_SI_NO.
*
*  IF LTD_ZT001T IS NOT INITIAL.
*    SELECT Z_SI_NO
*           Z_BL_DATE
*      FROM ZTEGSDT003
*      INTO TABLE LTD_ZT003
*      FOR ALL ENTRIES IN LTD_ZT001T
*     WHERE Z_SI_NO = LTD_ZT001T-Z_SI_NO.
*  ENDIF.
* 未紐づけのデータのみの抽出となる
**** END DEL 2015/02/27 ISID11 ****

LOOP AT LTD_ZT001 INTO LST_ZT001.
MOVE-CORRESPONDING LST_ZT001 TO LST_ZT001O.
**** START DEL 2015/02/27 ISID11 ****
*    READ TABLE LTD_ZT003 BINARY SEARCH INTO LST_ZT003
*      WITH KEY Z_SI_NO = LST_ZT001-Z_SI_NO.
*    IF SY-SUBRC = 0.
*      LST_ZT001O-Z_BL_DATE = LST_ZT003-Z_BL_DATE.
*    ENDIF.
**** END DEL 2015/02/27 ISID11 ****
APPEND LST_ZT001O TO I_TD_ZT001.
CLEAR:
LST_ZT001,
LST_ZT001O.
ENDLOOP.

SORT I_TD_ZT001 BY VSTEL ASCENDING  "ShippingPt
WADAT ASCENDING  "Planed GI
KUNNR ASCENDING  "Ship-to party
VBELN ASCENDING. "Outbound Delivery

ENDFORM.                    " GET_FROM_ED

*&---------------------------------------------------------------------*
*&      Form  GET_KNA1
*&---------------------------------------------------------------------*
*       D-2-2．テキスト取得
*----------------------------------------------------------------------*
*      -->i_TD_ZT001 Invoice data
*      <--o_TD_INV   Invoice ALV data
*----------------------------------------------------------------------*
FORM GET_KNA1  USING    I_TD_ZT001  TYPE TYP_TD_ZT001
CHANGING O_TD_INV    TYPE TYP_TD_INV.
TYPES:
BEGIN OF LTYP_KNA1,
KUNNR TYPE KUNNR,
NAME1 TYPE NAME1_GP,
END OF LTYP_KNA1.

DATA:
LTD_ZT001 TYPE TYP_TD_ZT001,
LTD_KNA1  TYPE STANDARD TABLE OF LTYP_KNA1,
LTD_KNA1N TYPE STANDARD TABLE OF LTYP_KNA1,
LST_ZT001 TYPE TYP_ZT001,
LST_KNA1  TYPE LTYP_KNA1,
LST_INV   TYPE ZSEGSD0004.

LTD_ZT001 = I_TD_ZT001.

SORT LTD_ZT001 BY KUNAG ASCENDING
KUNNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_ZT001
COMPARING KUNAG KUNNR.

LOOP AT LTD_ZT001 INTO LST_ZT001.
READ TABLE LTD_KNA1 BINARY SEARCH
INTO LST_KNA1 WITH KEY KUNNR = LST_ZT001-KUNAG.
IF SY-SUBRC <> 0.
LST_KNA1-KUNNR = LST_ZT001-KUNAG.
APPEND LST_KNA1 TO LTD_KNA1.
CLEAR LST_KNA1.
ENDIF.

READ TABLE LTD_KNA1 BINARY SEARCH
INTO LST_KNA1 WITH KEY KUNNR = LST_ZT001-KUNNR.
IF SY-SUBRC <> 0.
LST_KNA1-KUNNR = LST_ZT001-KUNNR.
APPEND LST_KNA1 TO LTD_KNA1.
CLEAR LST_KNA1.
ENDIF.
ENDLOOP.

SORT LTD_KNA1 BY KUNNR ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_KNA1 COMPARING KUNNR.
IF LTD_KNA1 IS NOT INITIAL.
SELECT KUNNR
NAME1
FROM KNA1
INTO TABLE LTD_KNA1N
FOR ALL ENTRIES IN LTD_KNA1
WHERE KUNNR = LTD_KNA1-KUNNR.
ENDIF.
SORT LTD_KNA1N BY KUNNR ASCENDING.

CLEAR LST_ZT001.
LOOP AT I_TD_ZT001 INTO LST_ZT001.

MOVE-CORRESPONDING LST_ZT001 TO LST_INV.

*   Sold-to party
LST_INV-Z_SOLD_TO_PARTY  = LST_ZT001-KUNAG.

*   Ship-to party
LST_INV-Z_SHIP_TO_PARTY  = LST_ZT001-KUNNR.

*   Customer(Bill To)
LST_INV-Z_CUST_BILLTO    = LST_ZT001-Z_CUST_BT.

*   Customer Name(Bill To)
LST_INV-Z_CUST_NAME_BILL = LST_ZT001-Z_CUST_NAME_BT.

*   Address1(Bill To)
LST_INV-Z_ADDRESS1_BILLT = LST_ZT001-Z_ADDRESS1_BT.

*   Address2(Bill To)
LST_INV-Z_ADDRESS2_BILLT = LST_ZT001-Z_ADDRESS2_BT.

**** START ADD 2014/12/24 ISID11 ****
*   Address3(Bill To)
LST_INV-Z_ADDRESS3_BILLT = LST_ZT001-Z_ADDRESS3_BT.

*   Address4(Bill To)
LST_INV-Z_ADDRESS4_BILLT = LST_ZT001-Z_ADDRESS4_BT.
**** END ADD 2014/12/24 ISID11 ****

*   Attn(Bill To)
LST_INV-Z_ATTN_BILLTO    = LST_ZT001-Z_ATTN_BT.

*   Tel(Bill To)
LST_INV-Z_TEL_BILLTO     = LST_ZT001-Z_TEL_BT.

*   Fax(Bill To)
LST_INV-Z_FAX_BILLTO     = LST_ZT001-Z_FAX_BT.

*   Customer(Ship To)
LST_INV-Z_CUST_SHIPTO    = LST_ZT001-Z_CUST_ST.

*   Customer Name(Ship To)
LST_INV-Z_CUST_NAME_SHIP = LST_ZT001-Z_CUST_NAME_ST.

*   Address1(Ship To)
LST_INV-Z_ADDRESS1_SHIPT = LST_ZT001-Z_ADDRESS1_ST.

*   Address2(Ship To)
LST_INV-Z_ADDRESS2_SHIPT = LST_ZT001-Z_ADDRESS2_ST.

**** START ADD 2014/12/24 ISID11 ****
*   Address3(Ship To)
LST_INV-Z_ADDRESS3_SHIPT = LST_ZT001-Z_ADDRESS3_ST.

*   Address4(Ship To)
LST_INV-Z_ADDRESS4_SHIPT = LST_ZT001-Z_ADDRESS4_ST.
**** END ADD 2014/12/24 ISID11 ****

*   Attn(Ship To)
LST_INV-Z_ATTN_SHIPTO    = LST_ZT001-Z_ATTN_ST.

*   Tel(Ship To)
LST_INV-Z_TEL_SHIPTO     = LST_ZT001-Z_TEL_ST.

*   Fax(Ship To)
LST_INV-Z_FAX_SHIPTO     = LST_ZT001-Z_FAX_ST.

*   Remarks (1)
LST_INV-Z_INV_REMARK1    = LST_ZT001-Z_INV_REMARKS1.

*   Remarks (2)
LST_INV-Z_INV_REMARK2    = LST_ZT001-Z_INV_REMARKS2.

*   Remarks (3)
LST_INV-Z_INV_REMARK3    = LST_ZT001-Z_INV_REMARKS3.

*   Remarks (4)
LST_INV-Z_INV_REMARK4    = LST_ZT001-Z_INV_REMARKS4.

*   Remarks (5)
LST_INV-Z_INV_REMARK5    = LST_ZT001-Z_INV_REMARKS5.

*   Create Date
LST_INV-Z_CRE_YMD_INVOIC = LST_ZT001-Z_CRE_YMD_INV.

*   Create Time
LST_INV-Z_CRE_HMS_INVOIC = LST_ZT001-Z_CRE_HMS_INV.

*   Modify Date
LST_INV-Z_MOD_YMD_INVOIC = LST_ZT001-Z_MOD_YMD_INV.

*   Modify Time
LST_INV-Z_MOD_HMS_INVOIC = LST_ZT001-Z_MOD_HMS_INV.

*   Sold-to party Name
READ TABLE LTD_KNA1N INTO LST_KNA1 BINARY SEARCH
WITH KEY KUNNR = LST_INV-Z_SOLD_TO_PARTY.
IF SY-SUBRC = 0.
LST_INV-Z_SOLD_TO_NAME = LST_KNA1-NAME1.
CLEAR LST_KNA1.
ENDIF.

*   Ship-to party Name
READ TABLE LTD_KNA1N INTO LST_KNA1 BINARY SEARCH
WITH KEY KUNNR = LST_INV-Z_SHIP_TO_PARTY.
IF SY-SUBRC = 0.
LST_INV-Z_SHIP_TO_NAME = LST_KNA1-NAME1.
CLEAR LST_KNA1.
ENDIF.

APPEND LST_INV TO O_TD_INV.
CLEAR:
LST_INV.
ENDLOOP.

SORT O_TD_INV BY VSTEL  ASCENDING           "ShippingPt
WADAT  ASCENDING           "Planed GI
Z_SHIP_TO_PARTY ASCENDING  "Ship-to party
VBELN  ASCENDING.          "Outbound Delivery

DELETE ADJACENT DUPLICATES FROM O_TD_INV COMPARING VBELN.

ENDFORM.                    " GET_KNA1

*&---------------------------------------------------------------------*
*&      Module  STATUS_3500  OUTPUT
*&---------------------------------------------------------------------*
*       画面3500のステータスの設定
*----------------------------------------------------------------------*
MODULE STATUS_3500 OUTPUT.
SET PF-STATUS 'ST_3500'.
SET TITLEBAR 'T_3500'.

PERFORM DIS_INV_ALV.

ENDMODULE.                 " STATUS_3500  OUTPUT

*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_3500  INPUT
*&---------------------------------------------------------------------*
*       画面3500のボタンイベント処理
*----------------------------------------------------------------------*
MODULE USER_COMMAND_3500 INPUT.

W_CODE = OK_CODE.
CASE W_CODE.
WHEN CNS_EXC5.
PERFORM PROCESS_EXE5.
LEAVE TO SCREEN 0.
WHEN CNS_NO5 OR
CNS_CANC5.
LEAVE TO SCREEN 0.
WHEN OTHERS.
ENDCASE.

ENDMODULE.                 " USER_COMMAND_3500  INPUT

*&---------------------------------------------------------------------*
*&      Module  EXIT_3500  INPUT
*&---------------------------------------------------------------------*
*       画面3500のEXITイベント処理
*----------------------------------------------------------------------*
MODULE EXIT_3500 INPUT.
W_CODE = OK_CODE.
LEAVE TO SCREEN 0.
ENDMODULE.                 " EXIT_3500  INPUT

*&---------------------------------------------------------------------*
*&      Form  DIS_INV_ALV
*&---------------------------------------------------------------------*
*       Display Invoice ALV
*----------------------------------------------------------------------*
FORM DIS_INV_ALV .

DATA:
LTD_EXCLUDE  TYPE UI_FUNCTIONS,
LST_VARIANT  TYPE DISVARIANT,
LST_FIELDCAT TYPE LVC_S_FCAT,
LTD_FIELDCAT TYPE LVC_T_FCAT,
LW_SAVE      TYPE C,
LST_LAYOUT   TYPE LVC_S_LAYO.     "slis_layout_alv

* fielcat 属性の設定
CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
EXPORTING
I_STRUCTURE_NAME       = CNS_INV_ALV
CHANGING
CT_FIELDCAT            = LTD_FIELDCAT
EXCEPTIONS
INCONSISTENT_INTERFACE = 1
PROGRAM_ERROR          = 2
OTHERS                 = 3.
IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE CNS_MSG_S NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE CNS_MSG_E.
LEAVE LIST-PROCESSING.
ENDIF.

LOOP AT LTD_FIELDCAT INTO LST_FIELDCAT.
IF SY-TABIX = 1.
LST_FIELDCAT-CHECKBOX = ABAP_ON.
LST_FIELDCAT-NO_OUT   = ABAP_ON.
**** START DEL 2015/02/02 ISID11 ****
*      lst_fieldcat-edit     = abap_on.
**** END DEL 2015/02/02 ISID11 ****
ENDIF.

**** START UPD 2015/02/11 ISID11 ****
CASE LST_FIELDCAT-FIELDNAME.
WHEN 'TRADEDOCTYPE'.

LST_FIELDCAT-NO_OUT = ABAP_ON.

WHEN OTHERS.

ENDCASE.
**** END UPD 2015/02/11 ISID11 ****

LST_FIELDCAT-COLTEXT = LST_FIELDCAT-SCRTEXT_L.
MODIFY LTD_FIELDCAT FROM LST_FIELDCAT INDEX SY-TABIX.
ENDLOOP.

* LAYOUT の設定
LST_LAYOUT-CWIDTH_OPT = ABAP_ON.
LST_LAYOUT-ZEBRA      = ABAP_ON.
LST_LAYOUT-BOX_FNAME  = CNS_CHKBX.
**** START ADD 2015/02/05 ISID11 ****
LST_LAYOUT-SEL_MODE   = 'A'.
**** END ADD 2015/02/05 ISID11 ****
LW_SAVE = CNS_SAVE_A.

PERFORM EXCLUDE_TB_FUNCTIONS CHANGING LTD_EXCLUDE.
LST_VARIANT-REPORT  = SY-REPID.

IF CI_CCONTAINER_I IS INITIAL.
*   コントロールの創建
CREATE OBJECT CI_CCONTAINER_I
EXPORTING
CONTAINER_NAME              = CI_CUSTOM_CONTROL_NAME_I
EXCEPTIONS
CNTL_ERROR                  = 1
CNTL_SYSTEM_ERROR           = 2
CREATE_ERROR                = 3
LIFETIME_ERROR              = 4
LIFETIME_DYNPRO_DYNPRO_LINK = 5
OTHERS                      = 6.

IF SY-SUBRC = 0.
*     ALVインスタント
CREATE OBJECT CI_ALV_I
EXPORTING
I_PARENT          = CI_CCONTAINER_I
EXCEPTIONS
ERROR_CNTL_CREATE = 1
ERROR_CNTL_INIT   = 2
ERROR_CNTL_LINK   = 3
ERROR_DP_CREATE   = 4
OTHERS            = 5.

ELSE.
MESSAGE ID SY-MSGID TYPE CNS_MSG_I NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE CNS_MSG_E.

LEAVE TO SCREEN 0.
ENDIF.

CALL METHOD CI_ALV_I->SET_TABLE_FOR_FIRST_DISPLAY
EXPORTING
IS_VARIANT                    = LST_VARIANT
IS_LAYOUT                     = LST_LAYOUT
IT_TOOLBAR_EXCLUDING          = LTD_EXCLUDE
I_SAVE                        = LW_SAVE
CHANGING
IT_OUTTAB                     = TD_INV
IT_FIELDCATALOG               = LTD_FIELDCAT
EXCEPTIONS
INVALID_PARAMETER_COMBINATION = 1
PROGRAM_ERROR                 = 2
TOO_MANY_LINES                = 3
OTHERS                        = 4.

IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE CNS_MSG_I NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE CNS_MSG_E.

LEAVE TO SCREEN 0.
ENDIF.

ELSE.
*     リフレッシュ
CALL METHOD CI_ALV_I->REFRESH_TABLE_DISPLAY
EXCEPTIONS
FINISHED = 1
OTHERS   = 2.

IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE CNS_MSG_I NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
DISPLAY LIKE CNS_MSG_E.

LEAVE TO SCREEN 0.
ENDIF.
ENDIF.

ENDFORM.                    " DIS_INV_ALV

*&---------------------------------------------------------------------*
*&      Form  PROCESS_EXE5
*&---------------------------------------------------------------------*
*       Process for executive
*----------------------------------------------------------------------*
FORM PROCESS_EXE5 .
DATA:
LW_CNT            TYPE SY-INDEX,
LW_CNT_T          TYPE SY-INDEX,
LW_CNT_I          TYPE SY-INDEX,
LW_KUNAG          TYPE KUNAG,
LW_KUNNR          TYPE KUNWE,
LW_ADRNR          TYPE ADRNR,
**** START UPD 2014/12/26 ISID11 ****
*    lw_name1          TYPE ad_name1,
*    lw_street         TYPE ad_street,
*    lw_city1          TYPE ad_city1,
*    lw_teln           TYPE ad_tlnmbr1,
*    lw_faxn           TYPE ad_fxnmbr1,
LST_ADRC          TYPE ZSEGZZ0002,
LW_SUBRC          TYPE SY-SUBRC,
**** END UPD 2014/12/26 ISID11 ****
LST_INV           TYPE ZSEGSD0004,
LST_ZT004C        TYPE TYP_ZT004C,
**** START ADD 2015/02/11 ISID11 ****
LTD_ZT004LOCK     TYPE TYP_TD_ZT004C,
**** END ADD 2015/02/11 ISID11 ****
LTD_ZT004C        TYPE TYP_TD_ZT004,
LTD_ET_INDEX_ROWS TYPE LVC_T_ROW,
LSD_ET_INDEX_ROWS TYPE LVC_S_ROW,
LTD_INV_SEL       TYPE TYP_TD_INV.         "Selected Inv.

* D-4-3-1．行選択のチェック処理
CALL METHOD CI_ALV_I->GET_SELECTED_ROWS
IMPORTING
ET_INDEX_ROWS = LTD_ET_INDEX_ROWS.

DESCRIBE TABLE LTD_ET_INDEX_ROWS LINES LW_CNT.

IF LW_CNT = 0.
*   行が選択されていない場合
MESSAGE E008(ZMEGSD01).
*   行が選択されていません。
ENDIF.

DESCRIBE TABLE TD_ZT004C LINES W_INV_N.
LW_CNT_T = LW_CNT + W_INV_N.
IF LW_CNT_T > 30.
MESSAGE E052(ZMEGSD01) WITH LW_CNT.
*   最大で30行までしか選択できません。（選択行数 = lw_cnt）
ENDIF.

LOOP AT LTD_ET_INDEX_ROWS INTO LSD_ET_INDEX_ROWS.
CLEAR: LW_CNT.
LW_CNT = LSD_ET_INDEX_ROWS-INDEX.
**** START ADD 2015/02/05 ISID11 ****
CLEAR LST_INV.
**** END ADD 2015/02/05 ISID11 ****
READ TABLE TD_INV INTO LST_INV INDEX LW_CNT.
**** START ADD 2015/02/02 ISID11 ****
**** START ADD 2015/02/05 ISID11 ****
CLEAR LST_ZT004C.
**** END ADD 2015/02/05 ISID11 ****
READ TABLE TD_ZT004C INTO LST_ZT004C
WITH KEY Z_INVOICE_NO = LST_INV-Z_INVOICE_NO
BINARY SEARCH.
**** END ADD 2015/02/02 ISID11 ****
IF LST_INV-Z_SI_NO IS NOT INITIAL
**** START ADD 2015/02/02 ISID11 ****
AND LST_INV-Z_SI_NO <> ST_S016-Z_SI_NO
OR ( LST_ZT004C-Z_INVOICE_NO = LST_INV-Z_INVOICE_NO
AND LST_ZT004C-Z_INVOICE_NO IS NOT INITIAL ).
**** END ADD 2015/02/02 ISID11 ****
REFRESH LTD_ZT004C.
MESSAGE E056(ZMEGSD01).
*     選択行の中に、別のS/I Noと紐づいているInvoice Noがあります。
ENDIF.
APPEND LST_INV TO LTD_INV_SEL.

LST_ZT004C-Z_INVOICE_NO = LST_INV-Z_INVOICE_NO.
APPEND LST_ZT004C TO LTD_ZT004C.

**** START ADD 2015/02/11 ISID11 ****
READ TABLE TD_ZT004I TRANSPORTING NO FIELDS
WITH KEY Z_INVOICE_NO = LST_ZT004C-Z_INVOICE_NO
BINARY SEARCH.

IF SY-SUBRC <> 0.

APPEND LST_ZT004C TO LTD_ZT004LOCK.

ENDIF.
**** END ADD 2015/02/11 ISID11 ****

ENDLOOP.

**** START ADD 2015/02/11 ISID11 ****
* ZTEGSDT004をロックする
PERFORM LOCK_ZT004 USING LTD_ZT004LOCK
SPACE
SPACE.
**** END ADD 2015/02/11 ISID11 ****

LW_CNT_I = W_INV_N.
LOOP AT LTD_ZT004C INTO LST_ZT004C.
READ TABLE TD_ZT004C TRANSPORTING NO FIELDS
WITH KEY Z_INVOICE_NO = LST_ZT004C-Z_INVOICE_NO.
IF SY-SUBRC <> 0.
LW_CNT_I = LW_CNT_I + 1.
LST_ZT004C-NO = LW_CNT_I.
APPEND LST_ZT004C TO TD_ZT004C.
ENDIF.
ENDLOOP.

* D-4-3-3．Invoiceの引継ぎ可能情報の設定
* 「遷移元画面で入力済みの行数が０行」の場合のみ、以下の処理を行う。

SORT TD_ZT004C BY Z_INVOICE_NO ASCENDING.
CLEAR LST_ZT004C.
LOOP AT TD_ZT004C INTO LST_ZT004C.
LST_ZT004C-NO = SY-TABIX.
MODIFY TD_ZT004C FROM LST_ZT004C
INDEX SY-TABIX TRANSPORTING NO.
ENDLOOP.

SORT LTD_INV_SEL BY Z_INVOICE_NO ASCENDING.
CLEAR LST_INV.
READ TABLE LTD_INV_SEL INTO LST_INV INDEX 1.
**** START ADD 2015/05/31 ISID18 ****
* ShippingPtの設定
IF ST_S016-VSTEL IS INITIAL.
ST_S016-VSTEL = LST_INV-VSTEL.
ENDIF.
**** END ADD 2015/05/31 ISID18 ****
SELECT SINGLE KUNNR
KUNAG
FROM LIKP
INTO (LW_KUNNR,LW_KUNAG)
WHERE VBELN = LST_INV-VBELN.

* D-4-3-4．Customer(Notify)情報の設定
IF ST_S016-Z_CUST_CNEE IS INITIAL .
ST_S016-Z_CUST_CNEE = LW_KUNNR.
SELECT ADRNR
UP TO 1 ROWS
FROM VBPA
INTO LW_ADRNR
WHERE VBELN = LST_INV-VBELN
AND PARVW = CNS_PARVW_SP.
ENDSELECT.
IF SY-SUBRC = 0.

**** START UPD 2014/12/26 ISID11 ****
*      SELECT name1
*             street
*             city1
*             tel_number
*             fax_number
*        UP TO 1 ROWS
*        FROM adrc
*        INTO (lw_name1,lw_street,lw_city1,lw_teln,lw_faxn)
*       WHERE addrnumber = lw_adrnr.
*      ENDSELECT.

CLEAR:
LST_ADRC,
LW_SUBRC.

CALL FUNCTION 'ZEG_ZZ_ADRC_GET'
EXPORTING
IMPMULTITFLG  = '1'
IMPADDRNUMBER = LW_ADRNR
IMPORTING
EXPADRC       = LST_ADRC
EXPSUBRC      = LW_SUBRC.

IF LW_SUBRC = 0.

ST_S016-Z_CUST_NAME_NTFY = LST_ADRC-Z_NAME.
ST_S016-Z_ADDRESS1_NTFY = LST_ADRC-Z_ADDRESS1.
ST_S016-Z_ADDRESS2_NTFY = LST_ADRC-Z_ADDRESS2.
ST_S016-Z_ADDRESS3_NTFY = LST_ADRC-Z_ADDRESS3.
ST_S016-Z_ADDRESS4_NTFY = LST_ADRC-Z_ADDRESS4.
ST_S016-Z_TEL_NTFY = LST_ADRC-TEL_NUMBER.
ST_S016-Z_FAX_NTFY = LST_ADRC-FAX_NUMBER.

ELSE.

CLEAR:
ST_S016-Z_CUST_NAME_NTFY,
ST_S016-Z_ADDRESS1_NTFY,
ST_S016-Z_ADDRESS2_NTFY,
ST_S016-Z_ADDRESS3_NTFY,
ST_S016-Z_ADDRESS4_NTFY,
ST_S016-Z_TEL_NTFY,
ST_S016-Z_FAX_NTFY.

ENDIF.
**** END UPD 2014/12/26 ISID11 ****

ENDIF.

**** START DEL 2014/12/26 ISID11 ****
*    st_s016-z_cust_name_ntfy = lw_name1.
*    st_s016-z_address1_ntfy = lw_street.
*    st_s016-z_address2_ntfy = lw_city1.
*    st_s016-z_tel_ntfy = lw_teln.
*    st_s016-z_fax_ntfy = lw_faxn.
**** START DEL 2014/12/26 ISID11 ****
CLEAR:
LW_ADRNR.
**** START DEL 2014/12/26 ISID11 ****
*      lw_name1,
*      lw_street,
*      lw_city1,
*      lw_teln,
*      lw_faxn.
**** START DEL 2014/12/26 ISID11 ****

ENDIF.

* D-4-3-5．Customer(CNEE)情報の設定
IF ST_S016-Z_CUST_NTFY IS INITIAL.
ST_S016-Z_CUST_NTFY = LW_KUNAG.
SELECT ADRNR
UP TO 1 ROWS
FROM VBPA
INTO LW_ADRNR
WHERE VBELN = LST_INV-VBELN
AND PARVW = CNS_PARVW_SH.
ENDSELECT.
IF SY-SUBRC = 0.

**** START UPD 2014/12/26 ISID11 ****
*      SELECT name1
*             street
*             city1
*             tel_number
*             fax_number
*        UP TO 1 ROWS
*        FROM adrc
*        INTO (lw_name1,lw_street,lw_city1,lw_teln,lw_faxn)
*       WHERE addrnumber = lw_adrnr.
*      ENDSELECT.

CLEAR:
LST_ADRC,
LW_SUBRC.

CALL FUNCTION 'ZEG_ZZ_ADRC_GET'
EXPORTING
IMPMULTITFLG  = '1'
IMPADDRNUMBER = LW_ADRNR
IMPORTING
EXPADRC       = LST_ADRC
EXPSUBRC      = LW_SUBRC.

IF LW_SUBRC = 0.

ST_S016-Z_CUST_NAME_CNEE = LST_ADRC-Z_NAME.
ST_S016-Z_ADDRESS1_CNEE = LST_ADRC-Z_ADDRESS1.
ST_S016-Z_ADDRESS2_CNEE = LST_ADRC-Z_ADDRESS2.
ST_S016-Z_ADDRESS3_CNEE = LST_ADRC-Z_ADDRESS3.
ST_S016-Z_ADDRESS4_CNEE = LST_ADRC-Z_ADDRESS4.
ST_S016-Z_TEL_CNEE = LST_ADRC-TEL_NUMBER.
ST_S016-Z_FAX_CNEE = LST_ADRC-FAX_NUMBER.

ELSE.

CLEAR:
ST_S016-Z_CUST_NAME_CNEE,
ST_S016-Z_ADDRESS1_CNEE,
ST_S016-Z_ADDRESS2_CNEE,
ST_S016-Z_ADDRESS3_CNEE,
ST_S016-Z_ADDRESS4_CNEE,
ST_S016-Z_TEL_CNEE,
ST_S016-Z_FAX_CNEE.

ENDIF.
**** END UPD 2014/12/26 ISID11 ****

ENDIF.
**** START DEL 2014/12/26 ISID11 ****
*    st_s016-z_cust_name_cnee = lw_name1.
*    st_s016-z_address1_cnee = lw_street.
*    st_s016-z_address2_cnee = lw_city1.
*    st_s016-z_tel_cnee = lw_teln.
*    st_s016-z_fax_cnee = lw_faxn.
**** END DEL 2014/12/26 ISID11 ****

CLEAR:
LW_ADRNR.
**** START DEL 2014/12/26 ISID11 ****
*      lw_name1,
*      lw_street,
*      lw_city1,
*      lw_teln,
*      lw_faxn.
**** END DEL 2014/12/26 ISID11 ****

ENDIF.

ENDFORM.                    " PROCESS_EXE5

*&---------------------------------------------------------------------*
*&      Form  GET_SEL_LINE
*&---------------------------------------------------------------------*
*       Get selected line and delete confirmation
*----------------------------------------------------------------------*
FORM GET_SEL_LINE CHANGING O_W_ANSWER TYPE C.

DATA:
LTD_ZT004   TYPE TYP_TD_ZT004C,
**** START ADD 2015/02/11 ISID11 ****
LW_TABIX    TYPE SY-TABIX,
LST_ZT004C  TYPE TYP_ZT004C,
**** END ADD 2015/02/11 ISID11 ****
LW_QUESTION     TYPE CHAR72.

LTD_ZT004 = TD_ZT004C.
DELETE LTD_ZT004 WHERE FLG IS INITIAL.
IF LTD_ZT004 IS INITIAL.
MESSAGE S008(ZMEGSD01) DISPLAY LIKE CNS_MSG_E.
RETURN.
*   行が選択されていません
ENDIF.

* POP確認
PERFORM POP_CONFIRM USING TEXT-003
TEXT-004
TEXT-001
TEXT-002
CHANGING O_W_ANSWER.

**** START ADD 2015/02/11 ISID11 ****
IF O_W_ANSWER = 1.

*   存在対象削除
LOOP AT LTD_ZT004 INTO LST_ZT004C.

LW_TABIX = SY-TABIX.

READ TABLE TD_ZT004I TRANSPORTING NO FIELDS
WITH KEY Z_INVOICE_NO = LST_ZT004C-Z_INVOICE_NO
BINARY SEARCH.

IF SY-SUBRC = 0.

DELETE LTD_ZT004 INDEX LW_TABIX.

ENDIF.

ENDLOOP.

*   ZTEGSDT004ロックの解除
PERFORM UNLOCK_ZT004 USING LTD_ZT004.

ENDIF.
**** END ADD 2015/02/11 ISID11 ****

ENDFORM.                    " GET_SEL_LINE

*&---------------------------------------------------------------------*
*&      Form  POP_CONFIRM
*&---------------------------------------------------------------------*
*       POP確認
*----------------------------------------------------------------------*
*      -->I_W_TITLEBAR     TITLEBAR
*      -->I_W_QUESTION     TEXT_QUESTION
*      -->I_W_BUTTON1      TEXT_BUTTON_1
*      -->I_W_BUTTON2      TEXT_BUTTON_2
*      <--O_W_ANSWER       ANSWER
*----------------------------------------------------------------------*
FORM POP_CONFIRM USING I_W_TITLEBAR TYPE ANY
I_W_QUESTION TYPE ANY
I_W_BUTTON1  TYPE ANY
I_W_BUTTON2  TYPE ANY
CHANGING O_W_ANSWER   TYPE C.

CALL FUNCTION 'POPUP_TO_CONFIRM'
EXPORTING
TITLEBAR              = I_W_TITLEBAR
TEXT_QUESTION         = I_W_QUESTION
TEXT_BUTTON_1         = I_W_BUTTON1
TEXT_BUTTON_2         = I_W_BUTTON2
DISPLAY_CANCEL_BUTTON = SPACE
IMPORTING
ANSWER                = O_W_ANSWER
EXCEPTIONS
TEXT_NOT_FOUND        = 1
OTHERS                = 2.

IF SY-SUBRC <> 0.

MESSAGE ID SY-MSGID TYPE CNS_MSG_E NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.

ENDIF.

ENDFORM.                    " POP_CONFIRM

*&---------------------------------------------------------------------*
*&      Form  PRC_SAVE
*&---------------------------------------------------------------------*
*       B-4-8．「Save」ボタン押下時の処理
*----------------------------------------------------------------------*
FORM PRC_SAVE.
**** START ADD BY ISID REN 2015/06/29 ****
* ローカル変数定義
DATA LW_ERRFLG TYPE FLAG.
**** END ADD BY ISID REN 2015/06/29 ****

**** START ADD 2015/06/02 ISID18 ****
IF TD_ZT004C[] IS INITIAL.
MESSAGE E118(ZMEGSD01).
ENDIF.
**** END ADD 2015/06/02 ISID18 ****

**** START ADD BY ISID REN 2015/06/29 ****
* B/L Dateの転記可能チェック
PERFORM PRC_CHK_BLDATE_POST
CHANGING LW_ERRFLG.

IF LW_ERRFLG = ABAP_TRUE.
RETURN.
ENDIF.
**** END ADD BY ISID REN 2015/06/29 ****

* Insert時
IF ST_S016-Z_SI_NO IS INITIAL.
PERFORM PRC_INSERT.
ELSE.
* Update時
PERFORM PRC_UPDATE.
ENDIF.

ENDFORM.                    " PRC_SAVE

*&---------------------------------------------------------------------*
*&      Form  PRC_INSERT
*&---------------------------------------------------------------------*
*       INSERT時
*----------------------------------------------------------------------*
FORM PRC_INSERT .

DATA:
LW_EFLG    TYPE C,
**** START ADD 2015/02/11 ISID11 ****
LW_MSG    TYPE SY-MSGV1,
**** END ADD 2015/02/11 ISID11 ****
LST_ZT003  TYPE ZTEGSDT003,
LW_DATUM   TYPE SY-DATUM,
LW_UZEIT   TYPE SY-UZEIT,
LW_UNAME   TYPE SY-UNAME.

LW_DATUM = SY-DATUM.
LW_UZEIT = SY-UZEIT.
LW_UNAME = SY-UNAME.

* B-4-8-1．ShippingInstructionの登録
MOVE-CORRESPONDING ST_S016 TO LST_ZT003.

**** 2016/3/21 ISID18 INS START *****
*   出荷伝票の出庫転記日の更新
PERFORM UPDATE_DELIVERY USING LST_ZT003-Z_SI_NO
LST_ZT003-Z_BL_DATE
TD_ZT004C
CHANGING LW_EFLG.

IF LW_EFLG IS NOT INITIAL.
RETURN.
ENDIF.
**** 2016/3/21 ISID18 INS END *****

* S/I Noを発番する
CALL FUNCTION 'NUMBER_GET_NEXT'
EXPORTING
NR_RANGE_NR             = CNS_NR_10
OBJECT                  = CNS_OBJ
IMPORTING
NUMBER                  = LST_ZT003-Z_SI_NO
EXCEPTIONS
INTERVAL_NOT_FOUND      = 1
NUMBER_RANGE_NOT_INTERN = 2
OBJECT_NOT_FOUND        = 3
QUANTITY_IS_0           = 4
QUANTITY_IS_NOT_1       = 5
INTERVAL_OVERFLOW       = 6
BUFFER_OVERFLOW         = 7
OTHERS                  = 8.
IF SY-SUBRC <> 0.
**** START UPD 2015/02/11 ISID11 ****
*    MESSAGE ID SY-MSGID TYPE CNS_MSG_E NUMBER SY-MSGNO
*          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LW_MSG.
CONCATENATE SY-MSGID
SY-MSGNO
LW_MSG
INTO LW_MSG
SEPARATED BY SPACE.
MESSAGE E032(ZMEGSD01) WITH 'NUMBER_GET_NEXT' LW_MSG.
*   汎用モジュールにて想定外のエラーが発生しました。
*   （FM = &1 / MSG = &2）
**** END UPD 2015/02/11 ISID11 ****
ENDIF.

LST_ZT003-Z_CRE_YMD    = LW_DATUM.        "システム日付
LST_ZT003-Z_CRE_HMS    = LW_UZEIT.        "システム時刻
LST_ZT003-Z_CRE_USERID = LW_UNAME.        "システムユーザ

* B-4-8-0．テーブルロック
PERFORM LOCK_ZT003 USING LST_ZT003-Z_SI_NO.

INSERT INTO ZTEGSDT003 VALUES LST_ZT003.
IF SY-SUBRC <> 0.
LW_EFLG = ABAP_ON.
ROLLBACK WORK.
MESSAGE E012(ZMEGSD01) WITH TEXT-E01
**** START UPD 2015/02/11 ISID11 ****
*                                         LST_ZT003-Z_SI_NO.
'ZMEGSD01 012'.
**** END UPD 2015/02/11 ISID11 ****
*   データ更新に失敗しました。(TBL = ZTEGSDT003 / MSG = &2 )
ENDIF.

**** START DEL 2015/02/11 ISID11 ****
** B-4-8-2．SI-InvoiceLinkの削除/登録
*  PERFORM LOCK_ZT004 USING TD_ZT004C.
**** END DEL 2015/02/11 ISID11 ****

* INSERTの処理を実施する
PERFORM INSERT_ZT004  USING LST_ZT003-Z_SI_NO
LW_DATUM
LW_UZEIT
LW_UNAME
CHANGING LW_EFLG.
IF LW_EFLG = ABAP_ON.
ROLLBACK WORK.
MESSAGE E012(ZMEGSD01) WITH TEXT-E03
**** START UPD 2015/02/11 ISID11 ****
*                                         LST_ZT003-Z_SI_NO.
'ZMEGSD01 012'.
**** END UPD 2015/02/11 ISID11 ****
*   データ更新に失敗しました。(TBL = ZTEGSDT004 / MSG = &2 )
ENDIF.

IF LW_EFLG = ABAP_OFF.
**** START UPD 2015/05/31 ISID18 ****
*    MESSAGE S013(ZMEGSD01).
MESSAGE S116(ZMEGSD01) WITH LST_ZT003-Z_SI_NO.
**** END UPD 2015/05/31 ISID18 ****
*   データ登録が正常終了しました。
COMMIT WORK.
ST_S016-Z_SI_NO = LST_ZT003-Z_SI_NO.
ST_S016-Z_CRE_YMD    = LST_ZT003-Z_CRE_YMD.        "システム日付
ST_S016-Z_CRE_HMS    = LST_ZT003-Z_CRE_HMS.        "システム時刻
ST_S016-Z_CRE_USERID = LST_ZT003-Z_CRE_USERID.     "システムユーザ
**** START ADD 2015/02/11 ISID11 ****
**** 2016/3/21 ISID18 DEL START *****
**   出荷伝票の出庫転記日の更新
*    PERFORM UPDATE_DELIVERY USING LST_ZT003-Z_SI_NO
***** START UPD 2015/06/02 ISID18 ****
**                                  LST_ZT003-Z_SHIP_DATE
*                                  LST_ZT003-Z_BL_DATE
***** END UPD 2015/06/02 ISID18 ****
*                                  TD_ZT004C.
**** 2016/3/21 ISID18 DEL END *****

*   ZTEGSDT003ロックの解除
PERFORM UNLOCK_ZT003 USING LST_ZT003-Z_SI_NO.

*   ZTEGSDT004ロックの解除
PERFORM UNLOCK_ZT004 USING TD_ZT004C.

LEAVE TO SCREEN 0.
**** END ADD 2015/02/11 ISID11 ****

ENDIF.

ENDFORM.                    " PRC_INSERT

*&---------------------------------------------------------------------*
*&      Form  LOCK_ZT004
*&---------------------------------------------------------------------*
*       ZTEGSDT004をロックする
*----------------------------------------------------------------------*
*      -->I_TD_ZT004   ZT004 Internal table
*      -->I_LOCK_FLG   Lock ZTEGSDT003
*      -->I_Z_SI_NO    SI/NO
*----------------------------------------------------------------------*
FORM LOCK_ZT004 USING I_TD_ZT004 TYPE TYP_TD_ZT004C
**** START ADD 2015/02/11 ISID11 ****
I_LOCK_FLG TYPE FLAG
I_Z_SI_NO  TYPE ZTEGSDT003-Z_SI_NO.
**** END ADD 2015/02/11 ISID11 ****
DATA:
**** START ADD 2015/02/11 ISID11 ****
LTD_UNLOCK TYPE TYP_TD_ZT004C,
**** END ADD 2015/02/11 ISID11 ****
LST_ZT004 TYPE TYP_ZT004C.

LOOP AT I_TD_ZT004 INTO LST_ZT004.
CALL FUNCTION 'ENQUEUE_EZZTEGSDT004'
EXPORTING
MODE_ZTEGSDT004 = CNS_LMOD
Z_INVOICE_NO    = LST_ZT004-Z_INVOICE_NO
EXCEPTIONS
FOREIGN_LOCK    = 1
SYSTEM_FAILURE  = 2
OTHERS          = 3.
IF SY-SUBRC <> 0.

**** START ADD 2015/02/11 ISID11 ****
IF I_LOCK_FLG = 'X'.

*       ZTEGSDT003ロックの解除
PERFORM UNLOCK_ZT003 USING I_Z_SI_NO.

ENDIF.

*     ZTEGSDT004ロックの解除
PERFORM UNLOCK_ZT004 USING LTD_UNLOCK.
**** END ADD 2015/02/11 ISID11 ****

**** START UPD 2015/02/11 ISID11 ****
*      MESSAGE ID SY-MSGID TYPE CNS_MSG_E NUMBER SY-MSGNO
*          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
MESSAGE E080(ZMEGSD01) WITH SY-MSGV1.
*     対象の伝票は、別のユーザが編集中です。（USER = &1）
**** END UPD 2015/02/11 ISID11 ****
ENDIF.

**** START ADD 2015/02/11 ISID11 ****
APPEND LST_ZT004 TO LTD_UNLOCK.
**** END ADD 2015/02/11 ISID11 ****

ENDLOOP.

ENDFORM.                    " LOCK_ZT004

*&---------------------------------------------------------------------*
*&      Form  UNLOCK_ZT004
*&---------------------------------------------------------------------*
*       ZTEGSDT004ロックの解除
*----------------------------------------------------------------------*
FORM UNLOCK_ZT004
**** START ADD 2015/02/11 ISID11 ****
USING I_TD_T004  TYPE TYP_TD_ZT004C.
**** END ADD 2015/02/11 ISID11 ****
DATA:
LST_ZT004 TYPE TYP_ZT004C.

**** START UPD 2015/02/11 ISID11 ****
*  LOOP AT TD_ZT004B INTO LST_ZT004.
LOOP AT I_TD_T004 INTO LST_ZT004.
**** END UPD 2015/02/11 ISID11 ****
CALL FUNCTION 'DEQUEUE_EZZTEGSDT004'
EXPORTING
MODE_ZTEGSDT004 = CNS_LMOD
Z_INVOICE_NO    = LST_ZT004-Z_INVOICE_NO.
ENDLOOP.

ENDFORM.                    " UNLOCK_ZT004

*&---------------------------------------------------------------------*
*&      Form  INSERT_ZT004
*&---------------------------------------------------------------------*
*       INSERTの処理を実施する
*----------------------------------------------------------------------*
*      -->I_W_SIN   S/I No
*      <--O_W_EFLG  Flag
*----------------------------------------------------------------------*
FORM INSERT_ZT004  USING I_W_SIN   TYPE ZESINO
I_W_DATUM TYPE SY-DATUM
I_W_UZEIT TYPE SY-UZEIT
I_W_UNAME TYPE SY-UNAME
CHANGING O_W_EFLG TYPE C.
DATA:
LST_ZT004  TYPE TYP_ZT004C,
LST_ZT004T TYPE ZTEGSDT004,
LTD_ZT004I TYPE STANDARD TABLE OF ZTEGSDT004.

LOOP AT TD_ZT004C INTO LST_ZT004.
READ TABLE TD_ZT004B TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_INVOICE_NO = LST_ZT004-Z_INVOICE_NO.
IF SY-SUBRC <> 0.
LST_ZT004T-Z_INVOICE_NO = LST_ZT004-Z_INVOICE_NO.
LST_ZT004T-Z_SI_NO      = I_W_SIN.
LST_ZT004T-Z_CRE_YMD    = I_W_DATUM.        "システム日付
LST_ZT004T-Z_CRE_HMS    = I_W_UZEIT.        "システム時刻
LST_ZT004T-Z_CRE_USERID = I_W_UNAME.        "システムユーザ

APPEND LST_ZT004T TO LTD_ZT004I.
CLEAR LST_ZT004T.
ENDIF.
ENDLOOP.
IF LTD_ZT004I IS NOT INITIAL.
INSERT ZTEGSDT004 FROM TABLE LTD_ZT004I ACCEPTING DUPLICATE KEYS.
IF SY-SUBRC <> 0.
O_W_EFLG = ABAP_ON.
ENDIF.
ENDIF.

ENDFORM.                    " INSERT_ZT004

*&---------------------------------------------------------------------*
*&      Form  DEL_ZT004
*&---------------------------------------------------------------------*
*       DELETEの処理を実施する
*----------------------------------------------------------------------*
*      -->i_w_SIn  S/I No
*      <--o_W_EFLG Flag
*----------------------------------------------------------------------*
FORM DEL_ZT004  USING    I_W_SIN  TYPE ZESINO
CHANGING O_W_EFLG TYPE C.

DATA:
LST_ZT004  TYPE TYP_ZT004C,
LST_ZT004T TYPE ZTEGSDT004,
LTD_ZT004D TYPE STANDARD TABLE OF ZTEGSDT004.

LOOP AT TD_ZT004B INTO LST_ZT004.
READ TABLE TD_ZT004C TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_INVOICE_NO = LST_ZT004-Z_INVOICE_NO.
IF SY-SUBRC <> 0.
LST_ZT004T-Z_INVOICE_NO = LST_ZT004-Z_INVOICE_NO.
LST_ZT004T-Z_SI_NO      = I_W_SIN.
APPEND LST_ZT004T TO LTD_ZT004D.
CLEAR LST_ZT004T.
ENDIF.
ENDLOOP.
IF LTD_ZT004D IS NOT INITIAL.
DELETE ZTEGSDT004 FROM TABLE LTD_ZT004D.
IF SY-SUBRC <> 0.
O_W_EFLG = ABAP_ON.
ENDIF.

ENDIF.

ENDFORM.                    " DEL_ZT004

*&---------------------------------------------------------------------*
*&      Form  PRC_UPDATE
*&---------------------------------------------------------------------*
*       Update時
*----------------------------------------------------------------------*
FORM PRC_UPDATE .

DATA:
LW_EFLG   TYPE C,
LST_ZT003 TYPE ZTEGSDT003,
LST_SIN   TYPE ZSEGSD0016,
**** START ADD 2015/02/11 ISID11 ****
LTD_LOCK  TYPE TYP_TD_ZT004C,
**** END ADD 2015/02/11 ISID11 ****
LW_DATUM  TYPE SY-DATUM,
LW_UZEIT  TYPE SY-UZEIT,
LW_UNAME  TYPE SY-UNAME.

LW_DATUM = SY-DATUM.
LW_UZEIT = SY-UZEIT.
LW_UNAME = SY-UNAME.

**** START DEL 2015/02/11 ISID11 ***
** B-4-8-0．テーブルロック
*  PERFORM LOCK_ZT003 USING ST_S016-Z_SI_NO.
**** END DEL 2015/02/11 ISID11 ****

* B-4-8-1．ShippingInstructionのUPDATE
MOVE-CORRESPONDING ST_S016 TO LST_ZT003.
***** 2016/3/21 ISID18 INS START *****
* B-4-8-2．SI-InvoiceLinkの削除/登録
* Invoiceデータ取得
PERFORM GET_ZT004_NEW.

*  削除されたInvoice No.に該当する出荷伝票の
*  出庫確認日、輸送経路をクリアする
PERFORM FM_UPDATE_OD CHANGING LW_EFLG.

IF LW_EFLG IS NOT INITIAL.
RETURN.
ENDIF.

* 出荷伝票の出庫転記日の更新
PERFORM UPDATE_DELIVERY USING LST_ZT003-Z_SI_NO
LST_ZT003-Z_BL_DATE
TD_ZT004C
CHANGING LW_EFLG.

IF LW_EFLG IS NOT INITIAL.
RETURN.
ENDIF.
***** 2016/3/21 ISID18 INS END *****

LST_ZT003-Z_MOD_YMD    = LW_DATUM.        "システム日付
LST_ZT003-Z_MOD_HMS    = LW_UZEIT.        "システム時刻
LST_ZT003-Z_MOD_USERID = LW_UNAME.        "システムユーザ
MODIFY ZTEGSDT003 FROM LST_ZT003.
IF SY-SUBRC <> 0.
LW_EFLG = ABAP_ON.
ROLLBACK WORK.
MESSAGE E012(ZMEGSD01) WITH TEXT-E01
**** START UPD 2015/02/11 ISID11 ****
*                                         LST_ZT003-Z_SI_NO.
'ZMEGSD01 012'.
**** END UPD 2015/02/11 ISID11 ****
*   データ更新に失敗しました。(TBL = ZTEGSDT003 / MSG = &2 )
ENDIF.

***** 2016/3/21 ISID18 DEL START *****
** B-4-8-2．SI-InvoiceLinkの削除/登録
** Invoiceデータ取得
*  PERFORM GET_ZT004_NEW.
***** 2016/3/21 ISID18 DEL END *****

**** START DEL 2015/02/11 ISID11 ****
*  PERFORM LOCK_ZT004 USING TD_ZT004B.
**** END DEL 2015/02/11 ISID11 ****

* DELETEの処理を実施する
PERFORM DEL_ZT004 USING LST_ZT003-Z_SI_NO
CHANGING LW_EFLG.
IF LW_EFLG = ABAP_ON.
ROLLBACK WORK.
MESSAGE E033(ZMEGSD01) WITH TEXT-E03
**** START UPD 2015/02/11 ISID11 ****
*                                         LST_ZT003-Z_SI_NO.
'ZMEGSD01 033'.
**** END UPD 2015/02/11 ISID11 ****
*   データ削除に失敗しました。(TBL = ZTEGSDT004 / MSG = &2 ).
ENDIF.

* INSERTの処理を実施する
PERFORM INSERT_ZT004  USING LST_ZT003-Z_SI_NO
LW_DATUM
LW_UZEIT
LW_UNAME
CHANGING LW_EFLG.
IF LW_EFLG = ABAP_ON.
ROLLBACK WORK.
MESSAGE E012(ZMEGSD01) WITH TEXT-E03
**** START UPD 2015/02/11 ISID11 ****
*                                         LST_ZT003-Z_SI_NO.
'ZMEGSD01 012'.
**** END UPD 2015/02/11 ISID11 ****
*   データ更新に失敗しました。(TBL = ZTEGSDT004 / MSG = &2 )
ENDIF.

IF LW_EFLG = ABAP_OFF.
**** START UPD 2015/05/31 ISID18 ****
*    MESSAGE S013(ZMEGSD01).
MESSAGE S117(ZMEGSD01) WITH LST_ZT003-Z_SI_NO.
**** END UPD 2015/05/31 ISID18 ****
*   データ登録が正常終了しました。
COMMIT WORK.
ENDIF.

* 2000 Refresh
LOOP AT TD_SIN INTO LST_SIN WHERE Z_CHK = ABAP_ON.
MOVE-CORRESPONDING ST_S016 TO LST_SIN.
MODIFY TD_SIN FROM LST_SIN INDEX SY-TABIX.
ENDLOOP.

* ロックの解除
**** START UPD 2015/02/11 ISID11 ****
*  PERFORM UNLOCK_ZT003.
*
*  PERFORM UNLOCK_ZT004.
CALL FUNCTION 'DEQUEUE_ALL'.

***** 2016/3/21 ISID18 DEL START *****
****** 2016/3/11 ISID18 INS START *****
*  IF TD_ZT004D IS NOT INITIAL.
**  削除されたInvoice No.に該当する出荷伝票の
**  出庫確認日、輸送経路をクリアする
*    PERFORM FM_UPDATE_OD USING TD_ZT004D.
*
**  出荷伝票更新処理後、対象内部テーブルをクリアする
*    REFRESH: TD_ZT004D.
*  ENDIF.
****** 2016/3/11 ISID18 INS END *****
*
** 出荷伝票の出庫転記日の更新
*  PERFORM UPDATE_DELIVERY USING LST_ZT003-Z_SI_NO
***** START UPD 2015/06/01 ISID18 ****
**                                LST_ZT003-Z_SHIP_DATE
*                                LST_ZT003-Z_BL_DATE
***** END UPD 2015/06/01 ISID18 ****
*                                TD_ZT004C.
***** 2016/3/21 ISID18 DEL END *****

LEAVE TO SCREEN 0.
**** END UPD 2015/02/11 ISID11 ****


ENDFORM.                    " PRC_UPDATE

*&---------------------------------------------------------------------*
*&      Form  LOCK_ZT003
*&---------------------------------------------------------------------*
*       ZTEGSDT003をロックする
*----------------------------------------------------------------------*
*      -->I_W_SIN   S/I No
*----------------------------------------------------------------------*
FORM LOCK_ZT003 USING I_W_SIN TYPE ZESINO.

CALL FUNCTION 'ENQUEUE_EZZTEGSDT003'
EXPORTING
MODE_ZTEGSDT003 = CNS_LMOD
Z_SI_NO         = I_W_SIN
EXCEPTIONS
FOREIGN_LOCK    = 1
SYSTEM_FAILURE  = 2
OTHERS          = 3.
IF SY-SUBRC <> 0.

**** START UPD 2015/02/11 ISID11 ****
*    MESSAGE ID SY-MSGID TYPE CNS_MSG_E NUMBER SY-MSGNO
*          WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
MESSAGE E080(ZMEGSD01) WITH SY-MSGV1.
*   対象の伝票は、別のユーザが編集中です。（USER = &1）
**** END UPD 2015/02/11 ISID11 ****

ENDIF.

ENDFORM.                    " LOCK_ZT003

*&---------------------------------------------------------------------*
*&      Form  UNLOCK_ZT003
*&---------------------------------------------------------------------*
*       ZTEGSDT003ロックの解除
*----------------------------------------------------------------------*
FORM UNLOCK_ZT003
**** START ADD 2015/02/11 ISID11 ****
USING I_Z_SI_NO   TYPE ZTEGSDT003-Z_SI_NO.
**** END ADD 2015/02/11 ISID11 ****

CALL FUNCTION 'DEQUEUE_EZZTEGSDT003'
EXPORTING
MODE_ZTEGSDT003 = CNS_LMOD
**** START UPD 2015/02/11 ISID11 ****
*      Z_SI_NO         = ST_S016-Z_SI_NO.
Z_SI_NO         = I_Z_SI_NO.
**** END UPD 2015/02/11 ISID11 ****

ENDFORM.                    " UNLOCK_ZT003

*&---------------------------------------------------------------------*
*&      Form  F4_FOR_LAYOUT
*&---------------------------------------------------------------------*
*       選択画面のF4の検索ヘルプの設定
*----------------------------------------------------------------------*
FORM F4_FOR_LAYOUT .

DATA: LST_VARIANT_I TYPE DISVARIANT,
LW_SAVE(1)    TYPE C,
LW_EXIT(1)    TYPE C,
LST_VARIANT_E TYPE DISVARIANT.

LW_SAVE = CNS_SAVE_A.

LST_VARIANT_I-REPORT = SY-REPID.

CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
EXPORTING
IS_VARIANT    = LST_VARIANT_I
I_SAVE        = LW_SAVE
IMPORTING
E_EXIT        = LW_EXIT
ES_VARIANT    = LST_VARIANT_E
EXCEPTIONS
NOT_FOUND     = 1
PROGRAM_ERROR = 2
OTHERS        = 3.

IF SY-SUBRC <> 0.
MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ELSE.
IF LW_EXIT = SPACE.
P_LAOT = LST_VARIANT_E-VARIANT.
ENDIF.
ENDIF.

ENDFORM.                    " F4_FOR_LAYOUT

**** START DEL 2015/02/02 ISID11 ****
*&---------------------------------------------------------------------*
*&      Module  CHECK_CARRIER  INPUT
*&---------------------------------------------------------------------*
*       Check Carrer
*----------------------------------------------------------------------*
*MODULE check_carrier INPUT.
*  PERFORM check_carrier.
*ENDMODULE.                 " CHECK_CARRIER  INPUT
*
*&---------------------------------------------------------------------*
*&      Module  CHECK_PLR  INPUT
*&---------------------------------------------------------------------*
*       Check Place of Receipt
*----------------------------------------------------------------------*
*MODULE check_plr INPUT.
*  PERFORM check_ztm007 USING st_s016-z_pl_receipt.
*ENDMODULE.                 " CHECK_PLR  INPUT

*&---------------------------------------------------------------------*
*&      Module  CHECK_PTL  INPUT
*&---------------------------------------------------------------------*
*       Check Port of Loading
*----------------------------------------------------------------------*
*MODULE check_ptl INPUT.
*  PERFORM check_ztdm002 USING st_s016-z_pt_loading.
*ENDMODULE.                 " CHECK_PTL  INPUT

*&---------------------------------------------------------------------*
*&      Module  CHECK_PTD  INPUT
*&---------------------------------------------------------------------*
*       Check Port of Discharge
*----------------------------------------------------------------------*
*MODULE check_ptd INPUT.
*  PERFORM check_ztdm002 USING st_s016-z_pt_discharge.
*ENDMODULE.                 " CHECK_PTD  INPUT

*&---------------------------------------------------------------------*
*&      Module  CHECK_PLD  INPUT
*&---------------------------------------------------------------------*
*       Check Place of Delivery
*----------------------------------------------------------------------*
*MODULE check_pld INPUT.
*  PERFORM check_ztm007 USING st_s016-z_pl_delivery.
*ENDMODULE.                 " CHECK_PLD  INPUT

*&---------------------------------------------------------------------*
*&      Module  CHECK_FD  INPUT
*&---------------------------------------------------------------------*
*       Check Final Destination
*----------------------------------------------------------------------*
*MODULE check_fd INPUT.
*  PERFORM check_ztm007 USING st_s016-z_final_dest.
*ENDMODULE.                 " CHECK_FD  INPUT

*&---------------------------------------------------------------------*
*&      Module  CHECK_PLI  INPUT
*&---------------------------------------------------------------------*
*       Check Place of Issue
*----------------------------------------------------------------------*
*MODULE check_pli INPUT.
*  PERFORM check_pli.
*ENDMODULE.                 " CHECK_PLI  INPUT

*&---------------------------------------------------------------------*
*&      Module  CHECK_RMK1  INPUT
*&---------------------------------------------------------------------*
*       Check Remarks (1)
*----------------------------------------------------------------------*
*MODULE check_rmk1 INPUT.
*  PERFORM check_ztm005 USING st_s016-z_si_remarks1.
*ENDMODULE.                 " CHECK_RMK1  INPUT

*&---------------------------------------------------------------------*
*&      Module  CHECK_RMK2  INPUT
*&---------------------------------------------------------------------*
*       Check Remarks (2)
*----------------------------------------------------------------------*
*MODULE check_rmk2 INPUT.
*  PERFORM check_ztm005 USING st_s016-z_si_remarks2.
*ENDMODULE.                 " CHECK_RMK2  INPUT
*
*&---------------------------------------------------------------------*
*&      Module  CHECK_RMK3  INPUT
*&---------------------------------------------------------------------*
*       Check Remarks (3)
*----------------------------------------------------------------------*
*MODULE check_rmk3 INPUT.
*  PERFORM check_ztm005 USING st_s016-z_si_remarks3.
*ENDMODULE.                 " CHECK_RMK3  INPUT
*
*&---------------------------------------------------------------------*
*&      Module  CHECK_RMK4  INPUT
*&---------------------------------------------------------------------*
*       Check Remarks (4)
*----------------------------------------------------------------------*
*MODULE check_rmk4 INPUT.
*  PERFORM check_ztm005 USING st_s016-z_si_remarks4.
*ENDMODULE.                 " CHECK_RMK4  INPUT

*&---------------------------------------------------------------------*
*&      Module  CHECK_RMK5  INPUT
*&---------------------------------------------------------------------*
*       Check Remarks (5)
*----------------------------------------------------------------------*
*MODULE check_rmk5 INPUT.
*  PERFORM check_ztm005 USING st_s016-z_si_remarks5.
*ENDMODULE.                 " CHECK_RMK5  INPUT

*&---------------------------------------------------------------------*
*&      Form  CHECK_ZTM005
*&---------------------------------------------------------------------*
*       Check ZTEGSDM005
*----------------------------------------------------------------------*
*      -->i_w_rmk  Remarks
*----------------------------------------------------------------------*
*FORM check_ztm005  USING i_w_rmk TYPE zesiremarks1.
*
*  DATA:
*    lw_mrk  TYPE zeremarks.
*
*  IF i_w_rmk IS NOT INITIAL.
*    SELECT z_remarks
*      UP TO 1 ROWS
*      INTO lw_mrk
*      FROM ztegsdm005
*     WHERE z_remarks = i_w_rmk.
*    ENDSELECT.
*    IF sy-subrc <> 0.
*      MESSAGE e006(zmegsd01) WITH cns_zdm05 DISPLAY LIKE cns_msg_e.
**     対象データが存在しません。(TBL = ZTEGSDM005)
*    ENDIF.
*  ENDIF.
*
*ENDFORM.                    " CHECK_ZTM005
*
*&---------------------------------------------------------------------*
*&      Form  CHECK_ZTM007
*&---------------------------------------------------------------------*
*       Check ZTEGSDM007
*----------------------------------------------------------------------*
*FORM check_ztm007 USING i_w_place TYPE zeplace.
*  DATA:
*    lw_place TYPE zeplace.
*
*  IF i_w_place IS NOT INITIAL.
*    SELECT z_place
*      UP TO 1 ROWS
*      INTO lw_place
*      FROM ztegsdm007
*     WHERE z_place = i_w_place.
*    ENDSELECT.
*    IF sy-subrc <> 0.
*      MESSAGE e006(zmegsd01) WITH cns_zdm07 DISPLAY LIKE cns_msg_e.
**     対象データが存在しません。(TBL = ZTEGSDM007)
*    ENDIF.
*  ENDIF.
*
*ENDFORM.                    " CHECK_ZTM007

*&---------------------------------------------------------------------*
*&      Form  CHECK_ZTDM002
*&---------------------------------------------------------------------*
*       Check ZTEGSDM002
*----------------------------------------------------------------------*
*      -->I_W_FTV  S/I No
*----------------------------------------------------------------------*
*FORM check_ztdm002 USING i_w_ftv TYPE zefromtovia.
*  DATA:
*    lw_ftv TYPE zefromtovia.
*
*  IF i_w_ftv IS NOT INITIAL.
*    SELECT z_from_to_via
*      UP TO 1 ROWS
*      INTO lw_ftv
*      FROM ztegsdm002
*     WHERE z_from_to_via = i_w_ftv.
*    ENDSELECT.
*    IF sy-subrc <> 0.
*      MESSAGE e006(zmegsd01) WITH cns_zdm02 DISPLAY LIKE cns_msg_e.
**     対象データが存在しません。(TBL = ZTEGSDM002)
*    ENDIF.
*  ENDIF.
*ENDFORM.                    " CHECK_ZTDM002

*&---------------------------------------------------------------------*
*&      Form  CHECK_PLI
*&---------------------------------------------------------------------*
*       Place of Issue
*----------------------------------------------------------------------*
*FORM check_pli .
*  DATA:
*    lw_poi TYPE zeplaceofissue.
*
*  IF st_s016-z_pl_issue IS NOT INITIAL.
*    SELECT z_place_of_issue
*      UP TO 1 ROWS
*      INTO lw_poi
*      FROM ztegsdm008
*     WHERE z_place_of_issue = st_s016-z_pl_issue.
*    ENDSELECT.
*    IF sy-subrc <> 0.
*      MESSAGE e006(zmegsd01) WITH cns_zdm08 DISPLAY LIKE cns_msg_e.
**     対象データが存在しません。(TBL = ZTEGSDM008)
*    ENDIF.
*  ENDIF.
*ENDFORM.                    " CHECK_PLI
*
*&---------------------------------------------------------------------*
*&      Form  CHECK_CARRIER
*&---------------------------------------------------------------------*
*       Check carrer
*----------------------------------------------------------------------*
*FORM check_carrier .
*  DATA:
*    lw_carrier TYPE zecarrier.
*
*  IF st_s016-z_carrier IS NOT INITIAL.
*    SELECT z_carrier
*      UP TO 1 ROWS
*      INTO lw_carrier
*      FROM ztegsdm006
*     WHERE z_carrier = st_s016-z_carrier.
*    ENDSELECT.
*    IF sy-subrc <> 0.
*      MESSAGE e006(zmegsd01) WITH cns_zdm06 DISPLAY LIKE cns_msg_e.
**     対象データが存在しません。(TBL = ZTEGSDM006)
*    ENDIF.
*  ENDIF.
*
*ENDFORM.                    " CHECK_CARRIER
**** END DEL 2015/02/02 ISID11 ****

*&---------------------------------------------------------------------*
*&      Form  GET_ZT004_NEW
*&---------------------------------------------------------------------*
*       Invoiceデータ取得
*----------------------------------------------------------------------*
FORM GET_ZT004_NEW .

DATA:
LTD_ZT004  TYPE TYP_TD_ZT004,
LST_ZT004  TYPE TYP_ZT004,
LST_ZT004C TYPE TYP_ZT004C,
LW_NO      TYPE SY-TABIX.

REFRESH TD_ZT004B.
SELECT Z_INVOICE_NO               "Invoice No
Z_SI_NO                    "S/I No
FROM ZTEGSDT004
INTO TABLE LTD_ZT004
WHERE Z_SI_NO = ST_S016-Z_SI_NO.

LOOP AT LTD_ZT004 INTO LST_ZT004.
LW_NO = SY-TABIX.
MOVE-CORRESPONDING LST_ZT004 TO LST_ZT004C.
LST_ZT004C-NO = LW_NO.
APPEND LST_ZT004C TO TD_ZT004B.
CLEAR LST_ZT004C.
ENDLOOP.

ENDFORM.                    " GET_ZT004_NEW
**** START ADD BY ISID REN 2015/06/29 ****
*&---------------------------------------------------------------------*
*&      Form  PRC_CHK_BLDATE_POST
*&---------------------------------------------------------------------*
*       B/L Dateの転記可能チェック
*----------------------------------------------------------------------*
*      <--O_W_ERRGLAG   エラーフラグ
*----------------------------------------------------------------------*
FORM PRC_CHK_BLDATE_POST
CHANGING O_W_ERRGLAG TYPE FLAG.
* ローカル変数定義
DATA: LW_WERKS TYPE WERKS_D,    "プラント
LW_BWKEY TYPE BWKEY,      "評価レベル
LW_BUKRS TYPE BUKRS,      "会社コード
LW_MONAT TYPE BKPF-MONAT, "会計期間
LW_GJAHR TYPE BKPF-GJAHR, "会計年度
LST_MARV TYPE TYP_MARV.   "品目管理レコード

* B/L Dateの日付チェックを行い、
* ロジ会計期間の転記可能な会計期間かをチェックする
* 出荷ポイント「出力項目：ShippingPt」から、
* 以下の順で会社コードを取得する
* テーブル「プラント別の出荷ポイント（TVSWZ）」にて、
* 出荷ポイント（VSTEL）からプラント（WERKS）を取得
SELECT WERKS "プラント
UP TO 1 ROWS
FROM TVSWZ
INTO LW_WERKS
WHERE VSTEL = ST_S016-VSTEL. "出荷ポイント
ENDSELECT.

IF SY-SUBRC <> 0.
CLEAR LW_WERKS.
ENDIF.

* テーブル「プラント（T001W）」にて、
* プラント（WERKS）から評価レベル（BWKEY）を取得
SELECT SINGLE BWKEY "評価レベル
FROM T001W
INTO LW_BWKEY "評価レベル
WHERE WERKS = LW_WERKS. "プラント

IF SY-SUBRC <> 0.
CLEAR LW_BWKEY.
ENDIF.

* テーブル「評価レベル（T001K）」にて、
* 評価レベル（BWKEY）から会社コード（BUKRS）を取得
SELECT SINGLE BUKRS "会社コード
FROM T001K
INTO LW_BUKRS           "非表示項目：会社コード
WHERE BWKEY = LW_BWKEY. "評価レベル

IF SY-SUBRC <> 0.
CLEAR LW_BUKRS.
ENDIF.

* 汎用モジュール「GET_CURRENT_YEAR」を使用して、B/L Dateから会計年度、
* 会計期間を取得する
CALL FUNCTION 'GET_CURRENT_YEAR'
EXPORTING
BUKRS = LW_BUKRS
DATE  = ST_S016-Z_BL_DATE "出力項目：B/L Date
IMPORTING
CURRM = LW_MONAT  "会計期間
CURRY = LW_GJAHR. "会計年度.

* 汎用モジュールの実行に失敗した場合、
* メッセージを出力し処理を終了する
IF   LW_MONAT IS INITIAL
OR LW_GJAHR IS INITIAL.
*   汎用モジュールにて想定外のエラーが発生しました。
*  （FM = &1 / MSG = &2）
MESSAGE S032(ZMEGSD01) DISPLAY LIKE 'E'
WITH 'GET_CURRENT_YEAR'
TEXT-E04. "B/L Date
O_W_ERRGLAG = ABAP_TRUE.
RETURN.
ENDIF.

* 品目管理レコードから、現会計年度、現会計期間、前会計年度、
* 前会計期間、前期へ転記を取得する
SELECT SINGLE LFGJA    "当年度
LFMON    "当期
VMGJA    "前期会計年度
VMMON    "前期会計月
XRUEM    "前期へ転記
FROM MARV "品目管理レコード
INTO LST_MARV
WHERE BUKRS = LW_BUKRS.

IF SY-SUBRC <> 0.
CLEAR LST_MARV.
ENDIF.

* 当会計年度・当会計期間チェック
*「非表示項目：B/L Date会計期間」と「非表示項目：当期」、
*「非表示項目：B/L Date会計年度」と「非表示項目：当年度」が
* 一致した場合、チェックOKとし次の処理に遷移する
IF    LW_MONAT = LST_MARV-LFMON
AND LW_GJAHR = LST_MARV-LFGJA.
RETURN.

* 前会計年度・前会計期間チェック
ELSE.
*  「非表示項目：前期へ転記」が「ブランク」の場合、
*   前会計年度・前会計期間に転記不可のため、
*   エラーとしメッセージを出力し処理を終了する
IF LST_MARV-XRUEM = SPACE.
*     B/L Dateが転記可能な日付ではありません。
MESSAGE S119(ZMEGSD01) DISPLAY LIKE 'E'.
O_W_ERRGLAG = ABAP_TRUE.
RETURN.

*  「非表示項目：前期へ転記」が「X」の場合
ELSE.
*    「非表示項目：B/L Date会計期間」と「非表示項目：前期会計月」、
*    「非表示項目：B/L Date会計年度」と「非表示項目：前期会計年度」が
*     一致した場合、チェックOKとし次の処理に遷移する
IF    LW_MONAT = LST_MARV-VMMON
AND LW_GJAHR = LST_MARV-VMGJA.
RETURN.

*     前会計年度・前会計期間に転記不可のため
ELSE.
*       エラーとしメッセージを出力し処理を終了する
*       B/L Dateが転記可能な日付ではありません。
MESSAGE S119(ZMEGSD01) DISPLAY LIKE 'E'.
O_W_ERRGLAG = ABAP_TRUE.
RETURN.
ENDIF.
ENDIF.
ENDIF.

ENDFORM.                    "PRC_CHK_BLDATE_POST
**** END ADD BY ISID REN 2015/06/29 ****
***** 2016/3/11 ISID18 INS START *****
*&---------------------------------------------------------------------*
*&      Form  FM_UPDATE_OD
*&---------------------------------------------------------------------*
*       Invoice No.削除された場合の出荷伝票更新
*----------------------------------------------------------------------*
*      -->I_TD_ZT004D  text
*      <--O_W_EFLG  text
*----------------------------------------------------------------------*
FORM FM_UPDATE_OD CHANGING O_ERRFLG TYPE C.

DATA:
LTD_VBELN  TYPE TYP_TD_VBELN,
LST_VBELN  TYPE TYP_VBELN,
LTD_VBUK   TYPE TYP_TD_VBUK,
LST_VBUK   TYPE TYP_VBUK,
LST_VBKOK  TYPE VBKOK,
LW_MSG     TYPE SY-MSGV1,
LTD_PROTT  TYPE STANDARD TABLE OF PROTT,
LST_PROTT  TYPE PROTT,
LST_ZT004  TYPE TYP_ZT004C,
LST_ZT004T TYPE ZTEGSDT004,
LTD_ZT004D TYPE STANDARD TABLE OF ZTEGSDT004.

CLEAR:
O_ERRFLG,
LTD_ZT004D.

*****************************
*  削除されたInvoice No.取得
*****************************
LOOP AT TD_ZT004B INTO LST_ZT004.
READ TABLE TD_ZT004C TRANSPORTING NO FIELDS BINARY SEARCH
WITH KEY Z_INVOICE_NO = LST_ZT004-Z_INVOICE_NO.
IF SY-SUBRC <> 0.
LST_ZT004T-Z_INVOICE_NO = LST_ZT004-Z_INVOICE_NO.
APPEND LST_ZT004T TO LTD_ZT004D.
CLEAR LST_ZT004T.
ENDIF.
ENDLOOP.

IF LTD_ZT004D IS INITIAL.
RETURN.
ENDIF.

*****************************
*  該当する出荷伝票取得
*****************************
SELECT VBELN
INTO TABLE LTD_VBELN
FROM ZTEGSDT001
FOR ALL ENTRIES IN LTD_ZT004D
WHERE Z_INVOICE_NO = LTD_ZT004D-Z_INVOICE_NO.

IF SY-SUBRC <> 0.
RETURN.
ENDIF.

SORT LTD_VBELN BY VBELN ASCENDING.
DELETE ADJACENT DUPLICATES FROM LTD_VBELN
COMPARING VBELN.

*****************************
* 在庫移動ステータスの取得
*****************************
SELECT
VBELN            "販売管理伝票番号
WBSTK            "合計在庫移動ステータス
INTO TABLE LTD_VBUK
FROM VBUK
FOR ALL ENTRIES IN LTD_VBELN
WHERE VBELN = LTD_VBELN-VBELN.

IF SY-SUBRC <> 0.
RETURN.
ENDIF.

SORT LTD_VBUK BY VBELN ASCENDING.

*****************************
* 出庫転記日、輸送経路のクリア
*****************************
LOOP AT LTD_VBUK INTO LST_VBUK WHERE WBSTK = 'A'.

CLEAR LST_VBELN.

READ TABLE LTD_VBELN INTO LST_VBELN
WITH KEY VBELN = LST_VBUK-VBELN
BINARY SEARCH.

*   出荷伝票の在庫移動ステータスが「A（未処理）」の伝票に対して、
*   出庫転記日、輸送経路をクリアする
CLEAR LST_VBKOK.

LST_VBKOK-VBELN_VL  = LST_VBELN-VBELN.
LST_VBKOK-KOMUE     = 'X'.
LST_VBKOK-WABUC     = SPACE.
LST_VBKOK-BORGR_KZWAD = 'X'.
CLEAR LST_VBKOK-WADAT_IST.
LST_VBKOK-KZWAD     = 'X'.
CLEAR LST_VBKOK-WADAT.
CLEAR LST_VBKOK-ROUTE.
LST_VBKOK-KZROUTE = ABAP_ON.

CLEAR LTD_PROTT.
CALL FUNCTION 'WS_DELIVERY_UPDATE'
EXPORTING
VBKOK_WA                 = LST_VBKOK
SYNCHRON                 = 'X'
COMMIT                   = 'X'
DELIVERY                 = LST_VBELN-VBELN
NICHT_SPERREN            = 'X'
IF_DATABASE_UPDATE       = '1'
IF_ERROR_MESSAGES_SEND_0 = 'X'
TABLES
PROT                     = LTD_PROTT.

LOOP AT LTD_PROTT INTO LST_PROTT
WHERE MSGTY = CNS_MSG_A
OR MSGTY = CNS_MSG_E.

O_ERRFLG = ABAP_ON.

*       汎用モジュールの実行に失敗した場合、
*       メッセージを出力し処理を終了する

MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4
INTO LW_MSG.

CONCATENATE SY-MSGID
SY-MSGNO
LW_MSG
INTO LW_MSG
SEPARATED BY SPACE.

MESSAGE S032(ZMEGSD01) WITH 'WS_DELIVERY_UPDATE'
LW_MSG
DISPLAY LIKE CNS_MSG_E.

RETURN.
*       汎用モジュールにて想定外のエラーが発生しました。
*       （FM = &1 / MSG = &2）
ENDLOOP.

ENDLOOP.

ENDFORM.                    " FM_UPDATE_OD
***** 2016/3/11 ISID18 INS END *****
