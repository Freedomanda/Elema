REPORT ZF021300 MESSAGE-ID  Y1
LINE-SIZE  170
LINE-COUNT  58
NO STANDARD PAGE HEADING.
************************************************************************
* プログラムID  :ZF021300
* プログラム名  :支払状況作成処理
* 作成日        :2008/02/21
* 作成者        :DMC
* 変更履歴      :2008/03/28 DMC 締日、支払期日の内容を変更する
*               :2008/06/19 DMC 検収照合伝票タイプに対するﾁｪｯｸﾛｼﾞｯｸ追加
*               :               締日・支払期日取得ﾛｼﾞｯｸ変更
*               :               支払期日の置換処理を追加
*               :2008/06/25 DMC 支払条件の設定をLFM1の支払条件に変更
************************************************************************
*----------------------------------------------------------------------*
*     宣言部
*----------------------------------------------------------------------*
TABLES:     T001,                "会社コード
SKA1,                "勘定コードマスタ (勘定コード表)
T003,                "伝票タイプ
T052,                "支払条件
ZF2020.              "支払状況テーブル
*----------------------------------------------------------------------*
*       構造定義          　　　　                                     *
*----------------------------------------------------------------------*
*決済元伝票取得用
TYPES:BEGIN OF TYP_BSIK,
BUKRS LIKE BSIK-BUKRS,             "会社コード
LIFNR LIKE BSIK-LIFNR,             "仕入先コード	
UMSKZ LIKE BSIK-UMSKZ,             "特殊仕訳コード	
AUGDT LIKE BSIK-AUGDT,             "決済日付	
AUGBL LIKE BSIK-AUGBL,             "決済伝票番号	
ZUONR LIKE BSIK-ZUONR,             "ソートキー	
GJAHR LIKE BSIK-GJAHR,             "会計年度	
BELNR LIKE BSIK-BELNR,             "会計伝票番号	
BUZEI LIKE BSIK-BUZEI,             "明細番号	
BUDAT LIKE BSIK-BUDAT,             "転記日付	
CPUDT LIKE BSIK-CPUDT,             "会計伝票登録日	
WAERS LIKE BSIK-WAERS,             "通貨コード	
BLART LIKE BSIK-BLART,             "伝票タイプ	
SHKZG LIKE BSIK-SHKZG,             "借方/貸方フラグ	
DMBTR LIKE BSIK-DMBTR,             "国内通貨額	
WRBTR LIKE BSIK-WRBTR,             "伝票通貨額	
HKONT LIKE BSIK-HKONT,             "総勘定元帳勘定	
ZFBDT LIKE BSIK-ZFBDT,             "期日計算の支払基準日
ZTERM LIKE BSIK-ZTERM,             "支払条件
END   OF TYP_BSIK.
*決済先相手取得用
TYPES:BEGIN OF TYP_BSEG,
BUKRS LIKE BSEG-BUKRS,             "会社コード
BELNR LIKE BSEG-BELNR,             "会計伝票番号	
GJAHR LIKE BSEG-GJAHR,             "会計年度	
BUZEI LIKE BSEG-BUZEI,             "会計伝票内の明細番号
AUGDT LIKE BSEG-AUGDT,             "決済日付	
AUGBL LIKE BSEG-AUGBL,             "決済伝票番号
KOART LIKE BSEG-KOART,             "勘定タイプ
UMSKZ LIKE BSEG-UMSKZ,             "特殊仕訳コード	
SHKZG LIKE BSEG-SHKZG,             "借方/貸方フラグ	
DMBTR LIKE BSEG-DMBTR,             "国内通貨額	
WRBTR LIKE BSEG-WRBTR,             "伝票通貨額
HKONT LIKE BSEG-HKONT,             "総勘定元帳勘定	
LIFNR LIKE BSEG-LIFNR,             "仕入先コード	
ZFBDT LIKE BSEG-ZFBDT,             "期日計算の支払基準日
ZTERM LIKE BSEG-ZTERM,             "支払条件
REBZG LIKE BSEG-REBZG,             "取引の請求書番号	
REBZJ LIKE BSEG-REBZJ,             "関連請求書の会計年度	
REBZZ LIKE BSEG-REBZZ,             "関連請求書明細	
REBZT LIKE BSEG-REBZT,             "後続伝票タイプ
END   OF TYP_BSEG.
*決済先会計伝票ヘッダ取得用
TYPES:BEGIN OF TYP_BKPF,
BELNR LIKE BKPF-BELNR,             "会計伝票番号
GJAHR LIKE BKPF-GJAHR,             "会計年度
BLART LIKE BKPF-BLART,             "伝票タイプ
BUDAT LIKE BKPF-BUDAT,             "伝票の転記日付
CPUDT LIKE BKPF-CPUDT,             "会計伝票登録日
WAERS LIKE BKPF-WAERS,             "通貨コード	
KURSF LIKE BKPF-KURSF,             "換算レート	
END   OF TYP_BKPF.
*決済先取得用
TYPES:BEGIN OF TYP_BSAS,
BUKRS LIKE BSAS-BUKRS,             "会社コード
AUGDT LIKE BSAS-AUGDT,             "決済日付	
AUGBL LIKE BSAS-AUGBL,             "決済伝票番号
ZUONR LIKE BSAS-ZUONR,             "ソートキー
GJAHR LIKE BSAS-GJAHR,             "会計年度	
BELNR LIKE BSAS-BELNR,             "会計伝票番号
BUZEI LIKE BSAS-BUZEI,             "明細番号
BUDAT LIKE BSAS-BUDAT,             "転記日付
WAERS LIKE BSAS-WAERS,             "通貨コード
SHKZG LIKE BSAS-SHKZG,             "借方/貸方フラグ	
DMBTR LIKE BSAS-DMBTR,             "国内通貨額	
WRBTR LIKE BSAS-WRBTR,             "伝票通貨額
HKONT LIKE BSAS-HKONT,             "総勘定元帳勘定
ZFBDT LIKE BSAS-ZFBDT,             "期日計算の支払基準日
END   OF TYP_BSAS.
* 使用伝票情報退避用
TYPES:BEGIN OF TYP_USE_BSAS,
BUKRS LIKE BSAS-BUKRS,             "会社コード
GJAHR LIKE BSAS-GJAHR,             "会計年度	
BELNR LIKE BSAS-BELNR,             "会計伝票番号
BUZEI LIKE BSAS-BUZEI,             "明細番号
HKONT LIKE BSAS-HKONT,             "総勘定元帳勘定
WRBTR LIKE BSAS-WRBTR,             "国内通貨額
END OF TYP_USE_BSAS.

*   insert 2008/06/25 S.MIKAMI {
TYPES:BEGIN OF TYP_LFM1,
LIFNR TYPE LFM1-LIFNR,             "仕入先コード
EKORG TYPE LFM1-EKORG,             "購買組織
ZTERM TYPE LFM1-ZTERM,             "支払条件
END OF TYP_LFM1.
* } insert 2008/06/25 S.MIKAMI

*----------------------------------------------------------------------*
*       テーブル定義                                                   *
*----------------------------------------------------------------------*
DATA: GT_BSIK   TYPE TABLE OF TYP_BSIK,
GW_BSIK   TYPE TYP_BSIK.
DATA: GW_BSEG   TYPE TYP_BSEG.
DATA: GT_BSEG_KASI TYPE TABLE OF TYP_BSEG,
GW_BSEG_KASI TYPE TYP_BSEG.
DATA: GT_BKPF   TYPE TABLE OF TYP_BKPF,
GW_BKPF   TYPE TYP_BKPF.
DATA: GT_BSAS   TYPE TABLE OF TYP_BSAS,
GW_BSAS   TYPE TYP_BSAS.
DATA: GT_BSAS_KARI TYPE TABLE OF TYP_BSAS,
GW_BSAS_KARI TYPE TYP_BSAS.
DATA: GT_ZF2020 TYPE TABLE OF ZF2020,
GW_ZF2020 TYPE ZF2020.
DATA: GT_ZF2020_UPD TYPE TABLE OF ZF2020,
GW_ZF2020_UPD TYPE ZF2020.
DATA: GT_USE_KARI TYPE TABLE OF TYP_USE_BSAS,
GW_USE_KARI TYPE TYP_USE_BSAS.
DATA: GT_USE_KASI TYPE TABLE OF TYP_USE_BSAS,
GW_USE_KASI TYPE TYP_USE_BSAS.
*   insert 2008/06/25 S.MIKAMI {
DATA: GT_LFM1     TYPE TABLE OF TYP_LFM1.
* } insert 2008/06/25 S.MIKAMI
*----------------------------------------------------------------------*
*       変数定義                                                       *
*----------------------------------------------------------------------*
DATA:
W_KURST       LIKE TCURR-KURST VALUE 'M',
W_TCURR       LIKE TCURR-TCURR VALUE 'JPY',
W_SEQ         LIKE ZF2020-SEQ_NO VALUE '001',
W_STATUS      LIKE ZF2020-STATUS VALUE '9',
W_CADAT       LIKE ZF2020-CADAT VALUE '00000000',
W_CMP_FLG     LIKE ZF2020-CMP_FLG VALUE 'X',
W_STATUS1     LIKE ZF2020-STATUS VALUE '1',
W_SUM_WRBTR   LIKE ZF2020-WRBTR_S, "伝票通貨額	
W_MAX_SEQ     TYPE ZF2020-SEQ_NO,  "SEQ(MAX)
W_END_FLG(1)  TYPE C,              "ループ終了フラグ
W_OK_FLG(1)   TYPE C,              "完了フラグ
W_LOOP_CNT    TYPE I,              "ループカウント
W_INS_CNT     TYPE I.              "登録件数カウント
*----------------------------------------------------------------------*
*     入力画面定義
*----------------------------------------------------------------------*
* 会社コード
PARAMETERS: P_BUKRS  LIKE T001-BUKRS OBLIGATORY.
*実行日
SELECT-OPTIONS: S_DATUM1  FOR SY-DATUM DEFAULT SY-DATUM OBLIGATORY.
*再評価期間
SELECT-OPTIONS: S_DATUM2  FOR SY-DATUM OBLIGATORY.
SELECTION-SCREEN SKIP 1.

SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-B01.
*支払依頼勘定
SELECT-OPTIONS: S_SAKNR7 FOR SKA1-SAKNR OBLIGATORY.
*支払依頼伝票タイプ（検収）
SELECT-OPTIONS: S_BLART1 FOR T003-BLART OBLIGATORY.
*支払依頼伝票タイプ(その他)
SELECT-OPTIONS: S_BLART2 FOR T003-BLART OBLIGATORY.
*期日払用支払条件
SELECT-OPTIONS: S_ZTERM  FOR T052-ZTERM OBLIGATORY.
SELECTION-SCREEN END OF BLOCK B1.

SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-B02.
*銀行勘定
SELECT-OPTIONS: S_SAKNR1 FOR SKA1-SAKNR OBLIGATORY.
*手形勘定
SELECT-OPTIONS: S_SAKNR2 FOR SKA1-SAKNR OBLIGATORY.
*裏書手形勘定
SELECT-OPTIONS: S_SAKNR3 FOR SKA1-SAKNR OBLIGATORY.
*仕入割引勘定
SELECT-OPTIONS: S_SAKNR4 FOR SKA1-SAKNR OBLIGATORY.
*その他勘定
SELECT-OPTIONS: S_SAKNR5 FOR SKA1-SAKNR OBLIGATORY.
*相殺勘定
SELECT-OPTIONS: S_SAKNR6 FOR SKA1-SAKNR OBLIGATORY.
*対象外勘定
SELECT-OPTIONS: S_SAKNR8 FOR SKA1-SAKNR OBLIGATORY.
SELECTION-SCREEN END OF BLOCK B2.
*----------------------------------------------------------------------*
INITIALIZATION.
*----------------------------------------------------------------------*
DATA:L_DATE  TYPE SY-DATUM.
CLEAR:L_DATE.
* 実行日より3ヶ月分前の日付
CALL FUNCTION 'RE_ADD_MONTH_TO_DATE'
EXPORTING
MONTHS  = -3
OLDDATE = SY-DATUM
IMPORTING
NEWDATE = L_DATE.
* 再評価期間初期値の設定
MOVE: 'I'      TO S_DATUM2-SIGN,
'EQ'     TO S_DATUM2-OPTION,
SY-DATUM TO S_DATUM2-HIGH,
L_DATE   TO S_DATUM2-LOW.
APPEND S_DATUM2.

PERFORM INT_SEC.                   "初期化処理
*----------------------------------------------------------------------*
AT SELECTION-SCREEN.
*----------------------------------------------------------------------*
PERFORM CHECK_DATA.                "パラメータ入力値チェック
*----------------------------------------------------------------------*
START-OF-SELECTION.
*----------------------------------------------------------------------*
PERFORM DEL_DATE.                  "期間削除処理
PERFORM INSERT_DATA.               "実行日登録分登録
PERFORM UPDATE_DATA.               "未完データ更新
PERFORM DISPLAY_MESSAGE.           "終了処理
*----------------------------------------------------------------------*
END-OF-SELECTION.
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  INT_SEC
*&---------------------------------------------------------------------*
*       初期化処理
*----------------------------------------------------------------------*
FORM INT_SEC.

CLEAR:   GW_BSIK,GW_BSEG,GW_BKPF,GW_BSAS,
W_SUM_WRBTR,W_INS_CNT,W_OK_FLG,W_LOOP_CNT,
GW_USE_KARI,GW_BSEG_KASI,GW_USE_KASI.
REFRESH: GT_BSIK,GT_BKPF,GT_BSAS,GT_USE_KARI,
GT_BSEG_KASI,GT_USE_KASI.

ENDFORM.                    " INT_SEC
*&---------------------------------------------------------------------*
*&      Form  CHECK_DATA
*&---------------------------------------------------------------------*
*       パラメータ入力値チェック
*----------------------------------------------------------------------*
FORM CHECK_DATA.

PERFORM CHECK_BUKRS.      "会社コード存在チェック

ENDFORM.                    " CHECK_DATA
*&---------------------------------------------------------------------*
*&      Form  DEL_DATE
*&---------------------------------------------------------------------*
*       期間削除処理
*----------------------------------------------------------------------*
FORM DEL_DATE.

* 3ヶ月前分の履歴データ削除
DELETE FROM ZF2020 WHERE ZFBDT  IN S_DATUM2
AND SEQ_NO <> W_SEQ.
* 更新用データの存在チェック
SELECT SINGLE *
FROM ZF2020
WHERE ZFBDT   IN S_DATUM2
AND SEQ_NO  = W_SEQ.
IF SY-SUBRC = 0.
*   実行日より3ヶ月分前の支払依頼データのステータス更新
UPDATE ZF2020 SET  STATUS  = W_STATUS1
CMP_FLG = ''
CMP_DAT = ''
AUGBL   = ''
AUGDT   = ''
CADAT   = W_CADAT
WHERE ZFBDT   IN S_DATUM2
AND SEQ_NO  = W_SEQ.
*   更新で失敗した場合
IF SY-SUBRC <> 0.
"支払状況テーブル更新に失敗しました
MESSAGE S604 WITH '支払状況テーブル更新'.
ROLLBACK WORK.
STOP.
ENDIF.
ENDIF.

ENDFORM.                    " DEL_DATE
*&---------------------------------------------------------------------*
*&      Form  INSERT_DATA
*&---------------------------------------------------------------------*
*       実行日登録分登録
*----------------------------------------------------------------------*
FORM INSERT_DATA.

*   insert 2008/06/25 S.MIKAMI {
* 仕入先マスタ(購買データ)の一括取得
PERFORM GET_LFM1.
* } insert 2008/06/25 S.MIKAMI

* 実行日に登録された未決済支払依頼情報抽出
PERFORM GET_BSIK.
* 実行日に登録された決済支払依頼情報抽出
PERFORM GET_BSAK.
* データ編集処理
PERFORM CREATE_ZF2020.
* データ登録処理
PERFORM INSERT_ZF2020.

ENDFORM.                    " INSERT_DATA
*&---------------------------------------------------------------------*
*&      Form  UPDATE_DATA
*&---------------------------------------------------------------------*
*       未完データ更新
*----------------------------------------------------------------------*
FORM UPDATE_DATA.

* 未完了データ取得
PERFORM GET_ZF2020.
* 後続伝票取得
PERFORM GET_BSEG.

*   insert 2008/06/12 S.MIKAMI {
* 支払期日置換
PERFORM SET_FAEDT.
* } insert 2008/06/12 S.MIKAMI

* 更新処理
PERFORM UPDATE_ZF2020.
* 完了ステータス更新
PERFORM UPDATE_ALL_STATUS.

ENDFORM.                    " UPDATE_DATA
*&---------------------------------------------------------------------*
*&      Form  CHECK_BUKRS
*&---------------------------------------------------------------------*
*       会社コード存在チェック
*----------------------------------------------------------------------*
FORM CHECK_BUKRS.

SELECT SINGLE *
FROM T001
WHERE BUKRS = P_BUKRS.
IF SY-SUBRC <> 0.
"会社コード &XXX はありません
MESSAGE E685 WITH P_BUKRS.
ENDIF.

ENDFORM.                    " CHECK_BUKRS
*&---------------------------------------------------------------------*
*&      Form  GET_BSIK
*&---------------------------------------------------------------------*
*       実行日に登録された未決済支払依頼情報抽出
*----------------------------------------------------------------------*
FORM GET_BSIK.

SELECT BUKRS  "会社コード	
LIFNR  "仕入先コード	
UMSKZ  "特殊仕訳コード	
AUGDT  "決済日付	
AUGBL  "決済伝票番号	
ZUONR  "ソートキー	
GJAHR  "会計年度	
BELNR  "会計伝票番号	
BUZEI  "明細番号	
BUDAT  "転記日付	
CPUDT  "会計伝票登録日	
WAERS  "通貨コード	
BLART  "伝票タイプ	
SHKZG  "借方/貸方フラグ	
DMBTR  "国内通貨額	
WRBTR  "伝票通貨額	
HKONT  "総勘定元帳勘定	
ZFBDT  "期日計算の支払基準日
ZTERM  "支払条件
FROM BSIK
INTO TABLE GT_BSIK
WHERE BUKRS = P_BUKRS
AND CPUDT IN S_DATUM1
AND ( BLART IN S_BLART1
OR BLART IN S_BLART2 )
AND HKONT IN S_SAKNR7.

ENDFORM.                    " GET_BSIK
*&---------------------------------------------------------------------*
*&      Form  GET_BSAK
*&---------------------------------------------------------------------*
*       実行日に登録された決済支払依頼情報抽出
*----------------------------------------------------------------------*
FORM GET_BSAK.

SELECT BUKRS  "会社コード	
LIFNR  "仕入先コード	
UMSKZ  "特殊仕訳コード	
AUGDT  "決済日付	
AUGBL  "決済伝票番号	
ZUONR  "ソートキー	
GJAHR  "会計年度	
BELNR  "会計伝票番号	
BUZEI  "明細番号	
BUDAT  "転記日付	
CPUDT  "会計伝票登録日	
WAERS  "通貨コード	
BLART  "伝票タイプ	
SHKZG  "借方/貸方フラグ	
DMBTR  "国内通貨額	
WRBTR  "伝票通貨額	
HKONT  "総勘定元帳勘定	
ZFBDT  "期日計算の支払基準日
ZTERM  "支払条件
FROM BSAK
APPENDING TABLE GT_BSIK
WHERE BUKRS = P_BUKRS
AND CPUDT IN S_DATUM1
AND ( BLART IN S_BLART1
OR BLART IN S_BLART2 )
AND HKONT IN S_SAKNR7.

ENDFORM.                    " GET_BSAK
*&---------------------------------------------------------------------*
*&      Form  CREATE_ZF2020
*&---------------------------------------------------------------------*
*       データ編集処理
*----------------------------------------------------------------------*
FORM CREATE_ZF2020.

*   insert 2008/06/05 s.mikami {
DATA: LV_RC TYPE SY-SUBRC,
LW_SHIME TYPE D.   "締日取得用
* } insert 2008/06/05 s.mikami
*   insert 2008/06/25 S.MIKAMI {
DATA: LW_LFM1 TYPE TYP_LFM1.
* } insert 2008/06/25 S.MIKAMI

CLEAR:GW_BSIK,GW_ZF2020.
LOOP AT GT_BSIK INTO GW_BSIK.
*   insert 2008/06/05 s.mikami {
PERFORM CHECK_YK410 CHANGING LV_RC.
IF LV_RC <> 0.
CLEAR: GW_ZF2020.
CONTINUE.
ENDIF.
* } insert 2008/06/05 s.mikami
GW_ZF2020-BUKRS   = GW_BSIK-BUKRS.   "会社コード
GW_ZF2020-LIFNR   = GW_BSIK-LIFNR.   "仕入先
*20080328 DMC DEL_START
*    GW_ZF2020-ZFBDT   = GW_BSIK-ZFBDT.   "締日
*20080328 DMC DEL_END
GW_ZF2020-BELNR_O = GW_BSIK-BELNR.   "支払依頼伝票番号
GW_ZF2020-BUZEI_O = GW_BSIK-BUZEI.   "支払依頼伝票明細番号
GW_ZF2020-GJAHR_O = GW_BSIK-GJAHR.   "支払依頼会計年度
GW_ZF2020-SEQ_NO  = W_SEQ.           "SEQ.(親の支払依頼場合)
GW_ZF2020-STATUS  = W_STATUS1.       "ステータス(1⇒未処理)
*   modify 2008/06/25 S.MIKAMI {
READ TABLE GT_LFM1 INTO LW_LFM1
WITH KEY LIFNR = GW_BSIK-LIFNR.
GW_ZF2020-ZTERM   = LW_LFM1-ZTERM.   "支払条件
CLEAR: LW_LFM1.
*    GW_ZF2020-ZTERM   = GW_BSIK-ZTERM.   "支払条件
* } modify 2008/06/25 S.MIKAMI
*20080328 DMC DEL_START
**   支払期日取得
*    PERFORM CALL_FAEDT USING GW_BSIK-ZTERM
*                             GW_BSIK-ZFBDT
*                    CHANGING GW_ZF2020-FAEDT.
*20080328 DMC DEL_END
*20080328 DMC ADD_START
*   modify 2008/06/11 s.mikami {
*    IF GW_BSIK-BLART <> 'KY'.
*      GW_ZF2020-ZFBDT   = GW_BSIK-ZFBDT.   "締日
*     支払期日取得
*      PERFORM CALL_FAEDT USING GW_BSIK-ZTERM
*                               GW_BSIK-ZFBDT
*                      CHANGING GW_ZF2020-FAEDT.
* 会計直接計上の場合、転記日=締日、支払期日=支払基準日
IF GW_BSIK-BLART IN S_BLART2.
CLEAR: LW_SHIME.
LW_SHIME = GW_BSIK-BUDAT.
LW_SHIME+6(2) = '01'.
GW_ZF2020-ZFBDT = LW_SHIME - 1. "締日

GW_ZF2020-FAEDT   = GW_BSIK-ZFBDT.   "支払期日
* } modify 2008/06/11 s.mikami
ELSE.
*     締日取得
PERFORM GET_BSEG_ZFBDT CHANGING  GW_ZF2020-ZFBDT.
GW_ZF2020-FAEDT   = GW_BSIK-ZFBDT.   "支払期日
ENDIF.
*20080328 DMC ADD_END
GW_ZF2020-SHKZG   = GW_BSIK-SHKZG.   "貸借フラグ
GW_ZF2020-BELNR_K = GW_BSIK-BELNR.   "会計伝票番号
GW_ZF2020-GJAHR_K = GW_BSIK-GJAHR.   "会計年度
GW_ZF2020-BLART_O = GW_BSIK-BLART.   "支払依頼伝票タイプ
GW_ZF2020-BLART   = GW_BSIK-BLART.   "伝票タイプ
GW_ZF2020-BUDAT   = GW_BSIK-BUDAT.   "会計伝票転記日付
GW_ZF2020-CPUDT   = GW_BSIK-CPUDT.   "会計伝票登録日
GW_ZF2020-WAERS   = GW_BSIK-WAERS.   "通貨コード
*   借方Sの場合
IF GW_BSIK-SHKZG = 'S'.
GW_ZF2020-HKONT_S = GW_BSIK-HKONT. "勘定コード(借方)
GW_ZF2020-BUZEI_S = GW_BSIK-BUZEI. "明細番号(借方)
GW_ZF2020-DMBTR_S = GW_BSIK-DMBTR. "国内通貨額(借方)
GW_ZF2020-WRBTR_S = GW_BSIK-WRBTR. "伝票通貨額(借方)
GW_ZF2020-WRBTR_KS = GW_BSIK-WRBTR."決済通貨額(借方)
*     データ初期化し取得する
CLEAR: GW_ZF2020-HKONT_H,          "勘定コード(貸方)
GW_ZF2020-BUZEI_H,          "明細番号(貸方)
GW_ZF2020-DMBTR_H,          "国内通貨額(貸方)
GW_ZF2020-WRBTR_H,          "伝票通貨額(貸方)
GW_ZF2020-WRBTR_KH.         "決済通貨額(貸方)
*   貸方Hの場合
ELSEIF GW_BSIK-SHKZG = 'H'.
GW_ZF2020-HKONT_H = GW_BSIK-HKONT.  "勘定コード(貸方)
GW_ZF2020-BUZEI_H = GW_BSIK-BUZEI.  "明細番号(貸方)
GW_ZF2020-DMBTR_H = GW_BSIK-DMBTR.  "国内通貨額(貸方)
GW_ZF2020-WRBTR_H = GW_BSIK-WRBTR.  "伝票通貨額(貸方)
GW_ZF2020-WRBTR_KH = GW_BSIK-WRBTR. "決済通貨額(貸方)
*     データ初期化し取得する
CLEAR: GW_ZF2020-HKONT_S,          "勘定コード(借方)
GW_ZF2020-BUZEI_S,          "明細番号(借方)
GW_ZF2020-DMBTR_S,          "国内通貨額(借方)
GW_ZF2020-WRBTR_S,          "伝票通貨額(借方)
GW_ZF2020-WRBTR_KS.         "決済通貨額(借方)
ENDIF.
GW_ZF2020-CRDAT = SY-DATUM.          "登録日
GW_ZF2020-CRTIM = SY-UZEIT.          "登録時刻
GW_ZF2020-CRNAM = SY-UNAME.          "登録ユーザ
*   データ初期化し取得する
CLEAR: GW_ZF2020-KURSF,                "換算レート
GW_ZF2020-UPDAT,                "変更日
GW_ZF2020-UPTIM,                "変更時刻
GW_ZF2020-UPNAM,                "変更者
GW_ZF2020-AUGBL,                "決済伝票
GW_ZF2020-AUGDT,                "決済日付
GW_ZF2020-CADAT,                "支払計上日
GW_ZF2020-CMP_FLG,              "完了フラグ
GW_ZF2020-CMP_DAT.              "完了日
APPEND GW_ZF2020 TO GT_ZF2020.
CLEAR:GW_ZF2020.
ENDLOOP.

ENDFORM.                    " CREATE_ZF2020
*&---------------------------------------------------------------------*
*&      Form  INSERT_ZF2020
*&---------------------------------------------------------------------*
*       データ登録処理
*----------------------------------------------------------------------*
FORM INSERT_ZF2020.

CLEAR:GW_ZF2020,W_INS_CNT.
LOOP AT GT_ZF2020 INTO GW_ZF2020.
*  【支払状況テーブル】に該当レコードの存在チェックを行う
SELECT SINGLE *
FROM ZF2020
WHERE BUKRS    = GW_ZF2020-BUKRS
AND LIFNR    = GW_ZF2020-LIFNR
AND ZFBDT    = GW_ZF2020-ZFBDT
AND BELNR_O  = GW_ZF2020-BELNR_O
AND BUZEI_O  = GW_ZF2020-BUZEI_O
AND GJAHR_O  = GW_ZF2020-GJAHR_O
AND SEQ_NO   = GW_ZF2020-SEQ_NO.
*  【支払状況テーブル】テーブルに登録された場合
IF SY-SUBRC = 0.

*     既存のレコードをＤＢから削除する
DELETE FROM ZF2020 WHERE BUKRS    = GW_ZF2020-BUKRS
AND LIFNR    = GW_ZF2020-LIFNR
AND ZFBDT    = GW_ZF2020-ZFBDT
AND BELNR_O  = GW_ZF2020-BELNR_O
AND BUZEI_O  = GW_ZF2020-BUZEI_O
AND GJAHR_O  = GW_ZF2020-GJAHR_O.
ENDIF.
*   データを【支払状況テーブル】に登録する
INSERT INTO ZF2020 VALUES GW_ZF2020.
*   登録できた場合、登録件数をカウントする
IF SY-SUBRC = 0.
W_INS_CNT = W_INS_CNT + 1.
CLEAR: GW_ZF2020.
ENDIF.
ENDLOOP.

COMMIT WORK.
ENDFORM.                    " INSERT_ZF2020
*&---------------------------------------------------------------------*
*&      Form  GET_ZF2020
*&---------------------------------------------------------------------*
*       未完了データ取得
*----------------------------------------------------------------------*
FORM GET_ZF2020.

REFRESH:GT_ZF2020.
SELECT *
FROM ZF2020
INTO TABLE GT_ZF2020
WHERE STATUS <> W_STATUS.
IF SY-SUBRC = 0.
SORT GT_ZF2020 BY BUKRS LIFNR CPUDT ZFBDT
BELNR_O BUZEI_O GJAHR_O SEQ_NO.
ENDIF.

ENDFORM.                    " GET_ZF2020
*&---------------------------------------------------------------------*
*&      Form  GET_BSEG
*&---------------------------------------------------------------------*
*       後続伝票取得
*----------------------------------------------------------------------*
FORM GET_BSEG.

CLEAR:GW_ZF2020.
LOOP AT GT_ZF2020 INTO GW_ZF2020.

*   追加登録処理で完了したデータを取得する
IF GW_ZF2020-SEQ_NO <> W_SEQ.
IF GW_ZF2020-CADAT IS INITIAL.
CLEAR:GW_ZF2020-CADAT.
ENDIF.
APPEND GW_ZF2020 TO GT_ZF2020_UPD.
ENDIF.

*   最大のSEQ番号を取得する
AT NEW GJAHR_O.
PERFORM GET_MAX_SEQ.
W_LOOP_CNT = SY-TABIX.
ENDAT.

*   決済有無判定
IF GW_ZF2020-SHKZG = 'S'.
PERFORM CHECK_BSEG USING GW_ZF2020-BUZEI_S.
ELSEIF GW_ZF2020-SHKZG = 'H'.
PERFORM CHECK_BSEG USING GW_ZF2020-BUZEI_H.
ENDIF.

*   決済済みの場合は処理続行
CHECK W_END_FLG = 0.

*   決済先候補一括取得
PERFORM GET_BSAS.

*   決済先決定
PERFORM SET_KARI.

*   決済先相手決定
PERFORM SET_KASI.
ENDLOOP.

ENDFORM.                    " GET_BSEG
*---------------------------------------------------------------------*
*       FORM GET_MAX_SEQ                                              *
*---------------------------------------------------------------------*
*       最大SEQ番号取得処理                                           *
*---------------------------------------------------------------------*
FORM GET_MAX_SEQ.

* 読み込んでいる支払依頼伝票の最大SEQ番号を取得する
SELECT MAX( SEQ_NO )
INTO W_MAX_SEQ
FROM ZF2020
WHERE BUKRS   = GW_ZF2020-BUKRS
AND LIFNR   = GW_ZF2020-LIFNR
AND ZFBDT   = GW_ZF2020-ZFBDT
AND BELNR_O = GW_ZF2020-BELNR_O
AND BUZEI_O = GW_ZF2020-BUZEI_O
AND GJAHR_O = GW_ZF2020-GJAHR_O.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHECK_BSEG
*&---------------------------------------------------------------------*
*       決済有無判定
*----------------------------------------------------------------------*
*       P_BUZEI--> 明細番号(借方/貸方)
*----------------------------------------------------------------------*
FORM CHECK_BSEG USING P_BUZEI.

CLEAR: GW_BSEG.

SELECT SINGLE
BUKRS             "会社コード
BELNR             "会計伝票番号	
GJAHR             "会計年度	
BUZEI             "会計伝票内の明細番号
AUGDT             "決済日付	
AUGBL             "決済伝票番号
KOART             "勘定タイプ
UMSKZ             "特殊仕訳コード	
SHKZG             "借方/貸方フラグ	
DMBTR             "国内通貨額	
WRBTR             "伝票通貨額
HKONT             "総勘定元帳勘定	
LIFNR             "仕入先コード	
ZFBDT             "期日計算の支払基準日
ZTERM             "支払条件
REBZG             "取引の請求書番号	
REBZJ             "関連請求書の会計年度	
REBZZ             "関連請求書明細	
REBZT             "後続伝票タイプ
INTO GW_BSEG
FROM BSEG
WHERE BUKRS = GW_ZF2020-BUKRS          "会社コード
AND BELNR = GW_ZF2020-BELNR_K        "会計伝票番号
AND GJAHR = GW_ZF2020-GJAHR_K        "会計年度
AND BUZEI = P_BUZEI.                 "明細番号

* 未決済の場合(決済伝票番号が初期値の場合)
IF GW_BSEG-AUGBL IS INITIAL.
W_END_FLG = '1'.
* 決済されている場合(決済伝票番号に設定がある場合)
ELSEIF NOT GW_BSEG-AUGBL IS INITIAL.
W_END_FLG = '0'.
*   決済伝票情報取得
CLEAR:GW_BKPF.
PERFORM GET_BKPF USING GW_BSEG-BUKRS
GW_BSEG-BELNR
GW_BSEG-GJAHR
CHANGING GW_BKPF.
APPEND GW_BKPF TO GT_BKPF.
ENDIF.

ENDFORM.                    " CHECK_BSEG
*&---------------------------------------------------------------------*
*&      Form  GET_BKPF
*&---------------------------------------------------------------------*
*       決済伝票情報取得
*----------------------------------------------------------------------*
FORM GET_BKPF USING P_BUKRS
P_BELNR_K
P_GJAHR_K
CHANGING P_BKPF.

SELECT BELNR "会計伝票番号
GJAHR "会計年度
BLART "伝票タイプ
BUDAT "伝票の転記日付
CPUDT "会計伝票登録日
WAERS "通貨コード	
KURSF "換算レート
INTO P_BKPF
FROM BKPF
WHERE BUKRS = P_BUKRS          "会社コード
AND BELNR = P_BELNR_K        "会計伝票番号
AND GJAHR = P_GJAHR_K.       "会計年度
ENDSELECT.

ENDFORM.                    " GET_BKPF
*&---------------------------------------------------------------------*
*&      Form  GET_BSAS
*&---------------------------------------------------------------------*
*       決済先候補一括取得
*----------------------------------------------------------------------*
FORM GET_BSAS.

REFRESH: GT_BSAS.

* 決済元更新処理
PERFORM UPDATE_STATUS.

* 統制勘定の場合
IF GW_BSEG-KOART = 'K'.
*   統制勘定決済情報候補一括取得
SELECT BUKRS "会社コード
AUGDT "決済日付	
AUGBL "決済伝票番号
ZUONR "ソートキー
GJAHR "会計年度	
BELNR "会計伝票番号
BUZEI "明細番号
BUDAT "転記日付
WAERS "通貨コード
SHKZG "借方/貸方フラグ	
DMBTR "国内通貨額	
WRBTR "伝票通貨額
HKONT "総勘定元帳勘定
ZFBDT "期日計算の支払基準日
INTO TABLE GT_BSAS
FROM BSAK
WHERE BUKRS =  GW_BSEG-BUKRS          "会社コード
AND LIFNR =  GW_BSEG-LIFNR          "仕入先コード
AND AUGDT =  GW_BSEG-AUGDT          "決済日付
AND AUGBL =  GW_BSEG-AUGBL          "決済伝票番号
AND BELNR <> GW_BSEG-BELNR          "会計伝票番号
AND GJAHR =  GW_BSEG-GJAHR          "会計年度
AND SHKZG <> GW_BSEG-SHKZG          "借方/貸方ﾌﾗｸﾞ
AND HKONT =  GW_BSEG-HKONT.         "勘定コード
* G/L勘定の場合
ELSEIF GW_BSEG-KOART = 'S'.
SELECT BUKRS "会社コード
AUGDT "決済日付	
AUGBL "決済伝票番号
ZUONR "ソートキー
GJAHR "会計年度	
BELNR "会計伝票番号
BUZEI "明細番号
BUDAT "転記日付
WAERS "通貨コード
SHKZG "借方/貸方フラグ	
DMBTR "国内通貨額	
WRBTR "伝票通貨額
HKONT "総勘定元帳勘定
ZFBDT "期日計算の支払基準日
INTO TABLE GT_BSAS
FROM BSAS
WHERE BUKRS =  GW_BSEG-BUKRS          "会社コード
AND HKONT =  GW_BSEG-HKONT          "勘定コード
AND AUGDT =  GW_BSEG-AUGDT          "決済日付
AND AUGBL =  GW_BSEG-AUGBL          "決済伝票番号
AND BELNR <> GW_BSEG-BELNR          "会計伝票番号
AND GJAHR =  GW_BSEG-GJAHR          "会計年度
AND SHKZG <> GW_BSEG-SHKZG.         "借方/貸方ﾌﾗｸﾞ
ENDIF.

SORT GT_BSAS ASCENDING BY BUZEI BELNR GJAHR.

ENDFORM.                    " GET_BSAS
*&---------------------------------------------------------------------*
*&      Form  SET_KARI
*&---------------------------------------------------------------------*
*       決済先決定
*----------------------------------------------------------------------*
FORM SET_KARI.

DATA: LW_SUM_WRBTR TYPE ZF2020-WRBTR_H.
REFRESH:GT_BSAS_KARI.
CLEAR:LW_SUM_WRBTR,GW_BSAS,W_OK_FLG.

* 決済元伝票通貨額を退避する
IF GW_ZF2020-SHKZG = 'S'.
LW_SUM_WRBTR = GW_ZF2020-WRBTR_KS.
ELSEIF GW_ZF2020-SHKZG = 'H'.
LW_SUM_WRBTR = GW_ZF2020-WRBTR_KH.
ENDIF.

* 決済先候補を順次読込み、決済情報を取得する
LOOP AT GT_BSAS INTO GW_BSAS.
CLEAR:GW_BKPF.
*   決済先候補データのヘッダ情報取得
PERFORM GET_BKPF USING GW_BSAS-BUKRS
GW_BSAS-BELNR
GW_BSAS-GJAHR
CHANGING GW_BKPF.
APPEND GW_BKPF TO GT_BKPF.
*   決済元の伝票通貨額を決定する
PERFORM CHECK_WAERS USING LW_SUM_WRBTR.

*   使用されている金額取得する
IF GW_BSAS-SHKZG = 'S'.
PERFORM GET_SUM_WRBTRS USING GW_BSAS-BUZEI
GW_BSAS-BELNR
GW_BSAS-GJAHR.
ELSEIF GW_BSAS-SHKZG = 'H'.
PERFORM GET_SUM_WRBTRH USING GW_BSAS-BUZEI
GW_BSAS-BELNR
GW_BSAS-GJAHR.
ENDIF.
*   決済先候補の伝票通貨額より減算する
GW_BSAS-WRBTR = GW_BSAS-WRBTR - W_SUM_WRBTR.
CLEAR:GW_USE_KARI.
*   候補となった借方が他伝票で使用済みかをチェックする
LOOP  AT GT_USE_KARI INTO GW_USE_KARI WHERE BUKRS = GW_BSAS-BUKRS
AND GJAHR = GW_BSAS-GJAHR
AND BELNR = GW_BSAS-BELNR
AND BUZEI = GW_BSAS-BUZEI.
*     他伝票で使用済みの場合、使用金額を減算する
GW_BSAS-WRBTR = GW_BSAS-WRBTR - GW_USE_KARI-WRBTR.
ENDLOOP.
*   金額が残っていた場合
CHECK GW_BSAS-WRBTR > 0.

*   決済先候補の金額が決済元の伝票通貨金額を超過した場合
IF LW_SUM_WRBTR <= GW_BSAS-WRBTR.
*     決済元の伝票通貨金額で決済先候補の金額を上書く
GW_BSAS-WRBTR = LW_SUM_WRBTR.
*     内部テーブル_決済先に格納する
APPEND GW_BSAS TO GT_BSAS_KARI.
*     使用した決済先候補情報を退避する
MOVE-CORRESPONDING GW_BSAS TO GW_USE_KARI.
COLLECT GW_USE_KARI INTO GT_USE_KARI.
EXIT.
ENDIF.
*   決済先候補の金額が決済元の伝票通貨金額を超過してない場合
*   決済元の伝票通貨金額より決済先候補の金額を減算する
LW_SUM_WRBTR = LW_SUM_WRBTR - GW_BSAS-WRBTR.
*   内部テーブル_決済先に格納する
APPEND GW_BSAS TO GT_BSAS_KARI.
*   使用した決済先候補情報を退避する
MOVE-CORRESPONDING GW_BSAS TO GW_USE_KARI.
COLLECT GW_USE_KARI INTO GT_USE_KARI.

ENDLOOP.

ENDFORM.                    " SET_KARI
*&---------------------------------------------------------------------*
*&      Form  CHECK_WAERS
*&---------------------------------------------------------------------*
*       通貨コードチェック
*----------------------------------------------------------------------*
*  -->  P_SUM_WRBTR        決済元の伝票通貨金額
*----------------------------------------------------------------------*
FORM CHECK_WAERS USING P_SUM_WRBTR.

* 決済先通貨コード≠決済元通貨コードの場合下記の処理を行う
IF GW_ZF2020-WAERS <> GW_BSAS-WAERS AND W_OK_FLG IS INITIAL.
W_OK_FLG = '1'.

CALL FUNCTION 'CONVERT_TO_LOCAL_CURRENCY'
EXPORTING
*       CLIENT                  = SY-MANDT
DATE                    = GW_BSAS-BUDAT
FOREIGN_AMOUNT          = P_SUM_WRBTR
FOREIGN_CURRENCY        = GW_ZF2020-WAERS
LOCAL_CURRENCY          = W_TCURR
*        RATE                    =
TYPE_OF_RATE            = 'M'
READ_TCURR              = 'X'
IMPORTING
*       EXCHANGE_RATE           =
*       FOREIGN_FACTOR          =
LOCAL_AMOUNT            = P_SUM_WRBTR
*       LOCAL_FACTOR            =
*       EXCHANGE_RATEX          =
*       FIXED_RATE              =
*       DERIVED_RATE_TYPE       =
EXCEPTIONS
NO_RATE_FOUND           = 1
OVERFLOW                = 2
NO_FACTORS_FOUND        = 3
NO_SPREAD_FOUND         = 4
DERIVED_2_TIMES         = 5
OTHERS                  = 6.
IF SY-SUBRC <> 0.
* MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*         WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.

*   決済先通貨コードが外貨の場合
IF GW_BSAS-WAERS <> W_TCURR.
CLEAR:GW_BKPF.
READ TABLE GT_BKPF INTO GW_BKPF
WITH KEY BELNR = GW_BSAS-BELNR
GJAHR = GW_BSAS-GJAHR.
CALL FUNCTION 'CONVERT_TO_FOREIGN_CURRENCY'
EXPORTING
*         CLIENT                  = SY-MANDT
DATE                    = GW_BSAS-BUDAT
FOREIGN_CURRENCY        = GW_BSAS-WAERS
LOCAL_AMOUNT            = P_SUM_WRBTR
LOCAL_CURRENCY          = W_TCURR
RATE                    = GW_BKPF-KURSF
TYPE_OF_RATE            = 'M'
READ_TCURR              = 'X'
IMPORTING
*         EXCHANGE_RATE           =
FOREIGN_AMOUNT          = P_SUM_WRBTR
*         FOREIGN_FACTOR          =
*         LOCAL_FACTOR            =
*         EXCHANGE_RATEX          =
*         DERIVED_RATE_TYPE       =
*         FIXED_RATE              =
EXCEPTIONS
NO_RATE_FOUND           = 1
OVERFLOW                = 2
NO_FACTORS_FOUND        = 3
NO_SPREAD_FOUND         = 4
DERIVED_2_TIMES         = 5
OTHERS                  = 6.
IF SY-SUBRC <> 0.
*MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*       WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
ENDIF.
ENDIF.
*   決済元決済通貨額更新
DATA:LW_ZF2020_UPD TYPE ZF2020.
CLEAR:LW_ZF2020_UPD.
READ TABLE GT_ZF2020_UPD INTO LW_ZF2020_UPD
WITH KEY BUKRS    = GW_ZF2020-BUKRS
LIFNR    = GW_ZF2020-LIFNR
ZFBDT    = GW_ZF2020-ZFBDT
BELNR_O  = GW_ZF2020-BELNR_O
BUZEI_O  = GW_ZF2020-BUZEI_O
GJAHR_O  = GW_ZF2020-GJAHR_O
SEQ_NO   = GW_ZF2020-SEQ_NO.
IF SY-SUBRC = 0.
GW_ZF2020-AUGBL = GW_BSEG-AUGBL. "決済伝票番号
GW_ZF2020-AUGDT = GW_BSEG-AUGDT. "決済日付
DELETE TABLE GT_ZF2020_UPD FROM LW_ZF2020_UPD.
ENDIF.
IF GW_ZF2020-SHKZG = 'S'.
GW_ZF2020-WRBTR_KS = P_SUM_WRBTR. "決済通貨額
ELSEIF GW_ZF2020-SHKZG = 'H'.
GW_ZF2020-WRBTR_KH = P_SUM_WRBTR. "決済通貨額
ENDIF.
CLEAR:GW_BKPF.
READ TABLE GT_BKPF INTO GW_BKPF
WITH KEY BELNR = GW_ZF2020-BELNR_O
GJAHR = GW_ZF2020-GJAHR_O.
GW_ZF2020-KURSF    = GW_BKPF-KURSF.
GW_ZF2020-UPDAT    = SY-DATUM.     "変更日
GW_ZF2020-UPTIM    = SY-UZEIT.     "変更時刻
GW_ZF2020-UPNAM    = SY-UNAME.     "変更者
CLEAR: GW_ZF2020-CADAT.          "支払計上日
APPEND GW_ZF2020 TO GT_ZF2020_UPD.
ENDIF.

ENDFORM.                    " CHECK_WAERS
*&---------------------------------------------------------------------*
*&      Form  GET_SUM_WRBTRS
*&---------------------------------------------------------------------*
*      使用されている金額取得する(借方)
*----------------------------------------------------------------------*
FORM GET_SUM_WRBTRS  USING  P_BUZEI
P_BELNR
P_GJAHR.

CLEAR:W_SUM_WRBTR.
SELECT SUM( WRBTR_S )
INTO W_SUM_WRBTR
FROM ZF2020
WHERE BUKRS   = GW_ZF2020-BUKRS
AND LIFNR   = GW_ZF2020-LIFNR
AND ZFBDT   = GW_ZF2020-ZFBDT
AND BELNR_O = GW_ZF2020-BELNR_O
AND GJAHR_O = GW_ZF2020-GJAHR_O
AND BUZEI_O = GW_ZF2020-BUZEI_O
AND BUZEI_S = P_BUZEI
AND BELNR_K = P_BELNR
AND GJAHR_K = P_GJAHR.

ENDFORM.                    " GET_SUM_WRBTRS
*&---------------------------------------------------------------------*
*&      Form  GET_SUM_WRBTRH
*&---------------------------------------------------------------------*
*       使用されている金額取得する(貸方)
*----------------------------------------------------------------------*
FORM GET_SUM_WRBTRH USING P_BUZEI
P_BELNR
P_GJAHR.

CLEAR:W_SUM_WRBTR.
SELECT SUM( WRBTR_H )
INTO W_SUM_WRBTR
FROM ZF2020
WHERE BUKRS   = GW_ZF2020-BUKRS
AND LIFNR   = GW_ZF2020-LIFNR
AND ZFBDT   = GW_ZF2020-ZFBDT
AND BELNR_O = GW_ZF2020-BELNR_O
AND GJAHR_O = GW_ZF2020-GJAHR_O
AND BUZEI_O = GW_ZF2020-BUZEI_O
AND BUZEI_H = P_BUZEI
AND BELNR_K = P_BELNR
AND GJAHR_K = P_GJAHR.

ENDFORM.                    " GET_SUM_WRBTRH
*&---------------------------------------------------------------------*
*&      Form  SET_KASI
*&---------------------------------------------------------------------*
*       決済先相手決定
*----------------------------------------------------------------------*
FORM SET_KASI.

REFRESH:GT_BSEG_KASI.
CLEAR:GW_BSAS_KARI,GW_BSEG_KASI.
LOOP AT GT_BSAS_KARI INTO GW_BSAS_KARI.
CLEAR: W_OK_FLG.
*   決済先に対する決済先相手候補一括取得
PERFORM GET_BSEG_KASI.
SORT GT_BSEG_KASI BY BELNR GJAHR BUZEI.

*   決済先相手に対する銀行振込情報取得
PERFORM GET_BESG_SAKNR1.
CHECK W_OK_FLG IS INITIAL.

*   決済先相手に対する手形情報を取得
PERFORM GET_BESG_SAKNR2.
CHECK W_OK_FLG IS INITIAL.

*   決済先相手に対する裏書手形情報を取得
PERFORM GET_BESG_SAKNR3.
CHECK W_OK_FLG IS INITIAL.

*   決済先相手に対する仕入割引情報を取得
PERFORM GET_BESG_SAKNR4.
CHECK W_OK_FLG IS INITIAL.

*   決済先相手に対するその他勘定情報を取得
PERFORM GET_BESG_SAKNR5.
CHECK W_OK_FLG IS INITIAL.

*   決済先相手に対する相殺勘定情報を取得
PERFORM GET_BESG_SAKNR6.
CHECK W_OK_FLG IS INITIAL.

*   決済先相手が統制勘定で決済された場合
PERFORM GET_KASI_BSAK.
CHECK W_OK_FLG IS INITIAL.

*   決済先相手が統制勘定で決済されてない場合
PERFORM GET_KASI_BSIK.
CHECK W_OK_FLG IS INITIAL.

*   決済先相手がGL勘定で決済された場合
PERFORM GET_KASI_BSAS.
CHECK W_OK_FLG IS INITIAL.

*   決済先相手がGL勘定で決済されてない場合
PERFORM GET_KASI_BSIS.
CHECK W_OK_FLG IS INITIAL.
ENDLOOP.

ENDFORM.                    " SET_KASI
*&---------------------------------------------------------------------*
*&      Form  GET_BSEG_KASI
*&---------------------------------------------------------------------*
*       決済先に対する決済先相手候補一括取得
*----------------------------------------------------------------------*
FORM GET_BSEG_KASI.

SELECT BUKRS             "会社コード
BELNR             "会計伝票番号	
GJAHR             "会計年度	
BUZEI             "会計伝票内の明細番号
AUGDT             "決済日付	
AUGBL             "決済伝票番号
KOART             "勘定タイプ
UMSKZ             "特殊仕訳コード	
SHKZG             "借方/貸方フラグ	
DMBTR             "国内通貨額	
WRBTR             "伝票通貨額
HKONT             "総勘定元帳勘定	
LIFNR             "仕入先コード	
ZFBDT             "期日計算の支払基準日
ZTERM             "支払条件
REBZG             "取引の請求書番号	
REBZJ             "関連請求書の会計年度	
REBZZ             "関連請求書明細	
REBZT             "後続伝票タイプ
INTO TABLE GT_BSEG_KASI
FROM BSEG
WHERE BUKRS =  GW_BSAS_KARI-BUKRS      "会社コード
AND BELNR =  GW_BSAS_KARI-BELNR      "会計伝票番号
AND GJAHR =  GW_BSAS_KARI-GJAHR      "会計年度
AND SHKZG <> GW_BSAS_KARI-SHKZG.     "貸借フラグ

ENDFORM.                    " GET_BSEG_KASI
*&---------------------------------------------------------------------*
*&      Form  GET_BESG_SAKNR1
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM GET_BESG_SAKNR1.

* 決済先相手に対する銀行振込情報取得
CLEAR:GW_BSEG_KASI.
LOOP AT GT_BSEG_KASI INTO GW_BSEG_KASI WHERE HKONT IN S_SAKNR1.

*   処理済みのレコードを削除する
DELETE GT_BSEG_KASI.

*   銀行振込情報が存在した場合、明細編集処理処理を行う
PERFORM CREATE_MEISAI USING '0'.

*   明細が決定できた場合、終了する
IF W_OK_FLG = '1'.
EXIT.
ENDIF.
ENDLOOP.

ENDFORM.                    " GET_BESG_SAKNR1
*&---------------------------------------------------------------------*
*&      Form  GET_BESG_SAKNR2
*&---------------------------------------------------------------------*
*       決済先相手に対する手形情報を取得
*----------------------------------------------------------------------*
FORM GET_BESG_SAKNR2.

CLEAR:GW_BSEG_KASI.
* 対象外勘定情報削除
DELETE GT_BSEG_KASI WHERE HKONT IN S_SAKNR8.
* 決済先相手に対する手形情報を取得
LOOP AT GT_BSEG_KASI INTO GW_BSEG_KASI WHERE HKONT IN S_SAKNR2.

*   処理済みのレコードを削除する
DELETE GT_BSEG_KASI.

*   手形情報が存在した場合、明細編集処理処理を行う
PERFORM CREATE_MEISAI USING '0'.

*   明細が決定できた場合、終了する
IF W_OK_FLG = '1'.
EXIT.
ENDIF.
ENDLOOP.

ENDFORM.                    " GET_BESG_SAKNR2
*&---------------------------------------------------------------------*
*&      Form  GET_BESG_SAKNR3
*&---------------------------------------------------------------------*
*       決済先相手に対する裏書手形情報を取得
*----------------------------------------------------------------------*
FORM GET_BESG_SAKNR3.

* 決済先相手に対する裏書手形情報を取得
CLEAR:GW_BSEG_KASI.
LOOP AT GT_BSEG_KASI INTO GW_BSEG_KASI WHERE HKONT IN S_SAKNR3.

*   処理済みのレコードを削除する
DELETE GT_BSEG_KASI.

*   裏書手形情報が存在した場合、明細編集処理処理を行う
PERFORM CREATE_MEISAI USING '0'.

*   明細が決定できた場合、終了する
IF W_OK_FLG = '1'.
EXIT.
ENDIF.
ENDLOOP.

ENDFORM.                    " GET_BESG_SAKNR3
*&---------------------------------------------------------------------*
*&      Form  GET_BESG_SAKNR4
*&---------------------------------------------------------------------*
*       決済先相手に対する仕入割引情報を取得
*----------------------------------------------------------------------*
FORM GET_BESG_SAKNR4.

* 決済先相手に対する仕入割引情報を取得
CLEAR:GW_BSEG_KASI.
LOOP AT GT_BSEG_KASI INTO GW_BSEG_KASI WHERE HKONT IN S_SAKNR4.

*   処理済みのレコードを削除する
DELETE GT_BSEG_KASI.

*   仕入割引情報が存在した場合、明細編集処理処理を行う
PERFORM CREATE_MEISAI USING '0'.

*   明細が決定できた場合、終了する
IF W_OK_FLG = '1'.
EXIT.
ENDIF.
ENDLOOP.


ENDFORM.                    " GET_BESG_SAKNR4
*&---------------------------------------------------------------------*
*&      Form  GET_BESG_SAKNR5
*&---------------------------------------------------------------------*
*       決済先相手に対するその他勘定情報を取得
*----------------------------------------------------------------------*
FORM GET_BESG_SAKNR5.

* 決済先相手に対するその他勘定情報を取得
CLEAR:GW_BSEG_KASI.
LOOP AT GT_BSEG_KASI INTO GW_BSEG_KASI WHERE HKONT IN S_SAKNR5.

*   処理済みのレコードを削除する
DELETE GT_BSEG_KASI.

*   その他勘定情報が存在した場合、明細編集処理処理を行う
PERFORM CREATE_MEISAI USING '0'.

*   明細が決定できた場合、終了する
IF W_OK_FLG = '1'.
EXIT.
ENDIF.
ENDLOOP.

ENDFORM.                    " GET_BESG_SAKNR5
*&---------------------------------------------------------------------*
*&      Form  GET_BESG_SAKNR6
*&---------------------------------------------------------------------*
*       決済先相手に対する相殺勘定情報を取得
*----------------------------------------------------------------------*
FORM GET_BESG_SAKNR6.

* 決済先相手に対する相殺勘定情報を取得
CLEAR:GW_BSEG_KASI.
LOOP AT GT_BSEG_KASI INTO GW_BSEG_KASI WHERE HKONT IN S_SAKNR6.

*   処理済みのレコードを削除する
DELETE GT_BSEG_KASI.

*   相殺勘定情報が存在した場合、明細編集処理処理を行う
PERFORM CREATE_MEISAI USING '0'.

*   明細が決定できた場合、終了する
IF W_OK_FLG = '1'.
EXIT.
ENDIF.
ENDLOOP.


ENDFORM.                    " GET_BESG_SAKNR6
*&---------------------------------------------------------------------*
*&      Form  GET_KASI_BSAK
*&---------------------------------------------------------------------*
*       決済先相手が統制勘定で決済された場合
*----------------------------------------------------------------------*
FORM GET_KASI_BSAK.

CLEAR:GW_BSEG_KASI.
LOOP AT GT_BSEG_KASI INTO GW_BSEG_KASI WHERE KOART = 'K'.

*   決済されていた場合
IF NOT ( GW_BSEG_KASI-AUGBL IS INITIAL ).

*     処理済みのレコードを削除する
DELETE GT_BSEG_KASI.

*     明細情報編集処理
PERFORM CREATE_MEISAI USING '1'.

*     現在読み込んでいるループパスの次レコードに取得した明細を挿入する
W_LOOP_CNT = W_LOOP_CNT + 1.
INSERT GW_ZF2020_UPD INTO GT_ZF2020 INDEX W_LOOP_CNT.

*     明細が決定できた場合、終了する 　
IF W_OK_FLG = '1'.
EXIT.
ENDIF.
ENDIF.
ENDLOOP.

ENDFORM.                    " GET_KASI_BSAK
*&---------------------------------------------------------------------*
*&      Form  GET_KASI_BSIK
*&---------------------------------------------------------------------*
*       決済先相手が統制勘定で決済されてない場合
*----------------------------------------------------------------------*
FORM GET_KASI_BSIK.

CLEAR:GW_BSEG_KASI.
LOOP AT GT_BSEG_KASI INTO GW_BSEG_KASI WHERE KOART = 'K'.

*   決済されていない場合
IF GW_BSEG_KASI-AUGBL IS INITIAL.

*     処理済みのレコードを削除する
DELETE GT_BSEG_KASI.

*     明細情報編集処理
PERFORM CREATE_MEISAI USING '1'.

*     明細が決定できた場合、終了する 　
IF W_OK_FLG = '1'.
EXIT.
ENDIF.
ENDIF.
ENDLOOP.

ENDFORM.                    " GET_KASI_BSIK
*&---------------------------------------------------------------------*
*&      Form  GET_KASI_BSAS
*&---------------------------------------------------------------------*
*       決済先相手がGL勘定で決済された場合
*----------------------------------------------------------------------*
FORM GET_KASI_BSAS.

CLEAR:GW_BSEG_KASI.
LOOP AT GT_BSEG_KASI INTO GW_BSEG_KASI WHERE KOART = 'S'.

*   決済されていた場合
IF NOT ( GW_BSEG_KASI-AUGBL IS INITIAL ).

*     処理済みのレコードを削除する
DELETE GT_BSEG_KASI.

*     明細情報編集処理
PERFORM CREATE_MEISAI USING '1'.

*     現在読み込んでいるループパスの次レコードに取得した明細を挿入する
W_LOOP_CNT = W_LOOP_CNT + 1.
INSERT GW_ZF2020_UPD INTO GT_ZF2020 INDEX W_LOOP_CNT.

*     明細が決定できた場合、終了する 　
IF W_OK_FLG = '1'.
EXIT.
ENDIF.
ENDIF.
ENDLOOP.

ENDFORM.                    " GET_KASI_BSAS
*&---------------------------------------------------------------------*
*&      Form  GET_KASI_BSIS
*&---------------------------------------------------------------------*
*       決済先相手がGL勘定で決済されてない場合
*----------------------------------------------------------------------*
FORM GET_KASI_BSIS.

CLEAR:GW_BSEG_KASI.
LOOP AT GT_BSEG_KASI INTO GW_BSEG_KASI WHERE KOART = 'S'.

*   決済されていない場合
IF GW_BSEG_KASI-AUGBL IS INITIAL.

*     処理済みのレコードを削除する
DELETE GT_BSEG_KASI.

*     明細情報編集処理
PERFORM CREATE_MEISAI USING '1'.

*     明細が決定できた場合、終了する 　
IF W_OK_FLG = '1'.
EXIT.
ENDIF.
ENDIF.
ENDLOOP.

ENDFORM.                    " GET_KASI_BSIS
*&---------------------------------------------------------------------*
*&      Form  CREATE_MEISAI
*&---------------------------------------------------------------------*
*       明細編集処理
*----------------------------------------------------------------------*
*  -->  P_FLG     = 呼び出し元処理判定フラグ                           *
*----------------------------------------------------------------------*
FORM CREATE_MEISAI USING P_FLG.
DATA: L_DATE LIKE ZF2020-CADAT.

* 使用されている金額取得する
IF GW_BSEG_KASI-SHKZG = 'S'.
PERFORM GET_SUM_WRBTRS USING GW_BSEG_KASI-BUZEI
GW_BSEG_KASI-BELNR
GW_BSEG_KASI-GJAHR.
ELSEIF GW_BSEG_KASI-SHKZG = 'H'.
PERFORM GET_SUM_WRBTRH USING GW_BSEG_KASI-BUZEI
GW_BSEG_KASI-BELNR
GW_BSEG_KASI-GJAHR.
ENDIF.

* 候補となった決済先相手が他実行日で使用済みの場合、使用金額を減算する
GW_BSEG_KASI-WRBTR = GW_BSEG_KASI-WRBTR - W_SUM_WRBTR.

* 候補となった決済先相手が他伝票で使用済みかをチェックする
CLEAR:GW_USE_KASI.
LOOP  AT GT_USE_KASI INTO GW_USE_KASI WHERE BUKRS = GW_BSEG_KASI-BUKRS
AND GJAHR = GW_BSEG_KASI-GJAHR
AND BELNR = GW_BSEG_KASI-BELNR
AND BUZEI = GW_BSEG_KASI-BUZEI.
*   他伝票で使用済みの場合、使用金額を減算する
GW_BSEG_KASI-WRBTR = GW_BSEG_KASI-WRBTR - GW_USE_KASI-WRBTR.
ENDLOOP.

* 金額が残っていた場合
CHECK GW_BSEG_KASI-WRBTR > 0.

CASE P_FLG.
*   支払計上日:転記日付
WHEN '0'.
IF NOT GW_BSAS_KARI-BUDAT IS INITIAL.
L_DATE = GW_BSAS_KARI-BUDAT.
ELSE.
CLEAR: L_DATE.
ENDIF.
*   支払計上日:初期値
WHEN '1'.
CLEAR: L_DATE.
WHEN OTHERS.
ENDCASE.

* 決定された決済先相手の合計が決済先伝票通貨額を超過した場合
IF GW_BSAS_KARI-WRBTR <= GW_BSEG_KASI-WRBTR.
GW_BSEG_KASI-WRBTR = GW_BSAS_KARI-WRBTR.
** 明細情報を取得する
PERFORM GET_MEISAI USING L_DATE
GW_BSAS_KARI-WRBTR.
** 使用した貸方情報を退避する
MOVE-CORRESPONDING GW_BSEG_KASI TO GW_USE_KASI.
COLLECT GW_USE_KASI INTO GT_USE_KASI.
W_OK_FLG = '1'.
EXIT.
ENDIF.

* 明細情報を取得する
PERFORM GET_MEISAI USING L_DATE
GW_BSEG_KASI-WRBTR.

* 借方金額の残金を算出する
GW_BSAS_KARI-WRBTR = GW_BSAS_KARI-WRBTR - GW_BSEG_KASI-WRBTR.

* 使用した借方情報を退避する
MOVE-CORRESPONDING GW_BSEG_KASI TO GW_USE_KASI.
COLLECT GW_USE_KASI INTO GT_USE_KASI.

ENDFORM.                    " CREATE_MEISAI
*---------------------------------------------------------------------*
*       FORM GET_MEISAI                                               *
*---------------------------------------------------------------------*
*       明細情報取得処理                                              *
*---------------------------------------------------------------------*
*  -->  P_DATUM    = 支払計上日                                       *
*  -->  P_DMBTR    = 貸方金額                                         *
*---------------------------------------------------------------------*
FORM GET_MEISAI USING P_DATUM
P_DMBTR.

W_MAX_SEQ = W_MAX_SEQ + 1.
CLEAR: GW_ZF2020_UPD.

* 登録データ編集処理
GW_ZF2020_UPD-MANDT      = SY-MANDT.             "クライアント
GW_ZF2020_UPD-BUKRS      = GW_ZF2020-BUKRS.      "会社コード
GW_ZF2020_UPD-LIFNR      = GW_ZF2020-LIFNR.      "仕入先
GW_ZF2020_UPD-ZFBDT      = GW_ZF2020-ZFBDT.      "締日
GW_ZF2020_UPD-BELNR_O    = GW_ZF2020-BELNR_O.    "支払依頼伝票番号
GW_ZF2020_UPD-BUZEI_O    = GW_ZF2020-BUZEI_O.    "支払依頼伝票明細番号
GW_ZF2020_UPD-GJAHR_O    = GW_ZF2020-GJAHR_O.    "支払依頼会計年度
GW_ZF2020_UPD-BLART_O    = GW_ZF2020-BLART_O.    "支払依頼伝票タイプ
GW_ZF2020_UPD-SEQ_NO     = W_MAX_SEQ.            "SEQ.
GW_ZF2020_UPD-STATUS     = W_STATUS1.            "ステータス
GW_ZF2020_UPD-ZTERM      = GW_ZF2020-ZTERM.      "支払条件
GW_ZF2020_UPD-FAEDT      = GW_ZF2020-FAEDT.      "支払期日
GW_ZF2020_UPD-SHKZG      = GW_ZF2020-SHKZG.      "貸借フラグ
GW_ZF2020_UPD-BELNR_K    = GW_BSAS_KARI-BELNR.   "会計伝票番号
CLEAR:GW_BKPF.
READ TABLE GT_BKPF INTO GW_BKPF  WITH KEY BELNR = GW_BSAS_KARI-BELNR
GJAHR = GW_BSAS_KARI-GJAHR.
GW_ZF2020_UPD-GJAHR_K    = GW_BKPF-GJAHR.        "会計年度
GW_ZF2020_UPD-BLART      = GW_BKPF-BLART.        "伝票タイプ
GW_ZF2020_UPD-BUDAT      = GW_BKPF-BUDAT.        "会計伝票転記日付
GW_ZF2020_UPD-CPUDT      = GW_BKPF-CPUDT.        "会計伝票登録日
GW_ZF2020_UPD-WAERS      = GW_BKPF-WAERS.        "通貨コード
GW_ZF2020_UPD-KURSF      = GW_BKPF-KURSF.        "換算レート
* 支払依頼が貸方の場合
IF GW_ZF2020-SHKZG = 'H'.
GW_ZF2020_UPD-HKONT_S    = GW_BSAS_KARI-HKONT.   "勘定コード(借方)
GW_ZF2020_UPD-BUZEI_S    = GW_BSAS_KARI-BUZEI.     "明細番号(借方)
GW_ZF2020_UPD-DMBTR_S    = '0'.                  "国内通貨額(借方)
GW_ZF2020_UPD-WRBTR_S    = P_DMBTR.              "伝票通貨額(借方)
GW_ZF2020_UPD-WRBTR_KS   = P_DMBTR.          "決済伝票通貨額(借方)
GW_ZF2020_UPD-HKONT_H    = GW_BSEG_KASI-HKONT.   "勘定コード(貸方)
GW_ZF2020_UPD-BUZEI_H    = GW_BSEG_KASI-BUZEI.     "明細番号(貸方)
GW_ZF2020_UPD-DMBTR_H    = '0'.                  "国内通貨額(貸方)
GW_ZF2020_UPD-WRBTR_H    = P_DMBTR.              "伝票通貨額(貸方)
GW_ZF2020_UPD-WRBTR_KH   = P_DMBTR.          "決済伝票通貨額(貸方)
* 支払依頼が借方の場合
ELSEIF GW_ZF2020-SHKZG = 'S'.
GW_ZF2020_UPD-HKONT_S    = GW_BSEG_KASI-HKONT.   "勘定コード(借方)
GW_ZF2020_UPD-BUZEI_S    = GW_BSEG_KASI-BUZEI.     "明細番号(借方)
GW_ZF2020_UPD-DMBTR_S    = '0'.                  "国内通貨額(借方)
GW_ZF2020_UPD-WRBTR_S    = P_DMBTR.              "伝票通貨額(借方)
GW_ZF2020_UPD-WRBTR_KS   = P_DMBTR.          "決済伝票通貨額(借方)
GW_ZF2020_UPD-HKONT_H    = GW_BSAS_KARI-HKONT.   "勘定コード(貸方)
GW_ZF2020_UPD-BUZEI_H    = GW_BSAS_KARI-BUZEI.     "明細番号(貸方)
GW_ZF2020_UPD-DMBTR_H    = '0'.                  "国内通貨額(貸方)
GW_ZF2020_UPD-WRBTR_H    = P_DMBTR.              "伝票通貨額(貸方)
GW_ZF2020_UPD-WRBTR_KH   = P_DMBTR.          "決済伝票通貨額(貸方)
ENDIF.
IF NOT GW_BSEG_KASI-AUGBL IS INITIAL.
GW_ZF2020_UPD-AUGBL      = GW_BSEG_KASI-AUGBL.      "決済伝票
GW_ZF2020_UPD-AUGDT      = GW_BSEG_KASI-AUGDT.      "決済日付
ELSE.
CLEAR:GW_ZF2020_UPD-AUGBL,GW_ZF2020_UPD-AUGDT.
ENDIF.
GW_ZF2020_UPD-CADAT      = P_DATUM.              "支払計上日
GW_ZF2020_UPD-CRDAT      = SY-DATUM.             "登録日
GW_ZF2020_UPD-CRTIM      = SY-UZEIT.             "登録時刻
GW_ZF2020_UPD-CRNAM      = SY-UNAME.             "登録者
CLEAR:GW_ZF2020_UPD-CMP_FLG,
GW_ZF2020_UPD-CMP_DAT.
APPEND GW_ZF2020_UPD TO GT_ZF2020_UPD.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  UPDATE_ZF2020
*&---------------------------------------------------------------------*
*       更新処理
*----------------------------------------------------------------------*
FORM UPDATE_ZF2020.

CLEAR:GW_ZF2020_UPD.
LOOP AT GT_ZF2020_UPD INTO GW_ZF2020_UPD.
*   更新用データの存在チェック
SELECT SINGLE
BELNR_O   "支払依頼伝票番号
INTO ZF2020-BELNR_O
FROM ZF2020
WHERE BUKRS    = GW_ZF2020_UPD-BUKRS
AND LIFNR    = GW_ZF2020_UPD-LIFNR
AND ZFBDT    = GW_ZF2020_UPD-ZFBDT
AND BELNR_O  = GW_ZF2020_UPD-BELNR_O
AND BUZEI_O  = GW_ZF2020_UPD-BUZEI_O
AND GJAHR_O  = GW_ZF2020_UPD-GJAHR_O
AND SEQ_NO   = GW_ZF2020_UPD-SEQ_NO.
*   更新用データの更新処理
IF SY-SUBRC = 0.
*     既存のレコードをＤＢから削除する
DELETE ZF2020 FROM GW_ZF2020_UPD.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
"支払状況テーブル削除に失敗しました
MESSAGE S604 WITH '支払状況テーブル削除'.
STOP.
ENDIF.
ENDIF.
*   更新データを登録する
INSERT INTO ZF2020 VALUES GW_ZF2020_UPD.
IF SY-SUBRC <> 0.
ROLLBACK WORK.
"支払状況テーブル登録に失敗しました
MESSAGE S604 WITH '支払状況テーブル登録'.
STOP.
ENDIF.
ENDLOOP.

ENDFORM.                    " UPDATE_ZF2020
*---------------------------------------------------------------------*
*       FORM UPDATE_ALL_STATUS                                        *
*---------------------------------------------------------------------*
*       完了ステータス更新処理                                        *
*---------------------------------------------------------------------*
FORM UPDATE_ALL_STATUS.
DATA:LW_ZF2020 TYPE ZF2020,
LW_MAX_CADAT LIKE ZF2020-CADAT.
* 決済伝票或いは支払計上日が
* ブランク以外のレコードのステータスを'9'(完了)とする
UPDATE ZF2020 SET STATUS  = W_STATUS
WHERE AUGBL  <> SPACE
OR CADAT  <> W_CADAT.

* 完了フラグ設定
REFRESH:GT_ZF2020.
CLEAR:GW_ZF2020.
SELECT *
FROM ZF2020
INTO TABLE GT_ZF2020
WHERE CMP_FLG <> W_CMP_FLG.
CLEAR:LW_ZF2020.
LOOP AT GT_ZF2020 INTO GW_ZF2020.
READ TABLE GT_ZF2020 INTO LW_ZF2020
WITH KEY BUKRS    = GW_ZF2020-BUKRS
LIFNR    = GW_ZF2020-LIFNR
ZFBDT    = GW_ZF2020-ZFBDT
BELNR_O  = GW_ZF2020-BELNR_O
BUZEI_O  = GW_ZF2020-BUZEI_O
GJAHR_O  = GW_ZF2020-GJAHR_O
STATUS   = W_STATUS1.
IF SY-SUBRC <> 0.
*      支払計上日の最大値
CLEAR:LW_MAX_CADAT.
SELECT MAX( CADAT )
INTO LW_MAX_CADAT
FROM ZF2020
WHERE BUKRS   = GW_ZF2020-BUKRS
AND LIFNR   = GW_ZF2020-LIFNR
AND ZFBDT   = GW_ZF2020-ZFBDT
AND BELNR_O = GW_ZF2020-BELNR_O
AND BUZEI_O = GW_ZF2020-BUZEI_O
AND GJAHR_O = GW_ZF2020-GJAHR_O.

UPDATE ZF2020 SET CMP_FLG  = W_CMP_FLG
CMP_DAT  = LW_MAX_CADAT
WHERE BUKRS    = GW_ZF2020-BUKRS
AND LIFNR    = GW_ZF2020-LIFNR
AND ZFBDT    = GW_ZF2020-ZFBDT
AND BELNR_O  = GW_ZF2020-BELNR_O
AND BUZEI_O  = GW_ZF2020-BUZEI_O
AND GJAHR_O  = GW_ZF2020-GJAHR_O.
ENDIF.

ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  DISPLAY_MESSAGE
*&---------------------------------------------------------------------*
*       終了処理
*----------------------------------------------------------------------*
FORM DISPLAY_MESSAGE.

DATA:L_DATUM(22) TYPE C.
CLEAR:L_DATUM.

* 最後にDB更新をCOMMITする
COMMIT WORK.

IF NOT S_DATUM1-HIGH IS INITIAL.
CONCATENATE S_DATUM1-LOW+0(4)
'/'
S_DATUM1-LOW+4(2)
'/'
S_DATUM1-LOW+6(2)
'〜'
S_DATUM1-HIGH+0(4)
'/'
S_DATUM1-HIGH+4(2)
'/'
S_DATUM1-HIGH+6(2)
INTO L_DATUM.
ELSE.
WRITE S_DATUM1-LOW TO L_DATUM.
ENDIF.
* メッセージ出力
MESSAGE S309 WITH L_DATUM
'登録件数 = '
W_INS_CNT
'件'.

ENDFORM.                    " DISPLAY_MESSAGE
*&---------------------------------------------------------------------*
*&      Form  UPDATE_STATUS
*&---------------------------------------------------------------------*
*       決済元更新処理
*----------------------------------------------------------------------*
FORM UPDATE_STATUS.

GW_ZF2020-AUGBL  = GW_BSEG-AUGBL. "決済伝票番号
GW_ZF2020-AUGDT  = GW_BSEG-AUGDT. "決済日付
GW_ZF2020-UPDAT  = SY-DATUM.      "変更日
GW_ZF2020-UPTIM  = SY-UZEIT.      "変更時刻
GW_ZF2020-UPNAM  = SY-UNAME.      "変更者
APPEND GW_ZF2020 TO GT_ZF2020_UPD.

ENDFORM.                    " UPDATE_STATUS

* { 2008/06/19 DEL START
*&---------------------------------------------------------------------*
*&      Form  CALL_FAEDT
*&---------------------------------------------------------------------*
*       支払期日取得
*----------------------------------------------------------------------*
*      -->P_ZTERM  支払条件
*      -->P_ZFBDT  締日
*      <--P_FAEDT  支払期日
*----------------------------------------------------------------------*
*FORM CALL_FAEDT USING    P_ZTERM
*                         P_ZFBDT
*                CHANGING P_FAEDT.
*
*  CALL FUNCTION 'YK_ZFBDT_GET_BY_ZTERM'
*    EXPORTING
*      I_ZTERM              = P_ZTERM
*      I_DAY                = P_ZFBDT
*    IMPORTING
*     E_ZFBDT              =
*     E_ZFBDT_OLD          =
*      E_SIHARAIBI          = P_FAEDT
*     E_ZTERM              =
*   EXCEPTIONS
*     NO_GET_T052          = 1
*     NO_GOOD_GETDAY       = 2
*     NO_GOOD_DAY          = 3
*     OTHERS               = 4.
*  IF SY-SUBRC <> 0.
*MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
*       WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
*  ENDIF.
*
*ENDFORM.                    " CALL_FAEDT
* } 2008/06/19 DEL END
*&---------------------------------------------------------------------*
*&      Form  GET_BSEG_ZFBDT
*&---------------------------------------------------------------------*
*       締日取得
*----------------------------------------------------------------------*
*      <--P_XREF3  参照キー3
*----------------------------------------------------------------------*
FORM GET_BSEG_ZFBDT CHANGING P_XREF3.

DATA: L_XREF3 LIKE BSEG-XREF3,
*{ 2008/06/19 INSERT START
LW_SHIME TYPE D.
*}   2008/06/19 INSERT END

CLEAR:L_XREF3.
SELECT SINGLE
XREF3
INTO L_XREF3
FROM BSEG
WHERE BUKRS = GW_BSIK-BUKRS        "会社コード
AND BELNR = GW_BSIK-BELNR        "会計伝票番号
AND GJAHR = GW_BSIK-GJAHR        "会計年度
AND BUZEI = GW_BSIK-BUZEI.       "明細番号

IF SY-SUBRC = 0.
*    日付チェック
CALL FUNCTION 'RP_CHECK_DATE'
EXPORTING
DATE         = L_XREF3+0(8)
EXCEPTIONS
DATE_INVALID = 1
OTHERS       = 2.
IF SY-SUBRC <> 0.
*{  2008/06/19 MOD START
CLEAR: LW_SHIME.
LW_SHIME = GW_BSIK-BUDAT.
LW_SHIME+6(2) = '01'.
P_XREF3 = LW_SHIME - 1.
*      P_XREF3 = '00000000'.
*}  2008/06/19 MOD END
ELSE.
P_XREF3 = L_XREF3+0(8).
ENDIF.
ENDIF.

ENDFORM.                    " GET_BSEG_ZFBDT
*   insert 2008/06/05 s.mikami {
*&---------------------------------------------------------------------*
*&      Form  check_yk410
*&---------------------------------------------------------------------*
*       会計連絡有無チェック。無ければ会計直転記とみなす
*----------------------------------------------------------------------*
FORM CHECK_YK410 CHANGING PV_RC.

DATA: LW_YK410  TYPE YK410.

CLEAR: PV_RC.
* 検収照合伝票タイプのみ対象としてチェックを行う
CHECK GW_BSIK-BLART IN S_BLART1.

SELECT * FROM YK410 INTO LW_YK410 UP TO 1 ROWS
WHERE BUKRS = GW_BSIK-BUKRS
AND LIFNR = GW_BSIK-LIFNR
AND GJAHR = GW_BSIK-GJAHR
AND BELNR = GW_BSIK-BELNR.
ENDSELECT.

PV_RC = SY-SUBRC.

ENDFORM.                    " check_yk410
* } insert 2008/06/05 s.mikami
*   insert 2008/06/12 S.MIKAMI {
*&---------------------------------------------------------------------*
*&      Form  set_FAEDT
*&---------------------------------------------------------------------*
*       支払期日の置換
*----------------------------------------------------------------------*
FORM SET_FAEDT.

DATA: LT_ZF2020 TYPE TABLE OF ZF2020,
LW_ZF2020 TYPE ZF2020.

* ローカル内部テーブルにコピー
APPEND LINES OF GT_ZF2020_UPD TO LT_ZF2020.
REFRESH: GT_ZF2020_UPD.

* 支払期日を下記の通り置換する
* 1)親データ(SEQ=001)の場合はそのまま
* 2)支払データ(支払計上日あり)の場合、初期値
* 3)残余データ(支払計上日なし)の場合、残余明細の支払基準日
LOOP AT LT_ZF2020 INTO LW_ZF2020.
IF  LW_ZF2020-SEQ_NO = '001'.
ELSE.
IF NOT LW_ZF2020-CADAT IS INITIAL.
CLEAR: LW_ZF2020-FAEDT.
ELSE.
PERFORM GET_ZFBDT CHANGING LW_ZF2020.
ENDIF.
ENDIF.
APPEND LW_ZF2020 TO GT_ZF2020_UPD.
ENDLOOP.

ENDFORM.                    " set_FAEDT

*&---------------------------------------------------------------------*
*&      Form  get_zfbdt
*&---------------------------------------------------------------------*
*       支払基準日の取得
*----------------------------------------------------------------------*
FORM GET_ZFBDT CHANGING VALUE(PW_ZF2020) TYPE ZF2020.

DATA: LV_BUZEI TYPE BSEG-BUZEI.

IF PW_ZF2020-SHKZG = 'H'.
LV_BUZEI = PW_ZF2020-BUZEI_H.
ELSE.
LV_BUZEI = PW_ZF2020-BUZEI_S.
ENDIF.

*   modify 2008/06/25 S.MIKAMI {
CLEAR: PW_ZF2020-FAEDT.
*  CLEAR: PW_ZF2020-FAEDT,
*         PW_ZF2020-ZTERM.
* } modify 2008/06/25 S.MIKAMI

*   modify 2008/06/25 S.MIKAMI {
*  SELECT ZFBDT ZTERM FROM BSEG UP TO 1 ROWS
*                     INTO (PW_ZF2020-FAEDT,
*                           PW_ZF2020-ZTERM)
SELECT ZFBDT FROM BSEG UP TO 1 ROWS
INTO PW_ZF2020-FAEDT
* } modify 2008/06/25 S.MIKAMI
WHERE BUKRS = PW_ZF2020-BUKRS
AND BELNR = PW_ZF2020-BELNR_K
AND GJAHR = PW_ZF2020-GJAHR_K
AND BUZEI = LV_BUZEI.
ENDSELECT.

IF SY-SUBRC <> 0
OR PW_ZF2020-FAEDT IS INITIAL.
PW_ZF2020-FAEDT = PW_ZF2020-BUDAT.
ENDIF.

ENDFORM.                    " get_zfbdt
* } insert 2008/06/12 S.MIKAMI
*   insert 2008/06/25 S.MIKAMI {
*&---------------------------------------------------------------------*
*&      Form  get_lfm1
*&---------------------------------------------------------------------*
*       仕入先マスタ購買組織データの一括取得
*----------------------------------------------------------------------*
FORM GET_LFM1.

SELECT LIFNR          "仕入先
EKORG          "購買組織
ZTERM          "支払条件
INTO TABLE GT_LFM1
FROM LFM1.

ENDFORM.                                                    " get_lfm1
* } insert 2008/06/25 S.MIKAMI







*
